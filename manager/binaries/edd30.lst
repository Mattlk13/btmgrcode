     1                                  ; asmsyntax=nasm
     2                                  ;
     3                                  ; CD-ROM Boot Extension v 1.1 for Smart Boot Manager
     4                                  ; 
     5                                  ; Copyright (C) 2000, Christopher Li <chrisl@gnuchina.org>.
     6                                  ; Copyright (C) 2000, James Su <suzhe@gnuchina.org>
     7                                  ;
     8                                  ; This is free software, you can redistribute it and/or modify it
     9                                  ; under the terms of the GNU General Public License version 2 or above.
    10                                  ;
    11                                  ; The ATAPI driver is based on the source code of atadrv written by
    12                                  ; Hale Landis <hlandis@ibm.net>, Thanks him a lot!
    13                                  ;
    14                                  ; Without his great program, we could not implement the CD-ROM Boot feature
    15                                  ; so quickly.
    16                                  ;
    17                                  
    18                                  %include "helptool.h"
    19                              <1> %ifndef _help_tool_inc
    20                              <1> %define _help_tool_inc
    21                              <1> 
    22                              <1> ; this file define the help macros for the nasm assembers. Using those macros
    23                              <1> ; can moduler program in the assember, do not need to jmp any more.
    24                              <1> ;						--have fun!!
    25                              <1> ; 
    26                              <1> ; Copyright 2000 Christopher Li <chrisl@turbolinux.com.cn>
    27                              <1> ; 
    28                              <1> 
    29                              <1> %assign __cont__ 0
    30                              <1> %assign __break__ 0
    31                              <1> %assign __return__ 0
    32                              <1> %assign __level__ 0
    33                              <1> %assign __cndblock__ 0
    34                              <1> %macro cat_define 3
    35                              <1> %define %{1}%{2} %{3}
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> %macro l_define 4
    39                              <1> %define %{1}%{2} %{3}%{4}
    40                              <1> %endmacro
    41                              <1> 
    42                              <1> %macro cat_undef 3
    43                              <1> %undef %{1}%{2}%{3}
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro cat_lable 2
    47                              <1> %{1}%{2}:
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro linecat 3
    51                              <1> 	%1 %{2}%{3}
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro cat_jc 3
    55                              <1> 	j%+1 %{2}%{3}
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro cat_jnc 3
    59                              <1> 	j%-1 %{2}%{3}
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro cat_jc_near 3
    63                              <1> 	j%+1 near %{2}%{3}
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> %macro cat_jnc_near 3
    67                              <1> 	j%-1 near %{2}%{3}
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> 
    71                              <1> %macro cat_jmp 2
    72                              <1> 	jmp short %{1}%{2}
    73                              <1> %endmacro
    74                              <1> 
    75                              <1> %macro cat_jmp_near 2
    76                              <1> 	jmp near %{1}%{2}
    77                              <1> %endmacro
    78                              <1> 
    79                              <1> %macro jmp_near 2
    80                              <1> 	%if %1 > 0
    81                              <1> 		jmp near %2
    82                              <1> 	%else
    83                              <1> 		jmp short %2
    84                              <1> 	%endif
    85                              <1> %endmacro
    86                              <1> 
    87                              <1> %macro con_push 1
    88                              <1> 	%assign __lastlevel__ __level__
    89                              <1> 	%assign __level__ __level__ + 1
    90                              <1> 	%if __return__ > 0
    91                              <1> 		%assign con_return 1
    92                              <1> 	%else
    93                              <1> 		%assign con_return 0
    94                              <1> 	%endif
    95                              <1> 
    96                              <1> 	%if __cont__ > 0
    97                              <1> 		%assign con_cont 1
    98                              <1> 	%else
    99                              <1> 		%assign con_cont 0
   100                              <1> 	%endif
   101                              <1> 	%if __break__ > 0
   102                              <1> 		%assign con_break 1
   103                              <1> 	%else
   104                              <1> 		%assign con_break 0
   105                              <1> 	%endif
   106                              <1> ; if the contex are going to provide the lable, then we don''t provide it twice.
   107                              <1> 	%ifidn %1,proc
   108                              <1> 		%assign con_return 0
   109                              <1> 	%elifidn %1,forcx
   110                              <1> 		%assign con_break 0
   111                              <1> 	%elifidn %1,repeat
   112                              <1> 		%assign con_cont 0
   113                              <1> 		%assign con_break 0
   114                              <1> 	%elifidn %1,while
   115                              <1> 		%assign con_cont 0
   116                              <1> 		%assign con_break 0
   117                              <1> 	%endif
   118                              <1> 
   119                              <1> 	%if __cndblock__ == 1
   120                              <1> 	    l_define %$ifnot,__lastlevel__,%$ifnot,{}
   121                              <1> 	%endif
   122                              <1> 
   123                              <1> 	%push %1
   124                              <1> 	%if con_return
   125                              <1> 	    l_define %$return,__level__,%$$return,__lastlevel__
   126                              <1> 	%endif
   127                              <1> 	%if con_break
   128                              <1> 	    l_define %$break,__level__,%$$break,__lastlevel__
   129                              <1> 	%endif
   130                              <1> 	%if con_cont
   131                              <1> 	    l_define %$cont,__level__,%$$cont,__lastlevel__
   132                              <1> 	%endif
   133                              <1> 	
   134                              <1> 	%ifidn %1,andblock
   135                              <1> 	    l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
   136                              <1> 	%elifidn %1,orblock
   137                              <1> 	    l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
   138                              <1> 	%endif	
   139                              <1> %endmacro
   140                              <1> 
   141                              <1> %macro con_pop 0
   142                              <1> 	%pop
   143                              <1> 	%assign __level__ __level__ - 1
   144                              <1> %endmacro
   145                              <1> 
   146                              <1> %macro proc 1-*
   147                              <1> GLOBAL %{1}
   148                              <1> %{1}:
   149                              <1> con_push proc
   150                              <1> %assign  __return__ __return__ + 1
   151                              <1> %assign __have_frame__ 0
   152                              <1> %assign %$have_local 0
   153                              <1> %assign %$have_save  0
   154                              <1> %assign __save_all__ 0
   155                              <1> %assign %$local_args 0
   156                              <1> %assign %$proc_args 0
   157                              <1> %assign __save_args__ 0
   158                              <1> %if %0 > 1
   159                              <1> 	%assign args %0 - 1
   160                              <1> 	%assign %$bp_off 4
   161                              <1> 	%assign i 0
   162                              <1> 	%rotate 1
   163                              <1> 	%ifidn %1,withlocal
   164                              <1> 		%assign %$have_local 1
   165                              <1> 		%assign args args -1
   166                              <1> 		%rotate 1
   167                              <1> 	%endif 
   168                              <1> 	%assign %$proc_args args
   169                              <1> 	%rep args
   170                              <1> 		; define the args
   171                              <1> 		%%inputarg__%{1} EQU %$bp_off
   172                              <1> 		%undef .%1
   173                              <1> 		%define .%{1} %%inputarg__%{1}+bp
   174                              <1> 		cat_define %$proc_argv ,i,%1 
   175                              <1> 		%assign %$bp_off %$bp_off + 2
   176                              <1> 		%assign i i+1
   177                              <1> 		%rotate 1
   178                              <1> 	%endrep
   179                              <1> 	%if %$have_local==0
   180                              <1> 		enter 0,0
   181                              <1> 		%assign __have_frame__ 1
   182                              <1> 	%endif
   183                              <1> %endif
   184                              <1> %endmacro
   185                              <1> 
   186                              <1> %macro local 0-*
   187                              <1> %ifctx proc
   188                              <1> 	%if %$have_local == 1
   189                              <1> 		%assign argc %0
   190                              <1> 		%assign local_vars 0
   191                              <1> 		%assign %$have_local 2
   192                              <1> 		%assign local_off 0
   193                              <1> 		
   194                              <1> 		%assign i 0
   195                              <1> 		%rep argc
   196                              <1> 			%ifnum %2
   197                              <1> 				%assign local_off local_off+%2
   198                              <1> 				%assign token_eat 2
   199                              <1> 			%else
   200                              <1> 				%assign local_off local_off+2
   201                              <1> 				%assign token_eat 1
   202                              <1> 			%endif
   203                              <1> 
   204                              <1> 			%%local__%{1} EQU local_off
   205                              <1> 			%undef .%{1}
   206                              <1> 			%define .%{1} bp-%%local__%{1}
   207                              <1> 			cat_define %$proc_argv ,i,%1 
   208                              <1> 			%assign argc argc-token_eat
   209                              <1> 			%if argc <= 0
   210                              <1> 				%exitrep
   211                              <1> 			%endif
   212                              <1> 			%assign i i+1
   213                              <1> 			%rotate token_eat
   214                              <1> 		%endrep
   215                              <1> 		%assign %$local_args i
   216                              <1> 		enter local_off,0
   217                              <1> 		%assign __have_frame__ 1
   218                              <1> 	%else
   219                              <1> 		%error "`proc' not declear `withlocal' as the first argument"
   220                              <1> 	%endif
   221                              <1> %else
   222                              <1> 	%error "expected `proc' before `local'"
   223                              <1> %endif
   224                              <1> %endmacro
   225                              <1> 
   226                              <1> %macro invoke 1-*
   227                              <1> 	%if %0 == 2
   228                              <1> 	    push word %1
   229                              <1>     	    %assign rargc 1	 	    
   230                              <1> 	%else
   231                              <1> 	%rotate -2
   232                              <1> 	%assign argc %0-1
   233                              <1> 	%assign rargc 0
   234                              <1> 	%rep argc
   235                              <1> 	    %ifidn %1,byte
   236                              <1> 	     	push byte %2
   237                              <1> 		%rotate -1
   238                              <1> 		%assign argc argc -1
   239                              <1> 		%assign rargc rargc +1
   240                              <1> 	    %elifidn %1,word
   241                              <1> 	    	push word %2
   242                              <1> 		%rotate -1
   243                              <1> 		%assign argc argc -1
   244                              <1> 		%assign rargc rargc +1
   245                              <1> 	    %elifidn %1,dword
   246                              <1> 	        push dword %2
   247                              <1> 		%rotate -1
   248                              <1> 		%assign argc argc -1
   249                              <1> 		%assign rargc rargc +2
   250                              <1> 	    %else
   251                              <1> 	        push word %2
   252                              <1> 		%assign rargc rargc +1
   253                              <1>     	    %endif
   254                              <1> 	    %rotate -1
   255                              <1> 	    %assign argc argc -1
   256                              <1> 	    %if argc <=0 
   257                              <1> 	    	%exitrep
   258                              <1> 	    %endif
   259                              <1> 	%endrep
   260                              <1> 	%rotate 1
   261                              <1> 	%endif
   262                              <1> 	call %1
   263                              <1> 	add sp,(rargc)*2
   264                              <1> %endmacro
   265                              <1> 
   266                              <1> %macro save 1-*
   267                              <1> %ifctx proc
   268                              <1> 	%if %$have_local == 1
   269                              <1> 		%error "`save' must after `local'"
   270                              <1> 	%endif
   271                              <1> 
   272                              <1> 	%ifidn all,%1
   273                              <1> 		%assign __save_all__ 1
   274                              <1> 		%if %0 > 1
   275                              <1> 			%ifidn frame,%2
   276                              <1> 				%if __have_frame__ == 0
   277                              <1> 					enter 0,0
   278                              <1> 					%assign __have_frame__ 1
   279                              <1> 					%assign local_off 0
   280                              <1> 				%endif
   281                              <1> 			%endif
   282                              <1> 		%endif
   283                              <1> 		pusha
   284                              <1> 		%if __have_frame__ == 1
   285                              <1> 			%undef __AX
   286                              <1> 			%undef __BX
   287                              <1> 			%undef __CX
   288                              <1> 			%undef __DX
   289                              <1> 			%undef __SI
   290                              <1> 			%undef __DI
   291                              <1> 			%idefine __AX bp-local_off - 2
   292                              <1> 			%idefine __CX bp-local_off - 4
   293                              <1> 			%idefine __DX bp-local_off - 6
   294                              <1> 			%idefine __BX bp-local_off - 8
   295                              <1> 			; %idefine __SP bp-local_off - 10
   296                              <1> 			; %idefine __BP bp-local_off - 12
   297                              <1> 			%idefine __SI bp-local_off - 14
   298                              <1> 			%idefine __DI bp-local_off - 16
   299                              <1> 		%endif
   300                              <1> 	%elifidn alld,%1
   301                              <1> 		%assign __save_all__ 2
   302                              <1> 		%if %0 > 1
   303                              <1> 			%ifidn frame,%2
   304                              <1> 				%if __have_frame__ == 0
   305                              <1> 					enter 0,0
   306                              <1> 					%assign __have_frame__ 1
   307                              <1> 					%assign local_off 0
   308                              <1> 				%endif
   309                              <1> 			%endif
   310                              <1> 		%endif
   311                              <1> 		pushad
   312                              <1> 		%if __have_frame__ == 1
   313                              <1> 			%undef __EAX
   314                              <1> 			%undef __EBX
   315                              <1> 			%undef __ECX
   316                              <1> 			%undef __EDX
   317                              <1> 			%undef __ESI
   318                              <1> 			%undef __EDI
   319                              <1> 			%idefine __EAX bp-local_off - 4
   320                              <1> 			%idefine __ECX bp-local_off - 8
   321                              <1> 			%idefine __EDX bp-local_off - 12
   322                              <1> 			%idefine __EBX bp-local_off - 16
   323                              <1> 			; %idefine __SP bp-local_off - 10
   324                              <1> 			; %idefine __BP bp-local_off - 12
   325                              <1> 			%idefine __ESI bp-local_off - 18
   326                              <1> 			%idefine __EDI bp-local_off - 32
   327                              <1> 		%endif
   328                              <1> 
   329                              <1> 	%else
   330                              <1> 		%assign __save_args__ %0
   331                              <1> 		%assign __save_all__ 0
   332                              <1> 		%assign i %0
   333                              <1> 		%rep %0
   334                              <1> 			push %1
   335                              <1> 			cat_define %$save_argv ,i,%1 
   336                              <1> 			%rotate 1
   337                              <1> 			%assign i i - 1
   338                              <1> 		%endrep
   339                              <1> 	%endif
   340                              <1> %else
   341                              <1> 	%error "`save' must after `proc'"
   342                              <1> %endif
   343                              <1> %endmacro
   344                              <1> 
   345                              <1> %macro endp 0-1
   346                              <1> %ifnctx proc
   347                              <1> 	%error "expected `proc' before `endp'"
   348                              <1> %endif
   349                              <1> 	cat_lable %$return,__level__
   350                              <1> 	%if __save_all__ ==1 
   351                              <1> 		popa
   352                              <1> 	%elif __save_all__ == 2
   353                              <1> 		popad
   354                              <1> 	%elif __save_args__ > 0
   355                              <1> 		%assign i 1
   356                              <1> 		%rep __save_args__
   357                              <1> 			linecat pop, %$save_argv,i
   358                              <1> 			%assign i i+1
   359                              <1> 		%endrep
   360                              <1> 	%endif
   361                              <1> 	%if __have_frame__ > 0
   362                              <1> 	    leave
   363                              <1> 	%endif
   364                              <1> 	; cleanup proc_args
   365                              <1> 	%assign i 0
   366                              <1> 	%rep %$proc_args
   367                              <1> ;		%undef %$proc_argv1
   368                              <1> 		%assign i i+1
   369                              <1> 	%endrep
   370                              <1> 	; cleanup local_args
   371                              <1> 	%assign i 0
   372                              <1> 	%rep %$local_args
   373                              <1> ;		cat_undef %$local_argv,i
   374                              <1> 		%assign i i+1
   375                              <1> 	%endrep
   376                              <1> 	ret
   377                              <1> 	con_pop
   378                              <1> 	%assign  __return__ __return__ - 1
   379                              <1> %endmacro
   380                              <1> 
   381                              <1> %macro mov_ax 1
   382                              <1> 	%if %1 == 0
   383                              <1> 		sub ax,ax
   384                              <1> 	%else
   385                              <1> 		mov ax,%1
   386                              <1> 	%endif
   387                              <1> %endmacro
   388                              <1> 
   389                              <1> %macro return 0-*
   390                              <1>     %if %0 > 0
   391                              <1>     	%assign __near__ 0
   392                              <1>     	%assign argc %0
   393                              <1> 	%ifidn %1,near
   394                              <1> 		%assign __near__ 1
   395                              <1> 		%assign argc argc-1
   396                              <1> 		%rotate 1
   397                              <1> 	%endif
   398                              <1> 	%if argc > 0
   399                              <1> 	%ifidn %1,if
   400                              <1> 	    ; return if, {cmp ax, 0},e 
   401                              <1> 	    %rotate 1
   402                              <1> 	    %rep argc-2
   403                              <1> 		%1
   404                              <1> 		%rotate 1
   405                              <1> 	    %endrep
   406                              <1> 	    %if __near__ == 0
   407                              <1> 	    	cat_jc %1,%$return,__level__
   408                              <1> 	    %else
   409                              <1> 	    	cat_jc_near %1,%$return,__level__
   410                              <1> 	    %endif	
   411                              <1> 	%else
   412                              <1> 	    %error "expect `if' after `return'"
   413                              <1> 	%endif
   414                              <1> 	%else
   415                              <1> 	%if __near__ == 0
   416                              <1> 		cat_jmp %$return,__level__
   417                              <1> 	%else
   418                              <1> 		cat_jmp_near %$return,__level__
   419                              <1> 	%endif
   420                              <1> 	%endif
   421                              <1>     %else
   422                              <1>     	%if __have_frame__ == 0 && __save_all__ == 0 && __save_args__ == 0
   423                              <1> 		ret
   424                              <1> 	%else	
   425                              <1>     		cat_jmp %$return,__level__
   426                              <1> 	%endif	
   427                              <1>     %endif
   428                              <1> %endmacro
   429                              <1> 
   430                              <1> 
   431                              <1> 
   432                              <1> %macro forcx 0-1
   433                              <1> con_push forcx
   434                              <1> %assign  __break__ __break__ + 1
   435                              <1> %if %0 > 0
   436                              <1> 	mov	cx, %1
   437                              <1> %endif
   438                              <1> %$begin:
   439                              <1> %endmacro
   440                              <1> 
   441                              <1> %macro endforcx 0-*
   442                              <1>     %ifnctx forcx
   443                              <1> 	%error "expected `forcx' before `endfor'"
   444                              <1>     %endif
   445                              <1> 	%if %0 > 0
   446                              <1> 	    %ifidn %1,while
   447                              <1> 	    	%rotate 1
   448                              <1> 	    	cat_lable %$cont,__level__
   449                              <1> 	    	%rep %0 - 2
   450                              <1> 			%1
   451                              <1> 			%rotate 1
   452                              <1> 	    	%endrep
   453                              <1> 	    %else
   454                              <1> 	    	%error "expected `while' after `endfor'"
   455                              <1> 	    %endif
   456                              <1>             loop%+1 %$begin
   457                              <1> 	%else
   458                              <1> 	    loop %$begin
   459                              <1> 	%endif
   460                              <1> 	%$end:
   461                              <1> 	cat_lable %$break,__level__
   462                              <1> 	
   463                              <1> 	con_pop
   464                              <1> 	%assign  __break__ __break__ - 1
   465                              <1> %endmacro
   466                              <1> 
   467                              <1> ; forcx 5, e
   468                              <1> ;	mov cx,ax
   469                              <1> ;	cmp ax,bx
   470                              <1> ; endfor 
   471                              <1> ;
   472                              <1> 
   473                              <1> %macro repeat 0
   474                              <1> con_push repeat
   475                              <1> %assign  __break__ __break__ + 1
   476                              <1> %assign  __cont__ __cont__ + 1
   477                              <1> %$begin:
   478                              <1> cat_lable %$cont,__level__
   479                              <1> %endmacro
   480                              <1> 
   481                              <1> %macro until 1-*
   482                              <1>     %assign __near__ 0
   483                              <1>     %assign __argc__ %0
   484                              <1>     %ifidn near,%1
   485                              <1>     	%assign __near__ 1
   486                              <1>     	%rotate 1
   487                              <1> 	%assign __argc__ __argc__ -1
   488                              <1>     %endif	
   489                              <1>     %rep __argc__ -1
   490                              <1> 	%1
   491                              <1> 	%rotate 1
   492                              <1>     %endrep
   493                              <1>     %ifctx repeat
   494                              <1>     	%if __near__ >0
   495                              <1> 		j%-1 near %$begin
   496                              <1> 	%else
   497                              <1> 	        j%-1 %$begin
   498                              <1> 	%endif
   499                              <1> 	%$end:
   500                              <1> 	cat_lable %$break,__level__
   501                              <1>     %else
   502                              <1> 	%error "expected `repeat' before `until'"
   503                              <1>     %endif
   504                              <1> con_pop
   505                              <1> %assign  __break__ __break__ - 1
   506                              <1> %assign  __cont__ __cont__ - 1
   507                              <1> %endmacro
   508                              <1> 
   509                              <1> ; repeat
   510                              <1> ;	mov cx,ax
   511                              <1> ;	cmp ax,bx
   512                              <1> ; until e
   513                              <1> ;
   514                              <1> 
   515                              <1> %macro while 0-*
   516                              <1> con_push while
   517                              <1> %assign  __break__ __break__ + 1
   518                              <1> %assign  __cont__ __cont__ + 1
   519                              <1> %$begin:
   520                              <1> cat_lable %$cont,__level__
   521                              <1> %if %0 > 0
   522                              <1>     %rep %0 -1
   523                              <1> 	%1
   524                              <1> 	%rotate 1
   525                              <1>     %endrep
   526                              <1>     j%-1 %$end
   527                              <1> %endif
   528                              <1> %endmacro
   529                              <1> 
   530                              <1> %macro endwhile 0
   531                              <1>     %ifctx while
   532                              <1>           jmp %$begin
   533                              <1> 	  %$end:
   534                              <1> 	  cat_lable %$break,__level__
   535                              <1>     %else
   536                              <1> 	%error "expected `while' before `endwhile'"
   537                              <1>     %endif
   538                              <1> con_pop
   539                              <1> %assign  __break__ __break__ + 1
   540                              <1> %assign  __cont__ __cont__ + 1
   541                              <1> %endmacro
   542                              <1> 
   543                              <1> ; while {cmp ax, bx}, e
   544                              <1> ;   mov ax, cx
   545                              <1> ; endwhile
   546                              <1> 
   547                              <1> %macro break 0-*
   548                              <1> %if %0 > 0
   549                              <1> 	%ifidn %1,if
   550                              <1> 	    %rotate 1
   551                              <1> 	    %rep %0 - 2
   552                              <1> 	    %1
   553                              <1> 	    %rotate 1
   554                              <1> 	    %endrep
   555                              <1> 	    cat_jc %1,%$break,__level__
   556                              <1> 	%else
   557                              <1> 	    %error "expect `if' after `break'"
   558                              <1> 	%endif
   559                              <1> %else
   560                              <1> 	cat_jmp %$break,__level__
   561                              <1> %endif
   562                              <1> %endmacro
   563                              <1> 
   564                              <1> %macro continue 0-*
   565                              <1> %if %0 > 0
   566                              <1> 	%ifidn %1,if
   567                              <1> 	    %rotate 1
   568                              <1> 	    %rep %0 - 2
   569                              <1> 	    %1
   570                              <1> 	    %rotate 1
   571                              <1> 	    %endrep
   572                              <1> 	    cat_jc %1,%$cont,__level__
   573                              <1> 	%else
   574                              <1> 	    %error "expect `if' after `continue'"
   575                              <1> 	%endif
   576                              <1> %else
   577                              <1> 	cat_jmp %$cont,__level__
   578                              <1> %endif
   579                              <1> %endmacro
   580                              <1> 
   581                              <1> %macro goto 1-*
   582                              <1> %if %0 > 1
   583                              <1> 	%ifidn %2,if
   584                              <1> 	    %rotate 1
   585                              <1> 	    %rep %0 - 3
   586                              <1> 	    	%2
   587                              <1> 	    	%rotate 1
   588                              <1> 	    %endrep
   589                              <1> 	    %rotate 1
   590                              <1> 	    j%+1 %2
   591                              <1> 	%else
   592                              <1> 	    %error "expect `if' after `continue'"
   593                              <1> 	%endif
   594                              <1> %else
   595                              <1> 	jmp %1
   596                              <1> %endif
   597                              <1> %endmacro
   598                              <1> 
   599                              <1> %macro goton 1-*
   600                              <1> %if %0 > 1
   601                              <1> 	%ifidn %2,if
   602                              <1> 	    %rotate 1
   603                              <1> 	    %rep %0 - 3
   604                              <1> 	    	%2
   605                              <1> 	    	%rotate 1
   606                              <1> 	    %endrep
   607                              <1> 	    %rotate 1
   608                              <1> 	    j%+1 NEAR %2
   609                              <1> 	%else
   610                              <1> 	    %error "expect `if' after `continue'"
   611                              <1> 	%endif
   612                              <1> %else
   613                              <1> 	jmp %1
   614                              <1> %endif
   615                              <1> %endmacro
   616                              <1> 
   617                              <1> %macro if 0-*
   618                              <1>     %rep %0 -1
   619                              <1> 	%1
   620                              <1> 	%rotate 1
   621                              <1>     %endrep
   622                              <1> 
   623                              <1>     con_push if
   624                              <1> 
   625                              <1>     %if %0 > 0
   626                              <1>     	j%-1 %$ifnot
   627                              <1>     %endif
   628                              <1>     %assign %$elif_level 0
   629                              <1> %endmacro
   630                              <1> 
   631                              <1> 
   632                              <1> %macro andblock 0
   633                              <1> 	%assign __cndblock__ __cndblock__ + 1
   634                              <1> 	con_push andblock
   635                              <1> %endmacro
   636                              <1> 
   637                              <1> %macro orblock 0
   638                              <1> 	%assign __cndblock__ __cndblock__ + 1
   639                              <1> 	con_push orblock
   640                              <1> %endmacro
   641                              <1> 
   642                              <1> %macro endblock 0-1
   643                              <1> 	%ifctx orblock
   644                              <1> 		;cat_jmp %$ifnot,__level__
   645                              <1> 		%$iftrue:
   646                              <1> 	%elifctx andblock
   647                              <1> 	%else
   648                              <1> 		%error "not in andblock or orblock"
   649                              <1> 	%endif
   650                              <1> 	con_pop
   651                              <1> 	%assign __cndblock__ __cndblock__ - 1
   652                              <1> %endmacro
   653                              <1> 
   654                              <1> %macro condiction 1-*
   655                              <1> 	%rep %0 -1
   656                              <1> 		%1
   657                              <1> 		%rotate 1
   658                              <1> 	%endrep
   659                              <1> 	%ifctx andblock
   660                              <1> 		cat_jnc %1,%$ifnot,__level__
   661                              <1> 	%elifctx orblock
   662                              <1> 		j%+1 %$iftrue
   663                              <1> 	%else
   664                              <1> 		%error "not in the andblock or orblock"
   665                              <1> 	%endif
   666                              <1> %endmacro
   667                              <1> 
   668                              <1> %macro else 0-1
   669                              <1>     %assign __near__ 0
   670                              <1>     %if %0 >0
   671                              <1>     	%ifidn %1 near
   672                              <1> 		%assign __near__ 1
   673                              <1> 	%endif
   674                              <1>     %endif
   675                              <1>     %ifctx if
   676                              <1>         %repl else
   677                              <1>         jmp_near __near__,%$ifend
   678                              <1>         %$ifnot:
   679                              <1>     %elifctx elif
   680                              <1> ;	%assign elselevel %$elif_level - 1
   681                              <1> 	jmp_near __near__,%$ifend
   682                              <1> 	%$ifnot:
   683                              <1> 	%repl else
   684                              <1> 	
   685                              <1> ;	con_pop
   686                              <1> ;	%rep elselevel
   687                              <1> ;		%$ifend:
   688                              <1> ;		con_pop
   689                              <1> ;	%endrep
   690                              <1>     %else
   691                              <1>         %error "expected `if' before `else'"
   692                              <1>     %endif
   693                              <1> %endmacro
   694                              <1> 
   695                              <1> %macro elif 1-*
   696                              <1> 	%ifctx elif
   697                              <1> 		%assign level %$elif_level + 1
   698                              <1> 	%else 
   699                              <1> 		%assign level 1
   700                              <1> 	%endif
   701                              <1> 	%repl else
   702                              <1> 	jmp %$ifend
   703                              <1> 	%$ifnot:
   704                              <1> 	%rep %0 -1
   705                              <1> 		%1
   706                              <1> 		%rotate 1
   707                              <1> 	%endrep
   708                              <1> 	con_push elif
   709                              <1> 	j%-1 %$ifnot
   710                              <1> 	%assign %$elif_level level
   711                              <1> %endmacro
   712                              <1> 
   713                              <1> %macro endif 0
   714                              <1>     %assign elselevel 0
   715                              <1>     %ifctx if
   716                              <1>         %$ifnot:
   717                              <1>         con_pop
   718                              <1>     %elifctx else
   719                              <1>         %assign elselevel %$elif_level
   720                              <1>         %$ifend:
   721                              <1>         con_pop
   722                              <1>     %elifctx elif
   723                              <1> 	%assign elselevel %$elif_level
   724                              <1> 	%$ifnot:
   725                              <1> 	con_pop
   726                              <1>     %else
   727                              <1>         %error "expected `if' or `else' before `endif'"
   728                              <1>     %endif
   729                              <1> 	%rep elselevel
   730                              <1> 		%$ifend:
   731                              <1> 		con_pop
   732                              <1> 	%endrep
   733                              <1> %endmacro
   734                              <1> ;          cmp ax,bx
   735                              <1> ;          if ae
   736                              <1> ;            cmp bx,cx
   737                              <1> ;            if ae
   738                              <1> ;              mov ax,cx
   739                              <1> ;            else
   740                              <1> ;              mov ax,bx
   741                              <1> ;            endif
   742                              <1> ;          else
   743                              <1> ;            cmp ax,cx
   744                              <1> ;            if ae
   745                              <1> ;              mov ax,cx
   746                              <1> ;            endif
   747                              <1> ;          endif
   748                              <1> 
   749                              <1> %push __base__
   750                              <1> %endif
   751                                  %include "macros.h"
   752                              <1> ; macros.h
   753                              <1> ;
   754                              <1> ; some nasm macros that simplify the coding.
   755                              <1> ;
   756                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   757                              <1> ;
   758                              <1> 
   759                              <1> %ifndef DEFINE_MACROS
   760                              <1> %define DEFINE_MACROS
   761                              <1> 
   762                              <1> %macro retz 0
   763                              <1>        jnz %%skip
   764                              <1>        ret
   765                              <1> %%skip:
   766                              <1> %endmacro
   767                              <1> 
   768                              <1> %define jmpz  jz near
   769                              <1> %define jmpnz jnz near
   770                              <1> %define jmpe  je near
   771                              <1> %define jmpne jne near
   772                              <1> %define jmpc  jc near
   773                              <1> %define jmpnc jnc near
   774                              <1> %define jmpa  ja near
   775                              <1> %define jmpna jna near
   776                              <1> %define jmpb  jb near
   777                              <1> %define jmpnb jnb near
   778                              <1> 
   779                              <1> 
   780                              <1> %if 0
   781                              <1> %macro jmpz 1
   782                              <1>        jnz %%skip
   783                              <1>        jmp %1
   784                              <1> %%skip:
   785                              <1> %endmacro
   786                              <1> 
   787                              <1> %macro jmpnz 1
   788                              <1>        jz %%skip
   789                              <1>        jmp %1
   790                              <1> %%skip:
   791                              <1> %endmacro
   792                              <1> 
   793                              <1> %macro jmpe 1
   794                              <1>        jne %%skip
   795                              <1>        jmp %1
   796                              <1> %%skip:
   797                              <1> %endmacro
   798                              <1> 
   799                              <1> %macro jmpne 1
   800                              <1>        je %%skip
   801                              <1>        jmp %1
   802                              <1> %%skip:
   803                              <1> %endmacro
   804                              <1> 
   805                              <1> %macro jmpc 1
   806                              <1>        jnc %%skip
   807                              <1>        jmp %1
   808                              <1> %%skip:
   809                              <1> %endmacro
   810                              <1> 
   811                              <1> %macro jmpnc 1
   812                              <1>        jc %%skip
   813                              <1>        jmp %1
   814                              <1> %%skip:
   815                              <1> %endmacro
   816                              <1> 
   817                              <1> %macro jmpb 1
   818                              <1>        jnb %%skip
   819                              <1>        jmp %1
   820                              <1> %%skip:
   821                              <1> %endmacro
   822                              <1> 
   823                              <1> %macro jmpnb 1
   824                              <1>        jb %%skip
   825                              <1>        jmp %1
   826                              <1> %%skip:
   827                              <1> %endmacro
   828                              <1> 
   829                              <1> %endif
   830                              <1> 
   831                              <1> %endif
   832                                  %include "hd_io.h"
   833                              <1> ; hd_io.h
   834                              <1> ;
   835                              <1> ; header file for hd_io.asm
   836                              <1> ;
   837                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   838                              <1> ;
   839                              <1> 
   840                              <1> 
   841                              <1> %define DRVFLAG_DRIVEOK    0x0001       ;
   842                              <1> %define DRVFLAG_CHSVALID   0x0002       ; used in driveinfo structure
   843                              <1> %define DRVFLAG_REMOVABLE  0x0004       ; and bootrecord structure 
   844                              <1> %define DRVFLAG_EXTOK      0x0008       ;
   845                              <1> %define DRVFLAG_ISCDROM    0x0010       ; 0000,0000,0001,0000B
   846                              <1> 
   847                              <1> %define DRVFLAG_MASK       0x0015       ; 0000,0000,0001,0101B
   848                              <1> 
   849                              <1> %define INT13H_EXT_INSTCHECK 0x41
   850                              <1> %define INT13H_EXT_READ      0x42
   851                              <1> %define INT13H_EXT_WRITE     0x43
   852                              <1> %define INT13H_EXT_GETINFO   0x48
   853                              <1> %define INT13H_EXT_LOCK      0x45
   854                              <1> %define INT13H_RESET         0X00
   855                              <1> %define INT13H_READ          0X02
   856                              <1> %define INT13H_WRITE         0X03
   857                              <1> %define INT13H_GETINFO       0X08
   858                              <1> %define INT13H_GETTYPE       0x15
   859                              <1> 
   860                              <1> %define EXT_SUBSET_FIXED     0x01
   861                              <1> %define EXT_SUBSET_REMOVABLE 0x02
   862                              <1> %define EXT_SUBSET_EDD       0x04
   863                              <1> 
   864                              <1> %define DRV_TYPE_FIXED       0x03
   865                              <1> 
   866                              <1> %define MIN_HD_ID            0X80
   867                              <1> %define EXTPARAM_SIZE        0x42
   868                              <1> 
   869                              <1> %define MAX_CYLS             1023
   870                              <1> 
   871                              <1> ; Structure for calling int 13h ext Read / Write functions
   872                              <1> struc struc_int13ext
   873 00000000 <res 00000001>      <1>       .pack_size    : resb  1      ; ==16 size of struct Int13ExtData
   874 00000001 <res 00000001>      <1>       .reserved     : resb  1      ; ==0
   875 00000002 <res 00000001>      <1>       .blk_count    : resb  1      ; number of blocks to transfer <= 127
   876 00000003 <res 00000001>      <1>       .reserved1    : resb  1      ; ==0
   877 00000004 <res 00000002>      <1>       .buf_addr_off : resw  1      ; address of transfer buffer(segment:offset)
   878 00000006 <res 00000002>      <1>       .buf_addr_seg : resw  1
   879 00000008 <res 00000002>      <1>       .blk_num_low1 : resw  1      ; starting absolute block number
   880 0000000A <res 00000002>      <1>       .blk_num_low2 : resw  1
   881 0000000C <res 00000002>      <1>       .blk_num_high1: resw  1
   882 0000000E <res 00000002>      <1>       .blk_num_high2: resw  1
   883                              <1>       .end_of_struc
   884                              <1> endstruc
   885                              <1> 
   886                              <1> ; structure for calling int 13h ext get drive parameters functions (0x48)
   887                              <1> struc struc_extparam
   888 00000000 <res 00000002>      <1>       .pack_size         : resw  1
   889 00000002 <res 00000002>      <1>       .flags             : resw  1
   890 00000004 <res 00000004>      <1>       .cylinders         : resd  1
   891 00000008 <res 00000004>      <1>       .heads             : resd  1      ; <= 255
   892 0000000C <res 00000004>      <1>       .sectors           : resd  1      ; <= 63
   893 00000010 <res 00000008>      <1>       .total_sectors     : resd  2
   894 00000018 <res 00000002>      <1>       .bytes_per_sect    : resw  1
   895 0000001A <res 00000004>      <1>       .dpte_addr         : resd  1      ; device parameter table extension
   896 0000001E <res 00000002>      <1>       .dpi_key           : resw  1      ; 0xBEDD - Key, indicates presence
   897                              <1>                                         ; of Device Path Information
   898 00000020 <res 00000001>      <1>       .dpi_length        : resb  1      ; Length of Device Path Information 
   899                              <1>                                         ; including the key. = 36
   900 00000021 <res 00000001>      <1>       .reserved1         : resb  1
   901 00000022 <res 00000002>      <1>       .reserved2         : resw  1
   902 00000024 <res 00000004>      <1>       .host_bus_type     : resb  4      ; Host bus type, 4 bytes
   903                              <1>                                         ; PCI    PCI Local Bus
   904                              <1>                                         ; ISA    Legacy 16 bit fixed bus
   905 00000028 <res 00000008>      <1>       .interface_type    : resb  8      ; Interface type, 8 bytes
   906                              <1>                                         ; ATA   ATA/ATAPI-4 compliant device using ATA commands
   907                              <1>                                         ; ATAPI ATA/ATAPI-4 compliant device using ATAPI commands
   908                              <1>                                         ; SCSI  SCSI compliant device
   909                              <1>                                         ; USB   USB Mass Storage compliant device
   910                              <1>                                         ; 1394  1394 Mass Storage device
   911                              <1>                                         ; FIBRE Fibre Channel
   912 00000030 <res 00000008>      <1>       .interface_path    : resq  1
   913 00000038 <res 00000008>      <1>       .device_path       : resq  1
   914 00000040 <res 00000001>      <1>       .reserved3         : resb  1
   915 00000041 <res 00000001>      <1>       .checksum          : resb  1
   916                              <1>       .end_of_struc
   917                              <1> endstruc
   918                              <1> 
   919                              <1> ; Device parameter table extension
   920                              <1> %define SIZE_OF_DPTE struc_dpte.end_of_struc
   921                              <1> struc struc_dpte
   922 00000000 <res 00000002>      <1> 	.base_io	: resw 1
   923 00000002 <res 00000002>      <1> 	.ctrl_io	: resw 1
   924 00000004 <res 00000001>      <1> 	.flags		: resb 1
   925 00000005 <res 00000001>      <1> 	.vender_spec	: resb 1
   926 00000006 <res 00000001>      <1> 	.irq		: resb 1
   927 00000007 <res 00000001>      <1> 	.blk_count	: resb 1
   928 00000008 <res 00000001>      <1> 	.dma		: resb 1
   929 00000009 <res 00000001>      <1> 	.pio		: resb 1
   930 0000000A <res 00000002>      <1> 	.bios_spec	: resw 1
   931 0000000C <res 00000002>      <1> 	.reserved	: resw 1
   932 0000000E <res 00000001>      <1> 	.revision	: resb 1
   933 0000000F <res 00000001>      <1> 	.checksum	: resb 1
   934                              <1> 	.end_of_struc
   935                              <1> endstruc
   936                              <1> 
   937                              <1> ;Return cdrom boot catalog command packet
   938                              <1> %define SIZE_OF_CDBC_CMD struc_cdbc_cmd.end_of_struc
   939                              <1> struc struc_cdbc_cmd
   940 00000000 <res 00000001>      <1> 	.pack_size	: resb 1
   941 00000001 <res 00000001>      <1> 	.sector_count	: resb 1
   942 00000002 <res 00000002>      <1> 	.buf_addr_off	: resw 1
   943 00000004 <res 00000002>      <1> 	.buf_addr_seg	: resw 1
   944 00000006 <res 00000002>      <1> 	.begnning_sect	: resw 1
   945                              <1> 	.end_of_struc
   946                              <1> endstruc
   947                              <1> 
   948                              <1> ;CD Emulation Specification Packet
   949                              <1> %define SIZE_OF_CDEMU_SPEC struc_cdemu_spec.end_of_struc
   950                              <1> struc struc_cdemu_spec
   951 00000000 <res 00000001>      <1> 	.pack_size	: resb 1
   952 00000001 <res 00000001>      <1> 	.media_type	: resb 1
   953 00000002 <res 00000001>      <1> 	.emu_drvid	: resb 1
   954 00000003 <res 00000001>      <1> 	.controller_id	: resb 1
   955 00000004 <res 00000004>      <1> 	.image_lba	: resd 1
   956 00000008 <res 00000002>      <1> 	.device_spec	: resw 1
   957 0000000A <res 00000002>      <1> 	.user_bufseg	: resw 1
   958 0000000C <res 00000002>      <1> 	.load_seg	: resw 1
   959 0000000E <res 00000002>      <1> 	.sect_count	: resw 1
   960 00000010 <res 00000001>      <1> 	.cylinders	: resb 1
   961 00000011 <res 00000001>      <1> 	.sectors	: resb 1
   962 00000012 <res 00000001>      <1> 	.heads		: resb 1
   963                              <1> 	.end_of_struc
   964                              <1> endstruc
   965                              <1> 
   966                              <1> 
   967                              <1> ;Structure of boot catalog entry
   968                              <1> %define SIZE_OF_BOOT_CATALOG struc_boot_catalog.end_of_struc
   969                              <1> struc struc_boot_catalog
   970 00000000 <res 00000001>      <1> 	.indicator	: resb 1
   971 00000001 <res 00000001>      <1> 	.media_type	: resb 1
   972 00000002 <res 00000002>      <1> 	.load_seg	: resw 1
   973 00000004 <res 00000001>      <1> 	.sys_type	: resb 1
   974 00000005 <res 00000001>      <1> 	.reserved	: resb 1
   975 00000006 <res 00000002>      <1> 	.sect_count	: resw 1
   976 00000008 <res 00000004>      <1> 	.load_rba	: resd 1
   977 0000000C <res 00000014>      <1> 	.reserved1	: resb 20
   978                              <1> 	.end_of_struc
   979                              <1> endstruc
   980                              <1> 
   981                              <1> 
   982                              <1> ; structure for record drive informations
   983                              <1> struc struc_driveinfo
   984 00000000 <res 00000001>      <1>       .id                : resb  1
   985 00000001 <res 00000001>      <1>       .flags             : resb  1
   986 00000002 <res 00000002>      <1>       .cylinders         : resw  1
   987 00000004 <res 00000002>      <1>       .heads             : resw  1
   988 00000006 <res 00000002>      <1>       .sectors           : resw  1
   989 00000008 <res 00000002>      <1>       .sector_size       : resw  1
   990                              <1>       .end_of_struc
   991                              <1> endstruc
   992                              <1> 
   993                              <1> 
   994                              <1> 
   995                              <1> %define SIZE_OF_DRIVEINFO (struc_driveinfo.end_of_struc)
   996                              <1> %define SIZE_OF_EXTPARAM (struc_extparam.end_of_struc)
   997                              <1> %define SIZE_OF_INT13EXT (struc_int13ext.end_of_struc)
   998                              <1> 
   999                                  %include "atapi.h"
  1000                              <1> ;********************************************************************
  1001                              <1> ; ATA LOW LEVEL I/O DRIVER -- ATAIO.H (driver's public data)
  1002                              <1> ;
  1003                              <1> ; by Hale Landis (hlandis@ibm.net)
  1004                              <1> ;
  1005                              <1> ; There is no copyright and there are no restrictions on the use
  1006                              <1> ; of this ATA Low Level I/O Driver code.  It is distributed to
  1007                              <1> ; help other programmers understand how the ATA device interface
  1008                              <1> ; works and it is distributed without any warranty.  Use this
  1009                              <1> ; code at your own risk.
  1010                              <1> ;
  1011                              <1> ; This code is based on the ATA-2, ATA-3 and ATA-4 standards and
  1012                              <1> ; on interviews with various ATA controller and drive designers.
  1013                              <1> ;
  1014                              <1> ; This code has been run on many ATA (IDE) drives and
  1015                              <1> ; MFM/RLL controllers.  This code may be a little
  1016                              <1> ; more picky about the status it sees at various times.  A real
  1017                              <1> ; BIOS probably would not check the status as carefully.
  1018                              <1> ;
  1019                              <1> ; Compile with one of the Borland C or C++ compilers.
  1020                              <1> ;
  1021                              <1> ; This C source file is the header file for the for this driver
  1022                              <1> ; and is used in the ATAIOxxx.C files and must also be used
  1023                              <1> ; by any program using this driver code.
  1024                              <1> ;********************************************************************
  1025                              <1> 
  1026                              <1> %ifndef _ATAIO_H
  1027                              <1> %define _ATAIO_H
  1028                              <1> %define ATA_DRIVER_VERSION "13J"
  1029                              <1> 
  1030                              <1> ; Global defines -- ATA register and register bits.
  1031                              <1> ;
  1032                              <1> ; command block & control block regs
  1033                              <1> ;
  1034                              <1> ; these are the offsets into pio_reg_addrs[]
  1035                              <1> 
  1036                              <1> %define CB_DATA  0   ; data reg         in/out pio_base_addr1+0
  1037                              <1> %define CB_ERR   1   ; error            in     pio_base_addr1+1
  1038                              <1> %define CB_FR    1   ; feature reg         out pio_base_addr1+1
  1039                              <1> %define CB_SC    2   ; sector count     in/out pio_base_addr1+2
  1040                              <1> %define CB_SN    3   ; sector number    in/out pio_base_addr1+3
  1041                              <1> %define CB_CL    4   ; cylinder low     in/out pio_base_addr1+4
  1042                              <1> %define CB_CH    5   ; cylinder high    in/out pio_base_addr1+5
  1043                              <1> %define CB_DH    6   ; device head      in/out pio_base_addr1+6
  1044                              <1> %define CB_STAT  7   ; primary status   in     pio_base_addr1+7
  1045                              <1> %define CB_CMD   7   ; command             out pio_base_addr1+7
  1046                              <1> %define CB_ASTAT 8   ; alternate status in     pio_base_addr2+6
  1047                              <1> %define CB_DC    8   ; device control      out pio_base_addr2+6
  1048                              <1> %define CB_DA    9   ; device address   in     pio_base_addr2+7
  1049                              <1> 
  1050                              <1> ; error reg (CB_ERR) bits
  1051                              <1> 
  1052                              <1> %define CB_ER_ICRC 0x80    ; ATA Ultra DMA bad CRC
  1053                              <1> %define CB_ER_BBK  0x80    ; ATA bad block
  1054                              <1> %define CB_ER_UNC  0x40    ; ATA uncorrected error
  1055                              <1> %define CB_ER_MC   0x20    ; ATA media change
  1056                              <1> %define CB_ER_IDNF 0x10    ; ATA id not found
  1057                              <1> %define CB_ER_MCR  0x08    ; ATA media change request
  1058                              <1> %define CB_ER_ABRT 0x04    ; ATA command aborted
  1059                              <1> %define CB_ER_NTK0 0x02    ; ATA track 0 not found
  1060                              <1> %define CB_ER_NDAM 0x01    ; ATA address mark not found
  1061                              <1> 
  1062                              <1> %define CB_ER_P_SNSKEY 0xf0   ; ATAPI sense key (mask)
  1063                              <1> %define CB_ER_P_MCR    0x08   ; ATAPI Media Change Request
  1064                              <1> %define CB_ER_P_ABRT   0x04   ; ATAPI command abort
  1065                              <1> %define CB_ER_P_EOM    0x02   ; ATAPI End of Media
  1066                              <1> %define CB_ER_P_ILI    0x01   ; ATAPI Illegal Length Indication
  1067                              <1> 
  1068                              <1> ; ATAPI Interrupt Reason bits in the Sector Count reg (CB_SC)
  1069                              <1> 
  1070                              <1> %define CB_SC_P_TAG    0xf8   ; ATAPI tag (mask)
  1071                              <1> %define CB_SC_P_REL    0x04   ; ATAPI release
  1072                              <1> %define CB_SC_P_IO     0x02   ; ATAPI I/O
  1073                              <1> %define CB_SC_P_CD     0x01   ; ATAPI C/D
  1074                              <1> 
  1075                              <1> ; bits 7-4 of the device/head (CB_DH) reg
  1076                              <1> 
  1077                              <1> %define CB_DH_DEV0 0xa0    ; select device 0
  1078                              <1> %define CB_DH_DEV1 0xb0    ; select device 1
  1079                              <1> 
  1080                              <1> ; status reg (CB_STAT and CB_ASTAT) bits
  1081                              <1> 
  1082                              <1> %define CB_STAT_BSY  0x80  ; busy
  1083                              <1> %define CB_STAT_RDY  0x40  ; ready
  1084                              <1> %define CB_STAT_DF   0x20  ; device fault
  1085                              <1> %define CB_STAT_WFT  0x20  ; write fault (old name)
  1086                              <1> %define CB_STAT_SKC  0x10  ; seek complete
  1087                              <1> %define CB_STAT_SERV 0x10  ; service
  1088                              <1> %define CB_STAT_DRQ  0x08  ; data request
  1089                              <1> %define CB_STAT_CORR 0x04  ; corrected
  1090                              <1> %define CB_STAT_IDX  0x02  ; index
  1091                              <1> %define CB_STAT_ERR  0x01  ; error
  1092                              <1> 
  1093                              <1> ; digital output reg (CB_DC) bits
  1094                              <1> 
  1095                              <1> %define CB_DC_HD15   0x08  ; bit should always be set to one
  1096                              <1> %define CB_DC_SRST   0x04  ; soft reset
  1097                              <1> %define CB_DC_NIEN   0x02  ; disable interrupts
  1098                              <1> 
  1099                              <1> ;**************************************************************
  1100                              <1> 
  1101                              <1> ; Most mandtory and optional ATA commands (from ATA-3),
  1102                              <1> 
  1103                              <1> %define CMD_CFA_ERASE_SECTORS            0xC0
  1104                              <1> %define CMD_CFA_REQUEST_EXT_ERR_CODE     0x03
  1105                              <1> %define CMD_CFA_TRANSLATE_SECTOR         0x87
  1106                              <1> %define CMD_CFA_WRITE_MULTIPLE_WO_ERASE  0xCD
  1107                              <1> %define CMD_CFA_WRITE_SECTORS_WO_ERASE   0x38
  1108                              <1> %define CMD_CHECK_POWER_MODE1            0xE5
  1109                              <1> %define CMD_CHECK_POWER_MODE2            0x98
  1110                              <1> %define CMD_DEVICE_RESET                 0x08
  1111                              <1> %define CMD_EXECUTE_DEVICE_DIAGNOSTIC    0x90
  1112                              <1> %define CMD_FLUSH_CACHE                  0xE7
  1113                              <1> %define CMD_FORMAT_TRACK                 0x50
  1114                              <1> %define CMD_IDENTIFY_DEVICE              0xEC
  1115                              <1> %define CMD_IDENTIFY_DEVICE_PACKET       0xA1
  1116                              <1> %define CMD_IDENTIFY_PACKET_DEVICE       0xA1
  1117                              <1> %define CMD_IDLE1                        0xE3
  1118                              <1> %define CMD_IDLE2                        0x97
  1119                              <1> %define CMD_IDLE_IMMEDIATE1              0xE1
  1120                              <1> %define CMD_IDLE_IMMEDIATE2              0x95
  1121                              <1> %define CMD_INITIALIZE_DRIVE_PARAMETERS  0x91
  1122                              <1> %define CMD_INITIALIZE_DEVICE_PARAMETERS 0x91
  1123                              <1> %define CMD_NOP                          0x00
  1124                              <1> %define CMD_PACKET                       0xA0
  1125                              <1> %define CMD_READ_BUFFER                  0xE4
  1126                              <1> %define CMD_READ_DMA                     0xC8
  1127                              <1> %define CMD_READ_DMA_QUEUED              0xC7
  1128                              <1> %define CMD_READ_MULTIPLE                0xC4
  1129                              <1> %define CMD_READ_SECTORS                 0x20
  1130                              <1> %define CMD_READ_VERIFY_SECTORS          0x40
  1131                              <1> %define CMD_RECALIBRATE                  0x10
  1132                              <1> %define CMD_SEEK                         0x70
  1133                              <1> %define CMD_SET_FEATURES                 0xEF
  1134                              <1> %define CMD_SET_MULTIPLE_MODE            0xC6
  1135                              <1> %define CMD_SLEEP1                       0xE6
  1136                              <1> %define CMD_SLEEP2                       0x99
  1137                              <1> %define CMD_STANDBY1                     0xE2
  1138                              <1> %define CMD_STANDBY2                     0x96
  1139                              <1> %define CMD_STANDBY_IMMEDIATE1           0xE0
  1140                              <1> %define CMD_STANDBY_IMMEDIATE2           0x94
  1141                              <1> %define CMD_WRITE_BUFFER                 0xE8
  1142                              <1> %define CMD_WRITE_DMA                    0xCA
  1143                              <1> %define CMD_WRITE_DMA_QUEUED             0xCC
  1144                              <1> %define CMD_WRITE_MULTIPLE               0xC5
  1145                              <1> %define CMD_WRITE_SECTORS                0x30
  1146                              <1> %define CMD_WRITE_VERIFY                 0x3C
  1147                              <1> 
  1148                              <1> %define REG_CONFIG_TYPE_NONE  0
  1149                              <1> %define REG_CONFIG_TYPE_UNKN  1
  1150                              <1> %define REG_CONFIG_TYPE_ATA   2
  1151                              <1> %define REG_CONFIG_TYPE_ATAPI 3
  1152                              <1> 
  1153                              <1> %define FAILBIT15 0x8000   ; extra interrupts detected
  1154                              <1> %define FAILBIT14 0x4000
  1155                              <1> %define FAILBIT13 0x2000
  1156                              <1> %define FAILBIT12 0x1000
  1157                              <1> %define FAILBIT11 0x0800
  1158                              <1> %define FAILBIT10 0x0400
  1159                              <1> %define FAILBIT9  0x0200
  1160                              <1> %define FAILBIT8  0x0100   ; SC( CD/IO bits) wrong at end of cmd
  1161                              <1> %define FAILBIT7  0x0080   ; byte count odd at data packet xfer time
  1162                              <1> %define FAILBIT6  0x0040   ; byte count wrong at data packet xfer time
  1163                              <1> %define FAILBIT5  0x0020   ; SC (IO bit) wrong at data packet xfer time
  1164                              <1> %define FAILBIT4  0x0010   ; SC (CD bit) wrong at data packet xfer time
  1165                              <1> %define FAILBIT3  0x0008   ; byte count wrong at cmd packet xfer time
  1166                              <1> %define FAILBIT2  0x0004   ; SC wrong at cmd packet xfer time
  1167                              <1> %define FAILBIT1  0x0002   ; got interrupt before cmd packet xfer
  1168                              <1> %define FAILBIT0  0x0001   ; slow setting BSY=1 or DRQ=1 after AO cmd
  1169                              <1> 
  1170                              <1> %define ATATYPE_MD 0x1     ; Direct-access device (e.g. magnetic disk)
  1171                              <1> %define ATATYPE_MT 0x1     ; Sequential-access device (e.g. magnetic tape)
  1172                              <1> %define ATATYPE_PT 0x2     ; Printer device
  1173                              <1> %define ATATYPE_PR 0x3     ; processor device
  1174                              <1> %define ATATYPE_CDR 0x4    ; Write-once device
  1175                              <1> %define ATATYPE_CD 0x5     ; CD-ROM device
  1176                              <1> %define ATATYPE_SC 0x6     ; Scanner device
  1177                              <1> %define ATATYPE_OM 0x7     ; Optical memory device
  1178                              <1> %define ATATYPE_MC 0x8     ; Medium changer device
  1179                              <1> %define ATATYPE_CT 0x9     ; Communications device
  1180                              <1> 
  1181                              <1> %define SIZE_OF_ATAPI_DEVINFO struc_atapi_devinfo.end_of_struc
  1182                              <1> 
  1183                              <1> struc struc_atapi_devinfo
  1184 00000000 <res 00000001>      <1> 	.dev_type	: resb 1
  1185 00000001 <res 00000001>      <1> 	.dev_flags	: resb 1
  1186 00000002 <res 00000008>      <1> 	.vender_id	: resb 8
  1187 0000000A <res 00000010>      <1> 	.product_id	: resb 16
  1188 0000001A <res 00000004>      <1> 	.product_rev	: resb 4
  1189 0000001E <res 00000002>      <1> 	.reserved	: resb 2
  1190                              <1> 	.end_of_struc
  1191                              <1> endstruc
  1192                              <1> 
  1193                              <1> 
  1194                              <1> %macro	outbyte	0-2
  1195                              <1> %if %0>1
  1196                              <1> 	mov	al,%2
  1197                              <1> %endif
  1198                              <1> %if %0>0
  1199                              <1> 	mov	dx,[reg_addr+%1*2]
  1200                              <1> %endif
  1201                              <1> 	out	dx,al
  1202                              <1> %endmacro
  1203                              <1> 
  1204                              <1> %macro	outword	0-2
  1205                              <1> %if %0>1
  1206                              <1> 	mov	ax,%2
  1207                              <1> %endif
  1208                              <1> %if %0>0
  1209                              <1> 	mov	dx,[reg_addr+%1*2]
  1210                              <1> %endif
  1211                              <1> 	out	dx,ax
  1212                              <1> %endmacro
  1213                              <1> 
  1214                              <1> 
  1215                              <1> %macro outbytes 2-*
  1216                              <1> %assign LAST_AL 0x1000
  1217                              <1> %rep %0 / 2
  1218                              <1>     %ifnum %2	
  1219                              <1> 	%if LAST_AL != %2
  1220                              <1> 		outbyte %1, %2
  1221                              <1> 		%assign LAST_AL %2
  1222                              <1> 	%else
  1223                              <1> 		outbyte %1
  1224                              <1> 	%endif
  1225                              <1>     %else
  1226                              <1> 	outbyte %1, %2
  1227                              <1>     %endif
  1228                              <1>     %rotate 2
  1229                              <1> %endrep
  1230                              <1> %endmacro
  1231                              <1> 
  1232                              <1> %macro inbyte 1-2
  1233                              <1> 	mov	dx,[reg_addr+%1*2]
  1234                              <1> 	in	al,dx
  1235                              <1> 	%if %0 > 1
  1236                              <1> 		mov	%2,al
  1237                              <1> 	%endif
  1238                              <1> %endmacro
  1239                              <1> 
  1240                              <1> %macro inword 1-2
  1241                              <1> 	mov	dx,[reg_addr+%1*2]
  1242                              <1> 	in	ax,dx
  1243                              <1> 	%if %0 > 1
  1244                              <1> 		mov	%2,ax
  1245                              <1> 	%endif
  1246                              <1> %endmacro
  1247                              <1> 
  1248                              <1> 
  1249                              <1> %endif
  1250                              <1> ; end ataio.h
  1251                                  
  1252                                  %undef DEBUG
  1253                                  
  1254                                  %ifdef DEBUG
  1255                                    %include "debug.h"
  1256                                  %endif
  1257                                  
  1258                                  %define DELAY_MSECS 55			; about 1 millisecond
  1259                                  
  1260                                  ;%define EDD_3_0
  1261                                  %define CDSECTOR_SIZE 0x800
  1262                                  %define sane_check
  1263                                  %define check_extra_fail
  1264                                  
  1265                                  %define MIN_CDROM_ID 0xE0
  1266                                  %define REG_ATAPI_MAX_BYTES 32768
  1267                                  
  1268                                  %ifndef DISABLE_CDBOOT
  1269                                    %define EDD30_SIG1	'BM'
  1270                                    %define EDD30_SIG2	'CB'
  1271                                  %else
  1272                                    %define EDD30_SIG1	'BM'
  1273                                    %define EDD30_SIG2	'SD'
  1274                                  %endif
  1275                                  
  1276                                  	org 0
  1277                                  	section .text
  1278 00000000 E99800                  	jmp edd30_main
  1279 00000003 90                      	nop
  1280                                  
  1281 00000004 43442D524F4D20426F-     copyright_msg	db 'CD-ROM Booting Module V1.2 for Smart BootManager, http://btmgr.sourceforge.net',0x0d,0x0a
  1282 0000000D 6F74696E67204D6F64-
  1283 00000016 756C652056312E3220-
  1284 0000001F 666F7220536D617274-
  1285 00000028 20426F6F744D616E61-
  1286 00000031 6765722C2068747470-
  1287 0000003A 3A2F2F62746D67722E-
  1288 00000043 736F75726365666F72-
  1289 0000004C 67652E6E65740D0A   
  1290 00000054 436F70797269676874-     		db 'Copyright (C) 2000 Christopher Li, James Su',0x0d,0x0a,0x0a,
  1291 0000005D 202843292032303030-
  1292 00000066 204368726973746F70-
  1293 0000006F 686572204C692C204A-
  1294 00000078 616D65732053750D0A-
  1295 00000081 0A                 
  1296 00000082 426F6F74696E672066-     		db 'Booting from CD-ROM...',0x0d,0x0a,0
  1297 0000008B 726F6D2043442D524F-
  1298 00000094 4D2E2E2E0D0A00     
  1299                                  
  1300                                  edd30_main:
  1301                                  ;input ah = 0, install my int 13h
  1302                                  ;      ah = 1, uninstall my int 13h
  1303                                  ;      ah = 2, initialize atapi
  1304                                  ;      ah = 3, set drive map
  1305                                  ;           bx , cx , drive map
  1306                                  ;      ah = 4, set atapi io ports
  1307                                  ;           bx , cx , atapi io ports
  1308                                  
  1309 0000009B 60                      	pusha
  1310                                  	
  1311 0000009C 06                      	push es
  1312 0000009D 1E                      	push ds
  1313 0000009E 0E                      	push cs
  1314 0000009F 1F                      	pop ds
  1315 000000A0 FC                      	cld
  1316                                  
  1317 000000A1 31D2                    	xor dx, dx
  1318 000000A3 8EC2                    	mov es, dx
  1319                                  
  1320 000000A5 30C0                    	xor al, al
  1321                                  
  1322 000000A7 08E4                    	or ah, ah
  1323 000000A9 7416                    	je .inst_int13h
  1324                                  
  1325 000000AB 80FC01                  	cmp ah, 1
  1326 000000AE 743F                    	je .uninst_int13h
  1327                                  
  1328                                  %ifndef DISABLE_CDBOOT
  1329 000000B0 80FC02                  	cmp ah, 2
  1330 000000B3 746F                    	je .init_atapi
  1331                                  
  1332 000000B5 80FC04                  	cmp ah, 4
  1333 000000B8 7462                    	je .set_io_ports
  1334                                  %endif
  1335                                  
  1336 000000BA 80FC03                  	cmp ah, 3
  1337 000000BD 744E                    	je .set_drvmap
  1338 000000BF EB74                    	jmp .end
  1339                                  
  1340                                  .inst_int13h:
  1341 000000C1 26813E4C00[3901]        	cmp word [es:0x13*4], new_int13h
  1342 000000C8 746B                    	je .end
  1343                                  
  1344 000000CA 06                      	push es
  1345 000000CB 0E                      	push cs
  1346 000000CC 07                      	pop es
  1347 000000CD BF[D101]                	mov di, start_of_emu_data
  1348 000000D0 B93A08                  	mov cx, end_of_emu_data - start_of_emu_data
  1349 000000D3 F3AA                    	rep stosb
  1350 000000D5 07                      	pop es
  1351                                  
  1352 000000D6 FA                      	cli
  1353 000000D7 B8[3901]                	mov ax, new_int13h
  1354 000000DA 2687064C00              	xchg ax, [es:0x13*4]
  1355 000000DF A3[9C01]                	mov [int13h_old_off], ax
  1356 000000E2 8CC8                    	mov ax, cs
  1357 000000E4 2687064E00              	xchg ax, [es:0x13*4+2]
  1358 000000E9 A3[9E01]                	mov [int13h_old_seg], ax
  1359 000000EC FB                      	sti
  1360 000000ED EB46                    	jmp short .end
  1361                                  
  1362                                  .uninst_int13h:
  1363 000000EF 26813E4C00[3901]        	cmp word [es:0x13*4], new_int13h
  1364 000000F6 753D                    	jne .end
  1365                                  
  1366                                  %ifndef DISABLE_CDBOOT
  1367 000000F8 E85F0A                  	call reset_atapi_cdroms
  1368                                  %endif
  1369                                  
  1370 000000FB FA                      	cli
  1371 000000FC A1[9C01]                	mov ax, [int13h_old_off]
  1372 000000FF 26A34C00                	mov [es:0x13*4], ax
  1373 00000103 A1[9E01]                	mov ax, [int13h_old_seg]
  1374 00000106 26A34E00                	mov [es:0x13*4+2], ax
  1375 0000010A FB                      	sti
  1376 0000010B EB28                    	jmp short .end
  1377                                  
  1378                                  .set_drvmap:
  1379 0000010D 891E[D101]              	mov [drive_map], bx
  1380 00000111 890E[D301]              	mov [drive_map+2], cx
  1381 00000115 31C0                    	xor ax, ax
  1382 00000117 A3[D501]                	mov [drive_map+4], ax
  1383 0000011A EB19                    	jmp short .end
  1384                                  
  1385                                  %ifndef DISABLE_CDBOOT
  1386                                  .set_io_ports:
  1387 0000011C 891E[1800]              	mov [reg_base_addr_append], bx
  1388 00000120 890E[1A00]              	mov [reg_base_addr_append+2], cx
  1389                                  
  1390                                  .init_atapi:
  1391 00000124 0E                      	push cs
  1392 00000125 07                      	pop es
  1393                                  
  1394 00000126 BF[0000]                	mov di, start_of_atapi_data
  1395 00000129 B9D101                  	mov cx, end_of_atapi_data - start_of_atapi_data
  1396 0000012C F3AA                    	rep stosb
  1397                                  
  1398 0000012E FF0E[0000]              	dec word [atapi_cur_dev]
  1399                                  
  1400                                  %ifdef SLOW_ATAPI_DEVICE
  1401                                  	call init_timer
  1402                                  %endif
  1403 00000132 E8E409                  	call init_atapi_cdroms
  1404                                  %endif
  1405                                  
  1406                                  .end:
  1407 00000135 1F                      	pop ds
  1408 00000136 07                      	pop es
  1409 00000137 61                      	popa
  1410 00000138 CB                      	retf
  1411                                  
  1412                                  ;=============================================================================
  1413                                  ; My New INT 13h handler starts here!
  1414                                  ;=============================================================================
  1415                                  new_int13h:
  1416 00000139 3D6666                  	cmp ax, 0x6666
  1417 0000013C 750F                    	jne .common_func
  1418 0000013E 81FB424D                	cmp bx, EDD30_SIG1
  1419 00000142 7509                    	jne .common_func
  1420 00000144 81F94342                	cmp cx, EDD30_SIG2
  1421 00000148 7503                    	jne .common_func
  1422                                  
  1423 0000014A 87D9                    	xchg bx, cx
  1424 0000014C CF                      	iret
  1425                                  
  1426                                  .common_func:
  1427                                  ;=============================================================================
  1428 0000014D FC                      	cld			; clear direction, only need one time
  1429 0000014E 50                              push    ax              ; save AX (contains function code in AH)
  1430 0000014F 55                              push    bp              ; need BP to mess with stack
  1431 00000150 89E5                            mov     bp, sp
  1432                                          ; Stack layout:
  1433                                          ;
  1434                                          ;   +8  INT flags
  1435                                          ;   +6  INT CS
  1436                                          ;   +4  INT IP
  1437                                          ;   +2  AX
  1438                                          ; BP+0 BP
  1439                                  
  1440                                  %ifndef DISABLE_CDBOOT
  1441 00000152 2E803E[0700]00          	cmp byte [cs:atapi_dev_count], 0
  1442 00000158 7423                    	jz .no_cdrom
  1443                                  
  1444 0000015A 80FAE0                  	cmp dl, MIN_CDROM_ID
  1445 0000015D 720F                    	jb .not_cdrom_drv
  1446                                  
  1447 0000015F 52                      	push dx
  1448 00000160 80EAE0                  	sub dl, MIN_CDROM_ID
  1449 00000163 2E3A16[0700]            	cmp dl, [cs:atapi_dev_count]
  1450 00000168 5A                      	pop dx
  1451 00000169 7303                    	jae .not_cdrom_drv
  1452                                  
  1453 0000016B E97701                  	jmp edd30_for_cdrom
  1454                                  
  1455                                  .not_cdrom_drv:
  1456 0000016E 2E803E[DC01]00          	cmp byte [cs:emu_disk_type], 0
  1457 00000174 7407                    	je .not_emu_drv
  1458                                  
  1459 00000176 2E3A16[EA01]            	cmp dl,[cs:edd30_cdemu_spec + struc_cdemu_spec.emu_drvid]
  1460 0000017B 7443                    	je cdemu_int13h
  1461                                  
  1462                                  .not_emu_drv:
  1463                                  
  1464                                  .no_cdrom:
  1465                                  %endif
  1466                                  
  1467 0000017D 9C                              pushf                   ; push flags (to act like interrupt)
  1468 0000017E 56                              push    si
  1469 0000017F BE[D101]                        mov     si, drive_map
  1470                                  
  1471 00000182 2E8B04                  .mapfl: mov ax, [cs:si]         ; get next entry
  1472 00000185 46                              inc si
  1473 00000186 46                              inc si
  1474 00000187 09C0                            or      ax, ax          ; at end ?
  1475 00000189 7406                            jz      .nomap          ; yes -> do not map
  1476 0000018B 38C2                            cmp     dl, al          ; match ?
  1477 0000018D 75F3                            jne     .mapfl          ; no -> continue
  1478 0000018F 88E2                            mov     dl, ah          ; map drive
  1479 00000191 5E                      .nomap: pop     si              ; restore SI
  1480 00000192 894608                          mov     [bp+8], ax      ; overwrite old flags (to remember mapping)
  1481 00000195 8B4602                          mov     ax, [bp+2]      ; restore AX
  1482 00000198 8B6E00                          mov     bp, [bp]        ; restore BP
  1483 0000019B 9A                              db      0x9a            ; CALL FAR
  1484                                  
  1485 0000019C 0000                    int13h_old_off  dw   0
  1486 0000019E 0000                    int13h_old_seg  dw   0
  1487                                  
  1488 000001A0 55                              push    bp              ; save BP again
  1489 000001A1 89E5                            mov     bp,sp
  1490                                          ; New stack layout:
  1491                                          ;
  1492                                          ;   +10 mapping (was flags)
  1493                                          ;   +8  INT CS
  1494                                          ;   +6  INT IP
  1495                                          ;   +4  AX
  1496                                          ;   +2  obsolete BP
  1497                                          ; BP+0  BP
  1498 000001A3 874604                          xchg    ax, [bp+4]      ; save AX and get command
  1499 000001A6 9C                              pushf                   ; fix driver number, if necessary
  1500 000001A7 80FC08                          cmp     ah, 8           ; do not fix
  1501 000001AA 7409                            je      done_int13
  1502 000001AC 8B460A                          mov     ax, [bp+10]     ; no mapping ?
  1503 000001AF 09C0                            or      ax, ax
  1504 000001B1 7402                            jz      done_int13
  1505 000001B3 88C2                            mov     dl, al          ; fix mapping
  1506                                  done_int13:
  1507 000001B5 8B4604                  	mov     ax, [bp+4]      ; restore AX
  1508 000001B8 8F460A                          pop     word [bp+10]    ; restore flags
  1509 000001BB 5D                              pop     bp              ; get BP
  1510 000001BC 83C404                          add     sp, 4           ; fix SP
  1511 000001BF CF                              iret                    ; done
  1512                                  
  1513                                  
  1514                                  %ifndef DISABLE_CDBOOT
  1515                                  ;=============================================================================
  1516                                  cdemu_int13h:
  1517                                  	; Stack layout:
  1518                                          ;   +8  INT flags
  1519                                          ;   +6  INT CS
  1520                                          ;   +4  INT IP
  1521                                          ;   +2  AX
  1522                                          ; BP+0 BP
  1523                                  	;   -2 ax
  1524                                  	;   -4 cx
  1525                                  	;   -6 dx
  1526                                  	;   -8 bx
  1527                                  	;   -10 sp
  1528                                  	;   -12 bp
  1529                                  	;   -14 si
  1530                                  	;   -16 di
  1531                                  	;   -18 ds
  1532                                  	;   -20 es
  1533                                  	;   -24 edx
  1534 000001C0 60                      	pusha
  1535 000001C1 1E                      	push ds
  1536 000001C2 06                      	push es
  1537 000001C3 6652                    	push edx
  1538 000001C5 0E                      	push cs
  1539 000001C6 1F                      	pop ds
  1540                                  
  1541 000001C7 50                      	push ax
  1542 000001C8 2E0FB606[DB01]          	movzx ax, byte [cs:emu_cdrom_id]
  1543 000001CE 2CE0                    	sub al, MIN_CDROM_ID 
  1544 000001D0 E8E107                  	call select_atapi
  1545 000001D3 58                      	pop ax
  1546                                  
  1547 000001D4 7305                    	jnc .sel_atapi_ok
  1548 000001D6 B4AA                    	mov ah, 0xaa
  1549 000001D8 E9E101                  	jmp edd30_for_cdrom.fail_out
  1550                                  
  1551                                  .sel_atapi_ok:
  1552 000001DB B90800                  	mov cx, (cdemu_act_table.end_of_table - cdemu_act_table)
  1553 000001DE 31FF                    	xor di, di 
  1554                                  
  1555                                  .loop_search:
  1556 000001E0 38A5[A205]              	cmp [cdemu_act_table + di], ah
  1557 000001E4 7406                    	je .found_act
  1558 000001E6 47                      	inc di
  1559 000001E7 E2F7                    	loop .loop_search
  1560 000001E9 E9CE01                  	jmp edd30_for_cdrom.invalid_cmd
  1561                                  
  1562                                  .found_act:
  1563 000001EC 8B4EFC                  	mov cx, [bp-4]		; restore cx
  1564 000001EF D1E7                    	shl di, 1
  1565 000001F1 FFA5[AA05]              	jmp [cdemu_jmp_table + di]
  1566                                  
  1567                                  ;=============================================================================
  1568                                  .stop_disk_emu:
  1569 000001F5 89F7                    	mov di, si
  1570 000001F7 FF76EE                  	push word [bp-18]
  1571 000001FA 07                      	pop es
  1572 000001FB BE[E801]                	mov si, edd30_cdemu_spec
  1573 000001FE B91300                  	mov cx, SIZE_OF_CDEMU_SPEC
  1574 00000201 F3A4                    	rep movsb
  1575 00000203 08C0                    	or al, al
  1576 00000205 0F85A901                	jnz near edd30_for_cdrom.success_out
  1577                                  
  1578                                  .terminate_emu:
  1579 00000209 A2[DC01]                	mov byte [emu_disk_type], al
  1580 0000020C E9A301                  	jmp edd30_for_cdrom.success_out
  1581                                  
  1582                                  .emu_get_param:
  1583 0000020F 8A26[DC01]              	mov ah, [emu_disk_type]
  1584 00000213 8866F8                  	mov [bp-8], ah		; bl = drive type
  1585 00000216 8B0E[F801]              	mov cx, [edd30_cdemu_spec + struc_cdemu_spec.cylinders]
  1586 0000021A 86E9                    	xchg ch, cl
  1587 0000021C FECD                    	dec ch
  1588 0000021E 80E13F                  	and cl, 0x3f
  1589 00000221 8A36[FA01]              	mov dh, [edd30_cdemu_spec + struc_cdemu_spec.heads]
  1590 00000225 FECE                    	dec dh
  1591 00000227 B202                    	mov dl, 0x02
  1592 00000229 894EFC                  	mov [bp-4], cx
  1593 0000022C 8956FA                  	mov [bp-6], dx
  1594 0000022F 31C0                    	xor ax, ax
  1595 00000231 E97E01                  	jmp edd30_for_cdrom.success_out
  1596                                  
  1597                                  .emu_get_type:
  1598 00000234 B402                    	mov ah, 0x02
  1599 00000236 E97B01                  	jmp edd30_for_cdrom.success_out_no_ah
  1600                                  
  1601                                  .emu_read:
  1602 00000239 08C0                    	or al, al
  1603 0000023B 0F84A100                	jmpz .emu_read_fail
  1604                                  
  1605 0000023F 3A36[E101]              	cmp dh, [emu_head]
  1606 00000243 0F839900                	jmpnb .emu_read_fail
  1607                                  
  1608 00000247 88CA                    	mov dl, cl		; dl = sector number
  1609 00000249 80E23F                  	and dl, 63
  1610 0000024C 08D2                    	or dl, dl
  1611 0000024E 0F848E00                	jmpz .emu_read_fail
  1612 00000252 FECA                    	dec dl
  1613                                  
  1614 00000254 3A16[DF01]              	cmp dl, [emu_sec]
  1615 00000258 0F838400                	jmpnb .emu_read_fail
  1616                                  
  1617 0000025C 0FB6CD                  	movzx cx, ch
  1618 0000025F 3B0E[DD01]              	cmp cx, [emu_cyl]
  1619 00000263 0F837900                	jmpnb .emu_read_fail
  1620                                  
  1621 00000267 89C8                    	mov ax, cx		; ax = cylinder
  1622 00000269 F626[E101]              	mul byte [emu_head]	; (cylinder*head
  1623 0000026D 88F1                    	mov cl, dh
  1624 0000026F 01C8                    	add ax, cx		; (cylinder*head + head)
  1625 00000271 88D1                    	mov cl, dl		; cl = sector
  1626 00000273 F726[DF01]              	mul word [emu_sec]	; (cylinder*head + head)*sect_per_track
  1627 00000277 01C8                    	add ax, cx		; (cyl*head + head)*sect_p_t + sector
  1628                                  
  1629 00000279 8A4E02                  	mov cl, [bp+2]		; number of sectors
  1630                                  
  1631 0000027C 8B3E[D701]              	mov di, [emu_buf_off]
  1632 00000280 6631D2                  	xor edx, edx
  1633 00000283 668916[E301]            	mov dword [emu_last_read], edx
  1634                                  
  1635                                  .emu_loop_read:
  1636 00000288 50                      	push ax
  1637 00000289 53                      	push bx
  1638 0000028A 51                      	push cx
  1639 0000028B 57                      	push di
  1640                                  
  1641 0000028C 660FB7D0                	movzx edx, ax
  1642                                  
  1643 00000290 66C1EA02                	shr edx, 2
  1644 00000294 660316[EC01]            	add edx, [edd30_cdemu_spec + struc_cdemu_spec.image_lba]
  1645                                  
  1646 00000299 663B16[E301]            	cmp edx, [emu_last_read]
  1647 0000029E 7414                    	je .emu_have_read
  1648 000002A0 668916[E301]            	mov [emu_last_read], edx
  1649                                  
  1650 000002A5 B90100                  	mov cx, 1
  1651 000002A8 06                      	push es
  1652 000002A9 FF36[D901]              	push word [emu_buf_seg]
  1653 000002AD 07                      	pop es
  1654 000002AE E82208                  	call read_atapi
  1655 000002B1 07                      	pop es
  1656 000002B2 7228                    	jc .emu_atapi_fail
  1657                                  
  1658                                  .emu_have_read:
  1659 000002B4 83E003                  	and ax, byte 3			; sector = sector % 4
  1660 000002B7 C1E009                  	shl ax, byte 9			; sector = sector * 512
  1661 000002BA 8B36[D701]              	mov si, [emu_buf_off]
  1662 000002BE 01C6                    	add si, ax
  1663 000002C0 89DF                    	mov di, bx
  1664                                  
  1665 000002C2 1E                      	push ds
  1666 000002C3 FF36[D901]              	push word [emu_buf_seg]
  1667 000002C7 1F                      	pop ds
  1668 000002C8 B90002                  	mov cx, 512
  1669 000002CB F3A4                    	rep movsb
  1670 000002CD 1F                      	pop ds
  1671                                  
  1672 000002CE 5F                      	pop di
  1673 000002CF 59                      	pop cx
  1674 000002D0 5B                      	pop bx
  1675 000002D1 58                      	pop ax
  1676 000002D2 81C30002                	add bx, 512
  1677 000002D6 40                      	inc ax
  1678 000002D7 E2AF                    	loop .emu_loop_read
  1679 000002D9 E9D600                  	jmp edd30_for_cdrom.success_out
  1680                                  
  1681                                  .emu_atapi_fail:
  1682 000002DC 5F                      	pop di
  1683 000002DD 59                      	pop cx
  1684 000002DE 5B                      	pop bx
  1685 000002DF 58                      	pop ax
  1686                                  
  1687                                  .emu_read_fail:
  1688 000002E0 B404                    	mov ah, 0x04
  1689 000002E2 E9D700                  	jmp edd30_for_cdrom.fail_out
  1690                                  
  1691                                  
  1692                                  ;=============================================================================
  1693                                  
  1694                                  edd30_for_cdrom:
  1695                                  	; Stack layout:
  1696                                          ;   +8  INT flags
  1697                                          ;   +6  INT CS
  1698                                          ;   +4  INT IP
  1699                                          ;   +2  AX
  1700                                          ; BP+0 BP
  1701                                  	;   -2 ax
  1702                                  	;   -4 cx
  1703                                  	;   -6 dx
  1704                                  	;   -8 bx
  1705                                  	;   -10 sp
  1706                                  	;   -12 bp
  1707                                  	;   -14 si
  1708                                  	;   -16 di
  1709                                  	;   -18 ds
  1710                                  	;   -20 es
  1711                                  	;   -24 edx
  1712 000002E5 60                      	pusha
  1713 000002E6 1E                      	push ds
  1714 000002E7 06                      	push es
  1715 000002E8 6652                    	push edx
  1716 000002EA 0E                      	push cs
  1717 000002EB 1F                      	pop ds
  1718                                  
  1719 000002EC 50                      	push ax
  1720 000002ED 0FB6C2                  	movzx ax, dl
  1721 000002F0 2CE0                    	sub al, MIN_CDROM_ID 
  1722 000002F2 E8BF06                  	call select_atapi
  1723 000002F5 58                      	pop ax
  1724                                  
  1725 000002F6 7305                    	jnc .sel_atapi_ok
  1726 000002F8 B4AA                    	mov ah, 0xaa
  1727 000002FA E9BF00                  	jmp .fail_out
  1728                                  
  1729                                  .sel_atapi_ok:
  1730 000002FD B91100                  	mov cx, (edd30_act_table.end_of_table - edd30_act_table)
  1731 00000300 31DB                    	xor bx, bx
  1732                                  
  1733                                  .loop_search:
  1734 00000302 38A7[BA05]              	cmp [edd30_act_table + bx], ah
  1735 00000306 7406                    	je .found_act
  1736 00000308 43                      	inc bx
  1737 00000309 E2F7                    	loop .loop_search
  1738 0000030B E9AC00                  	jmp .invalid_cmd
  1739                                  
  1740                                  .found_act:
  1741 0000030E C1E301                  	shl bx, byte 1
  1742 00000311 FFA7[CB05]              	jmp [edd30_jmp_table + bx]
  1743                                  
  1744                                  ;==================================
  1745                                  .init_disk_emu_and_boot:
  1746 00000315 E8D501                  	call edd30_init_disk_emu
  1747 00000318 0F82A000                	jc near .fail_out
  1748                                  
  1749 0000031C A1[F401]                	mov ax, [edd30_cdemu_spec + struc_cdemu_spec.load_seg]
  1750 0000031F 8EC0                    	mov es, ax
  1751 00000321 31FF                    	xor di, di
  1752 00000323 8B0E[F601]              	mov cx, [edd30_cdemu_spec + struc_cdemu_spec.sect_count]
  1753 00000327 83C103                  	add cx, 3		; convert virtual sect count
  1754 0000032A C1E902                  	shr cx, 2		; to cdrom sect count
  1755 0000032D 668B16[EC01]            	mov edx, [edd30_cdemu_spec + struc_cdemu_spec.image_lba]
  1756 00000332 E89E07                  	call read_atapi
  1757 00000335 7305                    	jnc .emu_boot_read_ok
  1758 00000337 B404                    	mov ah, 0x04
  1759 00000339 E98000                  	jmp .fail_out
  1760                                  
  1761                                  .emu_boot_read_ok:
  1762                                  
  1763 0000033C BE[0400]                	mov si, copyright_msg
  1764 0000033F E85102                  	call draw_string_tty
  1765                                  
  1766 00000342 E8A802                  	call read_bios_time
  1767 00000345 89C2                    	mov dx, ax
  1768 00000347 83C224                  	add dx, byte 18*2
  1769                                  
  1770 0000034A FB                      	sti
  1771                                  .loop_delay:
  1772 0000034B E89F02                  	call read_bios_time
  1773 0000034E 39C2                    	cmp dx, ax
  1774 00000350 77F9                    	ja .loop_delay
  1775 00000352 FA                      	cli
  1776                                  
  1777 00000353 8A16[EA01]              	mov dl, [edd30_cdemu_spec + struc_cdemu_spec.emu_drvid]
  1778 00000357 8856FA                  	mov [bp-6], dl		; set the driver id to dl
  1779 0000035A 8CC0                    	mov ax, es
  1780 0000035C C1E004                  	shl ax, byte 4
  1781 0000035F 894604                  	mov [bp+4], ax		; set new ip
  1782 00000362 31C0                    	xor ax, ax
  1783 00000364 894606                  	mov [bp+6], ax		; set new cs
  1784 00000367 894600                  	mov [bp], ax		; clear bp 
  1785 0000036A B855AA                  	mov ax, 0xaa55
  1786 0000036D 894602                  	mov [bp+2], ax
  1787 00000370 EB42                    	jmp short .success_out_no_ah
  1788                                  
  1789                                  .init_disk_emu:
  1790 00000372 E87801                  	call edd30_init_disk_emu
  1791 00000375 733B                    	jnc .success_out
  1792 00000377 EB43                    	jmp short .fail_out
  1793                                  
  1794                                  .return_boot_catalog:
  1795 00000379 E8FD00                  	call edd30_return_boot_catalog
  1796 0000037C 7334                    	jnc .success_out
  1797 0000037E EB3C                    	jmp short .fail_out
  1798                                  
  1799                                  .get_drv_param:
  1800 00000380 E88000                  	call edd30_get_cdrom_param
  1801 00000383 732D                    	jnc .success_out
  1802 00000385 EB33                    	jmp short .invalid_cmd
  1803                                  
  1804                                  .ext_write:
  1805 00000387 B403                    	mov ah, 0x03
  1806 00000389 EB31                    	jmp short .fail_out
  1807                                  
  1808                                  .ext_read:
  1809 0000038B E84100                  	call edd30_read_cdrom
  1810 0000038E 7322                    	jnc .success_out
  1811 00000390 EB2A                    	jmp short .fail_out
  1812                                  
  1813                                  .install_check:
  1814 00000392 C746F855AA              	mov word [bp-8], 0xaa55	; bx=0xaa55
  1815                                  
  1816                                  %ifdef EDD_3_0
  1817                                  	mov ah, 0x30		; ax=0x30  edd-3.0
  1818                                  %else
  1819 00000397 B421                    	mov ah, 0x21		; ax=0x21  edd-2.1
  1820                                  %endif
  1821                                  
  1822 00000399 C646FC07                	mov byte [bp-4], 0x07	; cx= 0x01 | 0x04, ext disk access and edd ok
  1823 0000039D EB15                    	jmp short .success_out_no_ah
  1824                                  
  1825                                  .get_disk_type:
  1826 0000039F B402                    	mov ah, 0x02
  1827 000003A1 EB11                    	jmp short .success_out_no_ah
  1828                                  
  1829                                  .get_last_stat:
  1830 000003A3 8A26[E701]              	mov ah, [int13_last_stat]
  1831 000003A7 EB0B                    	jmp short .success_out_no_ah
  1832                                  
  1833                                  .reset:
  1834 000003A9 E86105                  	call reg_reset
  1835 000003AC A1[0000]                	mov ax, [atapi_cur_dev]
  1836 000003AF E80A06                  	call select_atapi_force
  1837                                  
  1838                                  .success_out:
  1839 000003B2 30E4                    	xor ah,ah
  1840                                  
  1841                                  .success_out_no_ah:
  1842 000003B4 806608FE                	and byte [bp+8],0xfe
  1843 000003B8 EB06                    	jmp short .done
  1844                                  
  1845                                  .invalid_cmd:
  1846 000003BA B401                    	mov ah, 0x01
  1847                                  
  1848                                  .fail_out:
  1849 000003BC 804E0801                	or byte [bp+8],1
  1850                                  
  1851                                  .done:
  1852 000003C0 8826[E701]              	mov [int13_last_stat],ah
  1853 000003C4 886603                  	mov [bp+3], ah
  1854 000003C7 665A                    	pop edx
  1855 000003C9 07                      	pop es
  1856 000003CA 1F                      	pop ds
  1857 000003CB 61                      	popa
  1858 000003CC 5D                      	pop bp
  1859 000003CD 58                      	pop ax
  1860 000003CE CF                      	iret
  1861                                  
  1862                                  ;=============================================================================
  1863                                  edd30_read_cdrom:
  1864                                  ;return cf=0 success, cf=1 fail, ah = fail code
  1865 000003CF E87906                  	call test_atapi_ready
  1866 000003D2 7304                    	jnc .atapi_ok
  1867 000003D4 B4AA                    	mov ah, 0xaa
  1868 000003D6 EB0F                    	jmp short .fail_out
  1869                                  
  1870                                  .atapi_ok:
  1871 000003D8 1E                      	push ds
  1872 000003D9 8B46EE                  	mov ax, [bp-18]		; restore ds
  1873 000003DC 8ED8                    	mov ds, ax
  1874 000003DE 803C10                  	cmp byte [si], 16
  1875 000003E1 7406                    	je short .packet_ok
  1876 000003E3 1F                      	pop ds
  1877 000003E4 0F95C4                  	setne ah
  1878                                  .fail_out:
  1879 000003E7 F9                      	stc
  1880 000003E8 C3                      	ret
  1881                                  
  1882                                  .packet_ok:
  1883 000003E9 8B5C06                  	mov bx, [si + struc_int13ext.buf_addr_seg]
  1884 000003EC 8B4C02                  	mov cx, [si + struc_int13ext.blk_count]
  1885 000003EF 668B5408                	mov edx, [si + struc_int13ext.blk_num_low1]
  1886 000003F3 8B7C04                  	mov di, [si + struc_int13ext.buf_addr_off]
  1887 000003F6 1F                      	pop ds
  1888 000003F7 8EC3                    	mov es, bx
  1889 000003F9 E8D706                  	call read_atapi
  1890 000003FC 7201                    	jc .read_fail
  1891 000003FE C3                      	ret
  1892                                  
  1893                                  .read_fail:
  1894 000003FF B40C                    	mov ah, 0x0c
  1895 00000401 F9                      	stc
  1896 00000402 C3                      	ret
  1897                                  
  1898                                  ;=============================================================================
  1899                                  edd30_get_cdrom_param:
  1900                                  ;return cf =0 ok, cf =1 fail
  1901 00000403 1E                      	push ds
  1902 00000404 8B46EE                  	mov ax, [bp-18]		; restore ds
  1903 00000407 8ED8                    	mov ds, ax
  1904 00000409 8B04                    	mov ax, [si]
  1905 0000040B 83F81A                  	cmp ax, byte 26
  1906 0000040E 7306                    	jae .packet_ok
  1907 00000410 1F                      	pop ds
  1908 00000411 0F92C4                  	setb ah
  1909                                  .fail_out:
  1910 00000414 F9                      	stc
  1911 00000415 C3                      	ret
  1912                                  
  1913                                  .packet_ok:
  1914                                  
  1915                                  %ifdef EDD_3_0
  1916                                  	cmp ax, byte 66
  1917                                  	jb .below_3_0
  1918                                  	mov ax, 66
  1919                                  	jmp .set_packet_size
  1920                                  .below_3_0:
  1921                                  %endif
  1922                                  
  1923 00000416 83F81E                  	cmp ax, byte 30
  1924 00000419 7205                    	jb .below_2_0
  1925 0000041B B81E00                  	mov ax, 30
  1926 0000041E EB03                    	jmp .set_packet_size
  1927                                  .below_2_0:
  1928 00000420 B81A00                  	mov ax, 26
  1929                                  .set_packet_size:
  1930 00000423 8904                    	mov [si], ax
  1931 00000425 C744027400              	mov word [si+ struc_extparam.flags], 0x74  ; removable, lock, chg line
  1932 0000042A C744180008              	mov word [si+ struc_extparam.bytes_per_sect], CDSECTOR_SIZE
  1933 0000042F 31DB                    	xor bx, bx
  1934 00000431 4B                      	dec bx
  1935 00000432 895C04                  	mov [si+ struc_extparam.cylinders], bx
  1936 00000435 895C08                  	mov [si+ struc_extparam.heads], bx
  1937 00000438 895C0C                  	mov [si+ struc_extparam.sectors], bx
  1938                                  
  1939                                  %ifdef EDD_3_0
  1940                                  	cmp ax, byte 66
  1941                                  	jb .no_dpi
  1942                                  	mov word [si+ struc_extparam.dpi_key], 0xBEDD  ; dpi signature
  1943                                  	mov word [si+ struc_extparam.dpi_length], 0x24 ; dpi length
  1944                                  	mov dword [si+ struc_extparam.host_bus_type], 'ISA'
  1945                                  	mov dword [si+ struc_extparam.interface_type], 'ATAP'
  1946                                  	mov word [si+ struc_extparam.interface_type+4], 'I'
  1947                                  
  1948                                  	mov ax, [cs:atapi_cur_dev]
  1949                                  	call get_atapi_base_io
  1950                                  	mov [si+ struc_extparam.device_path], cx
  1951                                  	mov [si+ struc_extparam.interface_path], bx
  1952                                  
  1953                                  	push si
  1954                                  	add si, struc_extparam.dpi_key
  1955                                  	mov cx, struc_extparam.checksum - struc_extparam.dpi_key
  1956                                  	call edd30_checksum
  1957                                  	mov [si], ah
  1958                                  	pop si
  1959                                  .no_dpi:
  1960                                  %endif
  1961                                  
  1962 0000043B 83F81E                  	cmp ax, byte 30
  1963 0000043E 7208                    	jb .no_dpte
  1964 00000440 C7441A[FB01]                    mov word [si+ struc_extparam.dpte_addr], atapi_dpte_buffer
  1965 00000445 8C4C1C                          mov word [si+ struc_extparam.dpte_addr+2], cs
  1966                                  
  1967                                  .no_dpte:
  1968 00000448 1F                      	pop ds
  1969 00000449 A1[0000]                        mov ax, [atapi_cur_dev]
  1970 0000044C E86906                          call get_atapi_base_io
  1971 0000044F BE[FB01]                	mov si, atapi_dpte_buffer
  1972 00000452 891C                            mov [si], bx
  1973 00000454 895402                          mov [si+2], dx
  1974 00000457 B0E0                            mov al, 0xe0
  1975 00000459 C0E104                          shl cl, 4
  1976 0000045C 08C8                            or al, cl
  1977 0000045E 884404                          mov [si+struc_dpte.flags], al  ; LBA enable, bit 4 = slave drv
  1978 00000461 C6440A60                	mov byte [si+struc_dpte.bios_spec], 0x60 ;ATAPI and removable
  1979 00000465 B90F00                  	mov cx, struc_dpte.checksum
  1980 00000468 E80400                  	call edd30_checksum
  1981 0000046B 8824                    	mov [si], ah
  1982 0000046D F8                      	clc
  1983 0000046E C3                      	ret
  1984                                  
  1985                                  edd30_checksum:
  1986 0000046F 30E4                    	xor ah, ah
  1987                                  
  1988                                  .loop_checksum:
  1989 00000471 AC                      	lodsb
  1990 00000472 00C4                    	add ah, al
  1991 00000474 E2FB                    	loop .loop_checksum
  1992 00000476 F6DC                    	neg ah
  1993 00000478 C3                      	ret
  1994                                  	
  1995                                  ;=============================================================================
  1996                                  edd30_return_boot_catalog:
  1997                                  ;return cf =0 ok, cf =1 fail
  1998 00000479 E8CF05                  	call test_atapi_ready
  1999 0000047C 7304                    	jnc .atapi_ok
  2000 0000047E B4AA                    	mov ah, 0xaa
  2001 00000480 EB0F                    	jmp short .fail_out
  2002                                  
  2003                                  .atapi_ok:
  2004 00000482 1E                      	push ds
  2005 00000483 8B46EE                  	mov ax, [bp-18]		; restore ds
  2006 00000486 8ED8                    	mov ds, ax
  2007 00000488 803C08                  	cmp byte [si], 8
  2008 0000048B 1F                      	pop ds
  2009 0000048C 7305                    	jae .packet_ok
  2010 0000048E 0F92C4                  	setb ah
  2011                                  
  2012                                  .fail_out:
  2013 00000491 F9                      	stc
  2014 00000492 C3                      	ret
  2015                                  
  2016                                  .packet_ok:
  2017 00000493 0E                      	push cs
  2018 00000494 07                      	pop es
  2019 00000495 BF[0B02]                	mov di, edd30_disk_buffer
  2020 00000498 31C9                    	xor cx, cx
  2021 0000049A 41                      	inc cx
  2022 0000049B BA1100                  	mov dx, 0x11
  2023 0000049E 660FB7D2                	movzx edx,dx
  2024 000004A2 E82E06                  	call read_atapi			; read boot record volume descriptor
  2025 000004A5 7242                    	jc .read_fail
  2026 000004A7 803D00                  	cmp byte [di], 0
  2027 000004AA 753D                    	jne .non_bootable
  2028 000004AC 66817D07454C2054        	cmp dword [di+7], 'EL T'
  2029 000004B4 7533                    	jne .non_bootable
  2030 000004B6 66817D0B4F524954        	cmp dword [di+11], 'ORIT'
  2031 000004BE 7529                    	jne .non_bootable
  2032                                  
  2033 000004C0 668B5547                	mov edx, [di+0x47]
  2034 000004C4 6609D2                  	or edx, edx
  2035 000004C7 7420                    	jz .non_bootable
  2036                                  
  2037 000004C9 1E                      	push ds
  2038 000004CA 8B46EE                  	mov ax, [bp-18]		; restore ds
  2039 000004CD 8ED8                    	mov ds, ax
  2040 000004CF 660FB74406              	movzx eax, word [si + struc_cdbc_cmd.begnning_sect] ; begnning sector
  2041 000004D4 6601C2                  	add edx, eax
  2042                                  
  2043 000004D7 8A4C01                  	mov cl, [si + struc_cdbc_cmd.sector_count]
  2044 000004DA 8B5C04                  	mov bx, [si + struc_cdbc_cmd.buf_addr_seg]
  2045 000004DD 8B7C02                  	mov di, [si + struc_cdbc_cmd.buf_addr_off]
  2046 000004E0 1F                      	pop ds
  2047 000004E1 8EC3                    	mov es, bx
  2048 000004E3 E8ED05                  	call read_atapi
  2049 000004E6 7201                    	jc .read_fail
  2050 000004E8 C3                      	ret
  2051                                  
  2052                                  .non_bootable:
  2053                                  .read_fail:
  2054 000004E9 B40C                    	mov ah, 0x0c
  2055 000004EB F9                      	stc
  2056 000004EC C3                      	ret
  2057                                  
  2058                                  ;=============================================================================
  2059                                  edd30_init_disk_emu:
  2060 000004ED E85B05                  	call test_atapi_ready
  2061 000004F0 7304                    	jnc .atapi_ok
  2062 000004F2 B4AA                    	mov ah, 0xaa
  2063 000004F4 EB0F                    	jmp short .fail_out
  2064                                  
  2065                                  .atapi_ok:
  2066 000004F6 1E                      	push ds
  2067 000004F7 8B46EE                  	mov ax, [bp-18]		; restore ds
  2068 000004FA 8ED8                    	mov ds, ax
  2069 000004FC 803C13                  	cmp byte [si], SIZE_OF_CDEMU_SPEC
  2070 000004FF 7306                    	jae .packet_ok
  2071 00000501 1F                      	pop ds
  2072                                  
  2073                                  .invalid_cmd:
  2074 00000502 0F92C4                  	setb ah
  2075                                  .fail_out:
  2076 00000505 F9                      	stc
  2077 00000506 C3                      	ret
  2078                                  
  2079                                  .packet_ok:
  2080 00000507 06                      	push es
  2081 00000508 0E                      	push cs
  2082 00000509 07                      	pop es
  2083 0000050A BF[E801]                	mov di, edd30_cdemu_spec
  2084 0000050D 57                      	push di
  2085 0000050E B91300                  	mov cx, SIZE_OF_CDEMU_SPEC
  2086 00000511 F3A4                    	rep movsb
  2087 00000513 5E                      	pop si
  2088 00000514 07                      	pop es
  2089 00000515 1F                      	pop ds
  2090                                  
  2091 00000516 8816[DB01]              	mov [emu_cdrom_id], dl
  2092 0000051A 8A4402                  	mov al, [si + struc_cdemu_spec.emu_drvid]
  2093 0000051D 8A4401                  	mov al, [si + struc_cdemu_spec.media_type]
  2094 00000520 240F                    	and al, 0x0f
  2095 00000522 3C04                    	cmp al, 4
  2096 00000524 73DC                    	jae .invalid_cmd
  2097 00000526 D0E0                    	shl al, 1
  2098 00000528 A2[DC01]                	mov [emu_disk_type], al
  2099 0000052B 8B440A                  	mov ax, [si + struc_cdemu_spec.user_bufseg]
  2100 0000052E 09C0                    	or ax, ax
  2101 00000530 750C                    	jnz .has_user_buf
  2102 00000532 8C0E[D901]              	mov [emu_buf_seg], cs
  2103 00000536 B8[0B02]                	mov ax, edd30_disk_buffer
  2104 00000539 A3[D701]                	mov [emu_buf_off], ax
  2105 0000053C EB08                    	jmp short .cont
  2106                                  
  2107                                  .has_user_buf:
  2108 0000053E A3[D901]                	mov [emu_buf_seg], ax
  2109 00000541 31C0                    	xor ax, ax
  2110 00000543 A3[D701]                	mov [emu_buf_off], ax
  2111                                  .cont:
  2112 00000546 8B440C                  	mov ax, [si + struc_cdemu_spec.load_seg]
  2113 00000549 09C0                    	or ax, ax
  2114 0000054B 7505                    	jnz .has_load_seg
  2115 0000054D C7440CC007              	mov word [si + struc_cdemu_spec.load_seg], 0x07c0
  2116                                  
  2117                                  .has_load_seg:
  2118 00000552 8A6411                  	mov ah, [si + struc_cdemu_spec.sectors]
  2119 00000555 88E3                    	mov bl, ah
  2120 00000557 C0E406                  	shl ah, byte 6
  2121 0000055A 8A4410                  	mov al, [si + struc_cdemu_spec.cylinders]
  2122 0000055D A3[DD01]                	mov [emu_cyl], ax
  2123 00000560 83E33F                  	and bx, byte 63
  2124 00000563 891E[DF01]              	mov [emu_sec], bx
  2125 00000567 8A5C12                  	mov bl, [si + struc_cdemu_spec.heads]
  2126 0000056A 891E[E101]              	mov [emu_head], bx
  2127                                  
  2128                                  %if 1
  2129 0000056E 803E[DC01]00            	cmp byte [emu_disk_type], 0
  2130 00000573 741C                    	jz .no_disk_swap
  2131 00000575 807C0200                	cmp byte [si + struc_cdemu_spec.emu_drvid], 0
  2132 00000579 7516                    	jnz .no_disk_swap
  2133 0000057B 31C0                    	xor ax, ax
  2134 0000057D A3[D301]                	mov [drive_map+2], ax
  2135 00000580 FEC0                    	inc al
  2136 00000582 A3[D101]                	mov [drive_map], ax		; install the swap drive map
  2137                                  
  2138                                  ;increase the floppy number
  2139 00000585 06                      	push es
  2140 00000586 6A40                    	push word 0x0040
  2141 00000588 07                      	pop es
  2142 00000589 BB1000                  	mov bx, 0x0010
  2143 0000058C 26800F41                	or byte [es:bx], 0x41
  2144 00000590 07                      	pop es
  2145                                  
  2146                                  %endif
  2147                                  .no_disk_swap:
  2148                                  
  2149 00000591 F8                      	clc
  2150 00000592 C3                      	ret
  2151                                  
  2152                                  ;=============================================================================
  2153                                  ;draw_string_tty ---- Draw a string ending by zero ( tty mode )
  2154                                  ;input:
  2155                                  ;      ds:si -> string
  2156                                  ;output:
  2157                                  ;      none
  2158                                  ;=============================================================================
  2159                                  draw_string_tty:
  2160                                  .draw1:
  2161 00000593 AC                              lodsb
  2162 00000594 08C0                            or al, al
  2163 00000596 7409                            jz .end
  2164 00000598 BB0700                          mov bx,7
  2165 0000059B B40E                            mov ah,0x0e
  2166 0000059D CD10                            int 0x10
  2167 0000059F EBF2                            jmp short .draw1
  2168                                  .end:
  2169 000005A1 C3                              ret
  2170                                  
  2171                                  
  2172                                  cdemu_act_table:
  2173 000005A2 000102040815164B        	db 0x0, 0x1, 0x2, 0x4, 0x8, 0x15, 0x16, 0x4b
  2174                                  .end_of_table
  2175                                  
  2176                                  cdemu_jmp_table:
  2177 000005AA [B203]                  	dw edd30_for_cdrom.success_out		; 0 reset 
  2178 000005AC [A303]                  	dw edd30_for_cdrom.get_last_stat	; 1 get last state
  2179 000005AE [3902]                  	dw cdemu_int13h.emu_read		; 2 read
  2180 000005B0 [3902]                  	dw cdemu_int13h.emu_read		; 4 verify
  2181 000005B2 [0F02]                  	dw cdemu_int13h.emu_get_param		; 8 get param
  2182 000005B4 [3402]                  	dw cdemu_int13h.emu_get_type		; 0x15 get type
  2183 000005B6 [B203]                  	dw edd30_for_cdrom.success_out		; 0x16 detect disk change
  2184 000005B8 [F501]                  	dw cdemu_int13h.stop_disk_emu		; 0x4b stop disk emu
  2185                                  .end_of_table
  2186                                  
  2187                                  
  2188                                  edd30_act_table:
  2189 000005BA 000115414243444546-     	db 0x0, 0x1, 0x15, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4D, 0x4A, 0x4C, 0x4E, 0x4B
  2190 000005C3 4748494D4A4C4E4B   
  2191                                  .end_of_table
  2192                                  
  2193                                  edd30_jmp_table:
  2194 000005CB [A903]                  	dw edd30_for_cdrom.reset
  2195 000005CD [A303]                  	dw edd30_for_cdrom.get_last_stat
  2196 000005CF [9F03]                  	dw edd30_for_cdrom.get_disk_type
  2197 000005D1 [9203]                  	dw edd30_for_cdrom.install_check
  2198 000005D3 [8B03]                  	dw edd30_for_cdrom.ext_read
  2199 000005D5 [8703]                  	dw edd30_for_cdrom.ext_write
  2200 000005D7 [8B03]                  	dw edd30_for_cdrom.ext_read
  2201 000005D9 [B203]                  	dw edd30_for_cdrom.success_out		; lock / unlock
  2202 000005DB [B203]                  	dw edd30_for_cdrom.success_out		; eject
  2203 000005DD [B203]                  	dw edd30_for_cdrom.success_out		; extended seek
  2204 000005DF [8003]                  	dw edd30_for_cdrom.get_drv_param
  2205 000005E1 [B203]                  	dw edd30_for_cdrom.success_out		; check media change
  2206 000005E3 [7903]                  	dw edd30_for_cdrom.return_boot_catalog
  2207 000005E5 [7203]                  	dw edd30_for_cdrom.init_disk_emu
  2208 000005E7 [1503]                  	dw edd30_for_cdrom.init_disk_emu_and_boot
  2209 000005E9 [B203]                  	dw edd30_for_cdrom.success_out		;set hardware configuration
  2210 000005EB [F501]                  	dw cdemu_int13h.stop_disk_emu		; 0x4b stop disk emu
  2211                                  .end_of_table
  2212                                  
  2213                                  
  2214                                  ;=============================================================================
  2215                                  ; IDE ATAPI driver
  2216                                  ;=============================================================================
  2217                                  
  2218                                  ;*************************************
  2219                                  ;timer relate functions
  2220                                  ;*************************************
  2221                                  %ifdef SLOW_ATAPI_DEVICE
  2222                                  proc	init_timer
  2223                                  	call read_bios_time
  2224                                  	mov bx, ax
  2225                                  	xor ecx, ecx
  2226                                  	repeat
  2227                                  		call read_bios_time
  2228                                  		inc ecx
  2229                                  	until {cmp bx, ax}, ne
  2230                                  	mov eax, ecx
  2231                                  	xor edx, edx
  2232                                  	xor ecx, ecx
  2233                                  	mov cx, DELAY_MSECS
  2234                                  	div ecx
  2235                                  	mov [delay_repeat_num], eax
  2236                                  endp
  2237                                  %endif
  2238                                  
  2239                                  proc	read_bios_time
  2240                              <1> GLOBAL %1
  2241                              <1> %1:
  2242                              <1> con_push proc
  2243                              <2>  %assign __lastlevel__ __level__
  2244                              <2>  %assign __level__ __level__ + 1
  2245                              <2>  %if __return__ > 0
  2246                              <2>  %assign con_return 1
  2247                              <2>  %else
  2248                              <2>  %assign con_return 0
  2249                              <2>  %endif
  2250                              <2> 
  2251                              <2>  %if __cont__ > 0
  2252                              <2>  %assign con_cont 1
  2253                              <2>  %else
  2254                              <2>  %assign con_cont 0
  2255                              <2>  %endif
  2256                              <2>  %if __break__ > 0
  2257                              <2>  %assign con_break 1
  2258                              <2>  %else
  2259                              <2>  %assign con_break 0
  2260                              <2>  %endif
  2261                              <2> 
  2262                              <2>  %ifidn %1,proc
  2263                              <2>  %assign con_return 0
  2264                              <2>  %elifidn %1,forcx
  2265                              <2>  %assign con_break 0
  2266                              <2>  %elifidn %1,repeat
  2267                              <2>  %assign con_cont 0
  2268                              <2>  %assign con_break 0
  2269                              <2>  %elifidn %1,while
  2270                              <2>  %assign con_cont 0
  2271                              <2>  %assign con_break 0
  2272                              <2>  %endif
  2273                              <2> 
  2274                              <2>  %if __cndblock__ == 1
  2275                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  2276                              <2>  %endif
  2277                              <2> 
  2278                              <2>  %push %1
  2279                              <2>  %if con_return
  2280                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  2281                              <2>  %endif
  2282                              <2>  %if con_break
  2283                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  2284                              <2>  %endif
  2285                              <2>  %if con_cont
  2286                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  2287                              <2>  %endif
  2288                              <2> 
  2289                              <2>  %ifidn %1,andblock
  2290                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  2291                              <2>  %elifidn %1,orblock
  2292                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  2293                              <2>  %endif
  2294                              <1> %assign __return__ __return__ + 1
  2295                              <1> %assign __have_frame__ 0
  2296                              <1> %assign %$have_local 0
  2297                              <1> %assign %$have_save 0
  2298                              <1> %assign __save_all__ 0
  2299                              <1> %assign %$local_args 0
  2300                              <1> %assign %$proc_args 0
  2301                              <1> %assign __save_args__ 0
  2302                              <1> %if %0 > 1
  2303                              <1>  %assign args %0 - 1
  2304                              <1>  %assign %$bp_off 4
  2305                              <1>  %assign i 0
  2306                              <1>  %rotate 1
  2307                              <1>  %ifidn %1,withlocal
  2308                              <1>  %assign %$have_local 1
  2309                              <1>  %assign args args -1
  2310                              <1>  %rotate 1
  2311                              <1>  %endif
  2312                              <1>  %assign %$proc_args args
  2313                              <1>  %rep args
  2314                              <1> 
  2315                              <1>  %%inputarg__%1 EQU %$bp_off
  2316                              <1>  %undef .%1
  2317                              <1>  %define .%1 %%inputarg__%1+bp
  2318                              <1>  cat_define %$proc_argv ,i,%1
  2319                              <1>  %assign %$bp_off %$bp_off + 2
  2320                              <1>  %assign i i+1
  2321                              <1>  %rotate 1
  2322                              <1>  %endrep
  2323                              <1>  %if %$have_local==0
  2324                              <1>  enter 0,0
  2325                              <1>  %assign __have_frame__ 1
  2326                              <1>  %endif
  2327                              <1> %endif
  2328                                  ;	return dx:ax as the long time
  2329                                  	save ds
  2330                              <1> %ifctx proc
  2331                              <1>  %if %$have_local == 1
  2332                              <1>  %error "`save' must after `local'"
  2333                              <1>  %endif
  2334                              <1> 
  2335                              <1>  %ifidn all,%1
  2336                              <1>  %assign __save_all__ 1
  2337                              <1>  %if %0 > 1
  2338                              <1>  %ifidn frame,%2
  2339                              <1>  %if __have_frame__ == 0
  2340                              <1>  enter 0,0
  2341                              <1>  %assign __have_frame__ 1
  2342                              <1>  %assign local_off 0
  2343                              <1>  %endif
  2344                              <1>  %endif
  2345                              <1>  %endif
  2346                              <1>  pusha
  2347                              <1>  %if __have_frame__ == 1
  2348                              <1>  %undef __AX
  2349                              <1>  %undef __BX
  2350                              <1>  %undef __CX
  2351                              <1>  %undef __DX
  2352                              <1>  %undef __SI
  2353                              <1>  %undef __DI
  2354                              <1>  %idefine __AX bp-local_off - 2
  2355                              <1>  %idefine __CX bp-local_off - 4
  2356                              <1>  %idefine __DX bp-local_off - 6
  2357                              <1>  %idefine __BX bp-local_off - 8
  2358                              <1> 
  2359                              <1> 
  2360                              <1>  %idefine __SI bp-local_off - 14
  2361                              <1>  %idefine __DI bp-local_off - 16
  2362                              <1>  %endif
  2363                              <1>  %elifidn alld,%1
  2364                              <1>  %assign __save_all__ 2
  2365                              <1>  %if %0 > 1
  2366                              <1>  %ifidn frame,%2
  2367                              <1>  %if __have_frame__ == 0
  2368                              <1>  enter 0,0
  2369                              <1>  %assign __have_frame__ 1
  2370                              <1>  %assign local_off 0
  2371                              <1>  %endif
  2372                              <1>  %endif
  2373                              <1>  %endif
  2374                              <1>  pushad
  2375                              <1>  %if __have_frame__ == 1
  2376                              <1>  %undef __EAX
  2377                              <1>  %undef __EBX
  2378                              <1>  %undef __ECX
  2379                              <1>  %undef __EDX
  2380                              <1>  %undef __ESI
  2381                              <1>  %undef __EDI
  2382                              <1>  %idefine __EAX bp-local_off - 4
  2383                              <1>  %idefine __ECX bp-local_off - 8
  2384                              <1>  %idefine __EDX bp-local_off - 12
  2385                              <1>  %idefine __EBX bp-local_off - 16
  2386                              <1> 
  2387                              <1> 
  2388                              <1>  %idefine __ESI bp-local_off - 18
  2389                              <1>  %idefine __EDI bp-local_off - 32
  2390                              <1>  %endif
  2391                              <1> 
  2392                              <1>  %else
  2393                              <1>  %assign __save_args__ %0
  2394                              <1>  %assign __save_all__ 0
  2395                              <1>  %assign i %0
  2396                              <1>  %rep %0
  2397                              <1>  push %1
  2398                              <1>  cat_define %$save_argv ,i,%1
  2399                              <1>  %rotate 1
  2400                              <1>  %assign i i - 1
  2401                              <1>  %endrep
  2402 000005ED 1E                  <2>  push %1
  2403                              <2>  cat_define %$save_argv ,i,%1
  2404                              <3> %define %1%2 %3
  2405                              <2>  %rotate 1
  2406                              <2>  %assign i i - 1
  2407                              <1>  %endif
  2408                              <1> %else
  2409                              <1>  %error "`save' must after `proc'"
  2410                              <1> %endif
  2411 000005EE 29C0                    	sub ax,ax
  2412 000005F0 8ED8                    	mov ds,ax
  2413                                  	repeat
  2414                              <1> con_push repeat
  2415                              <2>  %assign __lastlevel__ __level__
  2416                              <2>  %assign __level__ __level__ + 1
  2417                              <2>  %if __return__ > 0
  2418                              <2>  %assign con_return 1
  2419                              <2>  %else
  2420                              <2>  %assign con_return 0
  2421                              <2>  %endif
  2422                              <2> 
  2423                              <2>  %if __cont__ > 0
  2424                              <2>  %assign con_cont 1
  2425                              <2>  %else
  2426                              <2>  %assign con_cont 0
  2427                              <2>  %endif
  2428                              <2>  %if __break__ > 0
  2429                              <2>  %assign con_break 1
  2430                              <2>  %else
  2431                              <2>  %assign con_break 0
  2432                              <2>  %endif
  2433                              <2> 
  2434                              <2>  %ifidn %1,proc
  2435                              <2>  %assign con_return 0
  2436                              <2>  %elifidn %1,forcx
  2437                              <2>  %assign con_break 0
  2438                              <2>  %elifidn %1,repeat
  2439                              <2>  %assign con_cont 0
  2440                              <2>  %assign con_break 0
  2441                              <2>  %elifidn %1,while
  2442                              <2>  %assign con_cont 0
  2443                              <2>  %assign con_break 0
  2444                              <2>  %endif
  2445                              <2> 
  2446                              <2>  %if __cndblock__ == 1
  2447                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  2448                              <2>  %endif
  2449                              <2> 
  2450                              <2>  %push %1
  2451                              <2>  %if con_return
  2452                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  2453                              <3> %define %1%2 %3%4
  2454                              <2>  %endif
  2455                              <2>  %if con_break
  2456                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  2457                              <2>  %endif
  2458                              <2>  %if con_cont
  2459                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  2460                              <2>  %endif
  2461                              <2> 
  2462                              <2>  %ifidn %1,andblock
  2463                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  2464                              <2>  %elifidn %1,orblock
  2465                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  2466                              <2>  %endif
  2467                              <1> %assign __break__ __break__ + 1
  2468                              <1> %assign __cont__ __cont__ + 1
  2469                              <1> %$begin:
  2470                              <1> cat_lable %$cont,__level__
  2471                              <2> %1%2:
  2472 000005F2 66A16C04                		mov eax,[0x46c]
  2473                                  	until {cmp eax,[0x46c]}, e
  2474                              <1>  %assign __near__ 0
  2475                              <1>  %assign __argc__ %0
  2476                              <1>  %ifidn near,%1
  2477                              <1>  %assign __near__ 1
  2478                              <1>  %rotate 1
  2479                              <1>  %assign __argc__ __argc__ -1
  2480                              <1>  %endif
  2481                              <1>  %rep __argc__ -1
  2482                              <1>  %1
  2483                              <1>  %rotate 1
  2484                              <1>  %endrep
  2485 000005F6 663B066C04          <2>  %1
  2486                              <2>  %rotate 1
  2487                              <1>  %ifctx repeat
  2488                              <1>  %if __near__ >0
  2489                              <1>  j%-1 near %$begin
  2490                              <1>  %else
  2491 000005FB 75F5                <1>  j%-1 %$begin
  2492                              <1>  %endif
  2493                              <1>  %$end:
  2494                              <1>  cat_lable %$break,__level__
  2495                              <2> %1%2:
  2496                              <1>  %else
  2497                              <1>  %error "expected `repeat' before `until'"
  2498                              <1>  %endif
  2499                              <1> con_pop
  2500                              <2>  %pop
  2501                              <2>  %assign __level__ __level__ - 1
  2502                              <1> %assign __break__ __break__ - 1
  2503                              <1> %assign __cont__ __cont__ - 1
  2504                                  endp
  2505                              <1> %ifnctx proc
  2506                              <1>  %error "expected `proc' before `endp'"
  2507                              <1> %endif
  2508                              <1>  cat_lable %$return,__level__
  2509                              <2> %1%2:
  2510                              <1>  %if __save_all__ ==1
  2511                              <1>  popa
  2512                              <1>  %elif __save_all__ == 2
  2513                              <1>  popad
  2514                              <1>  %elif __save_args__ > 0
  2515                              <1>  %assign i 1
  2516                              <1>  %rep __save_args__
  2517                              <1>  linecat pop, %$save_argv,i
  2518                              <1>  %assign i i+1
  2519                              <1>  %endrep
  2520                              <2>  linecat pop, %$save_argv,i
  2521 000005FD 1F                  <3>  %1 %2%3
  2522                              <2>  %assign i i+1
  2523                              <1>  %endif
  2524                              <1>  %if __have_frame__ > 0
  2525                              <1>  leave
  2526                              <1>  %endif
  2527                              <1> 
  2528                              <1>  %assign i 0
  2529                              <1>  %rep %$proc_args
  2530                              <1> 
  2531                              <1>  %assign i i+1
  2532                              <1>  %endrep
  2533                              <1> 
  2534                              <1>  %assign i 0
  2535                              <1>  %rep %$local_args
  2536                              <1> 
  2537                              <1>  %assign i i+1
  2538                              <1>  %endrep
  2539 000005FE C3                  <1>  ret
  2540                              <1>  con_pop
  2541                              <2>  %pop
  2542                              <2>  %assign __level__ __level__ - 1
  2543                              <1>  %assign __return__ __return__ - 1
  2544                                  
  2545                                  proc	set_timeout
  2546                              <1> GLOBAL %1
  2547                              <1> %1:
  2548                              <1> con_push proc
  2549                              <2>  %assign __lastlevel__ __level__
  2550                              <2>  %assign __level__ __level__ + 1
  2551                              <2>  %if __return__ > 0
  2552                              <2>  %assign con_return 1
  2553                              <2>  %else
  2554                              <2>  %assign con_return 0
  2555                              <2>  %endif
  2556                              <2> 
  2557                              <2>  %if __cont__ > 0
  2558                              <2>  %assign con_cont 1
  2559                              <2>  %else
  2560                              <2>  %assign con_cont 0
  2561                              <2>  %endif
  2562                              <2>  %if __break__ > 0
  2563                              <2>  %assign con_break 1
  2564                              <2>  %else
  2565                              <2>  %assign con_break 0
  2566                              <2>  %endif
  2567                              <2> 
  2568                              <2>  %ifidn %1,proc
  2569                              <2>  %assign con_return 0
  2570                              <2>  %elifidn %1,forcx
  2571                              <2>  %assign con_break 0
  2572                              <2>  %elifidn %1,repeat
  2573                              <2>  %assign con_cont 0
  2574                              <2>  %assign con_break 0
  2575                              <2>  %elifidn %1,while
  2576                              <2>  %assign con_cont 0
  2577                              <2>  %assign con_break 0
  2578                              <2>  %endif
  2579                              <2> 
  2580                              <2>  %if __cndblock__ == 1
  2581                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  2582                              <2>  %endif
  2583                              <2> 
  2584                              <2>  %push %1
  2585                              <2>  %if con_return
  2586                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  2587                              <2>  %endif
  2588                              <2>  %if con_break
  2589                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  2590                              <2>  %endif
  2591                              <2>  %if con_cont
  2592                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  2593                              <2>  %endif
  2594                              <2> 
  2595                              <2>  %ifidn %1,andblock
  2596                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  2597                              <2>  %elifidn %1,orblock
  2598                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  2599                              <2>  %endif
  2600                              <1> %assign __return__ __return__ + 1
  2601                              <1> %assign __have_frame__ 0
  2602                              <1> %assign %$have_local 0
  2603                              <1> %assign %$have_save 0
  2604                              <1> %assign __save_all__ 0
  2605                              <1> %assign %$local_args 0
  2606                              <1> %assign %$proc_args 0
  2607                              <1> %assign __save_args__ 0
  2608                              <1> %if %0 > 1
  2609                              <1>  %assign args %0 - 1
  2610                              <1>  %assign %$bp_off 4
  2611                              <1>  %assign i 0
  2612                              <1>  %rotate 1
  2613                              <1>  %ifidn %1,withlocal
  2614                              <1>  %assign %$have_local 1
  2615                              <1>  %assign args args -1
  2616                              <1>  %rotate 1
  2617                              <1>  %endif
  2618                              <1>  %assign %$proc_args args
  2619                              <1>  %rep args
  2620                              <1> 
  2621                              <1>  %%inputarg__%1 EQU %$bp_off
  2622                              <1>  %undef .%1
  2623                              <1>  %define .%1 %%inputarg__%1+bp
  2624                              <1>  cat_define %$proc_argv ,i,%1
  2625                              <1>  %assign %$bp_off %$bp_off + 2
  2626                              <1>  %assign i i+1
  2627                              <1>  %rotate 1
  2628                              <1>  %endrep
  2629                              <1>  %if %$have_local==0
  2630                              <1>  enter 0,0
  2631                              <1>  %assign __have_frame__ 1
  2632                              <1>  %endif
  2633                              <1> %endif
  2634                                  	save eax
  2635                              <1> %ifctx proc
  2636                              <1>  %if %$have_local == 1
  2637                              <1>  %error "`save' must after `local'"
  2638                              <1>  %endif
  2639                              <1> 
  2640                              <1>  %ifidn all,%1
  2641                              <1>  %assign __save_all__ 1
  2642                              <1>  %if %0 > 1
  2643                              <1>  %ifidn frame,%2
  2644                              <1>  %if __have_frame__ == 0
  2645                              <1>  enter 0,0
  2646                              <1>  %assign __have_frame__ 1
  2647                              <1>  %assign local_off 0
  2648                              <1>  %endif
  2649                              <1>  %endif
  2650                              <1>  %endif
  2651                              <1>  pusha
  2652                              <1>  %if __have_frame__ == 1
  2653                              <1>  %undef __AX
  2654                              <1>  %undef __BX
  2655                              <1>  %undef __CX
  2656                              <1>  %undef __DX
  2657                              <1>  %undef __SI
  2658                              <1>  %undef __DI
  2659                              <1>  %idefine __AX bp-local_off - 2
  2660                              <1>  %idefine __CX bp-local_off - 4
  2661                              <1>  %idefine __DX bp-local_off - 6
  2662                              <1>  %idefine __BX bp-local_off - 8
  2663                              <1> 
  2664                              <1> 
  2665                              <1>  %idefine __SI bp-local_off - 14
  2666                              <1>  %idefine __DI bp-local_off - 16
  2667                              <1>  %endif
  2668                              <1>  %elifidn alld,%1
  2669                              <1>  %assign __save_all__ 2
  2670                              <1>  %if %0 > 1
  2671                              <1>  %ifidn frame,%2
  2672                              <1>  %if __have_frame__ == 0
  2673                              <1>  enter 0,0
  2674                              <1>  %assign __have_frame__ 1
  2675                              <1>  %assign local_off 0
  2676                              <1>  %endif
  2677                              <1>  %endif
  2678                              <1>  %endif
  2679                              <1>  pushad
  2680                              <1>  %if __have_frame__ == 1
  2681                              <1>  %undef __EAX
  2682                              <1>  %undef __EBX
  2683                              <1>  %undef __ECX
  2684                              <1>  %undef __EDX
  2685                              <1>  %undef __ESI
  2686                              <1>  %undef __EDI
  2687                              <1>  %idefine __EAX bp-local_off - 4
  2688                              <1>  %idefine __ECX bp-local_off - 8
  2689                              <1>  %idefine __EDX bp-local_off - 12
  2690                              <1>  %idefine __EBX bp-local_off - 16
  2691                              <1> 
  2692                              <1> 
  2693                              <1>  %idefine __ESI bp-local_off - 18
  2694                              <1>  %idefine __EDI bp-local_off - 32
  2695                              <1>  %endif
  2696                              <1> 
  2697                              <1>  %else
  2698                              <1>  %assign __save_args__ %0
  2699                              <1>  %assign __save_all__ 0
  2700                              <1>  %assign i %0
  2701                              <1>  %rep %0
  2702                              <1>  push %1
  2703                              <1>  cat_define %$save_argv ,i,%1
  2704                              <1>  %rotate 1
  2705                              <1>  %assign i i - 1
  2706                              <1>  %endrep
  2707 000005FF 6650                <2>  push %1
  2708                              <2>  cat_define %$save_argv ,i,%1
  2709                              <3> %define %1%2 %3
  2710                              <2>  %rotate 1
  2711                              <2>  %assign i i - 1
  2712                              <1>  %endif
  2713                              <1> %else
  2714                              <1>  %error "`save' must after `proc'"
  2715                              <1> %endif
  2716 00000601 E8E9FF                  	call read_bios_time
  2717 00000604 83C05A                  	add ax, 5*18	; 20 seconds
  2718                                  	 		; FIXME: Midnight overflow
  2719 00000607 A3[0300]                	mov [time_out],ax
  2720                                  endp
  2721                              <1> %ifnctx proc
  2722                              <1>  %error "expected `proc' before `endp'"
  2723                              <1> %endif
  2724                              <1>  cat_lable %$return,__level__
  2725                              <2> %1%2:
  2726                              <1>  %if __save_all__ ==1
  2727                              <1>  popa
  2728                              <1>  %elif __save_all__ == 2
  2729                              <1>  popad
  2730                              <1>  %elif __save_args__ > 0
  2731                              <1>  %assign i 1
  2732                              <1>  %rep __save_args__
  2733                              <1>  linecat pop, %$save_argv,i
  2734                              <1>  %assign i i+1
  2735                              <1>  %endrep
  2736                              <2>  linecat pop, %$save_argv,i
  2737 0000060A 6658                <3>  %1 %2%3
  2738                              <2>  %assign i i+1
  2739                              <1>  %endif
  2740                              <1>  %if __have_frame__ > 0
  2741                              <1>  leave
  2742                              <1>  %endif
  2743                              <1> 
  2744                              <1>  %assign i 0
  2745                              <1>  %rep %$proc_args
  2746                              <1> 
  2747                              <1>  %assign i i+1
  2748                              <1>  %endrep
  2749                              <1> 
  2750                              <1>  %assign i 0
  2751                              <1>  %rep %$local_args
  2752                              <1> 
  2753                              <1>  %assign i i+1
  2754                              <1>  %endrep
  2755 0000060C C3                  <1>  ret
  2756                              <1>  con_pop
  2757                              <2>  %pop
  2758                              <2>  %assign __level__ __level__ - 1
  2759                              <1>  %assign __return__ __return__ - 1
  2760                                  
  2761                                  proc	check_timeout
  2762                              <1> GLOBAL %1
  2763                              <1> %1:
  2764                              <1> con_push proc
  2765                              <2>  %assign __lastlevel__ __level__
  2766                              <2>  %assign __level__ __level__ + 1
  2767                              <2>  %if __return__ > 0
  2768                              <2>  %assign con_return 1
  2769                              <2>  %else
  2770                              <2>  %assign con_return 0
  2771                              <2>  %endif
  2772                              <2> 
  2773                              <2>  %if __cont__ > 0
  2774                              <2>  %assign con_cont 1
  2775                              <2>  %else
  2776                              <2>  %assign con_cont 0
  2777                              <2>  %endif
  2778                              <2>  %if __break__ > 0
  2779                              <2>  %assign con_break 1
  2780                              <2>  %else
  2781                              <2>  %assign con_break 0
  2782                              <2>  %endif
  2783                              <2> 
  2784                              <2>  %ifidn %1,proc
  2785                              <2>  %assign con_return 0
  2786                              <2>  %elifidn %1,forcx
  2787                              <2>  %assign con_break 0
  2788                              <2>  %elifidn %1,repeat
  2789                              <2>  %assign con_cont 0
  2790                              <2>  %assign con_break 0
  2791                              <2>  %elifidn %1,while
  2792                              <2>  %assign con_cont 0
  2793                              <2>  %assign con_break 0
  2794                              <2>  %endif
  2795                              <2> 
  2796                              <2>  %if __cndblock__ == 1
  2797                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  2798                              <2>  %endif
  2799                              <2> 
  2800                              <2>  %push %1
  2801                              <2>  %if con_return
  2802                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  2803                              <2>  %endif
  2804                              <2>  %if con_break
  2805                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  2806                              <2>  %endif
  2807                              <2>  %if con_cont
  2808                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  2809                              <2>  %endif
  2810                              <2> 
  2811                              <2>  %ifidn %1,andblock
  2812                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  2813                              <2>  %elifidn %1,orblock
  2814                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  2815                              <2>  %endif
  2816                              <1> %assign __return__ __return__ + 1
  2817                              <1> %assign __have_frame__ 0
  2818                              <1> %assign %$have_local 0
  2819                              <1> %assign %$have_save 0
  2820                              <1> %assign __save_all__ 0
  2821                              <1> %assign %$local_args 0
  2822                              <1> %assign %$proc_args 0
  2823                              <1> %assign __save_args__ 0
  2824                              <1> %if %0 > 1
  2825                              <1>  %assign args %0 - 1
  2826                              <1>  %assign %$bp_off 4
  2827                              <1>  %assign i 0
  2828                              <1>  %rotate 1
  2829                              <1>  %ifidn %1,withlocal
  2830                              <1>  %assign %$have_local 1
  2831                              <1>  %assign args args -1
  2832                              <1>  %rotate 1
  2833                              <1>  %endif
  2834                              <1>  %assign %$proc_args args
  2835                              <1>  %rep args
  2836                              <1> 
  2837                              <1>  %%inputarg__%1 EQU %$bp_off
  2838                              <1>  %undef .%1
  2839                              <1>  %define .%1 %%inputarg__%1+bp
  2840                              <1>  cat_define %$proc_argv ,i,%1
  2841                              <1>  %assign %$bp_off %$bp_off + 2
  2842                              <1>  %assign i i+1
  2843                              <1>  %rotate 1
  2844                              <1>  %endrep
  2845                              <1>  %if %$have_local==0
  2846                              <1>  enter 0,0
  2847                              <1>  %assign __have_frame__ 1
  2848                              <1>  %endif
  2849                              <1> %endif
  2850                                  ; you need to setup the timeout first
  2851                                  %define is_timeout a
  2852                                  %define cc_nottimeout na
  2853 0000060D E8DDFF                  	call read_bios_time
  2854 00000610 3B06[0300]              	cmp ax,[time_out]
  2855                                  %ifdef DEBUG
  2856                                  	if is_timeout
  2857                                  		debug_print "timeout accord!!!"
  2858                                  	endif
  2859                                  %endif
  2860                                  endp
  2861                              <1> %ifnctx proc
  2862                              <1>  %error "expected `proc' before `endp'"
  2863                              <1> %endif
  2864                              <1>  cat_lable %$return,__level__
  2865                              <2> %1%2:
  2866                              <1>  %if __save_all__ ==1
  2867                              <1>  popa
  2868                              <1>  %elif __save_all__ == 2
  2869                              <1>  popad
  2870                              <1>  %elif __save_args__ > 0
  2871                              <1>  %assign i 1
  2872                              <1>  %rep __save_args__
  2873                              <1>  linecat pop, %$save_argv,i
  2874                              <1>  %assign i i+1
  2875                              <1>  %endrep
  2876                              <1>  %endif
  2877                              <1>  %if __have_frame__ > 0
  2878                              <1>  leave
  2879                              <1>  %endif
  2880                              <1> 
  2881                              <1>  %assign i 0
  2882                              <1>  %rep %$proc_args
  2883                              <1> 
  2884                              <1>  %assign i i+1
  2885                              <1>  %endrep
  2886                              <1> 
  2887                              <1>  %assign i 0
  2888                              <1>  %rep %$local_args
  2889                              <1> 
  2890                              <1>  %assign i i+1
  2891                              <1>  %endrep
  2892 00000614 C3                  <1>  ret
  2893                              <1>  con_pop
  2894                              <2>  %pop
  2895                              <2>  %assign __level__ __level__ - 1
  2896                              <1>  %assign __return__ __return__ - 1
  2897                                  
  2898                                  proc	sub_xfer_delay
  2899                              <1> GLOBAL %1
  2900                              <1> %1:
  2901                              <1> con_push proc
  2902                              <2>  %assign __lastlevel__ __level__
  2903                              <2>  %assign __level__ __level__ + 1
  2904                              <2>  %if __return__ > 0
  2905                              <2>  %assign con_return 1
  2906                              <2>  %else
  2907                              <2>  %assign con_return 0
  2908                              <2>  %endif
  2909                              <2> 
  2910                              <2>  %if __cont__ > 0
  2911                              <2>  %assign con_cont 1
  2912                              <2>  %else
  2913                              <2>  %assign con_cont 0
  2914                              <2>  %endif
  2915                              <2>  %if __break__ > 0
  2916                              <2>  %assign con_break 1
  2917                              <2>  %else
  2918                              <2>  %assign con_break 0
  2919                              <2>  %endif
  2920                              <2> 
  2921                              <2>  %ifidn %1,proc
  2922                              <2>  %assign con_return 0
  2923                              <2>  %elifidn %1,forcx
  2924                              <2>  %assign con_break 0
  2925                              <2>  %elifidn %1,repeat
  2926                              <2>  %assign con_cont 0
  2927                              <2>  %assign con_break 0
  2928                              <2>  %elifidn %1,while
  2929                              <2>  %assign con_cont 0
  2930                              <2>  %assign con_break 0
  2931                              <2>  %endif
  2932                              <2> 
  2933                              <2>  %if __cndblock__ == 1
  2934                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  2935                              <2>  %endif
  2936                              <2> 
  2937                              <2>  %push %1
  2938                              <2>  %if con_return
  2939                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  2940                              <2>  %endif
  2941                              <2>  %if con_break
  2942                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  2943                              <2>  %endif
  2944                              <2>  %if con_cont
  2945                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  2946                              <2>  %endif
  2947                              <2> 
  2948                              <2>  %ifidn %1,andblock
  2949                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  2950                              <2>  %elifidn %1,orblock
  2951                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  2952                              <2>  %endif
  2953                              <1> %assign __return__ __return__ + 1
  2954                              <1> %assign __have_frame__ 0
  2955                              <1> %assign %$have_local 0
  2956                              <1> %assign %$have_save 0
  2957                              <1> %assign __save_all__ 0
  2958                              <1> %assign %$local_args 0
  2959                              <1> %assign %$proc_args 0
  2960                              <1> %assign __save_args__ 0
  2961                              <1> %if %0 > 1
  2962                              <1>  %assign args %0 - 1
  2963                              <1>  %assign %$bp_off 4
  2964                              <1>  %assign i 0
  2965                              <1>  %rotate 1
  2966                              <1>  %ifidn %1,withlocal
  2967                              <1>  %assign %$have_local 1
  2968                              <1>  %assign args args -1
  2969                              <1>  %rotate 1
  2970                              <1>  %endif
  2971                              <1>  %assign %$proc_args args
  2972                              <1>  %rep args
  2973                              <1> 
  2974                              <1>  %%inputarg__%1 EQU %$bp_off
  2975                              <1>  %undef .%1
  2976                              <1>  %define .%1 %%inputarg__%1+bp
  2977                              <1>  cat_define %$proc_argv ,i,%1
  2978                              <1>  %assign %$bp_off %$bp_off + 2
  2979                              <1>  %assign i i+1
  2980                              <1>  %rotate 1
  2981                              <1>  %endrep
  2982                              <1>  %if %$have_local==0
  2983                              <1>  enter 0,0
  2984                              <1>  %assign __have_frame__ 1
  2985                              <1>  %endif
  2986                              <1> %endif
  2987                                  %ifdef SLOW_ATAPI_DEVICE
  2988                                  	save ecx
  2989                                  	pushf
  2990                                  	sti
  2991                                  	mov ecx, [delay_repeat_num]
  2992                                  	repeat
  2993                                  		call read_bios_time
  2994                                  		dec ecx
  2995                                  	until {or ecx, ecx}, z
  2996                                  	popf
  2997                                  %endif
  2998                                  endp
  2999                              <1> %ifnctx proc
  3000                              <1>  %error "expected `proc' before `endp'"
  3001                              <1> %endif
  3002                              <1>  cat_lable %$return,__level__
  3003                              <2> %1%2:
  3004                              <1>  %if __save_all__ ==1
  3005                              <1>  popa
  3006                              <1>  %elif __save_all__ == 2
  3007                              <1>  popad
  3008                              <1>  %elif __save_args__ > 0
  3009                              <1>  %assign i 1
  3010                              <1>  %rep __save_args__
  3011                              <1>  linecat pop, %$save_argv,i
  3012                              <1>  %assign i i+1
  3013                              <1>  %endrep
  3014                              <1>  %endif
  3015                              <1>  %if __have_frame__ > 0
  3016                              <1>  leave
  3017                              <1>  %endif
  3018                              <1> 
  3019                              <1>  %assign i 0
  3020                              <1>  %rep %$proc_args
  3021                              <1> 
  3022                              <1>  %assign i i+1
  3023                              <1>  %endrep
  3024                              <1> 
  3025                              <1>  %assign i 0
  3026                              <1>  %rep %$local_args
  3027                              <1> 
  3028                              <1>  %assign i i+1
  3029                              <1>  %endrep
  3030 00000615 C3                  <1>  ret
  3031                              <1>  con_pop
  3032                              <2>  %pop
  3033                              <2>  %assign __level__ __level__ - 1
  3034                              <1>  %assign __return__ __return__ - 1
  3035                                  
  3036                                  proc	sub_atapi_delay
  3037                              <1> GLOBAL %1
  3038                              <1> %1:
  3039                              <1> con_push proc
  3040                              <2>  %assign __lastlevel__ __level__
  3041                              <2>  %assign __level__ __level__ + 1
  3042                              <2>  %if __return__ > 0
  3043                              <2>  %assign con_return 1
  3044                              <2>  %else
  3045                              <2>  %assign con_return 0
  3046                              <2>  %endif
  3047                              <2> 
  3048                              <2>  %if __cont__ > 0
  3049                              <2>  %assign con_cont 1
  3050                              <2>  %else
  3051                              <2>  %assign con_cont 0
  3052                              <2>  %endif
  3053                              <2>  %if __break__ > 0
  3054                              <2>  %assign con_break 1
  3055                              <2>  %else
  3056                              <2>  %assign con_break 0
  3057                              <2>  %endif
  3058                              <2> 
  3059                              <2>  %ifidn %1,proc
  3060                              <2>  %assign con_return 0
  3061                              <2>  %elifidn %1,forcx
  3062                              <2>  %assign con_break 0
  3063                              <2>  %elifidn %1,repeat
  3064                              <2>  %assign con_cont 0
  3065                              <2>  %assign con_break 0
  3066                              <2>  %elifidn %1,while
  3067                              <2>  %assign con_cont 0
  3068                              <2>  %assign con_break 0
  3069                              <2>  %endif
  3070                              <2> 
  3071                              <2>  %if __cndblock__ == 1
  3072                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  3073                              <2>  %endif
  3074                              <2> 
  3075                              <2>  %push %1
  3076                              <2>  %if con_return
  3077                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  3078                              <2>  %endif
  3079                              <2>  %if con_break
  3080                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  3081                              <2>  %endif
  3082                              <2>  %if con_cont
  3083                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  3084                              <2>  %endif
  3085                              <2> 
  3086                              <2>  %ifidn %1,andblock
  3087                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  3088                              <2>  %elifidn %1,orblock
  3089                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  3090                              <2>  %endif
  3091                              <1> %assign __return__ __return__ + 1
  3092                              <1> %assign __have_frame__ 0
  3093                              <1> %assign %$have_local 0
  3094                              <1> %assign %$have_save 0
  3095                              <1> %assign __save_all__ 0
  3096                              <1> %assign %$local_args 0
  3097                              <1> %assign %$proc_args 0
  3098                              <1> %assign __save_args__ 0
  3099                              <1> %if %0 > 1
  3100                              <1>  %assign args %0 - 1
  3101                              <1>  %assign %$bp_off 4
  3102                              <1>  %assign i 0
  3103                              <1>  %rotate 1
  3104                              <1>  %ifidn %1,withlocal
  3105                              <1>  %assign %$have_local 1
  3106                              <1>  %assign args args -1
  3107                              <1>  %rotate 1
  3108                              <1>  %endif
  3109                              <1>  %assign %$proc_args args
  3110                              <1>  %rep args
  3111                              <1> 
  3112                              <1>  %%inputarg__%1 EQU %$bp_off
  3113                              <1>  %undef .%1
  3114                              <1>  %define .%1 %%inputarg__%1+bp
  3115                              <1>  cat_define %$proc_argv ,i,%1
  3116                              <1>  %assign %$bp_off %$bp_off + 2
  3117                              <1>  %assign i i+1
  3118                              <1>  %rotate 1
  3119                              <1>  %endrep
  3120                              <1>  %if %$have_local==0
  3121                              <1>  enter 0,0
  3122                              <1>  %assign __have_frame__ 1
  3123                              <1>  %endif
  3124                              <1> %endif
  3125                                  %ifdef SLOW_ATAPI_DEVICE
  3126                                  ; delay a few clicks
  3127                                  ;	save ecx
  3128                                  	if {cmp byte [atapi_delay_flag],0},nz 
  3129                                  ;		pushf
  3130                                  ;		sti
  3131                                  ;		mov ecx, [delay_repeat_num]
  3132                                  ;		repeat
  3133                                  ;			call read_bios_time
  3134                                  ;			dec ecx
  3135                                  ;		until {or ecx, ecx}, z
  3136                                  ;		popf
  3137                                  	call sub_xfer_delay
  3138                                  	endif
  3139                                  %endif
  3140                                  endp
  3141                              <1> %ifnctx proc
  3142                              <1>  %error "expected `proc' before `endp'"
  3143                              <1> %endif
  3144                              <1>  cat_lable %$return,__level__
  3145                              <2> %1%2:
  3146                              <1>  %if __save_all__ ==1
  3147                              <1>  popa
  3148                              <1>  %elif __save_all__ == 2
  3149                              <1>  popad
  3150                              <1>  %elif __save_args__ > 0
  3151                              <1>  %assign i 1
  3152                              <1>  %rep __save_args__
  3153                              <1>  linecat pop, %$save_argv,i
  3154                              <1>  %assign i i+1
  3155                              <1>  %endrep
  3156                              <1>  %endif
  3157                              <1>  %if __have_frame__ > 0
  3158                              <1>  leave
  3159                              <1>  %endif
  3160                              <1> 
  3161                              <1>  %assign i 0
  3162                              <1>  %rep %$proc_args
  3163                              <1> 
  3164                              <1>  %assign i i+1
  3165                              <1>  %endrep
  3166                              <1> 
  3167                              <1>  %assign i 0
  3168                              <1>  %rep %$local_args
  3169                              <1> 
  3170                              <1>  %assign i i+1
  3171                              <1>  %endrep
  3172 00000616 C3                  <1>  ret
  3173                              <1>  con_pop
  3174                              <2>  %pop
  3175                              <2>  %assign __level__ __level__ - 1
  3176                              <1>  %assign __return__ __return__ - 1
  3177                                  
  3178                                  proc	delay400ns
  3179                              <1> GLOBAL %1
  3180                              <1> %1:
  3181                              <1> con_push proc
  3182                              <2>  %assign __lastlevel__ __level__
  3183                              <2>  %assign __level__ __level__ + 1
  3184                              <2>  %if __return__ > 0
  3185                              <2>  %assign con_return 1
  3186                              <2>  %else
  3187                              <2>  %assign con_return 0
  3188                              <2>  %endif
  3189                              <2> 
  3190                              <2>  %if __cont__ > 0
  3191                              <2>  %assign con_cont 1
  3192                              <2>  %else
  3193                              <2>  %assign con_cont 0
  3194                              <2>  %endif
  3195                              <2>  %if __break__ > 0
  3196                              <2>  %assign con_break 1
  3197                              <2>  %else
  3198                              <2>  %assign con_break 0
  3199                              <2>  %endif
  3200                              <2> 
  3201                              <2>  %ifidn %1,proc
  3202                              <2>  %assign con_return 0
  3203                              <2>  %elifidn %1,forcx
  3204                              <2>  %assign con_break 0
  3205                              <2>  %elifidn %1,repeat
  3206                              <2>  %assign con_cont 0
  3207                              <2>  %assign con_break 0
  3208                              <2>  %elifidn %1,while
  3209                              <2>  %assign con_cont 0
  3210                              <2>  %assign con_break 0
  3211                              <2>  %endif
  3212                              <2> 
  3213                              <2>  %if __cndblock__ == 1
  3214                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  3215                              <2>  %endif
  3216                              <2> 
  3217                              <2>  %push %1
  3218                              <2>  %if con_return
  3219                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  3220                              <2>  %endif
  3221                              <2>  %if con_break
  3222                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  3223                              <2>  %endif
  3224                              <2>  %if con_cont
  3225                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  3226                              <2>  %endif
  3227                              <2> 
  3228                              <2>  %ifidn %1,andblock
  3229                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  3230                              <2>  %elifidn %1,orblock
  3231                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  3232                              <2>  %endif
  3233                              <1> %assign __return__ __return__ + 1
  3234                              <1> %assign __have_frame__ 0
  3235                              <1> %assign %$have_local 0
  3236                              <1> %assign %$have_save 0
  3237                              <1> %assign __save_all__ 0
  3238                              <1> %assign %$local_args 0
  3239                              <1> %assign %$proc_args 0
  3240                              <1> %assign __save_args__ 0
  3241                              <1> %if %0 > 1
  3242                              <1>  %assign args %0 - 1
  3243                              <1>  %assign %$bp_off 4
  3244                              <1>  %assign i 0
  3245                              <1>  %rotate 1
  3246                              <1>  %ifidn %1,withlocal
  3247                              <1>  %assign %$have_local 1
  3248                              <1>  %assign args args -1
  3249                              <1>  %rotate 1
  3250                              <1>  %endif
  3251                              <1>  %assign %$proc_args args
  3252                              <1>  %rep args
  3253                              <1> 
  3254                              <1>  %%inputarg__%1 EQU %$bp_off
  3255                              <1>  %undef .%1
  3256                              <1>  %define .%1 %%inputarg__%1+bp
  3257                              <1>  cat_define %$proc_argv ,i,%1
  3258                              <1>  %assign %$bp_off %$bp_off + 2
  3259                              <1>  %assign i i+1
  3260                              <1>  %rotate 1
  3261                              <1>  %endrep
  3262                              <1>  %if %$have_local==0
  3263                              <1>  enter 0,0
  3264                              <1>  %assign __have_frame__ 1
  3265                              <1>  %endif
  3266                              <1> %endif
  3267                                  	inbyte CB_ASTAT
  3268 00000617 8B16[9900]          <1>  mov dx,[reg_addr+%1*2]
  3269 0000061B EC                  <1>  in al,dx
  3270                              <1>  %if %0 > 1
  3271                              <1>  mov %2,al
  3272                              <1>  %endif
  3273                                  	%rep 3
  3274                                  	in al,dx
  3275                                  	%endrep
  3276 0000061C EC                  <1>  in al,dx
  3277 0000061D EC                  <1>  in al,dx
  3278 0000061E EC                  <1>  in al,dx
  3279                                  endp
  3280                              <1> %ifnctx proc
  3281                              <1>  %error "expected `proc' before `endp'"
  3282                              <1> %endif
  3283                              <1>  cat_lable %$return,__level__
  3284                              <2> %1%2:
  3285                              <1>  %if __save_all__ ==1
  3286                              <1>  popa
  3287                              <1>  %elif __save_all__ == 2
  3288                              <1>  popad
  3289                              <1>  %elif __save_args__ > 0
  3290                              <1>  %assign i 1
  3291                              <1>  %rep __save_args__
  3292                              <1>  linecat pop, %$save_argv,i
  3293                              <1>  %assign i i+1
  3294                              <1>  %endrep
  3295                              <1>  %endif
  3296                              <1>  %if __have_frame__ > 0
  3297                              <1>  leave
  3298                              <1>  %endif
  3299                              <1> 
  3300                              <1>  %assign i 0
  3301                              <1>  %rep %$proc_args
  3302                              <1> 
  3303                              <1>  %assign i i+1
  3304                              <1>  %endrep
  3305                              <1> 
  3306                              <1>  %assign i 0
  3307                              <1>  %rep %$local_args
  3308                              <1> 
  3309                              <1>  %assign i i+1
  3310                              <1>  %endrep
  3311 0000061F C3                  <1>  ret
  3312                              <1>  con_pop
  3313                              <2>  %pop
  3314                              <2>  %assign __level__ __level__ - 1
  3315                              <1>  %assign __return__ __return__ - 1
  3316                                  
  3317                                  proc	reg_poll_busy
  3318                              <1> GLOBAL %1
  3319                              <1> %1:
  3320                              <1> con_push proc
  3321                              <2>  %assign __lastlevel__ __level__
  3322                              <2>  %assign __level__ __level__ + 1
  3323                              <2>  %if __return__ > 0
  3324                              <2>  %assign con_return 1
  3325                              <2>  %else
  3326                              <2>  %assign con_return 0
  3327                              <2>  %endif
  3328                              <2> 
  3329                              <2>  %if __cont__ > 0
  3330                              <2>  %assign con_cont 1
  3331                              <2>  %else
  3332                              <2>  %assign con_cont 0
  3333                              <2>  %endif
  3334                              <2>  %if __break__ > 0
  3335                              <2>  %assign con_break 1
  3336                              <2>  %else
  3337                              <2>  %assign con_break 0
  3338                              <2>  %endif
  3339                              <2> 
  3340                              <2>  %ifidn %1,proc
  3341                              <2>  %assign con_return 0
  3342                              <2>  %elifidn %1,forcx
  3343                              <2>  %assign con_break 0
  3344                              <2>  %elifidn %1,repeat
  3345                              <2>  %assign con_cont 0
  3346                              <2>  %assign con_break 0
  3347                              <2>  %elifidn %1,while
  3348                              <2>  %assign con_cont 0
  3349                              <2>  %assign con_break 0
  3350                              <2>  %endif
  3351                              <2> 
  3352                              <2>  %if __cndblock__ == 1
  3353                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  3354                              <2>  %endif
  3355                              <2> 
  3356                              <2>  %push %1
  3357                              <2>  %if con_return
  3358                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  3359                              <2>  %endif
  3360                              <2>  %if con_break
  3361                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  3362                              <2>  %endif
  3363                              <2>  %if con_cont
  3364                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  3365                              <2>  %endif
  3366                              <2> 
  3367                              <2>  %ifidn %1,andblock
  3368                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  3369                              <2>  %elifidn %1,orblock
  3370                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  3371                              <2>  %endif
  3372                              <1> %assign __return__ __return__ + 1
  3373                              <1> %assign __have_frame__ 0
  3374                              <1> %assign %$have_local 0
  3375                              <1> %assign %$have_save 0
  3376                              <1> %assign __save_all__ 0
  3377                              <1> %assign %$local_args 0
  3378                              <1> %assign %$proc_args 0
  3379                              <1> %assign __save_args__ 0
  3380                              <1> %if %0 > 1
  3381                              <1>  %assign args %0 - 1
  3382                              <1>  %assign %$bp_off 4
  3383                              <1>  %assign i 0
  3384                              <1>  %rotate 1
  3385                              <1>  %ifidn %1,withlocal
  3386                              <1>  %assign %$have_local 1
  3387                              <1>  %assign args args -1
  3388                              <1>  %rotate 1
  3389                              <1>  %endif
  3390                              <1>  %assign %$proc_args args
  3391                              <1>  %rep args
  3392                              <1> 
  3393                              <1>  %%inputarg__%1 EQU %$bp_off
  3394                              <1>  %undef .%1
  3395                              <1>  %define .%1 %%inputarg__%1+bp
  3396                              <1>  cat_define %$proc_argv ,i,%1
  3397                              <1>  %assign %$bp_off %$bp_off + 2
  3398                              <1>  %assign i i+1
  3399                              <1>  %rotate 1
  3400                              <1>  %endrep
  3401                              <1>  %if %$have_local==0
  3402                              <1>  enter 0,0
  3403                              <1>  %assign __have_frame__ 1
  3404                              <1>  %endif
  3405                              <1> %endif
  3406                                  ; need to setup the timeout first
  3407                                  ;return ax=0	ok
  3408                                  ;	ax = 1	timeout
  3409                                  	while {inbyte CB_STAT},{and al,CB_STAT_BSY},nz
  3410                              <1> con_push while
  3411                              <2>  %assign __lastlevel__ __level__
  3412                              <2>  %assign __level__ __level__ + 1
  3413                              <2>  %if __return__ > 0
  3414                              <2>  %assign con_return 1
  3415                              <2>  %else
  3416                              <2>  %assign con_return 0
  3417                              <2>  %endif
  3418                              <2> 
  3419                              <2>  %if __cont__ > 0
  3420                              <2>  %assign con_cont 1
  3421                              <2>  %else
  3422                              <2>  %assign con_cont 0
  3423                              <2>  %endif
  3424                              <2>  %if __break__ > 0
  3425                              <2>  %assign con_break 1
  3426                              <2>  %else
  3427                              <2>  %assign con_break 0
  3428                              <2>  %endif
  3429                              <2> 
  3430                              <2>  %ifidn %1,proc
  3431                              <2>  %assign con_return 0
  3432                              <2>  %elifidn %1,forcx
  3433                              <2>  %assign con_break 0
  3434                              <2>  %elifidn %1,repeat
  3435                              <2>  %assign con_cont 0
  3436                              <2>  %assign con_break 0
  3437                              <2>  %elifidn %1,while
  3438                              <2>  %assign con_cont 0
  3439                              <2>  %assign con_break 0
  3440                              <2>  %endif
  3441                              <2> 
  3442                              <2>  %if __cndblock__ == 1
  3443                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  3444                              <2>  %endif
  3445                              <2> 
  3446                              <2>  %push %1
  3447                              <2>  %if con_return
  3448                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  3449                              <3> %define %1%2 %3%4
  3450                              <2>  %endif
  3451                              <2>  %if con_break
  3452                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  3453                              <2>  %endif
  3454                              <2>  %if con_cont
  3455                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  3456                              <2>  %endif
  3457                              <2> 
  3458                              <2>  %ifidn %1,andblock
  3459                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  3460                              <2>  %elifidn %1,orblock
  3461                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  3462                              <2>  %endif
  3463                              <1> %assign __break__ __break__ + 1
  3464                              <1> %assign __cont__ __cont__ + 1
  3465                              <1> %$begin:
  3466                              <1> cat_lable %$cont,__level__
  3467                              <2> %1%2:
  3468                              <1> %if %0 > 0
  3469                              <1>  %rep %0 -1
  3470                              <1>  %1
  3471                              <1>  %rotate 1
  3472                              <1>  %endrep
  3473                              <2>  %1
  3474 00000620 8B16[9700]          <3>  mov dx,[reg_addr+%1*2]
  3475 00000624 EC                  <3>  in al,dx
  3476                              <3>  %if %0 > 1
  3477                              <3>  mov %2,al
  3478                              <3>  %endif
  3479                              <2>  %rotate 1
  3480 00000625 2480                <2>  %1
  3481                              <2>  %rotate 1
  3482 00000627 7407                <1>  j%-1 %$end
  3483                              <1> %endif
  3484 00000629 E8E1FF                  		call check_timeout
  3485                                  		return if,is_timeout
  3486                              <1>  %if %0 > 0
  3487                              <1>  %assign __near__ 0
  3488                              <1>  %assign argc %0
  3489                              <1>  %ifidn %1,near
  3490                              <1>  %assign __near__ 1
  3491                              <1>  %assign argc argc-1
  3492                              <1>  %rotate 1
  3493                              <1>  %endif
  3494                              <1>  %if argc > 0
  3495                              <1>  %ifidn %1,if
  3496                              <1> 
  3497                              <1>  %rotate 1
  3498                              <1>  %rep argc-2
  3499                              <1>  %1
  3500                              <1>  %rotate 1
  3501                              <1>  %endrep
  3502                              <1>  %if __near__ == 0
  3503                              <1>  cat_jc %1,%$return,__level__
  3504 0000062C 7702                <2>  j%+1 %2%3
  3505                              <1>  %else
  3506                              <1>  cat_jc_near %1,%$return,__level__
  3507                              <1>  %endif
  3508                              <1>  %else
  3509                              <1>  %error "expect `if' after `return'"
  3510                              <1>  %endif
  3511                              <1>  %else
  3512                              <1>  %if __near__ == 0
  3513                              <1>  cat_jmp %$return,__level__
  3514                              <1>  %else
  3515                              <1>  cat_jmp_near %$return,__level__
  3516                              <1>  %endif
  3517                              <1>  %endif
  3518                              <1>  %else
  3519                              <1>  %if __have_frame__ == 0 && __save_all__ == 0 && __save_args__ == 0
  3520                              <1>  ret
  3521                              <1>  %else
  3522                              <1>  cat_jmp %$return,__level__
  3523                              <1>  %endif
  3524                              <1>  %endif
  3525                                  	endwhile
  3526                              <1>  %ifctx while
  3527 0000062E EBF0                <1>  jmp %$begin
  3528                              <1>  %$end:
  3529                              <1>  cat_lable %$break,__level__
  3530                              <2> %1%2:
  3531                              <1>  %else
  3532                              <1>  %error "expected `while' before `endwhile'"
  3533                              <1>  %endif
  3534                              <1> con_pop
  3535                              <2>  %pop
  3536                              <2>  %assign __level__ __level__ - 1
  3537                              <1> %assign __break__ __break__ + 1
  3538                              <1> %assign __cont__ __cont__ + 1
  3539                                  endp
  3540                              <1> %ifnctx proc
  3541                              <1>  %error "expected `proc' before `endp'"
  3542                              <1> %endif
  3543                              <1>  cat_lable %$return,__level__
  3544                              <2> %1%2:
  3545                              <1>  %if __save_all__ ==1
  3546                              <1>  popa
  3547                              <1>  %elif __save_all__ == 2
  3548                              <1>  popad
  3549                              <1>  %elif __save_args__ > 0
  3550                              <1>  %assign i 1
  3551                              <1>  %rep __save_args__
  3552                              <1>  linecat pop, %$save_argv,i
  3553                              <1>  %assign i i+1
  3554                              <1>  %endrep
  3555                              <1>  %endif
  3556                              <1>  %if __have_frame__ > 0
  3557                              <1>  leave
  3558                              <1>  %endif
  3559                              <1> 
  3560                              <1>  %assign i 0
  3561                              <1>  %rep %$proc_args
  3562                              <1> 
  3563                              <1>  %assign i i+1
  3564                              <1>  %endrep
  3565                              <1> 
  3566                              <1>  %assign i 0
  3567                              <1>  %rep %$local_args
  3568                              <1> 
  3569                              <1>  %assign i i+1
  3570                              <1>  %endrep
  3571 00000630 C3                  <1>  ret
  3572                              <1>  con_pop
  3573                              <2>  %pop
  3574                              <2>  %assign __level__ __level__ - 1
  3575                              <1>  %assign __return__ __return__ - 1
  3576                                  
  3577                                  proc	__reg_select_dev
  3578                              <1> GLOBAL %1
  3579                              <1> %1:
  3580                              <1> con_push proc
  3581                              <2>  %assign __lastlevel__ __level__
  3582                              <2>  %assign __level__ __level__ + 1
  3583                              <2>  %if __return__ > 0
  3584                              <2>  %assign con_return 1
  3585                              <2>  %else
  3586                              <2>  %assign con_return 0
  3587                              <2>  %endif
  3588                              <2> 
  3589                              <2>  %if __cont__ > 0
  3590                              <2>  %assign con_cont 1
  3591                              <2>  %else
  3592                              <2>  %assign con_cont 0
  3593                              <2>  %endif
  3594                              <2>  %if __break__ > 0
  3595                              <2>  %assign con_break 1
  3596                              <2>  %else
  3597                              <2>  %assign con_break 0
  3598                              <2>  %endif
  3599                              <2> 
  3600                              <2>  %ifidn %1,proc
  3601                              <2>  %assign con_return 0
  3602                              <2>  %elifidn %1,forcx
  3603                              <2>  %assign con_break 0
  3604                              <2>  %elifidn %1,repeat
  3605                              <2>  %assign con_cont 0
  3606                              <2>  %assign con_break 0
  3607                              <2>  %elifidn %1,while
  3608                              <2>  %assign con_cont 0
  3609                              <2>  %assign con_break 0
  3610                              <2>  %endif
  3611                              <2> 
  3612                              <2>  %if __cndblock__ == 1
  3613                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  3614                              <2>  %endif
  3615                              <2> 
  3616                              <2>  %push %1
  3617                              <2>  %if con_return
  3618                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  3619                              <2>  %endif
  3620                              <2>  %if con_break
  3621                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  3622                              <3> %define %1%2 %3%4
  3623                              <2>  %endif
  3624                              <2>  %if con_cont
  3625                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  3626                              <3> %define %1%2 %3%4
  3627                              <2>  %endif
  3628                              <2> 
  3629                              <2>  %ifidn %1,andblock
  3630                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  3631                              <2>  %elifidn %1,orblock
  3632                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  3633                              <2>  %endif
  3634                              <1> %assign __return__ __return__ + 1
  3635                              <1> %assign __have_frame__ 0
  3636                              <1> %assign %$have_local 0
  3637                              <1> %assign %$have_save 0
  3638                              <1> %assign __save_all__ 0
  3639                              <1> %assign %$local_args 0
  3640                              <1> %assign %$proc_args 0
  3641                              <1> %assign __save_args__ 0
  3642                              <1> %if %0 > 1
  3643                              <1>  %assign args %0 - 1
  3644                              <1>  %assign %$bp_off 4
  3645                              <1>  %assign i 0
  3646                              <1>  %rotate 1
  3647                              <1>  %ifidn %1,withlocal
  3648                              <1>  %assign %$have_local 1
  3649                              <1>  %assign args args -1
  3650                              <1>  %rotate 1
  3651                              <1>  %endif
  3652                              <1>  %assign %$proc_args args
  3653                              <1>  %rep args
  3654                              <1> 
  3655                              <1>  %%inputarg__%1 EQU %$bp_off
  3656                              <1>  %undef .%1
  3657                              <1>  %define .%1 %%inputarg__%1+bp
  3658                              <1>  cat_define %$proc_argv ,i,%1
  3659                              <1>  %assign %$bp_off %$bp_off + 2
  3660                              <1>  %assign i i+1
  3661                              <1>  %rotate 1
  3662                              <1>  %endrep
  3663                              <1>  %if %$have_local==0
  3664                              <1>  enter 0,0
  3665                              <1>  %assign __have_frame__ 1
  3666                              <1>  %endif
  3667                              <1> %endif
  3668                                  ; ax = dev
  3669                                  ; simpile version of the select dev
  3670                                  	save bx
  3671                              <1> %ifctx proc
  3672                              <1>  %if %$have_local == 1
  3673                              <1>  %error "`save' must after `local'"
  3674                              <1>  %endif
  3675                              <1> 
  3676                              <1>  %ifidn all,%1
  3677                              <1>  %assign __save_all__ 1
  3678                              <1>  %if %0 > 1
  3679                              <1>  %ifidn frame,%2
  3680                              <1>  %if __have_frame__ == 0
  3681                              <1>  enter 0,0
  3682                              <1>  %assign __have_frame__ 1
  3683                              <1>  %assign local_off 0
  3684                              <1>  %endif
  3685                              <1>  %endif
  3686                              <1>  %endif
  3687                              <1>  pusha
  3688                              <1>  %if __have_frame__ == 1
  3689                              <1>  %undef __AX
  3690                              <1>  %undef __BX
  3691                              <1>  %undef __CX
  3692                              <1>  %undef __DX
  3693                              <1>  %undef __SI
  3694                              <1>  %undef __DI
  3695                              <1>  %idefine __AX bp-local_off - 2
  3696                              <1>  %idefine __CX bp-local_off - 4
  3697                              <1>  %idefine __DX bp-local_off - 6
  3698                              <1>  %idefine __BX bp-local_off - 8
  3699                              <1> 
  3700                              <1> 
  3701                              <1>  %idefine __SI bp-local_off - 14
  3702                              <1>  %idefine __DI bp-local_off - 16
  3703                              <1>  %endif
  3704                              <1>  %elifidn alld,%1
  3705                              <1>  %assign __save_all__ 2
  3706                              <1>  %if %0 > 1
  3707                              <1>  %ifidn frame,%2
  3708                              <1>  %if __have_frame__ == 0
  3709                              <1>  enter 0,0
  3710                              <1>  %assign __have_frame__ 1
  3711                              <1>  %assign local_off 0
  3712                              <1>  %endif
  3713                              <1>  %endif
  3714                              <1>  %endif
  3715                              <1>  pushad
  3716                              <1>  %if __have_frame__ == 1
  3717                              <1>  %undef __EAX
  3718                              <1>  %undef __EBX
  3719                              <1>  %undef __ECX
  3720                              <1>  %undef __EDX
  3721                              <1>  %undef __ESI
  3722                              <1>  %undef __EDI
  3723                              <1>  %idefine __EAX bp-local_off - 4
  3724                              <1>  %idefine __ECX bp-local_off - 8
  3725                              <1>  %idefine __EDX bp-local_off - 12
  3726                              <1>  %idefine __EBX bp-local_off - 16
  3727                              <1> 
  3728                              <1> 
  3729                              <1>  %idefine __ESI bp-local_off - 18
  3730                              <1>  %idefine __EDI bp-local_off - 32
  3731                              <1>  %endif
  3732                              <1> 
  3733                              <1>  %else
  3734                              <1>  %assign __save_args__ %0
  3735                              <1>  %assign __save_all__ 0
  3736                              <1>  %assign i %0
  3737                              <1>  %rep %0
  3738                              <1>  push %1
  3739                              <1>  cat_define %$save_argv ,i,%1
  3740                              <1>  %rotate 1
  3741                              <1>  %assign i i - 1
  3742                              <1>  %endrep
  3743 00000631 53                  <2>  push %1
  3744                              <2>  cat_define %$save_argv ,i,%1
  3745                              <3> %define %1%2 %3
  3746                              <2>  %rotate 1
  3747                              <2>  %assign i i - 1
  3748                              <1>  %endif
  3749                              <1> %else
  3750                              <1>  %error "`save' must after `proc'"
  3751                              <1> %endif
  3752 00000632 89C3                    	mov bx,ax
  3753                                  	outbyte CB_DH,[bx+cmd_select_dev]
  3754                              <1> %if %0>1
  3755 00000634 8A87[0200]          <1>  mov al,%2
  3756                              <1> %endif
  3757                              <1> %if %0>0
  3758 00000638 8B16[9500]          <1>  mov dx,[reg_addr+%1*2]
  3759                              <1> %endif
  3760 0000063C EE                  <1>  out dx,al
  3761 0000063D E8D7FF                  	call delay400ns
  3762                                  endp
  3763                              <1> %ifnctx proc
  3764                              <1>  %error "expected `proc' before `endp'"
  3765                              <1> %endif
  3766                              <1>  cat_lable %$return,__level__
  3767                              <2> %1%2:
  3768                              <1>  %if __save_all__ ==1
  3769                              <1>  popa
  3770                              <1>  %elif __save_all__ == 2
  3771                              <1>  popad
  3772                              <1>  %elif __save_args__ > 0
  3773                              <1>  %assign i 1
  3774                              <1>  %rep __save_args__
  3775                              <1>  linecat pop, %$save_argv,i
  3776                              <1>  %assign i i+1
  3777                              <1>  %endrep
  3778                              <2>  linecat pop, %$save_argv,i
  3779 00000640 5B                  <3>  %1 %2%3
  3780                              <2>  %assign i i+1
  3781                              <1>  %endif
  3782                              <1>  %if __have_frame__ > 0
  3783                              <1>  leave
  3784                              <1>  %endif
  3785                              <1> 
  3786                              <1>  %assign i 0
  3787                              <1>  %rep %$proc_args
  3788                              <1> 
  3789                              <1>  %assign i i+1
  3790                              <1>  %endrep
  3791                              <1> 
  3792                              <1>  %assign i 0
  3793                              <1>  %rep %$local_args
  3794                              <1> 
  3795                              <1>  %assign i i+1
  3796                              <1>  %endrep
  3797 00000641 C3                  <1>  ret
  3798                              <1>  con_pop
  3799                              <2>  %pop
  3800                              <2>  %assign __level__ __level__ - 1
  3801                              <1>  %assign __return__ __return__ - 1
  3802                                  	
  3803                                  proc	reg_select_dev
  3804                              <1> GLOBAL %1
  3805                              <1> %1:
  3806                              <1> con_push proc
  3807                              <2>  %assign __lastlevel__ __level__
  3808                              <2>  %assign __level__ __level__ + 1
  3809                              <2>  %if __return__ > 0
  3810                              <2>  %assign con_return 1
  3811                              <2>  %else
  3812                              <2>  %assign con_return 0
  3813                              <2>  %endif
  3814                              <2> 
  3815                              <2>  %if __cont__ > 0
  3816                              <2>  %assign con_cont 1
  3817                              <2>  %else
  3818                              <2>  %assign con_cont 0
  3819                              <2>  %endif
  3820                              <2>  %if __break__ > 0
  3821                              <2>  %assign con_break 1
  3822                              <2>  %else
  3823                              <2>  %assign con_break 0
  3824                              <2>  %endif
  3825                              <2> 
  3826                              <2>  %ifidn %1,proc
  3827                              <2>  %assign con_return 0
  3828                              <2>  %elifidn %1,forcx
  3829                              <2>  %assign con_break 0
  3830                              <2>  %elifidn %1,repeat
  3831                              <2>  %assign con_cont 0
  3832                              <2>  %assign con_break 0
  3833                              <2>  %elifidn %1,while
  3834                              <2>  %assign con_cont 0
  3835                              <2>  %assign con_break 0
  3836                              <2>  %endif
  3837                              <2> 
  3838                              <2>  %if __cndblock__ == 1
  3839                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  3840                              <2>  %endif
  3841                              <2> 
  3842                              <2>  %push %1
  3843                              <2>  %if con_return
  3844                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  3845                              <2>  %endif
  3846                              <2>  %if con_break
  3847                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  3848                              <3> %define %1%2 %3%4
  3849                              <2>  %endif
  3850                              <2>  %if con_cont
  3851                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  3852                              <3> %define %1%2 %3%4
  3853                              <2>  %endif
  3854                              <2> 
  3855                              <2>  %ifidn %1,andblock
  3856                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  3857                              <2>  %elifidn %1,orblock
  3858                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  3859                              <2>  %endif
  3860                              <1> %assign __return__ __return__ + 1
  3861                              <1> %assign __have_frame__ 0
  3862                              <1> %assign %$have_local 0
  3863                              <1> %assign %$have_save 0
  3864                              <1> %assign __save_all__ 0
  3865                              <1> %assign %$local_args 0
  3866                              <1> %assign %$proc_args 0
  3867                              <1> %assign __save_args__ 0
  3868                              <1> %if %0 > 1
  3869                              <1>  %assign args %0 - 1
  3870                              <1>  %assign %$bp_off 4
  3871                              <1>  %assign i 0
  3872                              <1>  %rotate 1
  3873                              <1>  %ifidn %1,withlocal
  3874                              <1>  %assign %$have_local 1
  3875                              <1>  %assign args args -1
  3876                              <1>  %rotate 1
  3877                              <1>  %endif
  3878                              <1>  %assign %$proc_args args
  3879                              <1>  %rep args
  3880                              <1> 
  3881                              <1>  %%inputarg__%1 EQU %$bp_off
  3882                              <1>  %undef .%1
  3883                              <1>  %define .%1 %%inputarg__%1+bp
  3884                              <1>  cat_define %$proc_argv ,i,%1
  3885                              <1>  %assign %$bp_off %$bp_off + 2
  3886                              <1>  %assign i i+1
  3887                              <1>  %rotate 1
  3888                              <1>  %endrep
  3889                              <1>  %if %$have_local==0
  3890                              <1>  enter 0,0
  3891                              <1>  %assign __have_frame__ 1
  3892                              <1>  %endif
  3893                              <1> %endif
  3894                                  ; ax = dev
  3895                                  ; set_timeout first
  3896                                  	save bx
  3897                              <1> %ifctx proc
  3898                              <1>  %if %$have_local == 1
  3899                              <1>  %error "`save' must after `local'"
  3900                              <1>  %endif
  3901                              <1> 
  3902                              <1>  %ifidn all,%1
  3903                              <1>  %assign __save_all__ 1
  3904                              <1>  %if %0 > 1
  3905                              <1>  %ifidn frame,%2
  3906                              <1>  %if __have_frame__ == 0
  3907                              <1>  enter 0,0
  3908                              <1>  %assign __have_frame__ 1
  3909                              <1>  %assign local_off 0
  3910                              <1>  %endif
  3911                              <1>  %endif
  3912                              <1>  %endif
  3913                              <1>  pusha
  3914                              <1>  %if __have_frame__ == 1
  3915                              <1>  %undef __AX
  3916                              <1>  %undef __BX
  3917                              <1>  %undef __CX
  3918                              <1>  %undef __DX
  3919                              <1>  %undef __SI
  3920                              <1>  %undef __DI
  3921                              <1>  %idefine __AX bp-local_off - 2
  3922                              <1>  %idefine __CX bp-local_off - 4
  3923                              <1>  %idefine __DX bp-local_off - 6
  3924                              <1>  %idefine __BX bp-local_off - 8
  3925                              <1> 
  3926                              <1> 
  3927                              <1>  %idefine __SI bp-local_off - 14
  3928                              <1>  %idefine __DI bp-local_off - 16
  3929                              <1>  %endif
  3930                              <1>  %elifidn alld,%1
  3931                              <1>  %assign __save_all__ 2
  3932                              <1>  %if %0 > 1
  3933                              <1>  %ifidn frame,%2
  3934                              <1>  %if __have_frame__ == 0
  3935                              <1>  enter 0,0
  3936                              <1>  %assign __have_frame__ 1
  3937                              <1>  %assign local_off 0
  3938                              <1>  %endif
  3939                              <1>  %endif
  3940                              <1>  %endif
  3941                              <1>  pushad
  3942                              <1>  %if __have_frame__ == 1
  3943                              <1>  %undef __EAX
  3944                              <1>  %undef __EBX
  3945                              <1>  %undef __ECX
  3946                              <1>  %undef __EDX
  3947                              <1>  %undef __ESI
  3948                              <1>  %undef __EDI
  3949                              <1>  %idefine __EAX bp-local_off - 4
  3950                              <1>  %idefine __ECX bp-local_off - 8
  3951                              <1>  %idefine __EDX bp-local_off - 12
  3952                              <1>  %idefine __EBX bp-local_off - 16
  3953                              <1> 
  3954                              <1> 
  3955                              <1>  %idefine __ESI bp-local_off - 18
  3956                              <1>  %idefine __EDI bp-local_off - 32
  3957                              <1>  %endif
  3958                              <1> 
  3959                              <1>  %else
  3960                              <1>  %assign __save_args__ %0
  3961                              <1>  %assign __save_all__ 0
  3962                              <1>  %assign i %0
  3963                              <1>  %rep %0
  3964                              <1>  push %1
  3965                              <1>  cat_define %$save_argv ,i,%1
  3966                              <1>  %rotate 1
  3967                              <1>  %assign i i - 1
  3968                              <1>  %endrep
  3969 00000642 53                  <2>  push %1
  3970                              <2>  cat_define %$save_argv ,i,%1
  3971                              <3> %define %1%2 %3
  3972                              <2>  %rotate 1
  3973                              <2>  %assign i i - 1
  3974                              <1>  %endif
  3975                              <1> %else
  3976                              <1>  %error "`save' must after `proc'"
  3977                              <1> %endif
  3978 00000643 89C3                    	mov bx,ax
  3979                                  	if {cmp byte[reg_dev_info+bx], REG_CONFIG_TYPE_ATA},ae
  3980                              <1>  %rep %0 -1
  3981                              <1>  %1
  3982                              <1>  %rotate 1
  3983                              <1>  %endrep
  3984 00000645 80BF[0500]02        <2>  %1
  3985                              <2>  %rotate 1
  3986                              <1> 
  3987                              <1>  con_push if
  3988                              <2>  %assign __lastlevel__ __level__
  3989                              <2>  %assign __level__ __level__ + 1
  3990                              <2>  %if __return__ > 0
  3991                              <2>  %assign con_return 1
  3992                              <2>  %else
  3993                              <2>  %assign con_return 0
  3994                              <2>  %endif
  3995                              <2> 
  3996                              <2>  %if __cont__ > 0
  3997                              <2>  %assign con_cont 1
  3998                              <2>  %else
  3999                              <2>  %assign con_cont 0
  4000                              <2>  %endif
  4001                              <2>  %if __break__ > 0
  4002                              <2>  %assign con_break 1
  4003                              <2>  %else
  4004                              <2>  %assign con_break 0
  4005                              <2>  %endif
  4006                              <2> 
  4007                              <2>  %ifidn %1,proc
  4008                              <2>  %assign con_return 0
  4009                              <2>  %elifidn %1,forcx
  4010                              <2>  %assign con_break 0
  4011                              <2>  %elifidn %1,repeat
  4012                              <2>  %assign con_cont 0
  4013                              <2>  %assign con_break 0
  4014                              <2>  %elifidn %1,while
  4015                              <2>  %assign con_cont 0
  4016                              <2>  %assign con_break 0
  4017                              <2>  %endif
  4018                              <2> 
  4019                              <2>  %if __cndblock__ == 1
  4020                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  4021                              <2>  %endif
  4022                              <2> 
  4023                              <2>  %push %1
  4024                              <2>  %if con_return
  4025                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  4026                              <3> %define %1%2 %3%4
  4027                              <2>  %endif
  4028                              <2>  %if con_break
  4029                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  4030                              <3> %define %1%2 %3%4
  4031                              <2>  %endif
  4032                              <2>  %if con_cont
  4033                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  4034                              <3> %define %1%2 %3%4
  4035                              <2>  %endif
  4036                              <2> 
  4037                              <2>  %ifidn %1,andblock
  4038                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  4039                              <2>  %elifidn %1,orblock
  4040                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  4041                              <2>  %endif
  4042                              <1> 
  4043                              <1>  %if %0 > 0
  4044 0000064A 7211                <1>  j%-1 %$ifnot
  4045                              <1>  %endif
  4046                              <1>  %assign %$elif_level 0
  4047 0000064C E8D1FF                  		call reg_poll_busy
  4048                                  		return if,{or ax,ax},nz
  4049                              <1>  %if %0 > 0
  4050                              <1>  %assign __near__ 0
  4051                              <1>  %assign argc %0
  4052                              <1>  %ifidn %1,near
  4053                              <1>  %assign __near__ 1
  4054                              <1>  %assign argc argc-1
  4055                              <1>  %rotate 1
  4056                              <1>  %endif
  4057                              <1>  %if argc > 0
  4058                              <1>  %ifidn %1,if
  4059                              <1> 
  4060                              <1>  %rotate 1
  4061                              <1>  %rep argc-2
  4062                              <1>  %1
  4063                              <1>  %rotate 1
  4064                              <1>  %endrep
  4065 0000064F 09C0                <2>  %1
  4066                              <2>  %rotate 1
  4067                              <1>  %if __near__ == 0
  4068                              <1>  cat_jc %1,%$return,__level__
  4069 00000651 750D                <2>  j%+1 %2%3
  4070                              <1>  %else
  4071                              <1>  cat_jc_near %1,%$return,__level__
  4072                              <1>  %endif
  4073                              <1>  %else
  4074                              <1>  %error "expect `if' after `return'"
  4075                              <1>  %endif
  4076                              <1>  %else
  4077                              <1>  %if __near__ == 0
  4078                              <1>  cat_jmp %$return,__level__
  4079                              <1>  %else
  4080                              <1>  cat_jmp_near %$return,__level__
  4081                              <1>  %endif
  4082                              <1>  %endif
  4083                              <1>  %else
  4084                              <1>  %if __have_frame__ == 0 && __save_all__ == 0 && __save_args__ == 0
  4085                              <1>  ret
  4086                              <1>  %else
  4087                              <1>  cat_jmp %$return,__level__
  4088                              <1>  %endif
  4089                              <1>  %endif
  4090 00000653 89D8                    		mov ax,bx
  4091 00000655 E8D9FF                  		call __reg_select_dev
  4092                                  %ifndef USE_ATA
  4093 00000658 E8C5FF                  		call reg_poll_busy
  4094                                  %else
  4095                                  		while
  4096                                  			inbyte CB_STAT
  4097                                  			if {cmp byte[reg_dev_info+bx],REG_CONFIG_TYPE_ATA},e
  4098                                  				and al, CB_STAT_BSY | CB_STAT_RDY | CB_STAT_SKC
  4099                                  				return if,{cmp al,CB_STAT_RDY|CB_STAT_SKC},e
  4100                                  			else
  4101                                  				return if,{test al,CB_STAT_BSY},z
  4102                                  			endif
  4103                                  		endwhile
  4104                                  %endif 
  4105                                  	else
  4106                              <1>  %assign __near__ 0
  4107                              <1>  %if %0 >0
  4108                              <1>  %ifidn %1 near
  4109                              <1>  %assign __near__ 1
  4110                              <1>  %endif
  4111                              <1>  %endif
  4112                              <1>  %ifctx if
  4113                              <1>  %repl else
  4114                              <1>  jmp_near __near__,%$ifend
  4115                              <2>  %if %1 > 0
  4116                              <2>  jmp near %2
  4117                              <2>  %else
  4118 0000065B EB03                <2>  jmp short %2
  4119                              <2>  %endif
  4120                              <1>  %$ifnot:
  4121                              <1>  %elifctx elif
  4122                              <1> 
  4123                              <1>  jmp_near __near__,%$ifend
  4124                              <1>  %$ifnot:
  4125                              <1>  %repl else
  4126                              <1> 
  4127                              <1> 
  4128                              <1> 
  4129                              <1> 
  4130                              <1> 
  4131                              <1> 
  4132                              <1>  %else
  4133                              <1>  %error "expected `if' before `else'"
  4134                              <1>  %endif
  4135 0000065D E8D1FF                  		call __reg_select_dev
  4136                                  	endif
  4137                              <1>  %assign elselevel 0
  4138                              <1>  %ifctx if
  4139                              <1>  %$ifnot:
  4140                              <1>  con_pop
  4141                              <1>  %elifctx else
  4142                              <1>  %assign elselevel %$elif_level
  4143                              <1>  %$ifend:
  4144                              <1>  con_pop
  4145                              <2>  %pop
  4146                              <2>  %assign __level__ __level__ - 1
  4147                              <1>  %elifctx elif
  4148                              <1>  %assign elselevel %$elif_level
  4149                              <1>  %$ifnot:
  4150                              <1>  con_pop
  4151                              <1>  %else
  4152                              <1>  %error "expected `if' or `else' before `endif'"
  4153                              <1>  %endif
  4154                              <1>  %rep elselevel
  4155                              <1>  %$ifend:
  4156                              <1>  con_pop
  4157                              <1>  %endrep
  4158                                  endp
  4159                              <1> %ifnctx proc
  4160                              <1>  %error "expected `proc' before `endp'"
  4161                              <1> %endif
  4162                              <1>  cat_lable %$return,__level__
  4163                              <2> %1%2:
  4164                              <1>  %if __save_all__ ==1
  4165                              <1>  popa
  4166                              <1>  %elif __save_all__ == 2
  4167                              <1>  popad
  4168                              <1>  %elif __save_args__ > 0
  4169                              <1>  %assign i 1
  4170                              <1>  %rep __save_args__
  4171                              <1>  linecat pop, %$save_argv,i
  4172                              <1>  %assign i i+1
  4173                              <1>  %endrep
  4174                              <2>  linecat pop, %$save_argv,i
  4175 00000660 5B                  <3>  %1 %2%3
  4176                              <2>  %assign i i+1
  4177                              <1>  %endif
  4178                              <1>  %if __have_frame__ > 0
  4179                              <1>  leave
  4180                              <1>  %endif
  4181                              <1> 
  4182                              <1>  %assign i 0
  4183                              <1>  %rep %$proc_args
  4184                              <1> 
  4185                              <1>  %assign i i+1
  4186                              <1>  %endrep
  4187                              <1> 
  4188                              <1>  %assign i 0
  4189                              <1>  %rep %$local_args
  4190                              <1> 
  4191                              <1>  %assign i i+1
  4192                              <1>  %endrep
  4193 00000661 C3                  <1>  ret
  4194                              <1>  con_pop
  4195                              <2>  %pop
  4196                              <2>  %assign __level__ __level__ - 1
  4197                              <1>  %assign __return__ __return__ - 1
  4198                                  
  4199                                  proc	reg_packet,withlocal,dir,packet_seg,packet_off,packet_len
  4200                              <1> GLOBAL %1
  4201                              <1> %1:
  4202                              <1> con_push proc
  4203                              <2>  %assign __lastlevel__ __level__
  4204                              <2>  %assign __level__ __level__ + 1
  4205                              <2>  %if __return__ > 0
  4206                              <2>  %assign con_return 1
  4207                              <2>  %else
  4208                              <2>  %assign con_return 0
  4209                              <2>  %endif
  4210                              <2> 
  4211                              <2>  %if __cont__ > 0
  4212                              <2>  %assign con_cont 1
  4213                              <2>  %else
  4214                              <2>  %assign con_cont 0
  4215                              <2>  %endif
  4216                              <2>  %if __break__ > 0
  4217                              <2>  %assign con_break 1
  4218                              <2>  %else
  4219                              <2>  %assign con_break 0
  4220                              <2>  %endif
  4221                              <2> 
  4222                              <2>  %ifidn %1,proc
  4223                              <2>  %assign con_return 0
  4224                              <2>  %elifidn %1,forcx
  4225                              <2>  %assign con_break 0
  4226                              <2>  %elifidn %1,repeat
  4227                              <2>  %assign con_cont 0
  4228                              <2>  %assign con_break 0
  4229                              <2>  %elifidn %1,while
  4230                              <2>  %assign con_cont 0
  4231                              <2>  %assign con_break 0
  4232                              <2>  %endif
  4233                              <2> 
  4234                              <2>  %if __cndblock__ == 1
  4235                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  4236                              <2>  %endif
  4237                              <2> 
  4238                              <2>  %push %1
  4239                              <2>  %if con_return
  4240                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  4241                              <2>  %endif
  4242                              <2>  %if con_break
  4243                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  4244                              <3> %define %1%2 %3%4
  4245                              <2>  %endif
  4246                              <2>  %if con_cont
  4247                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  4248                              <3> %define %1%2 %3%4
  4249                              <2>  %endif
  4250                              <2> 
  4251                              <2>  %ifidn %1,andblock
  4252                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  4253                              <2>  %elifidn %1,orblock
  4254                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  4255                              <2>  %endif
  4256                              <1> %assign __return__ __return__ + 1
  4257                              <1> %assign __have_frame__ 0
  4258                              <1> %assign %$have_local 0
  4259                              <1> %assign %$have_save 0
  4260                              <1> %assign __save_all__ 0
  4261                              <1> %assign %$local_args 0
  4262                              <1> %assign %$proc_args 0
  4263                              <1> %assign __save_args__ 0
  4264                              <1> %if %0 > 1
  4265                              <1>  %assign args %0 - 1
  4266                              <1>  %assign %$bp_off 4
  4267                              <1>  %assign i 0
  4268                              <1>  %rotate 1
  4269                              <1>  %ifidn %1,withlocal
  4270                              <1>  %assign %$have_local 1
  4271                              <1>  %assign args args -1
  4272                              <1>  %rotate 1
  4273                              <1>  %endif
  4274                              <1>  %assign %$proc_args args
  4275                              <1>  %rep args
  4276                              <1> 
  4277                              <1>  %%inputarg__%1 EQU %$bp_off
  4278                              <1>  %undef .%1
  4279                              <1>  %define .%1 %%inputarg__%1+bp
  4280                              <1>  cat_define %$proc_argv ,i,%1
  4281                              <1>  %assign %$bp_off %$bp_off + 2
  4282                              <1>  %assign i i+1
  4283                              <1>  %rotate 1
  4284                              <1>  %endrep
  4285                              <2> 
  4286                              <2>  %%inputarg__%1 EQU %$bp_off
  4287                              <2>  %undef .%1
  4288                              <2>  %define .%1 %%inputarg__%1+bp
  4289                              <2>  cat_define %$proc_argv ,i,%1
  4290                              <3> %define %1%2 %3
  4291                              <2>  %assign %$bp_off %$bp_off + 2
  4292                              <2>  %assign i i+1
  4293                              <2>  %rotate 1
  4294                              <2> 
  4295                              <2>  %%inputarg__%1 EQU %$bp_off
  4296                              <2>  %undef .%1
  4297                              <2>  %define .%1 %%inputarg__%1+bp
  4298                              <2>  cat_define %$proc_argv ,i,%1
  4299                              <3> %define %1%2 %3
  4300                              <2>  %assign %$bp_off %$bp_off + 2
  4301                              <2>  %assign i i+1
  4302                              <2>  %rotate 1
  4303                              <2> 
  4304                              <2>  %%inputarg__%1 EQU %$bp_off
  4305                              <2>  %undef .%1
  4306                              <2>  %define .%1 %%inputarg__%1+bp
  4307                              <2>  cat_define %$proc_argv ,i,%1
  4308                              <3> %define %1%2 %3
  4309                              <2>  %assign %$bp_off %$bp_off + 2
  4310                              <2>  %assign i i+1
  4311                              <2>  %rotate 1
  4312                              <2> 
  4313                              <2>  %%inputarg__%1 EQU %$bp_off
  4314                              <2>  %undef .%1
  4315                              <2>  %define .%1 %%inputarg__%1+bp
  4316                              <2>  cat_define %$proc_argv ,i,%1
  4317                              <3> %define %1%2 %3
  4318                              <2>  %assign %$bp_off %$bp_off + 2
  4319                              <2>  %assign i i+1
  4320                              <2>  %rotate 1
  4321                              <1>  %if %$have_local==0
  4322                              <1>  enter 0,0
  4323                              <1>  %assign __have_frame__ 1
  4324                              <1>  %endif
  4325                              <1> %endif
  4326                                  ; input:
  4327                                  ; return ax = 0 noerror, ah = error code al= error bit
  4328                                  ;	 cx = len
  4329                                  	local status,1,reason,1,bcnt,2,pre_fail_bit7,1
  4330                              <1> %ifctx proc
  4331                              <1>  %if %$have_local == 1
  4332                              <1>  %assign argc %0
  4333                              <1>  %assign local_vars 0
  4334                              <1>  %assign %$have_local 2
  4335                              <1>  %assign local_off 0
  4336                              <1> 
  4337                              <1>  %assign i 0
  4338                              <1>  %rep argc
  4339                              <1>  %ifnum %2
  4340                              <1>  %assign local_off local_off+%2
  4341                              <1>  %assign token_eat 2
  4342                              <1>  %else
  4343                              <1>  %assign local_off local_off+2
  4344                              <1>  %assign token_eat 1
  4345                              <1>  %endif
  4346                              <1> 
  4347                              <1>  %%local__%1 EQU local_off
  4348                              <1>  %undef .%1
  4349                              <1>  %define .%1 bp-%%local__%1
  4350                              <1>  cat_define %$proc_argv ,i,%1
  4351                              <1>  %assign argc argc-token_eat
  4352                              <1>  %if argc <= 0
  4353                              <1>  %exitrep
  4354                              <1>  %endif
  4355                              <1>  %assign i i+1
  4356                              <1>  %rotate token_eat
  4357                              <1>  %endrep
  4358                              <2>  %ifnum %2
  4359                              <2>  %assign local_off local_off+%2
  4360                              <2>  %assign token_eat 2
  4361                              <2>  %else
  4362                              <2>  %assign local_off local_off+2
  4363                              <2>  %assign token_eat 1
  4364                              <2>  %endif
  4365                              <2> 
  4366                              <2>  %%local__%1 EQU local_off
  4367                              <2>  %undef .%1
  4368                              <2>  %define .%1 bp-%%local__%1
  4369                              <2>  cat_define %$proc_argv ,i,%1
  4370                              <3> %define %1%2 %3
  4371                              <2>  %assign argc argc-token_eat
  4372                              <2>  %if argc <= 0
  4373                              <2>  %exitrep
  4374                              <2>  %endif
  4375                              <2>  %assign i i+1
  4376                              <2>  %rotate token_eat
  4377                              <2>  %ifnum %2
  4378                              <2>  %assign local_off local_off+%2
  4379                              <2>  %assign token_eat 2
  4380                              <2>  %else
  4381                              <2>  %assign local_off local_off+2
  4382                              <2>  %assign token_eat 1
  4383                              <2>  %endif
  4384                              <2> 
  4385                              <2>  %%local__%1 EQU local_off
  4386                              <2>  %undef .%1
  4387                              <2>  %define .%1 bp-%%local__%1
  4388                              <2>  cat_define %$proc_argv ,i,%1
  4389                              <3> %define %1%2 %3
  4390                              <2>  %assign argc argc-token_eat
  4391                              <2>  %if argc <= 0
  4392                              <2>  %exitrep
  4393                              <2>  %endif
  4394                              <2>  %assign i i+1
  4395                              <2>  %rotate token_eat
  4396                              <2>  %ifnum %2
  4397                              <2>  %assign local_off local_off+%2
  4398                              <2>  %assign token_eat 2
  4399                              <2>  %else
  4400                              <2>  %assign local_off local_off+2
  4401                              <2>  %assign token_eat 1
  4402                              <2>  %endif
  4403                              <2> 
  4404                              <2>  %%local__%1 EQU local_off
  4405                              <2>  %undef .%1
  4406                              <2>  %define .%1 bp-%%local__%1
  4407                              <2>  cat_define %$proc_argv ,i,%1
  4408                              <3> %define %1%2 %3
  4409                              <2>  %assign argc argc-token_eat
  4410                              <2>  %if argc <= 0
  4411                              <2>  %exitrep
  4412                              <2>  %endif
  4413                              <2>  %assign i i+1
  4414                              <2>  %rotate token_eat
  4415                              <2>  %ifnum %2
  4416                              <2>  %assign local_off local_off+%2
  4417                              <2>  %assign token_eat 2
  4418                              <2>  %else
  4419                              <2>  %assign local_off local_off+2
  4420                              <2>  %assign token_eat 1
  4421                              <2>  %endif
  4422                              <2> 
  4423                              <2>  %%local__%1 EQU local_off
  4424                              <2>  %undef .%1
  4425                              <2>  %define .%1 bp-%%local__%1
  4426                              <2>  cat_define %$proc_argv ,i,%1
  4427                              <3> %define %1%2 %3
  4428                              <2>  %assign argc argc-token_eat
  4429                              <2>  %if argc <= 0
  4430                              <2>  %exitrep
  4431                              <2>  %endif
  4432                              <2>  %assign i i+1
  4433                              <2>  %rotate token_eat
  4434                              <1>  %assign %$local_args i
  4435 00000662 C8050000            <1>  enter local_off,0
  4436                              <1>  %assign __have_frame__ 1
  4437                              <1>  %else
  4438                              <1>  %error "`proc' not declear `withlocal' as the first argument"
  4439                              <1>  %endif
  4440                              <1> %else
  4441                              <1>  %error "expected `proc' before `local'"
  4442                              <1> %endif
  4443                                  	save all
  4444                              <1> %ifctx proc
  4445                              <1>  %if %$have_local == 1
  4446                              <1>  %error "`save' must after `local'"
  4447                              <1>  %endif
  4448                              <1> 
  4449                              <1>  %ifidn all,%1
  4450                              <1>  %assign __save_all__ 1
  4451                              <1>  %if %0 > 1
  4452                              <1>  %ifidn frame,%2
  4453                              <1>  %if __have_frame__ == 0
  4454                              <1>  enter 0,0
  4455                              <1>  %assign __have_frame__ 1
  4456                              <1>  %assign local_off 0
  4457                              <1>  %endif
  4458                              <1>  %endif
  4459                              <1>  %endif
  4460 00000666 60                  <1>  pusha
  4461                              <1>  %if __have_frame__ == 1
  4462                              <1>  %undef __AX
  4463                              <1>  %undef __BX
  4464                              <1>  %undef __CX
  4465                              <1>  %undef __DX
  4466                              <1>  %undef __SI
  4467                              <1>  %undef __DI
  4468                              <1>  %idefine __AX bp-local_off - 2
  4469                              <1>  %idefine __CX bp-local_off - 4
  4470                              <1>  %idefine __DX bp-local_off - 6
  4471                              <1>  %idefine __BX bp-local_off - 8
  4472                              <1> 
  4473                              <1> 
  4474                              <1>  %idefine __SI bp-local_off - 14
  4475                              <1>  %idefine __DI bp-local_off - 16
  4476                              <1>  %endif
  4477                              <1>  %elifidn alld,%1
  4478                              <1>  %assign __save_all__ 2
  4479                              <1>  %if %0 > 1
  4480                              <1>  %ifidn frame,%2
  4481                              <1>  %if __have_frame__ == 0
  4482                              <1>  enter 0,0
  4483                              <1>  %assign __have_frame__ 1
  4484                              <1>  %assign local_off 0
  4485                              <1>  %endif
  4486                              <1>  %endif
  4487                              <1>  %endif
  4488                              <1>  pushad
  4489                              <1>  %if __have_frame__ == 1
  4490                              <1>  %undef __EAX
  4491                              <1>  %undef __EBX
  4492                              <1>  %undef __ECX
  4493                              <1>  %undef __EDX
  4494                              <1>  %undef __ESI
  4495                              <1>  %undef __EDI
  4496                              <1>  %idefine __EAX bp-local_off - 4
  4497                              <1>  %idefine __ECX bp-local_off - 8
  4498                              <1>  %idefine __EDX bp-local_off - 12
  4499                              <1>  %idefine __EBX bp-local_off - 16
  4500                              <1> 
  4501                              <1> 
  4502                              <1>  %idefine __ESI bp-local_off - 18
  4503                              <1>  %idefine __EDI bp-local_off - 32
  4504                              <1>  %endif
  4505                              <1> 
  4506                              <1>  %else
  4507                              <1>  %assign __save_args__ %0
  4508                              <1>  %assign __save_all__ 0
  4509                              <1>  %assign i %0
  4510                              <1>  %rep %0
  4511                              <1>  push %1
  4512                              <1>  cat_define %$save_argv ,i,%1
  4513                              <1>  %rotate 1
  4514                              <1>  %assign i i - 1
  4515                              <1>  %endrep
  4516                              <1>  %endif
  4517                              <1> %else
  4518                              <1>  %error "`save' must after `proc'"
  4519                              <1> %endif
  4520                                  %define NON_DATA 0x80
  4521                                  %define cmd_buff atapi_cmd_buffer
  4522                                  %define cmd_buff_len 12
  4523                                  %define cmd_DC	  CB_DC_HD15 
  4524                                  %define cmd_DC_ni CB_DC_HD15 | CB_DC_NIEN
  4525 00000667 E895FF                  	call set_timeout
  4526 0000066A C646FB00                	mov byte [.pre_fail_bit7],0
  4527                                  	
  4528                                  
  4529                                  ;	outbytes CB_DC,cmd_DC_ni,CB_FR,0,CB_SC,0,CB_SN,0,
  4530                                  	outbytes CB_DC,cmd_DC,CB_FR,0,CB_SC,0,CB_SN,0,
  4531                              <1> %assign LAST_AL 0x1000
  4532                              <1> %rep %0 / 2
  4533                              <1>  %ifnum %2
  4534                              <1>  %if LAST_AL != %2
  4535                              <1>  outbyte %1, %2
  4536                              <1>  %assign LAST_AL %2
  4537                              <1>  %else
  4538                              <1>  outbyte %1
  4539                              <1>  %endif
  4540                              <1>  %else
  4541                              <1>  outbyte %1, %2
  4542                              <1>  %endif
  4543                              <1>  %rotate 2
  4544                              <1> %endrep
  4545                              <2>  %ifnum %2
  4546                              <2>  %if LAST_AL != %2
  4547                              <2>  outbyte %1, %2
  4548                              <3> %if %0>1
  4549 0000066E B008                <3>  mov al,%2
  4550                              <3> %endif
  4551                              <3> %if %0>0
  4552 00000670 8B16[9900]          <3>  mov dx,[reg_addr+%1*2]
  4553                              <3> %endif
  4554 00000674 EE                  <3>  out dx,al
  4555                              <2>  %assign LAST_AL %2
  4556                              <2>  %else
  4557                              <2>  outbyte %1
  4558                              <2>  %endif
  4559                              <2>  %else
  4560                              <2>  outbyte %1, %2
  4561                              <2>  %endif
  4562                              <2>  %rotate 2
  4563                              <2>  %ifnum %2
  4564                              <2>  %if LAST_AL != %2
  4565                              <2>  outbyte %1, %2
  4566                              <3> %if %0>1
  4567 00000675 B000                <3>  mov al,%2
  4568                              <3> %endif
  4569                              <3> %if %0>0
  4570 00000677 8B16[8B00]          <3>  mov dx,[reg_addr+%1*2]
  4571                              <3> %endif
  4572 0000067B EE                  <3>  out dx,al
  4573                              <2>  %assign LAST_AL %2
  4574                              <2>  %else
  4575                              <2>  outbyte %1
  4576                              <2>  %endif
  4577                              <2>  %else
  4578                              <2>  outbyte %1, %2
  4579                              <2>  %endif
  4580                              <2>  %rotate 2
  4581                              <2>  %ifnum %2
  4582                              <2>  %if LAST_AL != %2
  4583                              <2>  outbyte %1, %2
  4584                              <2>  %assign LAST_AL %2
  4585                              <2>  %else
  4586                              <2>  outbyte %1
  4587                              <3> %if %0>1
  4588                              <3>  mov al,%2
  4589                              <3> %endif
  4590                              <3> %if %0>0
  4591 0000067C 8B16[8D00]          <3>  mov dx,[reg_addr+%1*2]
  4592                              <3> %endif
  4593 00000680 EE                  <3>  out dx,al
  4594                              <2>  %endif
  4595                              <2>  %else
  4596                              <2>  outbyte %1, %2
  4597                              <2>  %endif
  4598                              <2>  %rotate 2
  4599                              <2>  %ifnum %2
  4600                              <2>  %if LAST_AL != %2
  4601                              <2>  outbyte %1, %2
  4602                              <2>  %assign LAST_AL %2
  4603                              <2>  %else
  4604                              <2>  outbyte %1
  4605                              <3> %if %0>1
  4606                              <3>  mov al,%2
  4607                              <3> %endif
  4608                              <3> %if %0>0
  4609 00000681 8B16[8F00]          <3>  mov dx,[reg_addr+%1*2]
  4610                              <3> %endif
  4611 00000685 EE                  <3>  out dx,al
  4612                              <2>  %endif
  4613                              <2>  %else
  4614                              <2>  outbyte %1, %2
  4615                              <2>  %endif
  4616                              <2>  %rotate 2
  4617                                  	outbytes CB_CL,[.packet_len],CB_CH,[.packet_len+1]
  4618                              <1> %assign LAST_AL 0x1000
  4619                              <1> %rep %0 / 2
  4620                              <1>  %ifnum %2
  4621                              <1>  %if LAST_AL != %2
  4622                              <1>  outbyte %1, %2
  4623                              <1>  %assign LAST_AL %2
  4624                              <1>  %else
  4625                              <1>  outbyte %1
  4626                              <1>  %endif
  4627                              <1>  %else
  4628                              <1>  outbyte %1, %2
  4629                              <1>  %endif
  4630                              <1>  %rotate 2
  4631                              <1> %endrep
  4632                              <2>  %ifnum %2
  4633                              <2>  %if LAST_AL != %2
  4634                              <2>  outbyte %1, %2
  4635                              <2>  %assign LAST_AL %2
  4636                              <2>  %else
  4637                              <2>  outbyte %1
  4638                              <2>  %endif
  4639                              <2>  %else
  4640                              <2>  outbyte %1, %2
  4641                              <3> %if %0>1
  4642 00000686 8A460A              <3>  mov al,%2
  4643                              <3> %endif
  4644                              <3> %if %0>0
  4645 00000689 8B16[9100]          <3>  mov dx,[reg_addr+%1*2]
  4646                              <3> %endif
  4647 0000068D EE                  <3>  out dx,al
  4648                              <2>  %endif
  4649                              <2>  %rotate 2
  4650                              <2>  %ifnum %2
  4651                              <2>  %if LAST_AL != %2
  4652                              <2>  outbyte %1, %2
  4653                              <2>  %assign LAST_AL %2
  4654                              <2>  %else
  4655                              <2>  outbyte %1
  4656                              <2>  %endif
  4657                              <2>  %else
  4658                              <2>  outbyte %1, %2
  4659                              <3> %if %0>1
  4660 0000068E 8A460B              <3>  mov al,%2
  4661                              <3> %endif
  4662                              <3> %if %0>0
  4663 00000691 8B16[9300]          <3>  mov dx,[reg_addr+%1*2]
  4664                              <3> %endif
  4665 00000695 EE                  <3>  out dx,al
  4666                              <2>  %endif
  4667                              <2>  %rotate 2
  4668                                  	outbyte CB_DH,[reg_cur_dev]
  4669                              <1> %if %0>1
  4670 00000696 A0[0200]            <1>  mov al,%2
  4671                              <1> %endif
  4672                              <1> %if %0>0
  4673 00000699 8B16[9500]          <1>  mov dx,[reg_addr+%1*2]
  4674                              <1> %endif
  4675 0000069D EE                  <1>  out dx,al
  4676                                  	outbyte CB_CMD,CMD_PACKET
  4677                              <1> %if %0>1
  4678 0000069E B0A0                <1>  mov al,%2
  4679                              <1> %endif
  4680                              <1> %if %0>0
  4681 000006A0 8B16[9700]          <1>  mov dx,[reg_addr+%1*2]
  4682                              <1> %endif
  4683 000006A4 EE                  <1>  out dx,al
  4684 000006A5 E86FFF                  	call delay400ns
  4685 000006A8 E86BFF                  	call sub_atapi_delay
  4686 000006AB 29DB                    	sub bx,bx
  4687                                  ;	while {inbyte CB_ASTAT},{test al,CB_STAT_BSY|CB_STAT_ERR|CB_STAT_DRQ},z
  4688                                  	while {inbyte CB_ASTAT},{test al,CB_STAT_BSY},z
  4689                              <1> con_push while
  4690                              <2>  %assign __lastlevel__ __level__
  4691                              <2>  %assign __level__ __level__ + 1
  4692                              <2>  %if __return__ > 0
  4693                              <2>  %assign con_return 1
  4694                              <2>  %else
  4695                              <2>  %assign con_return 0
  4696                              <2>  %endif
  4697                              <2> 
  4698                              <2>  %if __cont__ > 0
  4699                              <2>  %assign con_cont 1
  4700                              <2>  %else
  4701                              <2>  %assign con_cont 0
  4702                              <2>  %endif
  4703                              <2>  %if __break__ > 0
  4704                              <2>  %assign con_break 1
  4705                              <2>  %else
  4706                              <2>  %assign con_break 0
  4707                              <2>  %endif
  4708                              <2> 
  4709                              <2>  %ifidn %1,proc
  4710                              <2>  %assign con_return 0
  4711                              <2>  %elifidn %1,forcx
  4712                              <2>  %assign con_break 0
  4713                              <2>  %elifidn %1,repeat
  4714                              <2>  %assign con_cont 0
  4715                              <2>  %assign con_break 0
  4716                              <2>  %elifidn %1,while
  4717                              <2>  %assign con_cont 0
  4718                              <2>  %assign con_break 0
  4719                              <2>  %endif
  4720                              <2> 
  4721                              <2>  %if __cndblock__ == 1
  4722                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  4723                              <2>  %endif
  4724                              <2> 
  4725                              <2>  %push %1
  4726                              <2>  %if con_return
  4727                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  4728                              <3> %define %1%2 %3%4
  4729                              <2>  %endif
  4730                              <2>  %if con_break
  4731                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  4732                              <2>  %endif
  4733                              <2>  %if con_cont
  4734                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  4735                              <2>  %endif
  4736                              <2> 
  4737                              <2>  %ifidn %1,andblock
  4738                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  4739                              <2>  %elifidn %1,orblock
  4740                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  4741                              <2>  %endif
  4742                              <1> %assign __break__ __break__ + 1
  4743                              <1> %assign __cont__ __cont__ + 1
  4744                              <1> %$begin:
  4745                              <1> cat_lable %$cont,__level__
  4746                              <2> %1%2:
  4747                              <1> %if %0 > 0
  4748                              <1>  %rep %0 -1
  4749                              <1>  %1
  4750                              <1>  %rotate 1
  4751                              <1>  %endrep
  4752                              <2>  %1
  4753 000006AD 8B16[9900]          <3>  mov dx,[reg_addr+%1*2]
  4754 000006B1 EC                  <3>  in al,dx
  4755                              <3>  %if %0 > 1
  4756                              <3>  mov %2,al
  4757                              <3>  %endif
  4758                              <2>  %rotate 1
  4759 000006B2 A880                <2>  %1
  4760                              <2>  %rotate 1
  4761 000006B4 7514                <1>  j%-1 %$end
  4762                              <1> %endif
  4763                                  		if 
  4764                              <1>  %rep %0 -1
  4765                              <1>  %1
  4766                              <1>  %rotate 1
  4767                              <1>  %endrep
  4768                              <1> 
  4769                              <1>  con_push if
  4770                              <2>  %assign __lastlevel__ __level__
  4771                              <2>  %assign __level__ __level__ + 1
  4772                              <2>  %if __return__ > 0
  4773                              <2>  %assign con_return 1
  4774                              <2>  %else
  4775                              <2>  %assign con_return 0
  4776                              <2>  %endif
  4777                              <2> 
  4778                              <2>  %if __cont__ > 0
  4779                              <2>  %assign con_cont 1
  4780                              <2>  %else
  4781                              <2>  %assign con_cont 0
  4782                              <2>  %endif
  4783                              <2>  %if __break__ > 0
  4784                              <2>  %assign con_break 1
  4785                              <2>  %else
  4786                              <2>  %assign con_break 0
  4787                              <2>  %endif
  4788                              <2> 
  4789                              <2>  %ifidn %1,proc
  4790                              <2>  %assign con_return 0
  4791                              <2>  %elifidn %1,forcx
  4792                              <2>  %assign con_break 0
  4793                              <2>  %elifidn %1,repeat
  4794                              <2>  %assign con_cont 0
  4795                              <2>  %assign con_break 0
  4796                              <2>  %elifidn %1,while
  4797                              <2>  %assign con_cont 0
  4798                              <2>  %assign con_break 0
  4799                              <2>  %endif
  4800                              <2> 
  4801                              <2>  %if __cndblock__ == 1
  4802                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  4803                              <2>  %endif
  4804                              <2> 
  4805                              <2>  %push %1
  4806                              <2>  %if con_return
  4807                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  4808                              <3> %define %1%2 %3%4
  4809                              <2>  %endif
  4810                              <2>  %if con_break
  4811                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  4812                              <3> %define %1%2 %3%4
  4813                              <2>  %endif
  4814                              <2>  %if con_cont
  4815                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  4816                              <3> %define %1%2 %3%4
  4817                              <2>  %endif
  4818                              <2> 
  4819                              <2>  %ifidn %1,andblock
  4820                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  4821                              <2>  %elifidn %1,orblock
  4822                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  4823                              <2>  %endif
  4824                              <1> 
  4825                              <1>  %if %0 > 0
  4826                              <1>  j%-1 %$ifnot
  4827                              <1>  %endif
  4828                              <1>  %assign %$elif_level 0
  4829                                  		orblock
  4830                              <1>  %assign __cndblock__ __cndblock__ + 1
  4831                              <1>  con_push orblock
  4832                              <2>  %assign __lastlevel__ __level__
  4833                              <2>  %assign __level__ __level__ + 1
  4834                              <2>  %if __return__ > 0
  4835                              <2>  %assign con_return 1
  4836                              <2>  %else
  4837                              <2>  %assign con_return 0
  4838                              <2>  %endif
  4839                              <2> 
  4840                              <2>  %if __cont__ > 0
  4841                              <2>  %assign con_cont 1
  4842                              <2>  %else
  4843                              <2>  %assign con_cont 0
  4844                              <2>  %endif
  4845                              <2>  %if __break__ > 0
  4846                              <2>  %assign con_break 1
  4847                              <2>  %else
  4848                              <2>  %assign con_break 0
  4849                              <2>  %endif
  4850                              <2> 
  4851                              <2>  %ifidn %1,proc
  4852                              <2>  %assign con_return 0
  4853                              <2>  %elifidn %1,forcx
  4854                              <2>  %assign con_break 0
  4855                              <2>  %elifidn %1,repeat
  4856                              <2>  %assign con_cont 0
  4857                              <2>  %assign con_break 0
  4858                              <2>  %elifidn %1,while
  4859                              <2>  %assign con_cont 0
  4860                              <2>  %assign con_break 0
  4861                              <2>  %endif
  4862                              <2> 
  4863                              <2>  %if __cndblock__ == 1
  4864                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  4865                              <3> %define %1%2 %3%4
  4866                              <2>  %endif
  4867                              <2> 
  4868                              <2>  %push %1
  4869                              <2>  %if con_return
  4870                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  4871                              <3> %define %1%2 %3%4
  4872                              <2>  %endif
  4873                              <2>  %if con_break
  4874                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  4875                              <3> %define %1%2 %3%4
  4876                              <2>  %endif
  4877                              <2>  %if con_cont
  4878                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  4879                              <3> %define %1%2 %3%4
  4880                              <2>  %endif
  4881                              <2> 
  4882                              <2>  %ifidn %1,andblock
  4883                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  4884                              <2>  %elifidn %1,orblock
  4885                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  4886                              <3> %define %1%2 %3%4
  4887                              <2>  %endif
  4888                                  			condiction {test al, CB_STAT_DRQ}, nz
  4889                              <1>  %rep %0 -1
  4890                              <1>  %1
  4891                              <1>  %rotate 1
  4892                              <1>  %endrep
  4893 000006B6 A808                <2>  %1
  4894                              <2>  %rotate 1
  4895                              <1>  %ifctx andblock
  4896                              <1>  cat_jnc %1,%$ifnot,__level__
  4897                              <1>  %elifctx orblock
  4898 000006B8 7504                <1>  j%+1 %$iftrue
  4899                              <1>  %else
  4900                              <1>  %error "not in the andblock or orblock"
  4901                              <1>  %endif
  4902                                  			condiction {test al, CB_STAT_ERR}, nz
  4903                              <1>  %rep %0 -1
  4904                              <1>  %1
  4905                              <1>  %rotate 1
  4906                              <1>  %endrep
  4907 000006BA A801                <2>  %1
  4908                              <2>  %rotate 1
  4909                              <1>  %ifctx andblock
  4910                              <1>  cat_jnc %1,%$ifnot,__level__
  4911                              <1>  %elifctx orblock
  4912 000006BC 7500                <1>  j%+1 %$iftrue
  4913                              <1>  %else
  4914                              <1>  %error "not in the andblock or orblock"
  4915                              <1>  %endif
  4916                                  		endblock then
  4917                              <1>  %ifctx orblock
  4918                              <1> 
  4919                              <1>  %$iftrue:
  4920                              <1>  %elifctx andblock
  4921                              <1>  %else
  4922                              <1>  %error "not in andblock or orblock"
  4923                              <1>  %endif
  4924                              <1>  con_pop
  4925                              <2>  %pop
  4926                              <2>  %assign __level__ __level__ - 1
  4927                              <1>  %assign __cndblock__ __cndblock__ - 1
  4928                                  			break
  4929                              <1> %if %0 > 0
  4930                              <1>  %ifidn %1,if
  4931                              <1>  %rotate 1
  4932                              <1>  %rep %0 - 2
  4933                              <1>  %1
  4934                              <1>  %rotate 1
  4935                              <1>  %endrep
  4936                              <1>  cat_jc %1,%$break,__level__
  4937                              <1>  %else
  4938                              <1>  %error "expect `if' after `break'"
  4939                              <1>  %endif
  4940                              <1> %else
  4941                              <1>  cat_jmp %$break,__level__
  4942 000006BE EB0A                <2>  jmp short %1%2
  4943                              <1> %endif
  4944                                  		endif
  4945                              <1>  %assign elselevel 0
  4946                              <1>  %ifctx if
  4947                              <1>  %$ifnot:
  4948                              <1>  con_pop
  4949                              <2>  %pop
  4950                              <2>  %assign __level__ __level__ - 1
  4951                              <1>  %elifctx else
  4952                              <1>  %assign elselevel %$elif_level
  4953                              <1>  %$ifend:
  4954                              <1>  con_pop
  4955                              <1>  %elifctx elif
  4956                              <1>  %assign elselevel %$elif_level
  4957                              <1>  %$ifnot:
  4958                              <1>  con_pop
  4959                              <1>  %else
  4960                              <1>  %error "expected `if' or `else' before `endif'"
  4961                              <1>  %endif
  4962                              <1>  %rep elselevel
  4963                              <1>  %$ifend:
  4964                              <1>  con_pop
  4965                              <1>  %endrep
  4966 000006C0 80CB01                  		or bl,FAILBIT0
  4967                                  		break if, {call check_timeout},is_timeout
  4968                              <1> %if %0 > 0
  4969                              <1>  %ifidn %1,if
  4970                              <1>  %rotate 1
  4971                              <1>  %rep %0 - 2
  4972                              <1>  %1
  4973                              <1>  %rotate 1
  4974                              <1>  %endrep
  4975 000006C3 E847FF              <2>  %1
  4976                              <2>  %rotate 1
  4977                              <1>  cat_jc %1,%$break,__level__
  4978 000006C6 7702                <2>  j%+1 %2%3
  4979                              <1>  %else
  4980                              <1>  %error "expect `if' after `break'"
  4981                              <1>  %endif
  4982                              <1> %else
  4983                              <1>  cat_jmp %$break,__level__
  4984                              <1> %endif
  4985                                  	endwhile
  4986                              <1>  %ifctx while
  4987 000006C8 EBE3                <1>  jmp %$begin
  4988                              <1>  %$end:
  4989                              <1>  cat_lable %$break,__level__
  4990                              <2> %1%2:
  4991                              <1>  %else
  4992                              <1>  %error "expected `while' before `endwhile'"
  4993                              <1>  %endif
  4994                              <1> con_pop
  4995                              <2>  %pop
  4996                              <2>  %assign __level__ __level__ - 1
  4997                              <1> %assign __break__ __break__ + 1
  4998                              <1> %assign __cont__ __cont__ + 1
  4999                                  	
  5000                                  	while {inbyte CB_ASTAT},{test al, CB_STAT_BSY}, nz
  5001                              <1> con_push while
  5002                              <2>  %assign __lastlevel__ __level__
  5003                              <2>  %assign __level__ __level__ + 1
  5004                              <2>  %if __return__ > 0
  5005                              <2>  %assign con_return 1
  5006                              <2>  %else
  5007                              <2>  %assign con_return 0
  5008                              <2>  %endif
  5009                              <2> 
  5010                              <2>  %if __cont__ > 0
  5011                              <2>  %assign con_cont 1
  5012                              <2>  %else
  5013                              <2>  %assign con_cont 0
  5014                              <2>  %endif
  5015                              <2>  %if __break__ > 0
  5016                              <2>  %assign con_break 1
  5017                              <2>  %else
  5018                              <2>  %assign con_break 0
  5019                              <2>  %endif
  5020                              <2> 
  5021                              <2>  %ifidn %1,proc
  5022                              <2>  %assign con_return 0
  5023                              <2>  %elifidn %1,forcx
  5024                              <2>  %assign con_break 0
  5025                              <2>  %elifidn %1,repeat
  5026                              <2>  %assign con_cont 0
  5027                              <2>  %assign con_break 0
  5028                              <2>  %elifidn %1,while
  5029                              <2>  %assign con_cont 0
  5030                              <2>  %assign con_break 0
  5031                              <2>  %endif
  5032                              <2> 
  5033                              <2>  %if __cndblock__ == 1
  5034                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  5035                              <2>  %endif
  5036                              <2> 
  5037                              <2>  %push %1
  5038                              <2>  %if con_return
  5039                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  5040                              <3> %define %1%2 %3%4
  5041                              <2>  %endif
  5042                              <2>  %if con_break
  5043                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  5044                              <2>  %endif
  5045                              <2>  %if con_cont
  5046                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  5047                              <2>  %endif
  5048                              <2> 
  5049                              <2>  %ifidn %1,andblock
  5050                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5051                              <2>  %elifidn %1,orblock
  5052                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5053                              <2>  %endif
  5054                              <1> %assign __break__ __break__ + 1
  5055                              <1> %assign __cont__ __cont__ + 1
  5056                              <1> %$begin:
  5057                              <1> cat_lable %$cont,__level__
  5058                              <2> %1%2:
  5059                              <1> %if %0 > 0
  5060                              <1>  %rep %0 -1
  5061                              <1>  %1
  5062                              <1>  %rotate 1
  5063                              <1>  %endrep
  5064                              <2>  %1
  5065 000006CA 8B16[9900]          <3>  mov dx,[reg_addr+%1*2]
  5066 000006CE EC                  <3>  in al,dx
  5067                              <3>  %if %0 > 1
  5068                              <3>  mov %2,al
  5069                              <3>  %endif
  5070                              <2>  %rotate 1
  5071 000006CF A880                <2>  %1
  5072                              <2>  %rotate 1
  5073 000006D1 7410                <1>  j%-1 %$end
  5074                              <1> %endif
  5075                                  ;		inbyte CB_ASTAT
  5076                                  ;		break if, {test al,CB_STAT_BSY},z
  5077                                  		if {call check_timeout},is_timeout
  5078                              <1>  %rep %0 -1
  5079                              <1>  %1
  5080                              <1>  %rotate 1
  5081                              <1>  %endrep
  5082 000006D3 E837FF              <2>  %1
  5083                              <2>  %rotate 1
  5084                              <1> 
  5085                              <1>  con_push if
  5086                              <2>  %assign __lastlevel__ __level__
  5087                              <2>  %assign __level__ __level__ + 1
  5088                              <2>  %if __return__ > 0
  5089                              <2>  %assign con_return 1
  5090                              <2>  %else
  5091                              <2>  %assign con_return 0
  5092                              <2>  %endif
  5093                              <2> 
  5094                              <2>  %if __cont__ > 0
  5095                              <2>  %assign con_cont 1
  5096                              <2>  %else
  5097                              <2>  %assign con_cont 0
  5098                              <2>  %endif
  5099                              <2>  %if __break__ > 0
  5100                              <2>  %assign con_break 1
  5101                              <2>  %else
  5102                              <2>  %assign con_break 0
  5103                              <2>  %endif
  5104                              <2> 
  5105                              <2>  %ifidn %1,proc
  5106                              <2>  %assign con_return 0
  5107                              <2>  %elifidn %1,forcx
  5108                              <2>  %assign con_break 0
  5109                              <2>  %elifidn %1,repeat
  5110                              <2>  %assign con_cont 0
  5111                              <2>  %assign con_break 0
  5112                              <2>  %elifidn %1,while
  5113                              <2>  %assign con_cont 0
  5114                              <2>  %assign con_break 0
  5115                              <2>  %endif
  5116                              <2> 
  5117                              <2>  %if __cndblock__ == 1
  5118                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  5119                              <2>  %endif
  5120                              <2> 
  5121                              <2>  %push %1
  5122                              <2>  %if con_return
  5123                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  5124                              <3> %define %1%2 %3%4
  5125                              <2>  %endif
  5126                              <2>  %if con_break
  5127                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  5128                              <3> %define %1%2 %3%4
  5129                              <2>  %endif
  5130                              <2>  %if con_cont
  5131                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  5132                              <3> %define %1%2 %3%4
  5133                              <2>  %endif
  5134                              <2> 
  5135                              <2>  %ifidn %1,andblock
  5136                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5137                              <2>  %elifidn %1,orblock
  5138                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5139                              <2>  %endif
  5140                              <1> 
  5141                              <1>  %if %0 > 0
  5142 000006D6 7609                <1>  j%-1 %$ifnot
  5143                              <1>  %endif
  5144                              <1>  %assign %$elif_level 0
  5145 000006D8 C74604FFFF              			mov word [.dir],-1
  5146 000006DD B733                    			mov bh, 51
  5147                                  			break
  5148                              <1> %if %0 > 0
  5149                              <1>  %ifidn %1,if
  5150                              <1>  %rotate 1
  5151                              <1>  %rep %0 - 2
  5152                              <1>  %1
  5153                              <1>  %rotate 1
  5154                              <1>  %endrep
  5155                              <1>  cat_jc %1,%$break,__level__
  5156                              <1>  %else
  5157                              <1>  %error "expect `if' after `break'"
  5158                              <1>  %endif
  5159                              <1> %else
  5160                              <1>  cat_jmp %$break,__level__
  5161 000006DF EB02                <2>  jmp short %1%2
  5162                              <1> %endif
  5163                                  		endif
  5164                              <1>  %assign elselevel 0
  5165                              <1>  %ifctx if
  5166                              <1>  %$ifnot:
  5167                              <1>  con_pop
  5168                              <2>  %pop
  5169                              <2>  %assign __level__ __level__ - 1
  5170                              <1>  %elifctx else
  5171                              <1>  %assign elselevel %$elif_level
  5172                              <1>  %$ifend:
  5173                              <1>  con_pop
  5174                              <1>  %elifctx elif
  5175                              <1>  %assign elselevel %$elif_level
  5176                              <1>  %$ifnot:
  5177                              <1>  con_pop
  5178                              <1>  %else
  5179                              <1>  %error "expected `if' or `else' before `endif'"
  5180                              <1>  %endif
  5181                              <1>  %rep elselevel
  5182                              <1>  %$ifend:
  5183                              <1>  con_pop
  5184                              <1>  %endrep
  5185                                  	endwhile
  5186                              <1>  %ifctx while
  5187 000006E1 EBE7                <1>  jmp %$begin
  5188                              <1>  %$end:
  5189                              <1>  cat_lable %$break,__level__
  5190                              <2> %1%2:
  5191                              <1>  %else
  5192                              <1>  %error "expected `while' before `endwhile'"
  5193                              <1>  %endif
  5194                              <1> con_pop
  5195                              <2>  %pop
  5196                              <2>  %assign __level__ __level__ - 1
  5197                              <1> %assign __break__ __break__ + 1
  5198                              <1> %assign __cont__ __cont__ + 1
  5199                                  	
  5200                                  	goton .skip_out,if,{cmp bh,0},nz
  5201                              <1> %if %0 > 1
  5202                              <1>  %ifidn %2,if
  5203                              <1>  %rotate 1
  5204                              <1>  %rep %0 - 3
  5205                              <1>  %2
  5206                              <1>  %rotate 1
  5207                              <1>  %endrep
  5208 000006E3 80FF00              <2>  %2
  5209                              <2>  %rotate 1
  5210                              <1>  %rotate 1
  5211 000006E6 0F855A01            <1>  j%+1 NEAR %2
  5212                              <1>  %else
  5213                              <1>  %error "expect `if' after `continue'"
  5214                              <1>  %endif
  5215                              <1> %else
  5216                              <1>  jmp %1
  5217                              <1> %endif
  5218                                  	
  5219                                  	
  5220                                  	inbyte CB_STAT,[.status]
  5221 000006EA 8B16[9700]          <1>  mov dx,[reg_addr+%1*2]
  5222 000006EE EC                  <1>  in al,dx
  5223                              <1>  %if %0 > 1
  5224 000006EF 8846FF              <1>  mov %2,al
  5225                              <1>  %endif
  5226                                  	inbyte CB_SC, [.reason]
  5227 000006F2 8B16[8D00]          <1>  mov dx,[reg_addr+%1*2]
  5228 000006F6 EC                  <1>  in al,dx
  5229                              <1>  %if %0 > 1
  5230 000006F7 8846FE              <1>  mov %2,al
  5231                              <1>  %endif
  5232                                  	inbyte CB_CL, [.bcnt]
  5233 000006FA 8B16[9100]          <1>  mov dx,[reg_addr+%1*2]
  5234 000006FE EC                  <1>  in al,dx
  5235                              <1>  %if %0 > 1
  5236 000006FF 8846FC              <1>  mov %2,al
  5237                              <1>  %endif
  5238                                  	inbyte CB_CH, [.bcnt+1]
  5239 00000702 8B16[9300]          <1>  mov dx,[reg_addr+%1*2]
  5240 00000706 EC                  <1>  in al,dx
  5241                              <1>  %if %0 > 1
  5242 00000707 8846FD              <1>  mov %2,al
  5243                              <1>  %endif
  5244                                  
  5245 0000070A 8A46FF                  	mov al,[.status]
  5246 0000070D 2488                    	and al,CB_STAT_BSY | CB_STAT_DRQ
  5247                                  	if {cmp al,CB_STAT_DRQ},nz
  5248                              <1>  %rep %0 -1
  5249                              <1>  %1
  5250                              <1>  %rotate 1
  5251                              <1>  %endrep
  5252 0000070F 3C08                <2>  %1
  5253                              <2>  %rotate 1
  5254                              <1> 
  5255                              <1>  con_push if
  5256                              <2>  %assign __lastlevel__ __level__
  5257                              <2>  %assign __level__ __level__ + 1
  5258                              <2>  %if __return__ > 0
  5259                              <2>  %assign con_return 1
  5260                              <2>  %else
  5261                              <2>  %assign con_return 0
  5262                              <2>  %endif
  5263                              <2> 
  5264                              <2>  %if __cont__ > 0
  5265                              <2>  %assign con_cont 1
  5266                              <2>  %else
  5267                              <2>  %assign con_cont 0
  5268                              <2>  %endif
  5269                              <2>  %if __break__ > 0
  5270                              <2>  %assign con_break 1
  5271                              <2>  %else
  5272                              <2>  %assign con_break 0
  5273                              <2>  %endif
  5274                              <2> 
  5275                              <2>  %ifidn %1,proc
  5276                              <2>  %assign con_return 0
  5277                              <2>  %elifidn %1,forcx
  5278                              <2>  %assign con_break 0
  5279                              <2>  %elifidn %1,repeat
  5280                              <2>  %assign con_cont 0
  5281                              <2>  %assign con_break 0
  5282                              <2>  %elifidn %1,while
  5283                              <2>  %assign con_cont 0
  5284                              <2>  %assign con_break 0
  5285                              <2>  %endif
  5286                              <2> 
  5287                              <2>  %if __cndblock__ == 1
  5288                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  5289                              <2>  %endif
  5290                              <2> 
  5291                              <2>  %push %1
  5292                              <2>  %if con_return
  5293                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  5294                              <3> %define %1%2 %3%4
  5295                              <2>  %endif
  5296                              <2>  %if con_break
  5297                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  5298                              <3> %define %1%2 %3%4
  5299                              <2>  %endif
  5300                              <2>  %if con_cont
  5301                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  5302                              <3> %define %1%2 %3%4
  5303                              <2>  %endif
  5304                              <2> 
  5305                              <2>  %ifidn %1,andblock
  5306                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5307                              <2>  %elifidn %1,orblock
  5308                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5309                              <2>  %endif
  5310                              <1> 
  5311                              <1>  %if %0 > 0
  5312 00000711 7405                <1>  j%-1 %$ifnot
  5313                              <1>  %endif
  5314                              <1>  %assign %$elif_level 0
  5315 00000713 B734                    		mov bh,52
  5316                                  %ifdef DEBUG
  5317                                  		print_stat [.status],"%b %s check BSY=0 DRQ=1 now\n",bx,STAT_BUF
  5318                                  %endif
  5319                                  		goto .skip_out
  5320                              <1> %if %0 > 1
  5321                              <1>  %ifidn %2,if
  5322                              <1>  %rotate 1
  5323                              <1>  %rep %0 - 3
  5324                              <1>  %2
  5325                              <1>  %rotate 1
  5326                              <1>  %endrep
  5327                              <1>  %rotate 1
  5328                              <1>  j%+1 %2
  5329                              <1>  %else
  5330                              <1>  %error "expect `if' after `continue'"
  5331                              <1>  %endif
  5332                              <1> %else
  5333 00000715 E92C01              <1>  jmp %1
  5334                              <1> %endif
  5335                                  	endif
  5336                              <1>  %assign elselevel 0
  5337                              <1>  %ifctx if
  5338                              <1>  %$ifnot:
  5339                              <1>  con_pop
  5340                              <2>  %pop
  5341                              <2>  %assign __level__ __level__ - 1
  5342                              <1>  %elifctx else
  5343                              <1>  %assign elselevel %$elif_level
  5344                              <1>  %$ifend:
  5345                              <1>  con_pop
  5346                              <1>  %elifctx elif
  5347                              <1>  %assign elselevel %$elif_level
  5348                              <1>  %$ifnot:
  5349                              <1>  con_pop
  5350                              <1>  %else
  5351                              <1>  %error "expected `if' or `else' before `endif'"
  5352                              <1>  %endif
  5353                              <1>  %rep elselevel
  5354                              <1>  %$ifend:
  5355                              <1>  con_pop
  5356                              <1>  %endrep
  5357                                  
  5358                                  %ifdef sane_check	
  5359 00000718 8A46FE                  	mov al,[.reason]
  5360                                  	if
  5361                              <1>  %rep %0 -1
  5362                              <1>  %1
  5363                              <1>  %rotate 1
  5364                              <1>  %endrep
  5365                              <1> 
  5366                              <1>  con_push if
  5367                              <2>  %assign __lastlevel__ __level__
  5368                              <2>  %assign __level__ __level__ + 1
  5369                              <2>  %if __return__ > 0
  5370                              <2>  %assign con_return 1
  5371                              <2>  %else
  5372                              <2>  %assign con_return 0
  5373                              <2>  %endif
  5374                              <2> 
  5375                              <2>  %if __cont__ > 0
  5376                              <2>  %assign con_cont 1
  5377                              <2>  %else
  5378                              <2>  %assign con_cont 0
  5379                              <2>  %endif
  5380                              <2>  %if __break__ > 0
  5381                              <2>  %assign con_break 1
  5382                              <2>  %else
  5383                              <2>  %assign con_break 0
  5384                              <2>  %endif
  5385                              <2> 
  5386                              <2>  %ifidn %1,proc
  5387                              <2>  %assign con_return 0
  5388                              <2>  %elifidn %1,forcx
  5389                              <2>  %assign con_break 0
  5390                              <2>  %elifidn %1,repeat
  5391                              <2>  %assign con_cont 0
  5392                              <2>  %assign con_break 0
  5393                              <2>  %elifidn %1,while
  5394                              <2>  %assign con_cont 0
  5395                              <2>  %assign con_break 0
  5396                              <2>  %endif
  5397                              <2> 
  5398                              <2>  %if __cndblock__ == 1
  5399                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  5400                              <2>  %endif
  5401                              <2> 
  5402                              <2>  %push %1
  5403                              <2>  %if con_return
  5404                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  5405                              <3> %define %1%2 %3%4
  5406                              <2>  %endif
  5407                              <2>  %if con_break
  5408                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  5409                              <3> %define %1%2 %3%4
  5410                              <2>  %endif
  5411                              <2>  %if con_cont
  5412                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  5413                              <3> %define %1%2 %3%4
  5414                              <2>  %endif
  5415                              <2> 
  5416                              <2>  %ifidn %1,andblock
  5417                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5418                              <2>  %elifidn %1,orblock
  5419                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5420                              <2>  %endif
  5421                              <1> 
  5422                              <1>  %if %0 > 0
  5423                              <1>  j%-1 %$ifnot
  5424                              <1>  %endif
  5425                              <1>  %assign %$elif_level 0
  5426                                  	orblock
  5427                              <1>  %assign __cndblock__ __cndblock__ + 1
  5428                              <1>  con_push orblock
  5429                              <2>  %assign __lastlevel__ __level__
  5430                              <2>  %assign __level__ __level__ + 1
  5431                              <2>  %if __return__ > 0
  5432                              <2>  %assign con_return 1
  5433                              <2>  %else
  5434                              <2>  %assign con_return 0
  5435                              <2>  %endif
  5436                              <2> 
  5437                              <2>  %if __cont__ > 0
  5438                              <2>  %assign con_cont 1
  5439                              <2>  %else
  5440                              <2>  %assign con_cont 0
  5441                              <2>  %endif
  5442                              <2>  %if __break__ > 0
  5443                              <2>  %assign con_break 1
  5444                              <2>  %else
  5445                              <2>  %assign con_break 0
  5446                              <2>  %endif
  5447                              <2> 
  5448                              <2>  %ifidn %1,proc
  5449                              <2>  %assign con_return 0
  5450                              <2>  %elifidn %1,forcx
  5451                              <2>  %assign con_break 0
  5452                              <2>  %elifidn %1,repeat
  5453                              <2>  %assign con_cont 0
  5454                              <2>  %assign con_break 0
  5455                              <2>  %elifidn %1,while
  5456                              <2>  %assign con_cont 0
  5457                              <2>  %assign con_break 0
  5458                              <2>  %endif
  5459                              <2> 
  5460                              <2>  %if __cndblock__ == 1
  5461                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  5462                              <3> %define %1%2 %3%4
  5463                              <2>  %endif
  5464                              <2> 
  5465                              <2>  %push %1
  5466                              <2>  %if con_return
  5467                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  5468                              <3> %define %1%2 %3%4
  5469                              <2>  %endif
  5470                              <2>  %if con_break
  5471                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  5472                              <3> %define %1%2 %3%4
  5473                              <2>  %endif
  5474                              <2>  %if con_cont
  5475                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  5476                              <3> %define %1%2 %3%4
  5477                              <2>  %endif
  5478                              <2> 
  5479                              <2>  %ifidn %1,andblock
  5480                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5481                              <2>  %elifidn %1,orblock
  5482                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5483                              <3> %define %1%2 %3%4
  5484                              <2>  %endif
  5485                                  		condiction  {test al,CB_SC_P_TAG | CB_SC_P_REL | CB_SC_P_IO},nz
  5486                              <1>  %rep %0 -1
  5487                              <1>  %1
  5488                              <1>  %rotate 1
  5489                              <1>  %endrep
  5490 0000071B A8FE                <2>  %1
  5491                              <2>  %rotate 1
  5492                              <1>  %ifctx andblock
  5493                              <1>  cat_jnc %1,%$ifnot,__level__
  5494                              <1>  %elifctx orblock
  5495 0000071D 7504                <1>  j%+1 %$iftrue
  5496                              <1>  %else
  5497                              <1>  %error "not in the andblock or orblock"
  5498                              <1>  %endif
  5499                                  		condiction  {test al,CB_SC_P_CD},z
  5500                              <1>  %rep %0 -1
  5501                              <1>  %1
  5502                              <1>  %rotate 1
  5503                              <1>  %endrep
  5504 0000071F A801                <2>  %1
  5505                              <2>  %rotate 1
  5506                              <1>  %ifctx andblock
  5507                              <1>  cat_jnc %1,%$ifnot,__level__
  5508                              <1>  %elifctx orblock
  5509 00000721 7400                <1>  j%+1 %$iftrue
  5510                              <1>  %else
  5511                              <1>  %error "not in the andblock or orblock"
  5512                              <1>  %endif
  5513                                  	endblock then
  5514                              <1>  %ifctx orblock
  5515                              <1> 
  5516                              <1>  %$iftrue:
  5517                              <1>  %elifctx andblock
  5518                              <1>  %else
  5519                              <1>  %error "not in andblock or orblock"
  5520                              <1>  %endif
  5521                              <1>  con_pop
  5522                              <2>  %pop
  5523                              <2>  %assign __level__ __level__ - 1
  5524                              <1>  %assign __cndblock__ __cndblock__ - 1
  5525 00000723 80CB04                  		or bl,FAILBIT2
  5526                                  %ifdef DEBUG
  5527                                  		print_stat [.status],"%b %s %b check reason\n",bx,STAT_BUF,[.reason]
  5528                                  %endif
  5529                                  	endif
  5530                              <1>  %assign elselevel 0
  5531                              <1>  %ifctx if
  5532                              <1>  %$ifnot:
  5533                              <1>  con_pop
  5534                              <2>  %pop
  5535                              <2>  %assign __level__ __level__ - 1
  5536                              <1>  %elifctx else
  5537                              <1>  %assign elselevel %$elif_level
  5538                              <1>  %$ifend:
  5539                              <1>  con_pop
  5540                              <1>  %elifctx elif
  5541                              <1>  %assign elselevel %$elif_level
  5542                              <1>  %$ifnot:
  5543                              <1>  con_pop
  5544                              <1>  %else
  5545                              <1>  %error "expected `if' or `else' before `endif'"
  5546                              <1>  %endif
  5547                              <1>  %rep elselevel
  5548                              <1>  %$ifend:
  5549                              <1>  con_pop
  5550                              <1>  %endrep
  5551                                  	
  5552 00000726 8B46FC                  	mov ax,[.bcnt]
  5553                                  	if {cmp ax,[.packet_len]},nz
  5554                              <1>  %rep %0 -1
  5555                              <1>  %1
  5556                              <1>  %rotate 1
  5557                              <1>  %endrep
  5558 00000729 3B460A              <2>  %1
  5559                              <2>  %rotate 1
  5560                              <1> 
  5561                              <1>  con_push if
  5562                              <2>  %assign __lastlevel__ __level__
  5563                              <2>  %assign __level__ __level__ + 1
  5564                              <2>  %if __return__ > 0
  5565                              <2>  %assign con_return 1
  5566                              <2>  %else
  5567                              <2>  %assign con_return 0
  5568                              <2>  %endif
  5569                              <2> 
  5570                              <2>  %if __cont__ > 0
  5571                              <2>  %assign con_cont 1
  5572                              <2>  %else
  5573                              <2>  %assign con_cont 0
  5574                              <2>  %endif
  5575                              <2>  %if __break__ > 0
  5576                              <2>  %assign con_break 1
  5577                              <2>  %else
  5578                              <2>  %assign con_break 0
  5579                              <2>  %endif
  5580                              <2> 
  5581                              <2>  %ifidn %1,proc
  5582                              <2>  %assign con_return 0
  5583                              <2>  %elifidn %1,forcx
  5584                              <2>  %assign con_break 0
  5585                              <2>  %elifidn %1,repeat
  5586                              <2>  %assign con_cont 0
  5587                              <2>  %assign con_break 0
  5588                              <2>  %elifidn %1,while
  5589                              <2>  %assign con_cont 0
  5590                              <2>  %assign con_break 0
  5591                              <2>  %endif
  5592                              <2> 
  5593                              <2>  %if __cndblock__ == 1
  5594                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  5595                              <2>  %endif
  5596                              <2> 
  5597                              <2>  %push %1
  5598                              <2>  %if con_return
  5599                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  5600                              <3> %define %1%2 %3%4
  5601                              <2>  %endif
  5602                              <2>  %if con_break
  5603                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  5604                              <3> %define %1%2 %3%4
  5605                              <2>  %endif
  5606                              <2>  %if con_cont
  5607                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  5608                              <3> %define %1%2 %3%4
  5609                              <2>  %endif
  5610                              <2> 
  5611                              <2>  %ifidn %1,andblock
  5612                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5613                              <2>  %elifidn %1,orblock
  5614                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5615                              <2>  %endif
  5616                              <1> 
  5617                              <1>  %if %0 > 0
  5618 0000072C 7403                <1>  j%-1 %$ifnot
  5619                              <1>  %endif
  5620                              <1>  %assign %$elif_level 0
  5621 0000072E 80CB08                  		or bl,FAILBIT3
  5622                                  %ifdef DEBUG
  5623                                  		print_stat [.status],"%b %s 0x%x check packet_len\n",bx,STAT_BUF,[.bcnt]
  5624                                  %endif
  5625                                  	endif
  5626                              <1>  %assign elselevel 0
  5627                              <1>  %ifctx if
  5628                              <1>  %$ifnot:
  5629                              <1>  con_pop
  5630                              <2>  %pop
  5631                              <2>  %assign __level__ __level__ - 1
  5632                              <1>  %elifctx else
  5633                              <1>  %assign elselevel %$elif_level
  5634                              <1>  %$ifend:
  5635                              <1>  con_pop
  5636                              <1>  %elifctx elif
  5637                              <1>  %assign elselevel %$elif_level
  5638                              <1>  %$ifnot:
  5639                              <1>  con_pop
  5640                              <1>  %else
  5641                              <1>  %error "expected `if' or `else' before `endif'"
  5642                              <1>  %endif
  5643                              <1>  %rep elselevel
  5644                              <1>  %$ifend:
  5645                              <1>  con_pop
  5646                              <1>  %endrep
  5647                                  %endif
  5648                                  
  5649                                  %ifdef DEBUG
  5650                                  	debug_print "sending cmd buffer"
  5651                                  %endif
  5652 00000731 BE[9D00]                	mov si,cmd_buff
  5653 00000734 B90C00                  	mov cx,cmd_buff_len
  5654 00000737 D1E9                    	shr cx,1
  5655 00000739 8B16[8900]              	mov dx,[reg_addr+CB_DATA]
  5656 0000073D FC                      	cld
  5657 0000073E F36F                    	rep outsw
  5658                                  	
  5659 00000740 E8D4FE                  	call delay400ns
  5660                                  
  5661 00000743 29C9                    	sub cx,cx
  5662                                  	while
  5663                              <1> con_push while
  5664                              <2>  %assign __lastlevel__ __level__
  5665                              <2>  %assign __level__ __level__ + 1
  5666                              <2>  %if __return__ > 0
  5667                              <2>  %assign con_return 1
  5668                              <2>  %else
  5669                              <2>  %assign con_return 0
  5670                              <2>  %endif
  5671                              <2> 
  5672                              <2>  %if __cont__ > 0
  5673                              <2>  %assign con_cont 1
  5674                              <2>  %else
  5675                              <2>  %assign con_cont 0
  5676                              <2>  %endif
  5677                              <2>  %if __break__ > 0
  5678                              <2>  %assign con_break 1
  5679                              <2>  %else
  5680                              <2>  %assign con_break 0
  5681                              <2>  %endif
  5682                              <2> 
  5683                              <2>  %ifidn %1,proc
  5684                              <2>  %assign con_return 0
  5685                              <2>  %elifidn %1,forcx
  5686                              <2>  %assign con_break 0
  5687                              <2>  %elifidn %1,repeat
  5688                              <2>  %assign con_cont 0
  5689                              <2>  %assign con_break 0
  5690                              <2>  %elifidn %1,while
  5691                              <2>  %assign con_cont 0
  5692                              <2>  %assign con_break 0
  5693                              <2>  %endif
  5694                              <2> 
  5695                              <2>  %if __cndblock__ == 1
  5696                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  5697                              <2>  %endif
  5698                              <2> 
  5699                              <2>  %push %1
  5700                              <2>  %if con_return
  5701                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  5702                              <3> %define %1%2 %3%4
  5703                              <2>  %endif
  5704                              <2>  %if con_break
  5705                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  5706                              <2>  %endif
  5707                              <2>  %if con_cont
  5708                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  5709                              <2>  %endif
  5710                              <2> 
  5711                              <2>  %ifidn %1,andblock
  5712                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5713                              <2>  %elifidn %1,orblock
  5714                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5715                              <2>  %endif
  5716                              <1> %assign __break__ __break__ + 1
  5717                              <1> %assign __cont__ __cont__ + 1
  5718                              <1> %$begin:
  5719                              <1> cat_lable %$cont,__level__
  5720                              <2> %1%2:
  5721                              <1> %if %0 > 0
  5722                              <1>  %rep %0 -1
  5723                              <1>  %1
  5724                              <1>  %rotate 1
  5725                              <1>  %endrep
  5726                              <1>  j%-1 %$end
  5727                              <1> %endif
  5728                                  
  5729                                  %ifdef DEBUG
  5730                                  		debug_print "  data transfer ----------------------------\n"
  5731                                  %endif
  5732 00000745 E8CEFE                  		call sub_atapi_delay
  5733                                  	    
  5734                                  		while {inbyte CB_ASTAT},{test al,CB_STAT_BSY},nz
  5735                              <1> con_push while
  5736                              <2>  %assign __lastlevel__ __level__
  5737                              <2>  %assign __level__ __level__ + 1
  5738                              <2>  %if __return__ > 0
  5739                              <2>  %assign con_return 1
  5740                              <2>  %else
  5741                              <2>  %assign con_return 0
  5742                              <2>  %endif
  5743                              <2> 
  5744                              <2>  %if __cont__ > 0
  5745                              <2>  %assign con_cont 1
  5746                              <2>  %else
  5747                              <2>  %assign con_cont 0
  5748                              <2>  %endif
  5749                              <2>  %if __break__ > 0
  5750                              <2>  %assign con_break 1
  5751                              <2>  %else
  5752                              <2>  %assign con_break 0
  5753                              <2>  %endif
  5754                              <2> 
  5755                              <2>  %ifidn %1,proc
  5756                              <2>  %assign con_return 0
  5757                              <2>  %elifidn %1,forcx
  5758                              <2>  %assign con_break 0
  5759                              <2>  %elifidn %1,repeat
  5760                              <2>  %assign con_cont 0
  5761                              <2>  %assign con_break 0
  5762                              <2>  %elifidn %1,while
  5763                              <2>  %assign con_cont 0
  5764                              <2>  %assign con_break 0
  5765                              <2>  %endif
  5766                              <2> 
  5767                              <2>  %if __cndblock__ == 1
  5768                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  5769                              <2>  %endif
  5770                              <2> 
  5771                              <2>  %push %1
  5772                              <2>  %if con_return
  5773                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  5774                              <3> %define %1%2 %3%4
  5775                              <2>  %endif
  5776                              <2>  %if con_break
  5777                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  5778                              <2>  %endif
  5779                              <2>  %if con_cont
  5780                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  5781                              <2>  %endif
  5782                              <2> 
  5783                              <2>  %ifidn %1,andblock
  5784                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5785                              <2>  %elifidn %1,orblock
  5786                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5787                              <2>  %endif
  5788                              <1> %assign __break__ __break__ + 1
  5789                              <1> %assign __cont__ __cont__ + 1
  5790                              <1> %$begin:
  5791                              <1> cat_lable %$cont,__level__
  5792                              <2> %1%2:
  5793                              <1> %if %0 > 0
  5794                              <1>  %rep %0 -1
  5795                              <1>  %1
  5796                              <1>  %rotate 1
  5797                              <1>  %endrep
  5798                              <2>  %1
  5799 00000748 8B16[9900]          <3>  mov dx,[reg_addr+%1*2]
  5800 0000074C EC                  <3>  in al,dx
  5801                              <3>  %if %0 > 1
  5802                              <3>  mov %2,al
  5803                              <3>  %endif
  5804                              <2>  %rotate 1
  5805 0000074D A880                <2>  %1
  5806                              <2>  %rotate 1
  5807 0000074F 740C                <1>  j%-1 %$end
  5808                              <1> %endif
  5809 00000751 E8B9FE                  			call check_timeout
  5810                                  			if is_timeout
  5811                              <1>  %rep %0 -1
  5812                              <1>  %1
  5813                              <1>  %rotate 1
  5814                              <1>  %endrep
  5815                              <1> 
  5816                              <1>  con_push if
  5817                              <2>  %assign __lastlevel__ __level__
  5818                              <2>  %assign __level__ __level__ + 1
  5819                              <2>  %if __return__ > 0
  5820                              <2>  %assign con_return 1
  5821                              <2>  %else
  5822                              <2>  %assign con_return 0
  5823                              <2>  %endif
  5824                              <2> 
  5825                              <2>  %if __cont__ > 0
  5826                              <2>  %assign con_cont 1
  5827                              <2>  %else
  5828                              <2>  %assign con_cont 0
  5829                              <2>  %endif
  5830                              <2>  %if __break__ > 0
  5831                              <2>  %assign con_break 1
  5832                              <2>  %else
  5833                              <2>  %assign con_break 0
  5834                              <2>  %endif
  5835                              <2> 
  5836                              <2>  %ifidn %1,proc
  5837                              <2>  %assign con_return 0
  5838                              <2>  %elifidn %1,forcx
  5839                              <2>  %assign con_break 0
  5840                              <2>  %elifidn %1,repeat
  5841                              <2>  %assign con_cont 0
  5842                              <2>  %assign con_break 0
  5843                              <2>  %elifidn %1,while
  5844                              <2>  %assign con_cont 0
  5845                              <2>  %assign con_break 0
  5846                              <2>  %endif
  5847                              <2> 
  5848                              <2>  %if __cndblock__ == 1
  5849                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  5850                              <2>  %endif
  5851                              <2> 
  5852                              <2>  %push %1
  5853                              <2>  %if con_return
  5854                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  5855                              <3> %define %1%2 %3%4
  5856                              <2>  %endif
  5857                              <2>  %if con_break
  5858                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  5859                              <3> %define %1%2 %3%4
  5860                              <2>  %endif
  5861                              <2>  %if con_cont
  5862                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  5863                              <3> %define %1%2 %3%4
  5864                              <2>  %endif
  5865                              <2> 
  5866                              <2>  %ifidn %1,andblock
  5867                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5868                              <2>  %elifidn %1,orblock
  5869                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5870                              <2>  %endif
  5871                              <1> 
  5872                              <1>  %if %0 > 0
  5873 00000754 7605                <1>  j%-1 %$ifnot
  5874                              <1>  %endif
  5875                              <1>  %assign %$elif_level 0
  5876 00000756 B736                    				mov bh,54
  5877                                  				goto .skip_out
  5878                              <1> %if %0 > 1
  5879                              <1>  %ifidn %2,if
  5880                              <1>  %rotate 1
  5881                              <1>  %rep %0 - 3
  5882                              <1>  %2
  5883                              <1>  %rotate 1
  5884                              <1>  %endrep
  5885                              <1>  %rotate 1
  5886                              <1>  j%+1 %2
  5887                              <1>  %else
  5888                              <1>  %error "expect `if' after `continue'"
  5889                              <1>  %endif
  5890                              <1> %else
  5891 00000758 E9E900              <1>  jmp %1
  5892                              <1> %endif
  5893                                  			endif
  5894                              <1>  %assign elselevel 0
  5895                              <1>  %ifctx if
  5896                              <1>  %$ifnot:
  5897                              <1>  con_pop
  5898                              <2>  %pop
  5899                              <2>  %assign __level__ __level__ - 1
  5900                              <1>  %elifctx else
  5901                              <1>  %assign elselevel %$elif_level
  5902                              <1>  %$ifend:
  5903                              <1>  con_pop
  5904                              <1>  %elifctx elif
  5905                              <1>  %assign elselevel %$elif_level
  5906                              <1>  %$ifnot:
  5907                              <1>  con_pop
  5908                              <1>  %else
  5909                              <1>  %error "expected `if' or `else' before `endif'"
  5910                              <1>  %endif
  5911                              <1>  %rep elselevel
  5912                              <1>  %$ifend:
  5913                              <1>  con_pop
  5914                              <1>  %endrep
  5915                                  		endwhile
  5916                              <1>  %ifctx while
  5917 0000075B EBEB                <1>  jmp %$begin
  5918                              <1>  %$end:
  5919                              <1>  cat_lable %$break,__level__
  5920                              <2> %1%2:
  5921                              <1>  %else
  5922                              <1>  %error "expected `while' before `endwhile'"
  5923                              <1>  %endif
  5924                              <1> con_pop
  5925                              <2>  %pop
  5926                              <2>  %assign __level__ __level__ - 1
  5927                              <1> %assign __break__ __break__ + 1
  5928                              <1> %assign __cont__ __cont__ + 1
  5929                                  
  5930                                  %ifdef DEBUG
  5931                                  		print_stat al,"%b %s wait ASTAT BSY=0\n",bx,STAT_BUF
  5932                                  %endif
  5933                                  
  5934                                  		; Data transfer loop
  5935                                  		; read the primary state register
  5936                                  		inbyte CB_STAT, [.status]
  5937 0000075D 8B16[9700]          <1>  mov dx,[reg_addr+%1*2]
  5938 00000761 EC                  <1>  in al,dx
  5939                              <1>  %if %0 > 1
  5940 00000762 8846FF              <1>  mov %2,al
  5941                              <1>  %endif
  5942                                  		inbyte CB_SC, [.reason]
  5943 00000765 8B16[8D00]          <1>  mov dx,[reg_addr+%1*2]
  5944 00000769 EC                  <1>  in al,dx
  5945                              <1>  %if %0 > 1
  5946 0000076A 8846FE              <1>  mov %2,al
  5947                              <1>  %endif
  5948                                  		inbyte CB_CL, [.bcnt]
  5949 0000076D 8B16[9100]          <1>  mov dx,[reg_addr+%1*2]
  5950 00000771 EC                  <1>  in al,dx
  5951                              <1>  %if %0 > 1
  5952 00000772 8846FC              <1>  mov %2,al
  5953                              <1>  %endif
  5954                                  		inbyte CB_CH, [.bcnt+1]
  5955 00000775 8B16[9300]          <1>  mov dx,[reg_addr+%1*2]
  5956 00000779 EC                  <1>  in al,dx
  5957                              <1>  %if %0 > 1
  5958 0000077A 8846FD              <1>  mov %2,al
  5959                              <1>  %endif
  5960                                  
  5961                                  %ifdef DEBUG
  5962                                  		print_stat [.status],"%b %s pre-data reason=%b len=%d\n",bx,STAT_BUF,[.reason],[.bcnt]
  5963                                  
  5964                                  		print_stat [.status],"  stat "
  5965                                  		debug_print "  check the device said end of command"
  5966                                  %endif
  5967                                  
  5968                                  		if {test byte[.status],CB_STAT_BSY | CB_STAT_DRQ},z
  5969                              <1>  %rep %0 -1
  5970                              <1>  %1
  5971                              <1>  %rotate 1
  5972                              <1>  %endrep
  5973 0000077D F646FF88            <2>  %1
  5974                              <2>  %rotate 1
  5975                              <1> 
  5976                              <1>  con_push if
  5977                              <2>  %assign __lastlevel__ __level__
  5978                              <2>  %assign __level__ __level__ + 1
  5979                              <2>  %if __return__ > 0
  5980                              <2>  %assign con_return 1
  5981                              <2>  %else
  5982                              <2>  %assign con_return 0
  5983                              <2>  %endif
  5984                              <2> 
  5985                              <2>  %if __cont__ > 0
  5986                              <2>  %assign con_cont 1
  5987                              <2>  %else
  5988                              <2>  %assign con_cont 0
  5989                              <2>  %endif
  5990                              <2>  %if __break__ > 0
  5991                              <2>  %assign con_break 1
  5992                              <2>  %else
  5993                              <2>  %assign con_break 0
  5994                              <2>  %endif
  5995                              <2> 
  5996                              <2>  %ifidn %1,proc
  5997                              <2>  %assign con_return 0
  5998                              <2>  %elifidn %1,forcx
  5999                              <2>  %assign con_break 0
  6000                              <2>  %elifidn %1,repeat
  6001                              <2>  %assign con_cont 0
  6002                              <2>  %assign con_break 0
  6003                              <2>  %elifidn %1,while
  6004                              <2>  %assign con_cont 0
  6005                              <2>  %assign con_break 0
  6006                              <2>  %endif
  6007                              <2> 
  6008                              <2>  %if __cndblock__ == 1
  6009                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  6010                              <2>  %endif
  6011                              <2> 
  6012                              <2>  %push %1
  6013                              <2>  %if con_return
  6014                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  6015                              <3> %define %1%2 %3%4
  6016                              <2>  %endif
  6017                              <2>  %if con_break
  6018                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  6019                              <3> %define %1%2 %3%4
  6020                              <2>  %endif
  6021                              <2>  %if con_cont
  6022                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  6023                              <3> %define %1%2 %3%4
  6024                              <2>  %endif
  6025                              <2> 
  6026                              <2>  %ifidn %1,andblock
  6027                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6028                              <2>  %elifidn %1,orblock
  6029                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6030                              <2>  %endif
  6031                              <1> 
  6032                              <1>  %if %0 > 0
  6033 00000781 7507                <1>  j%-1 %$ifnot
  6034                              <1>  %endif
  6035                              <1>  %assign %$elif_level 0
  6036 00000783 804E0480                			or byte[.dir], NON_DATA
  6037                                  			goto .skip_out
  6038                              <1> %if %0 > 1
  6039                              <1>  %ifidn %2,if
  6040                              <1>  %rotate 1
  6041                              <1>  %rep %0 - 3
  6042                              <1>  %2
  6043                              <1>  %rotate 1
  6044                              <1>  %endrep
  6045                              <1>  %rotate 1
  6046                              <1>  j%+1 %2
  6047                              <1>  %else
  6048                              <1>  %error "expect `if' after `continue'"
  6049                              <1>  %endif
  6050                              <1> %else
  6051 00000787 E9BA00              <1>  jmp %1
  6052                              <1> %endif
  6053                                  		endif
  6054                              <1>  %assign elselevel 0
  6055                              <1>  %ifctx if
  6056                              <1>  %$ifnot:
  6057                              <1>  con_pop
  6058                              <2>  %pop
  6059                              <2>  %assign __level__ __level__ - 1
  6060                              <1>  %elifctx else
  6061                              <1>  %assign elselevel %$elif_level
  6062                              <1>  %$ifend:
  6063                              <1>  con_pop
  6064                              <1>  %elifctx elif
  6065                              <1>  %assign elselevel %$elif_level
  6066                              <1>  %$ifnot:
  6067                              <1>  con_pop
  6068                              <1>  %else
  6069                              <1>  %error "expected `if' or `else' before `endif'"
  6070                              <1>  %endif
  6071                              <1>  %rep elselevel
  6072                              <1>  %$ifend:
  6073                              <1>  con_pop
  6074                              <1>  %endrep
  6075                                  
  6076                                  %ifdef DEBUG
  6077                                  		debug_print "  device want transfer data BSY = 0 DRQ =1"
  6078                                  %endif
  6079                                  
  6080                                  		if {mov al,[.status]},{and al,CB_STAT_BSY|CB_STAT_DRQ},{cmp al,CB_STAT_DRQ},nz
  6081                              <1>  %rep %0 -1
  6082                              <1>  %1
  6083                              <1>  %rotate 1
  6084                              <1>  %endrep
  6085 0000078A 8A46FF              <2>  %1
  6086                              <2>  %rotate 1
  6087 0000078D 2488                <2>  %1
  6088                              <2>  %rotate 1
  6089 0000078F 3C08                <2>  %1
  6090                              <2>  %rotate 1
  6091                              <1> 
  6092                              <1>  con_push if
  6093                              <2>  %assign __lastlevel__ __level__
  6094                              <2>  %assign __level__ __level__ + 1
  6095                              <2>  %if __return__ > 0
  6096                              <2>  %assign con_return 1
  6097                              <2>  %else
  6098                              <2>  %assign con_return 0
  6099                              <2>  %endif
  6100                              <2> 
  6101                              <2>  %if __cont__ > 0
  6102                              <2>  %assign con_cont 1
  6103                              <2>  %else
  6104                              <2>  %assign con_cont 0
  6105                              <2>  %endif
  6106                              <2>  %if __break__ > 0
  6107                              <2>  %assign con_break 1
  6108                              <2>  %else
  6109                              <2>  %assign con_break 0
  6110                              <2>  %endif
  6111                              <2> 
  6112                              <2>  %ifidn %1,proc
  6113                              <2>  %assign con_return 0
  6114                              <2>  %elifidn %1,forcx
  6115                              <2>  %assign con_break 0
  6116                              <2>  %elifidn %1,repeat
  6117                              <2>  %assign con_cont 0
  6118                              <2>  %assign con_break 0
  6119                              <2>  %elifidn %1,while
  6120                              <2>  %assign con_cont 0
  6121                              <2>  %assign con_break 0
  6122                              <2>  %endif
  6123                              <2> 
  6124                              <2>  %if __cndblock__ == 1
  6125                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  6126                              <2>  %endif
  6127                              <2> 
  6128                              <2>  %push %1
  6129                              <2>  %if con_return
  6130                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  6131                              <3> %define %1%2 %3%4
  6132                              <2>  %endif
  6133                              <2>  %if con_break
  6134                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  6135                              <3> %define %1%2 %3%4
  6136                              <2>  %endif
  6137                              <2>  %if con_cont
  6138                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  6139                              <3> %define %1%2 %3%4
  6140                              <2>  %endif
  6141                              <2> 
  6142                              <2>  %ifidn %1,andblock
  6143                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6144                              <2>  %elifidn %1,orblock
  6145                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6146                              <2>  %endif
  6147                              <1> 
  6148                              <1>  %if %0 > 0
  6149 00000791 7405                <1>  j%-1 %$ifnot
  6150                              <1>  %endif
  6151                              <1>  %assign %$elif_level 0
  6152 00000793 B737                    			mov bh,55
  6153                                  			goto .skip_out
  6154                              <1> %if %0 > 1
  6155                              <1>  %ifidn %2,if
  6156                              <1>  %rotate 1
  6157                              <1>  %rep %0 - 3
  6158                              <1>  %2
  6159                              <1>  %rotate 1
  6160                              <1>  %endrep
  6161                              <1>  %rotate 1
  6162                              <1>  j%+1 %2
  6163                              <1>  %else
  6164                              <1>  %error "expect `if' after `continue'"
  6165                              <1>  %endif
  6166                              <1> %else
  6167 00000795 E9AC00              <1>  jmp %1
  6168                              <1> %endif
  6169                                  		endif
  6170                              <1>  %assign elselevel 0
  6171                              <1>  %ifctx if
  6172                              <1>  %$ifnot:
  6173                              <1>  con_pop
  6174                              <2>  %pop
  6175                              <2>  %assign __level__ __level__ - 1
  6176                              <1>  %elifctx else
  6177                              <1>  %assign elselevel %$elif_level
  6178                              <1>  %$ifend:
  6179                              <1>  con_pop
  6180                              <1>  %elifctx elif
  6181                              <1>  %assign elselevel %$elif_level
  6182                              <1>  %$ifnot:
  6183                              <1>  con_pop
  6184                              <1>  %else
  6185                              <1>  %error "expected `if' or `else' before `endif'"
  6186                              <1>  %endif
  6187                              <1>  %rep elselevel
  6188                              <1>  %$ifend:
  6189                              <1>  con_pop
  6190                              <1>  %endrep
  6191                                  
  6192                                  %ifdef sane_check
  6193                                  %ifdef DEBUG
  6194                                  		print_stat al,"  stat "
  6195                                  		debug_print "  check: C/nD=0, IO=1 (read) or IO=0 (write)"
  6196                                  %endif
  6197                                  		if {test byte[.reason],CB_SC_P_TAG|CB_SC_P_REL|CB_SC_P_CD},nz
  6198                              <1>  %rep %0 -1
  6199                              <1>  %1
  6200                              <1>  %rotate 1
  6201                              <1>  %endrep
  6202 00000798 F646FEFD            <2>  %1
  6203                              <2>  %rotate 1
  6204                              <1> 
  6205                              <1>  con_push if
  6206                              <2>  %assign __lastlevel__ __level__
  6207                              <2>  %assign __level__ __level__ + 1
  6208                              <2>  %if __return__ > 0
  6209                              <2>  %assign con_return 1
  6210                              <2>  %else
  6211                              <2>  %assign con_return 0
  6212                              <2>  %endif
  6213                              <2> 
  6214                              <2>  %if __cont__ > 0
  6215                              <2>  %assign con_cont 1
  6216                              <2>  %else
  6217                              <2>  %assign con_cont 0
  6218                              <2>  %endif
  6219                              <2>  %if __break__ > 0
  6220                              <2>  %assign con_break 1
  6221                              <2>  %else
  6222                              <2>  %assign con_break 0
  6223                              <2>  %endif
  6224                              <2> 
  6225                              <2>  %ifidn %1,proc
  6226                              <2>  %assign con_return 0
  6227                              <2>  %elifidn %1,forcx
  6228                              <2>  %assign con_break 0
  6229                              <2>  %elifidn %1,repeat
  6230                              <2>  %assign con_cont 0
  6231                              <2>  %assign con_break 0
  6232                              <2>  %elifidn %1,while
  6233                              <2>  %assign con_cont 0
  6234                              <2>  %assign con_break 0
  6235                              <2>  %endif
  6236                              <2> 
  6237                              <2>  %if __cndblock__ == 1
  6238                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  6239                              <2>  %endif
  6240                              <2> 
  6241                              <2>  %push %1
  6242                              <2>  %if con_return
  6243                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  6244                              <3> %define %1%2 %3%4
  6245                              <2>  %endif
  6246                              <2>  %if con_break
  6247                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  6248                              <3> %define %1%2 %3%4
  6249                              <2>  %endif
  6250                              <2>  %if con_cont
  6251                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  6252                              <3> %define %1%2 %3%4
  6253                              <2>  %endif
  6254                              <2> 
  6255                              <2>  %ifidn %1,andblock
  6256                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6257                              <2>  %elifidn %1,orblock
  6258                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6259                              <2>  %endif
  6260                              <1> 
  6261                              <1>  %if %0 > 0
  6262 0000079C 7403                <1>  j%-1 %$ifnot
  6263                              <1>  %endif
  6264                              <1>  %assign %$elif_level 0
  6265 0000079E 80CB10                  			or bl,FAILBIT4
  6266                                  
  6267                                  %ifdef DEBUG
  6268                                  			print_stat al, "  FAIL:%b %s reason=%b C/nD=0, IO=1 (read) or IO=0 (write)\n",bx,STAT_BUF,[.reason],
  6269                                  %endif
  6270                                  		endif
  6271                              <1>  %assign elselevel 0
  6272                              <1>  %ifctx if
  6273                              <1>  %$ifnot:
  6274                              <1>  con_pop
  6275                              <2>  %pop
  6276                              <2>  %assign __level__ __level__ - 1
  6277                              <1>  %elifctx else
  6278                              <1>  %assign elselevel %$elif_level
  6279                              <1>  %$ifend:
  6280                              <1>  con_pop
  6281                              <1>  %elifctx elif
  6282                              <1>  %assign elselevel %$elif_level
  6283                              <1>  %$ifnot:
  6284                              <1>  con_pop
  6285                              <1>  %else
  6286                              <1>  %error "expected `if' or `else' before `endif'"
  6287                              <1>  %endif
  6288                              <1>  %rep elselevel
  6289                              <1>  %$ifend:
  6290                              <1>  con_pop
  6291                              <1>  %endrep
  6292                                  		if {test byte[.reason],CB_SC_P_IO},nz
  6293                              <1>  %rep %0 -1
  6294                              <1>  %1
  6295                              <1>  %rotate 1
  6296                              <1>  %endrep
  6297 000007A1 F646FE02            <2>  %1
  6298                              <2>  %rotate 1
  6299                              <1> 
  6300                              <1>  con_push if
  6301                              <2>  %assign __lastlevel__ __level__
  6302                              <2>  %assign __level__ __level__ + 1
  6303                              <2>  %if __return__ > 0
  6304                              <2>  %assign con_return 1
  6305                              <2>  %else
  6306                              <2>  %assign con_return 0
  6307                              <2>  %endif
  6308                              <2> 
  6309                              <2>  %if __cont__ > 0
  6310                              <2>  %assign con_cont 1
  6311                              <2>  %else
  6312                              <2>  %assign con_cont 0
  6313                              <2>  %endif
  6314                              <2>  %if __break__ > 0
  6315                              <2>  %assign con_break 1
  6316                              <2>  %else
  6317                              <2>  %assign con_break 0
  6318                              <2>  %endif
  6319                              <2> 
  6320                              <2>  %ifidn %1,proc
  6321                              <2>  %assign con_return 0
  6322                              <2>  %elifidn %1,forcx
  6323                              <2>  %assign con_break 0
  6324                              <2>  %elifidn %1,repeat
  6325                              <2>  %assign con_cont 0
  6326                              <2>  %assign con_break 0
  6327                              <2>  %elifidn %1,while
  6328                              <2>  %assign con_cont 0
  6329                              <2>  %assign con_break 0
  6330                              <2>  %endif
  6331                              <2> 
  6332                              <2>  %if __cndblock__ == 1
  6333                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  6334                              <2>  %endif
  6335                              <2> 
  6336                              <2>  %push %1
  6337                              <2>  %if con_return
  6338                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  6339                              <3> %define %1%2 %3%4
  6340                              <2>  %endif
  6341                              <2>  %if con_break
  6342                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  6343                              <3> %define %1%2 %3%4
  6344                              <2>  %endif
  6345                              <2>  %if con_cont
  6346                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  6347                              <3> %define %1%2 %3%4
  6348                              <2>  %endif
  6349                              <2> 
  6350                              <2>  %ifidn %1,andblock
  6351                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6352                              <2>  %elifidn %1,orblock
  6353                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6354                              <2>  %endif
  6355                              <1> 
  6356                              <1>  %if %0 > 0
  6357 000007A5 7409                <1>  j%-1 %$ifnot
  6358                              <1>  %endif
  6359                              <1>  %assign %$elif_level 0
  6360                                  			if {cmp byte[.dir],0},nz
  6361                              <1>  %rep %0 -1
  6362                              <1>  %1
  6363                              <1>  %rotate 1
  6364                              <1>  %endrep
  6365 000007A7 807E0400            <2>  %1
  6366                              <2>  %rotate 1
  6367                              <1> 
  6368                              <1>  con_push if
  6369                              <2>  %assign __lastlevel__ __level__
  6370                              <2>  %assign __level__ __level__ + 1
  6371                              <2>  %if __return__ > 0
  6372                              <2>  %assign con_return 1
  6373                              <2>  %else
  6374                              <2>  %assign con_return 0
  6375                              <2>  %endif
  6376                              <2> 
  6377                              <2>  %if __cont__ > 0
  6378                              <2>  %assign con_cont 1
  6379                              <2>  %else
  6380                              <2>  %assign con_cont 0
  6381                              <2>  %endif
  6382                              <2>  %if __break__ > 0
  6383                              <2>  %assign con_break 1
  6384                              <2>  %else
  6385                              <2>  %assign con_break 0
  6386                              <2>  %endif
  6387                              <2> 
  6388                              <2>  %ifidn %1,proc
  6389                              <2>  %assign con_return 0
  6390                              <2>  %elifidn %1,forcx
  6391                              <2>  %assign con_break 0
  6392                              <2>  %elifidn %1,repeat
  6393                              <2>  %assign con_cont 0
  6394                              <2>  %assign con_break 0
  6395                              <2>  %elifidn %1,while
  6396                              <2>  %assign con_cont 0
  6397                              <2>  %assign con_break 0
  6398                              <2>  %endif
  6399                              <2> 
  6400                              <2>  %if __cndblock__ == 1
  6401                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  6402                              <2>  %endif
  6403                              <2> 
  6404                              <2>  %push %1
  6405                              <2>  %if con_return
  6406                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  6407                              <3> %define %1%2 %3%4
  6408                              <2>  %endif
  6409                              <2>  %if con_break
  6410                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  6411                              <3> %define %1%2 %3%4
  6412                              <2>  %endif
  6413                              <2>  %if con_cont
  6414                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  6415                              <3> %define %1%2 %3%4
  6416                              <2>  %endif
  6417                              <2> 
  6418                              <2>  %ifidn %1,andblock
  6419                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6420                              <2>  %elifidn %1,orblock
  6421                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6422                              <2>  %endif
  6423                              <1> 
  6424                              <1>  %if %0 > 0
  6425 000007AB 7403                <1>  j%-1 %$ifnot
  6426                              <1>  %endif
  6427                              <1>  %assign %$elif_level 0
  6428 000007AD 80CB20                  				or bl,FAILBIT5
  6429                                  %ifdef DEBUG
  6430                                  				print_stat al, "  FAIL:%b %s reason=%b dir=%d\n",bx,STAT_BUF,[.reason],[.dir]
  6431                                  %endif
  6432                                  			endif
  6433                              <1>  %assign elselevel 0
  6434                              <1>  %ifctx if
  6435                              <1>  %$ifnot:
  6436                              <1>  con_pop
  6437                              <2>  %pop
  6438                              <2>  %assign __level__ __level__ - 1
  6439                              <1>  %elifctx else
  6440                              <1>  %assign elselevel %$elif_level
  6441                              <1>  %$ifend:
  6442                              <1>  con_pop
  6443                              <1>  %elifctx elif
  6444                              <1>  %assign elselevel %$elif_level
  6445                              <1>  %$ifnot:
  6446                              <1>  con_pop
  6447                              <1>  %else
  6448                              <1>  %error "expected `if' or `else' before `endif'"
  6449                              <1>  %endif
  6450                              <1>  %rep elselevel
  6451                              <1>  %$ifend:
  6452                              <1>  con_pop
  6453                              <1>  %endrep
  6454                                  		endif
  6455                              <1>  %assign elselevel 0
  6456                              <1>  %ifctx if
  6457                              <1>  %$ifnot:
  6458                              <1>  con_pop
  6459                              <2>  %pop
  6460                              <2>  %assign __level__ __level__ - 1
  6461                              <1>  %elifctx else
  6462                              <1>  %assign elselevel %$elif_level
  6463                              <1>  %$ifend:
  6464                              <1>  con_pop
  6465                              <1>  %elifctx elif
  6466                              <1>  %assign elselevel %$elif_level
  6467                              <1>  %$ifnot:
  6468                              <1>  con_pop
  6469                              <1>  %else
  6470                              <1>  %error "expected `if' or `else' before `endif'"
  6471                              <1>  %endif
  6472                              <1>  %rep elselevel
  6473                              <1>  %$ifend:
  6474                              <1>  con_pop
  6475                              <1>  %endrep
  6476                                  %endif	
  6477                                  	    ; do the slow data transfer
  6478                                  
  6479                                  %ifdef DEBUG
  6480                                  		debug_print "  do slow delay"
  6481                                  %endif
  6482                                  
  6483                                  		if {cmp byte[reg_slow_xfer_flag],0},nz
  6484                              <1>  %rep %0 -1
  6485                              <1>  %1
  6486                              <1>  %rotate 1
  6487                              <1>  %endrep
  6488 000007B0 803E[0100]00        <2>  %1
  6489                              <2>  %rotate 1
  6490                              <1> 
  6491                              <1>  con_push if
  6492                              <2>  %assign __lastlevel__ __level__
  6493                              <2>  %assign __level__ __level__ + 1
  6494                              <2>  %if __return__ > 0
  6495                              <2>  %assign con_return 1
  6496                              <2>  %else
  6497                              <2>  %assign con_return 0
  6498                              <2>  %endif
  6499                              <2> 
  6500                              <2>  %if __cont__ > 0
  6501                              <2>  %assign con_cont 1
  6502                              <2>  %else
  6503                              <2>  %assign con_cont 0
  6504                              <2>  %endif
  6505                              <2>  %if __break__ > 0
  6506                              <2>  %assign con_break 1
  6507                              <2>  %else
  6508                              <2>  %assign con_break 0
  6509                              <2>  %endif
  6510                              <2> 
  6511                              <2>  %ifidn %1,proc
  6512                              <2>  %assign con_return 0
  6513                              <2>  %elifidn %1,forcx
  6514                              <2>  %assign con_break 0
  6515                              <2>  %elifidn %1,repeat
  6516                              <2>  %assign con_cont 0
  6517                              <2>  %assign con_break 0
  6518                              <2>  %elifidn %1,while
  6519                              <2>  %assign con_cont 0
  6520                              <2>  %assign con_break 0
  6521                              <2>  %endif
  6522                              <2> 
  6523                              <2>  %if __cndblock__ == 1
  6524                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  6525                              <2>  %endif
  6526                              <2> 
  6527                              <2>  %push %1
  6528                              <2>  %if con_return
  6529                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  6530                              <3> %define %1%2 %3%4
  6531                              <2>  %endif
  6532                              <2>  %if con_break
  6533                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  6534                              <3> %define %1%2 %3%4
  6535                              <2>  %endif
  6536                              <2>  %if con_cont
  6537                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  6538                              <3> %define %1%2 %3%4
  6539                              <2>  %endif
  6540                              <2> 
  6541                              <2>  %ifidn %1,andblock
  6542                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6543                              <2>  %elifidn %1,orblock
  6544                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6545                              <2>  %endif
  6546                              <1> 
  6547                              <1>  %if %0 > 0
  6548 000007B5 7403                <1>  j%-1 %$ifnot
  6549                              <1>  %endif
  6550                              <1>  %assign %$elif_level 0
  6551 000007B7 E85BFE                  			call sub_xfer_delay
  6552                                  		endif
  6553                              <1>  %assign elselevel 0
  6554                              <1>  %ifctx if
  6555                              <1>  %$ifnot:
  6556                              <1>  con_pop
  6557                              <2>  %pop
  6558                              <2>  %assign __level__ __level__ - 1
  6559                              <1>  %elifctx else
  6560                              <1>  %assign elselevel %$elif_level
  6561                              <1>  %$ifend:
  6562                              <1>  con_pop
  6563                              <1>  %elifctx elif
  6564                              <1>  %assign elselevel %$elif_level
  6565                              <1>  %$ifnot:
  6566                              <1>  con_pop
  6567                              <1>  %else
  6568                              <1>  %error "expected `if' or `else' before `endif'"
  6569                              <1>  %endif
  6570                              <1>  %rep elselevel
  6571                              <1>  %$ifend:
  6572                              <1>  con_pop
  6573                              <1>  %endrep
  6574                                  
  6575                                  
  6576                                  %ifdef DEBUG
  6577                                  		debug_print "  check data len zero"
  6578                                  %endif
  6579                                  
  6580 000007BA 8B46FC                  		mov ax,[.bcnt]
  6581                                  		if {or ax,ax},z
  6582                              <1>  %rep %0 -1
  6583                              <1>  %1
  6584                              <1>  %rotate 1
  6585                              <1>  %endrep
  6586 000007BD 09C0                <2>  %1
  6587                              <2>  %rotate 1
  6588                              <1> 
  6589                              <1>  con_push if
  6590                              <2>  %assign __lastlevel__ __level__
  6591                              <2>  %assign __level__ __level__ + 1
  6592                              <2>  %if __return__ > 0
  6593                              <2>  %assign con_return 1
  6594                              <2>  %else
  6595                              <2>  %assign con_return 0
  6596                              <2>  %endif
  6597                              <2> 
  6598                              <2>  %if __cont__ > 0
  6599                              <2>  %assign con_cont 1
  6600                              <2>  %else
  6601                              <2>  %assign con_cont 0
  6602                              <2>  %endif
  6603                              <2>  %if __break__ > 0
  6604                              <2>  %assign con_break 1
  6605                              <2>  %else
  6606                              <2>  %assign con_break 0
  6607                              <2>  %endif
  6608                              <2> 
  6609                              <2>  %ifidn %1,proc
  6610                              <2>  %assign con_return 0
  6611                              <2>  %elifidn %1,forcx
  6612                              <2>  %assign con_break 0
  6613                              <2>  %elifidn %1,repeat
  6614                              <2>  %assign con_cont 0
  6615                              <2>  %assign con_break 0
  6616                              <2>  %elifidn %1,while
  6617                              <2>  %assign con_cont 0
  6618                              <2>  %assign con_break 0
  6619                              <2>  %endif
  6620                              <2> 
  6621                              <2>  %if __cndblock__ == 1
  6622                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  6623                              <2>  %endif
  6624                              <2> 
  6625                              <2>  %push %1
  6626                              <2>  %if con_return
  6627                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  6628                              <3> %define %1%2 %3%4
  6629                              <2>  %endif
  6630                              <2>  %if con_break
  6631                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  6632                              <3> %define %1%2 %3%4
  6633                              <2>  %endif
  6634                              <2>  %if con_cont
  6635                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  6636                              <3> %define %1%2 %3%4
  6637                              <2>  %endif
  6638                              <2> 
  6639                              <2>  %ifidn %1,andblock
  6640                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6641                              <2>  %elifidn %1,orblock
  6642                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6643                              <2>  %endif
  6644                              <1> 
  6645                              <1>  %if %0 > 0
  6646 000007BF 7508                <1>  j%-1 %$ifnot
  6647                              <1>  %endif
  6648                              <1>  %assign %$elif_level 0
  6649 000007C1 B73C                    			mov bh,60
  6650 000007C3 804E0480                			or byte[.dir],NON_DATA
  6651                                  			goto .skip_out
  6652                              <1> %if %0 > 1
  6653                              <1>  %ifidn %2,if
  6654                              <1>  %rotate 1
  6655                              <1>  %rep %0 - 3
  6656                              <1>  %2
  6657                              <1>  %rotate 1
  6658                              <1>  %endrep
  6659                              <1>  %rotate 1
  6660                              <1>  j%+1 %2
  6661                              <1>  %else
  6662                              <1>  %error "expect `if' after `continue'"
  6663                              <1>  %endif
  6664                              <1> %else
  6665 000007C7 EB7B                <1>  jmp %1
  6666                              <1> %endif
  6667                                  		endif
  6668                              <1>  %assign elselevel 0
  6669                              <1>  %ifctx if
  6670                              <1>  %$ifnot:
  6671                              <1>  con_pop
  6672                              <2>  %pop
  6673                              <2>  %assign __level__ __level__ - 1
  6674                              <1>  %elifctx else
  6675                              <1>  %assign elselevel %$elif_level
  6676                              <1>  %$ifend:
  6677                              <1>  con_pop
  6678                              <1>  %elifctx elif
  6679                              <1>  %assign elselevel %$elif_level
  6680                              <1>  %$ifnot:
  6681                              <1>  con_pop
  6682                              <1>  %else
  6683                              <1>  %error "expected `if' or `else' before `endif'"
  6684                              <1>  %endif
  6685                              <1>  %rep elselevel
  6686                              <1>  %$ifend:
  6687                              <1>  con_pop
  6688                              <1>  %endrep
  6689                                     	    
  6690                                  %ifdef DEBUG
  6691                                  		debug_print "  check the buffer len" 
  6692                                  %endif
  6693                                  
  6694                                  %ifdef sane_check 
  6695                                  		if {cmp ax,REG_ATAPI_MAX_BYTES},a
  6696                              <1>  %rep %0 -1
  6697                              <1>  %1
  6698                              <1>  %rotate 1
  6699                              <1>  %endrep
  6700 000007C9 3D0080              <2>  %1
  6701                              <2>  %rotate 1
  6702                              <1> 
  6703                              <1>  con_push if
  6704                              <2>  %assign __lastlevel__ __level__
  6705                              <2>  %assign __level__ __level__ + 1
  6706                              <2>  %if __return__ > 0
  6707                              <2>  %assign con_return 1
  6708                              <2>  %else
  6709                              <2>  %assign con_return 0
  6710                              <2>  %endif
  6711                              <2> 
  6712                              <2>  %if __cont__ > 0
  6713                              <2>  %assign con_cont 1
  6714                              <2>  %else
  6715                              <2>  %assign con_cont 0
  6716                              <2>  %endif
  6717                              <2>  %if __break__ > 0
  6718                              <2>  %assign con_break 1
  6719                              <2>  %else
  6720                              <2>  %assign con_break 0
  6721                              <2>  %endif
  6722                              <2> 
  6723                              <2>  %ifidn %1,proc
  6724                              <2>  %assign con_return 0
  6725                              <2>  %elifidn %1,forcx
  6726                              <2>  %assign con_break 0
  6727                              <2>  %elifidn %1,repeat
  6728                              <2>  %assign con_cont 0
  6729                              <2>  %assign con_break 0
  6730                              <2>  %elifidn %1,while
  6731                              <2>  %assign con_cont 0
  6732                              <2>  %assign con_break 0
  6733                              <2>  %endif
  6734                              <2> 
  6735                              <2>  %if __cndblock__ == 1
  6736                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  6737                              <2>  %endif
  6738                              <2> 
  6739                              <2>  %push %1
  6740                              <2>  %if con_return
  6741                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  6742                              <3> %define %1%2 %3%4
  6743                              <2>  %endif
  6744                              <2>  %if con_break
  6745                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  6746                              <3> %define %1%2 %3%4
  6747                              <2>  %endif
  6748                              <2>  %if con_cont
  6749                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  6750                              <3> %define %1%2 %3%4
  6751                              <2>  %endif
  6752                              <2> 
  6753                              <2>  %ifidn %1,andblock
  6754                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6755                              <2>  %elifidn %1,orblock
  6756                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6757                              <2>  %endif
  6758                              <1> 
  6759                              <1>  %if %0 > 0
  6760 000007CC 7603                <1>  j%-1 %$ifnot
  6761                              <1>  %endif
  6762                              <1>  %assign %$elif_level 0
  6763 000007CE 80CB40                  			or bl,FAILBIT6
  6764                                  		endif
  6765                              <1>  %assign elselevel 0
  6766                              <1>  %ifctx if
  6767                              <1>  %$ifnot:
  6768                              <1>  con_pop
  6769                              <2>  %pop
  6770                              <2>  %assign __level__ __level__ - 1
  6771                              <1>  %elifctx else
  6772                              <1>  %assign elselevel %$elif_level
  6773                              <1>  %$ifend:
  6774                              <1>  con_pop
  6775                              <1>  %elifctx elif
  6776                              <1>  %assign elselevel %$elif_level
  6777                              <1>  %$ifnot:
  6778                              <1>  con_pop
  6779                              <1>  %else
  6780                              <1>  %error "expected `if' or `else' before `endif'"
  6781                              <1>  %endif
  6782                              <1>  %rep elselevel
  6783                              <1>  %$ifend:
  6784                              <1>  con_pop
  6785                              <1>  %endrep
  6786                                  %endif  
  6787 000007D1 8A56FB                  		mov dl,[.pre_fail_bit7]
  6788 000007D4 08D3                    		or bl,dl
  6789 000007D6 A801                    		test al, 1
  6790 000007D8 0F9546FB                		setnz [.pre_fail_bit7]
  6791                                      
  6792                                  	   
  6793 000007DC 89CA                    		mov dx,cx 
  6794 000007DE 01C2                    		add dx,ax 
  6795                                  		if {cmp dx,[.packet_len]},a
  6796                              <1>  %rep %0 -1
  6797                              <1>  %1
  6798                              <1>  %rotate 1
  6799                              <1>  %endrep
  6800 000007E0 3B560A              <2>  %1
  6801                              <2>  %rotate 1
  6802                              <1> 
  6803                              <1>  con_push if
  6804                              <2>  %assign __lastlevel__ __level__
  6805                              <2>  %assign __level__ __level__ + 1
  6806                              <2>  %if __return__ > 0
  6807                              <2>  %assign con_return 1
  6808                              <2>  %else
  6809                              <2>  %assign con_return 0
  6810                              <2>  %endif
  6811                              <2> 
  6812                              <2>  %if __cont__ > 0
  6813                              <2>  %assign con_cont 1
  6814                              <2>  %else
  6815                              <2>  %assign con_cont 0
  6816                              <2>  %endif
  6817                              <2>  %if __break__ > 0
  6818                              <2>  %assign con_break 1
  6819                              <2>  %else
  6820                              <2>  %assign con_break 0
  6821                              <2>  %endif
  6822                              <2> 
  6823                              <2>  %ifidn %1,proc
  6824                              <2>  %assign con_return 0
  6825                              <2>  %elifidn %1,forcx
  6826                              <2>  %assign con_break 0
  6827                              <2>  %elifidn %1,repeat
  6828                              <2>  %assign con_cont 0
  6829                              <2>  %assign con_break 0
  6830                              <2>  %elifidn %1,while
  6831                              <2>  %assign con_cont 0
  6832                              <2>  %assign con_break 0
  6833                              <2>  %endif
  6834                              <2> 
  6835                              <2>  %if __cndblock__ == 1
  6836                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  6837                              <2>  %endif
  6838                              <2> 
  6839                              <2>  %push %1
  6840                              <2>  %if con_return
  6841                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  6842                              <3> %define %1%2 %3%4
  6843                              <2>  %endif
  6844                              <2>  %if con_break
  6845                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  6846                              <3> %define %1%2 %3%4
  6847                              <2>  %endif
  6848                              <2>  %if con_cont
  6849                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  6850                              <3> %define %1%2 %3%4
  6851                              <2>  %endif
  6852                              <2> 
  6853                              <2>  %ifidn %1,andblock
  6854                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6855                              <2>  %elifidn %1,orblock
  6856                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6857                              <2>  %endif
  6858                              <1> 
  6859                              <1>  %if %0 > 0
  6860 000007E3 7608                <1>  j%-1 %$ifnot
  6861                              <1>  %endif
  6862                              <1>  %assign %$elif_level 0
  6863 000007E5 B73B                    			mov bh,59
  6864 000007E7 804E0480                			or byte[.dir],NON_DATA
  6865                                  			goto .skip_out
  6866                              <1> %if %0 > 1
  6867                              <1>  %ifidn %2,if
  6868                              <1>  %rotate 1
  6869                              <1>  %rep %0 - 3
  6870                              <1>  %2
  6871                              <1>  %rotate 1
  6872                              <1>  %endrep
  6873                              <1>  %rotate 1
  6874                              <1>  j%+1 %2
  6875                              <1>  %else
  6876                              <1>  %error "expect `if' after `continue'"
  6877                              <1>  %endif
  6878                              <1> %else
  6879 000007EB EB57                <1>  jmp %1
  6880                              <1> %endif
  6881                                  		endif
  6882                              <1>  %assign elselevel 0
  6883                              <1>  %ifctx if
  6884                              <1>  %$ifnot:
  6885                              <1>  con_pop
  6886                              <2>  %pop
  6887                              <2>  %assign __level__ __level__ - 1
  6888                              <1>  %elifctx else
  6889                              <1>  %assign elselevel %$elif_level
  6890                              <1>  %$ifend:
  6891                              <1>  con_pop
  6892                              <1>  %elifctx elif
  6893                              <1>  %assign elselevel %$elif_level
  6894                              <1>  %$ifnot:
  6895                              <1>  con_pop
  6896                              <1>  %else
  6897                              <1>  %error "expected `if' or `else' before `endif'"
  6898                              <1>  %endif
  6899                              <1>  %rep elselevel
  6900                              <1>  %$ifend:
  6901                              <1>  con_pop
  6902                              <1>  %endrep
  6903                                  
  6904 000007ED 52                      		push dx
  6905 000007EE 89C1                    		mov cx,ax
  6906 000007F0 41                      		inc cx
  6907 000007F1 D1E9                    		shr cx,1
  6908 000007F3 8B16[8900]              		mov dx,[reg_addr+CB_DATA*2]
  6909 000007F7 FC                      		cld
  6910                                  		if {cmp byte[.dir],0},nz
  6911                              <1>  %rep %0 -1
  6912                              <1>  %1
  6913                              <1>  %rotate 1
  6914                              <1>  %endrep
  6915 000007F8 807E0400            <2>  %1
  6916                              <2>  %rotate 1
  6917                              <1> 
  6918                              <1>  con_push if
  6919                              <2>  %assign __lastlevel__ __level__
  6920                              <2>  %assign __level__ __level__ + 1
  6921                              <2>  %if __return__ > 0
  6922                              <2>  %assign con_return 1
  6923                              <2>  %else
  6924                              <2>  %assign con_return 0
  6925                              <2>  %endif
  6926                              <2> 
  6927                              <2>  %if __cont__ > 0
  6928                              <2>  %assign con_cont 1
  6929                              <2>  %else
  6930                              <2>  %assign con_cont 0
  6931                              <2>  %endif
  6932                              <2>  %if __break__ > 0
  6933                              <2>  %assign con_break 1
  6934                              <2>  %else
  6935                              <2>  %assign con_break 0
  6936                              <2>  %endif
  6937                              <2> 
  6938                              <2>  %ifidn %1,proc
  6939                              <2>  %assign con_return 0
  6940                              <2>  %elifidn %1,forcx
  6941                              <2>  %assign con_break 0
  6942                              <2>  %elifidn %1,repeat
  6943                              <2>  %assign con_cont 0
  6944                              <2>  %assign con_break 0
  6945                              <2>  %elifidn %1,while
  6946                              <2>  %assign con_cont 0
  6947                              <2>  %assign con_break 0
  6948                              <2>  %endif
  6949                              <2> 
  6950                              <2>  %if __cndblock__ == 1
  6951                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  6952                              <2>  %endif
  6953                              <2> 
  6954                              <2>  %push %1
  6955                              <2>  %if con_return
  6956                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  6957                              <3> %define %1%2 %3%4
  6958                              <2>  %endif
  6959                              <2>  %if con_break
  6960                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  6961                              <3> %define %1%2 %3%4
  6962                              <2>  %endif
  6963                              <2>  %if con_cont
  6964                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  6965                              <3> %define %1%2 %3%4
  6966                              <2>  %endif
  6967                              <2> 
  6968                              <2>  %ifidn %1,andblock
  6969                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6970                              <2>  %elifidn %1,orblock
  6971                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6972                              <2>  %endif
  6973                              <1> 
  6974                              <1>  %if %0 > 0
  6975 000007FC 740D                <1>  j%-1 %$ifnot
  6976                              <1>  %endif
  6977                              <1>  %assign %$elif_level 0
  6978 000007FE 1E                      			push ds
  6979 000007FF FF7606                  			push word [.packet_seg]
  6980 00000802 1F                      			pop ds
  6981 00000803 8B7608                  			mov si,[.packet_off]
  6982 00000806 F36F                    			rep outsw
  6983 00000808 1F                      			pop ds
  6984                                  		else
  6985                              <1>  %assign __near__ 0
  6986                              <1>  %if %0 >0
  6987                              <1>  %ifidn %1 near
  6988                              <1>  %assign __near__ 1
  6989                              <1>  %endif
  6990                              <1>  %endif
  6991                              <1>  %ifctx if
  6992                              <1>  %repl else
  6993                              <1>  jmp_near __near__,%$ifend
  6994                              <2>  %if %1 > 0
  6995                              <2>  jmp near %2
  6996                              <2>  %else
  6997 00000809 EB0B                <2>  jmp short %2
  6998                              <2>  %endif
  6999                              <1>  %$ifnot:
  7000                              <1>  %elifctx elif
  7001                              <1> 
  7002                              <1>  jmp_near __near__,%$ifend
  7003                              <1>  %$ifnot:
  7004                              <1>  %repl else
  7005                              <1> 
  7006                              <1> 
  7007                              <1> 
  7008                              <1> 
  7009                              <1> 
  7010                              <1> 
  7011                              <1>  %else
  7012                              <1>  %error "expected `if' before `else'"
  7013                              <1>  %endif
  7014 0000080B 06                      			push es
  7015 0000080C FF7606                  			push word [.packet_seg]
  7016 0000080F 07                      			pop es
  7017 00000810 8B7E08                  			mov di,[.packet_off]
  7018 00000813 F36D                    			rep insw
  7019 00000815 07                      			pop es
  7020                                  		endif
  7021                              <1>  %assign elselevel 0
  7022                              <1>  %ifctx if
  7023                              <1>  %$ifnot:
  7024                              <1>  con_pop
  7025                              <1>  %elifctx else
  7026                              <1>  %assign elselevel %$elif_level
  7027                              <1>  %$ifend:
  7028                              <1>  con_pop
  7029                              <2>  %pop
  7030                              <2>  %assign __level__ __level__ - 1
  7031                              <1>  %elifctx elif
  7032                              <1>  %assign elselevel %$elif_level
  7033                              <1>  %$ifnot:
  7034                              <1>  con_pop
  7035                              <1>  %else
  7036                              <1>  %error "expected `if' or `else' before `endif'"
  7037                              <1>  %endif
  7038                              <1>  %rep elselevel
  7039                              <1>  %$ifend:
  7040                              <1>  con_pop
  7041                              <1>  %endrep
  7042 00000816 59                      		pop cx
  7043                                  
  7044 00000817 014608                  		add [.packet_off],ax
  7045 0000081A E8FAFD                  		call delay400ns
  7046                                  	endwhile	
  7047                              <1>  %ifctx while
  7048 0000081D E925FF              <1>  jmp %$begin
  7049                              <1>  %$end:
  7050                              <1>  cat_lable %$break,__level__
  7051                              <2> %1%2:
  7052                              <1>  %else
  7053                              <1>  %error "expected `while' before `endwhile'"
  7054                              <1>  %endif
  7055                              <1> con_pop
  7056                              <2>  %pop
  7057                              <2>  %assign __level__ __level__ - 1
  7058                              <1> %assign __break__ __break__ + 1
  7059                              <1> %assign __cont__ __cont__ + 1
  7060                                  	
  7061                                  	if {test byte [.dir], NON_DATA},z
  7062                              <1>  %rep %0 -1
  7063                              <1>  %1
  7064                              <1>  %rotate 1
  7065                              <1>  %endrep
  7066 00000820 F6460480            <2>  %1
  7067                              <2>  %rotate 1
  7068                              <1> 
  7069                              <1>  con_push if
  7070                              <2>  %assign __lastlevel__ __level__
  7071                              <2>  %assign __level__ __level__ + 1
  7072                              <2>  %if __return__ > 0
  7073                              <2>  %assign con_return 1
  7074                              <2>  %else
  7075                              <2>  %assign con_return 0
  7076                              <2>  %endif
  7077                              <2> 
  7078                              <2>  %if __cont__ > 0
  7079                              <2>  %assign con_cont 1
  7080                              <2>  %else
  7081                              <2>  %assign con_cont 0
  7082                              <2>  %endif
  7083                              <2>  %if __break__ > 0
  7084                              <2>  %assign con_break 1
  7085                              <2>  %else
  7086                              <2>  %assign con_break 0
  7087                              <2>  %endif
  7088                              <2> 
  7089                              <2>  %ifidn %1,proc
  7090                              <2>  %assign con_return 0
  7091                              <2>  %elifidn %1,forcx
  7092                              <2>  %assign con_break 0
  7093                              <2>  %elifidn %1,repeat
  7094                              <2>  %assign con_cont 0
  7095                              <2>  %assign con_break 0
  7096                              <2>  %elifidn %1,while
  7097                              <2>  %assign con_cont 0
  7098                              <2>  %assign con_break 0
  7099                              <2>  %endif
  7100                              <2> 
  7101                              <2>  %if __cndblock__ == 1
  7102                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  7103                              <2>  %endif
  7104                              <2> 
  7105                              <2>  %push %1
  7106                              <2>  %if con_return
  7107                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  7108                              <3> %define %1%2 %3%4
  7109                              <2>  %endif
  7110                              <2>  %if con_break
  7111                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  7112                              <3> %define %1%2 %3%4
  7113                              <2>  %endif
  7114                              <2>  %if con_cont
  7115                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  7116                              <3> %define %1%2 %3%4
  7117                              <2>  %endif
  7118                              <2> 
  7119                              <2>  %ifidn %1,andblock
  7120                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7121                              <2>  %elifidn %1,orblock
  7122                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7123                              <2>  %endif
  7124                              <1> 
  7125                              <1>  %if %0 > 0
  7126 00000824 7509                <1>  j%-1 %$ifnot
  7127                              <1>  %endif
  7128                              <1>  %assign %$elif_level 0
  7129 00000826 E8EDFD                  		call sub_atapi_delay
  7130                                  		if is_timeout
  7131                              <1>  %rep %0 -1
  7132                              <1>  %1
  7133                              <1>  %rotate 1
  7134                              <1>  %endrep
  7135                              <1> 
  7136                              <1>  con_push if
  7137                              <2>  %assign __lastlevel__ __level__
  7138                              <2>  %assign __level__ __level__ + 1
  7139                              <2>  %if __return__ > 0
  7140                              <2>  %assign con_return 1
  7141                              <2>  %else
  7142                              <2>  %assign con_return 0
  7143                              <2>  %endif
  7144                              <2> 
  7145                              <2>  %if __cont__ > 0
  7146                              <2>  %assign con_cont 1
  7147                              <2>  %else
  7148                              <2>  %assign con_cont 0
  7149                              <2>  %endif
  7150                              <2>  %if __break__ > 0
  7151                              <2>  %assign con_break 1
  7152                              <2>  %else
  7153                              <2>  %assign con_break 0
  7154                              <2>  %endif
  7155                              <2> 
  7156                              <2>  %ifidn %1,proc
  7157                              <2>  %assign con_return 0
  7158                              <2>  %elifidn %1,forcx
  7159                              <2>  %assign con_break 0
  7160                              <2>  %elifidn %1,repeat
  7161                              <2>  %assign con_cont 0
  7162                              <2>  %assign con_break 0
  7163                              <2>  %elifidn %1,while
  7164                              <2>  %assign con_cont 0
  7165                              <2>  %assign con_break 0
  7166                              <2>  %endif
  7167                              <2> 
  7168                              <2>  %if __cndblock__ == 1
  7169                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  7170                              <2>  %endif
  7171                              <2> 
  7172                              <2>  %push %1
  7173                              <2>  %if con_return
  7174                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  7175                              <3> %define %1%2 %3%4
  7176                              <2>  %endif
  7177                              <2>  %if con_break
  7178                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  7179                              <3> %define %1%2 %3%4
  7180                              <2>  %endif
  7181                              <2>  %if con_cont
  7182                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  7183                              <3> %define %1%2 %3%4
  7184                              <2>  %endif
  7185                              <2> 
  7186                              <2>  %ifidn %1,andblock
  7187                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7188                              <2>  %elifidn %1,orblock
  7189                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7190                              <2>  %endif
  7191                              <1> 
  7192                              <1>  %if %0 > 0
  7193 00000829 7604                <1>  j%-1 %$ifnot
  7194                              <1>  %endif
  7195                              <1>  %assign %$elif_level 0
  7196 0000082B B739                    			mov bh,57
  7197                                  %ifdef DEBUG
  7198                                  			debug_print "  end of command, wait for BSY=0\n"
  7199                                  %endif
  7200                                  
  7201                                  			goto .skip_out
  7202                              <1> %if %0 > 1
  7203                              <1>  %ifidn %2,if
  7204                              <1>  %rotate 1
  7205                              <1>  %rep %0 - 3
  7206                              <1>  %2
  7207                              <1>  %rotate 1
  7208                              <1>  %endrep
  7209                              <1>  %rotate 1
  7210                              <1>  j%+1 %2
  7211                              <1>  %else
  7212                              <1>  %error "expect `if' after `continue'"
  7213                              <1>  %endif
  7214                              <1> %else
  7215 0000082D EB15                <1>  jmp %1
  7216                              <1> %endif
  7217                                  		endif
  7218                              <1>  %assign elselevel 0
  7219                              <1>  %ifctx if
  7220                              <1>  %$ifnot:
  7221                              <1>  con_pop
  7222                              <2>  %pop
  7223                              <2>  %assign __level__ __level__ - 1
  7224                              <1>  %elifctx else
  7225                              <1>  %assign elselevel %$elif_level
  7226                              <1>  %$ifend:
  7227                              <1>  con_pop
  7228                              <1>  %elifctx elif
  7229                              <1>  %assign elselevel %$elif_level
  7230                              <1>  %$ifnot:
  7231                              <1>  con_pop
  7232                              <1>  %else
  7233                              <1>  %error "expected `if' or `else' before `endif'"
  7234                              <1>  %endif
  7235                              <1>  %rep elselevel
  7236                              <1>  %$ifend:
  7237                              <1>  con_pop
  7238                              <1>  %endrep
  7239                                  	endif
  7240                              <1>  %assign elselevel 0
  7241                              <1>  %ifctx if
  7242                              <1>  %$ifnot:
  7243                              <1>  con_pop
  7244                              <2>  %pop
  7245                              <2>  %assign __level__ __level__ - 1
  7246                              <1>  %elifctx else
  7247                              <1>  %assign elselevel %$elif_level
  7248                              <1>  %$ifend:
  7249                              <1>  con_pop
  7250                              <1>  %elifctx elif
  7251                              <1>  %assign elselevel %$elif_level
  7252                              <1>  %$ifnot:
  7253                              <1>  con_pop
  7254                              <1>  %else
  7255                              <1>  %error "expected `if' or `else' before `endif'"
  7256                              <1>  %endif
  7257                              <1>  %rep elselevel
  7258                              <1>  %$ifend:
  7259                              <1>  con_pop
  7260                              <1>  %endrep
  7261                                  	
  7262                                  
  7263                                  	inbyte CB_STAT, ; [.status]
  7264 0000082F 8B16[9700]          <1>  mov dx,[reg_addr+%1*2]
  7265 00000833 EC                  <1>  in al,dx
  7266                              <1>  %if %0 > 1
  7267                              <1>  mov %2,al
  7268                              <1>  %endif
  7269                                  	if {test al,CB_STAT_BSY|CB_STAT_DRQ|CB_STAT_ERR},nz 
  7270                              <1>  %rep %0 -1
  7271                              <1>  %1
  7272                              <1>  %rotate 1
  7273                              <1>  %endrep
  7274 00000834 A889                <2>  %1
  7275                              <2>  %rotate 1
  7276                              <1> 
  7277                              <1>  con_push if
  7278                              <2>  %assign __lastlevel__ __level__
  7279                              <2>  %assign __level__ __level__ + 1
  7280                              <2>  %if __return__ > 0
  7281                              <2>  %assign con_return 1
  7282                              <2>  %else
  7283                              <2>  %assign con_return 0
  7284                              <2>  %endif
  7285                              <2> 
  7286                              <2>  %if __cont__ > 0
  7287                              <2>  %assign con_cont 1
  7288                              <2>  %else
  7289                              <2>  %assign con_cont 0
  7290                              <2>  %endif
  7291                              <2>  %if __break__ > 0
  7292                              <2>  %assign con_break 1
  7293                              <2>  %else
  7294                              <2>  %assign con_break 0
  7295                              <2>  %endif
  7296                              <2> 
  7297                              <2>  %ifidn %1,proc
  7298                              <2>  %assign con_return 0
  7299                              <2>  %elifidn %1,forcx
  7300                              <2>  %assign con_break 0
  7301                              <2>  %elifidn %1,repeat
  7302                              <2>  %assign con_cont 0
  7303                              <2>  %assign con_break 0
  7304                              <2>  %elifidn %1,while
  7305                              <2>  %assign con_cont 0
  7306                              <2>  %assign con_break 0
  7307                              <2>  %endif
  7308                              <2> 
  7309                              <2>  %if __cndblock__ == 1
  7310                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  7311                              <2>  %endif
  7312                              <2> 
  7313                              <2>  %push %1
  7314                              <2>  %if con_return
  7315                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  7316                              <3> %define %1%2 %3%4
  7317                              <2>  %endif
  7318                              <2>  %if con_break
  7319                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  7320                              <3> %define %1%2 %3%4
  7321                              <2>  %endif
  7322                              <2>  %if con_cont
  7323                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  7324                              <3> %define %1%2 %3%4
  7325                              <2>  %endif
  7326                              <2> 
  7327                              <2>  %ifidn %1,andblock
  7328                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7329                              <2>  %elifidn %1,orblock
  7330                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7331                              <2>  %endif
  7332                              <1> 
  7333                              <1>  %if %0 > 0
  7334 00000836 7404                <1>  j%-1 %$ifnot
  7335                              <1>  %endif
  7336                              <1>  %assign %$elif_level 0
  7337 00000838 B73A                    		mov bh,58
  7338                                  %ifdef DEBUG
  7339                                  		debug_print "Error: final check for stat al\n"
  7340                                  %endif
  7341                                  		goto .skip_out
  7342                              <1> %if %0 > 1
  7343                              <1>  %ifidn %2,if
  7344                              <1>  %rotate 1
  7345                              <1>  %rep %0 - 3
  7346                              <1>  %2
  7347                              <1>  %rotate 1
  7348                              <1>  %endrep
  7349                              <1>  %rotate 1
  7350                              <1>  j%+1 %2
  7351                              <1>  %else
  7352                              <1>  %error "expect `if' after `continue'"
  7353                              <1>  %endif
  7354                              <1> %else
  7355 0000083A EB08                <1>  jmp %1
  7356                              <1> %endif
  7357                                  	endif
  7358                              <1>  %assign elselevel 0
  7359                              <1>  %ifctx if
  7360                              <1>  %$ifnot:
  7361                              <1>  con_pop
  7362                              <2>  %pop
  7363                              <2>  %assign __level__ __level__ - 1
  7364                              <1>  %elifctx else
  7365                              <1>  %assign elselevel %$elif_level
  7366                              <1>  %$ifend:
  7367                              <1>  con_pop
  7368                              <1>  %elifctx elif
  7369                              <1>  %assign elselevel %$elif_level
  7370                              <1>  %$ifnot:
  7371                              <1>  con_pop
  7372                              <1>  %else
  7373                              <1>  %error "expected `if' or `else' before `endif'"
  7374                              <1>  %endif
  7375                              <1>  %rep elselevel
  7376                              <1>  %$ifend:
  7377                              <1>  con_pop
  7378                              <1>  %endrep
  7379                                  	
  7380                                  	inbyte CB_SC, [.reason]
  7381 0000083C 8B16[8D00]          <1>  mov dx,[reg_addr+%1*2]
  7382 00000840 EC                  <1>  in al,dx
  7383                              <1>  %if %0 > 1
  7384 00000841 8846FE              <1>  mov %2,al
  7385                              <1>  %endif
  7386                                  .skip_out:
  7387                                  %ifdef check_extra_fail
  7388 00000844 8A46FE                  	mov al,[.reason]
  7389                                  	if
  7390                              <1>  %rep %0 -1
  7391                              <1>  %1
  7392                              <1>  %rotate 1
  7393                              <1>  %endrep
  7394                              <1> 
  7395                              <1>  con_push if
  7396                              <2>  %assign __lastlevel__ __level__
  7397                              <2>  %assign __level__ __level__ + 1
  7398                              <2>  %if __return__ > 0
  7399                              <2>  %assign con_return 1
  7400                              <2>  %else
  7401                              <2>  %assign con_return 0
  7402                              <2>  %endif
  7403                              <2> 
  7404                              <2>  %if __cont__ > 0
  7405                              <2>  %assign con_cont 1
  7406                              <2>  %else
  7407                              <2>  %assign con_cont 0
  7408                              <2>  %endif
  7409                              <2>  %if __break__ > 0
  7410                              <2>  %assign con_break 1
  7411                              <2>  %else
  7412                              <2>  %assign con_break 0
  7413                              <2>  %endif
  7414                              <2> 
  7415                              <2>  %ifidn %1,proc
  7416                              <2>  %assign con_return 0
  7417                              <2>  %elifidn %1,forcx
  7418                              <2>  %assign con_break 0
  7419                              <2>  %elifidn %1,repeat
  7420                              <2>  %assign con_cont 0
  7421                              <2>  %assign con_break 0
  7422                              <2>  %elifidn %1,while
  7423                              <2>  %assign con_cont 0
  7424                              <2>  %assign con_break 0
  7425                              <2>  %endif
  7426                              <2> 
  7427                              <2>  %if __cndblock__ == 1
  7428                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  7429                              <2>  %endif
  7430                              <2> 
  7431                              <2>  %push %1
  7432                              <2>  %if con_return
  7433                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  7434                              <3> %define %1%2 %3%4
  7435                              <2>  %endif
  7436                              <2>  %if con_break
  7437                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  7438                              <3> %define %1%2 %3%4
  7439                              <2>  %endif
  7440                              <2>  %if con_cont
  7441                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  7442                              <3> %define %1%2 %3%4
  7443                              <2>  %endif
  7444                              <2> 
  7445                              <2>  %ifidn %1,andblock
  7446                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7447                              <2>  %elifidn %1,orblock
  7448                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7449                              <2>  %endif
  7450                              <1> 
  7451                              <1>  %if %0 > 0
  7452                              <1>  j%-1 %$ifnot
  7453                              <1>  %endif
  7454                              <1>  %assign %$elif_level 0
  7455                                  	orblock
  7456                              <1>  %assign __cndblock__ __cndblock__ + 1
  7457                              <1>  con_push orblock
  7458                              <2>  %assign __lastlevel__ __level__
  7459                              <2>  %assign __level__ __level__ + 1
  7460                              <2>  %if __return__ > 0
  7461                              <2>  %assign con_return 1
  7462                              <2>  %else
  7463                              <2>  %assign con_return 0
  7464                              <2>  %endif
  7465                              <2> 
  7466                              <2>  %if __cont__ > 0
  7467                              <2>  %assign con_cont 1
  7468                              <2>  %else
  7469                              <2>  %assign con_cont 0
  7470                              <2>  %endif
  7471                              <2>  %if __break__ > 0
  7472                              <2>  %assign con_break 1
  7473                              <2>  %else
  7474                              <2>  %assign con_break 0
  7475                              <2>  %endif
  7476                              <2> 
  7477                              <2>  %ifidn %1,proc
  7478                              <2>  %assign con_return 0
  7479                              <2>  %elifidn %1,forcx
  7480                              <2>  %assign con_break 0
  7481                              <2>  %elifidn %1,repeat
  7482                              <2>  %assign con_cont 0
  7483                              <2>  %assign con_break 0
  7484                              <2>  %elifidn %1,while
  7485                              <2>  %assign con_cont 0
  7486                              <2>  %assign con_break 0
  7487                              <2>  %endif
  7488                              <2> 
  7489                              <2>  %if __cndblock__ == 1
  7490                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  7491                              <3> %define %1%2 %3%4
  7492                              <2>  %endif
  7493                              <2> 
  7494                              <2>  %push %1
  7495                              <2>  %if con_return
  7496                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  7497                              <3> %define %1%2 %3%4
  7498                              <2>  %endif
  7499                              <2>  %if con_break
  7500                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  7501                              <3> %define %1%2 %3%4
  7502                              <2>  %endif
  7503                              <2>  %if con_cont
  7504                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  7505                              <3> %define %1%2 %3%4
  7506                              <2>  %endif
  7507                              <2> 
  7508                              <2>  %ifidn %1,andblock
  7509                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7510                              <2>  %elifidn %1,orblock
  7511                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7512                              <3> %define %1%2 %3%4
  7513                              <2>  %endif
  7514                                  		condiction {test al,CB_SC_P_TAG|CB_SC_P_REL},nz
  7515                              <1>  %rep %0 -1
  7516                              <1>  %1
  7517                              <1>  %rotate 1
  7518                              <1>  %endrep
  7519 00000847 A8FC                <2>  %1
  7520                              <2>  %rotate 1
  7521                              <1>  %ifctx andblock
  7522                              <1>  cat_jnc %1,%$ifnot,__level__
  7523                              <1>  %elifctx orblock
  7524 00000849 7508                <1>  j%+1 %$iftrue
  7525                              <1>  %else
  7526                              <1>  %error "not in the andblock or orblock"
  7527                              <1>  %endif
  7528                                  		condiction {test al,CB_SC_P_IO },z
  7529                              <1>  %rep %0 -1
  7530                              <1>  %1
  7531                              <1>  %rotate 1
  7532                              <1>  %endrep
  7533 0000084B A802                <2>  %1
  7534                              <2>  %rotate 1
  7535                              <1>  %ifctx andblock
  7536                              <1>  cat_jnc %1,%$ifnot,__level__
  7537                              <1>  %elifctx orblock
  7538 0000084D 7404                <1>  j%+1 %$iftrue
  7539                              <1>  %else
  7540                              <1>  %error "not in the andblock or orblock"
  7541                              <1>  %endif
  7542                                  		condiction {test al,CB_SC_P_CD},z
  7543                              <1>  %rep %0 -1
  7544                              <1>  %1
  7545                              <1>  %rotate 1
  7546                              <1>  %endrep
  7547 0000084F A801                <2>  %1
  7548                              <2>  %rotate 1
  7549                              <1>  %ifctx andblock
  7550                              <1>  cat_jnc %1,%$ifnot,__level__
  7551                              <1>  %elifctx orblock
  7552 00000851 7400                <1>  j%+1 %$iftrue
  7553                              <1>  %else
  7554                              <1>  %error "not in the andblock or orblock"
  7555                              <1>  %endif
  7556                                  	endblock then
  7557                              <1>  %ifctx orblock
  7558                              <1> 
  7559                              <1>  %$iftrue:
  7560                              <1>  %elifctx andblock
  7561                              <1>  %else
  7562                              <1>  %error "not in andblock or orblock"
  7563                              <1>  %endif
  7564                              <1>  con_pop
  7565                              <2>  %pop
  7566                              <2>  %assign __level__ __level__ - 1
  7567                              <1>  %assign __cndblock__ __cndblock__ - 1
  7568 00000853 81CB0001                		or bx, FAILBIT8
  7569                                  %ifdef DEBUG
  7570                                  		debug_print "FAIL:final check for protocol failures C/nD=1 IO=1\n"
  7571                                  %endif
  7572                                  	endif
  7573                              <1>  %assign elselevel 0
  7574                              <1>  %ifctx if
  7575                              <1>  %$ifnot:
  7576                              <1>  con_pop
  7577                              <2>  %pop
  7578                              <2>  %assign __level__ __level__ - 1
  7579                              <1>  %elifctx else
  7580                              <1>  %assign elselevel %$elif_level
  7581                              <1>  %$ifend:
  7582                              <1>  con_pop
  7583                              <1>  %elifctx elif
  7584                              <1>  %assign elselevel %$elif_level
  7585                              <1>  %$ifnot:
  7586                              <1>  con_pop
  7587                              <1>  %else
  7588                              <1>  %error "expected `if' or `else' before `endif'"
  7589                              <1>  %endif
  7590                              <1>  %rep elselevel
  7591                              <1>  %$ifend:
  7592                              <1>  con_pop
  7593                              <1>  %endrep
  7594                                  %endif	
  7595                                  ;	outbyte CB_DC,cmd_DC
  7596                                  
  7597                                  %ifdef DEBUG
  7598                                  	debug_print " end of command, ec:failbit=%x, %d bytes data\n",bx,cx
  7599                                  %endif
  7600                                  
  7601 00000857 895EF9                  	mov [__AX],bx
  7602 0000085A 894EF7                  	mov [__CX],cx
  7603                                  endp
  7604                              <1> %ifnctx proc
  7605                              <1>  %error "expected `proc' before `endp'"
  7606                              <1> %endif
  7607                              <1>  cat_lable %$return,__level__
  7608                              <2> %1%2:
  7609                              <1>  %if __save_all__ ==1
  7610 0000085D 61                  <1>  popa
  7611                              <1>  %elif __save_all__ == 2
  7612                              <1>  popad
  7613                              <1>  %elif __save_args__ > 0
  7614                              <1>  %assign i 1
  7615                              <1>  %rep __save_args__
  7616                              <1>  linecat pop, %$save_argv,i
  7617                              <1>  %assign i i+1
  7618                              <1>  %endrep
  7619                              <1>  %endif
  7620                              <1>  %if __have_frame__ > 0
  7621 0000085E C9                  <1>  leave
  7622                              <1>  %endif
  7623                              <1> 
  7624                              <1>  %assign i 0
  7625                              <1>  %rep %$proc_args
  7626                              <1> 
  7627                              <1>  %assign i i+1
  7628                              <1>  %endrep
  7629                              <2> 
  7630                              <2>  %assign i i+1
  7631                              <2> 
  7632                              <2>  %assign i i+1
  7633                              <2> 
  7634                              <2>  %assign i i+1
  7635                              <2> 
  7636                              <2>  %assign i i+1
  7637                              <1> 
  7638                              <1>  %assign i 0
  7639                              <1>  %rep %$local_args
  7640                              <1> 
  7641                              <1>  %assign i i+1
  7642                              <1>  %endrep
  7643                              <2> 
  7644                              <2>  %assign i i+1
  7645                              <2> 
  7646                              <2>  %assign i i+1
  7647                              <2> 
  7648                              <2>  %assign i i+1
  7649 0000085F C3                  <1>  ret
  7650                              <1>  con_pop
  7651                              <2>  %pop
  7652                              <2>  %assign __level__ __level__ - 1
  7653                              <1>  %assign __return__ __return__ - 1
  7654                                  
  7655                                  proc	reg_setup_base_addr
  7656                              <1> GLOBAL %1
  7657                              <1> %1:
  7658                              <1> con_push proc
  7659                              <2>  %assign __lastlevel__ __level__
  7660                              <2>  %assign __level__ __level__ + 1
  7661                              <2>  %if __return__ > 0
  7662                              <2>  %assign con_return 1
  7663                              <2>  %else
  7664                              <2>  %assign con_return 0
  7665                              <2>  %endif
  7666                              <2> 
  7667                              <2>  %if __cont__ > 0
  7668                              <2>  %assign con_cont 1
  7669                              <2>  %else
  7670                              <2>  %assign con_cont 0
  7671                              <2>  %endif
  7672                              <2>  %if __break__ > 0
  7673                              <2>  %assign con_break 1
  7674                              <2>  %else
  7675                              <2>  %assign con_break 0
  7676                              <2>  %endif
  7677                              <2> 
  7678                              <2>  %ifidn %1,proc
  7679                              <2>  %assign con_return 0
  7680                              <2>  %elifidn %1,forcx
  7681                              <2>  %assign con_break 0
  7682                              <2>  %elifidn %1,repeat
  7683                              <2>  %assign con_cont 0
  7684                              <2>  %assign con_break 0
  7685                              <2>  %elifidn %1,while
  7686                              <2>  %assign con_cont 0
  7687                              <2>  %assign con_break 0
  7688                              <2>  %endif
  7689                              <2> 
  7690                              <2>  %if __cndblock__ == 1
  7691                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  7692                              <2>  %endif
  7693                              <2> 
  7694                              <2>  %push %1
  7695                              <2>  %if con_return
  7696                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  7697                              <2>  %endif
  7698                              <2>  %if con_break
  7699                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  7700                              <3> %define %1%2 %3%4
  7701                              <2>  %endif
  7702                              <2>  %if con_cont
  7703                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  7704                              <3> %define %1%2 %3%4
  7705                              <2>  %endif
  7706                              <2> 
  7707                              <2>  %ifidn %1,andblock
  7708                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7709                              <2>  %elifidn %1,orblock
  7710                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7711                              <2>  %endif
  7712                              <1> %assign __return__ __return__ + 1
  7713                              <1> %assign __have_frame__ 0
  7714                              <1> %assign %$have_local 0
  7715                              <1> %assign %$have_save 0
  7716                              <1> %assign __save_all__ 0
  7717                              <1> %assign %$local_args 0
  7718                              <1> %assign %$proc_args 0
  7719                              <1> %assign __save_args__ 0
  7720                              <1> %if %0 > 1
  7721                              <1>  %assign args %0 - 1
  7722                              <1>  %assign %$bp_off 4
  7723                              <1>  %assign i 0
  7724                              <1>  %rotate 1
  7725                              <1>  %ifidn %1,withlocal
  7726                              <1>  %assign %$have_local 1
  7727                              <1>  %assign args args -1
  7728                              <1>  %rotate 1
  7729                              <1>  %endif
  7730                              <1>  %assign %$proc_args args
  7731                              <1>  %rep args
  7732                              <1> 
  7733                              <1>  %%inputarg__%1 EQU %$bp_off
  7734                              <1>  %undef .%1
  7735                              <1>  %define .%1 %%inputarg__%1+bp
  7736                              <1>  cat_define %$proc_argv ,i,%1
  7737                              <1>  %assign %$bp_off %$bp_off + 2
  7738                              <1>  %assign i i+1
  7739                              <1>  %rotate 1
  7740                              <1>  %endrep
  7741                              <1>  %if %$have_local==0
  7742                              <1>  enter 0,0
  7743                              <1>  %assign __have_frame__ 1
  7744                              <1>  %endif
  7745                              <1> %endif
  7746                                  ; input:  bx = base addr pointer
  7747                                  	save all
  7748                              <1> %ifctx proc
  7749                              <1>  %if %$have_local == 1
  7750                              <1>  %error "`save' must after `local'"
  7751                              <1>  %endif
  7752                              <1> 
  7753                              <1>  %ifidn all,%1
  7754                              <1>  %assign __save_all__ 1
  7755                              <1>  %if %0 > 1
  7756                              <1>  %ifidn frame,%2
  7757                              <1>  %if __have_frame__ == 0
  7758                              <1>  enter 0,0
  7759                              <1>  %assign __have_frame__ 1
  7760                              <1>  %assign local_off 0
  7761                              <1>  %endif
  7762                              <1>  %endif
  7763                              <1>  %endif
  7764 00000860 60                  <1>  pusha
  7765                              <1>  %if __have_frame__ == 1
  7766                              <1>  %undef __AX
  7767                              <1>  %undef __BX
  7768                              <1>  %undef __CX
  7769                              <1>  %undef __DX
  7770                              <1>  %undef __SI
  7771                              <1>  %undef __DI
  7772                              <1>  %idefine __AX bp-local_off - 2
  7773                              <1>  %idefine __CX bp-local_off - 4
  7774                              <1>  %idefine __DX bp-local_off - 6
  7775                              <1>  %idefine __BX bp-local_off - 8
  7776                              <1> 
  7777                              <1> 
  7778                              <1>  %idefine __SI bp-local_off - 14
  7779                              <1>  %idefine __DI bp-local_off - 16
  7780                              <1>  %endif
  7781                              <1>  %elifidn alld,%1
  7782                              <1>  %assign __save_all__ 2
  7783                              <1>  %if %0 > 1
  7784                              <1>  %ifidn frame,%2
  7785                              <1>  %if __have_frame__ == 0
  7786                              <1>  enter 0,0
  7787                              <1>  %assign __have_frame__ 1
  7788                              <1>  %assign local_off 0
  7789                              <1>  %endif
  7790                              <1>  %endif
  7791                              <1>  %endif
  7792                              <1>  pushad
  7793                              <1>  %if __have_frame__ == 1
  7794                              <1>  %undef __EAX
  7795                              <1>  %undef __EBX
  7796                              <1>  %undef __ECX
  7797                              <1>  %undef __EDX
  7798                              <1>  %undef __ESI
  7799                              <1>  %undef __EDI
  7800                              <1>  %idefine __EAX bp-local_off - 4
  7801                              <1>  %idefine __ECX bp-local_off - 8
  7802                              <1>  %idefine __EDX bp-local_off - 12
  7803                              <1>  %idefine __EBX bp-local_off - 16
  7804                              <1> 
  7805                              <1> 
  7806                              <1>  %idefine __ESI bp-local_off - 18
  7807                              <1>  %idefine __EDI bp-local_off - 32
  7808                              <1>  %endif
  7809                              <1> 
  7810                              <1>  %else
  7811                              <1>  %assign __save_args__ %0
  7812                              <1>  %assign __save_all__ 0
  7813                              <1>  %assign i %0
  7814                              <1>  %rep %0
  7815                              <1>  push %1
  7816                              <1>  cat_define %$save_argv ,i,%1
  7817                              <1>  %rotate 1
  7818                              <1>  %assign i i - 1
  7819                              <1>  %endrep
  7820                              <1>  %endif
  7821                              <1> %else
  7822                              <1>  %error "`save' must after `proc'"
  7823                              <1> %endif
  7824 00000861 FC                      	cld
  7825 00000862 BF[8900]                	mov di,reg_addr
  7826 00000865 8B07                    	mov ax, [bx]
  7827                                  	forcx 8
  7828                              <1> con_push forcx
  7829                              <2>  %assign __lastlevel__ __level__
  7830                              <2>  %assign __level__ __level__ + 1
  7831                              <2>  %if __return__ > 0
  7832                              <2>  %assign con_return 1
  7833                              <2>  %else
  7834                              <2>  %assign con_return 0
  7835                              <2>  %endif
  7836                              <2> 
  7837                              <2>  %if __cont__ > 0
  7838                              <2>  %assign con_cont 1
  7839                              <2>  %else
  7840                              <2>  %assign con_cont 0
  7841                              <2>  %endif
  7842                              <2>  %if __break__ > 0
  7843                              <2>  %assign con_break 1
  7844                              <2>  %else
  7845                              <2>  %assign con_break 0
  7846                              <2>  %endif
  7847                              <2> 
  7848                              <2>  %ifidn %1,proc
  7849                              <2>  %assign con_return 0
  7850                              <2>  %elifidn %1,forcx
  7851                              <2>  %assign con_break 0
  7852                              <2>  %elifidn %1,repeat
  7853                              <2>  %assign con_cont 0
  7854                              <2>  %assign con_break 0
  7855                              <2>  %elifidn %1,while
  7856                              <2>  %assign con_cont 0
  7857                              <2>  %assign con_break 0
  7858                              <2>  %endif
  7859                              <2> 
  7860                              <2>  %if __cndblock__ == 1
  7861                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  7862                              <2>  %endif
  7863                              <2> 
  7864                              <2>  %push %1
  7865                              <2>  %if con_return
  7866                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  7867                              <3> %define %1%2 %3%4
  7868                              <2>  %endif
  7869                              <2>  %if con_break
  7870                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  7871                              <2>  %endif
  7872                              <2>  %if con_cont
  7873                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  7874                              <3> %define %1%2 %3%4
  7875                              <2>  %endif
  7876                              <2> 
  7877                              <2>  %ifidn %1,andblock
  7878                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7879                              <2>  %elifidn %1,orblock
  7880                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7881                              <2>  %endif
  7882                              <1> %assign __break__ __break__ + 1
  7883                              <1> %if %0 > 0
  7884 00000867 B90800              <1>  mov cx, %1
  7885                              <1> %endif
  7886                              <1> %$begin:
  7887 0000086A AB                      		stosw
  7888 0000086B 40                      		inc ax
  7889                                  	endforcx
  7890                              <1>  %ifnctx forcx
  7891                              <1>  %error "expected `forcx' before `endfor'"
  7892                              <1>  %endif
  7893                              <1>  %if %0 > 0
  7894                              <1>  %ifidn %1,while
  7895                              <1>  %rotate 1
  7896                              <1>  cat_lable %$cont,__level__
  7897                              <1>  %rep %0 - 2
  7898                              <1>  %1
  7899                              <1>  %rotate 1
  7900                              <1>  %endrep
  7901                              <1>  %else
  7902                              <1>  %error "expected `while' after `endfor'"
  7903                              <1>  %endif
  7904                              <1>  loop%+1 %$begin
  7905                              <1>  %else
  7906 0000086C E2FC                <1>  loop %$begin
  7907                              <1>  %endif
  7908                              <1>  %$end:
  7909                              <1>  cat_lable %$break,__level__
  7910                              <2> %1%2:
  7911                              <1> 
  7912                              <1>  con_pop
  7913                              <2>  %pop
  7914                              <2>  %assign __level__ __level__ - 1
  7915                              <1>  %assign __break__ __break__ - 1
  7916 0000086E 8B4702                  	mov ax, [bx+2]
  7917 00000871 AB                      	stosw
  7918 00000872 40                      	inc ax
  7919 00000873 AB                      	stosw
  7920                                  endp
  7921                              <1> %ifnctx proc
  7922                              <1>  %error "expected `proc' before `endp'"
  7923                              <1> %endif
  7924                              <1>  cat_lable %$return,__level__
  7925                              <2> %1%2:
  7926                              <1>  %if __save_all__ ==1
  7927 00000874 61                  <1>  popa
  7928                              <1>  %elif __save_all__ == 2
  7929                              <1>  popad
  7930                              <1>  %elif __save_args__ > 0
  7931                              <1>  %assign i 1
  7932                              <1>  %rep __save_args__
  7933                              <1>  linecat pop, %$save_argv,i
  7934                              <1>  %assign i i+1
  7935                              <1>  %endrep
  7936                              <1>  %endif
  7937                              <1>  %if __have_frame__ > 0
  7938                              <1>  leave
  7939                              <1>  %endif
  7940                              <1> 
  7941                              <1>  %assign i 0
  7942                              <1>  %rep %$proc_args
  7943                              <1> 
  7944                              <1>  %assign i i+1
  7945                              <1>  %endrep
  7946                              <1> 
  7947                              <1>  %assign i 0
  7948                              <1>  %rep %$local_args
  7949                              <1> 
  7950                              <1>  %assign i i+1
  7951                              <1>  %endrep
  7952 00000875 C3                  <1>  ret
  7953                              <1>  con_pop
  7954                              <2>  %pop
  7955                              <2>  %assign __level__ __level__ - 1
  7956                              <1>  %assign __return__ __return__ - 1
  7957                                  
  7958                                  proc	reg_probe_dev_exist
  7959                              <1> GLOBAL %1
  7960                              <1> %1:
  7961                              <1> con_push proc
  7962                              <2>  %assign __lastlevel__ __level__
  7963                              <2>  %assign __level__ __level__ + 1
  7964                              <2>  %if __return__ > 0
  7965                              <2>  %assign con_return 1
  7966                              <2>  %else
  7967                              <2>  %assign con_return 0
  7968                              <2>  %endif
  7969                              <2> 
  7970                              <2>  %if __cont__ > 0
  7971                              <2>  %assign con_cont 1
  7972                              <2>  %else
  7973                              <2>  %assign con_cont 0
  7974                              <2>  %endif
  7975                              <2>  %if __break__ > 0
  7976                              <2>  %assign con_break 1
  7977                              <2>  %else
  7978                              <2>  %assign con_break 0
  7979                              <2>  %endif
  7980                              <2> 
  7981                              <2>  %ifidn %1,proc
  7982                              <2>  %assign con_return 0
  7983                              <2>  %elifidn %1,forcx
  7984                              <2>  %assign con_break 0
  7985                              <2>  %elifidn %1,repeat
  7986                              <2>  %assign con_cont 0
  7987                              <2>  %assign con_break 0
  7988                              <2>  %elifidn %1,while
  7989                              <2>  %assign con_cont 0
  7990                              <2>  %assign con_break 0
  7991                              <2>  %endif
  7992                              <2> 
  7993                              <2>  %if __cndblock__ == 1
  7994                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  7995                              <2>  %endif
  7996                              <2> 
  7997                              <2>  %push %1
  7998                              <2>  %if con_return
  7999                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  8000                              <2>  %endif
  8001                              <2>  %if con_break
  8002                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  8003                              <3> %define %1%2 %3%4
  8004                              <2>  %endif
  8005                              <2>  %if con_cont
  8006                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  8007                              <3> %define %1%2 %3%4
  8008                              <2>  %endif
  8009                              <2> 
  8010                              <2>  %ifidn %1,andblock
  8011                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8012                              <2>  %elifidn %1,orblock
  8013                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8014                              <2>  %endif
  8015                              <1> %assign __return__ __return__ + 1
  8016                              <1> %assign __have_frame__ 0
  8017                              <1> %assign %$have_local 0
  8018                              <1> %assign %$have_save 0
  8019                              <1> %assign __save_all__ 0
  8020                              <1> %assign %$local_args 0
  8021                              <1> %assign %$proc_args 0
  8022                              <1> %assign __save_args__ 0
  8023                              <1> %if %0 > 1
  8024                              <1>  %assign args %0 - 1
  8025                              <1>  %assign %$bp_off 4
  8026                              <1>  %assign i 0
  8027                              <1>  %rotate 1
  8028                              <1>  %ifidn %1,withlocal
  8029                              <1>  %assign %$have_local 1
  8030                              <1>  %assign args args -1
  8031                              <1>  %rotate 1
  8032                              <1>  %endif
  8033                              <1>  %assign %$proc_args args
  8034                              <1>  %rep args
  8035                              <1> 
  8036                              <1>  %%inputarg__%1 EQU %$bp_off
  8037                              <1>  %undef .%1
  8038                              <1>  %define .%1 %%inputarg__%1+bp
  8039                              <1>  cat_define %$proc_argv ,i,%1
  8040                              <1>  %assign %$bp_off %$bp_off + 2
  8041                              <1>  %assign i i+1
  8042                              <1>  %rotate 1
  8043                              <1>  %endrep
  8044                              <1>  %if %$have_local==0
  8045                              <1>  enter 0,0
  8046                              <1>  %assign __have_frame__ 1
  8047                              <1>  %endif
  8048                              <1> %endif
  8049                                  ; input ax=dev
  8050                                  ; return ax = 1: exist
  8051 00000876 E8B8FD                  	call __reg_select_dev
  8052                                  	outbytes CB_SC,0x55,CB_SN,0xaa,CB_SC,0xaa,CB_SN,0x55,CB_SC,0x55
  8053                              <1> %assign LAST_AL 0x1000
  8054                              <1> %rep %0 / 2
  8055                              <1>  %ifnum %2
  8056                              <1>  %if LAST_AL != %2
  8057                              <1>  outbyte %1, %2
  8058                              <1>  %assign LAST_AL %2
  8059                              <1>  %else
  8060                              <1>  outbyte %1
  8061                              <1>  %endif
  8062                              <1>  %else
  8063                              <1>  outbyte %1, %2
  8064                              <1>  %endif
  8065                              <1>  %rotate 2
  8066                              <1> %endrep
  8067                              <2>  %ifnum %2
  8068                              <2>  %if LAST_AL != %2
  8069                              <2>  outbyte %1, %2
  8070                              <3> %if %0>1
  8071 00000879 B055                <3>  mov al,%2
  8072                              <3> %endif
  8073                              <3> %if %0>0
  8074 0000087B 8B16[8D00]          <3>  mov dx,[reg_addr+%1*2]
  8075                              <3> %endif
  8076 0000087F EE                  <3>  out dx,al
  8077                              <2>  %assign LAST_AL %2
  8078                              <2>  %else
  8079                              <2>  outbyte %1
  8080                              <2>  %endif
  8081                              <2>  %else
  8082                              <2>  outbyte %1, %2
  8083                              <2>  %endif
  8084                              <2>  %rotate 2
  8085                              <2>  %ifnum %2
  8086                              <2>  %if LAST_AL != %2
  8087                              <2>  outbyte %1, %2
  8088                              <3> %if %0>1
  8089 00000880 B0AA                <3>  mov al,%2
  8090                              <3> %endif
  8091                              <3> %if %0>0
  8092 00000882 8B16[8F00]          <3>  mov dx,[reg_addr+%1*2]
  8093                              <3> %endif
  8094 00000886 EE                  <3>  out dx,al
  8095                              <2>  %assign LAST_AL %2
  8096                              <2>  %else
  8097                              <2>  outbyte %1
  8098                              <2>  %endif
  8099                              <2>  %else
  8100                              <2>  outbyte %1, %2
  8101                              <2>  %endif
  8102                              <2>  %rotate 2
  8103                              <2>  %ifnum %2
  8104                              <2>  %if LAST_AL != %2
  8105                              <2>  outbyte %1, %2
  8106                              <2>  %assign LAST_AL %2
  8107                              <2>  %else
  8108                              <2>  outbyte %1
  8109                              <3> %if %0>1
  8110                              <3>  mov al,%2
  8111                              <3> %endif
  8112                              <3> %if %0>0
  8113 00000887 8B16[8D00]          <3>  mov dx,[reg_addr+%1*2]
  8114                              <3> %endif
  8115 0000088B EE                  <3>  out dx,al
  8116                              <2>  %endif
  8117                              <2>  %else
  8118                              <2>  outbyte %1, %2
  8119                              <2>  %endif
  8120                              <2>  %rotate 2
  8121                              <2>  %ifnum %2
  8122                              <2>  %if LAST_AL != %2
  8123                              <2>  outbyte %1, %2
  8124                              <3> %if %0>1
  8125 0000088C B055                <3>  mov al,%2
  8126                              <3> %endif
  8127                              <3> %if %0>0
  8128 0000088E 8B16[8F00]          <3>  mov dx,[reg_addr+%1*2]
  8129                              <3> %endif
  8130 00000892 EE                  <3>  out dx,al
  8131                              <2>  %assign LAST_AL %2
  8132                              <2>  %else
  8133                              <2>  outbyte %1
  8134                              <2>  %endif
  8135                              <2>  %else
  8136                              <2>  outbyte %1, %2
  8137                              <2>  %endif
  8138                              <2>  %rotate 2
  8139                              <2>  %ifnum %2
  8140                              <2>  %if LAST_AL != %2
  8141                              <2>  outbyte %1, %2
  8142                              <2>  %assign LAST_AL %2
  8143                              <2>  %else
  8144                              <2>  outbyte %1
  8145                              <3> %if %0>1
  8146                              <3>  mov al,%2
  8147                              <3> %endif
  8148                              <3> %if %0>0
  8149 00000893 8B16[8D00]          <3>  mov dx,[reg_addr+%1*2]
  8150                              <3> %endif
  8151 00000897 EE                  <3>  out dx,al
  8152                              <2>  %endif
  8153                              <2>  %else
  8154                              <2>  outbyte %1, %2
  8155                              <2>  %endif
  8156                              <2>  %rotate 2
  8157                                  	outbyte CB_SN ,0xaa 
  8158                              <1> %if %0>1
  8159 00000898 B0AA                <1>  mov al,%2
  8160                              <1> %endif
  8161                              <1> %if %0>0
  8162 0000089A 8B16[8F00]          <1>  mov dx,[reg_addr+%1*2]
  8163                              <1> %endif
  8164 0000089E EE                  <1>  out dx,al
  8165                                  	inbyte CB_SC,ah
  8166 0000089F 8B16[8D00]          <1>  mov dx,[reg_addr+%1*2]
  8167 000008A3 EC                  <1>  in al,dx
  8168                              <1>  %if %0 > 1
  8169 000008A4 88C4                <1>  mov %2,al
  8170                              <1>  %endif
  8171                                  	inbyte CB_SN
  8172 000008A6 8B16[8F00]          <1>  mov dx,[reg_addr+%1*2]
  8173 000008AA EC                  <1>  in al,dx
  8174                              <1>  %if %0 > 1
  8175                              <1>  mov %2,al
  8176                              <1>  %endif
  8177 000008AB 3DAA55                  	cmp ax, 0x55aa
  8178 000008AE 0F94C0                  	sete al
  8179                                  endp
  8180                              <1> %ifnctx proc
  8181                              <1>  %error "expected `proc' before `endp'"
  8182                              <1> %endif
  8183                              <1>  cat_lable %$return,__level__
  8184                              <2> %1%2:
  8185                              <1>  %if __save_all__ ==1
  8186                              <1>  popa
  8187                              <1>  %elif __save_all__ == 2
  8188                              <1>  popad
  8189                              <1>  %elif __save_args__ > 0
  8190                              <1>  %assign i 1
  8191                              <1>  %rep __save_args__
  8192                              <1>  linecat pop, %$save_argv,i
  8193                              <1>  %assign i i+1
  8194                              <1>  %endrep
  8195                              <1>  %endif
  8196                              <1>  %if __have_frame__ > 0
  8197                              <1>  leave
  8198                              <1>  %endif
  8199                              <1> 
  8200                              <1>  %assign i 0
  8201                              <1>  %rep %$proc_args
  8202                              <1> 
  8203                              <1>  %assign i i+1
  8204                              <1>  %endrep
  8205                              <1> 
  8206                              <1>  %assign i 0
  8207                              <1>  %rep %$local_args
  8208                              <1> 
  8209                              <1>  %assign i i+1
  8210                              <1>  %endrep
  8211 000008B1 C3                  <1>  ret
  8212                              <1>  con_pop
  8213                              <2>  %pop
  8214                              <2>  %assign __level__ __level__ - 1
  8215                              <1>  %assign __return__ __return__ - 1
  8216                                  
  8217                                  proc	reg_probe_exist
  8218                              <1> GLOBAL %1
  8219                              <1> %1:
  8220                              <1> con_push proc
  8221                              <2>  %assign __lastlevel__ __level__
  8222                              <2>  %assign __level__ __level__ + 1
  8223                              <2>  %if __return__ > 0
  8224                              <2>  %assign con_return 1
  8225                              <2>  %else
  8226                              <2>  %assign con_return 0
  8227                              <2>  %endif
  8228                              <2> 
  8229                              <2>  %if __cont__ > 0
  8230                              <2>  %assign con_cont 1
  8231                              <2>  %else
  8232                              <2>  %assign con_cont 0
  8233                              <2>  %endif
  8234                              <2>  %if __break__ > 0
  8235                              <2>  %assign con_break 1
  8236                              <2>  %else
  8237                              <2>  %assign con_break 0
  8238                              <2>  %endif
  8239                              <2> 
  8240                              <2>  %ifidn %1,proc
  8241                              <2>  %assign con_return 0
  8242                              <2>  %elifidn %1,forcx
  8243                              <2>  %assign con_break 0
  8244                              <2>  %elifidn %1,repeat
  8245                              <2>  %assign con_cont 0
  8246                              <2>  %assign con_break 0
  8247                              <2>  %elifidn %1,while
  8248                              <2>  %assign con_cont 0
  8249                              <2>  %assign con_break 0
  8250                              <2>  %endif
  8251                              <2> 
  8252                              <2>  %if __cndblock__ == 1
  8253                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  8254                              <2>  %endif
  8255                              <2> 
  8256                              <2>  %push %1
  8257                              <2>  %if con_return
  8258                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  8259                              <2>  %endif
  8260                              <2>  %if con_break
  8261                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  8262                              <3> %define %1%2 %3%4
  8263                              <2>  %endif
  8264                              <2>  %if con_cont
  8265                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  8266                              <3> %define %1%2 %3%4
  8267                              <2>  %endif
  8268                              <2> 
  8269                              <2>  %ifidn %1,andblock
  8270                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8271                              <2>  %elifidn %1,orblock
  8272                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8273                              <2>  %endif
  8274                              <1> %assign __return__ __return__ + 1
  8275                              <1> %assign __have_frame__ 0
  8276                              <1> %assign %$have_local 0
  8277                              <1> %assign %$have_save 0
  8278                              <1> %assign __save_all__ 0
  8279                              <1> %assign %$local_args 0
  8280                              <1> %assign %$proc_args 0
  8281                              <1> %assign __save_args__ 0
  8282                              <1> %if %0 > 1
  8283                              <1>  %assign args %0 - 1
  8284                              <1>  %assign %$bp_off 4
  8285                              <1>  %assign i 0
  8286                              <1>  %rotate 1
  8287                              <1>  %ifidn %1,withlocal
  8288                              <1>  %assign %$have_local 1
  8289                              <1>  %assign args args -1
  8290                              <1>  %rotate 1
  8291                              <1>  %endif
  8292                              <1>  %assign %$proc_args args
  8293                              <1>  %rep args
  8294                              <1> 
  8295                              <1>  %%inputarg__%1 EQU %$bp_off
  8296                              <1>  %undef .%1
  8297                              <1>  %define .%1 %%inputarg__%1+bp
  8298                              <1>  cat_define %$proc_argv ,i,%1
  8299                              <1>  %assign %$bp_off %$bp_off + 2
  8300                              <1>  %assign i i+1
  8301                              <1>  %rotate 1
  8302                              <1>  %endrep
  8303                              <1>  %if %$have_local==0
  8304                              <1>  enter 0,0
  8305                              <1>  %assign __have_frame__ 1
  8306                              <1>  %endif
  8307                              <1> %endif
  8308                                  ; new fixed
  8309                                  	outbyte CB_DC, cmd_DC
  8310                              <1> %if %0>1
  8311 000008B2 B008                <1>  mov al,%2
  8312                              <1> %endif
  8313                              <1> %if %0>0
  8314 000008B4 8B16[9900]          <1>  mov dx,[reg_addr+%1*2]
  8315                              <1> %endif
  8316 000008B8 EE                  <1>  out dx,al
  8317                                  
  8318                                  	mov_ax 0
  8319                              <1>  %if %1 == 0
  8320 000008B9 29C0                <1>  sub ax,ax
  8321                              <1>  %else
  8322                              <1>  mov ax,%1
  8323                              <1>  %endif
  8324 000008BB E8B8FF                  	call reg_probe_dev_exist
  8325 000008BE A2[0500]                	mov [reg_dev_info],al
  8326 000008C1 B80100                  	mov ax,1
  8327 000008C4 E8AFFF                  	call reg_probe_dev_exist
  8328 000008C7 A2[0600]                	mov [reg_dev_info+1],al
  8329                                  endp
  8330                              <1> %ifnctx proc
  8331                              <1>  %error "expected `proc' before `endp'"
  8332                              <1> %endif
  8333                              <1>  cat_lable %$return,__level__
  8334                              <2> %1%2:
  8335                              <1>  %if __save_all__ ==1
  8336                              <1>  popa
  8337                              <1>  %elif __save_all__ == 2
  8338                              <1>  popad
  8339                              <1>  %elif __save_args__ > 0
  8340                              <1>  %assign i 1
  8341                              <1>  %rep __save_args__
  8342                              <1>  linecat pop, %$save_argv,i
  8343                              <1>  %assign i i+1
  8344                              <1>  %endrep
  8345                              <1>  %endif
  8346                              <1>  %if __have_frame__ > 0
  8347                              <1>  leave
  8348                              <1>  %endif
  8349                              <1> 
  8350                              <1>  %assign i 0
  8351                              <1>  %rep %$proc_args
  8352                              <1> 
  8353                              <1>  %assign i i+1
  8354                              <1>  %endrep
  8355                              <1> 
  8356                              <1>  %assign i 0
  8357                              <1>  %rep %$local_args
  8358                              <1> 
  8359                              <1>  %assign i i+1
  8360                              <1>  %endrep
  8361 000008CA C3                  <1>  ret
  8362                              <1>  con_pop
  8363                              <2>  %pop
  8364                              <2>  %assign __level__ __level__ - 1
  8365                              <1>  %assign __return__ __return__ - 1
  8366                                  
  8367                                  proc	reg_check_dev_type
  8368                              <1> GLOBAL %1
  8369                              <1> %1:
  8370                              <1> con_push proc
  8371                              <2>  %assign __lastlevel__ __level__
  8372                              <2>  %assign __level__ __level__ + 1
  8373                              <2>  %if __return__ > 0
  8374                              <2>  %assign con_return 1
  8375                              <2>  %else
  8376                              <2>  %assign con_return 0
  8377                              <2>  %endif
  8378                              <2> 
  8379                              <2>  %if __cont__ > 0
  8380                              <2>  %assign con_cont 1
  8381                              <2>  %else
  8382                              <2>  %assign con_cont 0
  8383                              <2>  %endif
  8384                              <2>  %if __break__ > 0
  8385                              <2>  %assign con_break 1
  8386                              <2>  %else
  8387                              <2>  %assign con_break 0
  8388                              <2>  %endif
  8389                              <2> 
  8390                              <2>  %ifidn %1,proc
  8391                              <2>  %assign con_return 0
  8392                              <2>  %elifidn %1,forcx
  8393                              <2>  %assign con_break 0
  8394                              <2>  %elifidn %1,repeat
  8395                              <2>  %assign con_cont 0
  8396                              <2>  %assign con_break 0
  8397                              <2>  %elifidn %1,while
  8398                              <2>  %assign con_cont 0
  8399                              <2>  %assign con_break 0
  8400                              <2>  %endif
  8401                              <2> 
  8402                              <2>  %if __cndblock__ == 1
  8403                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  8404                              <2>  %endif
  8405                              <2> 
  8406                              <2>  %push %1
  8407                              <2>  %if con_return
  8408                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  8409                              <2>  %endif
  8410                              <2>  %if con_break
  8411                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  8412                              <3> %define %1%2 %3%4
  8413                              <2>  %endif
  8414                              <2>  %if con_cont
  8415                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  8416                              <3> %define %1%2 %3%4
  8417                              <2>  %endif
  8418                              <2> 
  8419                              <2>  %ifidn %1,andblock
  8420                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8421                              <2>  %elifidn %1,orblock
  8422                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8423                              <2>  %endif
  8424                              <1> %assign __return__ __return__ + 1
  8425                              <1> %assign __have_frame__ 0
  8426                              <1> %assign %$have_local 0
  8427                              <1> %assign %$have_save 0
  8428                              <1> %assign __save_all__ 0
  8429                              <1> %assign %$local_args 0
  8430                              <1> %assign %$proc_args 0
  8431                              <1> %assign __save_args__ 0
  8432                              <1> %if %0 > 1
  8433                              <1>  %assign args %0 - 1
  8434                              <1>  %assign %$bp_off 4
  8435                              <1>  %assign i 0
  8436                              <1>  %rotate 1
  8437                              <1>  %ifidn %1,withlocal
  8438                              <1>  %assign %$have_local 1
  8439                              <1>  %assign args args -1
  8440                              <1>  %rotate 1
  8441                              <1>  %endif
  8442                              <1>  %assign %$proc_args args
  8443                              <1>  %rep args
  8444                              <1> 
  8445                              <1>  %%inputarg__%1 EQU %$bp_off
  8446                              <1>  %undef .%1
  8447                              <1>  %define .%1 %%inputarg__%1+bp
  8448                              <1>  cat_define %$proc_argv ,i,%1
  8449                              <1>  %assign %$bp_off %$bp_off + 2
  8450                              <1>  %assign i i+1
  8451                              <1>  %rotate 1
  8452                              <1>  %endrep
  8453                              <1>  %if %$have_local==0
  8454                              <1>  enter 0,0
  8455                              <1>  %assign __have_frame__ 1
  8456                              <1>  %endif
  8457                              <1> %endif
  8458                                  ; input ax=dev
  8459                                  ; call after a reset
  8460 000008CB E863FD                  	call __reg_select_dev
  8461                                  	inbyte CB_SC, ah
  8462 000008CE 8B16[8D00]          <1>  mov dx,[reg_addr+%1*2]
  8463 000008D2 EC                  <1>  in al,dx
  8464                              <1>  %if %0 > 1
  8465 000008D3 88C4                <1>  mov %2,al
  8466                              <1>  %endif
  8467                                  	inbyte CB_SN
  8468 000008D5 8B16[8F00]          <1>  mov dx,[reg_addr+%1*2]
  8469 000008D9 EC                  <1>  in al,dx
  8470                              <1>  %if %0 > 1
  8471                              <1>  mov %2,al
  8472                              <1>  %endif
  8473                                  
  8474                                  	if {cmp ax, 0x0101}, ne
  8475                              <1>  %rep %0 -1
  8476                              <1>  %1
  8477                              <1>  %rotate 1
  8478                              <1>  %endrep
  8479 000008DA 3D0101              <2>  %1
  8480                              <2>  %rotate 1
  8481                              <1> 
  8482                              <1>  con_push if
  8483                              <2>  %assign __lastlevel__ __level__
  8484                              <2>  %assign __level__ __level__ + 1
  8485                              <2>  %if __return__ > 0
  8486                              <2>  %assign con_return 1
  8487                              <2>  %else
  8488                              <2>  %assign con_return 0
  8489                              <2>  %endif
  8490                              <2> 
  8491                              <2>  %if __cont__ > 0
  8492                              <2>  %assign con_cont 1
  8493                              <2>  %else
  8494                              <2>  %assign con_cont 0
  8495                              <2>  %endif
  8496                              <2>  %if __break__ > 0
  8497                              <2>  %assign con_break 1
  8498                              <2>  %else
  8499                              <2>  %assign con_break 0
  8500                              <2>  %endif
  8501                              <2> 
  8502                              <2>  %ifidn %1,proc
  8503                              <2>  %assign con_return 0
  8504                              <2>  %elifidn %1,forcx
  8505                              <2>  %assign con_break 0
  8506                              <2>  %elifidn %1,repeat
  8507                              <2>  %assign con_cont 0
  8508                              <2>  %assign con_break 0
  8509                              <2>  %elifidn %1,while
  8510                              <2>  %assign con_cont 0
  8511                              <2>  %assign con_break 0
  8512                              <2>  %endif
  8513                              <2> 
  8514                              <2>  %if __cndblock__ == 1
  8515                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  8516                              <2>  %endif
  8517                              <2> 
  8518                              <2>  %push %1
  8519                              <2>  %if con_return
  8520                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  8521                              <3> %define %1%2 %3%4
  8522                              <2>  %endif
  8523                              <2>  %if con_break
  8524                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  8525                              <3> %define %1%2 %3%4
  8526                              <2>  %endif
  8527                              <2>  %if con_cont
  8528                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  8529                              <3> %define %1%2 %3%4
  8530                              <2>  %endif
  8531                              <2> 
  8532                              <2>  %ifidn %1,andblock
  8533                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8534                              <2>  %elifidn %1,orblock
  8535                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8536                              <2>  %endif
  8537                              <1> 
  8538                              <1>  %if %0 > 0
  8539 000008DD 7404                <1>  j%-1 %$ifnot
  8540                              <1>  %endif
  8541                              <1>  %assign %$elif_level 0
  8542 000008DF B80100                  		mov ax, 1
  8543                                  		return
  8544                              <1>  %if %0 > 0
  8545                              <1>  %assign __near__ 0
  8546                              <1>  %assign argc %0
  8547                              <1>  %ifidn %1,near
  8548                              <1>  %assign __near__ 1
  8549                              <1>  %assign argc argc-1
  8550                              <1>  %rotate 1
  8551                              <1>  %endif
  8552                              <1>  %if argc > 0
  8553                              <1>  %ifidn %1,if
  8554                              <1> 
  8555                              <1>  %rotate 1
  8556                              <1>  %rep argc-2
  8557                              <1>  %1
  8558                              <1>  %rotate 1
  8559                              <1>  %endrep
  8560                              <1>  %if __near__ == 0
  8561                              <1>  cat_jc %1,%$return,__level__
  8562                              <1>  %else
  8563                              <1>  cat_jc_near %1,%$return,__level__
  8564                              <1>  %endif
  8565                              <1>  %else
  8566                              <1>  %error "expect `if' after `return'"
  8567                              <1>  %endif
  8568                              <1>  %else
  8569                              <1>  %if __near__ == 0
  8570                              <1>  cat_jmp %$return,__level__
  8571                              <1>  %else
  8572                              <1>  cat_jmp_near %$return,__level__
  8573                              <1>  %endif
  8574                              <1>  %endif
  8575                              <1>  %else
  8576                              <1>  %if __have_frame__ == 0 && __save_all__ == 0 && __save_args__ == 0
  8577 000008E2 C3                  <1>  ret
  8578                              <1>  %else
  8579                              <1>  cat_jmp %$return,__level__
  8580                              <1>  %endif
  8581                              <1>  %endif
  8582                                  	endif
  8583                              <1>  %assign elselevel 0
  8584                              <1>  %ifctx if
  8585                              <1>  %$ifnot:
  8586                              <1>  con_pop
  8587                              <2>  %pop
  8588                              <2>  %assign __level__ __level__ - 1
  8589                              <1>  %elifctx else
  8590                              <1>  %assign elselevel %$elif_level
  8591                              <1>  %$ifend:
  8592                              <1>  con_pop
  8593                              <1>  %elifctx elif
  8594                              <1>  %assign elselevel %$elif_level
  8595                              <1>  %$ifnot:
  8596                              <1>  con_pop
  8597                              <1>  %else
  8598                              <1>  %error "expected `if' or `else' before `endif'"
  8599                              <1>  %endif
  8600                              <1>  %rep elselevel
  8601                              <1>  %$ifend:
  8602                              <1>  con_pop
  8603                              <1>  %endrep
  8604                                  
  8605                                  	inbyte CB_CL,ah
  8606 000008E3 8B16[9100]          <1>  mov dx,[reg_addr+%1*2]
  8607 000008E7 EC                  <1>  in al,dx
  8608                              <1>  %if %0 > 1
  8609 000008E8 88C4                <1>  mov %2,al
  8610                              <1>  %endif
  8611                                  	inbyte CB_CH
  8612 000008EA 8B16[9300]          <1>  mov dx,[reg_addr+%1*2]
  8613 000008EE EC                  <1>  in al,dx
  8614                              <1>  %if %0 > 1
  8615                              <1>  mov %2,al
  8616                              <1>  %endif
  8617                                  
  8618                                  	if {cmp ax, 0x14eb}, e
  8619                              <1>  %rep %0 -1
  8620                              <1>  %1
  8621                              <1>  %rotate 1
  8622                              <1>  %endrep
  8623 000008EF 3DEB14              <2>  %1
  8624                              <2>  %rotate 1
  8625                              <1> 
  8626                              <1>  con_push if
  8627                              <2>  %assign __lastlevel__ __level__
  8628                              <2>  %assign __level__ __level__ + 1
  8629                              <2>  %if __return__ > 0
  8630                              <2>  %assign con_return 1
  8631                              <2>  %else
  8632                              <2>  %assign con_return 0
  8633                              <2>  %endif
  8634                              <2> 
  8635                              <2>  %if __cont__ > 0
  8636                              <2>  %assign con_cont 1
  8637                              <2>  %else
  8638                              <2>  %assign con_cont 0
  8639                              <2>  %endif
  8640                              <2>  %if __break__ > 0
  8641                              <2>  %assign con_break 1
  8642                              <2>  %else
  8643                              <2>  %assign con_break 0
  8644                              <2>  %endif
  8645                              <2> 
  8646                              <2>  %ifidn %1,proc
  8647                              <2>  %assign con_return 0
  8648                              <2>  %elifidn %1,forcx
  8649                              <2>  %assign con_break 0
  8650                              <2>  %elifidn %1,repeat
  8651                              <2>  %assign con_cont 0
  8652                              <2>  %assign con_break 0
  8653                              <2>  %elifidn %1,while
  8654                              <2>  %assign con_cont 0
  8655                              <2>  %assign con_break 0
  8656                              <2>  %endif
  8657                              <2> 
  8658                              <2>  %if __cndblock__ == 1
  8659                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  8660                              <2>  %endif
  8661                              <2> 
  8662                              <2>  %push %1
  8663                              <2>  %if con_return
  8664                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  8665                              <3> %define %1%2 %3%4
  8666                              <2>  %endif
  8667                              <2>  %if con_break
  8668                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  8669                              <3> %define %1%2 %3%4
  8670                              <2>  %endif
  8671                              <2>  %if con_cont
  8672                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  8673                              <3> %define %1%2 %3%4
  8674                              <2>  %endif
  8675                              <2> 
  8676                              <2>  %ifidn %1,andblock
  8677                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8678                              <2>  %elifidn %1,orblock
  8679                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8680                              <2>  %endif
  8681                              <1> 
  8682                              <1>  %if %0 > 0
  8683 000008F2 7504                <1>  j%-1 %$ifnot
  8684                              <1>  %endif
  8685                              <1>  %assign %$elif_level 0
  8686 000008F4 B80300                  		mov ax, REG_CONFIG_TYPE_ATAPI
  8687                                  		return
  8688                              <1>  %if %0 > 0
  8689                              <1>  %assign __near__ 0
  8690                              <1>  %assign argc %0
  8691                              <1>  %ifidn %1,near
  8692                              <1>  %assign __near__ 1
  8693                              <1>  %assign argc argc-1
  8694                              <1>  %rotate 1
  8695                              <1>  %endif
  8696                              <1>  %if argc > 0
  8697                              <1>  %ifidn %1,if
  8698                              <1> 
  8699                              <1>  %rotate 1
  8700                              <1>  %rep argc-2
  8701                              <1>  %1
  8702                              <1>  %rotate 1
  8703                              <1>  %endrep
  8704                              <1>  %if __near__ == 0
  8705                              <1>  cat_jc %1,%$return,__level__
  8706                              <1>  %else
  8707                              <1>  cat_jc_near %1,%$return,__level__
  8708                              <1>  %endif
  8709                              <1>  %else
  8710                              <1>  %error "expect `if' after `return'"
  8711                              <1>  %endif
  8712                              <1>  %else
  8713                              <1>  %if __near__ == 0
  8714                              <1>  cat_jmp %$return,__level__
  8715                              <1>  %else
  8716                              <1>  cat_jmp_near %$return,__level__
  8717                              <1>  %endif
  8718                              <1>  %endif
  8719                              <1>  %else
  8720                              <1>  %if __have_frame__ == 0 && __save_all__ == 0 && __save_args__ == 0
  8721 000008F7 C3                  <1>  ret
  8722                              <1>  %else
  8723                              <1>  cat_jmp %$return,__level__
  8724                              <1>  %endif
  8725                              <1>  %endif
  8726                                  	endif
  8727                              <1>  %assign elselevel 0
  8728                              <1>  %ifctx if
  8729                              <1>  %$ifnot:
  8730                              <1>  con_pop
  8731                              <2>  %pop
  8732                              <2>  %assign __level__ __level__ - 1
  8733                              <1>  %elifctx else
  8734                              <1>  %assign elselevel %$elif_level
  8735                              <1>  %$ifend:
  8736                              <1>  con_pop
  8737                              <1>  %elifctx elif
  8738                              <1>  %assign elselevel %$elif_level
  8739                              <1>  %$ifnot:
  8740                              <1>  con_pop
  8741                              <1>  %else
  8742                              <1>  %error "expected `if' or `else' before `endif'"
  8743                              <1>  %endif
  8744                              <1>  %rep elselevel
  8745                              <1>  %$ifend:
  8746                              <1>  con_pop
  8747                              <1>  %endrep
  8748                                  
  8749                                  	if {or al,al},z
  8750                              <1>  %rep %0 -1
  8751                              <1>  %1
  8752                              <1>  %rotate 1
  8753                              <1>  %endrep
  8754 000008F8 08C0                <2>  %1
  8755                              <2>  %rotate 1
  8756                              <1> 
  8757                              <1>  con_push if
  8758                              <2>  %assign __lastlevel__ __level__
  8759                              <2>  %assign __level__ __level__ + 1
  8760                              <2>  %if __return__ > 0
  8761                              <2>  %assign con_return 1
  8762                              <2>  %else
  8763                              <2>  %assign con_return 0
  8764                              <2>  %endif
  8765                              <2> 
  8766                              <2>  %if __cont__ > 0
  8767                              <2>  %assign con_cont 1
  8768                              <2>  %else
  8769                              <2>  %assign con_cont 0
  8770                              <2>  %endif
  8771                              <2>  %if __break__ > 0
  8772                              <2>  %assign con_break 1
  8773                              <2>  %else
  8774                              <2>  %assign con_break 0
  8775                              <2>  %endif
  8776                              <2> 
  8777                              <2>  %ifidn %1,proc
  8778                              <2>  %assign con_return 0
  8779                              <2>  %elifidn %1,forcx
  8780                              <2>  %assign con_break 0
  8781                              <2>  %elifidn %1,repeat
  8782                              <2>  %assign con_cont 0
  8783                              <2>  %assign con_break 0
  8784                              <2>  %elifidn %1,while
  8785                              <2>  %assign con_cont 0
  8786                              <2>  %assign con_break 0
  8787                              <2>  %endif
  8788                              <2> 
  8789                              <2>  %if __cndblock__ == 1
  8790                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  8791                              <2>  %endif
  8792                              <2> 
  8793                              <2>  %push %1
  8794                              <2>  %if con_return
  8795                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  8796                              <3> %define %1%2 %3%4
  8797                              <2>  %endif
  8798                              <2>  %if con_break
  8799                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  8800                              <3> %define %1%2 %3%4
  8801                              <2>  %endif
  8802                              <2>  %if con_cont
  8803                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  8804                              <3> %define %1%2 %3%4
  8805                              <2>  %endif
  8806                              <2> 
  8807                              <2>  %ifidn %1,andblock
  8808                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8809                              <2>  %elifidn %1,orblock
  8810                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8811                              <2>  %endif
  8812                              <1> 
  8813                              <1>  %if %0 > 0
  8814 000008FA 750D                <1>  j%-1 %$ifnot
  8815                              <1>  %endif
  8816                              <1>  %assign %$elif_level 0
  8817                                  	    inbyte CB_STAT
  8818 000008FC 8B16[9700]          <1>  mov dx,[reg_addr+%1*2]
  8819 00000900 EC                  <1>  in al,dx
  8820                              <1>  %if %0 > 1
  8821                              <1>  mov %2,al
  8822                              <1>  %endif
  8823                                  		if {or al, al}, nz
  8824                              <1>  %rep %0 -1
  8825                              <1>  %1
  8826                              <1>  %rotate 1
  8827                              <1>  %endrep
  8828 00000901 08C0                <2>  %1
  8829                              <2>  %rotate 1
  8830                              <1> 
  8831                              <1>  con_push if
  8832                              <2>  %assign __lastlevel__ __level__
  8833                              <2>  %assign __level__ __level__ + 1
  8834                              <2>  %if __return__ > 0
  8835                              <2>  %assign con_return 1
  8836                              <2>  %else
  8837                              <2>  %assign con_return 0
  8838                              <2>  %endif
  8839                              <2> 
  8840                              <2>  %if __cont__ > 0
  8841                              <2>  %assign con_cont 1
  8842                              <2>  %else
  8843                              <2>  %assign con_cont 0
  8844                              <2>  %endif
  8845                              <2>  %if __break__ > 0
  8846                              <2>  %assign con_break 1
  8847                              <2>  %else
  8848                              <2>  %assign con_break 0
  8849                              <2>  %endif
  8850                              <2> 
  8851                              <2>  %ifidn %1,proc
  8852                              <2>  %assign con_return 0
  8853                              <2>  %elifidn %1,forcx
  8854                              <2>  %assign con_break 0
  8855                              <2>  %elifidn %1,repeat
  8856                              <2>  %assign con_cont 0
  8857                              <2>  %assign con_break 0
  8858                              <2>  %elifidn %1,while
  8859                              <2>  %assign con_cont 0
  8860                              <2>  %assign con_break 0
  8861                              <2>  %endif
  8862                              <2> 
  8863                              <2>  %if __cndblock__ == 1
  8864                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  8865                              <2>  %endif
  8866                              <2> 
  8867                              <2>  %push %1
  8868                              <2>  %if con_return
  8869                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  8870                              <3> %define %1%2 %3%4
  8871                              <2>  %endif
  8872                              <2>  %if con_break
  8873                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  8874                              <3> %define %1%2 %3%4
  8875                              <2>  %endif
  8876                              <2>  %if con_cont
  8877                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  8878                              <3> %define %1%2 %3%4
  8879                              <2>  %endif
  8880                              <2> 
  8881                              <2>  %ifidn %1,andblock
  8882                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8883                              <2>  %elifidn %1,orblock
  8884                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8885                              <2>  %endif
  8886                              <1> 
  8887                              <1>  %if %0 > 0
  8888 00000903 7404                <1>  j%-1 %$ifnot
  8889                              <1>  %endif
  8890                              <1>  %assign %$elif_level 0
  8891 00000905 B80200                  			mov ax, REG_CONFIG_TYPE_ATA
  8892                                  			return
  8893                              <1>  %if %0 > 0
  8894                              <1>  %assign __near__ 0
  8895                              <1>  %assign argc %0
  8896                              <1>  %ifidn %1,near
  8897                              <1>  %assign __near__ 1
  8898                              <1>  %assign argc argc-1
  8899                              <1>  %rotate 1
  8900                              <1>  %endif
  8901                              <1>  %if argc > 0
  8902                              <1>  %ifidn %1,if
  8903                              <1> 
  8904                              <1>  %rotate 1
  8905                              <1>  %rep argc-2
  8906                              <1>  %1
  8907                              <1>  %rotate 1
  8908                              <1>  %endrep
  8909                              <1>  %if __near__ == 0
  8910                              <1>  cat_jc %1,%$return,__level__
  8911                              <1>  %else
  8912                              <1>  cat_jc_near %1,%$return,__level__
  8913                              <1>  %endif
  8914                              <1>  %else
  8915                              <1>  %error "expect `if' after `return'"
  8916                              <1>  %endif
  8917                              <1>  %else
  8918                              <1>  %if __near__ == 0
  8919                              <1>  cat_jmp %$return,__level__
  8920                              <1>  %else
  8921                              <1>  cat_jmp_near %$return,__level__
  8922                              <1>  %endif
  8923                              <1>  %endif
  8924                              <1>  %else
  8925                              <1>  %if __have_frame__ == 0 && __save_all__ == 0 && __save_args__ == 0
  8926 00000908 C3                  <1>  ret
  8927                              <1>  %else
  8928                              <1>  cat_jmp %$return,__level__
  8929                              <1>  %endif
  8930                              <1>  %endif
  8931                                  		endif
  8932                              <1>  %assign elselevel 0
  8933                              <1>  %ifctx if
  8934                              <1>  %$ifnot:
  8935                              <1>  con_pop
  8936                              <2>  %pop
  8937                              <2>  %assign __level__ __level__ - 1
  8938                              <1>  %elifctx else
  8939                              <1>  %assign elselevel %$elif_level
  8940                              <1>  %$ifend:
  8941                              <1>  con_pop
  8942                              <1>  %elifctx elif
  8943                              <1>  %assign elselevel %$elif_level
  8944                              <1>  %$ifnot:
  8945                              <1>  con_pop
  8946                              <1>  %else
  8947                              <1>  %error "expected `if' or `else' before `endif'"
  8948                              <1>  %endif
  8949                              <1>  %rep elselevel
  8950                              <1>  %$ifend:
  8951                              <1>  con_pop
  8952                              <1>  %endrep
  8953                                  	endif
  8954                              <1>  %assign elselevel 0
  8955                              <1>  %ifctx if
  8956                              <1>  %$ifnot:
  8957                              <1>  con_pop
  8958                              <2>  %pop
  8959                              <2>  %assign __level__ __level__ - 1
  8960                              <1>  %elifctx else
  8961                              <1>  %assign elselevel %$elif_level
  8962                              <1>  %$ifend:
  8963                              <1>  con_pop
  8964                              <1>  %elifctx elif
  8965                              <1>  %assign elselevel %$elif_level
  8966                              <1>  %$ifnot:
  8967                              <1>  con_pop
  8968                              <1>  %else
  8969                              <1>  %error "expected `if' or `else' before `endif'"
  8970                              <1>  %endif
  8971                              <1>  %rep elselevel
  8972                              <1>  %$ifend:
  8973                              <1>  con_pop
  8974                              <1>  %endrep
  8975 00000909 B80100                  	mov ax, REG_CONFIG_TYPE_UNKN
  8976                                  endp
  8977                              <1> %ifnctx proc
  8978                              <1>  %error "expected `proc' before `endp'"
  8979                              <1> %endif
  8980                              <1>  cat_lable %$return,__level__
  8981                              <2> %1%2:
  8982                              <1>  %if __save_all__ ==1
  8983                              <1>  popa
  8984                              <1>  %elif __save_all__ == 2
  8985                              <1>  popad
  8986                              <1>  %elif __save_args__ > 0
  8987                              <1>  %assign i 1
  8988                              <1>  %rep __save_args__
  8989                              <1>  linecat pop, %$save_argv,i
  8990                              <1>  %assign i i+1
  8991                              <1>  %endrep
  8992                              <1>  %endif
  8993                              <1>  %if __have_frame__ > 0
  8994                              <1>  leave
  8995                              <1>  %endif
  8996                              <1> 
  8997                              <1>  %assign i 0
  8998                              <1>  %rep %$proc_args
  8999                              <1> 
  9000                              <1>  %assign i i+1
  9001                              <1>  %endrep
  9002                              <1> 
  9003                              <1>  %assign i 0
  9004                              <1>  %rep %$local_args
  9005                              <1> 
  9006                              <1>  %assign i i+1
  9007                              <1>  %endrep
  9008 0000090C C3                  <1>  ret
  9009                              <1>  con_pop
  9010                              <2>  %pop
  9011                              <2>  %assign __level__ __level__ - 1
  9012                              <1>  %assign __return__ __return__ - 1
  9013                                  
  9014                                  proc	reg_reset
  9015                              <1> GLOBAL %1
  9016                              <1> %1:
  9017                              <1> con_push proc
  9018                              <2>  %assign __lastlevel__ __level__
  9019                              <2>  %assign __level__ __level__ + 1
  9020                              <2>  %if __return__ > 0
  9021                              <2>  %assign con_return 1
  9022                              <2>  %else
  9023                              <2>  %assign con_return 0
  9024                              <2>  %endif
  9025                              <2> 
  9026                              <2>  %if __cont__ > 0
  9027                              <2>  %assign con_cont 1
  9028                              <2>  %else
  9029                              <2>  %assign con_cont 0
  9030                              <2>  %endif
  9031                              <2>  %if __break__ > 0
  9032                              <2>  %assign con_break 1
  9033                              <2>  %else
  9034                              <2>  %assign con_break 0
  9035                              <2>  %endif
  9036                              <2> 
  9037                              <2>  %ifidn %1,proc
  9038                              <2>  %assign con_return 0
  9039                              <2>  %elifidn %1,forcx
  9040                              <2>  %assign con_break 0
  9041                              <2>  %elifidn %1,repeat
  9042                              <2>  %assign con_cont 0
  9043                              <2>  %assign con_break 0
  9044                              <2>  %elifidn %1,while
  9045                              <2>  %assign con_cont 0
  9046                              <2>  %assign con_break 0
  9047                              <2>  %endif
  9048                              <2> 
  9049                              <2>  %if __cndblock__ == 1
  9050                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  9051                              <2>  %endif
  9052                              <2> 
  9053                              <2>  %push %1
  9054                              <2>  %if con_return
  9055                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  9056                              <2>  %endif
  9057                              <2>  %if con_break
  9058                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  9059                              <3> %define %1%2 %3%4
  9060                              <2>  %endif
  9061                              <2>  %if con_cont
  9062                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  9063                              <3> %define %1%2 %3%4
  9064                              <2>  %endif
  9065                              <2> 
  9066                              <2>  %ifidn %1,andblock
  9067                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9068                              <2>  %elifidn %1,orblock
  9069                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9070                              <2>  %endif
  9071                              <1> %assign __return__ __return__ + 1
  9072                              <1> %assign __have_frame__ 0
  9073                              <1> %assign %$have_local 0
  9074                              <1> %assign %$have_save 0
  9075                              <1> %assign __save_all__ 0
  9076                              <1> %assign %$local_args 0
  9077                              <1> %assign %$proc_args 0
  9078                              <1> %assign __save_args__ 0
  9079                              <1> %if %0 > 1
  9080                              <1>  %assign args %0 - 1
  9081                              <1>  %assign %$bp_off 4
  9082                              <1>  %assign i 0
  9083                              <1>  %rotate 1
  9084                              <1>  %ifidn %1,withlocal
  9085                              <1>  %assign %$have_local 1
  9086                              <1>  %assign args args -1
  9087                              <1>  %rotate 1
  9088                              <1>  %endif
  9089                              <1>  %assign %$proc_args args
  9090                              <1>  %rep args
  9091                              <1> 
  9092                              <1>  %%inputarg__%1 EQU %$bp_off
  9093                              <1>  %undef .%1
  9094                              <1>  %define .%1 %%inputarg__%1+bp
  9095                              <1>  cat_define %$proc_argv ,i,%1
  9096                              <1>  %assign %$bp_off %$bp_off + 2
  9097                              <1>  %assign i i+1
  9098                              <1>  %rotate 1
  9099                              <1>  %endrep
  9100                              <1>  %if %$have_local==0
  9101                              <1>  enter 0,0
  9102                              <1>  %assign __have_frame__ 1
  9103                              <1>  %endif
  9104                              <1> %endif
  9105                                  ; call after reg_probe_exist
  9106                                  	save all
  9107                              <1> %ifctx proc
  9108                              <1>  %if %$have_local == 1
  9109                              <1>  %error "`save' must after `local'"
  9110                              <1>  %endif
  9111                              <1> 
  9112                              <1>  %ifidn all,%1
  9113                              <1>  %assign __save_all__ 1
  9114                              <1>  %if %0 > 1
  9115                              <1>  %ifidn frame,%2
  9116                              <1>  %if __have_frame__ == 0
  9117                              <1>  enter 0,0
  9118                              <1>  %assign __have_frame__ 1
  9119                              <1>  %assign local_off 0
  9120                              <1>  %endif
  9121                              <1>  %endif
  9122                              <1>  %endif
  9123 0000090D 60                  <1>  pusha
  9124                              <1>  %if __have_frame__ == 1
  9125                              <1>  %undef __AX
  9126                              <1>  %undef __BX
  9127                              <1>  %undef __CX
  9128                              <1>  %undef __DX
  9129                              <1>  %undef __SI
  9130                              <1>  %undef __DI
  9131                              <1>  %idefine __AX bp-local_off - 2
  9132                              <1>  %idefine __CX bp-local_off - 4
  9133                              <1>  %idefine __DX bp-local_off - 6
  9134                              <1>  %idefine __BX bp-local_off - 8
  9135                              <1> 
  9136                              <1> 
  9137                              <1>  %idefine __SI bp-local_off - 14
  9138                              <1>  %idefine __DI bp-local_off - 16
  9139                              <1>  %endif
  9140                              <1>  %elifidn alld,%1
  9141                              <1>  %assign __save_all__ 2
  9142                              <1>  %if %0 > 1
  9143                              <1>  %ifidn frame,%2
  9144                              <1>  %if __have_frame__ == 0
  9145                              <1>  enter 0,0
  9146                              <1>  %assign __have_frame__ 1
  9147                              <1>  %assign local_off 0
  9148                              <1>  %endif
  9149                              <1>  %endif
  9150                              <1>  %endif
  9151                              <1>  pushad
  9152                              <1>  %if __have_frame__ == 1
  9153                              <1>  %undef __EAX
  9154                              <1>  %undef __EBX
  9155                              <1>  %undef __ECX
  9156                              <1>  %undef __EDX
  9157                              <1>  %undef __ESI
  9158                              <1>  %undef __EDI
  9159                              <1>  %idefine __EAX bp-local_off - 4
  9160                              <1>  %idefine __ECX bp-local_off - 8
  9161                              <1>  %idefine __EDX bp-local_off - 12
  9162                              <1>  %idefine __EBX bp-local_off - 16
  9163                              <1> 
  9164                              <1> 
  9165                              <1>  %idefine __ESI bp-local_off - 18
  9166                              <1>  %idefine __EDI bp-local_off - 32
  9167                              <1>  %endif
  9168                              <1> 
  9169                              <1>  %else
  9170                              <1>  %assign __save_args__ %0
  9171                              <1>  %assign __save_all__ 0
  9172                              <1>  %assign i %0
  9173                              <1>  %rep %0
  9174                              <1>  push %1
  9175                              <1>  cat_define %$save_argv ,i,%1
  9176                              <1>  %rotate 1
  9177                              <1>  %assign i i - 1
  9178                              <1>  %endrep
  9179                              <1>  %endif
  9180                              <1> %else
  9181                              <1>  %error "`save' must after `proc'"
  9182                              <1> %endif
  9183                                  
  9184                                  ;	mov_ax 0
  9185                                  ;	call __reg_select_dev
  9186                                  
  9187 0000090E B008                    	mov al,cmd_DC
  9188 00000910 0C04                    	or al,CB_DC_SRST
  9189                                  	outbyte CB_DC
  9190                              <1> %if %0>1
  9191                              <1>  mov al,%2
  9192                              <1> %endif
  9193                              <1> %if %0>0
  9194 00000912 8B16[9900]          <1>  mov dx,[reg_addr+%1*2]
  9195                              <1> %endif
  9196 00000916 EE                  <1>  out dx,al
  9197 00000917 E8FDFC                  	call delay400ns
  9198                                  	outbyte CB_DC, cmd_DC
  9199                              <1> %if %0>1
  9200 0000091A B008                <1>  mov al,%2
  9201                              <1> %endif
  9202                              <1> %if %0>0
  9203 0000091C 8B16[9900]          <1>  mov dx,[reg_addr+%1*2]
  9204                              <1> %endif
  9205 00000920 EE                  <1>  out dx,al
  9206 00000921 E8F3FC                  	call delay400ns
  9207                                  
  9208 00000924 E8D8FC                  	call set_timeout
  9209                                  	if {cmp byte [reg_dev_info],REG_CONFIG_TYPE_NONE},ne
  9210                              <1>  %rep %0 -1
  9211                              <1>  %1
  9212                              <1>  %rotate 1
  9213                              <1>  %endrep
  9214 00000927 803E[0500]00        <2>  %1
  9215                              <2>  %rotate 1
  9216                              <1> 
  9217                              <1>  con_push if
  9218                              <2>  %assign __lastlevel__ __level__
  9219                              <2>  %assign __level__ __level__ + 1
  9220                              <2>  %if __return__ > 0
  9221                              <2>  %assign con_return 1
  9222                              <2>  %else
  9223                              <2>  %assign con_return 0
  9224                              <2>  %endif
  9225                              <2> 
  9226                              <2>  %if __cont__ > 0
  9227                              <2>  %assign con_cont 1
  9228                              <2>  %else
  9229                              <2>  %assign con_cont 0
  9230                              <2>  %endif
  9231                              <2>  %if __break__ > 0
  9232                              <2>  %assign con_break 1
  9233                              <2>  %else
  9234                              <2>  %assign con_break 0
  9235                              <2>  %endif
  9236                              <2> 
  9237                              <2>  %ifidn %1,proc
  9238                              <2>  %assign con_return 0
  9239                              <2>  %elifidn %1,forcx
  9240                              <2>  %assign con_break 0
  9241                              <2>  %elifidn %1,repeat
  9242                              <2>  %assign con_cont 0
  9243                              <2>  %assign con_break 0
  9244                              <2>  %elifidn %1,while
  9245                              <2>  %assign con_cont 0
  9246                              <2>  %assign con_break 0
  9247                              <2>  %endif
  9248                              <2> 
  9249                              <2>  %if __cndblock__ == 1
  9250                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  9251                              <2>  %endif
  9252                              <2> 
  9253                              <2>  %push %1
  9254                              <2>  %if con_return
  9255                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  9256                              <3> %define %1%2 %3%4
  9257                              <2>  %endif
  9258                              <2>  %if con_break
  9259                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  9260                              <3> %define %1%2 %3%4
  9261                              <2>  %endif
  9262                              <2>  %if con_cont
  9263                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  9264                              <3> %define %1%2 %3%4
  9265                              <2>  %endif
  9266                              <2> 
  9267                              <2>  %ifidn %1,andblock
  9268                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9269                              <2>  %elifidn %1,orblock
  9270                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9271                              <2>  %endif
  9272                              <1> 
  9273                              <1>  %if %0 > 0
  9274 0000092C 7406                <1>  j%-1 %$ifnot
  9275                              <1>  %endif
  9276                              <1>  %assign %$elif_level 0
  9277 0000092E E8E5FC                  		call sub_atapi_delay
  9278 00000931 E8ECFC                  		call reg_poll_busy
  9279                                  	endif
  9280                              <1>  %assign elselevel 0
  9281                              <1>  %ifctx if
  9282                              <1>  %$ifnot:
  9283                              <1>  con_pop
  9284                              <2>  %pop
  9285                              <2>  %assign __level__ __level__ - 1
  9286                              <1>  %elifctx else
  9287                              <1>  %assign elselevel %$elif_level
  9288                              <1>  %$ifend:
  9289                              <1>  con_pop
  9290                              <1>  %elifctx elif
  9291                              <1>  %assign elselevel %$elif_level
  9292                              <1>  %$ifnot:
  9293                              <1>  con_pop
  9294                              <1>  %else
  9295                              <1>  %error "expected `if' or `else' before `endif'"
  9296                              <1>  %endif
  9297                              <1>  %rep elselevel
  9298                              <1>  %$ifend:
  9299                              <1>  con_pop
  9300                              <1>  %endrep
  9301                                  	if {cmp byte [reg_dev_info+1],REG_CONFIG_TYPE_NONE},ne
  9302                              <1>  %rep %0 -1
  9303                              <1>  %1
  9304                              <1>  %rotate 1
  9305                              <1>  %endrep
  9306 00000934 803E[0600]00        <2>  %1
  9307                              <2>  %rotate 1
  9308                              <1> 
  9309                              <1>  con_push if
  9310                              <2>  %assign __lastlevel__ __level__
  9311                              <2>  %assign __level__ __level__ + 1
  9312                              <2>  %if __return__ > 0
  9313                              <2>  %assign con_return 1
  9314                              <2>  %else
  9315                              <2>  %assign con_return 0
  9316                              <2>  %endif
  9317                              <2> 
  9318                              <2>  %if __cont__ > 0
  9319                              <2>  %assign con_cont 1
  9320                              <2>  %else
  9321                              <2>  %assign con_cont 0
  9322                              <2>  %endif
  9323                              <2>  %if __break__ > 0
  9324                              <2>  %assign con_break 1
  9325                              <2>  %else
  9326                              <2>  %assign con_break 0
  9327                              <2>  %endif
  9328                              <2> 
  9329                              <2>  %ifidn %1,proc
  9330                              <2>  %assign con_return 0
  9331                              <2>  %elifidn %1,forcx
  9332                              <2>  %assign con_break 0
  9333                              <2>  %elifidn %1,repeat
  9334                              <2>  %assign con_cont 0
  9335                              <2>  %assign con_break 0
  9336                              <2>  %elifidn %1,while
  9337                              <2>  %assign con_cont 0
  9338                              <2>  %assign con_break 0
  9339                              <2>  %endif
  9340                              <2> 
  9341                              <2>  %if __cndblock__ == 1
  9342                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  9343                              <2>  %endif
  9344                              <2> 
  9345                              <2>  %push %1
  9346                              <2>  %if con_return
  9347                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  9348                              <3> %define %1%2 %3%4
  9349                              <2>  %endif
  9350                              <2>  %if con_break
  9351                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  9352                              <3> %define %1%2 %3%4
  9353                              <2>  %endif
  9354                              <2>  %if con_cont
  9355                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  9356                              <3> %define %1%2 %3%4
  9357                              <2>  %endif
  9358                              <2> 
  9359                              <2>  %ifidn %1,andblock
  9360                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9361                              <2>  %elifidn %1,orblock
  9362                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9363                              <2>  %endif
  9364                              <1> 
  9365                              <1>  %if %0 > 0
  9366 00000939 7424                <1>  j%-1 %$ifnot
  9367                              <1>  %endif
  9368                              <1>  %assign %$elif_level 0
  9369 0000093B E8D8FC                  		call sub_atapi_delay
  9370                                  		while
  9371                              <1> con_push while
  9372                              <2>  %assign __lastlevel__ __level__
  9373                              <2>  %assign __level__ __level__ + 1
  9374                              <2>  %if __return__ > 0
  9375                              <2>  %assign con_return 1
  9376                              <2>  %else
  9377                              <2>  %assign con_return 0
  9378                              <2>  %endif
  9379                              <2> 
  9380                              <2>  %if __cont__ > 0
  9381                              <2>  %assign con_cont 1
  9382                              <2>  %else
  9383                              <2>  %assign con_cont 0
  9384                              <2>  %endif
  9385                              <2>  %if __break__ > 0
  9386                              <2>  %assign con_break 1
  9387                              <2>  %else
  9388                              <2>  %assign con_break 0
  9389                              <2>  %endif
  9390                              <2> 
  9391                              <2>  %ifidn %1,proc
  9392                              <2>  %assign con_return 0
  9393                              <2>  %elifidn %1,forcx
  9394                              <2>  %assign con_break 0
  9395                              <2>  %elifidn %1,repeat
  9396                              <2>  %assign con_cont 0
  9397                              <2>  %assign con_break 0
  9398                              <2>  %elifidn %1,while
  9399                              <2>  %assign con_cont 0
  9400                              <2>  %assign con_break 0
  9401                              <2>  %endif
  9402                              <2> 
  9403                              <2>  %if __cndblock__ == 1
  9404                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  9405                              <2>  %endif
  9406                              <2> 
  9407                              <2>  %push %1
  9408                              <2>  %if con_return
  9409                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  9410                              <3> %define %1%2 %3%4
  9411                              <2>  %endif
  9412                              <2>  %if con_break
  9413                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  9414                              <2>  %endif
  9415                              <2>  %if con_cont
  9416                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  9417                              <2>  %endif
  9418                              <2> 
  9419                              <2>  %ifidn %1,andblock
  9420                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9421                              <2>  %elifidn %1,orblock
  9422                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9423                              <2>  %endif
  9424                              <1> %assign __break__ __break__ + 1
  9425                              <1> %assign __cont__ __cont__ + 1
  9426                              <1> %$begin:
  9427                              <1> cat_lable %$cont,__level__
  9428                              <2> %1%2:
  9429                              <1> %if %0 > 0
  9430                              <1>  %rep %0 -1
  9431                              <1>  %1
  9432                              <1>  %rotate 1
  9433                              <1>  %endrep
  9434                              <1>  j%-1 %$end
  9435                              <1> %endif
  9436 0000093E B80100                  			mov ax,1
  9437 00000941 E8EDFC                  			call __reg_select_dev
  9438 00000944 E8D0FC                  			call delay400ns
  9439                                  			inbyte CB_SC,ah
  9440 00000947 8B16[8D00]          <1>  mov dx,[reg_addr+%1*2]
  9441 0000094B EC                  <1>  in al,dx
  9442                              <1>  %if %0 > 1
  9443 0000094C 88C4                <1>  mov %2,al
  9444                              <1>  %endif
  9445                                  			inbyte CB_SN
  9446 0000094E 8B16[8F00]          <1>  mov dx,[reg_addr+%1*2]
  9447 00000952 EC                  <1>  in al,dx
  9448                              <1>  %if %0 > 1
  9449                              <1>  mov %2,al
  9450                              <1>  %endif
  9451                                  			break if,{cmp ax,0x0101},e
  9452                              <1> %if %0 > 0
  9453                              <1>  %ifidn %1,if
  9454                              <1>  %rotate 1
  9455                              <1>  %rep %0 - 2
  9456                              <1>  %1
  9457                              <1>  %rotate 1
  9458                              <1>  %endrep
  9459 00000953 3D0101              <2>  %1
  9460                              <2>  %rotate 1
  9461                              <1>  cat_jc %1,%$break,__level__
  9462 00000956 7407                <2>  j%+1 %2%3
  9463                              <1>  %else
  9464                              <1>  %error "expect `if' after `break'"
  9465                              <1>  %endif
  9466                              <1> %else
  9467                              <1>  cat_jmp %$break,__level__
  9468                              <1> %endif
  9469 00000958 E8B2FC                  			call check_timeout
  9470                                  			break if,is_timeout
  9471                              <1> %if %0 > 0
  9472                              <1>  %ifidn %1,if
  9473                              <1>  %rotate 1
  9474                              <1>  %rep %0 - 2
  9475                              <1>  %1
  9476                              <1>  %rotate 1
  9477                              <1>  %endrep
  9478                              <1>  cat_jc %1,%$break,__level__
  9479 0000095B 7702                <2>  j%+1 %2%3
  9480                              <1>  %else
  9481                              <1>  %error "expect `if' after `break'"
  9482                              <1>  %endif
  9483                              <1> %else
  9484                              <1>  cat_jmp %$break,__level__
  9485                              <1> %endif
  9486                                  		endwhile 
  9487                              <1>  %ifctx while
  9488 0000095D EBDF                <1>  jmp %$begin
  9489                              <1>  %$end:
  9490                              <1>  cat_lable %$break,__level__
  9491                              <2> %1%2:
  9492                              <1>  %else
  9493                              <1>  %error "expected `while' before `endwhile'"
  9494                              <1>  %endif
  9495                              <1> con_pop
  9496                              <2>  %pop
  9497                              <2>  %assign __level__ __level__ - 1
  9498                              <1> %assign __break__ __break__ + 1
  9499                              <1> %assign __cont__ __cont__ + 1
  9500                                  	endif
  9501                              <1>  %assign elselevel 0
  9502                              <1>  %ifctx if
  9503                              <1>  %$ifnot:
  9504                              <1>  con_pop
  9505                              <2>  %pop
  9506                              <2>  %assign __level__ __level__ - 1
  9507                              <1>  %elifctx else
  9508                              <1>  %assign elselevel %$elif_level
  9509                              <1>  %$ifend:
  9510                              <1>  con_pop
  9511                              <1>  %elifctx elif
  9512                              <1>  %assign elselevel %$elif_level
  9513                              <1>  %$ifnot:
  9514                              <1>  con_pop
  9515                              <1>  %else
  9516                              <1>  %error "expected `if' or `else' before `endif'"
  9517                              <1>  %endif
  9518                              <1>  %rep elselevel
  9519                              <1>  %$ifend:
  9520                              <1>  con_pop
  9521                              <1>  %endrep
  9522                                  endp
  9523                              <1> %ifnctx proc
  9524                              <1>  %error "expected `proc' before `endp'"
  9525                              <1> %endif
  9526                              <1>  cat_lable %$return,__level__
  9527                              <2> %1%2:
  9528                              <1>  %if __save_all__ ==1
  9529 0000095F 61                  <1>  popa
  9530                              <1>  %elif __save_all__ == 2
  9531                              <1>  popad
  9532                              <1>  %elif __save_args__ > 0
  9533                              <1>  %assign i 1
  9534                              <1>  %rep __save_args__
  9535                              <1>  linecat pop, %$save_argv,i
  9536                              <1>  %assign i i+1
  9537                              <1>  %endrep
  9538                              <1>  %endif
  9539                              <1>  %if __have_frame__ > 0
  9540                              <1>  leave
  9541                              <1>  %endif
  9542                              <1> 
  9543                              <1>  %assign i 0
  9544                              <1>  %rep %$proc_args
  9545                              <1> 
  9546                              <1>  %assign i i+1
  9547                              <1>  %endrep
  9548                              <1> 
  9549                              <1>  %assign i 0
  9550                              <1>  %rep %$local_args
  9551                              <1> 
  9552                              <1>  %assign i i+1
  9553                              <1>  %endrep
  9554 00000960 C3                  <1>  ret
  9555                              <1>  con_pop
  9556                              <2>  %pop
  9557                              <2>  %assign __level__ __level__ - 1
  9558                              <1>  %assign __return__ __return__ - 1
  9559                                  
  9560                                  proc	reg_probe
  9561                              <1> GLOBAL %1
  9562                              <1> %1:
  9563                              <1> con_push proc
  9564                              <2>  %assign __lastlevel__ __level__
  9565                              <2>  %assign __level__ __level__ + 1
  9566                              <2>  %if __return__ > 0
  9567                              <2>  %assign con_return 1
  9568                              <2>  %else
  9569                              <2>  %assign con_return 0
  9570                              <2>  %endif
  9571                              <2> 
  9572                              <2>  %if __cont__ > 0
  9573                              <2>  %assign con_cont 1
  9574                              <2>  %else
  9575                              <2>  %assign con_cont 0
  9576                              <2>  %endif
  9577                              <2>  %if __break__ > 0
  9578                              <2>  %assign con_break 1
  9579                              <2>  %else
  9580                              <2>  %assign con_break 0
  9581                              <2>  %endif
  9582                              <2> 
  9583                              <2>  %ifidn %1,proc
  9584                              <2>  %assign con_return 0
  9585                              <2>  %elifidn %1,forcx
  9586                              <2>  %assign con_break 0
  9587                              <2>  %elifidn %1,repeat
  9588                              <2>  %assign con_cont 0
  9589                              <2>  %assign con_break 0
  9590                              <2>  %elifidn %1,while
  9591                              <2>  %assign con_cont 0
  9592                              <2>  %assign con_break 0
  9593                              <2>  %endif
  9594                              <2> 
  9595                              <2>  %if __cndblock__ == 1
  9596                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  9597                              <2>  %endif
  9598                              <2> 
  9599                              <2>  %push %1
  9600                              <2>  %if con_return
  9601                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  9602                              <2>  %endif
  9603                              <2>  %if con_break
  9604                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  9605                              <3> %define %1%2 %3%4
  9606                              <2>  %endif
  9607                              <2>  %if con_cont
  9608                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  9609                              <3> %define %1%2 %3%4
  9610                              <2>  %endif
  9611                              <2> 
  9612                              <2>  %ifidn %1,andblock
  9613                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9614                              <2>  %elifidn %1,orblock
  9615                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9616                              <2>  %endif
  9617                              <1> %assign __return__ __return__ + 1
  9618                              <1> %assign __have_frame__ 0
  9619                              <1> %assign %$have_local 0
  9620                              <1> %assign %$have_save 0
  9621                              <1> %assign __save_all__ 0
  9622                              <1> %assign %$local_args 0
  9623                              <1> %assign %$proc_args 0
  9624                              <1> %assign __save_args__ 0
  9625                              <1> %if %0 > 1
  9626                              <1>  %assign args %0 - 1
  9627                              <1>  %assign %$bp_off 4
  9628                              <1>  %assign i 0
  9629                              <1>  %rotate 1
  9630                              <1>  %ifidn %1,withlocal
  9631                              <1>  %assign %$have_local 1
  9632                              <1>  %assign args args -1
  9633                              <1>  %rotate 1
  9634                              <1>  %endif
  9635                              <1>  %assign %$proc_args args
  9636                              <1>  %rep args
  9637                              <1> 
  9638                              <1>  %%inputarg__%1 EQU %$bp_off
  9639                              <1>  %undef .%1
  9640                              <1>  %define .%1 %%inputarg__%1+bp
  9641                              <1>  cat_define %$proc_argv ,i,%1
  9642                              <1>  %assign %$bp_off %$bp_off + 2
  9643                              <1>  %assign i i+1
  9644                              <1>  %rotate 1
  9645                              <1>  %endrep
  9646                              <1>  %if %$have_local==0
  9647                              <1>  enter 0,0
  9648                              <1>  %assign __have_frame__ 1
  9649                              <1>  %endif
  9650                              <1> %endif
  9651                                  ; return cx = number of atapi devices
  9652                                  	save ax, bx, si, di 
  9653                              <1> %ifctx proc
  9654                              <1>  %if %$have_local == 1
  9655                              <1>  %error "`save' must after `local'"
  9656                              <1>  %endif
  9657                              <1> 
  9658                              <1>  %ifidn all,%1
  9659                              <1>  %assign __save_all__ 1
  9660                              <1>  %if %0 > 1
  9661                              <1>  %ifidn frame,%2
  9662                              <1>  %if __have_frame__ == 0
  9663                              <1>  enter 0,0
  9664                              <1>  %assign __have_frame__ 1
  9665                              <1>  %assign local_off 0
  9666                              <1>  %endif
  9667                              <1>  %endif
  9668                              <1>  %endif
  9669                              <1>  pusha
  9670                              <1>  %if __have_frame__ == 1
  9671                              <1>  %undef __AX
  9672                              <1>  %undef __BX
  9673                              <1>  %undef __CX
  9674                              <1>  %undef __DX
  9675                              <1>  %undef __SI
  9676                              <1>  %undef __DI
  9677                              <1>  %idefine __AX bp-local_off - 2
  9678                              <1>  %idefine __CX bp-local_off - 4
  9679                              <1>  %idefine __DX bp-local_off - 6
  9680                              <1>  %idefine __BX bp-local_off - 8
  9681                              <1> 
  9682                              <1> 
  9683                              <1>  %idefine __SI bp-local_off - 14
  9684                              <1>  %idefine __DI bp-local_off - 16
  9685                              <1>  %endif
  9686                              <1>  %elifidn alld,%1
  9687                              <1>  %assign __save_all__ 2
  9688                              <1>  %if %0 > 1
  9689                              <1>  %ifidn frame,%2
  9690                              <1>  %if __have_frame__ == 0
  9691                              <1>  enter 0,0
  9692                              <1>  %assign __have_frame__ 1
  9693                              <1>  %assign local_off 0
  9694                              <1>  %endif
  9695                              <1>  %endif
  9696                              <1>  %endif
  9697                              <1>  pushad
  9698                              <1>  %if __have_frame__ == 1
  9699                              <1>  %undef __EAX
  9700                              <1>  %undef __EBX
  9701                              <1>  %undef __ECX
  9702                              <1>  %undef __EDX
  9703                              <1>  %undef __ESI
  9704                              <1>  %undef __EDI
  9705                              <1>  %idefine __EAX bp-local_off - 4
  9706                              <1>  %idefine __ECX bp-local_off - 8
  9707                              <1>  %idefine __EDX bp-local_off - 12
  9708                              <1>  %idefine __EBX bp-local_off - 16
  9709                              <1> 
  9710                              <1> 
  9711                              <1>  %idefine __ESI bp-local_off - 18
  9712                              <1>  %idefine __EDI bp-local_off - 32
  9713                              <1>  %endif
  9714                              <1> 
  9715                              <1>  %else
  9716                              <1>  %assign __save_args__ %0
  9717                              <1>  %assign __save_all__ 0
  9718                              <1>  %assign i %0
  9719                              <1>  %rep %0
  9720                              <1>  push %1
  9721                              <1>  cat_define %$save_argv ,i,%1
  9722                              <1>  %rotate 1
  9723                              <1>  %assign i i - 1
  9724                              <1>  %endrep
  9725 00000961 50                  <2>  push %1
  9726                              <2>  cat_define %$save_argv ,i,%1
  9727                              <3> %define %1%2 %3
  9728                              <2>  %rotate 1
  9729                              <2>  %assign i i - 1
  9730 00000962 53                  <2>  push %1
  9731                              <2>  cat_define %$save_argv ,i,%1
  9732                              <3> %define %1%2 %3
  9733                              <2>  %rotate 1
  9734                              <2>  %assign i i - 1
  9735 00000963 56                  <2>  push %1
  9736                              <2>  cat_define %$save_argv ,i,%1
  9737                              <3> %define %1%2 %3
  9738                              <2>  %rotate 1
  9739                              <2>  %assign i i - 1
  9740 00000964 57                  <2>  push %1
  9741                              <2>  cat_define %$save_argv ,i,%1
  9742                              <3> %define %1%2 %3
  9743                              <2>  %rotate 1
  9744                              <2>  %assign i i - 1
  9745                              <1>  %endif
  9746                              <1> %else
  9747                              <1>  %error "`save' must after `proc'"
  9748                              <1> %endif
  9749 00000965 FC                      	cld
  9750 00000966 C706[0700]0000          	mov word [atapi_dev_count], 0
  9751 0000096C BB[0400]                	mov bx,reg_base_addr
  9752 0000096F BF[0900]                	mov di,atapi_dev_base
  9753                                  	while {cmp word [bx], byte 0},nz
  9754                              <1> con_push while
  9755                              <2>  %assign __lastlevel__ __level__
  9756                              <2>  %assign __level__ __level__ + 1
  9757                              <2>  %if __return__ > 0
  9758                              <2>  %assign con_return 1
  9759                              <2>  %else
  9760                              <2>  %assign con_return 0
  9761                              <2>  %endif
  9762                              <2> 
  9763                              <2>  %if __cont__ > 0
  9764                              <2>  %assign con_cont 1
  9765                              <2>  %else
  9766                              <2>  %assign con_cont 0
  9767                              <2>  %endif
  9768                              <2>  %if __break__ > 0
  9769                              <2>  %assign con_break 1
  9770                              <2>  %else
  9771                              <2>  %assign con_break 0
  9772                              <2>  %endif
  9773                              <2> 
  9774                              <2>  %ifidn %1,proc
  9775                              <2>  %assign con_return 0
  9776                              <2>  %elifidn %1,forcx
  9777                              <2>  %assign con_break 0
  9778                              <2>  %elifidn %1,repeat
  9779                              <2>  %assign con_cont 0
  9780                              <2>  %assign con_break 0
  9781                              <2>  %elifidn %1,while
  9782                              <2>  %assign con_cont 0
  9783                              <2>  %assign con_break 0
  9784                              <2>  %endif
  9785                              <2> 
  9786                              <2>  %if __cndblock__ == 1
  9787                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  9788                              <2>  %endif
  9789                              <2> 
  9790                              <2>  %push %1
  9791                              <2>  %if con_return
  9792                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  9793                              <3> %define %1%2 %3%4
  9794                              <2>  %endif
  9795                              <2>  %if con_break
  9796                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  9797                              <2>  %endif
  9798                              <2>  %if con_cont
  9799                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  9800                              <2>  %endif
  9801                              <2> 
  9802                              <2>  %ifidn %1,andblock
  9803                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9804                              <2>  %elifidn %1,orblock
  9805                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9806                              <2>  %endif
  9807                              <1> %assign __break__ __break__ + 1
  9808                              <1> %assign __cont__ __cont__ + 1
  9809                              <1> %$begin:
  9810                              <1> cat_lable %$cont,__level__
  9811                              <2> %1%2:
  9812                              <1> %if %0 > 0
  9813                              <1>  %rep %0 -1
  9814                              <1>  %1
  9815                              <1>  %rotate 1
  9816                              <1>  %endrep
  9817 00000972 833F00              <2>  %1
  9818                              <2>  %rotate 1
  9819 00000975 7434                <1>  j%-1 %$end
  9820                              <1> %endif
  9821 00000977 E8E6FE                  		call reg_setup_base_addr
  9822 0000097A E835FF                  		call reg_probe_exist
  9823 0000097D E88DFF                  		call reg_reset
  9824 00000980 31F6                    		xor si,si
  9825                                  		while {cmp si, byte 2}, b
  9826                              <1> con_push while
  9827                              <2>  %assign __lastlevel__ __level__
  9828                              <2>  %assign __level__ __level__ + 1
  9829                              <2>  %if __return__ > 0
  9830                              <2>  %assign con_return 1
  9831                              <2>  %else
  9832                              <2>  %assign con_return 0
  9833                              <2>  %endif
  9834                              <2> 
  9835                              <2>  %if __cont__ > 0
  9836                              <2>  %assign con_cont 1
  9837                              <2>  %else
  9838                              <2>  %assign con_cont 0
  9839                              <2>  %endif
  9840                              <2>  %if __break__ > 0
  9841                              <2>  %assign con_break 1
  9842                              <2>  %else
  9843                              <2>  %assign con_break 0
  9844                              <2>  %endif
  9845                              <2> 
  9846                              <2>  %ifidn %1,proc
  9847                              <2>  %assign con_return 0
  9848                              <2>  %elifidn %1,forcx
  9849                              <2>  %assign con_break 0
  9850                              <2>  %elifidn %1,repeat
  9851                              <2>  %assign con_cont 0
  9852                              <2>  %assign con_break 0
  9853                              <2>  %elifidn %1,while
  9854                              <2>  %assign con_cont 0
  9855                              <2>  %assign con_break 0
  9856                              <2>  %endif
  9857                              <2> 
  9858                              <2>  %if __cndblock__ == 1
  9859                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  9860                              <2>  %endif
  9861                              <2> 
  9862                              <2>  %push %1
  9863                              <2>  %if con_return
  9864                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  9865                              <3> %define %1%2 %3%4
  9866                              <2>  %endif
  9867                              <2>  %if con_break
  9868                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  9869                              <2>  %endif
  9870                              <2>  %if con_cont
  9871                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  9872                              <2>  %endif
  9873                              <2> 
  9874                              <2>  %ifidn %1,andblock
  9875                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9876                              <2>  %elifidn %1,orblock
  9877                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9878                              <2>  %endif
  9879                              <1> %assign __break__ __break__ + 1
  9880                              <1> %assign __cont__ __cont__ + 1
  9881                              <1> %$begin:
  9882                              <1> cat_lable %$cont,__level__
  9883                              <2> %1%2:
  9884                              <1> %if %0 > 0
  9885                              <1>  %rep %0 -1
  9886                              <1>  %1
  9887                              <1>  %rotate 1
  9888                              <1>  %endrep
  9889 00000982 83FE02              <2>  %1
  9890                              <2>  %rotate 1
  9891 00000985 7320                <1>  j%-1 %$end
  9892                              <1> %endif
  9893                                  			if {cmp byte[reg_dev_info+si],0},ne
  9894                              <1>  %rep %0 -1
  9895                              <1>  %1
  9896                              <1>  %rotate 1
  9897                              <1>  %endrep
  9898 00000987 80BC[0500]00        <2>  %1
  9899                              <2>  %rotate 1
  9900                              <1> 
  9901                              <1>  con_push if
  9902                              <2>  %assign __lastlevel__ __level__
  9903                              <2>  %assign __level__ __level__ + 1
  9904                              <2>  %if __return__ > 0
  9905                              <2>  %assign con_return 1
  9906                              <2>  %else
  9907                              <2>  %assign con_return 0
  9908                              <2>  %endif
  9909                              <2> 
  9910                              <2>  %if __cont__ > 0
  9911                              <2>  %assign con_cont 1
  9912                              <2>  %else
  9913                              <2>  %assign con_cont 0
  9914                              <2>  %endif
  9915                              <2>  %if __break__ > 0
  9916                              <2>  %assign con_break 1
  9917                              <2>  %else
  9918                              <2>  %assign con_break 0
  9919                              <2>  %endif
  9920                              <2> 
  9921                              <2>  %ifidn %1,proc
  9922                              <2>  %assign con_return 0
  9923                              <2>  %elifidn %1,forcx
  9924                              <2>  %assign con_break 0
  9925                              <2>  %elifidn %1,repeat
  9926                              <2>  %assign con_cont 0
  9927                              <2>  %assign con_break 0
  9928                              <2>  %elifidn %1,while
  9929                              <2>  %assign con_cont 0
  9930                              <2>  %assign con_break 0
  9931                              <2>  %endif
  9932                              <2> 
  9933                              <2>  %if __cndblock__ == 1
  9934                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  9935                              <2>  %endif
  9936                              <2> 
  9937                              <2>  %push %1
  9938                              <2>  %if con_return
  9939                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  9940                              <3> %define %1%2 %3%4
  9941                              <2>  %endif
  9942                              <2>  %if con_break
  9943                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  9944                              <3> %define %1%2 %3%4
  9945                              <2>  %endif
  9946                              <2>  %if con_cont
  9947                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  9948                              <3> %define %1%2 %3%4
  9949                              <2>  %endif
  9950                              <2> 
  9951                              <2>  %ifidn %1,andblock
  9952                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9953                              <2>  %elifidn %1,orblock
  9954                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9955                              <2>  %endif
  9956                              <1> 
  9957                              <1>  %if %0 > 0
  9958 0000098C 7416                <1>  j%-1 %$ifnot
  9959                              <1>  %endif
  9960                              <1>  %assign %$elif_level 0
  9961 0000098E 89F0                    				mov ax,si
  9962 00000990 E838FF                  				call reg_check_dev_type
  9963 00000993 A2[0500]                				mov [reg_dev_info],al
  9964                                  				if {cmp al,REG_CONFIG_TYPE_ATAPI},e
  9965                              <1>  %rep %0 -1
  9966                              <1>  %1
  9967                              <1>  %rotate 1
  9968                              <1>  %endrep
  9969 00000996 3C03                <2>  %1
  9970                              <2>  %rotate 1
  9971                              <1> 
  9972                              <1>  con_push if
  9973                              <2>  %assign __lastlevel__ __level__
  9974                              <2>  %assign __level__ __level__ + 1
  9975                              <2>  %if __return__ > 0
  9976                              <2>  %assign con_return 1
  9977                              <2>  %else
  9978                              <2>  %assign con_return 0
  9979                              <2>  %endif
  9980                              <2> 
  9981                              <2>  %if __cont__ > 0
  9982                              <2>  %assign con_cont 1
  9983                              <2>  %else
  9984                              <2>  %assign con_cont 0
  9985                              <2>  %endif
  9986                              <2>  %if __break__ > 0
  9987                              <2>  %assign con_break 1
  9988                              <2>  %else
  9989                              <2>  %assign con_break 0
  9990                              <2>  %endif
  9991                              <2> 
  9992                              <2>  %ifidn %1,proc
  9993                              <2>  %assign con_return 0
  9994                              <2>  %elifidn %1,forcx
  9995                              <2>  %assign con_break 0
  9996                              <2>  %elifidn %1,repeat
  9997                              <2>  %assign con_cont 0
  9998                              <2>  %assign con_break 0
  9999                              <2>  %elifidn %1,while
 10000                              <2>  %assign con_cont 0
 10001                              <2>  %assign con_break 0
 10002                              <2>  %endif
 10003                              <2> 
 10004                              <2>  %if __cndblock__ == 1
 10005                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 10006                              <2>  %endif
 10007                              <2> 
 10008                              <2>  %push %1
 10009                              <2>  %if con_return
 10010                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 10011                              <3> %define %1%2 %3%4
 10012                              <2>  %endif
 10013                              <2>  %if con_break
 10014                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 10015                              <3> %define %1%2 %3%4
 10016                              <2>  %endif
 10017                              <2>  %if con_cont
 10018                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 10019                              <3> %define %1%2 %3%4
 10020                              <2>  %endif
 10021                              <2> 
 10022                              <2>  %ifidn %1,andblock
 10023                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 10024                              <2>  %elifidn %1,orblock
 10025                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 10026                              <2>  %endif
 10027                              <1> 
 10028                              <1>  %if %0 > 0
 10029 00000998 750A                <1>  j%-1 %$ifnot
 10030                              <1>  %endif
 10031                              <1>  %assign %$elif_level 0
 10032                                  					; Add it to the list
 10033 0000099A FF06[0700]              					inc word [atapi_dev_count]
 10034 0000099E 89D8                    					mov ax,bx
 10035 000009A0 AB                      					stosw
 10036 000009A1 89F0                    					mov ax,si
 10037 000009A3 AB                      					stosw
 10038                                  				endif
 10039                              <1>  %assign elselevel 0
 10040                              <1>  %ifctx if
 10041                              <1>  %$ifnot:
 10042                              <1>  con_pop
 10043                              <2>  %pop
 10044                              <2>  %assign __level__ __level__ - 1
 10045                              <1>  %elifctx else
 10046                              <1>  %assign elselevel %$elif_level
 10047                              <1>  %$ifend:
 10048                              <1>  con_pop
 10049                              <1>  %elifctx elif
 10050                              <1>  %assign elselevel %$elif_level
 10051                              <1>  %$ifnot:
 10052                              <1>  con_pop
 10053                              <1>  %else
 10054                              <1>  %error "expected `if' or `else' before `endif'"
 10055                              <1>  %endif
 10056                              <1>  %rep elselevel
 10057                              <1>  %$ifend:
 10058                              <1>  con_pop
 10059                              <1>  %endrep
 10060                                  			endif
 10061                              <1>  %assign elselevel 0
 10062                              <1>  %ifctx if
 10063                              <1>  %$ifnot:
 10064                              <1>  con_pop
 10065                              <2>  %pop
 10066                              <2>  %assign __level__ __level__ - 1
 10067                              <1>  %elifctx else
 10068                              <1>  %assign elselevel %$elif_level
 10069                              <1>  %$ifend:
 10070                              <1>  con_pop
 10071                              <1>  %elifctx elif
 10072                              <1>  %assign elselevel %$elif_level
 10073                              <1>  %$ifnot:
 10074                              <1>  con_pop
 10075                              <1>  %else
 10076                              <1>  %error "expected `if' or `else' before `endif'"
 10077                              <1>  %endif
 10078                              <1>  %rep elselevel
 10079                              <1>  %$ifend:
 10080                              <1>  con_pop
 10081                              <1>  %endrep
 10082 000009A4 46                      			inc si
 10083                                  		endwhile
 10084                              <1>  %ifctx while
 10085 000009A5 EBDB                <1>  jmp %$begin
 10086                              <1>  %$end:
 10087                              <1>  cat_lable %$break,__level__
 10088                              <2> %1%2:
 10089                              <1>  %else
 10090                              <1>  %error "expected `while' before `endwhile'"
 10091                              <1>  %endif
 10092                              <1> con_pop
 10093                              <2>  %pop
 10094                              <2>  %assign __level__ __level__ - 1
 10095                              <1> %assign __break__ __break__ + 1
 10096                              <1> %assign __cont__ __cont__ + 1
 10097 000009A7 43                      		inc bx
 10098 000009A8 43                      		inc bx
 10099                                  	endwhile
 10100                              <1>  %ifctx while
 10101 000009A9 EBC7                <1>  jmp %$begin
 10102                              <1>  %$end:
 10103                              <1>  cat_lable %$break,__level__
 10104                              <2> %1%2:
 10105                              <1>  %else
 10106                              <1>  %error "expected `while' before `endwhile'"
 10107                              <1>  %endif
 10108                              <1> con_pop
 10109                              <2>  %pop
 10110                              <2>  %assign __level__ __level__ - 1
 10111                              <1> %assign __break__ __break__ + 1
 10112                              <1> %assign __cont__ __cont__ + 1
 10113 000009AB 8B0E[0700]              	mov cx, [atapi_dev_count]
 10114                                  endp
 10115                              <1> %ifnctx proc
 10116                              <1>  %error "expected `proc' before `endp'"
 10117                              <1> %endif
 10118                              <1>  cat_lable %$return,__level__
 10119                              <2> %1%2:
 10120                              <1>  %if __save_all__ ==1
 10121                              <1>  popa
 10122                              <1>  %elif __save_all__ == 2
 10123                              <1>  popad
 10124                              <1>  %elif __save_args__ > 0
 10125                              <1>  %assign i 1
 10126                              <1>  %rep __save_args__
 10127                              <1>  linecat pop, %$save_argv,i
 10128                              <1>  %assign i i+1
 10129                              <1>  %endrep
 10130                              <2>  linecat pop, %$save_argv,i
 10131 000009AF 5F                  <3>  %1 %2%3
 10132                              <2>  %assign i i+1
 10133                              <2>  linecat pop, %$save_argv,i
 10134 000009B0 5E                  <3>  %1 %2%3
 10135                              <2>  %assign i i+1
 10136                              <2>  linecat pop, %$save_argv,i
 10137 000009B1 5B                  <3>  %1 %2%3
 10138                              <2>  %assign i i+1
 10139                              <2>  linecat pop, %$save_argv,i
 10140 000009B2 58                  <3>  %1 %2%3
 10141                              <2>  %assign i i+1
 10142                              <1>  %endif
 10143                              <1>  %if __have_frame__ > 0
 10144                              <1>  leave
 10145                              <1>  %endif
 10146                              <1> 
 10147                              <1>  %assign i 0
 10148                              <1>  %rep %$proc_args
 10149                              <1> 
 10150                              <1>  %assign i i+1
 10151                              <1>  %endrep
 10152                              <1> 
 10153                              <1>  %assign i 0
 10154                              <1>  %rep %$local_args
 10155                              <1> 
 10156                              <1>  %assign i i+1
 10157                              <1>  %endrep
 10158 000009B3 C3                  <1>  ret
 10159                              <1>  con_pop
 10160                              <2>  %pop
 10161                              <2>  %assign __level__ __level__ - 1
 10162                              <1>  %assign __return__ __return__ - 1
 10163                                  
 10164                                  
 10165                                  select_atapi:
 10166 000009B4 3B06[0000]              	cmp ax, [atapi_cur_dev]
 10167 000009B8 7502                    	jne select_atapi_force
 10168 000009BA F8                      	clc
 10169 000009BB C3                      	ret
 10170                                  
 10171                                  proc select_atapi_force
 10172                              <1> GLOBAL %1
 10173                              <1> %1:
 10174                              <1> con_push proc
 10175                              <2>  %assign __lastlevel__ __level__
 10176                              <2>  %assign __level__ __level__ + 1
 10177                              <2>  %if __return__ > 0
 10178                              <2>  %assign con_return 1
 10179                              <2>  %else
 10180                              <2>  %assign con_return 0
 10181                              <2>  %endif
 10182                              <2> 
 10183                              <2>  %if __cont__ > 0
 10184                              <2>  %assign con_cont 1
 10185                              <2>  %else
 10186                              <2>  %assign con_cont 0
 10187                              <2>  %endif
 10188                              <2>  %if __break__ > 0
 10189                              <2>  %assign con_break 1
 10190                              <2>  %else
 10191                              <2>  %assign con_break 0
 10192                              <2>  %endif
 10193                              <2> 
 10194                              <2>  %ifidn %1,proc
 10195                              <2>  %assign con_return 0
 10196                              <2>  %elifidn %1,forcx
 10197                              <2>  %assign con_break 0
 10198                              <2>  %elifidn %1,repeat
 10199                              <2>  %assign con_cont 0
 10200                              <2>  %assign con_break 0
 10201                              <2>  %elifidn %1,while
 10202                              <2>  %assign con_cont 0
 10203                              <2>  %assign con_break 0
 10204                              <2>  %endif
 10205                              <2> 
 10206                              <2>  %if __cndblock__ == 1
 10207                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 10208                              <2>  %endif
 10209                              <2> 
 10210                              <2>  %push %1
 10211                              <2>  %if con_return
 10212                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 10213                              <2>  %endif
 10214                              <2>  %if con_break
 10215                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 10216                              <3> %define %1%2 %3%4
 10217                              <2>  %endif
 10218                              <2>  %if con_cont
 10219                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 10220                              <3> %define %1%2 %3%4
 10221                              <2>  %endif
 10222                              <2> 
 10223                              <2>  %ifidn %1,andblock
 10224                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 10225                              <2>  %elifidn %1,orblock
 10226                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 10227                              <2>  %endif
 10228                              <1> %assign __return__ __return__ + 1
 10229                              <1> %assign __have_frame__ 0
 10230                              <1> %assign %$have_local 0
 10231                              <1> %assign %$have_save 0
 10232                              <1> %assign __save_all__ 0
 10233                              <1> %assign %$local_args 0
 10234                              <1> %assign %$proc_args 0
 10235                              <1> %assign __save_args__ 0
 10236                              <1> %if %0 > 1
 10237                              <1>  %assign args %0 - 1
 10238                              <1>  %assign %$bp_off 4
 10239                              <1>  %assign i 0
 10240                              <1>  %rotate 1
 10241                              <1>  %ifidn %1,withlocal
 10242                              <1>  %assign %$have_local 1
 10243                              <1>  %assign args args -1
 10244                              <1>  %rotate 1
 10245                              <1>  %endif
 10246                              <1>  %assign %$proc_args args
 10247                              <1>  %rep args
 10248                              <1> 
 10249                              <1>  %%inputarg__%1 EQU %$bp_off
 10250                              <1>  %undef .%1
 10251                              <1>  %define .%1 %%inputarg__%1+bp
 10252                              <1>  cat_define %$proc_argv ,i,%1
 10253                              <1>  %assign %$bp_off %$bp_off + 2
 10254                              <1>  %assign i i+1
 10255                              <1>  %rotate 1
 10256                              <1>  %endrep
 10257                              <1>  %if %$have_local==0
 10258                              <1>  enter 0,0
 10259                              <1>  %assign __have_frame__ 1
 10260                              <1>  %endif
 10261                              <1> %endif
 10262                                  ; input: ax = dev number
 10263                                  ; return: cf =0 success, cf =1 failed
 10264                                  	save all
 10265                              <1> %ifctx proc
 10266                              <1>  %if %$have_local == 1
 10267                              <1>  %error "`save' must after `local'"
 10268                              <1>  %endif
 10269                              <1> 
 10270                              <1>  %ifidn all,%1
 10271                              <1>  %assign __save_all__ 1
 10272                              <1>  %if %0 > 1
 10273                              <1>  %ifidn frame,%2
 10274                              <1>  %if __have_frame__ == 0
 10275                              <1>  enter 0,0
 10276                              <1>  %assign __have_frame__ 1
 10277                              <1>  %assign local_off 0
 10278                              <1>  %endif
 10279                              <1>  %endif
 10280                              <1>  %endif
 10281 000009BC 60                  <1>  pusha
 10282                              <1>  %if __have_frame__ == 1
 10283                              <1>  %undef __AX
 10284                              <1>  %undef __BX
 10285                              <1>  %undef __CX
 10286                              <1>  %undef __DX
 10287                              <1>  %undef __SI
 10288                              <1>  %undef __DI
 10289                              <1>  %idefine __AX bp-local_off - 2
 10290                              <1>  %idefine __CX bp-local_off - 4
 10291                              <1>  %idefine __DX bp-local_off - 6
 10292                              <1>  %idefine __BX bp-local_off - 8
 10293                              <1> 
 10294                              <1> 
 10295                              <1>  %idefine __SI bp-local_off - 14
 10296                              <1>  %idefine __DI bp-local_off - 16
 10297                              <1>  %endif
 10298                              <1>  %elifidn alld,%1
 10299                              <1>  %assign __save_all__ 2
 10300                              <1>  %if %0 > 1
 10301                              <1>  %ifidn frame,%2
 10302                              <1>  %if __have_frame__ == 0
 10303                              <1>  enter 0,0
 10304                              <1>  %assign __have_frame__ 1
 10305                              <1>  %assign local_off 0
 10306                              <1>  %endif
 10307                              <1>  %endif
 10308                              <1>  %endif
 10309                              <1>  pushad
 10310                              <1>  %if __have_frame__ == 1
 10311                              <1>  %undef __EAX
 10312                              <1>  %undef __EBX
 10313                              <1>  %undef __ECX
 10314                              <1>  %undef __EDX
 10315                              <1>  %undef __ESI
 10316                              <1>  %undef __EDI
 10317                              <1>  %idefine __EAX bp-local_off - 4
 10318                              <1>  %idefine __ECX bp-local_off - 8
 10319                              <1>  %idefine __EDX bp-local_off - 12
 10320                              <1>  %idefine __EBX bp-local_off - 16
 10321                              <1> 
 10322                              <1> 
 10323                              <1>  %idefine __ESI bp-local_off - 18
 10324                              <1>  %idefine __EDI bp-local_off - 32
 10325                              <1>  %endif
 10326                              <1> 
 10327                              <1>  %else
 10328                              <1>  %assign __save_args__ %0
 10329                              <1>  %assign __save_all__ 0
 10330                              <1>  %assign i %0
 10331                              <1>  %rep %0
 10332                              <1>  push %1
 10333                              <1>  cat_define %$save_argv ,i,%1
 10334                              <1>  %rotate 1
 10335                              <1>  %assign i i - 1
 10336                              <1>  %endrep
 10337                              <1>  %endif
 10338                              <1> %else
 10339                              <1>  %error "`save' must after `proc'"
 10340                              <1> %endif
 10341 000009BD 06                      	push es
 10342 000009BE 0E                      	push cs
 10343 000009BF 07                      	pop es
 10344                                  
 10345 000009C0 3B06[0700]              	cmp ax, [atapi_dev_count]
 10346 000009C4 7203                    	jb .continue
 10347 000009C6 F9                      	stc
 10348 000009C7 EB24                    	jmp short .end
 10349                                  
 10350                                  .continue:
 10351 000009C9 A3[0000]                	mov [atapi_cur_dev], ax
 10352                                  
 10353 000009CC BE[0900]                	mov si, atapi_dev_base
 10354 000009CF C1E002                  	shl ax, 2
 10355 000009D2 01C6                    	add si, ax
 10356 000009D4 8B1C                    	mov bx, [si]
 10357 000009D6 E887FE                  	call reg_setup_base_addr
 10358 000009D9 8B5C02                  	mov bx,[si+2]
 10359 000009DC 89D8                    	mov ax,bx
 10360 000009DE E81EFC                  	call set_timeout
 10361 000009E1 E85EFC                  	call reg_select_dev
 10362 000009E4 8AA7[0200]              	mov ah,byte [bx+cmd_select_dev]
 10363 000009E8 8826[0200]              	mov [reg_cur_dev],ah
 10364                                  .ok:
 10365 000009EC F8                      	clc
 10366                                  .end:
 10367 000009ED 07                      	pop es
 10368                                  endp
 10369                              <1> %ifnctx proc
 10370                              <1>  %error "expected `proc' before `endp'"
 10371                              <1> %endif
 10372                              <1>  cat_lable %$return,__level__
 10373                              <2> %1%2:
 10374                              <1>  %if __save_all__ ==1
 10375 000009EE 61                  <1>  popa
 10376                              <1>  %elif __save_all__ == 2
 10377                              <1>  popad
 10378                              <1>  %elif __save_args__ > 0
 10379                              <1>  %assign i 1
 10380                              <1>  %rep __save_args__
 10381                              <1>  linecat pop, %$save_argv,i
 10382                              <1>  %assign i i+1
 10383                              <1>  %endrep
 10384                              <1>  %endif
 10385                              <1>  %if __have_frame__ > 0
 10386                              <1>  leave
 10387                              <1>  %endif
 10388                              <1> 
 10389                              <1>  %assign i 0
 10390                              <1>  %rep %$proc_args
 10391                              <1> 
 10392                              <1>  %assign i i+1
 10393                              <1>  %endrep
 10394                              <1> 
 10395                              <1>  %assign i 0
 10396                              <1>  %rep %$local_args
 10397                              <1> 
 10398                              <1>  %assign i i+1
 10399                              <1>  %endrep
 10400 000009EF C3                  <1>  ret
 10401                              <1>  con_pop
 10402                              <2>  %pop
 10403                              <2>  %assign __level__ __level__ - 1
 10404                              <1>  %assign __return__ __return__ - 1
 10405                                  
 10406                                  proc clear_atapi_buffer
 10407                              <1> GLOBAL %1
 10408                              <1> %1:
 10409                              <1> con_push proc
 10410                              <2>  %assign __lastlevel__ __level__
 10411                              <2>  %assign __level__ __level__ + 1
 10412                              <2>  %if __return__ > 0
 10413                              <2>  %assign con_return 1
 10414                              <2>  %else
 10415                              <2>  %assign con_return 0
 10416                              <2>  %endif
 10417                              <2> 
 10418                              <2>  %if __cont__ > 0
 10419                              <2>  %assign con_cont 1
 10420                              <2>  %else
 10421                              <2>  %assign con_cont 0
 10422                              <2>  %endif
 10423                              <2>  %if __break__ > 0
 10424                              <2>  %assign con_break 1
 10425                              <2>  %else
 10426                              <2>  %assign con_break 0
 10427                              <2>  %endif
 10428                              <2> 
 10429                              <2>  %ifidn %1,proc
 10430                              <2>  %assign con_return 0
 10431                              <2>  %elifidn %1,forcx
 10432                              <2>  %assign con_break 0
 10433                              <2>  %elifidn %1,repeat
 10434                              <2>  %assign con_cont 0
 10435                              <2>  %assign con_break 0
 10436                              <2>  %elifidn %1,while
 10437                              <2>  %assign con_cont 0
 10438                              <2>  %assign con_break 0
 10439                              <2>  %endif
 10440                              <2> 
 10441                              <2>  %if __cndblock__ == 1
 10442                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 10443                              <2>  %endif
 10444                              <2> 
 10445                              <2>  %push %1
 10446                              <2>  %if con_return
 10447                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 10448                              <2>  %endif
 10449                              <2>  %if con_break
 10450                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 10451                              <3> %define %1%2 %3%4
 10452                              <2>  %endif
 10453                              <2>  %if con_cont
 10454                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 10455                              <3> %define %1%2 %3%4
 10456                              <2>  %endif
 10457                              <2> 
 10458                              <2>  %ifidn %1,andblock
 10459                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 10460                              <2>  %elifidn %1,orblock
 10461                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 10462                              <2>  %endif
 10463                              <1> %assign __return__ __return__ + 1
 10464                              <1> %assign __have_frame__ 0
 10465                              <1> %assign %$have_local 0
 10466                              <1> %assign %$have_save 0
 10467                              <1> %assign __save_all__ 0
 10468                              <1> %assign %$local_args 0
 10469                              <1> %assign %$proc_args 0
 10470                              <1> %assign __save_args__ 0
 10471                              <1> %if %0 > 1
 10472                              <1>  %assign args %0 - 1
 10473                              <1>  %assign %$bp_off 4
 10474                              <1>  %assign i 0
 10475                              <1>  %rotate 1
 10476                              <1>  %ifidn %1,withlocal
 10477                              <1>  %assign %$have_local 1
 10478                              <1>  %assign args args -1
 10479                              <1>  %rotate 1
 10480                              <1>  %endif
 10481                              <1>  %assign %$proc_args args
 10482                              <1>  %rep args
 10483                              <1> 
 10484                              <1>  %%inputarg__%1 EQU %$bp_off
 10485                              <1>  %undef .%1
 10486                              <1>  %define .%1 %%inputarg__%1+bp
 10487                              <1>  cat_define %$proc_argv ,i,%1
 10488                              <1>  %assign %$bp_off %$bp_off + 2
 10489                              <1>  %assign i i+1
 10490                              <1>  %rotate 1
 10491                              <1>  %endrep
 10492                              <1>  %if %$have_local==0
 10493                              <1>  enter 0,0
 10494                              <1>  %assign __have_frame__ 1
 10495                              <1>  %endif
 10496                              <1> %endif
 10497                                  	save all
 10498                              <1> %ifctx proc
 10499                              <1>  %if %$have_local == 1
 10500                              <1>  %error "`save' must after `local'"
 10501                              <1>  %endif
 10502                              <1> 
 10503                              <1>  %ifidn all,%1
 10504                              <1>  %assign __save_all__ 1
 10505                              <1>  %if %0 > 1
 10506                              <1>  %ifidn frame,%2
 10507                              <1>  %if __have_frame__ == 0
 10508                              <1>  enter 0,0
 10509                              <1>  %assign __have_frame__ 1
 10510                              <1>  %assign local_off 0
 10511                              <1>  %endif
 10512                              <1>  %endif
 10513                              <1>  %endif
 10514 000009F0 60                  <1>  pusha
 10515                              <1>  %if __have_frame__ == 1
 10516                              <1>  %undef __AX
 10517                              <1>  %undef __BX
 10518                              <1>  %undef __CX
 10519                              <1>  %undef __DX
 10520                              <1>  %undef __SI
 10521                              <1>  %undef __DI
 10522                              <1>  %idefine __AX bp-local_off - 2
 10523                              <1>  %idefine __CX bp-local_off - 4
 10524                              <1>  %idefine __DX bp-local_off - 6
 10525                              <1>  %idefine __BX bp-local_off - 8
 10526                              <1> 
 10527                              <1> 
 10528                              <1>  %idefine __SI bp-local_off - 14
 10529                              <1>  %idefine __DI bp-local_off - 16
 10530                              <1>  %endif
 10531                              <1>  %elifidn alld,%1
 10532                              <1>  %assign __save_all__ 2
 10533                              <1>  %if %0 > 1
 10534                              <1>  %ifidn frame,%2
 10535                              <1>  %if __have_frame__ == 0
 10536                              <1>  enter 0,0
 10537                              <1>  %assign __have_frame__ 1
 10538                              <1>  %assign local_off 0
 10539                              <1>  %endif
 10540                              <1>  %endif
 10541                              <1>  %endif
 10542                              <1>  pushad
 10543                              <1>  %if __have_frame__ == 1
 10544                              <1>  %undef __EAX
 10545                              <1>  %undef __EBX
 10546                              <1>  %undef __ECX
 10547                              <1>  %undef __EDX
 10548                              <1>  %undef __ESI
 10549                              <1>  %undef __EDI
 10550                              <1>  %idefine __EAX bp-local_off - 4
 10551                              <1>  %idefine __ECX bp-local_off - 8
 10552                              <1>  %idefine __EDX bp-local_off - 12
 10553                              <1>  %idefine __EBX bp-local_off - 16
 10554                              <1> 
 10555                              <1> 
 10556                              <1>  %idefine __ESI bp-local_off - 18
 10557                              <1>  %idefine __EDI bp-local_off - 32
 10558                              <1>  %endif
 10559                              <1> 
 10560                              <1>  %else
 10561                              <1>  %assign __save_args__ %0
 10562                              <1>  %assign __save_all__ 0
 10563                              <1>  %assign i %0
 10564                              <1>  %rep %0
 10565                              <1>  push %1
 10566                              <1>  cat_define %$save_argv ,i,%1
 10567                              <1>  %rotate 1
 10568                              <1>  %assign i i - 1
 10569                              <1>  %endrep
 10570                              <1>  %endif
 10571                              <1> %else
 10572                              <1>  %error "`save' must after `proc'"
 10573                              <1> %endif
 10574 000009F1 FC                      	cld
 10575 000009F2 06                      	push es
 10576 000009F3 0E                      	push cs
 10577 000009F4 07                      	pop es
 10578 000009F5 BF[AD00]                	mov di, atapi_tmp_buffer
 10579 000009F8 B98000                  	mov cx, 128
 10580 000009FB 30C0                    	xor al, al
 10581 000009FD AA                      	stosb
 10582 000009FE BF[9D00]                	mov di, atapi_cmd_buffer
 10583 00000A01 B91000                  	mov cx, 16
 10584 00000A04 AA                      	stosb
 10585 00000A05 07                      	pop es
 10586                                  endp
 10587                              <1> %ifnctx proc
 10588                              <1>  %error "expected `proc' before `endp'"
 10589                              <1> %endif
 10590                              <1>  cat_lable %$return,__level__
 10591                              <2> %1%2:
 10592                              <1>  %if __save_all__ ==1
 10593 00000A06 61                  <1>  popa
 10594                              <1>  %elif __save_all__ == 2
 10595                              <1>  popad
 10596                              <1>  %elif __save_args__ > 0
 10597                              <1>  %assign i 1
 10598                              <1>  %rep __save_args__
 10599                              <1>  linecat pop, %$save_argv,i
 10600                              <1>  %assign i i+1
 10601                              <1>  %endrep
 10602                              <1>  %endif
 10603                              <1>  %if __have_frame__ > 0
 10604                              <1>  leave
 10605                              <1>  %endif
 10606                              <1> 
 10607                              <1>  %assign i 0
 10608                              <1>  %rep %$proc_args
 10609                              <1> 
 10610                              <1>  %assign i i+1
 10611                              <1>  %endrep
 10612                              <1> 
 10613                              <1>  %assign i 0
 10614                              <1>  %rep %$local_args
 10615                              <1> 
 10616                              <1>  %assign i i+1
 10617                              <1>  %endrep
 10618 00000A07 C3                  <1>  ret
 10619                              <1>  con_pop
 10620                              <2>  %pop
 10621                              <2>  %assign __level__ __level__ - 1
 10622                              <1>  %assign __return__ __return__ - 1
 10623                                  
 10624                                  proc get_atapi_sense
 10625                              <1> GLOBAL %1
 10626                              <1> %1:
 10627                              <1> con_push proc
 10628                              <2>  %assign __lastlevel__ __level__
 10629                              <2>  %assign __level__ __level__ + 1
 10630                              <2>  %if __return__ > 0
 10631                              <2>  %assign con_return 1
 10632                              <2>  %else
 10633                              <2>  %assign con_return 0
 10634                              <2>  %endif
 10635                              <2> 
 10636                              <2>  %if __cont__ > 0
 10637                              <2>  %assign con_cont 1
 10638                              <2>  %else
 10639                              <2>  %assign con_cont 0
 10640                              <2>  %endif
 10641                              <2>  %if __break__ > 0
 10642                              <2>  %assign con_break 1
 10643                              <2>  %else
 10644                              <2>  %assign con_break 0
 10645                              <2>  %endif
 10646                              <2> 
 10647                              <2>  %ifidn %1,proc
 10648                              <2>  %assign con_return 0
 10649                              <2>  %elifidn %1,forcx
 10650                              <2>  %assign con_break 0
 10651                              <2>  %elifidn %1,repeat
 10652                              <2>  %assign con_cont 0
 10653                              <2>  %assign con_break 0
 10654                              <2>  %elifidn %1,while
 10655                              <2>  %assign con_cont 0
 10656                              <2>  %assign con_break 0
 10657                              <2>  %endif
 10658                              <2> 
 10659                              <2>  %if __cndblock__ == 1
 10660                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 10661                              <2>  %endif
 10662                              <2> 
 10663                              <2>  %push %1
 10664                              <2>  %if con_return
 10665                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 10666                              <2>  %endif
 10667                              <2>  %if con_break
 10668                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 10669                              <3> %define %1%2 %3%4
 10670                              <2>  %endif
 10671                              <2>  %if con_cont
 10672                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 10673                              <3> %define %1%2 %3%4
 10674                              <2>  %endif
 10675                              <2> 
 10676                              <2>  %ifidn %1,andblock
 10677                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 10678                              <2>  %elifidn %1,orblock
 10679                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 10680                              <2>  %endif
 10681                              <1> %assign __return__ __return__ + 1
 10682                              <1> %assign __have_frame__ 0
 10683                              <1> %assign %$have_local 0
 10684                              <1> %assign %$have_save 0
 10685                              <1> %assign __save_all__ 0
 10686                              <1> %assign %$local_args 0
 10687                              <1> %assign %$proc_args 0
 10688                              <1> %assign __save_args__ 0
 10689                              <1> %if %0 > 1
 10690                              <1>  %assign args %0 - 1
 10691                              <1>  %assign %$bp_off 4
 10692                              <1>  %assign i 0
 10693                              <1>  %rotate 1
 10694                              <1>  %ifidn %1,withlocal
 10695                              <1>  %assign %$have_local 1
 10696                              <1>  %assign args args -1
 10697                              <1>  %rotate 1
 10698                              <1>  %endif
 10699                              <1>  %assign %$proc_args args
 10700                              <1>  %rep args
 10701                              <1> 
 10702                              <1>  %%inputarg__%1 EQU %$bp_off
 10703                              <1>  %undef .%1
 10704                              <1>  %define .%1 %%inputarg__%1+bp
 10705                              <1>  cat_define %$proc_argv ,i,%1
 10706                              <1>  %assign %$bp_off %$bp_off + 2
 10707                              <1>  %assign i i+1
 10708                              <1>  %rotate 1
 10709                              <1>  %endrep
 10710                              <1>  %if %$have_local==0
 10711                              <1>  enter 0,0
 10712                              <1>  %assign __have_frame__ 1
 10713                              <1>  %endif
 10714                              <1> %endif
 10715                                  ; return: cf =0 success, al = sense key, bl = asc, bh = ascq
 10716                                  ;	  cf =1 failed 
 10717 00000A08 E8E5FF                  	call clear_atapi_buffer
 10718 00000A0B C606[9D00]03            	mov byte [atapi_cmd_buffer], 0x03
 10719 00000A10 C606[A100]20            	mov byte [atapi_cmd_buffer+4], 32
 10720                                  	invoke reg_packet,byte,0,cs, atapi_tmp_buffer, 128
 10721                              <1>  %if %0 == 2
 10722                              <1>  push word %1
 10723                              <1>  %assign rargc 1
 10724                              <1>  %else
 10725                              <1>  %rotate -2
 10726                              <1>  %assign argc %0-1
 10727                              <1>  %assign rargc 0
 10728                              <1>  %rep argc
 10729                              <1>  %ifidn %1,byte
 10730                              <1>  push byte %2
 10731                              <1>  %rotate -1
 10732                              <1>  %assign argc argc -1
 10733                              <1>  %assign rargc rargc +1
 10734                              <1>  %elifidn %1,word
 10735                              <1>  push word %2
 10736                              <1>  %rotate -1
 10737                              <1>  %assign argc argc -1
 10738                              <1>  %assign rargc rargc +1
 10739                              <1>  %elifidn %1,dword
 10740                              <1>  push dword %2
 10741                              <1>  %rotate -1
 10742                              <1>  %assign argc argc -1
 10743                              <1>  %assign rargc rargc +2
 10744                              <1>  %else
 10745                              <1>  push word %2
 10746                              <1>  %assign rargc rargc +1
 10747                              <1>  %endif
 10748                              <1>  %rotate -1
 10749                              <1>  %assign argc argc -1
 10750                              <1>  %if argc <=0
 10751                              <1>  %exitrep
 10752                              <1>  %endif
 10753                              <1>  %endrep
 10754                              <2>  %ifidn %1,byte
 10755                              <2>  push byte %2
 10756                              <2>  %rotate -1
 10757                              <2>  %assign argc argc -1
 10758                              <2>  %assign rargc rargc +1
 10759                              <2>  %elifidn %1,word
 10760                              <2>  push word %2
 10761                              <2>  %rotate -1
 10762                              <2>  %assign argc argc -1
 10763                              <2>  %assign rargc rargc +1
 10764                              <2>  %elifidn %1,dword
 10765                              <2>  push dword %2
 10766                              <2>  %rotate -1
 10767                              <2>  %assign argc argc -1
 10768                              <2>  %assign rargc rargc +2
 10769                              <2>  %else
 10770 00000A15 688000              <2>  push word %2
 10771                              <2>  %assign rargc rargc +1
 10772                              <2>  %endif
 10773                              <2>  %rotate -1
 10774                              <2>  %assign argc argc -1
 10775                              <2>  %if argc <=0
 10776                              <2>  %exitrep
 10777                              <2>  %endif
 10778                              <2>  %ifidn %1,byte
 10779                              <2>  push byte %2
 10780                              <2>  %rotate -1
 10781                              <2>  %assign argc argc -1
 10782                              <2>  %assign rargc rargc +1
 10783                              <2>  %elifidn %1,word
 10784                              <2>  push word %2
 10785                              <2>  %rotate -1
 10786                              <2>  %assign argc argc -1
 10787                              <2>  %assign rargc rargc +1
 10788                              <2>  %elifidn %1,dword
 10789                              <2>  push dword %2
 10790                              <2>  %rotate -1
 10791                              <2>  %assign argc argc -1
 10792                              <2>  %assign rargc rargc +2
 10793                              <2>  %else
 10794 00000A18 68[AD00]            <2>  push word %2
 10795                              <2>  %assign rargc rargc +1
 10796                              <2>  %endif
 10797                              <2>  %rotate -1
 10798                              <2>  %assign argc argc -1
 10799                              <2>  %if argc <=0
 10800                              <2>  %exitrep
 10801                              <2>  %endif
 10802                              <2>  %ifidn %1,byte
 10803                              <2>  push byte %2
 10804                              <2>  %rotate -1
 10805                              <2>  %assign argc argc -1
 10806                              <2>  %assign rargc rargc +1
 10807                              <2>  %elifidn %1,word
 10808                              <2>  push word %2
 10809                              <2>  %rotate -1
 10810                              <2>  %assign argc argc -1
 10811                              <2>  %assign rargc rargc +1
 10812                              <2>  %elifidn %1,dword
 10813                              <2>  push dword %2
 10814                              <2>  %rotate -1
 10815                              <2>  %assign argc argc -1
 10816                              <2>  %assign rargc rargc +2
 10817                              <2>  %else
 10818 00000A1B 0E                  <2>  push word %2
 10819                              <2>  %assign rargc rargc +1
 10820                              <2>  %endif
 10821                              <2>  %rotate -1
 10822                              <2>  %assign argc argc -1
 10823                              <2>  %if argc <=0
 10824                              <2>  %exitrep
 10825                              <2>  %endif
 10826                              <2>  %ifidn %1,byte
 10827 00000A1C 6A00                <2>  push byte %2
 10828                              <2>  %rotate -1
 10829                              <2>  %assign argc argc -1
 10830                              <2>  %assign rargc rargc +1
 10831                              <2>  %elifidn %1,word
 10832                              <2>  push word %2
 10833                              <2>  %rotate -1
 10834                              <2>  %assign argc argc -1
 10835                              <2>  %assign rargc rargc +1
 10836                              <2>  %elifidn %1,dword
 10837                              <2>  push dword %2
 10838                              <2>  %rotate -1
 10839                              <2>  %assign argc argc -1
 10840                              <2>  %assign rargc rargc +2
 10841                              <2>  %else
 10842                              <2>  push word %2
 10843                              <2>  %assign rargc rargc +1
 10844                              <2>  %endif
 10845                              <2>  %rotate -1
 10846                              <2>  %assign argc argc -1
 10847                              <2>  %if argc <=0
 10848                              <2>  %exitrep
 10849                              <2>  %endif
 10850                              <1>  %rotate 1
 10851                              <1>  %endif
 10852 00000A1E E841FC              <1>  call %1
 10853 00000A21 83C408              <1>  add sp,(rargc)*2
 10854                                  
 10855 00000A24 09C0                    	or ax, ax
 10856 00000A26 7521                    	jnz .fail
 10857                                  
 10858 00000A28 A0[AD00]                	mov al, [atapi_tmp_buffer]
 10859 00000A2B 247F                    	and al, 0x7f
 10860                                  	if
 10861                              <1>  %rep %0 -1
 10862                              <1>  %1
 10863                              <1>  %rotate 1
 10864                              <1>  %endrep
 10865                              <1> 
 10866                              <1>  con_push if
 10867                              <2>  %assign __lastlevel__ __level__
 10868                              <2>  %assign __level__ __level__ + 1
 10869                              <2>  %if __return__ > 0
 10870                              <2>  %assign con_return 1
 10871                              <2>  %else
 10872                              <2>  %assign con_return 0
 10873                              <2>  %endif
 10874                              <2> 
 10875                              <2>  %if __cont__ > 0
 10876                              <2>  %assign con_cont 1
 10877                              <2>  %else
 10878                              <2>  %assign con_cont 0
 10879                              <2>  %endif
 10880                              <2>  %if __break__ > 0
 10881                              <2>  %assign con_break 1
 10882                              <2>  %else
 10883                              <2>  %assign con_break 0
 10884                              <2>  %endif
 10885                              <2> 
 10886                              <2>  %ifidn %1,proc
 10887                              <2>  %assign con_return 0
 10888                              <2>  %elifidn %1,forcx
 10889                              <2>  %assign con_break 0
 10890                              <2>  %elifidn %1,repeat
 10891                              <2>  %assign con_cont 0
 10892                              <2>  %assign con_break 0
 10893                              <2>  %elifidn %1,while
 10894                              <2>  %assign con_cont 0
 10895                              <2>  %assign con_break 0
 10896                              <2>  %endif
 10897                              <2> 
 10898                              <2>  %if __cndblock__ == 1
 10899                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 10900                              <2>  %endif
 10901                              <2> 
 10902                              <2>  %push %1
 10903                              <2>  %if con_return
 10904                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 10905                              <3> %define %1%2 %3%4
 10906                              <2>  %endif
 10907                              <2>  %if con_break
 10908                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 10909                              <3> %define %1%2 %3%4
 10910                              <2>  %endif
 10911                              <2>  %if con_cont
 10912                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 10913                              <3> %define %1%2 %3%4
 10914                              <2>  %endif
 10915                              <2> 
 10916                              <2>  %ifidn %1,andblock
 10917                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 10918                              <2>  %elifidn %1,orblock
 10919                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 10920                              <2>  %endif
 10921                              <1> 
 10922                              <1>  %if %0 > 0
 10923                              <1>  j%-1 %$ifnot
 10924                              <1>  %endif
 10925                              <1>  %assign %$elif_level 0
 10926                                  	orblock
 10927                              <1>  %assign __cndblock__ __cndblock__ + 1
 10928                              <1>  con_push orblock
 10929                              <2>  %assign __lastlevel__ __level__
 10930                              <2>  %assign __level__ __level__ + 1
 10931                              <2>  %if __return__ > 0
 10932                              <2>  %assign con_return 1
 10933                              <2>  %else
 10934                              <2>  %assign con_return 0
 10935                              <2>  %endif
 10936                              <2> 
 10937                              <2>  %if __cont__ > 0
 10938                              <2>  %assign con_cont 1
 10939                              <2>  %else
 10940                              <2>  %assign con_cont 0
 10941                              <2>  %endif
 10942                              <2>  %if __break__ > 0
 10943                              <2>  %assign con_break 1
 10944                              <2>  %else
 10945                              <2>  %assign con_break 0
 10946                              <2>  %endif
 10947                              <2> 
 10948                              <2>  %ifidn %1,proc
 10949                              <2>  %assign con_return 0
 10950                              <2>  %elifidn %1,forcx
 10951                              <2>  %assign con_break 0
 10952                              <2>  %elifidn %1,repeat
 10953                              <2>  %assign con_cont 0
 10954                              <2>  %assign con_break 0
 10955                              <2>  %elifidn %1,while
 10956                              <2>  %assign con_cont 0
 10957                              <2>  %assign con_break 0
 10958                              <2>  %endif
 10959                              <2> 
 10960                              <2>  %if __cndblock__ == 1
 10961                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 10962                              <3> %define %1%2 %3%4
 10963                              <2>  %endif
 10964                              <2> 
 10965                              <2>  %push %1
 10966                              <2>  %if con_return
 10967                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 10968                              <3> %define %1%2 %3%4
 10969                              <2>  %endif
 10970                              <2>  %if con_break
 10971                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 10972                              <3> %define %1%2 %3%4
 10973                              <2>  %endif
 10974                              <2>  %if con_cont
 10975                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 10976                              <3> %define %1%2 %3%4
 10977                              <2>  %endif
 10978                              <2> 
 10979                              <2>  %ifidn %1,andblock
 10980                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 10981                              <2>  %elifidn %1,orblock
 10982                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 10983                              <3> %define %1%2 %3%4
 10984                              <2>  %endif
 10985                                  		condiction {cmp al, 0x70}, e
 10986                              <1>  %rep %0 -1
 10987                              <1>  %1
 10988                              <1>  %rotate 1
 10989                              <1>  %endrep
 10990 00000A2D 3C70                <2>  %1
 10991                              <2>  %rotate 1
 10992                              <1>  %ifctx andblock
 10993                              <1>  cat_jnc %1,%$ifnot,__level__
 10994                              <1>  %elifctx orblock
 10995 00000A2F 7404                <1>  j%+1 %$iftrue
 10996                              <1>  %else
 10997                              <1>  %error "not in the andblock or orblock"
 10998                              <1>  %endif
 10999                                  		condiction {cmp al, 0x71}, e
 11000                              <1>  %rep %0 -1
 11001                              <1>  %1
 11002                              <1>  %rotate 1
 11003                              <1>  %endrep
 11004 00000A31 3C71                <2>  %1
 11005                              <2>  %rotate 1
 11006                              <1>  %ifctx andblock
 11007                              <1>  cat_jnc %1,%$ifnot,__level__
 11008                              <1>  %elifctx orblock
 11009 00000A33 7400                <1>  j%+1 %$iftrue
 11010                              <1>  %else
 11011                              <1>  %error "not in the andblock or orblock"
 11012                              <1>  %endif
 11013                                  	endblock then
 11014                              <1>  %ifctx orblock
 11015                              <1> 
 11016                              <1>  %$iftrue:
 11017                              <1>  %elifctx andblock
 11018                              <1>  %else
 11019                              <1>  %error "not in andblock or orblock"
 11020                              <1>  %endif
 11021                              <1>  con_pop
 11022                              <2>  %pop
 11023                              <2>  %assign __level__ __level__ - 1
 11024                              <1>  %assign __cndblock__ __cndblock__ - 1
 11025 00000A35 A0[AF00]                		mov al, [atapi_tmp_buffer+2]            ; get sense key
 11026 00000A38 240F                    		and al, 0x0f
 11027 00000A3A 31DB                    		xor bx, bx
 11028                                  		if {cmp byte [atapi_tmp_buffer+7], 0x06}, ae
 11029                              <1>  %rep %0 -1
 11030                              <1>  %1
 11031                              <1>  %rotate 1
 11032                              <1>  %endrep
 11033 00000A3C 803E[B400]06        <2>  %1
 11034                              <2>  %rotate 1
 11035                              <1> 
 11036                              <1>  con_push if
 11037                              <2>  %assign __lastlevel__ __level__
 11038                              <2>  %assign __level__ __level__ + 1
 11039                              <2>  %if __return__ > 0
 11040                              <2>  %assign con_return 1
 11041                              <2>  %else
 11042                              <2>  %assign con_return 0
 11043                              <2>  %endif
 11044                              <2> 
 11045                              <2>  %if __cont__ > 0
 11046                              <2>  %assign con_cont 1
 11047                              <2>  %else
 11048                              <2>  %assign con_cont 0
 11049                              <2>  %endif
 11050                              <2>  %if __break__ > 0
 11051                              <2>  %assign con_break 1
 11052                              <2>  %else
 11053                              <2>  %assign con_break 0
 11054                              <2>  %endif
 11055                              <2> 
 11056                              <2>  %ifidn %1,proc
 11057                              <2>  %assign con_return 0
 11058                              <2>  %elifidn %1,forcx
 11059                              <2>  %assign con_break 0
 11060                              <2>  %elifidn %1,repeat
 11061                              <2>  %assign con_cont 0
 11062                              <2>  %assign con_break 0
 11063                              <2>  %elifidn %1,while
 11064                              <2>  %assign con_cont 0
 11065                              <2>  %assign con_break 0
 11066                              <2>  %endif
 11067                              <2> 
 11068                              <2>  %if __cndblock__ == 1
 11069                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 11070                              <2>  %endif
 11071                              <2> 
 11072                              <2>  %push %1
 11073                              <2>  %if con_return
 11074                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 11075                              <3> %define %1%2 %3%4
 11076                              <2>  %endif
 11077                              <2>  %if con_break
 11078                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 11079                              <3> %define %1%2 %3%4
 11080                              <2>  %endif
 11081                              <2>  %if con_cont
 11082                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 11083                              <3> %define %1%2 %3%4
 11084                              <2>  %endif
 11085                              <2> 
 11086                              <2>  %ifidn %1,andblock
 11087                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 11088                              <2>  %elifidn %1,orblock
 11089                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 11090                              <2>  %endif
 11091                              <1> 
 11092                              <1>  %if %0 > 0
 11093 00000A41 7204                <1>  j%-1 %$ifnot
 11094                              <1>  %endif
 11095                              <1>  %assign %$elif_level 0
 11096 00000A43 8B1E[B900]              			mov bx, [atapi_tmp_buffer+12]
 11097                                  		endif
 11098                              <1>  %assign elselevel 0
 11099                              <1>  %ifctx if
 11100                              <1>  %$ifnot:
 11101                              <1>  con_pop
 11102                              <2>  %pop
 11103                              <2>  %assign __level__ __level__ - 1
 11104                              <1>  %elifctx else
 11105                              <1>  %assign elselevel %$elif_level
 11106                              <1>  %$ifend:
 11107                              <1>  con_pop
 11108                              <1>  %elifctx elif
 11109                              <1>  %assign elselevel %$elif_level
 11110                              <1>  %$ifnot:
 11111                              <1>  con_pop
 11112                              <1>  %else
 11113                              <1>  %error "expected `if' or `else' before `endif'"
 11114                              <1>  %endif
 11115                              <1>  %rep elselevel
 11116                              <1>  %$ifend:
 11117                              <1>  con_pop
 11118                              <1>  %endrep
 11119 00000A47 F8                      		clc
 11120                                  		return
 11121                              <1>  %if %0 > 0
 11122                              <1>  %assign __near__ 0
 11123                              <1>  %assign argc %0
 11124                              <1>  %ifidn %1,near
 11125                              <1>  %assign __near__ 1
 11126                              <1>  %assign argc argc-1
 11127                              <1>  %rotate 1
 11128                              <1>  %endif
 11129                              <1>  %if argc > 0
 11130                              <1>  %ifidn %1,if
 11131                              <1> 
 11132                              <1>  %rotate 1
 11133                              <1>  %rep argc-2
 11134                              <1>  %1
 11135                              <1>  %rotate 1
 11136                              <1>  %endrep
 11137                              <1>  %if __near__ == 0
 11138                              <1>  cat_jc %1,%$return,__level__
 11139                              <1>  %else
 11140                              <1>  cat_jc_near %1,%$return,__level__
 11141                              <1>  %endif
 11142                              <1>  %else
 11143                              <1>  %error "expect `if' after `return'"
 11144                              <1>  %endif
 11145                              <1>  %else
 11146                              <1>  %if __near__ == 0
 11147                              <1>  cat_jmp %$return,__level__
 11148                              <1>  %else
 11149                              <1>  cat_jmp_near %$return,__level__
 11150                              <1>  %endif
 11151                              <1>  %endif
 11152                              <1>  %else
 11153                              <1>  %if __have_frame__ == 0 && __save_all__ == 0 && __save_args__ == 0
 11154 00000A48 C3                  <1>  ret
 11155                              <1>  %else
 11156                              <1>  cat_jmp %$return,__level__
 11157                              <1>  %endif
 11158                              <1>  %endif
 11159                                  	endif
 11160                              <1>  %assign elselevel 0
 11161                              <1>  %ifctx if
 11162                              <1>  %$ifnot:
 11163                              <1>  con_pop
 11164                              <2>  %pop
 11165                              <2>  %assign __level__ __level__ - 1
 11166                              <1>  %elifctx else
 11167                              <1>  %assign elselevel %$elif_level
 11168                              <1>  %$ifend:
 11169                              <1>  con_pop
 11170                              <1>  %elifctx elif
 11171                              <1>  %assign elselevel %$elif_level
 11172                              <1>  %$ifnot:
 11173                              <1>  con_pop
 11174                              <1>  %else
 11175                              <1>  %error "expected `if' or `else' before `endif'"
 11176                              <1>  %endif
 11177                              <1>  %rep elselevel
 11178                              <1>  %$ifend:
 11179                              <1>  con_pop
 11180                              <1>  %endrep
 11181                                  .fail:
 11182 00000A49 F9                      	stc
 11183                                  endp
 11184                              <1> %ifnctx proc
 11185                              <1>  %error "expected `proc' before `endp'"
 11186                              <1> %endif
 11187                              <1>  cat_lable %$return,__level__
 11188                              <2> %1%2:
 11189                              <1>  %if __save_all__ ==1
 11190                              <1>  popa
 11191                              <1>  %elif __save_all__ == 2
 11192                              <1>  popad
 11193                              <1>  %elif __save_args__ > 0
 11194                              <1>  %assign i 1
 11195                              <1>  %rep __save_args__
 11196                              <1>  linecat pop, %$save_argv,i
 11197                              <1>  %assign i i+1
 11198                              <1>  %endrep
 11199                              <1>  %endif
 11200                              <1>  %if __have_frame__ > 0
 11201                              <1>  leave
 11202                              <1>  %endif
 11203                              <1> 
 11204                              <1>  %assign i 0
 11205                              <1>  %rep %$proc_args
 11206                              <1> 
 11207                              <1>  %assign i i+1
 11208                              <1>  %endrep
 11209                              <1> 
 11210                              <1>  %assign i 0
 11211                              <1>  %rep %$local_args
 11212                              <1> 
 11213                              <1>  %assign i i+1
 11214                              <1>  %endrep
 11215 00000A4A C3                  <1>  ret
 11216                              <1>  con_pop
 11217                              <2>  %pop
 11218                              <2>  %assign __level__ __level__ - 1
 11219                              <1>  %assign __return__ __return__ - 1
 11220                                  
 11221                                  proc test_atapi_ready
 11222                              <1> GLOBAL %1
 11223                              <1> %1:
 11224                              <1> con_push proc
 11225                              <2>  %assign __lastlevel__ __level__
 11226                              <2>  %assign __level__ __level__ + 1
 11227                              <2>  %if __return__ > 0
 11228                              <2>  %assign con_return 1
 11229                              <2>  %else
 11230                              <2>  %assign con_return 0
 11231                              <2>  %endif
 11232                              <2> 
 11233                              <2>  %if __cont__ > 0
 11234                              <2>  %assign con_cont 1
 11235                              <2>  %else
 11236                              <2>  %assign con_cont 0
 11237                              <2>  %endif
 11238                              <2>  %if __break__ > 0
 11239                              <2>  %assign con_break 1
 11240                              <2>  %else
 11241                              <2>  %assign con_break 0
 11242                              <2>  %endif
 11243                              <2> 
 11244                              <2>  %ifidn %1,proc
 11245                              <2>  %assign con_return 0
 11246                              <2>  %elifidn %1,forcx
 11247                              <2>  %assign con_break 0
 11248                              <2>  %elifidn %1,repeat
 11249                              <2>  %assign con_cont 0
 11250                              <2>  %assign con_break 0
 11251                              <2>  %elifidn %1,while
 11252                              <2>  %assign con_cont 0
 11253                              <2>  %assign con_break 0
 11254                              <2>  %endif
 11255                              <2> 
 11256                              <2>  %if __cndblock__ == 1
 11257                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 11258                              <2>  %endif
 11259                              <2> 
 11260                              <2>  %push %1
 11261                              <2>  %if con_return
 11262                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 11263                              <2>  %endif
 11264                              <2>  %if con_break
 11265                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 11266                              <3> %define %1%2 %3%4
 11267                              <2>  %endif
 11268                              <2>  %if con_cont
 11269                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 11270                              <3> %define %1%2 %3%4
 11271                              <2>  %endif
 11272                              <2> 
 11273                              <2>  %ifidn %1,andblock
 11274                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 11275                              <2>  %elifidn %1,orblock
 11276                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 11277                              <2>  %endif
 11278                              <1> %assign __return__ __return__ + 1
 11279                              <1> %assign __have_frame__ 0
 11280                              <1> %assign %$have_local 0
 11281                              <1> %assign %$have_save 0
 11282                              <1> %assign __save_all__ 0
 11283                              <1> %assign %$local_args 0
 11284                              <1> %assign %$proc_args 0
 11285                              <1> %assign __save_args__ 0
 11286                              <1> %if %0 > 1
 11287                              <1>  %assign args %0 - 1
 11288                              <1>  %assign %$bp_off 4
 11289                              <1>  %assign i 0
 11290                              <1>  %rotate 1
 11291                              <1>  %ifidn %1,withlocal
 11292                              <1>  %assign %$have_local 1
 11293                              <1>  %assign args args -1
 11294                              <1>  %rotate 1
 11295                              <1>  %endif
 11296                              <1>  %assign %$proc_args args
 11297                              <1>  %rep args
 11298                              <1> 
 11299                              <1>  %%inputarg__%1 EQU %$bp_off
 11300                              <1>  %undef .%1
 11301                              <1>  %define .%1 %%inputarg__%1+bp
 11302                              <1>  cat_define %$proc_argv ,i,%1
 11303                              <1>  %assign %$bp_off %$bp_off + 2
 11304                              <1>  %assign i i+1
 11305                              <1>  %rotate 1
 11306                              <1>  %endrep
 11307                              <1>  %if %$have_local==0
 11308                              <1>  enter 0,0
 11309                              <1>  %assign __have_frame__ 1
 11310                              <1>  %endif
 11311                              <1> %endif
 11312                                  ; return: cf =0 ready, cf =1 not ready
 11313                                  	save all
 11314                              <1> %ifctx proc
 11315                              <1>  %if %$have_local == 1
 11316                              <1>  %error "`save' must after `local'"
 11317                              <1>  %endif
 11318                              <1> 
 11319                              <1>  %ifidn all,%1
 11320                              <1>  %assign __save_all__ 1
 11321                              <1>  %if %0 > 1
 11322                              <1>  %ifidn frame,%2
 11323                              <1>  %if __have_frame__ == 0
 11324                              <1>  enter 0,0
 11325                              <1>  %assign __have_frame__ 1
 11326                              <1>  %assign local_off 0
 11327                              <1>  %endif
 11328                              <1>  %endif
 11329                              <1>  %endif
 11330 00000A4B 60                  <1>  pusha
 11331                              <1>  %if __have_frame__ == 1
 11332                              <1>  %undef __AX
 11333                              <1>  %undef __BX
 11334                              <1>  %undef __CX
 11335                              <1>  %undef __DX
 11336                              <1>  %undef __SI
 11337                              <1>  %undef __DI
 11338                              <1>  %idefine __AX bp-local_off - 2
 11339                              <1>  %idefine __CX bp-local_off - 4
 11340                              <1>  %idefine __DX bp-local_off - 6
 11341                              <1>  %idefine __BX bp-local_off - 8
 11342                              <1> 
 11343                              <1> 
 11344                              <1>  %idefine __SI bp-local_off - 14
 11345                              <1>  %idefine __DI bp-local_off - 16
 11346                              <1>  %endif
 11347                              <1>  %elifidn alld,%1
 11348                              <1>  %assign __save_all__ 2
 11349                              <1>  %if %0 > 1
 11350                              <1>  %ifidn frame,%2
 11351                              <1>  %if __have_frame__ == 0
 11352                              <1>  enter 0,0
 11353                              <1>  %assign __have_frame__ 1
 11354                              <1>  %assign local_off 0
 11355                              <1>  %endif
 11356                              <1>  %endif
 11357                              <1>  %endif
 11358                              <1>  pushad
 11359                              <1>  %if __have_frame__ == 1
 11360                              <1>  %undef __EAX
 11361                              <1>  %undef __EBX
 11362                              <1>  %undef __ECX
 11363                              <1>  %undef __EDX
 11364                              <1>  %undef __ESI
 11365                              <1>  %undef __EDI
 11366                              <1>  %idefine __EAX bp-local_off - 4
 11367                              <1>  %idefine __ECX bp-local_off - 8
 11368                              <1>  %idefine __EDX bp-local_off - 12
 11369                              <1>  %idefine __EBX bp-local_off - 16
 11370                              <1> 
 11371                              <1> 
 11372                              <1>  %idefine __ESI bp-local_off - 18
 11373                              <1>  %idefine __EDI bp-local_off - 32
 11374                              <1>  %endif
 11375                              <1> 
 11376                              <1>  %else
 11377                              <1>  %assign __save_args__ %0
 11378                              <1>  %assign __save_all__ 0
 11379                              <1>  %assign i %0
 11380                              <1>  %rep %0
 11381                              <1>  push %1
 11382                              <1>  cat_define %$save_argv ,i,%1
 11383                              <1>  %rotate 1
 11384                              <1>  %assign i i - 1
 11385                              <1>  %endrep
 11386                              <1>  %endif
 11387                              <1> %else
 11388                              <1>  %error "`save' must after `proc'"
 11389                              <1> %endif
 11390 00000A4C B90200                  	mov cx, 2
 11391                                  
 11392                                  .loop_try:
 11393 00000A4F 51                      	push cx
 11394 00000A50 E89DFF                  	call clear_atapi_buffer
 11395                                  	invoke reg_packet,byte,0,cs, atapi_tmp_buffer, 128
 11396                              <1>  %if %0 == 2
 11397                              <1>  push word %1
 11398                              <1>  %assign rargc 1
 11399                              <1>  %else
 11400                              <1>  %rotate -2
 11401                              <1>  %assign argc %0-1
 11402                              <1>  %assign rargc 0
 11403                              <1>  %rep argc
 11404                              <1>  %ifidn %1,byte
 11405                              <1>  push byte %2
 11406                              <1>  %rotate -1
 11407                              <1>  %assign argc argc -1
 11408                              <1>  %assign rargc rargc +1
 11409                              <1>  %elifidn %1,word
 11410                              <1>  push word %2
 11411                              <1>  %rotate -1
 11412                              <1>  %assign argc argc -1
 11413                              <1>  %assign rargc rargc +1
 11414                              <1>  %elifidn %1,dword
 11415                              <1>  push dword %2
 11416                              <1>  %rotate -1
 11417                              <1>  %assign argc argc -1
 11418                              <1>  %assign rargc rargc +2
 11419                              <1>  %else
 11420                              <1>  push word %2
 11421                              <1>  %assign rargc rargc +1
 11422                              <1>  %endif
 11423                              <1>  %rotate -1
 11424                              <1>  %assign argc argc -1
 11425                              <1>  %if argc <=0
 11426                              <1>  %exitrep
 11427                              <1>  %endif
 11428                              <1>  %endrep
 11429                              <2>  %ifidn %1,byte
 11430                              <2>  push byte %2
 11431                              <2>  %rotate -1
 11432                              <2>  %assign argc argc -1
 11433                              <2>  %assign rargc rargc +1
 11434                              <2>  %elifidn %1,word
 11435                              <2>  push word %2
 11436                              <2>  %rotate -1
 11437                              <2>  %assign argc argc -1
 11438                              <2>  %assign rargc rargc +1
 11439                              <2>  %elifidn %1,dword
 11440                              <2>  push dword %2
 11441                              <2>  %rotate -1
 11442                              <2>  %assign argc argc -1
 11443                              <2>  %assign rargc rargc +2
 11444                              <2>  %else
 11445 00000A53 688000              <2>  push word %2
 11446                              <2>  %assign rargc rargc +1
 11447                              <2>  %endif
 11448                              <2>  %rotate -1
 11449                              <2>  %assign argc argc -1
 11450                              <2>  %if argc <=0
 11451                              <2>  %exitrep
 11452                              <2>  %endif
 11453                              <2>  %ifidn %1,byte
 11454                              <2>  push byte %2
 11455                              <2>  %rotate -1
 11456                              <2>  %assign argc argc -1
 11457                              <2>  %assign rargc rargc +1
 11458                              <2>  %elifidn %1,word
 11459                              <2>  push word %2
 11460                              <2>  %rotate -1
 11461                              <2>  %assign argc argc -1
 11462                              <2>  %assign rargc rargc +1
 11463                              <2>  %elifidn %1,dword
 11464                              <2>  push dword %2
 11465                              <2>  %rotate -1
 11466                              <2>  %assign argc argc -1
 11467                              <2>  %assign rargc rargc +2
 11468                              <2>  %else
 11469 00000A56 68[AD00]            <2>  push word %2
 11470                              <2>  %assign rargc rargc +1
 11471                              <2>  %endif
 11472                              <2>  %rotate -1
 11473                              <2>  %assign argc argc -1
 11474                              <2>  %if argc <=0
 11475                              <2>  %exitrep
 11476                              <2>  %endif
 11477                              <2>  %ifidn %1,byte
 11478                              <2>  push byte %2
 11479                              <2>  %rotate -1
 11480                              <2>  %assign argc argc -1
 11481                              <2>  %assign rargc rargc +1
 11482                              <2>  %elifidn %1,word
 11483                              <2>  push word %2
 11484                              <2>  %rotate -1
 11485                              <2>  %assign argc argc -1
 11486                              <2>  %assign rargc rargc +1
 11487                              <2>  %elifidn %1,dword
 11488                              <2>  push dword %2
 11489                              <2>  %rotate -1
 11490                              <2>  %assign argc argc -1
 11491                              <2>  %assign rargc rargc +2
 11492                              <2>  %else
 11493 00000A59 0E                  <2>  push word %2
 11494                              <2>  %assign rargc rargc +1
 11495                              <2>  %endif
 11496                              <2>  %rotate -1
 11497                              <2>  %assign argc argc -1
 11498                              <2>  %if argc <=0
 11499                              <2>  %exitrep
 11500                              <2>  %endif
 11501                              <2>  %ifidn %1,byte
 11502 00000A5A 6A00                <2>  push byte %2
 11503                              <2>  %rotate -1
 11504                              <2>  %assign argc argc -1
 11505                              <2>  %assign rargc rargc +1
 11506                              <2>  %elifidn %1,word
 11507                              <2>  push word %2
 11508                              <2>  %rotate -1
 11509                              <2>  %assign argc argc -1
 11510                              <2>  %assign rargc rargc +1
 11511                              <2>  %elifidn %1,dword
 11512                              <2>  push dword %2
 11513                              <2>  %rotate -1
 11514                              <2>  %assign argc argc -1
 11515                              <2>  %assign rargc rargc +2
 11516                              <2>  %else
 11517                              <2>  push word %2
 11518                              <2>  %assign rargc rargc +1
 11519                              <2>  %endif
 11520                              <2>  %rotate -1
 11521                              <2>  %assign argc argc -1
 11522                              <2>  %if argc <=0
 11523                              <2>  %exitrep
 11524                              <2>  %endif
 11525                              <1>  %rotate 1
 11526                              <1>  %endif
 11527 00000A5C E803FC              <1>  call %1
 11528 00000A5F 83C408              <1>  add sp,(rargc)*2
 11529 00000A62 09C0                    	or ax, ax
 11530 00000A64 750D                    	jnz .try_again
 11531 00000A66 E89FFF                  	call get_atapi_sense
 11532 00000A69 7208                    	jc .try_again
 11533 00000A6B 08C0                    	or al, al
 11534 00000A6D 7504                    	jnz .try_again
 11535 00000A6F 59                      	pop cx
 11536 00000A70 F8                      	clc
 11537 00000A71 EB04                    	jmp short .end
 11538                                  .try_again:
 11539 00000A73 59                      	pop cx
 11540 00000A74 E2D9                    	loop .loop_try
 11541 00000A76 F9                      	stc
 11542                                  .end:
 11543                                  endp
 11544                              <1> %ifnctx proc
 11545                              <1>  %error "expected `proc' before `endp'"
 11546                              <1> %endif
 11547                              <1>  cat_lable %$return,__level__
 11548                              <2> %1%2:
 11549                              <1>  %if __save_all__ ==1
 11550 00000A77 61                  <1>  popa
 11551                              <1>  %elif __save_all__ == 2
 11552                              <1>  popad
 11553                              <1>  %elif __save_args__ > 0
 11554                              <1>  %assign i 1
 11555                              <1>  %rep __save_args__
 11556                              <1>  linecat pop, %$save_argv,i
 11557                              <1>  %assign i i+1
 11558                              <1>  %endrep
 11559                              <1>  %endif
 11560                              <1>  %if __have_frame__ > 0
 11561                              <1>  leave
 11562                              <1>  %endif
 11563                              <1> 
 11564                              <1>  %assign i 0
 11565                              <1>  %rep %$proc_args
 11566                              <1> 
 11567                              <1>  %assign i i+1
 11568                              <1>  %endrep
 11569                              <1> 
 11570                              <1>  %assign i 0
 11571                              <1>  %rep %$local_args
 11572                              <1> 
 11573                              <1>  %assign i i+1
 11574                              <1>  %endrep
 11575 00000A78 C3                  <1>  ret
 11576                              <1>  con_pop
 11577                              <2>  %pop
 11578                              <2>  %assign __level__ __level__ - 1
 11579                              <1>  %assign __return__ __return__ - 1
 11580                                  
 11581                                  %if 1
 11582                                  proc inquiry_atapi
 11583                              <1> GLOBAL %1
 11584                              <1> %1:
 11585                              <1> con_push proc
 11586                              <2>  %assign __lastlevel__ __level__
 11587                              <2>  %assign __level__ __level__ + 1
 11588                              <2>  %if __return__ > 0
 11589                              <2>  %assign con_return 1
 11590                              <2>  %else
 11591                              <2>  %assign con_return 0
 11592                              <2>  %endif
 11593                              <2> 
 11594                              <2>  %if __cont__ > 0
 11595                              <2>  %assign con_cont 1
 11596                              <2>  %else
 11597                              <2>  %assign con_cont 0
 11598                              <2>  %endif
 11599                              <2>  %if __break__ > 0
 11600                              <2>  %assign con_break 1
 11601                              <2>  %else
 11602                              <2>  %assign con_break 0
 11603                              <2>  %endif
 11604                              <2> 
 11605                              <2>  %ifidn %1,proc
 11606                              <2>  %assign con_return 0
 11607                              <2>  %elifidn %1,forcx
 11608                              <2>  %assign con_break 0
 11609                              <2>  %elifidn %1,repeat
 11610                              <2>  %assign con_cont 0
 11611                              <2>  %assign con_break 0
 11612                              <2>  %elifidn %1,while
 11613                              <2>  %assign con_cont 0
 11614                              <2>  %assign con_break 0
 11615                              <2>  %endif
 11616                              <2> 
 11617                              <2>  %if __cndblock__ == 1
 11618                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 11619                              <2>  %endif
 11620                              <2> 
 11621                              <2>  %push %1
 11622                              <2>  %if con_return
 11623                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 11624                              <2>  %endif
 11625                              <2>  %if con_break
 11626                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 11627                              <3> %define %1%2 %3%4
 11628                              <2>  %endif
 11629                              <2>  %if con_cont
 11630                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 11631                              <3> %define %1%2 %3%4
 11632                              <2>  %endif
 11633                              <2> 
 11634                              <2>  %ifidn %1,andblock
 11635                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 11636                              <2>  %elifidn %1,orblock
 11637                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 11638                              <2>  %endif
 11639                              <1> %assign __return__ __return__ + 1
 11640                              <1> %assign __have_frame__ 0
 11641                              <1> %assign %$have_local 0
 11642                              <1> %assign %$have_save 0
 11643                              <1> %assign __save_all__ 0
 11644                              <1> %assign %$local_args 0
 11645                              <1> %assign %$proc_args 0
 11646                              <1> %assign __save_args__ 0
 11647                              <1> %if %0 > 1
 11648                              <1>  %assign args %0 - 1
 11649                              <1>  %assign %$bp_off 4
 11650                              <1>  %assign i 0
 11651                              <1>  %rotate 1
 11652                              <1>  %ifidn %1,withlocal
 11653                              <1>  %assign %$have_local 1
 11654                              <1>  %assign args args -1
 11655                              <1>  %rotate 1
 11656                              <1>  %endif
 11657                              <1>  %assign %$proc_args args
 11658                              <1>  %rep args
 11659                              <1> 
 11660                              <1>  %%inputarg__%1 EQU %$bp_off
 11661                              <1>  %undef .%1
 11662                              <1>  %define .%1 %%inputarg__%1+bp
 11663                              <1>  cat_define %$proc_argv ,i,%1
 11664                              <1>  %assign %$bp_off %$bp_off + 2
 11665                              <1>  %assign i i+1
 11666                              <1>  %rotate 1
 11667                              <1>  %endrep
 11668                              <1>  %if %$have_local==0
 11669                              <1>  enter 0,0
 11670                              <1>  %assign __have_frame__ 1
 11671                              <1>  %endif
 11672                              <1> %endif
 11673                                  ;input: es:di -> atapi_devinfo
 11674                                  ;return: cf =0 success, al = device type, 
 11675                                  ;        cf =1 fail
 11676                                  ;	save si, di, cx
 11677 00000A79 E874FF                  	call clear_atapi_buffer
 11678 00000A7C C606[9D00]12            	mov byte [atapi_cmd_buffer], 0x12
 11679 00000A81 C606[A100]80            	mov byte [atapi_cmd_buffer+4], 128
 11680                                  	invoke reg_packet,byte,0,cs, atapi_tmp_buffer, 128
 11681                              <1>  %if %0 == 2
 11682                              <1>  push word %1
 11683                              <1>  %assign rargc 1
 11684                              <1>  %else
 11685                              <1>  %rotate -2
 11686                              <1>  %assign argc %0-1
 11687                              <1>  %assign rargc 0
 11688                              <1>  %rep argc
 11689                              <1>  %ifidn %1,byte
 11690                              <1>  push byte %2
 11691                              <1>  %rotate -1
 11692                              <1>  %assign argc argc -1
 11693                              <1>  %assign rargc rargc +1
 11694                              <1>  %elifidn %1,word
 11695                              <1>  push word %2
 11696                              <1>  %rotate -1
 11697                              <1>  %assign argc argc -1
 11698                              <1>  %assign rargc rargc +1
 11699                              <1>  %elifidn %1,dword
 11700                              <1>  push dword %2
 11701                              <1>  %rotate -1
 11702                              <1>  %assign argc argc -1
 11703                              <1>  %assign rargc rargc +2
 11704                              <1>  %else
 11705                              <1>  push word %2
 11706                              <1>  %assign rargc rargc +1
 11707                              <1>  %endif
 11708                              <1>  %rotate -1
 11709                              <1>  %assign argc argc -1
 11710                              <1>  %if argc <=0
 11711                              <1>  %exitrep
 11712                              <1>  %endif
 11713                              <1>  %endrep
 11714                              <2>  %ifidn %1,byte
 11715                              <2>  push byte %2
 11716                              <2>  %rotate -1
 11717                              <2>  %assign argc argc -1
 11718                              <2>  %assign rargc rargc +1
 11719                              <2>  %elifidn %1,word
 11720                              <2>  push word %2
 11721                              <2>  %rotate -1
 11722                              <2>  %assign argc argc -1
 11723                              <2>  %assign rargc rargc +1
 11724                              <2>  %elifidn %1,dword
 11725                              <2>  push dword %2
 11726                              <2>  %rotate -1
 11727                              <2>  %assign argc argc -1
 11728                              <2>  %assign rargc rargc +2
 11729                              <2>  %else
 11730 00000A86 688000              <2>  push word %2
 11731                              <2>  %assign rargc rargc +1
 11732                              <2>  %endif
 11733                              <2>  %rotate -1
 11734                              <2>  %assign argc argc -1
 11735                              <2>  %if argc <=0
 11736                              <2>  %exitrep
 11737                              <2>  %endif
 11738                              <2>  %ifidn %1,byte
 11739                              <2>  push byte %2
 11740                              <2>  %rotate -1
 11741                              <2>  %assign argc argc -1
 11742                              <2>  %assign rargc rargc +1
 11743                              <2>  %elifidn %1,word
 11744                              <2>  push word %2
 11745                              <2>  %rotate -1
 11746                              <2>  %assign argc argc -1
 11747                              <2>  %assign rargc rargc +1
 11748                              <2>  %elifidn %1,dword
 11749                              <2>  push dword %2
 11750                              <2>  %rotate -1
 11751                              <2>  %assign argc argc -1
 11752                              <2>  %assign rargc rargc +2
 11753                              <2>  %else
 11754 00000A89 68[AD00]            <2>  push word %2
 11755                              <2>  %assign rargc rargc +1
 11756                              <2>  %endif
 11757                              <2>  %rotate -1
 11758                              <2>  %assign argc argc -1
 11759                              <2>  %if argc <=0
 11760                              <2>  %exitrep
 11761                              <2>  %endif
 11762                              <2>  %ifidn %1,byte
 11763                              <2>  push byte %2
 11764                              <2>  %rotate -1
 11765                              <2>  %assign argc argc -1
 11766                              <2>  %assign rargc rargc +1
 11767                              <2>  %elifidn %1,word
 11768                              <2>  push word %2
 11769                              <2>  %rotate -1
 11770                              <2>  %assign argc argc -1
 11771                              <2>  %assign rargc rargc +1
 11772                              <2>  %elifidn %1,dword
 11773                              <2>  push dword %2
 11774                              <2>  %rotate -1
 11775                              <2>  %assign argc argc -1
 11776                              <2>  %assign rargc rargc +2
 11777                              <2>  %else
 11778 00000A8C 0E                  <2>  push word %2
 11779                              <2>  %assign rargc rargc +1
 11780                              <2>  %endif
 11781                              <2>  %rotate -1
 11782                              <2>  %assign argc argc -1
 11783                              <2>  %if argc <=0
 11784                              <2>  %exitrep
 11785                              <2>  %endif
 11786                              <2>  %ifidn %1,byte
 11787 00000A8D 6A00                <2>  push byte %2
 11788                              <2>  %rotate -1
 11789                              <2>  %assign argc argc -1
 11790                              <2>  %assign rargc rargc +1
 11791                              <2>  %elifidn %1,word
 11792                              <2>  push word %2
 11793                              <2>  %rotate -1
 11794                              <2>  %assign argc argc -1
 11795                              <2>  %assign rargc rargc +1
 11796                              <2>  %elifidn %1,dword
 11797                              <2>  push dword %2
 11798                              <2>  %rotate -1
 11799                              <2>  %assign argc argc -1
 11800                              <2>  %assign rargc rargc +2
 11801                              <2>  %else
 11802                              <2>  push word %2
 11803                              <2>  %assign rargc rargc +1
 11804                              <2>  %endif
 11805                              <2>  %rotate -1
 11806                              <2>  %assign argc argc -1
 11807                              <2>  %if argc <=0
 11808                              <2>  %exitrep
 11809                              <2>  %endif
 11810                              <1>  %rotate 1
 11811                              <1>  %endif
 11812 00000A8F E8D0FB              <1>  call %1
 11813 00000A92 83C408              <1>  add sp,(rargc)*2
 11814 00000A95 09C0                    	or ax, ax
 11815 00000A97 750B                    	jnz .fail
 11816                                  
 11817 00000A99 A0[AD00]                	mov al, [atapi_tmp_buffer]
 11818 00000A9C A8E0                    	test al, 0xe0
 11819 00000A9E 7504                    	jnz .fail
 11820                                  
 11821 00000AA0 241F                    	and al, 0x1f
 11822                                  
 11823                                  %if 0
 11824                                  	mov [es:di + struc_atapi_devinfo.dev_type], al
 11825                                  
 11826                                  	mov ah, [atapi_tmp_buffer+7]
 11827                                  	mov [es:di + struc_atapi_devinfo.dev_flags], ah
 11828                                  
 11829                                  	add di, struc_atapi_devinfo.vender_id
 11830                                  	mov si, atapi_tmp_buffer + 8
 11831                                  	mov cx, 24
 11832                                  	cld
 11833                                  	rep movsb
 11834                                  %endif
 11835 00000AA2 F8                      	clc
 11836                                  ;	jmp short .end
 11837                                  	return
 11838                              <1>  %if %0 > 0
 11839                              <1>  %assign __near__ 0
 11840                              <1>  %assign argc %0
 11841                              <1>  %ifidn %1,near
 11842                              <1>  %assign __near__ 1
 11843                              <1>  %assign argc argc-1
 11844                              <1>  %rotate 1
 11845                              <1>  %endif
 11846                              <1>  %if argc > 0
 11847                              <1>  %ifidn %1,if
 11848                              <1> 
 11849                              <1>  %rotate 1
 11850                              <1>  %rep argc-2
 11851                              <1>  %1
 11852                              <1>  %rotate 1
 11853                              <1>  %endrep
 11854                              <1>  %if __near__ == 0
 11855                              <1>  cat_jc %1,%$return,__level__
 11856                              <1>  %else
 11857                              <1>  cat_jc_near %1,%$return,__level__
 11858                              <1>  %endif
 11859                              <1>  %else
 11860                              <1>  %error "expect `if' after `return'"
 11861                              <1>  %endif
 11862                              <1>  %else
 11863                              <1>  %if __near__ == 0
 11864                              <1>  cat_jmp %$return,__level__
 11865                              <1>  %else
 11866                              <1>  cat_jmp_near %$return,__level__
 11867                              <1>  %endif
 11868                              <1>  %endif
 11869                              <1>  %else
 11870                              <1>  %if __have_frame__ == 0 && __save_all__ == 0 && __save_args__ == 0
 11871 00000AA3 C3                  <1>  ret
 11872                              <1>  %else
 11873                              <1>  cat_jmp %$return,__level__
 11874                              <1>  %endif
 11875                              <1>  %endif
 11876                                  .fail:
 11877 00000AA4 F9                      	stc
 11878                                  .end:
 11879                                  endp
 11880                              <1> %ifnctx proc
 11881                              <1>  %error "expected `proc' before `endp'"
 11882                              <1> %endif
 11883                              <1>  cat_lable %$return,__level__
 11884                              <2> %1%2:
 11885                              <1>  %if __save_all__ ==1
 11886                              <1>  popa
 11887                              <1>  %elif __save_all__ == 2
 11888                              <1>  popad
 11889                              <1>  %elif __save_args__ > 0
 11890                              <1>  %assign i 1
 11891                              <1>  %rep __save_args__
 11892                              <1>  linecat pop, %$save_argv,i
 11893                              <1>  %assign i i+1
 11894                              <1>  %endrep
 11895                              <1>  %endif
 11896                              <1>  %if __have_frame__ > 0
 11897                              <1>  leave
 11898                              <1>  %endif
 11899                              <1> 
 11900                              <1>  %assign i 0
 11901                              <1>  %rep %$proc_args
 11902                              <1> 
 11903                              <1>  %assign i i+1
 11904                              <1>  %endrep
 11905                              <1> 
 11906                              <1>  %assign i 0
 11907                              <1>  %rep %$local_args
 11908                              <1> 
 11909                              <1>  %assign i i+1
 11910                              <1>  %endrep
 11911 00000AA5 C3                  <1>  ret
 11912                              <1>  con_pop
 11913                              <2>  %pop
 11914                              <2>  %assign __level__ __level__ - 1
 11915                              <1>  %assign __return__ __return__ - 1
 11916                                  
 11917                                  proc check_atapi_cdrom
 11918                              <1> GLOBAL %1
 11919                              <1> %1:
 11920                              <1> con_push proc
 11921                              <2>  %assign __lastlevel__ __level__
 11922                              <2>  %assign __level__ __level__ + 1
 11923                              <2>  %if __return__ > 0
 11924                              <2>  %assign con_return 1
 11925                              <2>  %else
 11926                              <2>  %assign con_return 0
 11927                              <2>  %endif
 11928                              <2> 
 11929                              <2>  %if __cont__ > 0
 11930                              <2>  %assign con_cont 1
 11931                              <2>  %else
 11932                              <2>  %assign con_cont 0
 11933                              <2>  %endif
 11934                              <2>  %if __break__ > 0
 11935                              <2>  %assign con_break 1
 11936                              <2>  %else
 11937                              <2>  %assign con_break 0
 11938                              <2>  %endif
 11939                              <2> 
 11940                              <2>  %ifidn %1,proc
 11941                              <2>  %assign con_return 0
 11942                              <2>  %elifidn %1,forcx
 11943                              <2>  %assign con_break 0
 11944                              <2>  %elifidn %1,repeat
 11945                              <2>  %assign con_cont 0
 11946                              <2>  %assign con_break 0
 11947                              <2>  %elifidn %1,while
 11948                              <2>  %assign con_cont 0
 11949                              <2>  %assign con_break 0
 11950                              <2>  %endif
 11951                              <2> 
 11952                              <2>  %if __cndblock__ == 1
 11953                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 11954                              <2>  %endif
 11955                              <2> 
 11956                              <2>  %push %1
 11957                              <2>  %if con_return
 11958                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 11959                              <2>  %endif
 11960                              <2>  %if con_break
 11961                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 11962                              <3> %define %1%2 %3%4
 11963                              <2>  %endif
 11964                              <2>  %if con_cont
 11965                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 11966                              <3> %define %1%2 %3%4
 11967                              <2>  %endif
 11968                              <2> 
 11969                              <2>  %ifidn %1,andblock
 11970                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 11971                              <2>  %elifidn %1,orblock
 11972                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 11973                              <2>  %endif
 11974                              <1> %assign __return__ __return__ + 1
 11975                              <1> %assign __have_frame__ 0
 11976                              <1> %assign %$have_local 0
 11977                              <1> %assign %$have_save 0
 11978                              <1> %assign __save_all__ 0
 11979                              <1> %assign %$local_args 0
 11980                              <1> %assign %$proc_args 0
 11981                              <1> %assign __save_args__ 0
 11982                              <1> %if %0 > 1
 11983                              <1>  %assign args %0 - 1
 11984                              <1>  %assign %$bp_off 4
 11985                              <1>  %assign i 0
 11986                              <1>  %rotate 1
 11987                              <1>  %ifidn %1,withlocal
 11988                              <1>  %assign %$have_local 1
 11989                              <1>  %assign args args -1
 11990                              <1>  %rotate 1
 11991                              <1>  %endif
 11992                              <1>  %assign %$proc_args args
 11993                              <1>  %rep args
 11994                              <1> 
 11995                              <1>  %%inputarg__%1 EQU %$bp_off
 11996                              <1>  %undef .%1
 11997                              <1>  %define .%1 %%inputarg__%1+bp
 11998                              <1>  cat_define %$proc_argv ,i,%1
 11999                              <1>  %assign %$bp_off %$bp_off + 2
 12000                              <1>  %assign i i+1
 12001                              <1>  %rotate 1
 12002                              <1>  %endrep
 12003                              <1>  %if %$have_local==0
 12004                              <1>  enter 0,0
 12005                              <1>  %assign __have_frame__ 1
 12006                              <1>  %endif
 12007                              <1> %endif
 12008                                  ;return: cf =0 is cdrom, cf =1 not cdrom
 12009                                  	save all
 12010                              <1> %ifctx proc
 12011                              <1>  %if %$have_local == 1
 12012                              <1>  %error "`save' must after `local'"
 12013                              <1>  %endif
 12014                              <1> 
 12015                              <1>  %ifidn all,%1
 12016                              <1>  %assign __save_all__ 1
 12017                              <1>  %if %0 > 1
 12018                              <1>  %ifidn frame,%2
 12019                              <1>  %if __have_frame__ == 0
 12020                              <1>  enter 0,0
 12021                              <1>  %assign __have_frame__ 1
 12022                              <1>  %assign local_off 0
 12023                              <1>  %endif
 12024                              <1>  %endif
 12025                              <1>  %endif
 12026 00000AA6 60                  <1>  pusha
 12027                              <1>  %if __have_frame__ == 1
 12028                              <1>  %undef __AX
 12029                              <1>  %undef __BX
 12030                              <1>  %undef __CX
 12031                              <1>  %undef __DX
 12032                              <1>  %undef __SI
 12033                              <1>  %undef __DI
 12034                              <1>  %idefine __AX bp-local_off - 2
 12035                              <1>  %idefine __CX bp-local_off - 4
 12036                              <1>  %idefine __DX bp-local_off - 6
 12037                              <1>  %idefine __BX bp-local_off - 8
 12038                              <1> 
 12039                              <1> 
 12040                              <1>  %idefine __SI bp-local_off - 14
 12041                              <1>  %idefine __DI bp-local_off - 16
 12042                              <1>  %endif
 12043                              <1>  %elifidn alld,%1
 12044                              <1>  %assign __save_all__ 2
 12045                              <1>  %if %0 > 1
 12046                              <1>  %ifidn frame,%2
 12047                              <1>  %if __have_frame__ == 0
 12048                              <1>  enter 0,0
 12049                              <1>  %assign __have_frame__ 1
 12050                              <1>  %assign local_off 0
 12051                              <1>  %endif
 12052                              <1>  %endif
 12053                              <1>  %endif
 12054                              <1>  pushad
 12055                              <1>  %if __have_frame__ == 1
 12056                              <1>  %undef __EAX
 12057                              <1>  %undef __EBX
 12058                              <1>  %undef __ECX
 12059                              <1>  %undef __EDX
 12060                              <1>  %undef __ESI
 12061                              <1>  %undef __EDI
 12062                              <1>  %idefine __EAX bp-local_off - 4
 12063                              <1>  %idefine __ECX bp-local_off - 8
 12064                              <1>  %idefine __EDX bp-local_off - 12
 12065                              <1>  %idefine __EBX bp-local_off - 16
 12066                              <1> 
 12067                              <1> 
 12068                              <1>  %idefine __ESI bp-local_off - 18
 12069                              <1>  %idefine __EDI bp-local_off - 32
 12070                              <1>  %endif
 12071                              <1> 
 12072                              <1>  %else
 12073                              <1>  %assign __save_args__ %0
 12074                              <1>  %assign __save_all__ 0
 12075                              <1>  %assign i %0
 12076                              <1>  %rep %0
 12077                              <1>  push %1
 12078                              <1>  cat_define %$save_argv ,i,%1
 12079                              <1>  %rotate 1
 12080                              <1>  %assign i i - 1
 12081                              <1>  %endrep
 12082                              <1>  %endif
 12083                              <1> %else
 12084                              <1>  %error "`save' must after `proc'"
 12085                              <1> %endif
 12086                                  ;	push es
 12087                                  ;	push cs
 12088                                  ;	pop es
 12089                                  ;	mov di, atapi_devinfo
 12090 00000AA7 E8CFFF                  	call inquiry_atapi
 12091 00000AAA 720A                    	jc .end
 12092 00000AAC F8                      	clc
 12093 00000AAD 3C05                    	cmp al, ATATYPE_CD
 12094 00000AAF 7405                    	je .end
 12095 00000AB1 3C04                    	cmp al, ATATYPE_CDR
 12096 00000AB3 7401                    	je .end
 12097 00000AB5 F9                      	stc
 12098                                  .end:
 12099                                  ;	pop es
 12100                                  endp
 12101                              <1> %ifnctx proc
 12102                              <1>  %error "expected `proc' before `endp'"
 12103                              <1> %endif
 12104                              <1>  cat_lable %$return,__level__
 12105                              <2> %1%2:
 12106                              <1>  %if __save_all__ ==1
 12107 00000AB6 61                  <1>  popa
 12108                              <1>  %elif __save_all__ == 2
 12109                              <1>  popad
 12110                              <1>  %elif __save_args__ > 0
 12111                              <1>  %assign i 1
 12112                              <1>  %rep __save_args__
 12113                              <1>  linecat pop, %$save_argv,i
 12114                              <1>  %assign i i+1
 12115                              <1>  %endrep
 12116                              <1>  %endif
 12117                              <1>  %if __have_frame__ > 0
 12118                              <1>  leave
 12119                              <1>  %endif
 12120                              <1> 
 12121                              <1>  %assign i 0
 12122                              <1>  %rep %$proc_args
 12123                              <1> 
 12124                              <1>  %assign i i+1
 12125                              <1>  %endrep
 12126                              <1> 
 12127                              <1>  %assign i 0
 12128                              <1>  %rep %$local_args
 12129                              <1> 
 12130                              <1>  %assign i i+1
 12131                              <1>  %endrep
 12132 00000AB7 C3                  <1>  ret
 12133                              <1>  con_pop
 12134                              <2>  %pop
 12135                              <2>  %assign __level__ __level__ - 1
 12136                              <1>  %assign __return__ __return__ - 1
 12137                                  %endif
 12138                                  
 12139                                  
 12140                                  proc get_atapi_base_io
 12141                              <1> GLOBAL %1
 12142                              <1> %1:
 12143                              <1> con_push proc
 12144                              <2>  %assign __lastlevel__ __level__
 12145                              <2>  %assign __level__ __level__ + 1
 12146                              <2>  %if __return__ > 0
 12147                              <2>  %assign con_return 1
 12148                              <2>  %else
 12149                              <2>  %assign con_return 0
 12150                              <2>  %endif
 12151                              <2> 
 12152                              <2>  %if __cont__ > 0
 12153                              <2>  %assign con_cont 1
 12154                              <2>  %else
 12155                              <2>  %assign con_cont 0
 12156                              <2>  %endif
 12157                              <2>  %if __break__ > 0
 12158                              <2>  %assign con_break 1
 12159                              <2>  %else
 12160                              <2>  %assign con_break 0
 12161                              <2>  %endif
 12162                              <2> 
 12163                              <2>  %ifidn %1,proc
 12164                              <2>  %assign con_return 0
 12165                              <2>  %elifidn %1,forcx
 12166                              <2>  %assign con_break 0
 12167                              <2>  %elifidn %1,repeat
 12168                              <2>  %assign con_cont 0
 12169                              <2>  %assign con_break 0
 12170                              <2>  %elifidn %1,while
 12171                              <2>  %assign con_cont 0
 12172                              <2>  %assign con_break 0
 12173                              <2>  %endif
 12174                              <2> 
 12175                              <2>  %if __cndblock__ == 1
 12176                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 12177                              <2>  %endif
 12178                              <2> 
 12179                              <2>  %push %1
 12180                              <2>  %if con_return
 12181                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 12182                              <2>  %endif
 12183                              <2>  %if con_break
 12184                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 12185                              <3> %define %1%2 %3%4
 12186                              <2>  %endif
 12187                              <2>  %if con_cont
 12188                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 12189                              <3> %define %1%2 %3%4
 12190                              <2>  %endif
 12191                              <2> 
 12192                              <2>  %ifidn %1,andblock
 12193                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 12194                              <2>  %elifidn %1,orblock
 12195                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 12196                              <2>  %endif
 12197                              <1> %assign __return__ __return__ + 1
 12198                              <1> %assign __have_frame__ 0
 12199                              <1> %assign %$have_local 0
 12200                              <1> %assign %$have_save 0
 12201                              <1> %assign __save_all__ 0
 12202                              <1> %assign %$local_args 0
 12203                              <1> %assign %$proc_args 0
 12204                              <1> %assign __save_args__ 0
 12205                              <1> %if %0 > 1
 12206                              <1>  %assign args %0 - 1
 12207                              <1>  %assign %$bp_off 4
 12208                              <1>  %assign i 0
 12209                              <1>  %rotate 1
 12210                              <1>  %ifidn %1,withlocal
 12211                              <1>  %assign %$have_local 1
 12212                              <1>  %assign args args -1
 12213                              <1>  %rotate 1
 12214                              <1>  %endif
 12215                              <1>  %assign %$proc_args args
 12216                              <1>  %rep args
 12217                              <1> 
 12218                              <1>  %%inputarg__%1 EQU %$bp_off
 12219                              <1>  %undef .%1
 12220                              <1>  %define .%1 %%inputarg__%1+bp
 12221                              <1>  cat_define %$proc_argv ,i,%1
 12222                              <1>  %assign %$bp_off %$bp_off + 2
 12223                              <1>  %assign i i+1
 12224                              <1>  %rotate 1
 12225                              <1>  %endrep
 12226                              <1>  %if %$have_local==0
 12227                              <1>  enter 0,0
 12228                              <1>  %assign __have_frame__ 1
 12229                              <1>  %endif
 12230                              <1> %endif
 12231                                  ;input: ax = dev 
 12232                                  ;return: bx = base io 1, dx = base io 2, cx = device number
 12233                                  	save si, ax
 12234                              <1> %ifctx proc
 12235                              <1>  %if %$have_local == 1
 12236                              <1>  %error "`save' must after `local'"
 12237                              <1>  %endif
 12238                              <1> 
 12239                              <1>  %ifidn all,%1
 12240                              <1>  %assign __save_all__ 1
 12241                              <1>  %if %0 > 1
 12242                              <1>  %ifidn frame,%2
 12243                              <1>  %if __have_frame__ == 0
 12244                              <1>  enter 0,0
 12245                              <1>  %assign __have_frame__ 1
 12246                              <1>  %assign local_off 0
 12247                              <1>  %endif
 12248                              <1>  %endif
 12249                              <1>  %endif
 12250                              <1>  pusha
 12251                              <1>  %if __have_frame__ == 1
 12252                              <1>  %undef __AX
 12253                              <1>  %undef __BX
 12254                              <1>  %undef __CX
 12255                              <1>  %undef __DX
 12256                              <1>  %undef __SI
 12257                              <1>  %undef __DI
 12258                              <1>  %idefine __AX bp-local_off - 2
 12259                              <1>  %idefine __CX bp-local_off - 4
 12260                              <1>  %idefine __DX bp-local_off - 6
 12261                              <1>  %idefine __BX bp-local_off - 8
 12262                              <1> 
 12263                              <1> 
 12264                              <1>  %idefine __SI bp-local_off - 14
 12265                              <1>  %idefine __DI bp-local_off - 16
 12266                              <1>  %endif
 12267                              <1>  %elifidn alld,%1
 12268                              <1>  %assign __save_all__ 2
 12269                              <1>  %if %0 > 1
 12270                              <1>  %ifidn frame,%2
 12271                              <1>  %if __have_frame__ == 0
 12272                              <1>  enter 0,0
 12273                              <1>  %assign __have_frame__ 1
 12274                              <1>  %assign local_off 0
 12275                              <1>  %endif
 12276                              <1>  %endif
 12277                              <1>  %endif
 12278                              <1>  pushad
 12279                              <1>  %if __have_frame__ == 1
 12280                              <1>  %undef __EAX
 12281                              <1>  %undef __EBX
 12282                              <1>  %undef __ECX
 12283                              <1>  %undef __EDX
 12284                              <1>  %undef __ESI
 12285                              <1>  %undef __EDI
 12286                              <1>  %idefine __EAX bp-local_off - 4
 12287                              <1>  %idefine __ECX bp-local_off - 8
 12288                              <1>  %idefine __EDX bp-local_off - 12
 12289                              <1>  %idefine __EBX bp-local_off - 16
 12290                              <1> 
 12291                              <1> 
 12292                              <1>  %idefine __ESI bp-local_off - 18
 12293                              <1>  %idefine __EDI bp-local_off - 32
 12294                              <1>  %endif
 12295                              <1> 
 12296                              <1>  %else
 12297                              <1>  %assign __save_args__ %0
 12298                              <1>  %assign __save_all__ 0
 12299                              <1>  %assign i %0
 12300                              <1>  %rep %0
 12301                              <1>  push %1
 12302                              <1>  cat_define %$save_argv ,i,%1
 12303                              <1>  %rotate 1
 12304                              <1>  %assign i i - 1
 12305                              <1>  %endrep
 12306 00000AB8 56                  <2>  push %1
 12307                              <2>  cat_define %$save_argv ,i,%1
 12308                              <3> %define %1%2 %3
 12309                              <2>  %rotate 1
 12310                              <2>  %assign i i - 1
 12311 00000AB9 50                  <2>  push %1
 12312                              <2>  cat_define %$save_argv ,i,%1
 12313                              <3> %define %1%2 %3
 12314                              <2>  %rotate 1
 12315                              <2>  %assign i i - 1
 12316                              <1>  %endif
 12317                              <1> %else
 12318                              <1>  %error "`save' must after `proc'"
 12319                              <1> %endif
 12320 00000ABA C1E002                  	shl ax, byte 2
 12321 00000ABD BE[0900]                	mov si, atapi_dev_base
 12322 00000AC0 01C6                    	add si, ax
 12323 00000AC2 2E8B1C                  	mov bx, [cs:si]
 12324 00000AC5 2E8B4C02                	mov cx, [cs:si+2]
 12325 00000AC9 2E8B5702                	mov dx, [cs:bx+2]
 12326 00000ACD 2E8B1F                  	mov bx, [cs:bx]
 12327                                  endp
 12328                              <1> %ifnctx proc
 12329                              <1>  %error "expected `proc' before `endp'"
 12330                              <1> %endif
 12331                              <1>  cat_lable %$return,__level__
 12332                              <2> %1%2:
 12333                              <1>  %if __save_all__ ==1
 12334                              <1>  popa
 12335                              <1>  %elif __save_all__ == 2
 12336                              <1>  popad
 12337                              <1>  %elif __save_args__ > 0
 12338                              <1>  %assign i 1
 12339                              <1>  %rep __save_args__
 12340                              <1>  linecat pop, %$save_argv,i
 12341                              <1>  %assign i i+1
 12342                              <1>  %endrep
 12343                              <2>  linecat pop, %$save_argv,i
 12344 00000AD0 58                  <3>  %1 %2%3
 12345                              <2>  %assign i i+1
 12346                              <2>  linecat pop, %$save_argv,i
 12347 00000AD1 5E                  <3>  %1 %2%3
 12348                              <2>  %assign i i+1
 12349                              <1>  %endif
 12350                              <1>  %if __have_frame__ > 0
 12351                              <1>  leave
 12352                              <1>  %endif
 12353                              <1> 
 12354                              <1>  %assign i 0
 12355                              <1>  %rep %$proc_args
 12356                              <1> 
 12357                              <1>  %assign i i+1
 12358                              <1>  %endrep
 12359                              <1> 
 12360                              <1>  %assign i 0
 12361                              <1>  %rep %$local_args
 12362                              <1> 
 12363                              <1>  %assign i i+1
 12364                              <1>  %endrep
 12365 00000AD2 C3                  <1>  ret
 12366                              <1>  con_pop
 12367                              <2>  %pop
 12368                              <2>  %assign __level__ __level__ - 1
 12369                              <1>  %assign __return__ __return__ - 1
 12370                                  
 12371                                  proc read_atapi
 12372                              <1> GLOBAL %1
 12373                              <1> %1:
 12374                              <1> con_push proc
 12375                              <2>  %assign __lastlevel__ __level__
 12376                              <2>  %assign __level__ __level__ + 1
 12377                              <2>  %if __return__ > 0
 12378                              <2>  %assign con_return 1
 12379                              <2>  %else
 12380                              <2>  %assign con_return 0
 12381                              <2>  %endif
 12382                              <2> 
 12383                              <2>  %if __cont__ > 0
 12384                              <2>  %assign con_cont 1
 12385                              <2>  %else
 12386                              <2>  %assign con_cont 0
 12387                              <2>  %endif
 12388                              <2>  %if __break__ > 0
 12389                              <2>  %assign con_break 1
 12390                              <2>  %else
 12391                              <2>  %assign con_break 0
 12392                              <2>  %endif
 12393                              <2> 
 12394                              <2>  %ifidn %1,proc
 12395                              <2>  %assign con_return 0
 12396                              <2>  %elifidn %1,forcx
 12397                              <2>  %assign con_break 0
 12398                              <2>  %elifidn %1,repeat
 12399                              <2>  %assign con_cont 0
 12400                              <2>  %assign con_break 0
 12401                              <2>  %elifidn %1,while
 12402                              <2>  %assign con_cont 0
 12403                              <2>  %assign con_break 0
 12404                              <2>  %endif
 12405                              <2> 
 12406                              <2>  %if __cndblock__ == 1
 12407                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 12408                              <2>  %endif
 12409                              <2> 
 12410                              <2>  %push %1
 12411                              <2>  %if con_return
 12412                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 12413                              <2>  %endif
 12414                              <2>  %if con_break
 12415                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 12416                              <3> %define %1%2 %3%4
 12417                              <2>  %endif
 12418                              <2>  %if con_cont
 12419                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 12420                              <3> %define %1%2 %3%4
 12421                              <2>  %endif
 12422                              <2> 
 12423                              <2>  %ifidn %1,andblock
 12424                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 12425                              <2>  %elifidn %1,orblock
 12426                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 12427                              <2>  %endif
 12428                              <1> %assign __return__ __return__ + 1
 12429                              <1> %assign __have_frame__ 0
 12430                              <1> %assign %$have_local 0
 12431                              <1> %assign %$have_save 0
 12432                              <1> %assign __save_all__ 0
 12433                              <1> %assign %$local_args 0
 12434                              <1> %assign %$proc_args 0
 12435                              <1> %assign __save_args__ 0
 12436                              <1> %if %0 > 1
 12437                              <1>  %assign args %0 - 1
 12438                              <1>  %assign %$bp_off 4
 12439                              <1>  %assign i 0
 12440                              <1>  %rotate 1
 12441                              <1>  %ifidn %1,withlocal
 12442                              <1>  %assign %$have_local 1
 12443                              <1>  %assign args args -1
 12444                              <1>  %rotate 1
 12445                              <1>  %endif
 12446                              <1>  %assign %$proc_args args
 12447                              <1>  %rep args
 12448                              <1> 
 12449                              <1>  %%inputarg__%1 EQU %$bp_off
 12450                              <1>  %undef .%1
 12451                              <1>  %define .%1 %%inputarg__%1+bp
 12452                              <1>  cat_define %$proc_argv ,i,%1
 12453                              <1>  %assign %$bp_off %$bp_off + 2
 12454                              <1>  %assign i i+1
 12455                              <1>  %rotate 1
 12456                              <1>  %endrep
 12457                              <1>  %if %$have_local==0
 12458                              <1>  enter 0,0
 12459                              <1>  %assign __have_frame__ 1
 12460                              <1>  %endif
 12461                              <1> %endif
 12462                                  ;input: es:di -> buffer, cx = sector count, edx = lba address
 12463                                  ;return: cf =0 success, cx = number of bytes actually read
 12464                                  	save all
 12465                              <1> %ifctx proc
 12466                              <1>  %if %$have_local == 1
 12467                              <1>  %error "`save' must after `local'"
 12468                              <1>  %endif
 12469                              <1> 
 12470                              <1>  %ifidn all,%1
 12471                              <1>  %assign __save_all__ 1
 12472                              <1>  %if %0 > 1
 12473                              <1>  %ifidn frame,%2
 12474                              <1>  %if __have_frame__ == 0
 12475                              <1>  enter 0,0
 12476                              <1>  %assign __have_frame__ 1
 12477                              <1>  %assign local_off 0
 12478                              <1>  %endif
 12479                              <1>  %endif
 12480                              <1>  %endif
 12481 00000AD3 60                  <1>  pusha
 12482                              <1>  %if __have_frame__ == 1
 12483                              <1>  %undef __AX
 12484                              <1>  %undef __BX
 12485                              <1>  %undef __CX
 12486                              <1>  %undef __DX
 12487                              <1>  %undef __SI
 12488                              <1>  %undef __DI
 12489                              <1>  %idefine __AX bp-local_off - 2
 12490                              <1>  %idefine __CX bp-local_off - 4
 12491                              <1>  %idefine __DX bp-local_off - 6
 12492                              <1>  %idefine __BX bp-local_off - 8
 12493                              <1> 
 12494                              <1> 
 12495                              <1>  %idefine __SI bp-local_off - 14
 12496                              <1>  %idefine __DI bp-local_off - 16
 12497                              <1>  %endif
 12498                              <1>  %elifidn alld,%1
 12499                              <1>  %assign __save_all__ 2
 12500                              <1>  %if %0 > 1
 12501                              <1>  %ifidn frame,%2
 12502                              <1>  %if __have_frame__ == 0
 12503                              <1>  enter 0,0
 12504                              <1>  %assign __have_frame__ 1
 12505                              <1>  %assign local_off 0
 12506                              <1>  %endif
 12507                              <1>  %endif
 12508                              <1>  %endif
 12509                              <1>  pushad
 12510                              <1>  %if __have_frame__ == 1
 12511                              <1>  %undef __EAX
 12512                              <1>  %undef __EBX
 12513                              <1>  %undef __ECX
 12514                              <1>  %undef __EDX
 12515                              <1>  %undef __ESI
 12516                              <1>  %undef __EDI
 12517                              <1>  %idefine __EAX bp-local_off - 4
 12518                              <1>  %idefine __ECX bp-local_off - 8
 12519                              <1>  %idefine __EDX bp-local_off - 12
 12520                              <1>  %idefine __EBX bp-local_off - 16
 12521                              <1> 
 12522                              <1> 
 12523                              <1>  %idefine __ESI bp-local_off - 18
 12524                              <1>  %idefine __EDI bp-local_off - 32
 12525                              <1>  %endif
 12526                              <1> 
 12527                              <1>  %else
 12528                              <1>  %assign __save_args__ %0
 12529                              <1>  %assign __save_all__ 0
 12530                              <1>  %assign i %0
 12531                              <1>  %rep %0
 12532                              <1>  push %1
 12533                              <1>  cat_define %$save_argv ,i,%1
 12534                              <1>  %rotate 1
 12535                              <1>  %assign i i - 1
 12536                              <1>  %endrep
 12537                              <1>  %endif
 12538                              <1> %else
 12539                              <1>  %error "`save' must after `proc'"
 12540                              <1> %endif
 12541 00000AD4 09C9                    	or cx, cx
 12542 00000AD6 743E                    	jz .no_data
 12543                                  
 12544                                  .loop_read:
 12545 00000AD8 51                      	push cx
 12546 00000AD9 6652                    	push edx
 12547                                  
 12548 00000ADB E812FF                  	call clear_atapi_buffer
 12549 00000ADE C606[9D00]28            	mov byte [atapi_cmd_buffer], 0x28
 12550                                  
 12551 00000AE3 660FCA                  	bswap edx
 12552 00000AE6 668916[9F00]            	mov [atapi_cmd_buffer+2], edx
 12553 00000AEB C606[A500]01            	mov byte [atapi_cmd_buffer+8], 1
 12554                                  	invoke reg_packet,byte, 0, es, di, REG_ATAPI_MAX_BYTES
 12555                              <1>  %if %0 == 2
 12556                              <1>  push word %1
 12557                              <1>  %assign rargc 1
 12558                              <1>  %else
 12559                              <1>  %rotate -2
 12560                              <1>  %assign argc %0-1
 12561                              <1>  %assign rargc 0
 12562                              <1>  %rep argc
 12563                              <1>  %ifidn %1,byte
 12564                              <1>  push byte %2
 12565                              <1>  %rotate -1
 12566                              <1>  %assign argc argc -1
 12567                              <1>  %assign rargc rargc +1
 12568                              <1>  %elifidn %1,word
 12569                              <1>  push word %2
 12570                              <1>  %rotate -1
 12571                              <1>  %assign argc argc -1
 12572                              <1>  %assign rargc rargc +1
 12573                              <1>  %elifidn %1,dword
 12574                              <1>  push dword %2
 12575                              <1>  %rotate -1
 12576                              <1>  %assign argc argc -1
 12577                              <1>  %assign rargc rargc +2
 12578                              <1>  %else
 12579                              <1>  push word %2
 12580                              <1>  %assign rargc rargc +1
 12581                              <1>  %endif
 12582                              <1>  %rotate -1
 12583                              <1>  %assign argc argc -1
 12584                              <1>  %if argc <=0
 12585                              <1>  %exitrep
 12586                              <1>  %endif
 12587                              <1>  %endrep
 12588                              <2>  %ifidn %1,byte
 12589                              <2>  push byte %2
 12590                              <2>  %rotate -1
 12591                              <2>  %assign argc argc -1
 12592                              <2>  %assign rargc rargc +1
 12593                              <2>  %elifidn %1,word
 12594                              <2>  push word %2
 12595                              <2>  %rotate -1
 12596                              <2>  %assign argc argc -1
 12597                              <2>  %assign rargc rargc +1
 12598                              <2>  %elifidn %1,dword
 12599                              <2>  push dword %2
 12600                              <2>  %rotate -1
 12601                              <2>  %assign argc argc -1
 12602                              <2>  %assign rargc rargc +2
 12603                              <2>  %else
 12604 00000AF0 680080              <2>  push word %2
 12605                              <2>  %assign rargc rargc +1
 12606                              <2>  %endif
 12607                              <2>  %rotate -1
 12608                              <2>  %assign argc argc -1
 12609                              <2>  %if argc <=0
 12610                              <2>  %exitrep
 12611                              <2>  %endif
 12612                              <2>  %ifidn %1,byte
 12613                              <2>  push byte %2
 12614                              <2>  %rotate -1
 12615                              <2>  %assign argc argc -1
 12616                              <2>  %assign rargc rargc +1
 12617                              <2>  %elifidn %1,word
 12618                              <2>  push word %2
 12619                              <2>  %rotate -1
 12620                              <2>  %assign argc argc -1
 12621                              <2>  %assign rargc rargc +1
 12622                              <2>  %elifidn %1,dword
 12623                              <2>  push dword %2
 12624                              <2>  %rotate -1
 12625                              <2>  %assign argc argc -1
 12626                              <2>  %assign rargc rargc +2
 12627                              <2>  %else
 12628 00000AF3 57                  <2>  push word %2
 12629                              <2>  %assign rargc rargc +1
 12630                              <2>  %endif
 12631                              <2>  %rotate -1
 12632                              <2>  %assign argc argc -1
 12633                              <2>  %if argc <=0
 12634                              <2>  %exitrep
 12635                              <2>  %endif
 12636                              <2>  %ifidn %1,byte
 12637                              <2>  push byte %2
 12638                              <2>  %rotate -1
 12639                              <2>  %assign argc argc -1
 12640                              <2>  %assign rargc rargc +1
 12641                              <2>  %elifidn %1,word
 12642                              <2>  push word %2
 12643                              <2>  %rotate -1
 12644                              <2>  %assign argc argc -1
 12645                              <2>  %assign rargc rargc +1
 12646                              <2>  %elifidn %1,dword
 12647                              <2>  push dword %2
 12648                              <2>  %rotate -1
 12649                              <2>  %assign argc argc -1
 12650                              <2>  %assign rargc rargc +2
 12651                              <2>  %else
 12652 00000AF4 06                  <2>  push word %2
 12653                              <2>  %assign rargc rargc +1
 12654                              <2>  %endif
 12655                              <2>  %rotate -1
 12656                              <2>  %assign argc argc -1
 12657                              <2>  %if argc <=0
 12658                              <2>  %exitrep
 12659                              <2>  %endif
 12660                              <2>  %ifidn %1,byte
 12661 00000AF5 6A00                <2>  push byte %2
 12662                              <2>  %rotate -1
 12663                              <2>  %assign argc argc -1
 12664                              <2>  %assign rargc rargc +1
 12665                              <2>  %elifidn %1,word
 12666                              <2>  push word %2
 12667                              <2>  %rotate -1
 12668                              <2>  %assign argc argc -1
 12669                              <2>  %assign rargc rargc +1
 12670                              <2>  %elifidn %1,dword
 12671                              <2>  push dword %2
 12672                              <2>  %rotate -1
 12673                              <2>  %assign argc argc -1
 12674                              <2>  %assign rargc rargc +2
 12675                              <2>  %else
 12676                              <2>  push word %2
 12677                              <2>  %assign rargc rargc +1
 12678                              <2>  %endif
 12679                              <2>  %rotate -1
 12680                              <2>  %assign argc argc -1
 12681                              <2>  %if argc <=0
 12682                              <2>  %exitrep
 12683                              <2>  %endif
 12684                              <1>  %rotate 1
 12685                              <1>  %endif
 12686 00000AF7 E868FB              <1>  call %1
 12687 00000AFA 83C408              <1>  add sp,(rargc)*2
 12688 00000AFD 09C0                    	or ax, ax
 12689 00000AFF 7512                    	jnz .fail
 12690 00000B01 81F90008                	cmp cx, CDSECTOR_SIZE
 12691 00000B05 750C                    	jne .fail
 12692 00000B07 665A                    	pop edx
 12693 00000B09 6642                    	inc edx
 12694 00000B0B 01CF                    	add di, cx
 12695 00000B0D 59                      	pop cx
 12696 00000B0E E2C8                    	loop .loop_read
 12697                                  
 12698 00000B10 F8                      	clc
 12699 00000B11 EB04                    	jmp short .end
 12700                                  
 12701                                  .fail:
 12702 00000B13 665A                    	pop edx
 12703 00000B15 59                      	pop cx
 12704                                  
 12705                                  .no_data:
 12706 00000B16 F9                      	stc
 12707                                  .end:
 12708                                  endp
 12709                              <1> %ifnctx proc
 12710                              <1>  %error "expected `proc' before `endp'"
 12711                              <1> %endif
 12712                              <1>  cat_lable %$return,__level__
 12713                              <2> %1%2:
 12714                              <1>  %if __save_all__ ==1
 12715 00000B17 61                  <1>  popa
 12716                              <1>  %elif __save_all__ == 2
 12717                              <1>  popad
 12718                              <1>  %elif __save_args__ > 0
 12719                              <1>  %assign i 1
 12720                              <1>  %rep __save_args__
 12721                              <1>  linecat pop, %$save_argv,i
 12722                              <1>  %assign i i+1
 12723                              <1>  %endrep
 12724                              <1>  %endif
 12725                              <1>  %if __have_frame__ > 0
 12726                              <1>  leave
 12727                              <1>  %endif
 12728                              <1> 
 12729                              <1>  %assign i 0
 12730                              <1>  %rep %$proc_args
 12731                              <1> 
 12732                              <1>  %assign i i+1
 12733                              <1>  %endrep
 12734                              <1> 
 12735                              <1>  %assign i 0
 12736                              <1>  %rep %$local_args
 12737                              <1> 
 12738                              <1>  %assign i i+1
 12739                              <1>  %endrep
 12740 00000B18 C3                  <1>  ret
 12741                              <1>  con_pop
 12742                              <2>  %pop
 12743                              <2>  %assign __level__ __level__ - 1
 12744                              <1>  %assign __return__ __return__ - 1
 12745                                  
 12746                                  proc init_atapi_cdroms
 12747                              <1> GLOBAL %1
 12748                              <1> %1:
 12749                              <1> con_push proc
 12750                              <2>  %assign __lastlevel__ __level__
 12751                              <2>  %assign __level__ __level__ + 1
 12752                              <2>  %if __return__ > 0
 12753                              <2>  %assign con_return 1
 12754                              <2>  %else
 12755                              <2>  %assign con_return 0
 12756                              <2>  %endif
 12757                              <2> 
 12758                              <2>  %if __cont__ > 0
 12759                              <2>  %assign con_cont 1
 12760                              <2>  %else
 12761                              <2>  %assign con_cont 0
 12762                              <2>  %endif
 12763                              <2>  %if __break__ > 0
 12764                              <2>  %assign con_break 1
 12765                              <2>  %else
 12766                              <2>  %assign con_break 0
 12767                              <2>  %endif
 12768                              <2> 
 12769                              <2>  %ifidn %1,proc
 12770                              <2>  %assign con_return 0
 12771                              <2>  %elifidn %1,forcx
 12772                              <2>  %assign con_break 0
 12773                              <2>  %elifidn %1,repeat
 12774                              <2>  %assign con_cont 0
 12775                              <2>  %assign con_break 0
 12776                              <2>  %elifidn %1,while
 12777                              <2>  %assign con_cont 0
 12778                              <2>  %assign con_break 0
 12779                              <2>  %endif
 12780                              <2> 
 12781                              <2>  %if __cndblock__ == 1
 12782                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 12783                              <2>  %endif
 12784                              <2> 
 12785                              <2>  %push %1
 12786                              <2>  %if con_return
 12787                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 12788                              <2>  %endif
 12789                              <2>  %if con_break
 12790                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 12791                              <3> %define %1%2 %3%4
 12792                              <2>  %endif
 12793                              <2>  %if con_cont
 12794                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 12795                              <3> %define %1%2 %3%4
 12796                              <2>  %endif
 12797                              <2> 
 12798                              <2>  %ifidn %1,andblock
 12799                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 12800                              <2>  %elifidn %1,orblock
 12801                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 12802                              <2>  %endif
 12803                              <1> %assign __return__ __return__ + 1
 12804                              <1> %assign __have_frame__ 0
 12805                              <1> %assign %$have_local 0
 12806                              <1> %assign %$have_save 0
 12807                              <1> %assign __save_all__ 0
 12808                              <1> %assign %$local_args 0
 12809                              <1> %assign %$proc_args 0
 12810                              <1> %assign __save_args__ 0
 12811                              <1> %if %0 > 1
 12812                              <1>  %assign args %0 - 1
 12813                              <1>  %assign %$bp_off 4
 12814                              <1>  %assign i 0
 12815                              <1>  %rotate 1
 12816                              <1>  %ifidn %1,withlocal
 12817                              <1>  %assign %$have_local 1
 12818                              <1>  %assign args args -1
 12819                              <1>  %rotate 1
 12820                              <1>  %endif
 12821                              <1>  %assign %$proc_args args
 12822                              <1>  %rep args
 12823                              <1> 
 12824                              <1>  %%inputarg__%1 EQU %$bp_off
 12825                              <1>  %undef .%1
 12826                              <1>  %define .%1 %%inputarg__%1+bp
 12827                              <1>  cat_define %$proc_argv ,i,%1
 12828                              <1>  %assign %$bp_off %$bp_off + 2
 12829                              <1>  %assign i i+1
 12830                              <1>  %rotate 1
 12831                              <1>  %endrep
 12832                              <1>  %if %$have_local==0
 12833                              <1>  enter 0,0
 12834                              <1>  %assign __have_frame__ 1
 12835                              <1>  %endif
 12836                              <1> %endif
 12837                                  ; return: cf =0 success, cx =number of cdroms
 12838                                  ;         cf =1 failed, no cdrom found
 12839                                  ;	push cs
 12840                                  ;	pop es
 12841                                  
 12842 00000B19 E845FE                  	call reg_probe
 12843 00000B1C 09C9                    	or cx, cx
 12844 00000B1E 7507                    	jnz .find_cdrom
 12845                                  
 12846 00000B20 E83EFE                  	call reg_probe
 12847 00000B23 09C9                    	or cx, cx
 12848 00000B25 7431                    	jz .nocdrom
 12849                                  
 12850                                  .find_cdrom:
 12851                                  %if 1
 12852 00000B27 BE[0900]                	mov si, atapi_dev_base
 12853 00000B2A BF[4900]                	mov di, atapi_dev_base_bak
 12854 00000B2D FC                      	cld
 12855 00000B2E 56                      	push si
 12856 00000B2F 57                      	push di
 12857 00000B30 31C0                    	xor ax, ax
 12858 00000B32 31DB                    	xor bx, bx
 12859                                  	forcx 
 12860                              <1> con_push forcx
 12861                              <2>  %assign __lastlevel__ __level__
 12862                              <2>  %assign __level__ __level__ + 1
 12863                              <2>  %if __return__ > 0
 12864                              <2>  %assign con_return 1
 12865                              <2>  %else
 12866                              <2>  %assign con_return 0
 12867                              <2>  %endif
 12868                              <2> 
 12869                              <2>  %if __cont__ > 0
 12870                              <2>  %assign con_cont 1
 12871                              <2>  %else
 12872                              <2>  %assign con_cont 0
 12873                              <2>  %endif
 12874                              <2>  %if __break__ > 0
 12875                              <2>  %assign con_break 1
 12876                              <2>  %else
 12877                              <2>  %assign con_break 0
 12878                              <2>  %endif
 12879                              <2> 
 12880                              <2>  %ifidn %1,proc
 12881                              <2>  %assign con_return 0
 12882                              <2>  %elifidn %1,forcx
 12883                              <2>  %assign con_break 0
 12884                              <2>  %elifidn %1,repeat
 12885                              <2>  %assign con_cont 0
 12886                              <2>  %assign con_break 0
 12887                              <2>  %elifidn %1,while
 12888                              <2>  %assign con_cont 0
 12889                              <2>  %assign con_break 0
 12890                              <2>  %endif
 12891                              <2> 
 12892                              <2>  %if __cndblock__ == 1
 12893                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 12894                              <2>  %endif
 12895                              <2> 
 12896                              <2>  %push %1
 12897                              <2>  %if con_return
 12898                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 12899                              <3> %define %1%2 %3%4
 12900                              <2>  %endif
 12901                              <2>  %if con_break
 12902                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 12903                              <2>  %endif
 12904                              <2>  %if con_cont
 12905                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 12906                              <3> %define %1%2 %3%4
 12907                              <2>  %endif
 12908                              <2> 
 12909                              <2>  %ifidn %1,andblock
 12910                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 12911                              <2>  %elifidn %1,orblock
 12912                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 12913                              <2>  %endif
 12914                              <1> %assign __break__ __break__ + 1
 12915                              <1> %if %0 > 0
 12916                              <1>  mov cx, %1
 12917                              <1> %endif
 12918                              <1> %$begin:
 12919 00000B34 E885FE                  		call select_atapi_force
 12920 00000B37 720A                    		jc .chk_next
 12921 00000B39 E86AFF                  		call check_atapi_cdrom
 12922 00000B3C 7205                    		jc .chk_next
 12923 00000B3E 43                      		inc bx
 12924 00000B3F A5                      		movsw
 12925 00000B40 A5                      		movsw
 12926 00000B41 EB03                    		jmp short .loop_next
 12927                                  		.chk_next:
 12928 00000B43 83C604                  		add si, 4
 12929                                  		.loop_next:
 12930 00000B46 40                      		inc ax
 12931                                  	endforcx
 12932                              <1>  %ifnctx forcx
 12933                              <1>  %error "expected `forcx' before `endfor'"
 12934                              <1>  %endif
 12935                              <1>  %if %0 > 0
 12936                              <1>  %ifidn %1,while
 12937                              <1>  %rotate 1
 12938                              <1>  cat_lable %$cont,__level__
 12939                              <1>  %rep %0 - 2
 12940                              <1>  %1
 12941                              <1>  %rotate 1
 12942                              <1>  %endrep
 12943                              <1>  %else
 12944                              <1>  %error "expected `while' after `endfor'"
 12945                              <1>  %endif
 12946                              <1>  loop%+1 %$begin
 12947                              <1>  %else
 12948 00000B47 E2EB                <1>  loop %$begin
 12949                              <1>  %endif
 12950                              <1>  %$end:
 12951                              <1>  cat_lable %$break,__level__
 12952                              <2> %1%2:
 12953                              <1> 
 12954                              <1>  con_pop
 12955                              <2>  %pop
 12956                              <2>  %assign __level__ __level__ - 1
 12957                              <1>  %assign __break__ __break__ - 1
 12958                                  
 12959 00000B49 5E                      	pop si
 12960 00000B4A 5F                      	pop di
 12961                                  
 12962 00000B4B B94000                  	mov cx, 64
 12963 00000B4E F3A4                    	rep movsb
 12964                                  
 12965 00000B50 891E[0700]              	mov [atapi_dev_count], bx
 12966 00000B54 89D9                    	mov cx, bx
 12967                                  %endif
 12968                                  
 12969 00000B56 F8                      	clc
 12970                                  	return
 12971                              <1>  %if %0 > 0
 12972                              <1>  %assign __near__ 0
 12973                              <1>  %assign argc %0
 12974                              <1>  %ifidn %1,near
 12975                              <1>  %assign __near__ 1
 12976                              <1>  %assign argc argc-1
 12977                              <1>  %rotate 1
 12978                              <1>  %endif
 12979                              <1>  %if argc > 0
 12980                              <1>  %ifidn %1,if
 12981                              <1> 
 12982                              <1>  %rotate 1
 12983                              <1>  %rep argc-2
 12984                              <1>  %1
 12985                              <1>  %rotate 1
 12986                              <1>  %endrep
 12987                              <1>  %if __near__ == 0
 12988                              <1>  cat_jc %1,%$return,__level__
 12989                              <1>  %else
 12990                              <1>  cat_jc_near %1,%$return,__level__
 12991                              <1>  %endif
 12992                              <1>  %else
 12993                              <1>  %error "expect `if' after `return'"
 12994                              <1>  %endif
 12995                              <1>  %else
 12996                              <1>  %if __near__ == 0
 12997                              <1>  cat_jmp %$return,__level__
 12998                              <1>  %else
 12999                              <1>  cat_jmp_near %$return,__level__
 13000                              <1>  %endif
 13001                              <1>  %endif
 13002                              <1>  %else
 13003                              <1>  %if __have_frame__ == 0 && __save_all__ == 0 && __save_args__ == 0
 13004 00000B57 C3                  <1>  ret
 13005                              <1>  %else
 13006                              <1>  cat_jmp %$return,__level__
 13007                              <1>  %endif
 13008                              <1>  %endif
 13009                                  
 13010                                  .nocdrom:
 13011 00000B58 F9                      	stc
 13012                                  endp
 13013                              <1> %ifnctx proc
 13014                              <1>  %error "expected `proc' before `endp'"
 13015                              <1> %endif
 13016                              <1>  cat_lable %$return,__level__
 13017                              <2> %1%2:
 13018                              <1>  %if __save_all__ ==1
 13019                              <1>  popa
 13020                              <1>  %elif __save_all__ == 2
 13021                              <1>  popad
 13022                              <1>  %elif __save_args__ > 0
 13023                              <1>  %assign i 1
 13024                              <1>  %rep __save_args__
 13025                              <1>  linecat pop, %$save_argv,i
 13026                              <1>  %assign i i+1
 13027                              <1>  %endrep
 13028                              <1>  %endif
 13029                              <1>  %if __have_frame__ > 0
 13030                              <1>  leave
 13031                              <1>  %endif
 13032                              <1> 
 13033                              <1>  %assign i 0
 13034                              <1>  %rep %$proc_args
 13035                              <1> 
 13036                              <1>  %assign i i+1
 13037                              <1>  %endrep
 13038                              <1> 
 13039                              <1>  %assign i 0
 13040                              <1>  %rep %$local_args
 13041                              <1> 
 13042                              <1>  %assign i i+1
 13043                              <1>  %endrep
 13044 00000B59 C3                  <1>  ret
 13045                              <1>  con_pop
 13046                              <2>  %pop
 13047                              <2>  %assign __level__ __level__ - 1
 13048                              <1>  %assign __return__ __return__ - 1
 13049                                  
 13050                                  proc reset_atapi_cdroms
 13051                              <1> GLOBAL %1
 13052                              <1> %1:
 13053                              <1> con_push proc
 13054                              <2>  %assign __lastlevel__ __level__
 13055                              <2>  %assign __level__ __level__ + 1
 13056                              <2>  %if __return__ > 0
 13057                              <2>  %assign con_return 1
 13058                              <2>  %else
 13059                              <2>  %assign con_return 0
 13060                              <2>  %endif
 13061                              <2> 
 13062                              <2>  %if __cont__ > 0
 13063                              <2>  %assign con_cont 1
 13064                              <2>  %else
 13065                              <2>  %assign con_cont 0
 13066                              <2>  %endif
 13067                              <2>  %if __break__ > 0
 13068                              <2>  %assign con_break 1
 13069                              <2>  %else
 13070                              <2>  %assign con_break 0
 13071                              <2>  %endif
 13072                              <2> 
 13073                              <2>  %ifidn %1,proc
 13074                              <2>  %assign con_return 0
 13075                              <2>  %elifidn %1,forcx
 13076                              <2>  %assign con_break 0
 13077                              <2>  %elifidn %1,repeat
 13078                              <2>  %assign con_cont 0
 13079                              <2>  %assign con_break 0
 13080                              <2>  %elifidn %1,while
 13081                              <2>  %assign con_cont 0
 13082                              <2>  %assign con_break 0
 13083                              <2>  %endif
 13084                              <2> 
 13085                              <2>  %if __cndblock__ == 1
 13086                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 13087                              <2>  %endif
 13088                              <2> 
 13089                              <2>  %push %1
 13090                              <2>  %if con_return
 13091                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 13092                              <2>  %endif
 13093                              <2>  %if con_break
 13094                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 13095                              <3> %define %1%2 %3%4
 13096                              <2>  %endif
 13097                              <2>  %if con_cont
 13098                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 13099                              <3> %define %1%2 %3%4
 13100                              <2>  %endif
 13101                              <2> 
 13102                              <2>  %ifidn %1,andblock
 13103                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 13104                              <2>  %elifidn %1,orblock
 13105                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 13106                              <2>  %endif
 13107                              <1> %assign __return__ __return__ + 1
 13108                              <1> %assign __have_frame__ 0
 13109                              <1> %assign %$have_local 0
 13110                              <1> %assign %$have_save 0
 13111                              <1> %assign __save_all__ 0
 13112                              <1> %assign %$local_args 0
 13113                              <1> %assign %$proc_args 0
 13114                              <1> %assign __save_args__ 0
 13115                              <1> %if %0 > 1
 13116                              <1>  %assign args %0 - 1
 13117                              <1>  %assign %$bp_off 4
 13118                              <1>  %assign i 0
 13119                              <1>  %rotate 1
 13120                              <1>  %ifidn %1,withlocal
 13121                              <1>  %assign %$have_local 1
 13122                              <1>  %assign args args -1
 13123                              <1>  %rotate 1
 13124                              <1>  %endif
 13125                              <1>  %assign %$proc_args args
 13126                              <1>  %rep args
 13127                              <1> 
 13128                              <1>  %%inputarg__%1 EQU %$bp_off
 13129                              <1>  %undef .%1
 13130                              <1>  %define .%1 %%inputarg__%1+bp
 13131                              <1>  cat_define %$proc_argv ,i,%1
 13132                              <1>  %assign %$bp_off %$bp_off + 2
 13133                              <1>  %assign i i+1
 13134                              <1>  %rotate 1
 13135                              <1>  %endrep
 13136                              <1>  %if %$have_local==0
 13137                              <1>  enter 0,0
 13138                              <1>  %assign __have_frame__ 1
 13139                              <1>  %endif
 13140                              <1> %endif
 13141 00000B5A 8B0E[0700]              	mov cx, [atapi_dev_count]
 13142 00000B5E 31C0                    	xor ax, ax
 13143                                  
 13144                                  	if {or cx, cx}, z
 13145                              <1>  %rep %0 -1
 13146                              <1>  %1
 13147                              <1>  %rotate 1
 13148                              <1>  %endrep
 13149 00000B60 09C9                <2>  %1
 13150                              <2>  %rotate 1
 13151                              <1> 
 13152                              <1>  con_push if
 13153                              <2>  %assign __lastlevel__ __level__
 13154                              <2>  %assign __level__ __level__ + 1
 13155                              <2>  %if __return__ > 0
 13156                              <2>  %assign con_return 1
 13157                              <2>  %else
 13158                              <2>  %assign con_return 0
 13159                              <2>  %endif
 13160                              <2> 
 13161                              <2>  %if __cont__ > 0
 13162                              <2>  %assign con_cont 1
 13163                              <2>  %else
 13164                              <2>  %assign con_cont 0
 13165                              <2>  %endif
 13166                              <2>  %if __break__ > 0
 13167                              <2>  %assign con_break 1
 13168                              <2>  %else
 13169                              <2>  %assign con_break 0
 13170                              <2>  %endif
 13171                              <2> 
 13172                              <2>  %ifidn %1,proc
 13173                              <2>  %assign con_return 0
 13174                              <2>  %elifidn %1,forcx
 13175                              <2>  %assign con_break 0
 13176                              <2>  %elifidn %1,repeat
 13177                              <2>  %assign con_cont 0
 13178                              <2>  %assign con_break 0
 13179                              <2>  %elifidn %1,while
 13180                              <2>  %assign con_cont 0
 13181                              <2>  %assign con_break 0
 13182                              <2>  %endif
 13183                              <2> 
 13184                              <2>  %if __cndblock__ == 1
 13185                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 13186                              <2>  %endif
 13187                              <2> 
 13188                              <2>  %push %1
 13189                              <2>  %if con_return
 13190                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 13191                              <3> %define %1%2 %3%4
 13192                              <2>  %endif
 13193                              <2>  %if con_break
 13194                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 13195                              <3> %define %1%2 %3%4
 13196                              <2>  %endif
 13197                              <2>  %if con_cont
 13198                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 13199                              <3> %define %1%2 %3%4
 13200                              <2>  %endif
 13201                              <2> 
 13202                              <2>  %ifidn %1,andblock
 13203                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 13204                              <2>  %elifidn %1,orblock
 13205                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 13206                              <2>  %endif
 13207                              <1> 
 13208                              <1>  %if %0 > 0
 13209 00000B62 7501                <1>  j%-1 %$ifnot
 13210                              <1>  %endif
 13211                              <1>  %assign %$elif_level 0
 13212                                  		return
 13213                              <1>  %if %0 > 0
 13214                              <1>  %assign __near__ 0
 13215                              <1>  %assign argc %0
 13216                              <1>  %ifidn %1,near
 13217                              <1>  %assign __near__ 1
 13218                              <1>  %assign argc argc-1
 13219                              <1>  %rotate 1
 13220                              <1>  %endif
 13221                              <1>  %if argc > 0
 13222                              <1>  %ifidn %1,if
 13223                              <1> 
 13224                              <1>  %rotate 1
 13225                              <1>  %rep argc-2
 13226                              <1>  %1
 13227                              <1>  %rotate 1
 13228                              <1>  %endrep
 13229                              <1>  %if __near__ == 0
 13230                              <1>  cat_jc %1,%$return,__level__
 13231                              <1>  %else
 13232                              <1>  cat_jc_near %1,%$return,__level__
 13233                              <1>  %endif
 13234                              <1>  %else
 13235                              <1>  %error "expect `if' after `return'"
 13236                              <1>  %endif
 13237                              <1>  %else
 13238                              <1>  %if __near__ == 0
 13239                              <1>  cat_jmp %$return,__level__
 13240                              <1>  %else
 13241                              <1>  cat_jmp_near %$return,__level__
 13242                              <1>  %endif
 13243                              <1>  %endif
 13244                              <1>  %else
 13245                              <1>  %if __have_frame__ == 0 && __save_all__ == 0 && __save_args__ == 0
 13246 00000B64 C3                  <1>  ret
 13247                              <1>  %else
 13248                              <1>  cat_jmp %$return,__level__
 13249                              <1>  %endif
 13250                              <1>  %endif
 13251                                  	endif
 13252                              <1>  %assign elselevel 0
 13253                              <1>  %ifctx if
 13254                              <1>  %$ifnot:
 13255                              <1>  con_pop
 13256                              <2>  %pop
 13257                              <2>  %assign __level__ __level__ - 1
 13258                              <1>  %elifctx else
 13259                              <1>  %assign elselevel %$elif_level
 13260                              <1>  %$ifend:
 13261                              <1>  con_pop
 13262                              <1>  %elifctx elif
 13263                              <1>  %assign elselevel %$elif_level
 13264                              <1>  %$ifnot:
 13265                              <1>  con_pop
 13266                              <1>  %else
 13267                              <1>  %error "expected `if' or `else' before `endif'"
 13268                              <1>  %endif
 13269                              <1>  %rep elselevel
 13270                              <1>  %$ifend:
 13271                              <1>  con_pop
 13272                              <1>  %endrep
 13273                                  
 13274                                  	forcx
 13275                              <1> con_push forcx
 13276                              <2>  %assign __lastlevel__ __level__
 13277                              <2>  %assign __level__ __level__ + 1
 13278                              <2>  %if __return__ > 0
 13279                              <2>  %assign con_return 1
 13280                              <2>  %else
 13281                              <2>  %assign con_return 0
 13282                              <2>  %endif
 13283                              <2> 
 13284                              <2>  %if __cont__ > 0
 13285                              <2>  %assign con_cont 1
 13286                              <2>  %else
 13287                              <2>  %assign con_cont 0
 13288                              <2>  %endif
 13289                              <2>  %if __break__ > 0
 13290                              <2>  %assign con_break 1
 13291                              <2>  %else
 13292                              <2>  %assign con_break 0
 13293                              <2>  %endif
 13294                              <2> 
 13295                              <2>  %ifidn %1,proc
 13296                              <2>  %assign con_return 0
 13297                              <2>  %elifidn %1,forcx
 13298                              <2>  %assign con_break 0
 13299                              <2>  %elifidn %1,repeat
 13300                              <2>  %assign con_cont 0
 13301                              <2>  %assign con_break 0
 13302                              <2>  %elifidn %1,while
 13303                              <2>  %assign con_cont 0
 13304                              <2>  %assign con_break 0
 13305                              <2>  %endif
 13306                              <2> 
 13307                              <2>  %if __cndblock__ == 1
 13308                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 13309                              <2>  %endif
 13310                              <2> 
 13311                              <2>  %push %1
 13312                              <2>  %if con_return
 13313                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 13314                              <3> %define %1%2 %3%4
 13315                              <2>  %endif
 13316                              <2>  %if con_break
 13317                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 13318                              <2>  %endif
 13319                              <2>  %if con_cont
 13320                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 13321                              <3> %define %1%2 %3%4
 13322                              <2>  %endif
 13323                              <2> 
 13324                              <2>  %ifidn %1,andblock
 13325                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 13326                              <2>  %elifidn %1,orblock
 13327                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 13328                              <2>  %endif
 13329                              <1> %assign __break__ __break__ + 1
 13330                              <1> %if %0 > 0
 13331                              <1>  mov cx, %1
 13332                              <1> %endif
 13333                              <1> %$begin:
 13334 00000B65 E84CFE                  		call select_atapi
 13335 00000B68 E8A2FD                  		call reg_reset
 13336 00000B6B 40                      		inc ax
 13337                                  	endforcx
 13338                              <1>  %ifnctx forcx
 13339                              <1>  %error "expected `forcx' before `endfor'"
 13340                              <1>  %endif
 13341                              <1>  %if %0 > 0
 13342                              <1>  %ifidn %1,while
 13343                              <1>  %rotate 1
 13344                              <1>  cat_lable %$cont,__level__
 13345                              <1>  %rep %0 - 2
 13346                              <1>  %1
 13347                              <1>  %rotate 1
 13348                              <1>  %endrep
 13349                              <1>  %else
 13350                              <1>  %error "expected `while' after `endfor'"
 13351                              <1>  %endif
 13352                              <1>  loop%+1 %$begin
 13353                              <1>  %else
 13354 00000B6C E2F7                <1>  loop %$begin
 13355                              <1>  %endif
 13356                              <1>  %$end:
 13357                              <1>  cat_lable %$break,__level__
 13358                              <2> %1%2:
 13359                              <1> 
 13360                              <1>  con_pop
 13361                              <2>  %pop
 13362                              <2>  %assign __level__ __level__ - 1
 13363                              <1>  %assign __break__ __break__ - 1
 13364                                  endp
 13365                              <1> %ifnctx proc
 13366                              <1>  %error "expected `proc' before `endp'"
 13367                              <1> %endif
 13368                              <1>  cat_lable %$return,__level__
 13369                              <2> %1%2:
 13370                              <1>  %if __save_all__ ==1
 13371                              <1>  popa
 13372                              <1>  %elif __save_all__ == 2
 13373                              <1>  popad
 13374                              <1>  %elif __save_args__ > 0
 13375                              <1>  %assign i 1
 13376                              <1>  %rep __save_args__
 13377                              <1>  linecat pop, %$save_argv,i
 13378                              <1>  %assign i i+1
 13379                              <1>  %endrep
 13380                              <1>  %endif
 13381                              <1>  %if __have_frame__ > 0
 13382                              <1>  leave
 13383                              <1>  %endif
 13384                              <1> 
 13385                              <1>  %assign i 0
 13386                              <1>  %rep %$proc_args
 13387                              <1> 
 13388                              <1>  %assign i i+1
 13389                              <1>  %endrep
 13390                              <1> 
 13391                              <1>  %assign i 0
 13392                              <1>  %rep %$local_args
 13393                              <1> 
 13394                              <1>  %assign i i+1
 13395                              <1>  %endrep
 13396 00000B6E C3                  <1>  ret
 13397                              <1>  con_pop
 13398                              <2>  %pop
 13399                              <2>  %assign __level__ __level__ - 1
 13400                              <1>  %assign __return__ __return__ - 1
 13401                                  
 13402                                  	section .data
 13403                                  
 13404                                  %ifdef SLOW_ATAPI_DEVICE
 13405                                  atapi_delay_flag	db 1
 13406                                  reg_slow_xfer_flag	db 1
 13407                                  %else
 13408 00000000 00                      atapi_delay_flag	db 0
 13409 00000001 00                      reg_slow_xfer_flag	db 0
 13410                                  %endif
 13411                                  
 13412 00000002 A0B0                    cmd_select_dev		db CB_DH_DEV0,CB_DH_DEV1
 13413 00000004 F001F60370017603        reg_base_addr		dw 0x1f0,0x3f6, 0x170,0x376
 13414 0000000C 80018603006B006F        			dw 0x180,0x386, 0x6b00,0x6f00
 13415 00000014 00730077                			dw 0x7300,0x7700
 13416                                  
 13417 00000018 0000000000000000        reg_base_addr_append	dw 0,0,0,0
 13418                                  
 13419                                  %endif			; DISABLE_CDBOOT
 13420                                  
 13421                                  	section .bss
 13422                                  
 13423                                  %ifndef DISABLE_CDBOOT
 13424                                  start_of_atapi_data:
 13425                                  
 13426 00000000 <res 00000002>          atapi_cur_dev		resw 1
 13427 00000002 <res 00000001>          reg_cur_dev		resb 1
 13428 00000003 <res 00000002>          time_out		resw 1
 13429 00000005 <res 00000002>          reg_dev_info		resb 2
 13430                                  
 13431 00000007 <res 00000002>          atapi_dev_count		resw 1 
 13432 00000009 <res 00000040>          atapi_dev_base		resw 2*16	; first word is the base pointer,
 13433                                  					; second word is the device
 13434 00000049 <res 00000040>          atapi_dev_base_bak	resw 2*16	; first word is the base pointer,
 13435                                  					; second word is the device
 13436 00000089 <res 00000014>          reg_addr		resw 10
 13437 0000009D <res 00000010>          atapi_cmd_buffer	resb 16
 13438 000000AD <res 00000100>          atapi_tmp_buffer	resb 256
 13439 000001AD <res 00000020>          atapi_devinfo		resb SIZE_OF_ATAPI_DEVINFO
 13440 000001CD <res 00000004>          delay_repeat_num	resd 1
 13441                                  
 13442                                  end_of_atapi_data:
 13443                                  %endif
 13444                                  
 13445                                  start_of_emu_data:
 13446                                  
 13447 000001D1 <res 00000006>          drive_map 	resw 3
 13448                                  
 13449                                  %ifndef DISABLE_CDBOOT
 13450 000001D7 <res 00000002>          emu_buf_off	resw 1
 13451 000001D9 <res 00000002>          emu_buf_seg	resw 1
 13452 000001DB <res 00000001>          emu_cdrom_id	resb 1
 13453 000001DC <res 00000001>          emu_disk_type	resb 1	;1=360 2=1.2 3=720 4=1.44 6=2.88 10h=atapi
 13454 000001DD <res 00000002>          emu_cyl		resw 1
 13455 000001DF <res 00000002>          emu_sec		resw 1
 13456 000001E1 <res 00000002>          emu_head	resw 1
 13457 000001E3 <res 00000004>          emu_last_read	resd 1
 13458                                  
 13459 000001E7 <res 00000001>          int13_last_stat resb 1
 13460                                  
 13461 000001E8 <res 00000013>          edd30_cdemu_spec resb SIZE_OF_CDEMU_SPEC
 13462 000001FB <res 00000010>          atapi_dpte_buffer resb SIZE_OF_DPTE
 13463 0000020B <res 00000800>          edd30_disk_buffer resb 0x800
 13464                                  %endif
 13465                                  
 13466                                  end_of_emu_data:
 13467                                  
