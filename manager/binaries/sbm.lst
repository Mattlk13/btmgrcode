     1                                  ; 
     2                                  ; 
     3                                  ; Smart Boot Manager
     4                                  ; 
     5                                  ; 
     6                                  ;  developed by
     7                                  ;    
     8                                  ;       Peter Kleissner
     9                                  ;       Vienna Computer Products
    10                                  ;       Suzhe
    11                                  ;       Christopher Li
    12                                  ;       Risko Gergely
    13                                  ;       Victor O`Muerte
    14                                  ;       Dirk Knop
    15                                  ;       Lenart Janos
    16                                  ;       Frédéric Bonnaud
    17                                  ;       brz
    18                                  ;       Manuel Clos
    19                                  ;       Benoit Mortier
    20                                  ;       Bill Hults
    21                                  ;       Andr Maldonado
    22                                  ;       Santiago Garcia Mantinan
    23                                  ;       
    24                                  ;       Thank you all.
    25                                  ;       
    26                                  
    27                                  ; asmsyntax=nasm
    28                                  ;
    29                                  ; main.asm
    30                                  ;
    31                                  ; Main programs for Smart Boot Manager
    32                                  ;
    33                                  ; Copyright (C) 2000, Suzhe. See file COPYING for details.
    34                                  ; Copyright (C) 2001, Suzhe. See file COPYING for details.
    35                                  ;
    36                                  
    37                                  ; optional Assembly:
    38                                  ; 
    39                                  ;   EMULATE_PROG
    40                                  ;       if defined, creates DOS executable Test-vesions
    41                                  ; 
    42                                  ;   THEME_ZH, THEME_DE, THEME_HU, THEME_RU, THEME_CZ, THEME_ES, THEME_FR, THEME_PT, else US
    43                                  ;       language themes
    44                                  ;   
    45                                  ;   DISABLE_CDBOOT
    46                                  ;       disables CD Boot and initialization of it
    47                                  
    48                                  
    49                                  ; compile 16 bit code (Real Mode) and beware backward compatibility down to 386er
    50                                  [bits 16]
    51                                  CPU 386
    52                                  
    53                                  
    54                                  ;%define MAIN
    55                                  
    56                                  %include "macros.h"
    57                              <1> ; macros.h
    58                              <1> ;
    59                              <1> ; some nasm macros that simplify the coding.
    60                              <1> ;
    61                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
    62                              <1> ;
    63                              <1> 
    64                              <1> %ifndef DEFINE_MACROS
    65                              <1> %define DEFINE_MACROS
    66                              <1> 
    67                              <1> %macro retz 0
    68                              <1>        jnz %%skip
    69                              <1>        ret
    70                              <1> %%skip:
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> %define jmpz  jz near
    74                              <1> %define jmpnz jnz near
    75                              <1> %define jmpe  je near
    76                              <1> %define jmpne jne near
    77                              <1> %define jmpc  jc near
    78                              <1> %define jmpnc jnc near
    79                              <1> %define jmpa  ja near
    80                              <1> %define jmpna jna near
    81                              <1> %define jmpb  jb near
    82                              <1> %define jmpnb jnb near
    83                              <1> 
    84                              <1> 
    85                              <1> %if 0
    86                              <1> %macro jmpz 1
    87                              <1>        jnz %%skip
    88                              <1>        jmp %1
    89                              <1> %%skip:
    90                              <1> %endmacro
    91                              <1> 
    92                              <1> %macro jmpnz 1
    93                              <1>        jz %%skip
    94                              <1>        jmp %1
    95                              <1> %%skip:
    96                              <1> %endmacro
    97                              <1> 
    98                              <1> %macro jmpe 1
    99                              <1>        jne %%skip
   100                              <1>        jmp %1
   101                              <1> %%skip:
   102                              <1> %endmacro
   103                              <1> 
   104                              <1> %macro jmpne 1
   105                              <1>        je %%skip
   106                              <1>        jmp %1
   107                              <1> %%skip:
   108                              <1> %endmacro
   109                              <1> 
   110                              <1> %macro jmpc 1
   111                              <1>        jnc %%skip
   112                              <1>        jmp %1
   113                              <1> %%skip:
   114                              <1> %endmacro
   115                              <1> 
   116                              <1> %macro jmpnc 1
   117                              <1>        jc %%skip
   118                              <1>        jmp %1
   119                              <1> %%skip:
   120                              <1> %endmacro
   121                              <1> 
   122                              <1> %macro jmpb 1
   123                              <1>        jnb %%skip
   124                              <1>        jmp %1
   125                              <1> %%skip:
   126                              <1> %endmacro
   127                              <1> 
   128                              <1> %macro jmpnb 1
   129                              <1>        jb %%skip
   130                              <1>        jmp %1
   131                              <1> %%skip:
   132                              <1> %endmacro
   133                              <1> 
   134                              <1> %endif
   135                              <1> 
   136                              <1> %endif
   137                                  %include "ui.h"
   138                              <1> ;
   139                              <1> ; ui.h
   140                              <1> ;
   141                              <1> ; header file for ui.asm
   142                              <1> ;
   143                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   144                              <1> ;
   145                              <1> 
   146                              <1> ; following flags is used in struc_window.flags
   147                              <1> 
   148                              <1> %define WINFLAG_OPEN		0x01  ; set this flag when open the window
   149                              <1> %define WINFLAG_MODAL		0x02  ; Modal window
   150                              <1> %define WINFLAG_FRAMED		0x04  ; the window has frame.
   151                              <1> %define WINFLAG_NO_FOCUS	0x08  ; Cannot be focused.
   152                              <1> 
   153                              <1> %define MENUFLAG_SCROLLBAR	0x10  ; the menu has scroll bar
   154                              <1> %define MENUFLAG_SINK_WIDTH	0x20  ; reduce the width of menu area by two char
   155                              <1> %define MENUFLAG_SINK_UPPER	0x40  ; reduce the upper of menu area by one char
   156                              <1> %define MENUFLAG_SINK_BOTTOM	0x80  ; ..
   157                              <1> 
   158                              <1> %define WINFLAG_HI_RUNNING	0x01  ; unsed in hi-byte of struc_window.flags
   159                              <1> 
   160                              <1> ; following flags is used in struc_action.flags
   161                              <1> 
   162                              <1> %define ACTFLAG_CLOSE_WIN	0x01  ; close the window after doing the action
   163                              <1> %define ACTFLAG_REDRAW_BODY	0x02  ; redraw window body after doing it
   164                              <1> %define ACTFLAG_REDRAW_WIN	0x04  ; redraw entire window after doing it
   165                              <1> %define ACTFLAG_REDRAW_SCR	0x08  ; redraw entire screen after doint it
   166                              <1> 
   167                              <1> %define ACTFLAG_CHK_RECNUM	0x10  ; check good record number before do it
   168                              <1> %define ACTFLAG_AUTH_ROOT	0x20  ; confirm root password before do it
   169                              <1> %define ACTFLAG_AUTH_RECORD	0x40  ; confirm record password before do it
   170                              <1> %define ACTFLAG_AUTH_SECURITY	0x80  ; confirm password according to security
   171                              <1>                                       ; level
   172                              <1> %define ACTFLAG_AUTHS		0xF0
   173                              <1> 
   174                              <1> %define SIZE_OF_STRUC_WINDOW		struc_window.end_of_struc
   175                              <1> %define SIZE_OF_STRUC_MENU_BOX		struc_menu_box.end_of_struc
   176                              <1> %define SIZE_OF_STRUC_ACTION		struc_action.end_of_struc
   177                              <1> %define SIZE_OF_STRUC_MESSAGE_BOX	struc_message_box.end_of_struc
   178                              <1> %define SIZE_OF_STRUC_INPUT_BOX		struc_input_box.end_of_struc
   179                              <1> 
   180                              <1> struc struc_window
   181 00000000 <res 00000002>      <1> 	.flags			resw 1	; flags
   182 00000002 <res 00000002>      <1> 	.title			resw 1	; 2nd level pointer to window title
   183 00000004 <res 00000002>      <1> 	.win_attr		resw 1  ; window attribute, 
   184                              <1> 					; high = title, low = frame
   185 00000006 <res 00000002>      <1> 	.win_pos		resw 1	; window position, 
   186                              <1> 					; high = row, low = col
   187 00000008 <res 00000002>      <1> 	.win_size		resw 1	; window size,
   188                              <1> 					; high = height, low = width
   189 0000000A <res 00000002>      <1> 	.parent_win		resw 1	; pointer to parent window
   190 0000000C <res 00000002>      <1> 	.next_win		resw 1  ; pointer to next window
   191 0000000E <res 00000002>      <1> 	.previous_win		resw 1  ; pointer to previous window
   192                              <1> 
   193 00000010 <res 00000002>      <1> 	.act_num		resw 1  ; number of actions
   194 00000012 <res 00000002>      <1> 	.act_table		resw 1	; pointer to action table
   195                              <1> 
   196 00000014 <res 00000002>      <1> 	.default_event_handle	resw 1	; default key event handle
   197 00000016 <res 00000002>      <1> 	.event_handle		resw 1	; key event handle
   198 00000018 <res 00000002>      <1> 	.draw_body_proc		resw 1	; draw window body proc
   199                              <1> 	.end_of_struc
   200                              <1> endstruc
   201                              <1> 
   202                              <1> struc struc_action
   203 00000000 <res 00000001>      <1> 	.flags			resb 1	; flags
   204 00000001 <res 00000002>      <1> 	.keycode		resw 1	; keycode
   205 00000003 <res 00000002>      <1> 	.func			resw 1	; function entry
   206                              <1> 	.end_of_struc
   207                              <1> endstruc
   208                              <1> 
   209                              <1> 
   210                              <1> ; For menubox, the actions of menu items are stored in struc_window.act_table.
   211                              <1> ; First items_num actions in act_table are menu items'. Other actions are 
   212                              <1> ; hotkeys.
   213                              <1> 
   214                              <1> struc struc_menu_box
   215                              <1> ; first part is a struc_window data
   216 00000000 <res 0000001A>      <1> 	.window			resb SIZE_OF_STRUC_WINDOW
   217                              <1> 
   218                              <1> ; data member of menu box
   219 0000001A <res 00000002>      <1> 	.menu_header		resw 1	; 2nd level pointer to menu header string
   220 0000001C <res 00000001>      <1> 	.menu_header_attr	resb 1	; attribute of menu header (if have)
   221 0000001D <res 00000002>      <1> 	.menu_norm_attr		resw 1	; attribute of normal menu item, 
   222                              <1> 					; high = hotkey attr, low =normal attr
   223 0000001F <res 00000002>      <1> 	.menu_focus_attr	resw 1	; attribute of focused menu item
   224 00000021 <res 00000002>      <1> 	.menu_area_pos		resw 1	; position of menu area
   225 00000023 <res 00000002>      <1> 	.menu_area_size		resw 1	; size of menu area
   226 00000025 <res 00000001>      <1> 	.scrollbar_attr		resb 1	; attribute of scrollbar
   227                              <1> 
   228 00000026 <res 00000001>      <1> 	.items_num		resb 1	; number of menu items
   229 00000027 <res 00000001>      <1> 	.focus_item		resb 1	; focused item
   230 00000028 <res 00000001>      <1> 	.first_visible_item	resb 1	; first visible item
   231                              <1> 
   232 00000029 <res 00000002>      <1> 	.item_str_proc		resw 1	; proc of get a item's string
   233                              <1> 					; input cx = index, si -> menu
   234                              <1> 					; output si -> string
   235                              <1> 	.end_of_struc
   236                              <1> endstruc
   237                              <1> 
   238                              <1> struc struc_message_box
   239 00000000 <res 0000001A>      <1> 	.window			resb SIZE_OF_STRUC_WINDOW
   240 0000001A <res 00000002>      <1> 	.message		resw 1  ; pointer to the message
   241 0000001C <res 00000002>      <1> 	.message_attr		resw 1  ; attribute of the message
   242 0000001E <res 00000002>      <1> 	.pressed_key		resw 1  ; the key which user pressed
   243                              <1> 	.end_of_struc
   244                              <1> endstruc
   245                              <1> 
   246                              <1> struc struc_input_box
   247 00000000 <res 0000001A>      <1> 	.window			resb SIZE_OF_STRUC_WINDOW
   248 0000001A <res 00000002>      <1> 	.message		resw 1  ; pointer to the message
   249 0000001C <res 00000002>      <1> 	.message_attr		resw 1  ; attribute of the message
   250 0000001E <res 00000001>      <1> 	.input_attr		resb 1  ; attribute of input area
   251 0000001F <res 00000001>      <1> 	.input_type		resb 1	; input type, 0=normal, 1=passwd
   252 00000020 <res 00000002>      <1> 	.input_buf		resw 1	; pointer to input buffer
   253 00000022 <res 00000001>      <1> 	.input_buf_len		resb 1	; length of input buffer
   254 00000023 <res 00000001>      <1> 	.input_area_len		resb 1	; length of input area
   255 00000024 <res 00000002>      <1> 	.input_area_pos		resw 1	; position of input area (in window)
   256 00000026 <res 00000001>      <1> 	.input_startp		resb 1	; the first visible char in input buf
   257 00000027 <res 00000001>      <1> 	.input_curp		resb 1	; cursor position
   258 00000028 <res 00000001>      <1> 	.return_val		resb 1	; return val, 0 = success, 1 = cancel
   259                              <1> 	.end_of_struc
   260                              <1> endstruc
   261                              <1> 
   262                              <1> ; vi:nowrap
   263                                  %include "hd_io.h"
   264                              <1> ; hd_io.h
   265                              <1> ;
   266                              <1> ; header file for hd_io.asm
   267                              <1> ;
   268                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   269                              <1> ;
   270                              <1> 
   271                              <1> 
   272                              <1> %define DRVFLAG_DRIVEOK    0x0001       ;
   273                              <1> %define DRVFLAG_CHSVALID   0x0002       ; used in driveinfo structure
   274                              <1> %define DRVFLAG_REMOVABLE  0x0004       ; and bootrecord structure 
   275                              <1> %define DRVFLAG_EXTOK      0x0008       ;
   276                              <1> %define DRVFLAG_ISCDROM    0x0010       ; 0000,0000,0001,0000B
   277                              <1> 
   278                              <1> %define DRVFLAG_MASK       0x0015       ; 0000,0000,0001,0101B
   279                              <1> 
   280                              <1> %define INT13H_EXT_INSTCHECK 0x41
   281                              <1> %define INT13H_EXT_READ      0x42
   282                              <1> %define INT13H_EXT_WRITE     0x43
   283                              <1> %define INT13H_EXT_GETINFO   0x48
   284                              <1> %define INT13H_EXT_LOCK      0x45
   285                              <1> %define INT13H_RESET         0X00
   286                              <1> %define INT13H_READ          0X02
   287                              <1> %define INT13H_WRITE         0X03
   288                              <1> %define INT13H_GETINFO       0X08
   289                              <1> %define INT13H_GETTYPE       0x15
   290                              <1> 
   291                              <1> %define EXT_SUBSET_FIXED     0x01
   292                              <1> %define EXT_SUBSET_REMOVABLE 0x02
   293                              <1> %define EXT_SUBSET_EDD       0x04
   294                              <1> 
   295                              <1> %define DRV_TYPE_FIXED       0x03
   296                              <1> 
   297                              <1> %define MIN_HD_ID            0X80
   298                              <1> %define EXTPARAM_SIZE        0x42
   299                              <1> 
   300                              <1> %define MAX_CYLS             1023
   301                              <1> 
   302                              <1> ; Structure for calling int 13h ext Read / Write functions
   303                              <1> struc struc_int13ext
   304 00000000 <res 00000001>      <1>       .pack_size    : resb  1      ; ==16 size of struct Int13ExtData
   305 00000001 <res 00000001>      <1>       .reserved     : resb  1      ; ==0
   306 00000002 <res 00000001>      <1>       .blk_count    : resb  1      ; number of blocks to transfer <= 127
   307 00000003 <res 00000001>      <1>       .reserved1    : resb  1      ; ==0
   308 00000004 <res 00000002>      <1>       .buf_addr_off : resw  1      ; address of transfer buffer(segment:offset)
   309 00000006 <res 00000002>      <1>       .buf_addr_seg : resw  1
   310 00000008 <res 00000002>      <1>       .blk_num_low1 : resw  1      ; starting absolute block number
   311 0000000A <res 00000002>      <1>       .blk_num_low2 : resw  1
   312 0000000C <res 00000002>      <1>       .blk_num_high1: resw  1
   313 0000000E <res 00000002>      <1>       .blk_num_high2: resw  1
   314                              <1>       .end_of_struc
   315                              <1> endstruc
   316                              <1> 
   317                              <1> ; structure for calling int 13h ext get drive parameters functions (0x48)
   318                              <1> struc struc_extparam
   319 00000000 <res 00000002>      <1>       .pack_size         : resw  1
   320 00000002 <res 00000002>      <1>       .flags             : resw  1
   321 00000004 <res 00000004>      <1>       .cylinders         : resd  1
   322 00000008 <res 00000004>      <1>       .heads             : resd  1      ; <= 255
   323 0000000C <res 00000004>      <1>       .sectors           : resd  1      ; <= 63
   324 00000010 <res 00000008>      <1>       .total_sectors     : resd  2
   325 00000018 <res 00000002>      <1>       .bytes_per_sect    : resw  1
   326 0000001A <res 00000004>      <1>       .dpte_addr         : resd  1      ; device parameter table extension
   327 0000001E <res 00000002>      <1>       .dpi_key           : resw  1      ; 0xBEDD - Key, indicates presence
   328                              <1>                                         ; of Device Path Information
   329 00000020 <res 00000001>      <1>       .dpi_length        : resb  1      ; Length of Device Path Information 
   330                              <1>                                         ; including the key. = 36
   331 00000021 <res 00000001>      <1>       .reserved1         : resb  1
   332 00000022 <res 00000002>      <1>       .reserved2         : resw  1
   333 00000024 <res 00000004>      <1>       .host_bus_type     : resb  4      ; Host bus type, 4 bytes
   334                              <1>                                         ; PCI    PCI Local Bus
   335                              <1>                                         ; ISA    Legacy 16 bit fixed bus
   336 00000028 <res 00000008>      <1>       .interface_type    : resb  8      ; Interface type, 8 bytes
   337                              <1>                                         ; ATA   ATA/ATAPI-4 compliant device using ATA commands
   338                              <1>                                         ; ATAPI ATA/ATAPI-4 compliant device using ATAPI commands
   339                              <1>                                         ; SCSI  SCSI compliant device
   340                              <1>                                         ; USB   USB Mass Storage compliant device
   341                              <1>                                         ; 1394  1394 Mass Storage device
   342                              <1>                                         ; FIBRE Fibre Channel
   343 00000030 <res 00000008>      <1>       .interface_path    : resq  1
   344 00000038 <res 00000008>      <1>       .device_path       : resq  1
   345 00000040 <res 00000001>      <1>       .reserved3         : resb  1
   346 00000041 <res 00000001>      <1>       .checksum          : resb  1
   347                              <1>       .end_of_struc
   348                              <1> endstruc
   349                              <1> 
   350                              <1> ; Device parameter table extension
   351                              <1> %define SIZE_OF_DPTE struc_dpte.end_of_struc
   352                              <1> struc struc_dpte
   353 00000000 <res 00000002>      <1> 	.base_io	: resw 1
   354 00000002 <res 00000002>      <1> 	.ctrl_io	: resw 1
   355 00000004 <res 00000001>      <1> 	.flags		: resb 1
   356 00000005 <res 00000001>      <1> 	.vender_spec	: resb 1
   357 00000006 <res 00000001>      <1> 	.irq		: resb 1
   358 00000007 <res 00000001>      <1> 	.blk_count	: resb 1
   359 00000008 <res 00000001>      <1> 	.dma		: resb 1
   360 00000009 <res 00000001>      <1> 	.pio		: resb 1
   361 0000000A <res 00000002>      <1> 	.bios_spec	: resw 1
   362 0000000C <res 00000002>      <1> 	.reserved	: resw 1
   363 0000000E <res 00000001>      <1> 	.revision	: resb 1
   364 0000000F <res 00000001>      <1> 	.checksum	: resb 1
   365                              <1> 	.end_of_struc
   366                              <1> endstruc
   367                              <1> 
   368                              <1> ;Return cdrom boot catalog command packet
   369                              <1> %define SIZE_OF_CDBC_CMD struc_cdbc_cmd.end_of_struc
   370                              <1> struc struc_cdbc_cmd
   371 00000000 <res 00000001>      <1> 	.pack_size	: resb 1
   372 00000001 <res 00000001>      <1> 	.sector_count	: resb 1
   373 00000002 <res 00000002>      <1> 	.buf_addr_off	: resw 1
   374 00000004 <res 00000002>      <1> 	.buf_addr_seg	: resw 1
   375 00000006 <res 00000002>      <1> 	.begnning_sect	: resw 1
   376                              <1> 	.end_of_struc
   377                              <1> endstruc
   378                              <1> 
   379                              <1> ;CD Emulation Specification Packet
   380                              <1> %define SIZE_OF_CDEMU_SPEC struc_cdemu_spec.end_of_struc
   381                              <1> struc struc_cdemu_spec
   382 00000000 <res 00000001>      <1> 	.pack_size	: resb 1
   383 00000001 <res 00000001>      <1> 	.media_type	: resb 1
   384 00000002 <res 00000001>      <1> 	.emu_drvid	: resb 1
   385 00000003 <res 00000001>      <1> 	.controller_id	: resb 1
   386 00000004 <res 00000004>      <1> 	.image_lba	: resd 1
   387 00000008 <res 00000002>      <1> 	.device_spec	: resw 1
   388 0000000A <res 00000002>      <1> 	.user_bufseg	: resw 1
   389 0000000C <res 00000002>      <1> 	.load_seg	: resw 1
   390 0000000E <res 00000002>      <1> 	.sect_count	: resw 1
   391 00000010 <res 00000001>      <1> 	.cylinders	: resb 1
   392 00000011 <res 00000001>      <1> 	.sectors	: resb 1
   393 00000012 <res 00000001>      <1> 	.heads		: resb 1
   394                              <1> 	.end_of_struc
   395                              <1> endstruc
   396                              <1> 
   397                              <1> 
   398                              <1> ;Structure of boot catalog entry
   399                              <1> %define SIZE_OF_BOOT_CATALOG struc_boot_catalog.end_of_struc
   400                              <1> struc struc_boot_catalog
   401 00000000 <res 00000001>      <1> 	.indicator	: resb 1
   402 00000001 <res 00000001>      <1> 	.media_type	: resb 1
   403 00000002 <res 00000002>      <1> 	.load_seg	: resw 1
   404 00000004 <res 00000001>      <1> 	.sys_type	: resb 1
   405 00000005 <res 00000001>      <1> 	.reserved	: resb 1
   406 00000006 <res 00000002>      <1> 	.sect_count	: resw 1
   407 00000008 <res 00000004>      <1> 	.load_rba	: resd 1
   408 0000000C <res 00000014>      <1> 	.reserved1	: resb 20
   409                              <1> 	.end_of_struc
   410                              <1> endstruc
   411                              <1> 
   412                              <1> 
   413                              <1> ; structure for record drive informations
   414                              <1> struc struc_driveinfo
   415 00000000 <res 00000001>      <1>       .id                : resb  1
   416 00000001 <res 00000001>      <1>       .flags             : resb  1
   417 00000002 <res 00000002>      <1>       .cylinders         : resw  1
   418 00000004 <res 00000002>      <1>       .heads             : resw  1
   419 00000006 <res 00000002>      <1>       .sectors           : resw  1
   420 00000008 <res 00000002>      <1>       .sector_size       : resw  1
   421                              <1>       .end_of_struc
   422                              <1> endstruc
   423                              <1> 
   424                              <1> 
   425                              <1> 
   426                              <1> %define SIZE_OF_DRIVEINFO (struc_driveinfo.end_of_struc)
   427                              <1> %define SIZE_OF_EXTPARAM (struc_extparam.end_of_struc)
   428                              <1> %define SIZE_OF_INT13EXT (struc_int13ext.end_of_struc)
   429                              <1> 
   430                                  %include "knl.h"
   431                              <1> ; knl.h
   432                              <1> ;
   433                              <1> ; header file for knl.asm
   434                              <1> ;
   435                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   436                              <1> ;
   437                              <1> 
   438                              <1> %define MAX_NAME_LENGTH   15
   439                              <1> %define MAX_KEYSTROKES    13
   440                              <1> 
   441                              <1> %define FAT16_DRVID_OFF   0x24               ; drive id offset in fat16
   442                              <1> %define FAT16_HIDSEC_OFF  0x1C               ; hidden sector offset in fat16
   443                              <1> %define FAT16_EXTBRID_OFF 0x26               ; EXBRID offset in fat16
   444                              <1> 
   445                              <1> %define FAT32_DRVID_OFF   0x40
   446                              <1> %define FAT32_HIDSEC_OFF  0x1C
   447                              <1> %define FAT32_EXTBRID_OFF 0x42
   448                              <1> 
   449                              <1> %define EXTBRID           0x29               ; ext boot record id for fat
   450                              <1> 
   451                              <1> %define INFOFLAG_SCHEDULED  0x8000       ; 1000,0000,0000,0000B
   452                              <1> %define INFOFLAG_HAVEKEYS   0x4000       ; 0100,0000,0000,0000B
   453                              <1> %define INFOFLAG_SWAPDRVID  0x2000       ; 0010,0000,0000,0000B
   454                              <1> %define INFOFLAG_AUTOACTIVE 0x1000       ; 0001,0000,0000,0000B
   455                              <1> %define INFOFLAG_ACTIVE     0x0800       ; 0000,1000,0000,0000B
   456                              <1> %define INFOFLAG_AUTOHIDE   0x0400       ; 0000,0100,0000,0000B
   457                              <1> %define INFOFLAG_HIDDEN     0x0200       ; 0000,0010,0000,0000B
   458                              <1> %define INFOFLAG_LOGICAL    0x0100       ; 0000,0001,0000,0000B
   459                              <1> 
   460                              <1> %define INFOFLAG_ISDRIVER   0x0080       ; 0000,0000,1000,0000B
   461                              <1> %define INFOFLAG_ISSPECIAL  0X0008       ; 0000,0000,0000,1000B
   462                              <1> 
   463                              <1> %define SPREC_BOOTPREV      0
   464                              <1> %define SPREC_QUIT          1
   465                              <1> %define SPREC_POWEROFF      2
   466                              <1> %define SPREC_RESTART       3
   467                              <1> 
   468                              <1> %define NUM_OF_SPREC        4
   469                              <1> 
   470                              <1> %define NUM_OF_INFOFLAGS    9
   471                              <1> 
   472                              <1> ; structure for boot record, including removable drives and partitions
   473                              <1> struc struc_bootrecord
   474 00000000 <res 00000002>      <1>       .flags           : resw 1  ; type flags of this record, see INFOFLAG_x
   475 00000002 <res 00000001>      <1>       .drive_id        : resb 1  ; drive id = 0 to 255
   476                              <1>                                  ; partition id used in linux,
   477 00000003 <res 00000001>      <1>       .part_id         : resb 1  ; 1-4 for primary partitions,
   478                              <1>                                  ; > 5 for logical partitions,
   479                              <1>                                  ; 0 for driver or special bootrecord.
   480 00000004 <res 00000001>      <1>       .type            : resb 1  ; partition type, = 0 : not a partition
   481 00000005 <res 00000001>      <1>       .reserved        : resb 1  ;
   482 00000006 <res 00000004>      <1>       .father_abs_addr : resd 1  ; father's LBA address
   483 0000000A <res 00000004>      <1>       .abs_addr        : resd 1  ; partition's abs LBA address
   484 0000000E <res 00000004>      <1>       .password        : resd 1  ; password of this record
   485 00000012 <res 00000004>      <1>       .schedule_time   : resd 1  ; schedule time
   486 00000016 <res 00000010>      <1>       .name            : resb 16 ; name of this record, zero ending.
   487 00000026 <res 0000001A>      <1>       .keystrokes      : resw 13 ; keystrokes to be preloaded.
   488                              <1>       .end_of_struc
   489                              <1> endstruc
   490                              <1> 
   491                              <1> ; structure for partition record
   492                              <1> struc struc_partition
   493 00000000 <res 00000001>      <1>       .state           : resb 1  ; = 0 : inactive; = drive id : active
   494 00000001 <res 00000001>      <1>       .start_head      : resb 1  ; start chs address of the partition
   495 00000002 <res 00000002>      <1>       .start_cs        : resw 1  ;
   496 00000004 <res 00000001>      <1>       .type            : resb 1  ; equal to the same item in struc_bootrecord
   497 00000005 <res 00000001>      <1>       .end_head        : resb 1  ; end chs address of the partition
   498 00000006 <res 00000002>      <1>       .end_cs          : resw 1  ;
   499 00000008 <res 00000004>      <1>       .relative_addr   : resd 1  ; the relative address of this partition
   500 0000000C <res 00000004>      <1>       .sectors         : resd 1  ; the number of sectors of the partition
   501                              <1>       .end_of_struc
   502                              <1> endstruc
   503                              <1> 
   504                              <1> %define SIZE_OF_BOOTRECORD (struc_bootrecord.end_of_struc)
   505                              <1> %define SIZE_OF_PARTITION  (struc_partition.end_of_struc)
   506                              <1> 
   507                                  %include "sbm.h"
   508                              <1> ; sbm.h
   509                              <1> ;
   510                              <1> ; header file for main.asm and loader.asm
   511                              <1> ;
   512                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   513                              <1> ;
   514                              <1> 
   515                              <1> %define BR_GOOD_FLAG    0XAA55
   516                              <1> %define BR_FLAG_OFF     0x01FE
   517                              <1> %define PART_TBL_OFF    0x01BE
   518                              <1> 
   519                              <1> %define SECTOR_SIZE     0x200              ; size of a sector
   520                              <1> %define CDSECTOR_SIZE   0x800              ; size of a CD-ROM sector
   521                              <1> 
   522                              <1> %define MAX_SBM_SIZE    30000              ; the max size of Smart Boot Manager
   523                              <1> 
   524                              <1> %define SIZE_OF_MBR     446                ; the size of master boot record
   525                              <1> 
   526                              <1> %define MAX_RECORD_NUM      32
   527                              <1> %define MAX_FLOPPY_NUM      2
   528                              <1> %define MAX_PASSWORD_LENGTH 16
   529                              <1> 
   530                              <1> %define PART_OFF        0x0600             ; partition table offset
   531                              <1>                                            ; Smart Boot Manager kernel startup
   532                              <1> %define SBM_SAVE_NBLKS  5
   533                              <1> 
   534                              <1> %ifndef STRUC_SBMK_HEADER
   535                              <1> %define STRUC_SBMK_HEADER
   536                              <1> 
   537                              <1> struc struc_block_map
   538 00000000 <res 00000001>      <1>       .n_sects         resb 1
   539 00000001 <res 00000004>      <1>       .lba_addr        resd 1
   540                              <1>       .end_of_struc
   541                              <1> endstruc
   542                              <1> 
   543                              <1> %define SIZE_OF_STRUC_BLOCK_MAP struc_block_map.end_of_struc
   544                              <1> 
   545                              <1> struc struc_sbml_header
   546 00000000 <res 00000003>      <1>       .jmp_cmd     resb 3               ; cli and jmp command.
   547                              <1> 
   548                              <1> ;=================== For floppy FAT12 filesystem ======================
   549 00000003 <res 00000008>      <1>       .bsOEM       resb 8               ; OEM String
   550 0000000B <res 00000002>      <1>       .bsSectSize  resw 1               ; Bytes per sector
   551 0000000D <res 00000001>      <1>       .bsClustSize resb 1               ; Sectors per cluster
   552 0000000E <res 00000002>      <1>       .bsRessect   resw 1               ; # of reserved sectors
   553 00000010 <res 00000001>      <1>       .bsFatCnt    resb 1               ; # of fat copies
   554 00000011 <res 00000002>      <1>       .bsRootSize  resw 1               ; size of root directory
   555 00000013 <res 00000002>      <1>       .bsTotalSect resw 1               ; total # of sectors if < 32 meg
   556 00000015 <res 00000001>      <1>       .bsMedia     resb 1               ; Media Descriptor
   557 00000016 <res 00000002>      <1>       .bsFatSize   resw 1               ; Size of each FAT
   558 00000018 <res 00000002>      <1>       .bsTrackSect resw 1               ; Sectors per track
   559 0000001A <res 00000002>      <1>       .bsHeadCnt   resw 1               ; number of read-write heads
   560 0000001C <res 00000004>      <1>       .bsHidenSect resd 1               ; number of hidden sectors
   561 00000020 <res 00000004>      <1>       .bsHugeSect  resd 1               ; if bsTotalSect is 0 this value is
   562                              <1>                                         ; the number of sectors
   563 00000024 <res 00000001>      <1>       .bsBootDrv   resb 1               ; holds drive that the bs came from
   564 00000025 <res 00000001>      <1>       .bsReserv    resb 1               ; not used for anything
   565 00000026 <res 00000001>      <1>       .bsBootSign  resb 1               ; boot signature 29h
   566 00000027 <res 00000004>      <1>       .bsVolID     resd 1               ; Disk volume ID also used for temp
   567                              <1>                                         ; sector # / # sectors to load
   568 0000002B <res 0000000B>      <1>       .bsVoLabel   resb 11              ; Volume Label
   569 00000036 <res 00000008>      <1>       .bsFSType    resb 8               ; File System type
   570                              <1> 
   571 0000003E <res 00000002>      <1>       .reserved    resb 2
   572                              <1> ;====================================================================
   573                              <1> 
   574 00000040 <res 00000004>      <1>       .magic           resd 1           ; magic number.
   575 00000044 <res 00000002>      <1>       .version         resw 1           ; version.
   576                              <1> 
   577 00000046 <res 00000019>      <1>       .block_map       resb SIZE_OF_STRUC_BLOCK_MAP * 5
   578                              <1>                                         ; block map for SBMK, 5 blocks allowed
   579                              <1> endstruc
   580                              <1> 
   581                              <1> struc struc_sbmk_header
   582 00000000 <res 00000004>      <1>       .jmp_cmd         resd 1           ; jmp and nop command.
   583 00000004 <res 00000004>      <1>       .magic           resd 1           ; magic number.
   584 00000008 <res 00000002>      <1>       .version         resw 1           ; version.
   585 0000000A <res 00000002>      <1>       .total_size      resw 1           ; the size of kernel code.
   586 0000000C <res 00000002>      <1>       .compressed_addr resw 1           ; the address of compressed part
   587 0000000E <res 00000001>      <1>       .checksum        resb 1           ; checksum value.
   588 0000000F <res 00000001>      <1>       .sectors         resb 1           ;
   589 00000010 <res 00000001>      <1>       .drvid           resb 1           ;
   590 00000011 <res 00000019>      <1>       .block_map       resb SIZE_OF_STRUC_BLOCK_MAP * 5
   591                              <1>                                         ; block map for SBMK, 5 blocks allowed
   592 0000002A <res 00000002>      <1>       .reserved1       resw 1           ;
   593                              <1> 
   594 0000002C <res 00000001>      <1>       .flags           resb 1           ; kernel flags. 
   595 0000002D <res 00000001>      <1>       .delay_time      resb 1           ; delay time ( seconds )
   596 0000002E <res 00000001>      <1>       .direct_boot     resb 1           ; >= MAX_RECORD_NUM means no
   597                              <1>                                         ; direct boot.
   598 0000002F <res 00000001>      <1>       .default_boot    resb 1           ; the record number will
   599                              <1>                                         ; be booted after the
   600                              <1>                                         ; delay time is up or ESC
   601                              <1>                                         ; key is pressed.
   602 00000030 <res 00000004>      <1>       .root_password   resd 1           ; root password.
   603                              <1> 
   604 00000034 <res 00000002>      <1>       .bootmenu_style  resb 2
   605 00000036 <res 00000004>      <1>       .cdrom_ioports   resw 2
   606 0000003A <res 00000002>      <1>       .y2k_last_year   resw 1
   607 0000003C <res 00000001>      <1>       .y2k_last_month  resb 1
   608 0000003D <res 00000003>      <1>       .reserved2       resb 3
   609                              <1> endstruc
   610                              <1> 
   611                              <1> struc struc_sbmk_data
   612 00000000 <res 00000800>      <1>       .boot_records    resb MAX_RECORD_NUM * SIZE_OF_BOOTRECORD
   613 00000800 <res 000001BE>      <1>       .sbml_codes      resb SIZE_OF_MBR
   614 000009BE <res 00000200>      <1>       .previous_mbr    resb SECTOR_SIZE
   615                              <1> 
   616 00000BBE <res 00000002>      <1>       .boot_menu_pos   resw 1
   617 00000BC0 <res 00000002>      <1>       .main_menu_pos   resw 1
   618 00000BC2 <res 00000002>      <1>       .record_menu_pos resw 1
   619 00000BC4 <res 00000002>      <1>       .sys_menu_pos    resw 1
   620                              <1> endstruc
   621                              <1> 
   622                              <1> struc struc_sbmt_header
   623 00000000 <res 00000004>      <1>       .magic           resd 1           ; magic number.
   624 00000004 <res 00000002>      <1>       .reserved        resw 1           ;
   625 00000006 <res 00000006>      <1>       .lang            resb 6           ; language info.
   626 0000000C <res 00000002>      <1>       .version         resw 1           ; theme version.
   627 0000000E <res 00000002>      <1>       .size            resw 1           ; theme size.
   628                              <1> endstruc
   629                              <1> 
   630                              <1> 
   631                              <1> %endif
   632                              <1> 
   633                                  %include "main.h"
   634                              <1> ; main.h
   635                              <1> ;
   636                              <1> ; header file for main.asm main-cmds.asm main-utils.asm
   637                              <1> ;
   638                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   639                              <1> ;
   640                              <1> 
   641                              <1> ; some flags
   642                              <1> 
   643                              <1> %define KNLFLAG_FIRSTSCAN   0x01
   644                              <1> %define KNLFLAG_SECURITY    0x02
   645                              <1> %define KNLFLAG_NOINT13EXT  0x04
   646                              <1> %define KNLFLAG_NOCDROM     0x08
   647                              <1> 
   648                              <1> %define KNLFLAG_REMLAST     0x10
   649                              <1> %define KNLFLAG_ONLYPARTS   0X20
   650                              <1> %define KNLFLAG_COMPRESSED  0x80
   651                              <1> 
   652                              <1> %define BMSTYLE_FULL        0
   653                              <1> %define BMSTYLE_NOFLAGS     1
   654                              <1> %define BMSTYLE_NONUMBER    2
   655                              <1> %define BMSTYLE_NOTYPE      3
   656                              <1> 
   657                                  %include "evtcode.h"
   658                              <1> ;
   659                              <1> ; evtcode.h
   660                              <1> ;
   661                              <1> ; definiation of event codes
   662                              <1> ;
   663                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   664                              <1> ;
   665                              <1> 
   666                              <1> %define kbEsc                0x011B
   667                              <1> %define kbAltEsc             0x0100
   668                              <1> 
   669                              <1> %define kbF1                 0x3B00
   670                              <1> %define kbAltF1              0x6800
   671                              <1> %define kbCtrlF1             0x5E00
   672                              <1> %define kbShiftF1            0x5400
   673                              <1> 
   674                              <1> %define kbF2                 0x3C00
   675                              <1> %define kbAltF2              0x6900
   676                              <1> %define kbCtrlF2             0x5F00
   677                              <1> %define kbShiftF2            0x5500
   678                              <1> 
   679                              <1> %define kbF3                 0x3D00
   680                              <1> %define kbAltF3              0x6A00
   681                              <1> %define kbCtrlF3             0x6000
   682                              <1> %define kbShiftF3            0x5600
   683                              <1> 
   684                              <1> %define kbF4                 0x3E00
   685                              <1> %define kbAltF4              0x6B00
   686                              <1> %define kbCtrlF4             0x6100
   687                              <1> %define kbShiftF4            0x5700
   688                              <1> 
   689                              <1> %define kbF5                 0x3F00
   690                              <1> %define kbAltF5              0x6C00
   691                              <1> %define kbCtrlF5             0x6200
   692                              <1> %define kbShiftF5            0x5800
   693                              <1> 
   694                              <1> %define kbF6                 0x4000
   695                              <1> %define kbAltF6              0x6D00
   696                              <1> %define kbCtrlF6             0x6300
   697                              <1> %define kbShiftF6            0x5900
   698                              <1> 
   699                              <1> %define kbF7                 0x4100
   700                              <1> %define kbAltF7              0x6E00
   701                              <1> %define kbCtrlF7             0x6400
   702                              <1> %define kbShiftF7            0x5A00
   703                              <1> 
   704                              <1> %define kbF8                 0x4200
   705                              <1> %define kbAltF8              0x6F00
   706                              <1> %define kbCtrlF8             0x6500
   707                              <1> %define kbShiftF8            0x5B00
   708                              <1> 
   709                              <1> %define kbF9                 0x4300
   710                              <1> %define kbAltF9              0x7000
   711                              <1> %define kbCtrlF9             0x6600
   712                              <1> %define kbShiftF9            0x5C00
   713                              <1> 
   714                              <1> %define kbF10                0x4400
   715                              <1> %define kbAltF10             0x7100
   716                              <1> %define kbCtrlF10            0x6700
   717                              <1> %define kbShiftF10           0x5D00
   718                              <1> 
   719                              <1> %define kbF11                0x8500
   720                              <1> %define kbAltF11             0x8B00
   721                              <1> %define kbCtrlF11            0x8900
   722                              <1> %define kbShiftF11           0x8700
   723                              <1> 
   724                              <1> %define kbF12                0x8600
   725                              <1> %define kbAltF12             0x8C00
   726                              <1> %define kbCtrlF12            0x8A00
   727                              <1> %define kbShiftF12           0x8800
   728                              <1> 
   729                              <1> %define kbTab                0x0F09
   730                              <1> %define kbAltTab             0xA500
   731                              <1> %define kbCtrlTab            0x9400
   732                              <1> %define kbShiftTab           0x0F00
   733                              <1> 
   734                              <1> %define kbBack               0x0E08
   735                              <1> %define kbAltBack            0x0E00
   736                              <1> %define kbCtrlBack           0x0E7F
   737                              <1> 
   738                              <1> %define kbEnter              0x1C0D
   739                              <1> %define kbAltEnter           0x1C00
   740                              <1> %define kbCtrlEnter          0x1C0A
   741                              <1> %define kbEnhEnter           0xE00D
   742                              <1> %define kbEnhAltEnter        0xA600
   743                              <1> %define kbEnhCtrlEnter       0xE00A
   744                              <1> 
   745                              <1> %define kbSpace              0x3920
   746                              <1> 
   747                              <1> %define kbIns                0x5200
   748                              <1> %define kbEnhIns             0x52E0
   749                              <1> %define kbCtrlIns            0x9200
   750                              <1> %define kbEnhCtrlIns         0x92E0
   751                              <1> %define kbEnhAltIns          0xA200
   752                              <1> 
   753                              <1> %define kbHome               0x4700
   754                              <1> %define kbEnhHome            0x47E0
   755                              <1> %define kbCtrlHome           0x7700
   756                              <1> %define kbEnhCtrlHome        0x77E0
   757                              <1> %define kbEnhAltHome         0x9700
   758                              <1> 
   759                              <1> %define kbPgUp               0x4900
   760                              <1> %define kbEnhPgUp            0x49E0
   761                              <1> %define kbCtrlPgUp           0x8400
   762                              <1> %define kbEnhCtrlPgUp        0x84E0
   763                              <1> %define kbEnhAltPgUp         0x9900
   764                              <1> 
   765                              <1> %define kbEnd                0x4F00
   766                              <1> %define kbEnhEnd             0x4FE0
   767                              <1> %define kbCtrlEnd            0x7500
   768                              <1> %define kbEnhCtrlEnd         0x75E0
   769                              <1> %define kbEnhAltEnd          0x9F00
   770                              <1> 
   771                              <1> %define kbDel                0x5300
   772                              <1> %define kbEnhDel             0x53E0
   773                              <1> %define kbCtrlDel            0x9300
   774                              <1> %define kbEnhCtrlDel         0x93E0
   775                              <1> %define kbEnhAltDel          0xA300
   776                              <1> 
   777                              <1> %define kbPgDn               0x5100
   778                              <1> %define kbEnhPgDn            0x51E0
   779                              <1> %define kbCtrlPgDn           0x7600
   780                              <1> %define kbEnhCtrlPgDn        0x76E0
   781                              <1> %define kbEnhAltPgDn         0xA100
   782                              <1> 
   783                              <1> %define kbUp                 0x4800
   784                              <1> %define kbCtrlUp             0x8D00
   785                              <1> %define kbEnhUp              0x48E0
   786                              <1> %define kbEnhAltUp           0x9800
   787                              <1> %define kbEnhCtrlUp          0x8DE0
   788                              <1> 
   789                              <1> %define kbDown               0x5000
   790                              <1> %define kbCtrlDown           0x9100
   791                              <1> %define kbEnhDown            0x50E0
   792                              <1> %define kbEnhAltDown         0xA000
   793                              <1> %define kbEnhCtrlDown        0x91E0
   794                              <1> 
   795                              <1> %define kbLeft               0x4b00
   796                              <1> %define kbCtrlLeft           0x7300
   797                              <1> %define kbEnhLeft            0x4BE0
   798                              <1> %define kbEnhAltLeft         0x9B00
   799                              <1> %define kbEnhCtrlLeft        0x73E0
   800                              <1> 
   801                              <1> %define kbRight              0x4d00
   802                              <1> %define kbCtrlRight          0x7400
   803                              <1> %define kbEnhRight           0x4DE0
   804                              <1> %define kbEnhAltRight        0x9D00
   805                              <1> %define kbEnhCtrlRight       0x74E0
   806                              <1> 
   807                              <1> %define kbGraySlash          0xE02F
   808                              <1> %define kbGrayStar           0x372A
   809                              <1> %define kbGrayMinus          0x4A2D
   810                              <1> %define kbGrayPlus           0x4E2B
   811                              <1> 
   812                              <1> %define kbCtrlQ              0x1011
   813                              <1> %define kbCtrlW              0x1117
   814                              <1> %define kbCtrlE              0x1205
   815                              <1> %define kbCtrlR              0x1312
   816                              <1> %define kbCtrlT              0x1414
   817                              <1> %define kbCtrlY              0x1519
   818                              <1> %define kbCtrlU              0x1615
   819                              <1> %define kbCtrlI              0x1709
   820                              <1> %define kbCtrlO              0x180F
   821                              <1> %define kbCtrlP              0x1910
   822                              <1> %define kbCtrlA              0x1E01
   823                              <1> %define kbCtrlS              0x1f13
   824                              <1> %define kbCtrlD              0x2004
   825                              <1> %define kbCtrlF              0x2106
   826                              <1> %define kbCtrlG              0x2207
   827                              <1> %define kbCtrlH              0x2308
   828                              <1> %define kbCtrlJ              0x240A
   829                              <1> %define kbCtrlK              0x250b
   830                              <1> %define kbCtrlL              0x260C
   831                              <1> %define kbCtrlZ              0x2C1A
   832                              <1> %define kbCtrlX              0x2D18
   833                              <1> %define kbCtrlC              0x2E03
   834                              <1> %define kbCtrlV              0x2F16
   835                              <1> %define kbCtrlB              0x3002
   836                              <1> %define kbCtrlN              0x310E
   837                              <1> %define kbCtrlM              0x320D
   838                              <1> 
   839                              <1> %define kbLowerY             0x1579
   840                              <1> %define kbUpperY             0x1559
   841                              <1> 
   842                              <1> %define kbSlash              0x352F
   843                              <1> %define kbQuestion           0x353F
   844                              <1> 
   845                              <1> %define kbAltS               0x1F00
   846                              <1> %define kbAltR               0x1300
   847                              <1> 
   848                              <1> %define kbOne                0x0231
   849                              <1> 
   850                              <1> %define kbRightShiftMask     0x01
   851                              <1> %define kbLeftShiftMask      0x02
   852                              <1> %define kbShiftMask          0x03
   853                              <1> %define kbCtrlMask           0x04
   854                              <1> %define kbAltMask            0x08
   855                              <1> %define kbScrollMask         0x10
   856                              <1> %define kbNumLockMask        0x20
   857                              <1> %define kbCapsLockMask       0x40
   858                              <1> %define kbInsertMask         0x80
   859                              <1> 
   860                              <1> %define kbStateKeysMask   (kbScrollMask | kbNumLockMask | kbCapsLockMask | kbInsertMask)
   861                              <1> 
   862                              <1> %define EVTCODE_COMMAND		0xF0
   863                              <1> %define EVTCODE_KEYPRESS        0x01
   864                              <1> %define EVTCODE_KEYRELEASE      0x02
   865                              <1> %define EVTCODE_BROADCAST	0x04
   866                              <1> 
   867                              <1> ; Broadcast events
   868                              <1> %define EVENT_REDRAW_ROOT  ((EVTCODE_COMMAND | EVTCODE_BROADCAST) << 8 | 0x0001)
   869                              <1> %define EVENT_BOOT_DEFAULT ((EVTCODE_COMMAND | EVTCODE_BROADCAST) << 8 | 0x0002)
   870                              <1> 
   871                              <1> ; Normal events
   872                              <1> %define EVENT_TOGGLE_MENU  ((EVTCODE_COMMAND ) << 8 | 0x0001)
   873                              <1> 
   874                              <1> ; Key press event
   875                              <1> %define EVENT_RIGHTSHIFT_PRESS    ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbRightShiftMask)
   876                              <1> %define EVENT_LEFTSHIFT_PRESS     ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbLeftShiftMask)
   877                              <1> %define EVENT_SHIFT_PRESS         ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbShiftMask)
   878                              <1> %define EVENT_CTRL_PRESS          ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbCtrlMask)
   879                              <1> %define EVENT_ALT_PRESS           ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbAltMask)
   880                              <1> %define EVENT_SCROLL_ON           ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbScrollMask)
   881                              <1> %define EVENT_NUMLOCK_ON          ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbNumLockMask)
   882                              <1> %define EVENT_CAPSLOCK_ON         ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbCapsLockMask)
   883                              <1> %define EVENT_INSERT_ON           ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbInsertMask)
   884                              <1> 
   885                              <1> %define EVENT_RIGHTSHIFT_RELEASE  ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbRightShiftMask)
   886                              <1> %define EVENT_LEFTSHIFT_RELEASE   ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbLeftShiftMask)
   887                              <1> %define EVENT_SHIFT_RELEASE       ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbShiftMask)
   888                              <1> %define EVENT_CTRL_RELEASE        ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbCtrlMask)
   889                              <1> %define EVENT_ALT_RELEASE         ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbAltMask)
   890                              <1> %define EVENT_SCROLL_OFF          ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbScrollMask)
   891                              <1> %define EVENT_NUMLOCK_OFF         ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbNumLockMask)
   892                              <1> %define EVENT_CAPSLOCK_OFF        ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbCapsLockMask)
   893                              <1> %define EVENT_INSERT_OFF          ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbInsertMask)
   894                              <1> 
   895                              <1> 
   896                                  
   897                                  %define GOOD_RECORD_NUMBER    (main_windows_data.boot_menu + struc_menu_box.items_num)
   898                                  %define FOCUS_RECORD          (main_windows_data.boot_menu + struc_menu_box.focus_item)
   899                                  %define FIRST_VISIBLE_RECORD  (main_windows_data.boot_menu + struc_menu_box.first_visible_item)
   900                                  %define BOOT_MENU_AREA_HEIGHT (main_windows_data.boot_menu + struc_menu_box.menu_area_size + 1) 
   901                                  
   902                                  
   903                                  %ifdef EMULATE_PROG
   904                                  	org 0x100
   905                                  %else
   906                                  	org 0
   907                                  %endif
   908                                  
   909                                  	section .text
   910                                  
   911                                  start_of_sbm:
   912                                  start_of_kernel:
   913                                  
   914                                  ;=============================================================================
   915                                  ;  data for the Smart Boot Manager
   916                                  ;=============================================================================
   917                                  sbmk_header     istruc  struc_sbmk_header
   918 00000000 E9FD09                  	        jmp sbm_start
   919 00000003 90                      	        nop
   920                                  
   921 00000004 <res 00000019>            ADDR_SBMK_BLOCK_MAP              resb      SIZE_OF_STRUC_BLOCK_MAP * 5
   922 0000001D 01                        ADDR_SBMK_FLAGS                  db        KNLFLAG_FIRSTSCAN
   923 0000001E 1E                        ADDR_SBMK_DELAY_TIME             db        30
   924 0000001F FF                        ADDR_SBMK_DIRECT_BOOT            db        0FFh
   925 00000020 FF                        ADDR_SBMK_DEFAULT_BOOT           db        0FFh
   926 00000021 80                        ADDR_SBMK_DRVID                  db        80h
   927 00000022 00000000                  ADDR_SBMK_ROOT_PASSWORD          dd        0
   928 00000026 0000                      ADDR_SBMK_BOOTMENU_STYLE         db        0, 0
   929 00000028 00000000                  ADDR_SBMK_CDROM_IOPORTS          dw        0, 0
   930 0000002C 0000                      ADDR_SBMK_Y2K_LAST_YEAR          dw        0
   931 0000002E 00                        ADDR_SBMK_Y2K_LAST_MONTH         db        0
   932 0000002F 0E06                      ADDR_SBMK_BOOT_MENU_POS          dw        0x060E
   933 00000031 0101                      ADDR_SBMK_MAIN_MENU_POS          dw        0x0101
   934 00000033 0202                      ADDR_SBMK_RECORD_MENU_POS        dw        0x0202
   935 00000035 0303                      ADDR_SBMK_SYS_MENU_POS           dw        0x0303
   936                                  
   937                                  
   938                                  
   939                                  ; Partition Table
   940                                  
   941 00000037 00<rept>                times 1BEh-($-$$) db 0
   942                                  
   943                                  
   944                                  Partition_1
   945 000001BE 80                          Partition_1_bootable	db	80h
   946 000001BF 000101                      Partition_1_Start_CHS	db	00h, 01h, 01h
   947 000001C2 04                          Partition_1_Type		db	04h
   948 000001C3 FFFEFF                      Partition_1_End_CHS		db	0FFh, 0FEh, 0FFh
   949 000001C6 3F000000                    Partition_1_Start_LBA	dd	63
   950 000001CA 814E0000                    Partition_1_Sectors		dd	20160-63
   951                                  Partition_2
   952 000001CE 00                          Partition_2_bootable	db	0
   953 000001CF 000000                      Partition_2_Start_CHS	db	0, 0, 0
   954 000001D2 07                          Partition_2_Type		db	7h
   955 000001D3 000000                      Partition_2_End_CHS		db	0, 0, 0
   956 000001D6 C04E0000                    Partition_2_Start_LBA	dd	20160
   957 000001DA 00A00000                    Partition_2_Sectors		dd	40960
   958                                  Partition_3
   959 000001DE 00                          Partition_3_bootable	db	0
   960 000001DF 000000                      Partition_3_Start_CHS	db	0, 0, 0
   961 000001E2 00                          Partition_3_Type		db	0
   962 000001E3 000000                      Partition_3_End_CHS		db	0, 0, 0
   963 000001E6 00000000                    Partition_3_Start_LBA	dd	0
   964 000001EA 00000000                    Partition_3_Sectors		dd	0
   965                                  Partition_4
   966 000001EE 00                          Partition_4_bootable	db	0
   967 000001EF 000000                      Partition_4_Start_CHS	db	0, 0, 0
   968 000001F2 00                          Partition_4_Type		db	0
   969 000001F3 000000                      Partition_4_End_CHS		db	0, 0, 0
   970 000001F6 00000000                    Partition_4_Start_LBA	dd	0
   971 000001FA 00000000                    Partition_4_Sectors		dd	0
   972                                      
   973                                  
   974                                  times 510-($-$$) db 0
   975                                  
   976 000001FE 55AA                    Boot_Signature	dw	0AA55h
   977                                  
   978                                  
   979                                  
   980                                  ; some huge data
   981                                  
   982 00000200 <res 00000800>            ADDR_SBMK_BOOT_RECORDS           resb      MAX_RECORD_NUM * SIZE_OF_BOOTRECORD
   983                                  
   984                                  
   985                                  
   986                                  
   987                                  ;=============================================================================
   988                                  ; Program entry
   989                                  ;=============================================================================
   990                                  
   991                                  sbm_start:
   992                                  
   993                                  %ifndef EMULATE_PROG
   994                                  
   995                                   ; low level Master Boot Record code starts here
   996                                  
   997                                    ; disable Interrupts and clear the direction flag
   998 00000A00 FA                      	cli
   999 00000A01 FC                      	cld
  1000                                  	
  1001                                  	; set stack to 0000h:7C00h
  1002 00000A02 31C0                    	xor ax,ax
  1003 00000A04 8ED0                    	mov ss,ax
  1004 00000A06 66BC007C0000            	mov esp,7C00h
  1005                                  	
  1006                                  	; set Data Segments to 0000h
  1007 00000A0C 8ED8                    	mov ds,ax
  1008 00000A0E 8EC0                    	mov es,ax
  1009 00000A10 8EE0                    	mov fs,ax
  1010 00000A12 8EE8                    	mov gs,ax
  1011 00000A14 FB                      	sti
  1012                                  
  1013                                  ;Save current driver id for future use.
  1014 00000A15 8816[2100]              	mov [ADDR_SBMK_DRVID], dl
  1015                                  
  1016                                  %else
  1017                                  
  1018                                   ; DOS execution source code starts here
  1019                                    
  1020                                  	; set Data Segments to CS / 0000h
  1021                                  	push cs
  1022                                  	pop ax
  1023                                  	mov ds,ax
  1024                                  	mov es,ax
  1025                                  	
  1026                                  	xor ax,ax
  1027                                  	mov fs,ax
  1028                                  	mov gs,ax
  1029                                  
  1030                                  %endif
  1031                                  
  1032                                  ;=============================================================================
  1033                                  ; Compressed area starts here.
  1034                                  ;=============================================================================
  1035                                  sbm_real_start:
  1036                                  
  1037                                    ; clear the temporary data area (overwrite it with zeros)
  1038 00000A19 6631C0                    xor eax,eax
  1039 00000A1C BF[A11F]                  mov di,Start_of_Temporary_Data_Area
  1040 00000A1F B91E1D                    mov cx,End_of_Temporary_Data_Area - Start_of_Temporary_Data_Area
  1041                                  
  1042 00000A22 F3AA                      rep stosb
  1043                                  
  1044                                  ; Install My Int 13H handle
  1045 00000A24 B301                    	mov bl, 1
  1046 00000A26 E88A2D                  	call install_myint13h
  1047                                  
  1048                                  ;Initializing the CD-ROMs..
  1049                                  %ifndef DISABLE_CDBOOT
  1050 00000A29 F606[1D00]08            	test byte [ADDR_SBMK_FLAGS], KNLFLAG_NOCDROM
  1051 00000A2E 750B                    	jnz .not_set_cdrom_ports
  1052 00000A30 8B1E[2800]              	mov bx, [ADDR_SBMK_CDROM_IOPORTS]
  1053 00000A34 8B0E[2A00]              	mov cx, [ADDR_SBMK_CDROM_IOPORTS+2]
  1054 00000A38 E8E62D                  	call set_io_ports
  1055                                  .not_set_cdrom_ports:
  1056                                  %endif
  1057                                  
  1058                                  
  1059                                  %ifndef EMULATE_PROG
  1060                                  
  1061                                  ; Set "No Int 13h Extension" flag
  1062 00000A3B 30C0                    	xor al, al
  1063 00000A3D F606[1D00]04            	test byte [ADDR_SBMK_FLAGS], KNLFLAG_NOINT13EXT
  1064 00000A42 7502                    	jnz .no_int13_ext
  1065 00000A44 FEC0                            inc al
  1066                                  .no_int13_ext:
  1067 00000A46 A2[B237]                	mov [use_int13_ext], al
  1068                                  
  1069                                  ; Do some initialization
  1070 00000A49 E8F407                  	call main_init_theme		; initialize the theme
  1071 00000A4C E8D508                  	call main_init_video		; initialize the video mode.
  1072 00000A4F E8D218                          call window_initialize
  1073                                  
  1074                                  ; Check if needs scan boot records.
  1075 00000A52 F606[1D00]01            	test byte [ADDR_SBMK_FLAGS], KNLFLAG_FIRSTSCAN
  1076 00000A57 740D                    	jz .no_first_scan
  1077                                  
  1078 00000A59 E80409                  	call main_init_boot_records	; if it's the first time
  1079                                  					; to run this program,
  1080                                  					; call the init_boot_records.
  1081 00000A5C E8D808                  	call main_init_good_record_list
  1082                                  
  1083 00000A5F 8026[1D00]FE            	and byte [ADDR_SBMK_FLAGS], ~ KNLFLAG_FIRSTSCAN
  1084 00000A64 EB3E                    	jmp short .show_menu
  1085                                  
  1086                                  .no_first_scan:
  1087                                  
  1088                                  %ifdef Y2K_BUGFIX
  1089                                  
  1090                                  ;Initialize the Y2K bug workaround stuff
  1091                                  
  1092                                  ;Y2K fix for some BIOS which don't boot with years after 1999, we need to set
  1093                                  ;the year based on the last time we booted the machine
  1094                                  	mov ah, 4
  1095                                  	int 0x1a				;(bcd) cx=year dh=month ...
  1096                                  	jc .y2k_donothing
  1097                                  	mov ax,[ADDR_SBMK_Y2K_LAST_YEAR]
  1098                                  	or ax,ax
  1099                                  	jz .y2k_donothing
  1100                                  	cmp [ADDR_SBMK_Y2K_LAST_MONTH],dh
  1101                                  	je .y2k_unbug
  1102                                  	jb .y2k_chmonth
  1103                                  	inc ax	;we enter here only if above wich means we don't have CF
  1104                                  	daa	;this is a must as daa uses CF and inc doesn't set it
  1105                                  	xchg ah,al
  1106                                  	adc al,0
  1107                                  	daa
  1108                                  	xchg ah,al
  1109                                  	mov [ADDR_SBMK_Y2K_LAST_YEAR],ax
  1110                                  .y2k_chmonth:
  1111                                  	mov [ADDR_SBMK_Y2K_LAST_MONTH],dh
  1112                                          inc byte [main_tmp.change_occured]
  1113                                  .y2k_unbug:
  1114                                  	mov cx,ax
  1115                                  	mov ah,5				; FIXME this can go one day
  1116                                  	int 0x1a				; back if the day ends
  1117                                  .y2k_donothing:
  1118                                  %endif
  1119                                  
  1120                                  ; go ahead!
  1121                                  
  1122                                  ; Initialize the good record list
  1123 00000A66 E8CE08                  	call main_init_good_record_list
  1124                                  
  1125                                  ; Initialize the keyboard shift var, and test if Ctrl is pressed down.
  1126 00000A69 B402                    	mov ah, 0x02			; test the keyboard status,
  1127 00000A6B E8001F                  	call bioskey			; if ctrl pressed then show
  1128 00000A6E A2[BA32]                        mov [utils_tmp.kbd_last_shift], al ; Initialize the kbd stat reg.
  1129 00000A71 A804                    	test al, kbCtrlMask		; menu directly,
  1130 00000A73 752F                    	jnz .show_menu			;
  1131                                  
  1132                                  ; Check direct boot, and schedule boot
  1133 00000A75 A0[1F00]                	mov al, [ADDR_SBMK_DIRECT_BOOT]	; check if need boot directly.
  1134 00000A78 3C20                    	cmp al, MAX_RECORD_NUM		;
  1135 00000A7A 7213                    	jb .go_direct_boot
  1136                                  
  1137 00000A7C E8B20D                  	call main_do_schedule		; implement the schedule table.
  1138                                  
  1139 00000A7F 803E[1E00]00            	cmp byte [ADDR_SBMK_DELAY_TIME], 0
  1140 00000A84 751E                    	jnz .show_menu			; delay_time = 0, boot the
  1141                                  					; default record directly.
  1142 00000A86 A0[2000]                	mov al, [ADDR_SBMK_DEFAULT_BOOT]
  1143 00000A89 3C20                    	cmp al, MAX_RECORD_NUM
  1144 00000A8B 720F                    	jb .go_def_boot
  1145 00000A8D EB15                    	jmp short .show_menu
  1146                                          
  1147                                  .go_direct_boot:
  1148 00000A8F C606[1F00]FF            	mov byte [ADDR_SBMK_DIRECT_BOOT], 0xff ; clear the direct boot sig.
  1149 00000A94 E8DC0D                  	call main_save_boot_manager
  1150 00000A97 7208                    	jc .disk_error
  1151                                  
  1152 00000A99 A2[2000]                	mov [ADDR_SBMK_DEFAULT_BOOT], al
  1153                                  
  1154                                  .go_def_boot:
  1155 00000A9C E8DE0C                  	call main_boot_default
  1156 00000A9F EB03                    	jmp short .show_menu
  1157                                  
  1158                                  .disk_error:
  1159 00000AA1 E8600C                  	call main_show_disk_error
  1160                                  
  1161                                  %else
  1162                                  ; For emulator program
  1163                                  	call main_init_video			; here is the code for
  1164                                  	call main_init_boot_records		; emulate program.
  1165                                          call main_init_good_record_list
  1166                                  	call main_do_schedule
  1167                                  %endif
  1168                                  
  1169                                  
  1170                                  .show_menu:
  1171 00000AA4 E8EC07                  	call main_init_all_menus	; initialize the command menus
  1172                                  
  1173                                  ;Initialize  time count var
  1174 00000AA7 A0[1E00]                	mov al, [ADDR_SBMK_DELAY_TIME]
  1175 00000AAA 3CFF                    	cmp al, 255
  1176 00000AAC 7305                    	jae .not_count_time			; if delay_time = 255
  1177 00000AAE A2[DC32]                	mov [main_tmp.time_count], al		; then do not count time.
  1178 00000AB1 30C0                    	xor al, al
  1179                                  
  1180                                  .not_count_time:
  1181 00000AB3 A2[DF32]                	mov [main_tmp.key_pressed], al
  1182                                  
  1183                                  ; Set focus bar to the default record
  1184 00000AB6 8A1E[2000]              	mov bl, [ADDR_SBMK_DEFAULT_BOOT]
  1185 00000ABA 8D36[BC32]              	lea si, [main_tmp.good_record_list]
  1186 00000ABE 8A0E[1D44]              	mov cl, [GOOD_RECORD_NUMBER]
  1187 00000AC2 30ED                    	xor ch, ch
  1188 00000AC4 30FF                    	xor bh, bh
  1189                                          
  1190                                  .loop_search_def:
  1191 00000AC6 AC                      	lodsb
  1192 00000AC7 38D8                    	cmp al, bl
  1193 00000AC9 7406                    	je .found_def
  1194 00000ACB FEC7                    	inc bh
  1195 00000ACD E2F7                    	loop .loop_search_def
  1196 00000ACF EB14                    	jmp short .go_ahead
  1197                                  
  1198                                  .found_def:
  1199 00000AD1 883E[1E44]              	mov [FOCUS_RECORD], bh
  1200 00000AD5 3A3E[1B44]              	cmp bh, [BOOT_MENU_AREA_HEIGHT]
  1201 00000AD9 720A                    	jb .go_ahead
  1202 00000ADB FEC7                    	inc bh
  1203 00000ADD 2A3E[1B44]              	sub bh, [BOOT_MENU_AREA_HEIGHT]
  1204 00000AE1 883E[1F44]              	mov [FIRST_VISIBLE_RECORD], bh
  1205                                  
  1206                                  ; Run the UI system
  1207                                  .go_ahead:
  1208 00000AE5 BB[DD43]                        mov bx, main_windows_data.root_window
  1209 00000AE8 BE[F743]                        mov si, main_windows_data.boot_menu
  1210 00000AEB E86B18                          call window_execute
  1211                                  
  1212                                  .halt:
  1213 00000AEE EBFE                            jmp short .halt
  1214                                  
  1215                                  ;=============================================================================
  1216                                  ;include area
  1217                                  ;=============================================================================
  1218                                  
  1219                                  %include "main-cmds.asm"
  1220                              <1> ; asmsyntax=nasm
  1221                              <1> ;
  1222                              <1> ; main-cmds.asm
  1223                              <1> ;
  1224                              <1> ; command handles for main program
  1225                              <1> ;
  1226                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
  1227                              <1> ;
  1228                              <1> 
  1229                              <1> ;=============================================================================
  1230                              <1> ;main_show_help ---- show the help window
  1231                              <1> ;=============================================================================
  1232                              <1> main_show_help:
  1233 00000AF0 8B36[A246]          <1>         mov si, [str_idx.help_content]
  1234 00000AF4 09F6                <1>         or si, si
  1235 00000AF6 740D                <1>         jz .end
  1236                              <1>         
  1237 00000AF8 A0[2B46]            <1> 	mov al, [color.help_msg]
  1238 00000AFB 8B1E[2946]          <1> 	mov bx, [color.help_win]
  1239 00000AFF BA[6046]            <1>         mov dx, str_idx.help
  1240 00000B02 E80212              <1>         call message_box
  1241                              <1> .end:
  1242 00000B05 C3                  <1>         ret
  1243                              <1> 
  1244                              <1> ;=============================================================================
  1245                              <1> ;main_show_about ---- show the about window
  1246                              <1> ;=============================================================================
  1247                              <1> main_show_about:
  1248 00000B06 8B36[A046]          <1>         mov si, [str_idx.about_content]
  1249 00000B0A 09F6                <1>         or si, si
  1250 00000B0C 740D                <1>         jz .end
  1251                              <1>         
  1252 00000B0E A0[2E46]            <1>         mov al, [color.about_msg]
  1253 00000B11 8B1E[2C46]          <1>         mov bx, [color.about_win]
  1254 00000B15 BA[5C46]            <1>         mov dx, str_idx.about
  1255 00000B18 E8EC11              <1>         call message_box
  1256                              <1> .end:
  1257 00000B1B C3                  <1>         ret
  1258                              <1> 
  1259                              <1> ;=============================================================================
  1260                              <1> ;main_show_main_menu ---- show the main command menu
  1261                              <1> ;=============================================================================
  1262                              <1> main_show_main_menu:
  1263 00000B1C BE[2244]            <1> 	mov si, main_windows_data.main_menu
  1264 00000B1F E87118              <1> 	call window_run
  1265 00000B22 C3                  <1> 	ret
  1266                              <1> 
  1267                              <1> ;=============================================================================
  1268                              <1> ;main_show_record_menu ---- show the record command menu
  1269                              <1> ;=============================================================================
  1270                              <1> main_show_record_menu:
  1271 00000B23 BE[4D44]            <1> 	mov si, main_windows_data.record_menu
  1272 00000B26 E86A18              <1> 	call window_run
  1273 00000B29 C3                  <1> 	ret
  1274                              <1> 
  1275                              <1> ;=============================================================================
  1276                              <1> ;main_show_sys_menu ---- show the sys command menu
  1277                              <1> ;=============================================================================
  1278                              <1> main_show_sys_menu:
  1279 00000B2A BE[7844]            <1> 	mov si, main_windows_data.sys_menu
  1280 00000B2D E86318              <1> 	call window_run
  1281 00000B30 C3                  <1> 	ret
  1282                              <1> 
  1283                              <1> ;=============================================================================
  1284                              <1> ;main_ask_save_changes ---- save boot manager to disk
  1285                              <1> ;=============================================================================
  1286                              <1> main_ask_save_changes:
  1287 00000B31 803E[E232]00        <1>         cmp byte [main_tmp.change_occured], 0
  1288 00000B36 7418                <1>         je .no_changes
  1289                              <1>         
  1290 00000B38 8B36[A846]          <1>         mov si, [str_idx.ask_save_changes]
  1291 00000B3C E8F411              <1>         call info_box
  1292 00000B3F 3D0D1C              <1>         cmp ax, kbEnter
  1293 00000B42 740D                <1>         je main_save_changes
  1294 00000B44 3A06[F945]          <1>         cmp al, [yes_key_lower]
  1295 00000B48 7407                <1>         je main_save_changes
  1296 00000B4A 3A06[FA45]          <1>         cmp al, [yes_key_upper]
  1297 00000B4E 7401                <1>         je main_save_changes
  1298                              <1>         
  1299                              <1> .no_changes:
  1300 00000B50 C3                  <1>         ret
  1301                              <1> 
  1302                              <1> ;=============================================================================
  1303                              <1> ;main_save_changes ---- save boot manager to disk
  1304                              <1> ;=============================================================================
  1305                              <1> main_save_changes:
  1306                              <1> 
  1307                              <1> %ifndef EMULATE_PROG
  1308 00000B51 E81F0D              <1>         call main_save_boot_manager
  1309 00000B54 720D                <1>         jc .disk_error
  1310                              <1> %endif
  1311                              <1> 
  1312 00000B56 C606[E232]00        <1>         mov byte [main_tmp.change_occured], 0       ; clear change signature.
  1313                              <1> 
  1314 00000B5B 8B36[A446]          <1>         mov si, [str_idx.changes_saved]
  1315 00000B5F E8D111              <1>         call info_box
  1316 00000B62 C3                  <1>         ret
  1317                              <1> 
  1318                              <1> .disk_error:
  1319 00000B63 E89E0B              <1>         call main_show_disk_error
  1320                              <1> .end:
  1321 00000B66 C3                  <1>         ret
  1322                              <1> 
  1323                              <1> %if 0
  1324                              <1> ;=============================================================================
  1325                              <1> ;main_change_video_mode ---- change the video mode
  1326                              <1> ;=============================================================================
  1327                              <1> main_change_video_mode:
  1328                              <1> 
  1329                              <1>         inc byte [change_occured]               ; some changes occured.
  1330                              <1> 
  1331                              <1>         mov al, [video_mode]
  1332                              <1>         not al
  1333                              <1>         mov [video_mode], al
  1334                              <1>         call init_video
  1335                              <1>         call draw_screen
  1336                              <1>         ret
  1337                              <1> %endif
  1338                              <1> 
  1339                              <1> ;=============================================================================
  1340                              <1> ;main_change_name ---- change the record name
  1341                              <1> ;=============================================================================
  1342                              <1> main_change_name:
  1343 00000B67 E8E80B              <1>         call main_get_focus_record_pointer
  1344                              <1> 
  1345 00000B6A 89F7                <1> 	mov di, si
  1346 00000B6C 83C716              <1> 	add di, struc_bootrecord.name
  1347                              <1> 
  1348 00000B6F 0FB606[2246]        <1>         movzx ax, byte [color.input_box_msg]
  1349 00000B74 8B1E[2046]          <1>         mov bx, [color.input_box]
  1350 00000B78 B90F0F              <1> 	mov cx, (MAX_NAME_LENGTH<<8)|MAX_NAME_LENGTH
  1351 00000B7B 31D2                <1> 	xor dx, dx
  1352 00000B7D 8B36[6846]          <1>         mov si, [str_idx.name]
  1353                              <1>         
  1354 00000B81 E87D13              <1>         call input_box
  1355 00000B84 7204                <1>         jc .end
  1356 00000B86 FE06[E232]          <1>         inc byte [main_tmp.change_occured]          ; some changes occured.
  1357                              <1> .end:
  1358 00000B8A C3                  <1>         ret
  1359                              <1> 
  1360                              <1> 
  1361                              <1> ;=============================================================================
  1362                              <1> ;main_login_as_root ---- login as root
  1363                              <1> ;=============================================================================
  1364                              <1> main_login_as_root:
  1365 00000B8B A0[E332]            <1> 	mov al, [main_tmp.root_login]
  1366 00000B8E 08C0                <1> 	or al, al
  1367 00000B90 0F94C0              <1> 	setz al
  1368 00000B93 A2[E332]            <1> 	mov [main_tmp.root_login], al
  1369 00000B96 C3                  <1>         ret
  1370                              <1> 
  1371                              <1> 
  1372                              <1> ;=============================================================================
  1373                              <1> ;main_change_security_mode ---- change the secure mode
  1374                              <1> ;=============================================================================
  1375                              <1> main_change_security_mode:
  1376 00000B97 8036[1D00]02        <1> 	xor byte [ADDR_SBMK_FLAGS], KNLFLAG_SECURITY
  1377 00000B9C FE06[E232]          <1>         inc byte [main_tmp.change_occured]
  1378 00000BA0 C3                  <1>         ret
  1379                              <1> 
  1380                              <1> ;=============================================================================
  1381                              <1> ;main_change_root_password ---- change the root password
  1382                              <1> ;=============================================================================
  1383                              <1> main_change_root_password:
  1384 00000BA1 B110                <1> 	mov cl, MAX_PASSWORD_LENGTH
  1385 00000BA3 8B36[6A46]          <1>         mov si, [str_idx.new_root_passwd]
  1386 00000BA7 E89A13              <1>         call input_password
  1387 00000BAA 7241                <1>         jc .end
  1388 00000BAC 89C3                <1>         mov bx, ax
  1389 00000BAE 89D1                <1>         mov cx, dx
  1390                              <1> 
  1391 00000BB0 53                  <1>         push bx
  1392 00000BB1 51                  <1>         push cx
  1393 00000BB2 B110                <1> 	mov cl, MAX_PASSWORD_LENGTH
  1394 00000BB4 8B36[7246]          <1>         mov si, [str_idx.retype_passwd]
  1395 00000BB8 E88913              <1>         call input_password
  1396 00000BBB 59                  <1>         pop cx
  1397 00000BBC 5B                  <1>         pop bx
  1398 00000BBD 722E                <1>         jc .end
  1399 00000BBF 39C3                <1>         cmp bx, ax
  1400 00000BC1 7523                <1>         jne .wrong
  1401 00000BC3 39D1                <1>         cmp cx, dx
  1402 00000BC5 751F                <1>         jne .wrong
  1403                              <1> 
  1404 00000BC7 891E[2200]          <1>         mov [ADDR_SBMK_ROOT_PASSWORD], bx
  1405 00000BCB 890E[2400]          <1>         mov [ADDR_SBMK_ROOT_PASSWORD+2], cx
  1406                              <1> 
  1407 00000BCF C606[E332]00        <1>         mov byte [main_tmp.root_login], 0
  1408 00000BD4 8026[1D00]FD        <1>         and byte [ADDR_SBMK_FLAGS], ~ KNLFLAG_SECURITY
  1409                              <1> 
  1410 00000BD9 8B36[A646]          <1>         mov si, [str_idx.passwd_changed]
  1411 00000BDD E85311              <1>         call info_box
  1412                              <1> 
  1413 00000BE0 FE06[E232]          <1>         inc byte [main_tmp.change_occured]         ; some changes occured.
  1414 00000BE4 EB07                <1>         jmp short .end
  1415                              <1> .wrong:
  1416 00000BE6 8B36[AA46]          <1>         mov si, [str_idx.wrong_passwd]
  1417 00000BEA E83411              <1>         call error_box
  1418                              <1> .end:
  1419 00000BED C3                  <1>         ret
  1420                              <1> 
  1421                              <1> ;=============================================================================
  1422                              <1> ;main_change_record_password ---- change the record password
  1423                              <1> ;=============================================================================
  1424                              <1> main_change_record_password:
  1425 00000BEE B110                <1> 	mov cl, MAX_PASSWORD_LENGTH
  1426 00000BF0 8B36[6E46]          <1>         mov si, [str_idx.new_record_passwd]
  1427 00000BF4 E84D13              <1>         call input_password
  1428 00000BF7 7237                <1>         jc .end
  1429 00000BF9 89C3                <1>         mov bx, ax
  1430 00000BFB 89D1                <1>         mov cx, dx
  1431                              <1> 
  1432 00000BFD 53                  <1>         push bx
  1433 00000BFE 51                  <1>         push cx
  1434 00000BFF B110                <1> 	mov cl, MAX_PASSWORD_LENGTH
  1435 00000C01 8B36[7246]          <1>         mov si, [str_idx.retype_passwd]
  1436 00000C05 E83C13              <1>         call input_password
  1437 00000C08 59                  <1>         pop cx
  1438 00000C09 5B                  <1>         pop bx
  1439 00000C0A 7224                <1>         jc .end
  1440 00000C0C 39C3                <1>         cmp bx, ax
  1441 00000C0E 7519                <1>         jne .wrong
  1442 00000C10 39D1                <1>         cmp cx, dx
  1443 00000C12 7515                <1>         jne .wrong
  1444                              <1> 
  1445 00000C14 E83B0B              <1>         call main_get_focus_record_pointer
  1446 00000C17 895C0E              <1>         mov [si+struc_bootrecord.password], bx
  1447 00000C1A 894C10              <1>         mov [si+struc_bootrecord.password+2], cx
  1448                              <1>         
  1449 00000C1D 8B36[A646]          <1>         mov si, [str_idx.passwd_changed]
  1450 00000C21 E80F11              <1>         call info_box
  1451                              <1> 
  1452 00000C24 FE06[E232]          <1>         inc byte [main_tmp.change_occured]         ; some changes occured.
  1453 00000C28 C3                  <1>         ret
  1454                              <1>         
  1455                              <1> .wrong:
  1456 00000C29 8B36[AA46]          <1>         mov si, [str_idx.wrong_passwd]
  1457 00000C2D E8F110              <1>         call error_box
  1458                              <1> .end:
  1459 00000C30 C3                  <1>         ret
  1460                              <1> 
  1461                              <1> ;=============================================================================
  1462                              <1> ;main_set_default_record ---- set the default boot record
  1463                              <1> ;=============================================================================
  1464                              <1> main_set_default_record:
  1465 00000C31 8A0E[1E44]          <1> 	mov cl, [FOCUS_RECORD]
  1466 00000C35 E82D0B              <1> 	call main_get_record_pointer           ; get real record index
  1467                              <1> 
  1468 00000C38 880E[2000]          <1>         mov [ADDR_SBMK_DEFAULT_BOOT], cl
  1469 00000C3C FE06[E232]          <1>         inc byte [main_tmp.change_occured]      ; some changes occured.
  1470 00000C40 C3                  <1>         ret
  1471                              <1> 
  1472                              <1> ;=============================================================================
  1473                              <1> ;main_unset_default_record ---- unset the default boot record
  1474                              <1> ;=============================================================================
  1475                              <1> main_unset_default_record:
  1476 00000C41 C606[2000]FF        <1>         mov byte [ADDR_SBMK_DEFAULT_BOOT], 0xFF
  1477 00000C46 FE06[E232]          <1>         inc byte [main_tmp.change_occured]      ; some changes occured.
  1478 00000C4A C3                  <1>         ret
  1479                              <1>         
  1480                              <1> ;=============================================================================
  1481                              <1> ;main_toggle_auto_active ---- toggle the auto active switch
  1482                              <1> ;=============================================================================
  1483                              <1> main_toggle_auto_active:
  1484 00000C4B E8040B              <1>         call main_get_focus_record_pointer
  1485 00000C4E E8A727              <1>         call check_allow_act
  1486 00000C51 720D                <1>         jc .end
  1487                              <1> 
  1488 00000C53 E80C0A              <1> 	call main_auth_record_action
  1489 00000C56 7208                <1> 	jc .end
  1490                              <1> 
  1491 00000C58 81340010            <1>         xor word [si + struc_bootrecord.flags], INFOFLAG_AUTOACTIVE
  1492 00000C5C FE06[E232]          <1>         inc byte [main_tmp.change_occured]        ; some changes occured.
  1493                              <1> .end:
  1494 00000C60 C3                  <1>         ret
  1495                              <1> 
  1496                              <1> ;=============================================================================
  1497                              <1> ;main_toggle_auto_hide ---- toggle the auto hide switch
  1498                              <1> ;=============================================================================
  1499                              <1> main_toggle_auto_hide:
  1500 00000C61 E8EE0A              <1>         call main_get_focus_record_pointer
  1501 00000C64 E86E27              <1>         call check_allow_hide
  1502 00000C67 720D                <1>         jc .end
  1503                              <1> 
  1504 00000C69 E8F609              <1> 	call main_auth_record_action
  1505 00000C6C 7208                <1> 	jc .end
  1506                              <1>         
  1507 00000C6E 81340004            <1>         xor word [si + struc_bootrecord.flags], INFOFLAG_AUTOHIDE
  1508 00000C72 FE06[E232]          <1>         inc byte [main_tmp.change_occured]        ; some changes occured.
  1509                              <1> 
  1510                              <1> .end:
  1511 00000C76 C3                  <1>         ret
  1512                              <1> 
  1513                              <1> ;=============================================================================
  1514                              <1> ;main_mark_active ---- mark the record active
  1515                              <1> ;=============================================================================
  1516                              <1> main_mark_active:
  1517 00000C77 E8D80A              <1>         call main_get_focus_record_pointer
  1518 00000C7A E87B27              <1>         call check_allow_act
  1519 00000C7D 724F                <1>         jc .end
  1520                              <1> 
  1521 00000C7F E8E009              <1> 	call main_auth_record_action
  1522 00000C82 724A                <1> 	jc .end
  1523                              <1> 
  1524 00000C84 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]
  1525                              <1> 
  1526 00000C87 56                  <1>         push si
  1527 00000C88 8D36[BC32]          <1>         lea si, [main_tmp.good_record_list]
  1528 00000C8C 8D3E[0002]          <1>         lea di, [ADDR_SBMK_BOOT_RECORDS]
  1529                              <1> 
  1530 00000C90 0FB60E[1D44]        <1>         movzx cx, byte [GOOD_RECORD_NUMBER]
  1531 00000C95 B640                <1>         mov dh, SIZE_OF_BOOTRECORD
  1532 00000C97 6631DB              <1>         xor ebx, ebx
  1533 00000C9A FC                  <1>         cld
  1534                              <1> .loop_clear_act:                                ; clear all active marks of
  1535 00000C9B 57                  <1>         push di                                 ; the boot records in same
  1536 00000C9C AC                  <1>         lodsb                                   ; drive and father partition.
  1537 00000C9D F6E6                <1>         mul dh
  1538 00000C9F 01C7                <1>         add di, ax
  1539 00000CA1 3A5502              <1>         cmp dl, [di + struc_bootrecord.drive_id]
  1540 00000CA4 750A                <1>         jne .do_nothing
  1541 00000CA6 66395D06            <1>         cmp [di + struc_bootrecord.father_abs_addr], ebx
  1542 00000CAA 7504                <1>         jne .do_nothing
  1543 00000CAC 8125FFF7            <1>         and word [di + struc_bootrecord.flags], ~ INFOFLAG_ACTIVE
  1544                              <1> .do_nothing:
  1545 00000CB0 5F                  <1>         pop di
  1546 00000CB1 E2E8                <1>         loop .loop_clear_act
  1547                              <1> 
  1548 00000CB3 5E                  <1>         pop si
  1549                              <1>         
  1550 00000CB4 E87A23              <1>         call mark_record_active
  1551 00000CB7 7206                <1>         jc .error                                ; mark active ok
  1552 00000CB9 E8600A              <1>         call main_recheck_same_records           ; recheck same records
  1553 00000CBC 7205                <1>         jc .disk_error
  1554 00000CBE C3                  <1>         ret
  1555                              <1> 
  1556                              <1> .error:
  1557 00000CBF 09C0                <1>         or ax, ax
  1558 00000CC1 7404                <1>         jz .cannot_act
  1559                              <1> 
  1560                              <1> .disk_error:
  1561 00000CC3 E83E0A              <1>         call main_show_disk_error
  1562 00000CC6 C3                  <1>         ret
  1563                              <1> 
  1564                              <1> .cannot_act:
  1565 00000CC7 8B36[AE46]          <1>         mov si, [str_idx.mark_act_failed]
  1566 00000CCB E85310              <1>         call error_box
  1567                              <1> .end:
  1568 00000CCE C3                  <1>         ret
  1569                              <1> 
  1570                              <1> ;=============================================================================
  1571                              <1> ;main_toggle_hidden ---- toggle a record's hidden attribute
  1572                              <1> ;=============================================================================
  1573                              <1> main_toggle_hidden:
  1574 00000CCF E8800A              <1>         call main_get_focus_record_pointer
  1575 00000CD2 E80027              <1>         call check_allow_hide
  1576 00000CD5 721F                <1>         jc .end
  1577                              <1> 
  1578 00000CD7 E88809              <1> 	call main_auth_record_action
  1579 00000CDA 721A                <1> 	jc .end
  1580                              <1> 
  1581 00000CDC E8BC23              <1>         call toggle_record_hidden
  1582 00000CDF 7206                <1>         jc .error                                 ; toggle hidden ok
  1583 00000CE1 E8380A              <1>         call main_recheck_same_records            ; recheck same records
  1584 00000CE4 7205                <1>         jc .disk_error
  1585 00000CE6 C3                  <1>         ret
  1586                              <1> 
  1587                              <1> .error:
  1588 00000CE7 09C0                <1>         or ax, ax
  1589 00000CE9 7404                <1>         jz .cannot_hide
  1590                              <1> 
  1591                              <1> .disk_error:
  1592 00000CEB E8160A              <1>         call main_show_disk_error
  1593 00000CEE C3                  <1>         ret
  1594                              <1> 
  1595                              <1> .cannot_hide:
  1596 00000CEF 8B36[B046]          <1>         mov si, [str_idx.toggle_hid_failed]
  1597 00000CF3 E82B10              <1>         call error_box
  1598                              <1> .end:
  1599 00000CF6 C3                  <1>         ret
  1600                              <1> 
  1601                              <1> ;=============================================================================
  1602                              <1> ;main_delete_record ---- delete a boot record
  1603                              <1> ;=============================================================================
  1604                              <1> main_delete_record:
  1605 00000CF7 E8580A              <1>         call main_get_focus_record_pointer
  1606 00000CFA F7040002            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_HIDDEN
  1607 00000CFE 7415                <1>         jz .del_it
  1608                              <1> 
  1609 00000D00 E89823              <1>         call toggle_record_hidden           ; unhide it first.
  1610 00000D03 7310                <1>         jnc .del_it                         ; unhide ok, del it.
  1611                              <1> 
  1612 00000D05 09C0                <1>         or ax, ax
  1613 00000D07 7404                <1>         jz .cannot_hide
  1614 00000D09 E8F809              <1>         call main_show_disk_error
  1615 00000D0C C3                  <1>         ret
  1616                              <1> 
  1617                              <1> .cannot_hide:
  1618 00000D0D 8B36[B046]          <1>         mov si, [str_idx.toggle_hid_failed]
  1619 00000D11 E80D10              <1>         call error_box
  1620 00000D14 C3                  <1>         ret
  1621                              <1> 
  1622                              <1> .del_it:
  1623 00000D15 30C0                <1>         xor al, al
  1624 00000D17 89F7                <1>         mov di, si
  1625 00000D19 B94000              <1>         mov cx, SIZE_OF_BOOTRECORD
  1626 00000D1C FC                  <1>         cld
  1627 00000D1D F3AA                <1>         rep stosb
  1628                              <1> 
  1629 00000D1F FE06[E232]          <1>         inc byte [main_tmp.change_occured]               ; some changes occured.
  1630                              <1> 
  1631 00000D23 E81106              <1>         call main_init_good_record_list
  1632 00000D26 A0[1D44]            <1>         mov al, [GOOD_RECORD_NUMBER]
  1633 00000D29 08C0                <1>         or al, al
  1634 00000D2B 7415                <1>         jz .no_record
  1635                              <1>         
  1636 00000D2D FEC8                <1>         dec al
  1637 00000D2F 3A06[1F44]          <1>         cmp al, [FIRST_VISIBLE_RECORD]                  ; adjust the cursor
  1638 00000D33 7303                <1>         jae .check_focus_pos                            ; and menu position.
  1639 00000D35 A2[1F44]            <1>         mov [FIRST_VISIBLE_RECORD], al                  ;
  1640                              <1> .check_focus_pos:                                       ;
  1641 00000D38 3A06[1E44]          <1>         cmp al, [FOCUS_RECORD]                          ;
  1642 00000D3C 730A                <1>         jae .end                                        ;
  1643 00000D3E A2[1E44]            <1>         mov [FOCUS_RECORD], al                          ;
  1644 00000D41 C3                  <1>         ret
  1645                              <1> 
  1646                              <1> .no_record:
  1647 00000D42 A2[1F44]            <1>         mov [FIRST_VISIBLE_RECORD], al
  1648 00000D45 A2[1E44]            <1>         mov [FOCUS_RECORD], al
  1649                              <1> .end:
  1650 00000D48 C3                  <1>         ret
  1651                              <1>         
  1652                              <1> 
  1653                              <1> ;=============================================================================
  1654                              <1> ;main_rescan_all_drives ---- research all drives for boot records
  1655                              <1> ;=============================================================================
  1656                              <1> main_rescan_all_records:
  1657 00000D49 8026[1D00]DF        <1>         and byte [ADDR_SBMK_FLAGS], ~ KNLFLAG_ONLYPARTS
  1658 00000D4E EB05                <1>         jmp short main_rescan_records
  1659                              <1>         
  1660                              <1> ;=============================================================================
  1661                              <1> ;rescan_fixed_drives ---- research fixed drives for boot records
  1662                              <1> ;=============================================================================
  1663                              <1> main_rescan_all_partitions:
  1664 00000D50 800E[1D00]20        <1>         or byte [ADDR_SBMK_FLAGS], KNLFLAG_ONLYPARTS
  1665                              <1>         
  1666                              <1> ;=============================================================================
  1667                              <1> ;rescan_records ---- research all drives for boot records
  1668                              <1> ;=============================================================================
  1669                              <1> main_rescan_records:
  1670 00000D55 0FB60E[1D44]        <1>         movzx cx, byte [GOOD_RECORD_NUMBER]
  1671 00000D5A 08C9                <1>         or cl, cl                               ; if no good record then go to
  1672 00000D5C 7423                <1>         jz .init_it                             ; init directly.
  1673                              <1>         
  1674 00000D5E 8D3E[BC32]          <1>         lea di, [main_tmp.good_record_list]
  1675 00000D62 B240                <1>         mov dl, SIZE_OF_BOOTRECORD
  1676                              <1> 
  1677                              <1> ; unhide all hidden partition first.
  1678                              <1> .loop_unhide:
  1679 00000D64 8A05                <1>         mov al, [di]
  1680 00000D66 47                  <1>         inc di
  1681 00000D67 F6E2                <1>         mul dl
  1682 00000D69 8D36[0002]          <1>         lea si, [ADDR_SBMK_BOOT_RECORDS]
  1683 00000D6D 01C6                <1>         add si, ax
  1684 00000D6F F7040002            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_HIDDEN
  1685 00000D73 740A                <1>         jz .not_hidden
  1686 00000D75 E82323              <1>         call toggle_record_hidden
  1687 00000D78 721A                <1>         jc .hidden_error
  1688 00000D7A E89F09              <1>         call main_recheck_same_records
  1689 00000D7D 7219                <1>         jc .disk_error
  1690                              <1> 
  1691                              <1> .not_hidden:
  1692 00000D7F E2E3                <1>         loop .loop_unhide
  1693                              <1>         
  1694                              <1> .init_it:
  1695 00000D81 FE06[E232]          <1>         inc byte [main_tmp.change_occured]               ; some changes occured.
  1696                              <1> 
  1697 00000D85 E8D805              <1>         call main_init_boot_records
  1698 00000D88 E8AC05              <1>         call main_init_good_record_list
  1699                              <1> 
  1700 00000D8B 30C0                <1>         xor al, al
  1701 00000D8D A2[1E44]            <1>         mov byte [FOCUS_RECORD], al
  1702 00000D90 A2[1F44]            <1>         mov byte [FIRST_VISIBLE_RECORD], al
  1703 00000D93 C3                  <1> 	ret
  1704                              <1>         
  1705                              <1> .hidden_error:
  1706 00000D94 09C0                <1>         or ax, ax
  1707 00000D96 7404                <1>         jz .cannot_hide
  1708                              <1> 
  1709                              <1> .disk_error:
  1710 00000D98 E86909              <1>         call main_show_disk_error
  1711 00000D9B C3                  <1>         ret
  1712                              <1> 
  1713                              <1> .cannot_hide:
  1714 00000D9C 8B36[B046]          <1>         mov si, [str_idx.toggle_hid_failed]
  1715 00000DA0 E87E0F              <1>         call error_box
  1716                              <1> .end:
  1717 00000DA3 C3                  <1>         ret
  1718                              <1> 
  1719                              <1> ;=============================================================================
  1720                              <1> ;main_set_delay_time ---- set the delay time
  1721                              <1> ;=============================================================================
  1722                              <1> main_set_delay_time:
  1723 00000DA4 0FB606[2246]        <1>         movzx ax, [color.input_box_msg]
  1724 00000DA9 8B1E[2046]          <1>         mov bx, [color.input_box]
  1725 00000DAD B90303              <1>         mov cx, 0x0303
  1726 00000DB0 31D2                <1> 	xor dx, dx
  1727 00000DB2 8B36[6646]          <1>         mov si, [str_idx.delay_time]
  1728 00000DB6 BF[6B3B]            <1>         mov di, main_tmp.dialog_buf
  1729 00000DB9 8835                <1>         mov [di], dh
  1730 00000DBB E84311              <1>         call input_box
  1731 00000DBE 7213                <1>         jc .end
  1732                              <1> 
  1733 00000DC0 89FE                <1>         mov si, di
  1734 00000DC2 E85119              <1>         call atoi
  1735                              <1> 
  1736 00000DC5 3DFF00              <1>         cmp ax, 255
  1737 00000DC8 7602                <1>         jbe .set_time
  1738 00000DCA B0FF                <1>         mov al, 255
  1739                              <1> .set_time:
  1740 00000DCC A2[1E00]            <1>         mov [ADDR_SBMK_DELAY_TIME], al
  1741 00000DCF FE06[E232]          <1>         inc byte [main_tmp.change_occured]         ; some changes occured.
  1742                              <1> .end:
  1743 00000DD3 C3                  <1>         ret
  1744                              <1> 
  1745                              <1> ;=============================================================================
  1746                              <1> ;main_boot_it ---- boot the selected record
  1747                              <1> ;=============================================================================
  1748                              <1> main_boot_it:
  1749 00000DD4 8A0E[1E44]          <1> 	mov cl, [FOCUS_RECORD]
  1750 00000DD8 E88A09              <1> 	call main_get_record_pointer
  1751 00000DDB 88C8                <1> 	mov al, cl
  1752 00000DDD 50                  <1> 	push ax
  1753                              <1> 
  1754 00000DDE F606[1D00]10        <1>         test byte [ADDR_SBMK_FLAGS], KNLFLAG_REMLAST
  1755 00000DE3 740D                <1>         jz .no_remlast
  1756                              <1> 
  1757 00000DE5 A2[2000]            <1>         mov [ADDR_SBMK_DEFAULT_BOOT], al
  1758                              <1>        
  1759 00000DE8 E8880A              <1>         call main_save_boot_manager
  1760 00000DEB 7308                <1>         jnc .cont_boot
  1761                              <1> 
  1762 00000DED E81409              <1>         call main_show_disk_error
  1763 00000DF0 EB03                <1>         jmp short .cont_boot
  1764                              <1> 
  1765                              <1> .no_remlast:
  1766 00000DF2 E83CFD              <1>         call main_ask_save_changes              ; ask if save the changes.
  1767                              <1> 
  1768                              <1> .cont_boot:
  1769 00000DF5 E8CC0A              <1>         call main_hide_auto_hides
  1770 00000DF8 58                  <1>         pop ax
  1771 00000DF9 7203                <1>         jc .end
  1772                              <1>  
  1773 00000DFB E8A309              <1>         call main_do_boot_record
  1774                              <1> .end:
  1775 00000DFE C3                  <1>         ret
  1776                              <1> 
  1777                              <1> ;=============================================================================
  1778                              <1> ;main_return_to_bios ---- give control back to BIOS
  1779                              <1> ;=============================================================================
  1780                              <1> main_return_to_bios:
  1781 00000DFF E82FFD              <1>         call main_ask_save_changes              ; ask if save the changes.
  1782                              <1>         
  1783 00000E02 E8EE0D              <1>         call reset_video_mode
  1784                              <1>         
  1785 00000E05 E8EF29              <1> 	call uninstall_myint13h
  1786                              <1> %ifdef EMULATE_PROG
  1787                              <1>         mov ax, 0x4c00                          ; exit to dos
  1788                              <1>         int 0x21                                ;
  1789                              <1> %else
  1790 00000E08 CD18                <1>         int 0x18                                ; return to BIOS
  1791                              <1> %endif
  1792                              <1> 
  1793                              <1> .end:
  1794 00000E0A C3                  <1>         ret
  1795                              <1> 
  1796                              <1> 
  1797                              <1> ;=============================================================================
  1798                              <1> ; Duplicate the boot record
  1799                              <1> ;=============================================================================
  1800                              <1> main_dup_record:
  1801 00000E0B B84000              <1>         mov ax, SIZE_OF_BOOTRECORD
  1802 00000E0E B92000              <1>         mov cx, MAX_RECORD_NUM
  1803 00000E11 BF[0002]            <1>         mov di, ADDR_SBMK_BOOT_RECORDS
  1804                              <1> 
  1805                              <1> .search_empty_slot:
  1806 00000E14 F60509              <1>         test byte [di + struc_bootrecord.flags], DRVFLAG_DRIVEOK | INFOFLAG_ISSPECIAL
  1807 00000E17 7405                <1>         jz .found_empty
  1808 00000E19 01C7                <1>         add di, ax
  1809 00000E1B E2F7                <1>         loop .search_empty_slot
  1810 00000E1D C3                  <1> 	ret
  1811                              <1> 
  1812                              <1> .found_empty:
  1813                              <1> 
  1814 00000E1E FE06[E232]          <1>         inc byte [main_tmp.change_occured]
  1815                              <1> 
  1816 00000E22 E82D09              <1>         call main_get_focus_record_pointer
  1817 00000E25 89C1                <1>         mov cx, ax
  1818 00000E27 FC                  <1>         cld
  1819 00000E28 F3A4                <1>         rep movsb
  1820 00000E2A E80A05              <1>         call main_init_good_record_list
  1821 00000E2D C3                  <1>         ret
  1822                              <1> 
  1823                              <1> 
  1824                              <1> 
  1825                              <1> ;=============================================================================
  1826                              <1> ; move the boot record down 
  1827                              <1> ;=============================================================================
  1828                              <1> main_move_record_down:
  1829 00000E2E 0FB61E[1E44]        <1>         movzx bx, byte [FOCUS_RECORD]
  1830 00000E33 8A87[BC32]          <1>         mov al, [main_tmp.good_record_list + bx]
  1831 00000E37 FEC3                <1>         inc bl
  1832 00000E39 8AA7[BC32]          <1>         mov ah, [main_tmp.good_record_list + bx]
  1833 00000E3D 3A1E[1D44]          <1>         cmp bl, [GOOD_RECORD_NUMBER]
  1834 00000E41 731C                <1>         jae .end
  1835                              <1> 
  1836 00000E43 3A06[2000]          <1>         cmp al, [ADDR_SBMK_DEFAULT_BOOT]
  1837 00000E47 7506                <1>         jne .chknext
  1838 00000E49 8826[2000]          <1>         mov [ADDR_SBMK_DEFAULT_BOOT], ah
  1839 00000E4D EB09                <1>         jmp short .swap_record
  1840                              <1> .chknext:
  1841 00000E4F 3A26[2000]          <1>         cmp ah, [ADDR_SBMK_DEFAULT_BOOT]
  1842 00000E53 7503                <1>         jne .swap_record
  1843 00000E55 A2[2000]            <1>         mov [ADDR_SBMK_DEFAULT_BOOT], al
  1844                              <1> 
  1845                              <1> .swap_record:
  1846 00000E58 881E[1E44]          <1>         mov [FOCUS_RECORD], bl
  1847 00000E5C E83100              <1>         call main_swap_records
  1848                              <1> .end:
  1849 00000E5F C3                  <1>         ret
  1850                              <1> 
  1851                              <1> ;=============================================================================
  1852                              <1> ; move the boot record up
  1853                              <1> ;=============================================================================
  1854                              <1> main_move_record_up:
  1855 00000E60 0FB61E[1E44]        <1>         movzx bx, byte [FOCUS_RECORD]
  1856 00000E65 08DB                <1>         or bl, bl
  1857 00000E67 7426                <1>         jz .end
  1858 00000E69 8A87[BC32]          <1>         mov al, [main_tmp.good_record_list + bx]
  1859 00000E6D FECB                <1>         dec bl
  1860 00000E6F 8AA7[BC32]          <1>         mov ah, [main_tmp.good_record_list + bx]
  1861                              <1> 
  1862 00000E73 3A06[2000]          <1>         cmp al, [ADDR_SBMK_DEFAULT_BOOT]
  1863 00000E77 7506                <1>         jne .chknext
  1864 00000E79 8826[2000]          <1>         mov [ADDR_SBMK_DEFAULT_BOOT], ah
  1865 00000E7D EB09                <1>         jmp short .swap_record
  1866                              <1> .chknext:
  1867 00000E7F 3A26[2000]          <1>         cmp ah, [ADDR_SBMK_DEFAULT_BOOT]
  1868 00000E83 7503                <1>         jne .swap_record
  1869 00000E85 A2[2000]            <1>         mov [ADDR_SBMK_DEFAULT_BOOT], al
  1870                              <1> 
  1871                              <1> .swap_record:
  1872                              <1>   
  1873 00000E88 E80500              <1>         call main_swap_records
  1874 00000E8B 881E[1E44]          <1>         mov [FOCUS_RECORD],bl
  1875                              <1> .end:
  1876 00000E8F C3                  <1>         ret
  1877                              <1> 
  1878                              <1> ;=============================================================================
  1879                              <1> ; swap current and previous boot record
  1880                              <1> ;=============================================================================
  1881                              <1> main_swap_records:
  1882 00000E90 60                  <1> 	pusha
  1883 00000E91 FE0E[1E44]          <1>         dec byte [FOCUS_RECORD]
  1884 00000E95 E8BA08              <1>         call main_get_focus_record_pointer
  1885 00000E98 89F7                <1> 	mov di, si
  1886 00000E9A FE06[1E44]          <1> 	inc byte [FOCUS_RECORD]
  1887 00000E9E E8B108              <1> 	call main_get_focus_record_pointer	; si -> current  di -> prev
  1888                              <1> 
  1889 00000EA1 B94000              <1>         mov cx, SIZE_OF_BOOTRECORD
  1890                              <1> 
  1891                              <1> .loop_swap:
  1892 00000EA4 8A04                <1> 	mov al, [si]
  1893 00000EA6 8A1D                <1> 	mov bl, [di]
  1894 00000EA8 881C                <1> 	mov [si], bl
  1895 00000EAA 8805                <1> 	mov [di], al
  1896 00000EAC 46                  <1> 	inc si
  1897 00000EAD 47                  <1> 	inc di
  1898 00000EAE E2F4                <1> 	loop .loop_swap
  1899 00000EB0 61                  <1> 	popa
  1900                              <1> 
  1901 00000EB1 C3                  <1>         ret
  1902                              <1> 
  1903                              <1> ;=============================================================================
  1904                              <1> ;main_toggle_swapid ---- toggle the swap driver id flag 
  1905                              <1> ;=============================================================================
  1906                              <1> main_toggle_swapid:
  1907 00000EB2 E89D08              <1> 	call main_get_focus_record_pointer
  1908 00000EB5 09F6                <1> 	or si, si
  1909 00000EB7 7416                <1> 	jz .end
  1910 00000EB9 F7041800            <1> 	test word [si + struc_bootrecord.flags], DRVFLAG_ISCDROM | INFOFLAG_ISSPECIAL
  1911 00000EBD 7510                <1> 	jnz .end
  1912                              <1> 
  1913 00000EBF E8A007              <1> 	call main_auth_record_action
  1914 00000EC2 720B                <1> 	jc .end
  1915                              <1> 
  1916 00000EC4 81340020            <1>         xor word [si + struc_bootrecord.flags], INFOFLAG_SWAPDRVID
  1917 00000EC8 E8C41D              <1>         call check_bootrecord
  1918 00000ECB FE06[E232]          <1>         inc byte [main_tmp.change_occured]
  1919                              <1> .end:
  1920 00000ECF C3                  <1>         ret
  1921                              <1> 
  1922                              <1> ;=============================================================================
  1923                              <1> ;main_toggle_schedule ---- toggle the schedule of the bootrecord
  1924                              <1> ;=============================================================================
  1925                              <1> main_toggle_schedule:
  1926 00000ED0 E87F08              <1>         call main_get_focus_record_pointer
  1927 00000ED3 F7040080            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_SCHEDULED
  1928 00000ED7 7512                <1>         jnz .clear_schedule
  1929                              <1> 
  1930 00000ED9 56                  <1>         push si
  1931 00000EDA E81700              <1>         call main_input_schedule_time
  1932 00000EDD 5E                  <1>         pop si
  1933 00000EDE 7213                <1>         jc .end
  1934                              <1> 
  1935 00000EE0 09D2                <1>         or dx, dx
  1936 00000EE2 7502                <1>         jnz .set_schedule
  1937 00000EE4 F7D2                <1>         not dx
  1938                              <1> 
  1939                              <1> .set_schedule:
  1940 00000EE6 E81E22              <1>         call set_record_schedule
  1941 00000EE9 EB04                <1>         jmp short .end_ok
  1942                              <1> 
  1943                              <1> .clear_schedule:
  1944 00000EEB 8124FF7F            <1>         and word [si + struc_bootrecord.flags], ~INFOFLAG_SCHEDULED
  1945                              <1> 
  1946                              <1> .end_ok:
  1947 00000EEF FE06[E232]          <1>         inc byte [main_tmp.change_occured]
  1948                              <1> .end:
  1949 00000EF3 C3                  <1>         ret
  1950                              <1> 
  1951                              <1> ;=============================================================================
  1952                              <1> ;main_input_schedule_time ---- input the schedule time
  1953                              <1> ;input:
  1954                              <1> ;      none
  1955                              <1> ;output:
  1956                              <1> ;      cf = 0 success, 
  1957                              <1> ;           ax = begin time (in minutes)
  1958                              <1> ;           bx = end time (in minutes)
  1959                              <1> ;           dx = days info (bit 0 to bit 7 indicate Mon to Sun)
  1960                              <1> ;      cf = 1 cancel
  1961                              <1> ;=============================================================================
  1962                              <1> main_input_schedule_time:
  1963 00000EF4 60                  <1>         pusha
  1964                              <1> 
  1965 00000EF5 31C0                <1>         xor ax, ax
  1966 00000EF7 B90400              <1> 	mov cx, 4
  1967 00000EFA FC                  <1> 	cld
  1968 00000EFB BF[E632]            <1> 	mov di, main_tmp.schedule_begin
  1969 00000EFE F3AB                <1> 	rep stosw
  1970                              <1> 
  1971 00000F00 A0[2246]            <1>         mov al, [color.input_box_msg]
  1972 00000F03 8B1E[2046]          <1>         mov bx, [color.input_box_frame]
  1973 00000F07 B91313              <1>         mov cx, 0x1313
  1974 00000F0A 31D2                <1> 	xor dx, dx
  1975 00000F0C 8B36[7446]          <1>         mov si, [str_idx.input_schedule]
  1976 00000F10 BF[6B3B]            <1>         mov di, main_tmp.dialog_buf
  1977 00000F13 C60500              <1> 	mov byte [di], 0 
  1978                              <1>         
  1979 00000F16 E8E80F              <1>         call input_box
  1980 00000F19 724C                <1>         jc .exit
  1981                              <1> 
  1982                              <1> ;convert begin time
  1983 00000F1B 89FE                <1>         mov si, di
  1984 00000F1D E85400              <1> 	call main_str_to_schtime
  1985 00000F20 723D                <1> 	jc .invalid_input
  1986 00000F22 A3[E632]            <1>         mov [main_tmp.schedule_begin], ax
  1987                              <1> 
  1988                              <1> ;convert end time
  1989 00000F25 AC                  <1> 	lodsb
  1990 00000F26 3C2D                <1> 	cmp al,'-'
  1991 00000F28 7535                <1> 	jne .invalid_input
  1992                              <1> 
  1993 00000F2A E84700              <1> 	call main_str_to_schtime
  1994 00000F2D 7230                <1> 	jc .invalid_input
  1995 00000F2F A3[E832]            <1>         mov [main_tmp.schedule_end], ax
  1996                              <1> 
  1997                              <1> ;convert day info
  1998 00000F32 AC                  <1>         lodsb
  1999 00000F33 08C0                <1>         or al, al
  2000 00000F35 7425                <1>         jz .end
  2001                              <1> 
  2002 00000F37 3C3B                <1>         cmp al, ';'
  2003 00000F39 7524                <1>         jne .invalid_input
  2004                              <1> 
  2005 00000F3B B90700              <1>         mov cx, 7
  2006 00000F3E 31D2                <1>         xor dx, dx
  2007                              <1> 
  2008                              <1> .loop_get_days:
  2009 00000F40 AC                  <1>         lodsb
  2010 00000F41 08C0                <1>         or al, al
  2011 00000F43 7413                <1>         jz .end_get_days
  2012 00000F45 2C30                <1>         sub al, '0'
  2013 00000F47 3C07                <1>         cmp al, 7
  2014 00000F49 7314                <1>         jae .invalid_input
  2015 00000F4B BB0100              <1>         mov bx, 1
  2016 00000F4E 51                  <1>         push cx
  2017 00000F4F 88C1                <1>         mov cl, al
  2018 00000F51 D3E3                <1>         shl bx, cl
  2019 00000F53 59                  <1>         pop cx
  2020 00000F54 09DA                <1>         or dx, bx
  2021 00000F56 E2E8                <1>         loop .loop_get_days
  2022                              <1> 
  2023                              <1> .end_get_days:
  2024 00000F58 8916[EA32]          <1>         mov [main_tmp.schedule_day], dx
  2025                              <1> 
  2026                              <1> .end:
  2027 00000F5C F8                  <1> 	clc
  2028 00000F5D EB08                <1> 	jmp short .exit
  2029                              <1> 
  2030                              <1> .invalid_input:
  2031 00000F5F 8B36[B646]          <1>         mov si, [str_idx.invalid_schedule]
  2032 00000F63 E8BB0D              <1>         call error_box
  2033 00000F66 F9                  <1>         stc
  2034                              <1> .exit:
  2035 00000F67 61                  <1>         popa
  2036 00000F68 A1[E632]            <1>         mov ax, [main_tmp.schedule_begin]
  2037 00000F6B 8B1E[E832]          <1>         mov bx, [main_tmp.schedule_end]
  2038 00000F6F 8B16[EA32]          <1>         mov dx, [main_tmp.schedule_day]
  2039 00000F73 C3                  <1>         ret
  2040                              <1> 
  2041                              <1> 
  2042                              <1> ;=============================================================================
  2043                              <1> ;input ds:si -> string
  2044                              <1> ;output cf =0 ok, ax = time in minutes
  2045                              <1> ;       cf =1 fail
  2046                              <1> ;=============================================================================
  2047                              <1> main_str_to_schtime:
  2048 00000F74 31DB                <1> 	xor bx, bx
  2049 00000F76 31C9                <1> 	xor cx, cx
  2050                              <1> 
  2051 00000F78 E89B17              <1>         call atoi
  2052 00000F7B 3C18                <1>         cmp al, 24                          ; hh must be less than 24
  2053 00000F7D 771D                <1>         ja .fail
  2054                              <1> 
  2055 00000F7F 88C3                <1>         mov bl, al
  2056 00000F81 AC                  <1> 	lodsb
  2057 00000F82 3C3A                <1> 	cmp al, ':'
  2058 00000F84 7516                <1> 	jne .fail
  2059                              <1> 
  2060 00000F86 E88D17              <1>         call atoi
  2061 00000F89 3C3C                <1>         cmp al, 60                          ; mm must be less than 60
  2062 00000F8B 730F                <1>         jae .fail
  2063 00000F8D 88C1                <1>         mov cl, al
  2064                              <1> 
  2065 00000F8F B03C                <1>         mov al, 60
  2066 00000F91 F6E3                <1>         mul bl
  2067 00000F93 01C8                <1>         add ax, cx
  2068 00000F95 3DA005              <1>         cmp ax, 24*60                       ; begin time must be no more than
  2069 00000F98 7702                <1>         ja .fail                            ; 24*60 minutes
  2070 00000F9A F8                  <1> 	clc
  2071 00000F9B C3                  <1> 	ret
  2072                              <1> .fail:
  2073 00000F9C F9                  <1> 	stc
  2074 00000F9D C3                  <1> 	ret
  2075                              <1> 
  2076                              <1> ;=============================================================================
  2077                              <1> ;main_toggle_keystrokes ---- toggle the keystrokes switch of the bootrecord
  2078                              <1> ;=============================================================================
  2079                              <1> main_toggle_keystrokes:
  2080                              <1> 
  2081 00000F9E E8B107              <1>         call main_get_focus_record_pointer
  2082 00000FA1 F7040040            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_HAVEKEYS
  2083 00000FA5 7406                <1>         jz .input_keys
  2084                              <1> 
  2085 00000FA7 8124FFBF            <1>         and word [si + struc_bootrecord.flags], ~INFOFLAG_HAVEKEYS
  2086 00000FAB EB12                <1>         jmp short .end_ok
  2087                              <1> 
  2088                              <1> .input_keys:
  2089 00000FAD 8D7C26              <1>         lea di, [si + struc_bootrecord.keystrokes]
  2090 00000FB0 B10D                <1>         mov cl, MAX_KEYSTROKES
  2091 00000FB2 56                  <1>         push si
  2092 00000FB3 E89800              <1>         call main_input_keystrokes
  2093 00000FB6 5E                  <1>         pop si
  2094 00000FB7 08ED                <1>         or ch, ch
  2095 00000FB9 7408                <1>         jz .end
  2096                              <1> 
  2097 00000FBB 810C0040            <1>         or word [si + struc_bootrecord.flags], INFOFLAG_HAVEKEYS
  2098                              <1> 
  2099                              <1> .end_ok:
  2100 00000FBF FE06[E232]          <1>         inc byte [main_tmp.change_occured]
  2101                              <1> .end:
  2102 00000FC3 C3                  <1>         ret
  2103                              <1> 
  2104                              <1> ;=============================================================================
  2105                              <1> ; main_ikbox_event_handle ---- event handle for Input keystroke box
  2106                              <1> ;=============================================================================
  2107                              <1> main_ikbox_event_handle:
  2108 00000FC4 80FCF0              <1>         cmp ah, EVTCODE_COMMAND
  2109 00000FC7 720A                <1>         jb .normal_key
  2110                              <1> 
  2111 00000FC9 3D10F2              <1>         cmp ax, EVENT_SCROLL_OFF
  2112 00000FCC 7524                <1>         jne .end
  2113                              <1> 
  2114 00000FCE E81A14              <1>         call window_close
  2115 00000FD1 F8                  <1>         clc
  2116 00000FD2 C3                  <1>         ret
  2117                              <1> 
  2118                              <1> .normal_key:
  2119 00000FD3 FC                  <1>         cld
  2120 00000FD4 8B3E[EC32]          <1>         mov di, [main_tmp.keystroke_ptr]
  2121 00000FD8 0FB60E[EE32]        <1>         movzx cx, [main_tmp.keystroke_num]
  2122 00000FDD 3A0E[EF32]          <1>         cmp cl, [main_tmp.keystroke_max]
  2123 00000FE1 730F                <1>         jae .end
  2124                              <1> 
  2125 00000FE3 D1E1                <1>         shl cx, 1
  2126 00000FE5 01CF                <1>         add di, cx
  2127 00000FE7 AB                  <1>         stosw
  2128                              <1> 
  2129 00000FE8 FE06[EE32]          <1>         inc byte [main_tmp.keystroke_num]
  2130 00000FEC E80500              <1>         call main_ikbox_prepare
  2131 00000FEF E8EF11              <1>         call window_draw_body
  2132                              <1> .end:
  2133 00000FF2 F8                  <1>         clc
  2134 00000FF3 C3                  <1>         ret
  2135                              <1> 
  2136                              <1> ;=============================================================================
  2137                              <1> ;main_ikbox_prepare
  2138                              <1> ;input:
  2139                              <1> ;       ds:si -> the message_box struc
  2140                              <1> ;=============================================================================
  2141                              <1> main_ikbox_prepare:
  2142 00000FF4 C74416[C40F]        <1>         mov word [si + struc_window.event_handle],main_ikbox_event_handle
  2143 00000FF9 31C0                <1> 	xor ax, ax
  2144                              <1> 
  2145 00000FFB 56                  <1>         push si
  2146 00000FFC 8B7C1A              <1>         mov di, [si + struc_message_box.message]
  2147 00000FFF 8B36[7646]          <1>         mov si, [str_idx.input_keystrokes]
  2148 00001003 57                  <1>         push di
  2149                              <1> 
  2150 00001004 E88C17              <1>         call strcpy
  2151 00001007 57                  <1>         push di
  2152 00001008 0FB60E[EE32]        <1>         movzx cx, byte [main_tmp.keystroke_num]
  2153                              <1> 
  2154 0000100D D1E1                <1>         shl cx,1
  2155 0000100F 8B3E[EC32]          <1>         mov di, [main_tmp.keystroke_ptr]
  2156 00001013 01CF                <1>         add di, cx
  2157 00001015 09C9                <1> 	or cx, cx
  2158 00001017 7403                <1> 	jz .first_prepare
  2159 00001019 83EF02              <1> 	sub di, 2
  2160                              <1> .first_prepare:
  2161 0000101C 8B05                <1> 	mov ax, [di]
  2162                              <1> 
  2163 0000101E 5F                  <1>         pop di
  2164 0000101F 51                  <1>         push cx
  2165                              <1>         
  2166 00001020 B104                <1>         mov cl, 4
  2167 00001022 E89E17              <1>         call htoa                          ; fill in the key code string
  2168 00001025 83C704              <1>         add di, 4
  2169                              <1> 
  2170 00001028 8B36[7846]          <1>         mov si, [str_idx.key_count]
  2171 0000102C E86417              <1>         call strcpy
  2172                              <1> 
  2173 0000102F 59                  <1>         pop cx
  2174 00001030 D1E9                <1>         shr cx, 1
  2175 00001032 0FB6C1              <1>         movzx ax, cl
  2176 00001035 B102                <1>         mov cl, 2
  2177 00001037 E8B216              <1>         call itoa                          ; fill in the key cound string
  2178                              <1> 
  2179 0000103A 5E                  <1>         pop si
  2180                              <1> 
  2181 0000103B E8C817              <1> 	call count_lines
  2182                              <1> 
  2183 0000103E 020E[0346]          <1> 	add cl, [size.box_width]
  2184 00001042 022E[0446]          <1> 	add ch, [size.box_height]
  2185                              <1> 
  2186 00001046 5E                  <1>         pop si
  2187 00001047 894C08              <1> 	mov [si + struc_window.win_size], cx
  2188 0000104A E80F14              <1> 	call window_center_window
  2189 0000104D C3                  <1>         ret
  2190                              <1> 
  2191                              <1> 
  2192                              <1> ;=============================================================================
  2193                              <1> ;main_input_keystrokes ---- input a set of key strokes
  2194                              <1> ;input:
  2195                              <1> ;      cl = max key strokes number
  2196                              <1> ;      es:di -> the buffer
  2197                              <1> ;output:
  2198                              <1> ;      es:di -> the buffer filled by key strokes
  2199                              <1> ;      ch = number of key strokes that inputed
  2200                              <1> ;=============================================================================
  2201                              <1> main_input_keystrokes:
  2202 0000104E 57                  <1>         push di
  2203                              <1> 
  2204 0000104F 31C0                <1>         xor ax, ax
  2205 00001051 893E[EC32]          <1>         mov [main_tmp.keystroke_ptr], di
  2206 00001055 880E[EF32]          <1>         mov [main_tmp.keystroke_max], cl
  2207 00001059 A2[EE32]            <1>         mov [main_tmp.keystroke_num], al
  2208 0000105C 8905                <1>         mov [di], ax
  2209                              <1> 
  2210 0000105E A0[2246]            <1>         mov al, [color.input_box_msg]
  2211 00001061 8B1E[2046]          <1>         mov bx, [color.input_box]
  2212 00001065 BA[6446]            <1>         mov dx, str_idx.input
  2213 00001068 BE[6B3B]            <1>         mov si, main_tmp.dialog_buf
  2214 0000106B BF[F032]            <1>         mov di, main_tmp.ikbox
  2215                              <1> 
  2216 0000106E 8824                <1>         mov [si], ah
  2217 00001070 E85A0C              <1>         call msgbox_prepare
  2218 00001073 89FE                <1>         mov si, di
  2219 00001075 E87CFF              <1>         call main_ikbox_prepare
  2220                              <1> 
  2221 00001078 E8DB0B              <1>         call turnon_scrolllock
  2222 0000107B E81513              <1>         call window_run
  2223 0000107E E8E30B              <1>         call turnoff_scrolllock
  2224                              <1> 
  2225 00001081 8A2E[EE32]          <1>         mov ch, [main_tmp.keystroke_num]
  2226 00001085 5F                  <1>         pop di
  2227 00001086 C3                  <1>         ret
  2228                              <1> 
  2229                              <1> ;=============================================================================
  2230                              <1> ;main_show_record_info ---- show the information of the boot record
  2231                              <1> ;=============================================================================
  2232                              <1> main_show_record_info:
  2233 00001087 E8C806              <1>         call main_get_focus_record_pointer
  2234 0000108A BF[6B3B]            <1>         mov di, main_tmp.dialog_buf
  2235                              <1> 
  2236 0000108D E8B620              <1>         call get_record_schedule
  2237 00001090 52                  <1>         push dx
  2238 00001091 53                  <1>         push bx
  2239 00001092 50                  <1>         push ax
  2240                              <1> 
  2241 00001093 66FF740E            <1>         push dword [si + struc_bootrecord.password]
  2242                              <1> 
  2243 00001097 8B1C                <1>         mov bx, [si + struc_bootrecord.flags]
  2244 00001099 8B4402              <1>         mov ax, [si + struc_bootrecord.drive_id]
  2245                              <1> 
  2246 0000109C 89F2                <1>         mov dx, si
  2247 0000109E 83C616              <1>         add si, struc_bootrecord.name
  2248 000010A1 56                  <1>         push si                               ; save record name pointer
  2249 000010A2 52                  <1>         push dx                               ; save record pointer
  2250 000010A3 50                  <1>         push ax                               ; save drive_id and part_id
  2251                              <1> 
  2252                              <1> ;write drive id
  2253 000010A4 8B36[7E46]          <1>         mov si, [str_idx.drive_id]
  2254 000010A8 E8E816              <1>         call strcpy
  2255                              <1> 
  2256 000010AB F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  2257 000010AF 7407                <1> 	jz .drvid_ok
  2258                              <1> 
  2259 000010B1 B02D                <1> 	mov al, '-'
  2260 000010B3 AA                  <1> 	stosb
  2261 000010B4 AA                  <1> 	stosb
  2262 000010B5 AA                  <1> 	stosb
  2263 000010B6 EB05                <1> 	jmp short .write_partid
  2264                              <1> 
  2265                              <1> .drvid_ok:
  2266 000010B8 88C2                <1> 	mov dl, al
  2267 000010BA E8E726              <1> 	call get_drvid_str
  2268                              <1> 
  2269                              <1> .write_partid:
  2270                              <1> ;write part id
  2271 000010BD 8B36[8046]          <1>         mov si, [str_idx.part_id]
  2272 000010C1 E8CF16              <1>         call strcpy
  2273                              <1> 
  2274 000010C4 58                  <1>         pop ax                          ; ax = drive id, partition id
  2275 000010C5 F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  2276 000010C9 7406                <1> 	jz .partid_ok
  2277 000010CB B02D                <1> 	mov al, '-'
  2278 000010CD AA                  <1> 	stosb
  2279 000010CE AA                  <1> 	stosb
  2280 000010CF EB0B                <1> 	jmp short .write_rectype
  2281                              <1> 
  2282                              <1> .partid_ok:
  2283 000010D1 0FB6C4              <1>         movzx ax, ah
  2284 000010D4 B90200              <1>         mov cx, 2
  2285 000010D7 E81216              <1>         call itoa
  2286 000010DA 01CF                <1>         add di, cx
  2287                              <1> 
  2288                              <1> .write_rectype:
  2289                              <1> ;write record type
  2290 000010DC 8B36[8246]          <1>         mov si, [str_idx.record_type]
  2291 000010E0 E8B016              <1>         call strcpy
  2292                              <1> 
  2293 000010E3 89FE                <1>         mov si, di
  2294 000010E5 E85216              <1>         call strlen
  2295                              <1> 
  2296 000010E8 89C8                <1>         mov ax, cx
  2297 000010EA 5E                  <1>         pop si                          ; si -> record pointer
  2298 000010EB E8361E              <1>         call get_record_typestr
  2299 000010EE 89FE                <1>         mov si, di
  2300 000010F0 E84716              <1>         call strlen
  2301 000010F3 29C1                <1>         sub cx, ax
  2302 000010F5 01CF                <1>         add di, cx
  2303                              <1> 
  2304                              <1> ;write record name 
  2305 000010F7 8B36[8446]          <1>         mov si, [str_idx.record_name]
  2306 000010FB E89516              <1>         call strcpy
  2307 000010FE 5E                  <1>         pop si
  2308 000010FF E89116              <1>         call strcpy
  2309                              <1> 
  2310                              <1> ;write flags
  2311 00001102 B90700              <1> 	mov cx, 7
  2312 00001105 89DA                <1> 	mov dx, bx
  2313 00001107 31DB                <1> 	xor bx, bx
  2314                              <1> .loop_copy_flags:
  2315 00001109 8BB7[8646]          <1> 	mov si, [str_idx.auto_active + bx]
  2316 0000110D 8B87[6D11]          <1> 	mov ax, [.flag_val + bx]
  2317 00001111 E84400              <1> 	call .copy_flag_stat
  2318 00001114 43                  <1> 	inc bx
  2319 00001115 43                  <1> 	inc bx
  2320 00001116 E2F1                <1> 	loop .loop_copy_flags
  2321                              <1> 
  2322                              <1> ;write password flag
  2323 00001118 8B36[9446]          <1>         mov si, [str_idx.password]
  2324 0000111C E87416              <1>         call strcpy
  2325 0000111F 6659                <1>         pop ecx
  2326 00001121 6609C9              <1>         or ecx, ecx
  2327 00001124 7406                <1>         jz .no_pswd
  2328 00001126 8B36[9846]          <1>         mov si, [str_idx.yes]
  2329 0000112A EB04                <1>         jmp short .pswd
  2330                              <1> .no_pswd:
  2331 0000112C 8B36[9A46]          <1>         mov si, [str_idx.no]
  2332                              <1> .pswd:
  2333 00001130 E86016              <1>         call strcpy
  2334                              <1> 
  2335                              <1> ;write schedule time
  2336 00001133 8B36[9646]          <1>         mov si, [str_idx.schedule]
  2337 00001137 E85916              <1>         call strcpy
  2338 0000113A 89D1                <1>         mov cx, dx
  2339                              <1> 
  2340 0000113C 58                  <1>         pop ax
  2341 0000113D 5B                  <1>         pop bx
  2342 0000113E 5A                  <1>         pop dx
  2343                              <1> 
  2344 0000113F F7C10080            <1>         test cx, INFOFLAG_SCHEDULED
  2345 00001143 7405                <1>         jz .no_sched
  2346 00001145 E82820              <1>         call schedule_to_str
  2347 00001148 EB07                <1>         jmp short .show_info
  2348                              <1> 
  2349                              <1> .no_sched:
  2350 0000114A 8B36[9A46]          <1>         mov si, [str_idx.no]
  2351 0000114E E84216              <1>         call strcpy
  2352                              <1> 
  2353                              <1> .show_info:
  2354 00001151 BE[6B3B]            <1>         mov si, main_tmp.dialog_buf
  2355 00001154 E8DC0B              <1>         call info_box
  2356                              <1> .end:
  2357 00001157 C3                  <1>         ret
  2358                              <1> 
  2359                              <1> ; si -> flag string
  2360                              <1> ; ax = flag
  2361                              <1> .copy_flag_stat:
  2362 00001158 E83816              <1> 	call strcpy
  2363 0000115B 85C2                <1>         test dx, ax
  2364 0000115D 7406                <1>         jz .no_this_flag
  2365 0000115F 8B36[9846]          <1>         mov si, [str_idx.yes] 
  2366 00001163 EB04                <1>         jmp short .copy_flag
  2367                              <1> .no_this_flag:
  2368 00001165 8B36[9A46]          <1>         mov si, [str_idx.no]
  2369                              <1> .copy_flag:
  2370 00001169 E82716              <1>         call strcpy
  2371 0000116C C3                  <1> 	ret
  2372                              <1> 
  2373 0000116D 001000080004000200- <1> .flag_val	dw INFOFLAG_AUTOACTIVE, INFOFLAG_ACTIVE, INFOFLAG_AUTOHIDE, INFOFLAG_HIDDEN, INFOFLAG_SWAPDRVID
  2374 00001176 20                  <1>
  2375 00001177 00010040            <1> 		dw INFOFLAG_LOGICAL, INFOFLAG_HAVEKEYS
  2376                              <1> 
  2377                              <1>        
  2378                              <1> ;=============================================================================
  2379                              <1> ;main_power_off ---- turn of the power
  2380                              <1> ;=============================================================================
  2381                              <1> main_power_off:
  2382 0000117B E9BB16              <1>         jmp power_off
  2383                              <1> 
  2384                              <1> 
  2385                              <1> ;=============================================================================
  2386                              <1> ;main_change_bootmenu_style ---- change the boot menu's draw style
  2387                              <1> ;=============================================================================
  2388                              <1> main_change_bootmenu_style:
  2389 0000117E A0[2600]            <1> 	mov al, [ADDR_SBMK_BOOTMENU_STYLE]
  2390 00001181 FEC0                <1> 	inc al
  2391 00001183 3C04                <1> 	cmp al, 4
  2392 00001185 7202                <1> 	jb .ok
  2393 00001187 30C0                <1> 	xor al, al
  2394                              <1> 
  2395                              <1> .ok:
  2396 00001189 A2[2600]            <1> 	mov [ADDR_SBMK_BOOTMENU_STYLE], al
  2397 0000118C E85201              <1> 	call main_init_boot_menu
  2398                              <1> 
  2399 0000118F FE06[E232]          <1>         inc byte [main_tmp.change_occured]
  2400 00001193 C3                  <1>         ret
  2401                              <1> 
  2402                              <1> ;=============================================================================
  2403                              <1> ;main_toggle_rem_last ---- toggle the remember last switch.
  2404                              <1> ;=============================================================================
  2405                              <1> main_toggle_rem_last:
  2406 00001194 8036[1D00]10        <1>         xor byte [ADDR_SBMK_FLAGS], KNLFLAG_REMLAST
  2407 00001199 FE06[E232]          <1>         inc byte [main_tmp.change_occured]
  2408 0000119D C3                  <1>         ret
  2409                              <1> 
  2410                              <1> 
  2411                              <1> ;=============================================================================
  2412                              <1> ;main_boot_prev_in_menu ---- boot previous MBR in command menu
  2413                              <1> ;=============================================================================
  2414                              <1> main_boot_prev_in_menu:
  2415 0000119E E86E22              <1> 	call check_prev_mbr
  2416 000011A1 7208                <1> 	jc .end
  2417                              <1> 
  2418 000011A3 E8F404              <1>         call main_confirm_root_passwd
  2419 000011A6 7203                <1>         jc .end
  2420                              <1> 
  2421 000011A8 E85F07              <1> 	call main_boot_prev_mbr
  2422                              <1> .end:
  2423 000011AB C3                  <1> 	ret
  2424                              <1> 
  2425                              <1> 
  2426                              <1> ;=============================================================================
  2427                              <1> ; main_toggle_int13ext
  2428                              <1> ;=============================================================================
  2429                              <1> main_toggle_int13ext:
  2430 000011AC A0[1D00]            <1>         mov al, [ADDR_SBMK_FLAGS]
  2431 000011AF 3404                <1>         xor al, KNLFLAG_NOINT13EXT
  2432 000011B1 A2[1D00]            <1>         mov [ADDR_SBMK_FLAGS], al
  2433                              <1> 
  2434 000011B4 A804                <1>         test al, KNLFLAG_NOINT13EXT
  2435 000011B6 7507                <1>         jnz .no_int13ext
  2436 000011B8 C606[B237]01        <1>         mov byte [use_int13_ext], 1
  2437 000011BD EB05                <1>         jmp short .endok
  2438                              <1> 
  2439                              <1> .no_int13ext:
  2440 000011BF C606[B237]00        <1>         mov byte [use_int13_ext], 0
  2441                              <1> .endok:
  2442 000011C4 FE06[E232]          <1>         inc byte [main_tmp.change_occured]
  2443 000011C8 C3                  <1>         ret
  2444                              <1> 
  2445                              <1> ;=============================================================================
  2446                              <1> ; main_set_cdrom_ioports
  2447                              <1> ;=============================================================================
  2448                              <1> 
  2449                              <1> main_set_cdrom_ioports:
  2450                              <1> %ifndef DISABLE_CDBOOT
  2451 000011C9 F606[1D00]08        <1> 	test byte [ADDR_SBMK_FLAGS], KNLFLAG_NOCDROM
  2452 000011CE 756E                <1> 	jnz .end
  2453                              <1> 
  2454 000011D0 E8C704              <1>         call main_confirm_root_passwd
  2455 000011D3 7269                <1>         jc .end
  2456                              <1> 
  2457 000011D5 8D3E[6B3B]          <1>         lea di, [main_tmp.dialog_buf]
  2458 000011D9 57                  <1> 	push di
  2459 000011DA C60500              <1> 	mov byte [di], 0 
  2460 000011DD A1[2800]            <1> 	mov ax, [ADDR_SBMK_CDROM_IOPORTS]
  2461 000011E0 09C0                <1> 	or ax, ax
  2462 000011E2 7411                <1> 	jz .no_ports
  2463 000011E4 B104                <1> 	mov cl, 4
  2464 000011E6 E8DA15              <1> 	call htoa
  2465 000011E9 83C704              <1> 	add di, 4
  2466 000011EC B02C                <1> 	mov al, ','
  2467 000011EE AA                  <1> 	stosb
  2468 000011EF A1[2A00]            <1> 	mov ax, [ADDR_SBMK_CDROM_IOPORTS+2]
  2469 000011F2 E8CE15              <1> 	call htoa
  2470                              <1> .no_ports:
  2471 000011F5 5F                  <1> 	pop di
  2472                              <1> 
  2473 000011F6 0FB606[2246]        <1>         movzx ax, [color.input_box_msg]
  2474 000011FB 8B1E[2046]          <1>         mov bx, [color.input_box]
  2475 000011FF B90909              <1>         mov cx, 0x0909
  2476 00001202 31D2                <1>         xor dx, dx
  2477 00001204 8B36[7A46]          <1>         mov si, [str_idx.io_port]
  2478                              <1> 	
  2479 00001208 E8F60C              <1>         call input_box
  2480 0000120B 7231                <1>         jc .end
  2481                              <1> 
  2482 0000120D 89FE                <1>         mov si, di
  2483 0000120F E8CC15              <1> 	call atoh
  2484 00001212 803C2C              <1> 	cmp byte [si], ','
  2485 00001215 751E                <1> 	jne .invalid
  2486 00001217 89C3                <1> 	mov bx, ax
  2487 00001219 46                  <1> 	inc si
  2488 0000121A E8C115              <1> 	call atoh
  2489 0000121D 803C00              <1> 	cmp byte [si], 0
  2490 00001220 7513                <1> 	jne .invalid
  2491                              <1> 
  2492 00001222 89C1                <1> 	mov cx, ax
  2493 00001224 891E[2800]          <1> 	mov [ADDR_SBMK_CDROM_IOPORTS], bx
  2494 00001228 890E[2A00]          <1> 	mov [ADDR_SBMK_CDROM_IOPORTS+2], cx
  2495                              <1> 
  2496 0000122C FE06[E232]          <1>         inc byte [main_tmp.change_occured]               ; some changes occured.
  2497 00001230 E8EE25              <1> 	call set_io_ports
  2498 00001233 EB09                <1> 	jmp short .end
  2499                              <1> 
  2500                              <1> .invalid:
  2501 00001235 8B36[C846]          <1> 	mov si, [str_idx.invalid_ioports]
  2502 00001239 E8E50A              <1> 	call error_box
  2503 0000123C EB00                <1> 	jmp .end
  2504                              <1> .end:
  2505                              <1> %endif
  2506 0000123E C3                  <1>         ret
  2507                              <1> 
  2508                              <1> ;=============================================================================
  2509                              <1> ;main_set_y2k_year
  2510                              <1> ;=============================================================================
  2511                              <1> 
  2512                              <1> main_set_y2k_year:
  2513                              <1> %ifdef Y2K_BUGFIX
  2514                              <1>         lea di, [main_tmp.dialog_buf]
  2515                              <1> 	mov byte [di], 0 
  2516                              <1> 	mov cl,4
  2517                              <1> 	mov ax,[ADDR_SBMK_Y2K_LAST_YEAR]
  2518                              <1> 	or ax,ax
  2519                              <1> 	jz .nofix
  2520                              <1> 	call bcd_to_str
  2521                              <1> .nofix:
  2522                              <1>         movzx ax, [color.input_box_msg]
  2523                              <1>         mov bx, [color.input_box]
  2524                              <1>         mov si, [str_idx.year]
  2525                              <1>         mov ch, cl
  2526                              <1> 	xor dx, dx
  2527                              <1> 
  2528                              <1>         call input_box
  2529                              <1>         jc .end
  2530                              <1> 
  2531                              <1> 	xor bx,bx
  2532                              <1> 	or ch,ch
  2533                              <1> 	jz .set
  2534                              <1> 
  2535                              <1>         mov si,di
  2536                              <1> .loop:
  2537                              <1> 	shl bx,cl
  2538                              <1> 	lodsb
  2539                              <1> 	sub al,'0'
  2540                              <1> 	or bl,al
  2541                              <1> 	dec ch
  2542                              <1> 	jnz .loop
  2543                              <1> 
  2544                              <1> 	mov ah,4
  2545                              <1> 	int 0x1a
  2546                              <1> 	jc .end
  2547                              <1> 
  2548                              <1> 	mov cx,bx
  2549                              <1> 	mov ah,5
  2550                              <1> 	int 0x1a
  2551                              <1> .set:
  2552                              <1> 	mov [ADDR_SBMK_Y2K_LAST_YEAR],bx
  2553                              <1>         inc byte [main_tmp.change_occured]               ; some changes occured.
  2554                              <1> .end:
  2555                              <1> %endif
  2556 0000123F C3                  <1>         ret
  2557                              <1> 
  2558                                  %include "main-utils.asm"
  2559                              <1> ; asmsyntax=nasm
  2560                              <1> ;
  2561                              <1> ; main-utils.asm
  2562                              <1> ;
  2563                              <1> ; utility functions for main program
  2564                              <1> ;
  2565                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
  2566                              <1> ;
  2567                              <1> 
  2568                              <1> 
  2569                              <1> ;=============================================================================
  2570                              <1> ; >>>>>>>>>>>>>>>>>>>>>>>>> Initialization Functions <<<<<<<<<<<<<<<<<<<<<<<<<
  2571                              <1> ;=============================================================================
  2572                              <1> 
  2573                              <1> ;=============================================================================
  2574                              <1> ; main_init_theme ---- initialize the theme data.
  2575                              <1> ;=============================================================================
  2576                              <1> main_init_theme:
  2577 00001240 8B1E[3B46]          <1>         mov bx, [icon.brand]
  2578 00001244 09DB                <1>         or bx, bx
  2579 00001246 7406                <1>         jz .adjust_bkgnd                            ; no brand icon
  2580 00001248 8106[3B46][E545]    <1>         add word [icon.brand], theme_start          ;
  2581                              <1> .adjust_bkgnd:
  2582 0000124E 8B1E[3F46]          <1>         mov bx, [icon.background]
  2583 00001252 09DB                <1>         or bx, bx
  2584 00001254 7406                <1>         jz .adjust_font                             ; no background icon
  2585 00001256 8106[3F46][E545]    <1>         add word [icon.background], theme_start
  2586                              <1> .adjust_font:
  2587 0000125C 8B1E[4346]          <1>         mov bx, [font.data]
  2588 00001260 09DB                <1>         or bx, bx
  2589 00001262 7406                <1>         jz .adjust_keymap
  2590 00001264 8106[4346][E545]    <1>         add word [font.data], theme_start
  2591                              <1> .adjust_keymap:
  2592 0000126A 8B1E[5046]          <1>         mov bx, [keymap.data]
  2593 0000126E 09DB                <1>         or bx, bx
  2594 00001270 7406                <1>         jz .adjust_str
  2595 00001272 8106[5046][E545]    <1>         add word [keymap.data], theme_start
  2596                              <1> 
  2597                              <1> .adjust_str:
  2598 00001278 8D36[5246]          <1>         lea si, [str_idx]
  2599 0000127C B97800              <1>         mov cx, (end_of_str_idx - str_idx)/2
  2600                              <1>         
  2601                              <1> .loop_adjust:
  2602 0000127F 8B1C                <1>         mov bx, [si]
  2603 00001281 81C3[E545]          <1>         add bx, theme_start
  2604 00001285 891C                <1>         mov [si], bx
  2605 00001287 83C602              <1>         add si, 2
  2606 0000128A E2F3                <1>         loop .loop_adjust
  2607                              <1> 
  2608 0000128C B010                <1>         mov al, 0x10
  2609 0000128E 2006[F645]          <1>         and [keyboard_type], al
  2610                              <1> 
  2611 00001292 C3                  <1>         ret
  2612                              <1>         
  2613                              <1> ;=============================================================================
  2614                              <1> ; main_init_all_menus ---- initialize the menus
  2615                              <1> ;=============================================================================
  2616                              <1> main_init_all_menus:
  2617 00001293 BE[1046]            <1>         mov si, color.cmd_menu
  2618                              <1> ;initialize main menu
  2619 00001296 BF[2244]            <1>         mov di, main_windows_data.main_menu
  2620 00001299 E82800              <1>         call main_init_menu
  2621 0000129C A1[3100]            <1> 	mov ax, [ADDR_SBMK_MAIN_MENU_POS]
  2622 0000129F A3[2844]            <1> 	mov [main_windows_data.main_menu + struc_window.win_pos], ax
  2623                              <1> ;initialize record menu
  2624 000012A2 BF[4D44]            <1>         mov di, main_windows_data.record_menu
  2625 000012A5 E81C00              <1>         call main_init_menu
  2626 000012A8 A1[3300]            <1> 	mov ax, [ADDR_SBMK_RECORD_MENU_POS]
  2627 000012AB A3[5344]            <1> 	mov [main_windows_data.record_menu + struc_window.win_pos], ax
  2628                              <1> ;initialize system menu
  2629 000012AE BF[7844]            <1>         mov di, main_windows_data.sys_menu
  2630 000012B1 E81000              <1>         call main_init_menu
  2631 000012B4 A1[3500]            <1> 	mov ax, [ADDR_SBMK_SYS_MENU_POS]
  2632 000012B7 A3[7E44]            <1> 	mov [main_windows_data.sys_menu + struc_window.win_pos], ax
  2633                              <1> ;initialize boot menu
  2634 000012BA A1[2F00]            <1> 	mov ax, [ADDR_SBMK_BOOT_MENU_POS]
  2635 000012BD A3[FD43]            <1> 	mov [main_windows_data.boot_menu + struc_window.win_pos], ax
  2636 000012C0 E81E00              <1>         call main_init_boot_menu
  2637 000012C3 C3                  <1>         ret
  2638                              <1> 
  2639                              <1> ;=============================================================================
  2640                              <1> ; main_init_menu
  2641                              <1> ;input:
  2642                              <1> ;       ds:si -> colors
  2643                              <1> ;       ds:di -> struc_menu_box
  2644                              <1> ;=============================================================================
  2645                              <1> main_init_menu:
  2646 000012C4 56                  <1>         push si
  2647 000012C5 FC                  <1>         cld
  2648 000012C6 AD                  <1>         lodsw
  2649 000012C7 894504              <1>         mov [di + struc_window.win_attr], ax
  2650 000012CA AC                  <1>         lodsb
  2651 000012CB 88451C              <1>         mov [di + struc_menu_box.menu_header_attr], al
  2652 000012CE AD                  <1>         lodsw
  2653 000012CF 89451D              <1>         mov [di + struc_menu_box.menu_norm_attr], ax
  2654 000012D2 AD                  <1>         lodsw
  2655 000012D3 89451F              <1>         mov [di + struc_menu_box.menu_focus_attr], ax
  2656 000012D6 AC                  <1>         lodsb
  2657 000012D7 884525              <1>         mov [di + struc_menu_box.scrollbar_attr], al
  2658 000012DA 89FE                <1>         mov si, di
  2659 000012DC E88B0C              <1>         call menubox_adjust_geometry
  2660 000012DF 5E                  <1>         pop si
  2661 000012E0 C3                  <1>         ret
  2662                              <1> 
  2663                              <1> ;=============================================================================
  2664                              <1> ; main_init_boot_menu
  2665                              <1> ;=============================================================================
  2666                              <1> main_init_boot_menu:
  2667 000012E1 60                  <1>         pusha
  2668                              <1> ;initialize boot menu
  2669 000012E2 BF[F743]            <1>         mov di, main_windows_data.boot_menu
  2670 000012E5 A0[0546]            <1>         mov al, [size.boot_menu_win_height]
  2671 000012E8 884509              <1>         mov [di + struc_window.win_size + 1], al        ; set boot menu height
  2672                              <1> 
  2673                              <1> ;set boot menu header
  2674 000012EB 0FB606[2600]        <1>         movzx ax, byte [ADDR_SBMK_BOOTMENU_STYLE]
  2675 000012F0 BB[5446]            <1>         mov bx, str_idx.boot_menu_header
  2676 000012F3 3C03                <1>         cmp al, 3
  2677 000012F5 7602                <1>         jbe .bmstyle_ok
  2678 000012F7 30C0                <1>         xor al, al
  2679                              <1> 
  2680                              <1> .bmstyle_ok:
  2681 000012F9 D0E0                <1>         shl al, 1
  2682 000012FB 01C3                <1>         add bx, ax
  2683 000012FD 895D1A              <1>         mov [di + struc_menu_box.menu_header], bx
  2684                              <1> 
  2685                              <1> ;init the color and geometry of boot menu
  2686 00001300 BE[0846]            <1>         mov si, color.boot_menu
  2687 00001303 E8BEFF              <1>         call main_init_menu
  2688                              <1> 
  2689                              <1> ; set position of boot menu window 
  2690                              <1> 
  2691 00001306 8B4506              <1>         mov ax, [di + struc_window.win_pos]
  2692 00001309 88C3                <1>         mov bl, al
  2693                              <1> 
  2694 0000130B 025D08              <1>         add bl, [di + struc_window.win_size]
  2695 0000130E 80C302              <1>         add bl, 2
  2696 00001311 3A1E[1926]          <1>         cmp bl, [ui_screen_width]
  2697 00001315 7208                <1>         jb .bmpos_ok
  2698                              <1> 
  2699 00001317 A0[1926]            <1>         mov al, [ui_screen_width]
  2700 0000131A 2A4508              <1>         sub al, [di + struc_window.win_size]
  2701 0000131D 2C02                <1>         sub al, 2
  2702                              <1> 
  2703                              <1> .bmpos_ok:
  2704 0000131F 894506              <1>         mov [di + struc_window.win_pos], ax
  2705 00001322 61                  <1>         popa
  2706 00001323 C3                  <1>         ret
  2707                              <1> 
  2708                              <1> ;=============================================================================
  2709                              <1> ;main_init_video ---- init the video mode
  2710                              <1> ;input:
  2711                              <1> ;      none
  2712                              <1> ;output:
  2713                              <1> ;      none
  2714                              <1> ;=============================================================================
  2715                              <1> main_init_video:
  2716 00001324 60                  <1> 	pusha
  2717 00001325 A0[F545]            <1>         mov al, [video_mode]
  2718 00001328 B308                <1>         mov bl, 8
  2719 0000132A 8B2E[4346]          <1>         mov bp, [font.data]
  2720 0000132E 8B0E[4146]          <1>         mov cx, [font.number]
  2721                              <1>         
  2722 00001332 E80108              <1>         call set_video_mode
  2723 00001335 61                  <1> 	popa
  2724 00001336 C3                  <1>         ret
  2725                              <1> 
  2726                              <1> ;=============================================================================
  2727                              <1> ;main_init_good_record_list ---- init the good boot record list
  2728                              <1> ;input:
  2729                              <1> ;      none
  2730                              <1> ;output:
  2731                              <1> ;      cf = 0 sucess
  2732                              <1> ;      cf = 1 failed, no good record
  2733                              <1> ;=============================================================================
  2734                              <1> main_init_good_record_list:
  2735 00001337 FC                  <1>         cld
  2736 00001338 60                  <1>         pusha
  2737 00001339 B92000              <1>         mov cx, MAX_RECORD_NUM
  2738 0000133C 8D3E[BC32]          <1>         lea di, [main_tmp.good_record_list]
  2739 00001340 8D36[0002]          <1>         lea si, [ADDR_SBMK_BOOT_RECORDS]
  2740 00001344 31C0                <1>         xor ax, ax
  2741                              <1> 
  2742                              <1> .loop_check:
  2743 00001346 E84619              <1>         call check_bootrecord                   ; check if it's valid
  2744 00001349 7203                <1>         jc .check_next
  2745 0000134B AA                  <1>         stosb                                   ; store it's index to buffer
  2746 0000134C FEC4                <1>         inc ah
  2747                              <1>         
  2748                              <1> .check_next:
  2749 0000134E FEC0                <1>         inc al
  2750 00001350 83C640              <1>         add si, SIZE_OF_BOOTRECORD
  2751 00001353 E2F1                <1>         loop .loop_check
  2752                              <1> 
  2753 00001355 8826[1D44]          <1>         mov [GOOD_RECORD_NUMBER], ah
  2754 00001359 08E4                <1>         or ah, ah
  2755 0000135B 7501                <1>         jnz .ok
  2756 0000135D F9                  <1>         stc
  2757                              <1> .ok:
  2758 0000135E 61                  <1>         popa
  2759 0000135F C3                  <1>         ret
  2760                              <1> 
  2761                              <1> ;=============================================================================
  2762                              <1> ;init_boot_records ---- init the boot records list
  2763                              <1> ;input:
  2764                              <1> ;      none
  2765                              <1> ;output:
  2766                              <1> ;      none
  2767                              <1> ;=============================================================================
  2768                              <1> main_init_boot_records:
  2769 00001360 60                  <1>         pusha
  2770 00001361 FE06[E232]          <1>         inc byte [main_tmp.change_occured]         ; some changes occured.
  2771                              <1> 
  2772 00001365 FC                  <1>         cld
  2773 00001366 BE[0002]            <1>         mov si, ADDR_SBMK_BOOT_RECORDS
  2774 00001369 BF[1B33]            <1>         mov di, main_tmp.records_buf
  2775                              <1> 
  2776 0000136C B90008              <1> 	mov cx, MAX_RECORD_NUM * SIZE_OF_BOOTRECORD
  2777 0000136F E8E417              <1> 	call clear_memory
  2778                              <1> 
  2779 00001372 B84000              <1>         mov ax, SIZE_OF_BOOTRECORD        ; ax = size of bootrecord
  2780 00001375 B92000              <1>         mov cx, MAX_RECORD_NUM            ; cx = max record number
  2781                              <1> 
  2782 00001378 88CB                <1>         mov bl, cl
  2783                              <1> 
  2784 0000137A 56                  <1>         push si
  2785 0000137B 51                  <1>         push cx                           ; cx = MAX_RECORD_NUM
  2786                              <1> .bkp_good_records:
  2787 0000137C E81019              <1>         call check_bootrecord
  2788 0000137F 720A                <1>         jc .bad_record
  2789                              <1> 
  2790 00001381 56                  <1>         push si
  2791 00001382 51                  <1>         push cx
  2792 00001383 89C1                <1>         mov cx, ax
  2793 00001385 F3A4                <1>         rep movsb
  2794 00001387 59                  <1>         pop cx
  2795 00001388 5E                  <1>         pop si
  2796                              <1> 
  2797 00001389 FECB                <1>         dec bl
  2798                              <1>         
  2799                              <1> .bad_record:
  2800 0000138B 01C6                <1>         add si, ax
  2801 0000138D E2ED                <1>         loop .bkp_good_records
  2802                              <1> 
  2803 0000138F 59                  <1>         pop cx                           ; cx = MAX_RECORD_NUM
  2804 00001390 5E                  <1>         pop si                           ; si -> boot_records
  2805 00001391 87F7                <1>         xchg si, di                      ; di -> boot_records
  2806                              <1> 
  2807 00001393 57                  <1>         push di
  2808 00001394 50                  <1> 	push ax
  2809 00001395 30D2                <1>         xor dl, dl
  2810 00001397 F606[1D00]20        <1>         test byte [ADDR_SBMK_FLAGS], KNLFLAG_ONLYPARTS
  2811 0000139C 0F95C0              <1> 	setnz al
  2812 0000139F E83A1B              <1>         call search_records
  2813 000013A2 58                  <1> 	pop ax
  2814 000013A3 5F                  <1>         pop di
  2815                              <1> 
  2816                              <1> ;search finished, find out new records
  2817 000013A4 B92000              <1>         mov cx, MAX_RECORD_NUM
  2818 000013A7 87F7                <1>         xchg si, di                      ; si -> boot_records
  2819                              <1> 
  2820 000013A9 56                  <1>         push si
  2821                              <1> 
  2822 000013AA 08DB                <1>         or bl, bl
  2823 000013AC 741C                <1>         jz .no_space
  2824                              <1> 
  2825                              <1> .search_news:
  2826 000013AE 57                  <1>         push di
  2827 000013AF BF[1B33]            <1>         mov di, main_tmp.records_buf
  2828 000013B2 E82000              <1>         call main_find_record_in_buf
  2829 000013B5 5F                  <1>         pop di
  2830                              <1> 
  2831 000013B6 730A                <1>         jnc .found
  2832                              <1> 
  2833 000013B8 51                  <1>         push cx
  2834 000013B9 56                  <1>         push si
  2835 000013BA 89C1                <1>         mov cx, ax
  2836 000013BC F3A4                <1>         rep movsb
  2837 000013BE 5E                  <1>         pop si
  2838 000013BF 59                  <1>         pop cx
  2839                              <1> 
  2840 000013C0 FECB                <1>         dec bl
  2841                              <1> 
  2842                              <1> .found:
  2843 000013C2 08DB                <1>         or bl, bl
  2844 000013C4 7404                <1>         jz .no_space
  2845 000013C6 01C6                <1>         add si, ax
  2846 000013C8 E2E4                <1>         loop .search_news
  2847                              <1> 
  2848                              <1> .no_space:
  2849                              <1> 
  2850 000013CA 5F                  <1>         pop di
  2851 000013CB BE[1B33]            <1>         mov si, main_tmp.records_buf
  2852 000013CE B90008              <1> 	mov cx, MAX_RECORD_NUM * SIZE_OF_BOOTRECORD
  2853 000013D1 F3A4                <1>         rep movsb
  2854                              <1> 
  2855 000013D3 61                  <1>         popa
  2856 000013D4 C3                  <1>         ret
  2857                              <1> 
  2858                              <1> ;=============================================================================
  2859                              <1> ; main_find_record_in_buf ---- find a record in a buffer
  2860                              <1> ; input:
  2861                              <1> ;      ds:si -> the record
  2862                              <1> ;      es:di -> the buffer
  2863                              <1> ; output:
  2864                              <1> ;      cf = 1 not found
  2865                              <1> ;=============================================================================
  2866                              <1> main_find_record_in_buf:
  2867 000013D5 60                  <1>         pusha
  2868 000013D6 8B1C                <1> 	mov bx, [si]				; flags
  2869 000013D8 F7C30900            <1>         test bx, DRVFLAG_DRIVEOK|INFOFLAG_ISSPECIAL
  2870                              <1> 
  2871 000013DC 7442                <1>         jz .not_found
  2872                              <1> 
  2873 000013DE B92000              <1>         mov cx, MAX_RECORD_NUM
  2874                              <1> 
  2875                              <1> .compare_next:
  2876 000013E1 F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  2877 000013E5 7408                <1> 	jz .normal_rec
  2878 000013E7 F7050800            <1> 	test word [di], INFOFLAG_ISSPECIAL
  2879 000013EB 7524                <1> 	jnz .special_rec
  2880 000013ED EB2C                <1> 	jmp short .not_same
  2881                              <1> 
  2882                              <1> .normal_rec:
  2883 000013EF F7050100            <1> 	test word [di], DRVFLAG_DRIVEOK
  2884 000013F3 7426                <1> 	jz .not_same
  2885 000013F5 8B4502              <1>         mov ax, [di + struc_bootrecord.drive_id]
  2886 000013F8 394402              <1>         cmp [si + struc_bootrecord.drive_id], ax
  2887 000013FB 751E                <1>         jne .not_same
  2888 000013FD 668B4506            <1>         mov eax, [di + struc_bootrecord.father_abs_addr]
  2889 00001401 66394406            <1>         cmp [si + struc_bootrecord.father_abs_addr], eax
  2890 00001405 7514                <1>         jne .not_same
  2891 00001407 668B450A            <1>         mov eax, [di + struc_bootrecord.abs_addr]
  2892 0000140B 6639440A            <1>         cmp [si + struc_bootrecord.abs_addr], eax
  2893 0000140F 750A                <1>         jne .not_same
  2894                              <1> 
  2895                              <1> .special_rec:
  2896 00001411 8A4504              <1>         mov al, [di + struc_bootrecord.type]
  2897 00001414 384404              <1>         cmp [si + struc_bootrecord.type], al
  2898 00001417 7502                <1>         jne .not_same
  2899                              <1> 
  2900 00001419 EB08                <1>         jmp short .found_same
  2901                              <1> 
  2902                              <1> .not_same:
  2903 0000141B 83C740              <1>         add di, SIZE_OF_BOOTRECORD
  2904 0000141E E2C1                <1>         loop .compare_next
  2905                              <1> 
  2906                              <1> .not_found:
  2907 00001420 F9                  <1>         stc
  2908 00001421 61                  <1>         popa
  2909 00001422 C3                  <1>         ret
  2910                              <1> 
  2911                              <1> .found_same:
  2912 00001423 F8                  <1>         clc
  2913 00001424 61                  <1>         popa
  2914 00001425 C3                  <1>         ret
  2915                              <1> 
  2916                              <1> 
  2917                              <1> ;=============================================================================
  2918                              <1> ; >>>>>>>>>>>>>>>>>>>>>>>>> User Interface Functions <<<<<<<<<<<<<<<<<<<<<<<<<
  2919                              <1> ;=============================================================================
  2920                              <1> 
  2921                              <1> ;=============================================================================
  2922                              <1> ;root_window_draw_body_proc ---- draw the root window
  2923                              <1> ;input:
  2924                              <1> ;      none
  2925                              <1> ;output:
  2926                              <1> ;      none
  2927                              <1> ;=============================================================================
  2928                              <1> root_window_draw_body_proc:
  2929 00001426 8A3E[3046]          <1>         mov bh, [color.background]              ;
  2930 0000142A 8B36[3F46]          <1>         mov si, [icon.background]               ; draw background
  2931 0000142E 8B0E[3D46]          <1>         mov cx, [icon.background_size]          ;
  2932 00001432 E8F007              <1>         call draw_background                    ;
  2933                              <1> 
  2934 00001435 31D2                <1>         xor dx, dx                              ;
  2935 00001437 8B1E[3146]          <1>         mov bx, [color.copyright]               ;
  2936 0000143B A0[1926]            <1>         mov al, [ui_screen_width]               ; draw copyright message
  2937 0000143E 50                  <1>         push ax                                 ; save screen width
  2938 0000143F 8A0E[0146]          <1>         mov cl, [size.copyright]
  2939 00001443 F6E1                <1>         mul cl
  2940 00001445 89C1                <1>         mov cx, ax
  2941 00001447 B020                <1>         mov al, ' '                             ;
  2942 00001449 E87505              <1>         call draw_char                          ;
  2943 0000144C 8B36[9C46]          <1>         mov si, [str_idx.copyright]
  2944 00001450 E84705              <1>         call draw_string_hl
  2945                              <1>         
  2946 00001453 8B1E[3346]          <1>         mov bx, [color.hint]                    ;
  2947 00001457 8A36[1A26]          <1>         mov dh, [ui_screen_height]              ;
  2948 0000145B 8A0E[0246]          <1>         mov cl, [size.hint]                     ;
  2949 0000145F 28CE                <1>         sub dh, cl                              ; draw hint message
  2950 00001461 58                  <1>         pop ax                                  ; get screen width
  2951 00001462 F6E1                <1>         mul cl                                  ;
  2952 00001464 89C1                <1>         mov cx, ax                              ;
  2953 00001466 B020                <1>         mov al, ' '                             ;
  2954 00001468 E85605              <1>         call draw_char                          ;
  2955 0000146B 8B36[9E46]          <1>         mov si, [str_idx.hint]                  ;
  2956 0000146F E82805              <1>         call draw_string_hl                     ;
  2957                              <1> 
  2958 00001472 8B16[FB45]          <1>         mov dx, [position.brand]                ; draw brand icon
  2959 00001476 8B0E[3946]          <1>         mov cx, [icon.brand_size]               ;
  2960 0000147A 80FAFF              <1>         cmp dl, 0xFF                            ;
  2961 0000147D 7506                <1>         jne .not_justify                        ;
  2962 0000147F 8A16[1926]          <1>         mov dl, [ui_screen_width]               ; right justify
  2963 00001483 28CA                <1>         sub dl, cl                              ;
  2964                              <1> .not_justify:                                   ;
  2965 00001485 8B36[3B46]          <1>         mov si, [icon.brand]                    ;
  2966 00001489 E87207              <1>         call draw_icon                          ;
  2967                              <1> 
  2968 0000148C E80A00              <1>         call root_window_draw_date
  2969 0000148F E82000              <1>         call root_window_draw_time
  2970 00001492 E8CD00              <1>         call root_window_draw_delay_time
  2971 00001495 E83300              <1>         call root_window_draw_knl_flags
  2972                              <1> 
  2973 00001498 C3                  <1>         ret
  2974                              <1>         
  2975                              <1> ;=============================================================================
  2976                              <1> ;root_window_draw_date ---- draw the date string
  2977                              <1> ;input:
  2978                              <1> ;      none
  2979                              <1> ;output:
  2980                              <1> ;      none
  2981                              <1> ;=============================================================================
  2982                              <1> root_window_draw_date:
  2983 00001499 60                  <1>         pusha
  2984 0000149A BF[6B3C]            <1>         mov di, main_tmp.root_buf               ; draw date
  2985 0000149D A0[F745]            <1>         mov al, [show_date_method]              ;
  2986 000014A0 E8FE15              <1>         call get_current_date_string            ;
  2987 000014A3 89FE                <1>         mov si, di                              ;
  2988 000014A5 8A1E[3746]          <1>         mov bl, [color.date]                    ;
  2989 000014A9 8B16[FD45]          <1>         mov dx, [position.date]                 ;
  2990 000014AD E8EA04              <1>         call draw_string                        ;
  2991 000014B0 61                  <1>         popa
  2992 000014B1 C3                  <1>         ret
  2993                              <1> 
  2994                              <1> ;=============================================================================
  2995                              <1> ;draw_time ---- draw the time string
  2996                              <1> ;input:
  2997                              <1> ;      none
  2998                              <1> ;output:
  2999                              <1> ;      none
  3000                              <1> ;=============================================================================
  3001                              <1> root_window_draw_time:
  3002 000014B2 60                  <1>         pusha
  3003 000014B3 BF[6B3C]            <1>         mov di, main_tmp.root_buf               ; draw date
  3004 000014B6 A0[F845]            <1>         mov al, [show_time_method]              ;
  3005 000014B9 E8BE15              <1>         call get_current_time_string            ;
  3006 000014BC 89FE                <1>         mov si, di                              ;
  3007 000014BE 8A1E[3846]          <1>         mov bl, [color.time]                    ;
  3008 000014C2 8B16[FF45]          <1>         mov dx, [position.time]                 ;
  3009 000014C6 E8D104              <1>         call draw_string                        ;
  3010 000014C9 61                  <1>         popa
  3011 000014CA C3                  <1>         ret
  3012                              <1> 
  3013                              <1> ;=============================================================================
  3014                              <1> ;root_window_draw_knl_flags ---- draw root passwd, login, secure mode, 
  3015                              <1> ;                                remember last and int13 ext flags.
  3016                              <1> ;=============================================================================
  3017                              <1> root_window_draw_knl_flags:
  3018 000014CB 8B16[1926]          <1>         mov dx, [ui_screen_size]
  3019 000014CF 81EA1301            <1>         sub dx, 0x0113
  3020 000014D3 B90100              <1>         mov cx, 1
  3021                              <1> 
  3022                              <1> ; draw seperators
  3023 000014D6 8A1E[3346]          <1>         mov bl, [color.hint]
  3024 000014DA B07C                <1>         mov al, '|'
  3025 000014DC E8E204              <1>         call draw_char
  3026 000014DF 80C204              <1> 	add dl,4
  3027 000014E2 E8DC04              <1> 	call draw_char
  3028 000014E5 80C206              <1> 	add dl,6
  3029 000014E8 E8D604              <1> 	call draw_char
  3030 000014EB 80EA09              <1> 	sub dl,9
  3031                              <1> 
  3032                              <1> ; draw driver id
  3033 000014EE BF[6B3C]            <1>         mov di, main_tmp.root_buf
  3034 000014F1 57                  <1> 	push di
  3035 000014F2 52                  <1> 	push dx
  3036 000014F3 8A16[2100]          <1> 	mov dl, [ADDR_SBMK_DRVID]
  3037 000014F7 E8AA22              <1> 	call get_drvid_str
  3038 000014FA 5A                  <1> 	pop dx
  3039 000014FB 5E                  <1> 	pop si
  3040                              <1> 
  3041 000014FC 8A1E[3646]          <1>         mov bl, [color.knl_drvid]
  3042                              <1> 
  3043 00001500 E89704              <1>         call draw_string
  3044 00001503 80C204              <1>         add dl, 4
  3045                              <1> 
  3046                              <1> ; draw flags
  3047 00001506 8A1E[3546]          <1>         mov bl, [color.knl_flags]
  3048 0000150A 66833E[2200]00      <1>         cmp dword [ADDR_SBMK_ROOT_PASSWORD], 0
  3049 00001510 7404                <1>         jz .no_root_password
  3050                              <1>         
  3051 00001512 B050                <1>         mov al, 'P'
  3052 00001514 EB02                <1>         jmp short .draw_pwd
  3053                              <1> .no_root_password:
  3054 00001516 B02D                <1>         mov al, '-'
  3055                              <1> .draw_pwd:
  3056 00001518 E8A604              <1>         call draw_char
  3057 0000151B FEC2                <1>         inc dl
  3058                              <1> 
  3059 0000151D 8A26[1D00]          <1> 	mov ah, [ADDR_SBMK_FLAGS]
  3060                              <1> 
  3061 00001521 F6C402              <1>         test ah, KNLFLAG_SECURITY
  3062 00001524 7404                <1>         jz .no_security
  3063                              <1> 
  3064 00001526 B053                <1>         mov al, 'S'
  3065 00001528 EB02                <1>         jmp short .draw_security
  3066                              <1> .no_security:
  3067 0000152A B02D                <1>         mov al, '-'
  3068                              <1> .draw_security:
  3069 0000152C E89204              <1>         call draw_char
  3070 0000152F FEC2                <1>         inc dl
  3071                              <1> 
  3072 00001531 803E[E332]00        <1>         cmp byte [main_tmp.root_login],0
  3073 00001536 7404                <1>         jz .no_root_login
  3074                              <1> 
  3075 00001538 B041                <1>         mov al, 'A'
  3076 0000153A EB02                <1>         jmp short .draw_login
  3077                              <1> .no_root_login:
  3078 0000153C B02D                <1>         mov al, '-'
  3079                              <1> .draw_login:
  3080 0000153E E88004              <1>         call draw_char
  3081                              <1> 
  3082 00001541 FEC2                <1>         inc dl
  3083                              <1> 
  3084 00001543 F6C410              <1>         test ah, KNLFLAG_REMLAST
  3085 00001546 7404                <1>         jz .no_remlast
  3086 00001548 B04C                <1>         mov al, 'L'
  3087 0000154A EB02                <1>         jmp short .draw_remlast
  3088                              <1> .no_remlast:
  3089 0000154C B02D                <1>         mov al, '-'
  3090                              <1> .draw_remlast:
  3091 0000154E E87004              <1>         call draw_char
  3092                              <1> 
  3093 00001551 FEC2                <1>         inc dl
  3094                              <1> 
  3095 00001553 F6C404              <1>         test ah, KNLFLAG_NOINT13EXT
  3096 00001556 7504                <1>         jnz .no_int13ext
  3097 00001558 B045                <1>         mov al, 'E'
  3098 0000155A EB02                <1>         jmp .draw_int13ext
  3099                              <1> .no_int13ext:
  3100 0000155C B02D                <1>         mov al, '-'
  3101                              <1> .draw_int13ext:
  3102 0000155E E86004              <1>         call draw_char
  3103 00001561 C3                  <1>         ret
  3104                              <1> 
  3105                              <1> ;=============================================================================
  3106                              <1> ;root_window_draw_delay_time ---- draw the delay_time and time_count
  3107                              <1> ;=============================================================================
  3108                              <1> root_window_draw_delay_time:
  3109 00001562 0FB606[DC32]        <1>         movzx ax, byte [main_tmp.time_count]
  3110 00001567 B90300              <1>         mov cx, 3
  3111 0000156A BF[6B3C]            <1>         mov di, main_tmp.root_buf
  3112 0000156D E87C11              <1>         call itoa
  3113                              <1>         
  3114 00001570 8A1E[2F46]          <1>         mov bl, [color.delay_time]
  3115 00001574 8B16[1926]          <1>         mov dx, [ui_screen_size]
  3116 00001578 81EA0801            <1>         sub dx, 0x0108
  3117 0000157C 89FE                <1>         mov si, di
  3118 0000157E E81904              <1>         call draw_string
  3119                              <1> 
  3120 00001581 0FB606[1E00]        <1>         movzx ax, byte [ADDR_SBMK_DELAY_TIME]
  3121 00001586 B90300              <1>         mov cx, 3
  3122 00001589 E86011              <1>         call itoa
  3123                              <1> 
  3124 0000158C B03A                <1>         mov al, ':'
  3125 0000158E B101                <1>         mov cl, 1
  3126 00001590 80C203              <1>         add dl, 3
  3127 00001593 E82B04              <1>         call draw_char
  3128 00001596 FEC2                <1>         inc dl
  3129 00001598 E8FF03              <1>         call draw_string
  3130 0000159B B020                <1>         mov al, ' '
  3131 0000159D 80C203              <1>         add dl, 3
  3132 000015A0 E81E04              <1>         call draw_char
  3133 000015A3 C3                  <1>         ret
  3134                              <1> 
  3135                              <1> 
  3136                              <1> ;=============================================================================
  3137                              <1> ; boot_menu_item_str_proc ---- get item string of boot menu
  3138                              <1> ; input:
  3139                              <1> ;	cx = index
  3140                              <1> ; output:
  3141                              <1> ;	ds:si -> item string
  3142                              <1> ;=============================================================================
  3143                              <1> boot_menu_item_str_proc:
  3144 000015A4 E8BE01              <1> 	call main_get_record_pointer
  3145                              <1> 
  3146 000015A7 FC                  <1> 	cld
  3147 000015A8 8D3E[1B3B]          <1>         lea di, [main_tmp.record_string]
  3148 000015AC 57                  <1> 	push di
  3149                              <1> 
  3150 000015AD 3A0E[2000]          <1> 	cmp cl, [ADDR_SBMK_DEFAULT_BOOT]
  3151 000015B1 7502                <1> 	jne .not_def
  3152 000015B3 B02A                <1> 	mov al, '*'
  3153                              <1> .not_def:
  3154 000015B5 AA                  <1> 	stosb
  3155                              <1> 
  3156 000015B6 A0[2600]            <1>         mov al, [ADDR_SBMK_BOOTMENU_STYLE]
  3157 000015B9 E8D419              <1>         call get_record_string
  3158 000015BC 5E                  <1> 	pop si
  3159 000015BD C3                  <1> 	ret
  3160                              <1> 
  3161                              <1> ;=============================================================================
  3162                              <1> ; main_menu_item_str_proc ---- get item string of main menu
  3163                              <1> ; input:
  3164                              <1> ;	cx = index
  3165                              <1> ; output:
  3166                              <1> ;	ds:si -> item string
  3167                              <1> ;=============================================================================
  3168                              <1> main_menu_item_str_proc:
  3169 000015BE BE[CC46]            <1> 	mov si, str_idx.main_menu_strings
  3170 000015C1 EB0A                <1> 	jmp short main_get_cmd_menu_item_str
  3171                              <1> 
  3172                              <1> ;=============================================================================
  3173                              <1> ; record_menu_item_str_proc ---- get item string of record menu
  3174                              <1> ; input:
  3175                              <1> ;	cx = index
  3176                              <1> ; output:
  3177                              <1> ;	ds:si -> item string
  3178                              <1> ;=============================================================================
  3179                              <1> record_menu_item_str_proc:
  3180 000015C3 BE[E446]            <1> 	mov si, str_idx.record_menu_strings
  3181 000015C6 EB05                <1> 	jmp short main_get_cmd_menu_item_str
  3182                              <1> 
  3183                              <1> ;=============================================================================
  3184                              <1> ; sys_menu_item_str_proc ---- get item string of sys menu
  3185                              <1> ; input:
  3186                              <1> ;	cx = index
  3187                              <1> ; output:
  3188                              <1> ;	ds:si -> item string
  3189                              <1> ;=============================================================================
  3190                              <1> sys_menu_item_str_proc:
  3191 000015C8 BE[0647]            <1> 	mov si, str_idx.sys_menu_strings
  3192 000015CB EB00                <1> 	jmp short main_get_cmd_menu_item_str
  3193                              <1> 
  3194                              <1> ;=============================================================================
  3195                              <1> ; main_get_cmd_menu_item_str ---- get item string of a command menu
  3196                              <1> ; input:
  3197                              <1> ;	cx = index
  3198                              <1> ;	ds:si -> str_idx
  3199                              <1> ; output:
  3200                              <1> ;	ds:si -> item string
  3201                              <1> ;=============================================================================
  3202                              <1> main_get_cmd_menu_item_str:
  3203 000015CD D1E1                <1> 	shl cx,1
  3204 000015CF 01CE                <1> 	add si, cx
  3205 000015D1 8B34                <1> 	mov si, [si]
  3206 000015D3 C3                  <1> 	ret
  3207                              <1> 
  3208                              <1> ;=============================================================================
  3209                              <1> ;main_check_update_time ---- check if the time message needs update.
  3210                              <1> ;output:
  3211                              <1> ;	cf = 0 not changed
  3212                              <1> ;	cf = 1 changed
  3213                              <1> ;=============================================================================
  3214                              <1> main_check_update_time:
  3215 000015D4 50                  <1> 	push ax
  3216 000015D5 B402                <1>         mov ah, 0x02
  3217 000015D7 CD1A                <1>         int 0x1a
  3218                              <1> 
  3219 000015D9 390E[E432]          <1>         cmp [main_tmp.last_time], cx
  3220 000015DD 7407                <1>         je .end
  3221                              <1> 
  3222 000015DF 890E[E432]          <1>         mov [main_tmp.last_time], cx
  3223 000015E3 F9                  <1> 	stc
  3224 000015E4 58                  <1> 	pop ax
  3225 000015E5 C3                  <1> 	ret
  3226                              <1> .end:
  3227 000015E6 F8                  <1> 	clc
  3228 000015E7 58                  <1> 	pop ax
  3229 000015E8 C3                  <1>         ret
  3230                              <1> 
  3231                              <1> 
  3232                              <1> ;=============================================================================
  3233                              <1> ;main_check_delay_time ---- check if the delay time is up
  3234                              <1> ; output:
  3235                              <1> ;	cf = 0 not zero
  3236                              <1> ;	cf = 1 zero
  3237                              <1> ;=============================================================================
  3238                              <1> main_check_delay_time:
  3239 000015E9 30E4                <1>         xor ah, ah                                      ; get time ticks
  3240 000015EB CD1A                <1>         int 0x1a                                        ;
  3241                              <1> 
  3242 000015ED 3B16[DD32]          <1>         cmp dx, [main_tmp.ticks_count]
  3243 000015F1 7304                <1>         jae .next_time                                  ; dx must greater than
  3244 000015F3 8916[DD32]          <1>         mov [main_tmp.ticks_count], dx                  ; ticks_count
  3245                              <1> .next_time:
  3246 000015F7 31C0                <1> 	xor ax, ax
  3247 000015F9 89D1                <1>         mov cx, dx                                      ; every 18 ticks approxmiately
  3248 000015FB 2B0E[DD32]          <1>         sub cx, [main_tmp.ticks_count]                  ; equal to 1 second,
  3249 000015FF 83F912              <1>         cmp cx, 18                                      ; decrease time_count
  3250 00001602 7609                <1>         jbe .not_add                                    ; until to zero.
  3251 00001604 8916[DD32]          <1>         mov [main_tmp.ticks_count], dx
  3252 00001608 FE0E[DC32]          <1>         dec byte [main_tmp.time_count]
  3253 0000160C 40                  <1> 	inc ax
  3254                              <1> .not_add:
  3255 0000160D 803E[DC32]00        <1>         cmp byte [main_tmp.time_count], 0               ; if time is up, then
  3256 00001612 7502                <1>         jne .no_up                                      ; send ESC key.
  3257 00001614 F9                  <1> 	stc
  3258 00001615 C3                  <1> 	ret
  3259                              <1> 
  3260                              <1> .no_up:
  3261 00001616 F8                  <1> 	clc
  3262 00001617 C3                  <1> 	ret
  3263                              <1> 
  3264                              <1> ;=============================================================================
  3265                              <1> ;get_event ---- get a event, if no key is pressed then count down the 
  3266                              <1> ;               delay time until to zero and send an EVENT_BOOT_DEFAULT event
  3267                              <1> ;input:
  3268                              <1> ;      none
  3269                              <1> ;output:
  3270                              <1> ;      ax = the key code
  3271                              <1> ;=============================================================================
  3272                              <1> get_event:
  3273 00001618 60                  <1> 	pusha
  3274                              <1> 
  3275 00001619 31C0                <1> 	xor ax, ax
  3276                              <1> 
  3277                              <1> .loop_get_event:
  3278 0000161B E8B6FF              <1> 	call main_check_update_time
  3279 0000161E 7305                <1> 	jnc .no_update_time
  3280                              <1> 
  3281 00001620 B801F4              <1> 	mov ax, EVENT_REDRAW_ROOT
  3282 00001623 EB31                <1> 	jmp short .cont_loop
  3283                              <1> 
  3284                              <1> .no_update_time:
  3285                              <1> 
  3286 00001625 803E[1E00]00        <1> 	cmp byte [ADDR_SBMK_DELAY_TIME], 0
  3287 0000162A 741E                <1> 	je .no_count
  3288 0000162C 803E[DF32]00        <1> 	cmp byte [main_tmp.key_pressed], 0
  3289 00001631 7517                <1> 	jne .no_count
  3290                              <1> 
  3291 00001633 E8B3FF              <1> 	call main_check_delay_time
  3292 00001636 7309                <1> 	jnc .has_delay
  3293 00001638 B802F4              <1> 	mov ax, EVENT_BOOT_DEFAULT
  3294 0000163B FE06[DF32]          <1> 	inc byte [main_tmp.key_pressed]
  3295 0000163F EB15                <1> 	jmp short .cont_loop
  3296                              <1> 
  3297                              <1> .has_delay
  3298 00001641 09C0                <1> 	or ax, ax
  3299 00001643 7405                <1> 	jz .no_count
  3300 00001645 B801F4              <1> 	mov ax, EVENT_REDRAW_ROOT
  3301 00001648 EB0C                <1> 	jmp short .cont_loop
  3302                              <1> 
  3303                              <1> .no_count:
  3304 0000164A E86713              <1> 	call check_keyevent
  3305 0000164D 09C0                <1> 	or ax, ax
  3306 0000164F 7405                <1> 	jz .cont_loop
  3307                              <1> 
  3308                              <1> .key_pressed:
  3309 00001651 C606[DF32]01        <1> 	mov byte [main_tmp.key_pressed], 1
  3310                              <1> 
  3311                              <1> .cont_loop:
  3312 00001656 09C0                <1> 	or ax, ax
  3313 00001658 74C1                <1> 	jz .loop_get_event
  3314                              <1> 
  3315 0000165A A3[E032]            <1> 	mov [main_tmp.keycode], ax
  3316 0000165D 61                  <1> 	popa
  3317 0000165E A1[E032]            <1> 	mov ax, [main_tmp.keycode]
  3318 00001661 C3                  <1> 	ret
  3319                              <1>         
  3320                              <1> 
  3321                              <1> ;=============================================================================
  3322                              <1> ; main_auth_record_action
  3323                              <1> ;=============================================================================
  3324                              <1> main_auth_record_action:
  3325 00001662 B0D0                <1> 	mov al, ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
  3326                              <1> 
  3327                              <1> ;=============================================================================
  3328                              <1> ; main_auth_action  ---- auth an action
  3329                              <1> ; input:
  3330                              <1> ;	al = auth type
  3331                              <1> ; output:
  3332                              <1> ;	cf = 0, success
  3333                              <1> ;	cf = 1, failed
  3334                              <1> ;=============================================================================
  3335                              <1> main_auth_action:
  3336 00001664 60                  <1> 	pusha
  3337                              <1> 
  3338 00001665 A810                <1> 	test al, ACTFLAG_CHK_RECNUM
  3339 00001667 7407                <1> 	jz .test_security
  3340                              <1> 
  3341 00001669 803E[1D44]00        <1> 	cmp byte [GOOD_RECORD_NUMBER], 0
  3342 0000166E 7427                <1> 	jz .auth_failed
  3343                              <1> 
  3344                              <1> .test_security:
  3345 00001670 803E[E332]00        <1>         cmp byte [main_tmp.root_login], 0
  3346 00001675 7514                <1>         jnz .auth_ok
  3347                              <1> 
  3348 00001677 F606[1D00]02        <1> 	test byte [ADDR_SBMK_FLAGS], KNLFLAG_SECURITY
  3349 0000167C 7404                <1> 	jz .test_root
  3350                              <1> 
  3351 0000167E A880                <1> 	test al, ACTFLAG_AUTH_SECURITY
  3352 00001680 7504                <1> 	jnz .auth_root
  3353                              <1> 
  3354                              <1> .test_root:
  3355 00001682 A820                <1> 	test al, ACTFLAG_AUTH_ROOT
  3356 00001684 7408                <1> 	jz .test_record
  3357                              <1> 
  3358                              <1> .auth_root:
  3359 00001686 E81100              <1> 	call main_confirm_root_passwd
  3360 00001689 720C                <1> 	jc .auth_failed
  3361                              <1> 
  3362                              <1> .auth_ok:
  3363 0000168B F8                  <1> 	clc
  3364 0000168C 61                  <1> 	popa
  3365 0000168D C3                  <1> 	ret
  3366                              <1> 
  3367                              <1> .test_record:
  3368 0000168E A840                <1> 	test al, ACTFLAG_AUTH_RECORD
  3369 00001690 74F9                <1> 	jz .auth_ok
  3370 00001692 E82100              <1> 	call main_confirm_record_passwd
  3371 00001695 73F4                <1> 	jnc .auth_ok
  3372                              <1> 
  3373                              <1> .auth_failed:
  3374 00001697 F9                  <1> 	stc
  3375 00001698 61                  <1> 	popa
  3376 00001699 C3                  <1> 	ret
  3377                              <1> 
  3378                              <1> 	
  3379                              <1> ;=============================================================================
  3380                              <1> ;main_confirm_root_passwd ---- confirm the root password
  3381                              <1> ;input:
  3382                              <1> ;      none
  3383                              <1> ;output:
  3384                              <1> ;      cf = 0 success
  3385                              <1> ;      cf = 1 failed or cancel
  3386                              <1> ;=============================================================================
  3387                              <1> main_confirm_root_passwd:
  3388 0000169A 60                  <1>         pusha
  3389 0000169B 8B1E[2200]          <1>         mov bx, [ADDR_SBMK_ROOT_PASSWORD]
  3390 0000169F 8B0E[2400]          <1>         mov cx, [ADDR_SBMK_ROOT_PASSWORD+2]
  3391 000016A3 09DB                <1>         or bx, bx
  3392 000016A5 7506                <1>         jnz .have_password
  3393 000016A7 09C9                <1>         or cx, cx
  3394 000016A9 7502                <1>         jnz .have_password
  3395 000016AB EB07                <1>         jmp short .auth_ok
  3396                              <1>         
  3397                              <1> .have_password:                                     
  3398 000016AD 8B36[6C46]          <1>         mov si, [str_idx.root_passwd]               ; check root
  3399 000016B1 E81F00              <1>         call main_confirm_passwd                    ; password
  3400                              <1> .auth_ok:
  3401 000016B4 61                  <1>         popa
  3402 000016B5 C3                  <1>         ret
  3403                              <1> 
  3404                              <1> ;=============================================================================
  3405                              <1> ;main_confirm_record_passwd ---- confirm the record password
  3406                              <1> ;=============================================================================
  3407                              <1> main_confirm_record_passwd:
  3408 000016B6 60                  <1>         pusha
  3409 000016B7 E89800              <1>         call main_get_focus_record_pointer
  3410 000016BA 8B5C0E              <1>         mov bx, [si + struc_bootrecord.password]
  3411 000016BD 8B4C10              <1>         mov cx, [si + struc_bootrecord.password+2]
  3412 000016C0 09DB                <1>         or bx, bx
  3413 000016C2 7506                <1>         jnz .have_password
  3414 000016C4 09C9                <1>         or cx, cx
  3415 000016C6 7502                <1>         jnz .have_password
  3416 000016C8 EB07                <1>         jmp short .auth_ok
  3417                              <1>         
  3418                              <1> .have_password:
  3419 000016CA 8B36[7046]          <1>         mov si, [str_idx.record_passwd]             ; check record
  3420 000016CE E80200              <1>         call main_confirm_passwd                    ; password
  3421                              <1> .auth_ok:
  3422 000016D1 61                  <1>         popa
  3423 000016D2 C3                  <1>         ret
  3424                              <1> 
  3425                              <1> ;=============================================================================
  3426                              <1> ;main_confirm_passwd ---- let user input a password and confirm it.
  3427                              <1> ;input:
  3428                              <1> ;      bx:cx = password
  3429                              <1> ;      ds:si -> message string
  3430                              <1> ;output:
  3431                              <1> ;      cf = 0 success
  3432                              <1> ;      cf = 1 failed or cancel
  3433                              <1> ;=============================================================================
  3434                              <1> main_confirm_passwd:
  3435 000016D3 803E[E332]00        <1>         cmp byte [main_tmp.root_login],0       ; check if root has logined
  3436 000016D8 751F                <1>         jnz .ok
  3437                              <1> 
  3438 000016DA 51                  <1> 	push cx
  3439 000016DB B110                <1> 	mov cl, MAX_PASSWORD_LENGTH
  3440 000016DD E86408              <1>         call input_password
  3441 000016E0 59                  <1> 	pop cx
  3442 000016E1 721F                <1>         jc .cancel
  3443                              <1> 
  3444 000016E3 39C3                <1>         cmp bx, ax
  3445 000016E5 7506                <1>         jne .cmp_root
  3446 000016E7 39D1                <1>         cmp cx, dx
  3447 000016E9 7502                <1>         jne .cmp_root
  3448 000016EB EB0C                <1>         jmp .ok
  3449                              <1>         
  3450                              <1> .cmp_root:
  3451 000016ED 3906[2200]          <1>         cmp [ADDR_SBMK_ROOT_PASSWORD], ax
  3452 000016F1 7508                <1>         jne .failed
  3453 000016F3 3916[2400]          <1>         cmp [ADDR_SBMK_ROOT_PASSWORD+2], dx
  3454 000016F7 7502                <1>         jne .failed
  3455                              <1> .ok:
  3456 000016F9 F8                  <1>         clc
  3457 000016FA C3                  <1>         ret
  3458                              <1>         
  3459                              <1> .failed:
  3460 000016FB 8B36[AA46]          <1>         mov si, [str_idx.wrong_passwd]
  3461 000016FF E81F06              <1>         call error_box
  3462                              <1>         
  3463                              <1> .cancel:
  3464 00001702 F9                  <1>         stc
  3465 00001703 C3                  <1>         ret
  3466                              <1> 
  3467                              <1> ;=============================================================================
  3468                              <1> ; main_show_disk_error ---- show the disk error box.
  3469                              <1> ;=============================================================================
  3470                              <1> main_show_disk_error:
  3471 00001704 8B36[AC46]          <1>         mov si, [str_idx.disk_error]
  3472 00001708 BF[6B3B]            <1>         mov di, main_tmp.dialog_buf
  3473 0000170B 57                  <1>         push di
  3474 0000170C E88410              <1>         call strcpy
  3475 0000170F E88E20              <1> 	call get_last_disk_errno
  3476 00001712 B102                <1>         mov cl, 2
  3477 00001714 E8AC10              <1>         call htoa
  3478 00001717 5E                  <1>         pop si
  3479 00001718 E80606              <1>         call error_box
  3480 0000171B C3                  <1>         ret
  3481                              <1> 
  3482                              <1> 
  3483                              <1> ;=============================================================================
  3484                              <1> ;>>>>>>>>>>>>>>>>>>>>>>>>>> Miscellaneous Functions <<<<<<<<<<<<<<<<<<<<<<<<<<
  3485                              <1> ;=============================================================================
  3486                              <1> 
  3487                              <1> ;=============================================================================
  3488                              <1> ;main_recheck_same_records ---- recheck all records that same as given record
  3489                              <1> ;input:
  3490                              <1> ;      ds:si -> record
  3491                              <1> ;output:
  3492                              <1> ;      cf = 0  success
  3493                              <1> ;      cf = 1  failed
  3494                              <1> ;=============================================================================
  3495                              <1> main_recheck_same_records:
  3496 0000171C 60                  <1>         pusha
  3497 0000171D 8B4402              <1>         mov ax, [si + struc_bootrecord.drive_id]
  3498 00001720 668B5C06            <1>         mov ebx, [si + struc_bootrecord.father_abs_addr]
  3499 00001724 668B540A            <1>         mov edx, [si + struc_bootrecord.abs_addr]
  3500                              <1> 
  3501 00001728 8D36[0002]          <1>         lea si, [ADDR_SBMK_BOOT_RECORDS]
  3502 0000172C B92000              <1>         mov cx, MAX_RECORD_NUM
  3503                              <1> 
  3504                              <1> .loop_check:
  3505 0000172F F60401              <1>         test byte [si + struc_bootrecord.flags], DRVFLAG_DRIVEOK
  3506 00001732 7416                <1>         jz .check_next
  3507 00001734 394402              <1>         cmp [si + struc_bootrecord.drive_id], ax
  3508 00001737 7511                <1>         jne .check_next
  3509 00001739 66395C06            <1>         cmp [si + struc_bootrecord.father_abs_addr], ebx
  3510 0000173D 750B                <1>         jne .check_next
  3511 0000173F 6639540A            <1>         cmp [si + struc_bootrecord.abs_addr], edx
  3512 00001743 7505                <1>         jne .check_next
  3513                              <1> 
  3514 00001745 E84715              <1>         call check_bootrecord
  3515 00001748 7206                <1>         jc .end
  3516                              <1> 
  3517                              <1> .check_next:
  3518 0000174A 83C640              <1>         add si, SIZE_OF_BOOTRECORD
  3519 0000174D E2E0                <1>         loop .loop_check
  3520 0000174F F8                  <1>         clc
  3521                              <1> .end:
  3522 00001750 61                  <1>         popa
  3523 00001751 C3                  <1>         ret
  3524                              <1> 
  3525                              <1> ;=============================================================================
  3526                              <1> ;main_get_focus_record_pointer ---- get current boot record's pointer
  3527                              <1> ;input:
  3528                              <1> ;	none
  3529                              <1> ;output:
  3530                              <1> ;       ds:si -> record pointer
  3531                              <1> ;=============================================================================
  3532                              <1> main_get_focus_record_pointer:
  3533 00001752 31F6                <1>         xor si, si
  3534 00001754 803E[1D44]00        <1>         cmp byte [GOOD_RECORD_NUMBER], 0
  3535 00001759 7409                <1>         jz .end
  3536 0000175B 51                  <1> 	push cx
  3537 0000175C 8A0E[1E44]          <1> 	mov cl, [FOCUS_RECORD]
  3538 00001760 E80200              <1> 	call main_get_record_pointer
  3539 00001763 59                  <1> 	pop cx
  3540                              <1> .end:
  3541 00001764 C3                  <1> 	ret
  3542                              <1> 
  3543                              <1> ;=============================================================================
  3544                              <1> ;main_get_record_pointer ---- get boot record's pointer
  3545                              <1> ;input:
  3546                              <1> ;      cl = record index in good record list
  3547                              <1> ;output:
  3548                              <1> ;      cl = real index in boot_records list
  3549                              <1> ;      ds:si -> record pointer
  3550                              <1> ;=============================================================================
  3551                              <1> main_get_record_pointer:
  3552 00001765 50                  <1>         push ax
  3553 00001766 30ED                <1>         xor ch, ch
  3554 00001768 BE[BC32]            <1>         mov si, main_tmp.good_record_list       ;
  3555 0000176B 01CE                <1>         add si, cx                              ;
  3556 0000176D AC                  <1>         lodsb                                   ;
  3557 0000176E 50                  <1> 	push ax
  3558                              <1> 
  3559 0000176F B140                <1>         mov cl, SIZE_OF_BOOTRECORD              ; get the pointer to
  3560 00001771 F6E1                <1>         mul cl                                  ; the record.
  3561 00001773 BE[0002]            <1>         mov si, ADDR_SBMK_BOOT_RECORDS          ;
  3562 00001776 01C6                <1>         add si, ax                              ;
  3563 00001778 59                  <1> 	pop cx
  3564 00001779 30ED                <1> 	xor ch, ch
  3565 0000177B 58                  <1>         pop ax
  3566 0000177C C3                  <1>         ret
  3567                              <1> 
  3568                              <1> ;=============================================================================
  3569                              <1> ;main_boot_default ---- boot the default record
  3570                              <1> ;=============================================================================
  3571                              <1> main_boot_default:
  3572 0000177D 8A26[2000]          <1>         mov ah, [ADDR_SBMK_DEFAULT_BOOT]
  3573 00001781 BE[BC32]            <1>         mov si, main_tmp.good_record_list
  3574 00001784 0FB60E[1D44]        <1>         movzx cx, [GOOD_RECORD_NUMBER]
  3575 00001789 08C9                <1>         or cl, cl
  3576 0000178B 7408                <1>         jz .no_default
  3577 0000178D FC                  <1>         cld
  3578                              <1> 
  3579                              <1> .loop_search:
  3580 0000178E AC                  <1>         lodsb
  3581 0000178F 38E0                <1>         cmp al, ah
  3582 00001791 7403                <1>         je .found_it
  3583 00001793 E2F9                <1>         loop .loop_search
  3584                              <1>         
  3585                              <1> .no_default:                                ; no default record, do nothing.
  3586 00001795 C3                  <1>         ret
  3587                              <1>         
  3588                              <1> .found_it:
  3589 00001796 50                  <1> 	push ax
  3590 00001797 E82A01              <1> 	call main_hide_auto_hides
  3591 0000179A 58                  <1> 	pop ax
  3592 0000179B 30E4                <1> 	xor ah, ah
  3593 0000179D E80100              <1>         call main_do_boot_record
  3594 000017A0 C3                  <1>         ret
  3595                              <1>         
  3596                              <1> ;=============================================================================
  3597                              <1> ;main_do_boot_record ---- really boot the given record.
  3598                              <1> ;input:
  3599                              <1> ;      ax =  the boot record number.
  3600                              <1> ;=============================================================================
  3601                              <1> main_do_boot_record:
  3602 000017A1 B340                <1>         mov bl, SIZE_OF_BOOTRECORD
  3603 000017A3 F6E3                <1>         mul bl
  3604                              <1> 
  3605 000017A5 BE[0002]            <1>         mov si, ADDR_SBMK_BOOT_RECORDS
  3606 000017A8 01C6                <1>         add si, ax
  3607                              <1> 
  3608 000017AA 8B1C                <1> 	mov bx, [si + struc_bootrecord.flags]
  3609                              <1> 
  3610 000017AC F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  3611 000017B0 7405                <1> 	jz .boot_drv_part
  3612                              <1> 
  3613 000017B2 E85A00              <1> 	call main_do_special_record
  3614 000017B5 EB57                <1> 	jmp short .end
  3615                              <1> 
  3616                              <1> .boot_drv_part:
  3617                              <1> %ifndef DISABLE_CDBOOT
  3618 000017B7 F7C31000            <1> 	test bx, DRVFLAG_ISCDROM
  3619 000017BB 743C                <1> 	jz .normal_boot
  3620                              <1> 
  3621 000017BD 8A5402              <1> 	mov dl, [si + struc_bootrecord.drive_id]
  3622 000017C0 BF[2128]            <1> 	mov di, knl_tmp.disk_buf2
  3623 000017C3 E8B21F              <1> 	call get_cdrom_boot_catalog
  3624 000017C6 723B                <1> 	jc .disk_error
  3625                              <1> 
  3626 000017C8 56                  <1> 	push si
  3627 000017C9 89FE                <1> 	mov si, di
  3628 000017CB BF[2120]            <1> 	mov di, knl_tmp.disk_buf1
  3629 000017CE E82B1B              <1> 	call find_cdboot_catalog
  3630 000017D1 5E                  <1> 	pop si
  3631                              <1> 
  3632 000017D2 09C9                <1> 	or cx, cx
  3633 000017D4 7431                <1> 	jz .no_system
  3634 000017D6 83F901              <1> 	cmp cx, 1
  3635 000017D9 740F                <1> 	je .go_boot_cdrom
  3636                              <1> 
  3637 000017DB 56                  <1> 	push si
  3638 000017DC 89FE                <1> 	mov si, di
  3639 000017DE E86901              <1> 	call main_choose_cdimg
  3640 000017E1 5E                  <1> 	pop si
  3641 000017E2 722A                <1> 	jc .end
  3642                              <1> 
  3643 000017E4 B120                <1> 	mov cl, SIZE_OF_BOOT_CATALOG
  3644 000017E6 F6E1                <1> 	mul cl
  3645                              <1> 
  3646 000017E8 01C7                <1> 	add di, ax
  3647                              <1> 
  3648                              <1> .go_boot_cdrom:
  3649 000017EA 52                  <1> 	push dx
  3650 000017EB 57                  <1> 	push di
  3651 000017EC E8451B              <1>         call preload_keystrokes     ; preload the keystrokes into key buffer.
  3652 000017EF E80104              <1>         call reset_video_mode
  3653 000017F2 5F                  <1> 	pop di
  3654 000017F3 5A                  <1> 	pop dx
  3655 000017F4 E8A61A              <1> 	call boot_cdrom
  3656 000017F7 EB03                <1> 	jmp short .boot_fail
  3657                              <1> 
  3658                              <1> %endif
  3659                              <1> 
  3660                              <1> .normal_boot:
  3661 000017F9 E8E119              <1>         call boot_normal_record
  3662                              <1> 
  3663                              <1> .boot_fail:
  3664 000017FC E825FB              <1> 	call main_init_video
  3665                              <1> 
  3666 000017FF 08C0                <1>         or al, al
  3667 00001801 7404                <1>         jz .no_system
  3668                              <1> 
  3669                              <1> .disk_error:
  3670 00001803 E8FEFE              <1>         call main_show_disk_error
  3671 00001806 C3                  <1>         ret
  3672                              <1> 
  3673                              <1> .no_system:
  3674 00001807 8B36[B246]          <1>         mov si, [str_idx.no_system]
  3675 0000180B E81305              <1>         call error_box
  3676                              <1> 
  3677                              <1> .end:
  3678 0000180E C3                  <1>         ret
  3679                              <1>         
  3680                              <1> 
  3681                              <1> ;=============================================================================
  3682                              <1> ;main_do_special_record ---- execute a special boot record.
  3683                              <1> ;input:
  3684                              <1> ;      si ->  the boot record.
  3685                              <1> ;=============================================================================
  3686                              <1> main_do_special_record:
  3687 0000180F E8E103              <1> 	call reset_video_mode
  3688 00001812 8A4404              <1> 	mov al, [si + struc_bootrecord.type]
  3689                              <1> 
  3690 00001815 3C02                <1> 	cmp al, SPREC_POWEROFF
  3691 00001817 7503                <1> 	jne .chk_rst
  3692 00001819 E81D10              <1> 	call power_off
  3693                              <1> 
  3694                              <1> .chk_rst:
  3695 0000181C 3C03                <1> 	cmp al, SPREC_RESTART
  3696 0000181E 7503                <1> 	jne .chk_quit
  3697 00001820 E83B11              <1> 	call reboot
  3698                              <1> 
  3699                              <1> .chk_quit:
  3700 00001823 3C01                <1> 	cmp al, SPREC_QUIT
  3701 00001825 7502                <1> 	jne .chk_bootprev
  3702                              <1> 
  3703                              <1> %ifdef EMULATE_PROG
  3704                              <1>         mov ax, 0x4c00                          ; exit to dos
  3705                              <1>         int 0x21                                ;
  3706                              <1> %else
  3707 00001827 CD18                <1>         int 0x18                                ; return to BIOS
  3708                              <1> %endif
  3709                              <1> 
  3710                              <1> .chk_bootprev:
  3711 00001829 3C00                <1> 	cmp al, SPREC_BOOTPREV
  3712 0000182B 7503                <1> 	jne .end
  3713 0000182D E8DA00              <1> 	call main_boot_prev_mbr
  3714                              <1> 
  3715                              <1> .end:
  3716 00001830 C3                  <1> 	ret
  3717                              <1> 
  3718                              <1> ;=============================================================================
  3719                              <1> ;main_do_schedule ---- implement the schedule table
  3720                              <1> ;input:
  3721                              <1> ;      none
  3722                              <1> ;output:
  3723                              <1> ;      default_boot set to the scheduled record
  3724                              <1> ;=============================================================================
  3725                              <1> main_do_schedule:
  3726 00001831 60                  <1>         pusha
  3727 00001832 E8FE11              <1>         call get_realtime
  3728 00001835 723A                <1>         jc .end
  3729                              <1> 
  3730 00001837 A3[E632]            <1>         mov [main_tmp.schedule_begin], ax
  3731 0000183A 8916[EA32]          <1>         mov [main_tmp.schedule_day], dx
  3732 0000183E 31C9                <1>         xor cx, cx
  3733 00001840 BE[0002]            <1>         mov si, ADDR_SBMK_BOOT_RECORDS
  3734                              <1> 
  3735                              <1> .loop_check:
  3736 00001843 F7040080            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_SCHEDULED
  3737 00001847 741E                <1>         jz .check_next
  3738                              <1> 
  3739 00001849 E84314              <1>         call check_bootrecord
  3740 0000184C 7219                <1>         jc .check_next
  3741                              <1> 
  3742 0000184E E8F518              <1>         call get_record_schedule
  3743                              <1> 
  3744 00001851 3906[E632]          <1>         cmp [main_tmp.schedule_begin], ax 
  3745 00001855 7210                <1>         jb .check_next
  3746 00001857 391E[E632]          <1>         cmp [main_tmp.schedule_begin], bx
  3747 0000185B 770A                <1>         ja .check_next
  3748                              <1> 
  3749 0000185D 8516[EA32]          <1>         test dx, [main_tmp.schedule_day]
  3750 00001861 7404                <1>         jz .check_next
  3751                              <1> 
  3752 00001863 880E[2000]          <1>         mov [ADDR_SBMK_DEFAULT_BOOT], cl
  3753                              <1> 
  3754                              <1> .check_next:
  3755 00001867 FEC1                <1>         inc cl
  3756 00001869 83C640              <1>         add si, SIZE_OF_BOOTRECORD
  3757 0000186C 80F920              <1>         cmp cl, MAX_RECORD_NUM
  3758 0000186F 72D2                <1>         jb .loop_check
  3759                              <1> 
  3760                              <1> .end:
  3761 00001871 61                  <1>         popa
  3762 00001872 C3                  <1>         ret
  3763                              <1> 
  3764                              <1> ;=============================================================================
  3765                              <1> ;main_save_boot_manager ---- save boot manager to disk.
  3766                              <1> ;input:
  3767                              <1> ;      none
  3768                              <1> ;output:
  3769                              <1> ;      cf = 0 success
  3770                              <1> ;      cf = 1 failed
  3771                              <1> ;=============================================================================
  3772                              <1> main_save_boot_manager:
  3773 00001873 60                  <1> 	pusha
  3774 00001874 06                  <1> 	push es
  3775 00001875 1E                  <1> 	push ds
  3776                              <1> 
  3777                              <1> ; Backup the menus' pos
  3778 00001876 A1[FD43]            <1> 	mov ax, [main_windows_data.boot_menu + struc_window.win_pos]
  3779 00001879 A3[2F00]            <1> 	mov [ADDR_SBMK_BOOT_MENU_POS], ax
  3780 0000187C A1[2844]            <1> 	mov ax, [main_windows_data.main_menu + struc_window.win_pos]
  3781 0000187F A3[3100]            <1> 	mov [ADDR_SBMK_MAIN_MENU_POS], ax
  3782 00001882 A1[5344]            <1> 	mov ax, [main_windows_data.record_menu + struc_window.win_pos]
  3783 00001885 A3[3300]            <1> 	mov [ADDR_SBMK_RECORD_MENU_POS], ax
  3784 00001888 A1[7E44]            <1> 	mov ax, [main_windows_data.sys_menu + struc_window.win_pos]
  3785 0000188B A3[3500]            <1> 	mov [ADDR_SBMK_SYS_MENU_POS], ax
  3786                              <1> 
  3787                              <1> ; ;calculate checksum
  3788                              <1> ; 	push es
  3789                              <1> ; 	pop ds
  3790                              <1> ; 
  3791                              <1> ; 	xor si, si
  3792                              <1> ; 	mov cx, end_of_kernel - start_of_kernel
  3793                              <1> ; 	mov byte [ADDR_SBMK_CHECKSUM], 0
  3794                              <1> ; 	call calc_checksum                      ; calculate the checksum.
  3795                              <1> ; 	neg bl
  3796                              <1> ; 	mov [ADDR_SBMK_CHECKSUM], bl
  3797                              <1> 
  3798 0000188E 8A16[2100]          <1> 	mov dl, [ADDR_SBMK_DRVID]
  3799 00001892 8D36[0400]          <1> 	lea si, [ADDR_SBMK_BLOCK_MAP]
  3800 00001896 B90500              <1> 	mov cx, SBM_SAVE_NBLKS
  3801 00001899 31FF                <1> 	xor di, di
  3802                              <1> 
  3803 0000189B 1F                  <1> 	pop ds
  3804                              <1> 
  3805                              <1> .loop_save_blk:
  3806 0000189C 51                  <1> 	push cx
  3807                              <1> 
  3808 0000189D AC                  <1> 	lodsb
  3809 0000189E 88C1                <1> 	mov cl, al			; number of sectors for this block
  3810 000018A0 66AD                <1> 	lodsd
  3811 000018A2 6689C3              <1> 	mov ebx,eax			; lba address for this block
  3812                              <1>         
  3813 000018A5 B80103              <1> 	mov ax, ( INT13H_WRITE << 8 ) | 1 
  3814                              <1> 
  3815 000018A8 F8                  <1> 	clc
  3816 000018A9 09C9                <1> 	or cx, cx
  3817 000018AB 7413                <1> 	jz .write_end
  3818                              <1> 
  3819                              <1> .loop_write:
  3820 000018AD E8AB1E              <1> 	call disk_access
  3821 000018B0 720E                <1> 	jc .write_end
  3822                              <1>         
  3823 000018B2 81C70002            <1> 	add di, SECTOR_SIZE
  3824 000018B6 6643                <1> 	inc ebx
  3825 000018B8 E2F3                <1> 	loop .loop_write
  3826                              <1> 
  3827 000018BA 59                  <1> 	pop cx
  3828 000018BB E2DF                <1> 	loop .loop_save_blk
  3829                              <1> 
  3830 000018BD F8                  <1> 	clc
  3831 000018BE EB01                <1> 	jmp short .end
  3832                              <1> 
  3833                              <1> .write_end:
  3834 000018C0 59                  <1> 	pop cx
  3835                              <1> 
  3836                              <1> .end:
  3837 000018C1 07                  <1> 	pop es
  3838 000018C2 61                  <1> 	popa
  3839 000018C3 C3                  <1> 	ret
  3840                              <1> 
  3841                              <1> 
  3842                              <1> ;=============================================================================
  3843                              <1> ;main_hide_auto_hides ---- hide all partitions that marked auto hide,
  3844                              <1> ;                          except the focus record.
  3845                              <1> ;input:
  3846                              <1> ;      none
  3847                              <1> ;output:
  3848                              <1> ;      cf = 0 success
  3849                              <1> ;      cf = 1 failed
  3850                              <1> ;=============================================================================
  3851                              <1> main_hide_auto_hides:
  3852 000018C4 0FB60E[1D44]        <1>         movzx cx, byte [GOOD_RECORD_NUMBER]
  3853 000018C9 08C9                <1>         or cl, cl                               ; if no good record then go to
  3854 000018CB 7429                <1>         jz .end_ok                              ; init directly.
  3855                              <1> 
  3856 000018CD 86E9                <1> 	xchg ch, cl
  3857                              <1>         
  3858                              <1> ; hide all auto hide partitions.
  3859                              <1> .loop_hide:
  3860 000018CF 3A0E[1E44]          <1>         cmp cl, [FOCUS_RECORD]                  ; do not hide the focus record.
  3861 000018D3 741B                <1>         je .not_hide
  3862                              <1> 
  3863 000018D5 51                  <1> 	push cx
  3864 000018D6 E88CFE              <1> 	call main_get_record_pointer
  3865 000018D9 59                  <1> 	pop cx
  3866                              <1> 
  3867 000018DA 8B04                <1>         mov ax, [si + struc_bootrecord.flags]
  3868 000018DC A90004              <1>         test ax, INFOFLAG_AUTOHIDE
  3869 000018DF 740F                <1>         jz .not_hide
  3870 000018E1 A90002              <1>         test ax, INFOFLAG_HIDDEN
  3871 000018E4 750A                <1>         jnz .not_hide
  3872                              <1> 
  3873 000018E6 E8B217              <1>         call toggle_record_hidden
  3874 000018E9 720D                <1>         jc .hidden_error
  3875                              <1> 
  3876 000018EB E82EFE              <1>         call main_recheck_same_records
  3877 000018EE 720C                <1>         jc .disk_error
  3878                              <1> 
  3879                              <1> .not_hide:
  3880 000018F0 FEC1                <1>         inc cl
  3881 000018F2 38E9                <1>         cmp cl, ch
  3882 000018F4 72D9                <1>         jb .loop_hide
  3883                              <1>         
  3884                              <1> .end_ok:
  3885 000018F6 F8                  <1>         clc
  3886 000018F7 C3                  <1>         ret
  3887                              <1>         
  3888                              <1> .hidden_error:
  3889 000018F8 09C0                <1>         or ax, ax
  3890 000018FA 7405                <1>         jz .cannot_hide
  3891                              <1> 
  3892                              <1> .disk_error:
  3893 000018FC E805FE              <1>         call main_show_disk_error
  3894 000018FF EB07                <1>         jmp short .end
  3895                              <1> 
  3896                              <1> .cannot_hide:
  3897 00001901 8B36[B046]          <1>         mov si, [str_idx.toggle_hid_failed]
  3898 00001905 E81904              <1>         call error_box
  3899                              <1> .end:
  3900 00001908 F9                  <1>         stc
  3901 00001909 C3                  <1>         ret
  3902                              <1> 
  3903                              <1> ;=============================================================================
  3904                              <1> ; main_boot_prev_mbr ---- boot previous MBR
  3905                              <1> ;=============================================================================
  3906                              <1> main_boot_prev_mbr:
  3907                              <1> ; read partition table
  3908 0000190A 06                  <1>         push es
  3909 0000190B 6631DB              <1>         xor ebx, ebx
  3910 0000190E 8EC3                <1>         mov es, bx
  3911 00001910 8A16[2100]          <1>         mov dl, [ADDR_SBMK_DRVID]
  3912 00001914 BF007C              <1>         mov di, 7C00h
  3913 00001917 B80102              <1>         mov ax, (INT13H_READ << 8) | 0x01
  3914 0000191A E83E1E              <1>         call disk_access
  3915 0000191D 07                  <1>         pop es
  3916 0000191E 7226                <1>         jc .disk_failed
  3917                              <1> 
  3918 00001920 52                  <1>         push dx
  3919 00001921 57                  <1>         push di
  3920 00001922 E80CF2              <1>         call main_ask_save_changes
  3921 00001925 E89CFF              <1>         call main_hide_auto_hides
  3922 00001928 E8C802              <1>         call reset_video_mode
  3923 0000192B 5F                  <1>         pop di
  3924 0000192C 5A                  <1>         pop dx
  3925                              <1> 
  3926 0000192D E8C71E              <1> 	call uninstall_myint13h
  3927                              <1> 
  3928                              <1> ; copy previous mbr to Boot Offset 0x7c00
  3929 00001930 FC                  <1>         cld
  3930 00001931 B9BE01              <1>         mov cx, SIZE_OF_MBR
  3931                              <1> ;        lea si, [ADDR_SBMK_PREVIOUS_MBR]
  3932 00001934 31C0                <1>         xor ax, ax
  3933 00001936 50                  <1>         push ax
  3934 00001937 07                  <1>         pop es
  3935 00001938 F3A4                <1>         rep movsb
  3936                              <1> 
  3937 0000193A 50                  <1>         push ax
  3938 0000193B 1F                  <1>         pop ds
  3939                              <1> 
  3940 0000193C 31ED                <1>         xor bp, bp                          ; might help some boot problems
  3941 0000193E B855AA              <1>         mov ax, BR_GOOD_FLAG                ; boot signature (just in case ...)
  3942 00001941 EA007C0000          <1>         jmp 0:7C00h                         ; jump to the  boot sector
  3943                              <1> 
  3944                              <1> .disk_failed:
  3945 00001946 E8BBFD              <1>         call main_show_disk_error
  3946                              <1> .end:
  3947 00001949 C3                  <1>         ret
  3948                              <1> 
  3949                              <1> 
  3950                              <1> ;==============================================================================
  3951                              <1> ; CD-ROM Boot Stuff
  3952                              <1> ;==============================================================================
  3953                              <1> 
  3954                              <1> %ifndef DISABLE_CDBOOT
  3955                              <1> ;==============================================================================
  3956                              <1> ;main_choose_cdimg ---- let user choose a cdimg to boot
  3957                              <1> ;input ds:si -> buffer to store boot catalogs
  3958                              <1> ;      cl = number of entries
  3959                              <1> ;output cf =0 ok, al = user choice
  3960                              <1> ;       cf =1 cancel
  3961                              <1> ;==============================================================================
  3962                              <1> main_choose_cdimg:
  3963 0000194A 53                  <1> 	push bx
  3964 0000194B 51                  <1> 	push cx
  3965 0000194C 52                  <1> 	push dx
  3966 0000194D 56                  <1> 	push si
  3967                              <1> 
  3968 0000194E 31D2                <1> 	xor dx, dx
  3969 00001950 8936[9819]          <1> 	mov [.catalogs_buf], si
  3970 00001954 8A2E[0646]          <1> 	mov ch, [size.list_box_win_height]
  3971 00001958 BB[2A47]            <1> 	mov bx, str_idx.cdimg_menu_title
  3972                              <1> 
  3973 0000195B BE[6819]            <1> 	mov si, .item_str_proc
  3974 0000195E E84D08              <1> 	call list_box
  3975 00001961 88C8                <1> 	mov al, cl
  3976                              <1> 
  3977 00001963 5E                  <1> 	pop si
  3978 00001964 5A                  <1> 	pop dx
  3979 00001965 59                  <1> 	pop cx
  3980 00001966 5B                  <1> 	pop bx
  3981 00001967 C3                  <1> 	ret
  3982                              <1> 
  3983                              <1> .item_str_proc:
  3984 00001968 8B36[9819]          <1> 	mov si, [.catalogs_buf]
  3985 0000196C BF[6B3B]            <1> 	mov di, main_tmp.dialog_buf
  3986 0000196F 57                  <1> 	push di
  3987 00001970 B82000              <1> 	mov ax, SIZE_OF_BOOT_CATALOG
  3988 00001973 F6E1                <1> 	mul cl
  3989 00001975 01C6                <1> 	add si, ax
  3990                              <1> 
  3991 00001977 89C8                <1> 	mov ax, cx
  3992 00001979 B102                <1> 	mov cl, 2
  3993 0000197B E86E0D              <1> 	call itoa
  3994 0000197E 83C702              <1> 	add di, 2
  3995 00001981 B82E20              <1> 	mov ax, '. '
  3996 00001984 FC                  <1> 	cld
  3997 00001985 AB                  <1> 	stosw
  3998                              <1> 
  3999 00001986 0FB64401            <1> 	movzx ax, [si + struc_boot_catalog.media_type]
  4000                              <1> 
  4001 0000198A D0E0                <1> 	shl al, 1
  4002                              <1> 
  4003 0000198C BE[2C47]            <1> 	mov si, str_idx.cdimg_menu_strings
  4004 0000198F 01C6                <1> 	add si, ax
  4005 00001991 8B34                <1> 	mov si, [si]
  4006 00001993 E8FD0D              <1> 	call strcpy
  4007 00001996 5E                  <1> 	pop si
  4008 00001997 C3                  <1> 	ret
  4009                              <1> 
  4010 00001998 0000                <1> .catalogs_buf dw 0
  4011                              <1> 
  4012                              <1> %endif
  4013                                  %include "ui.asm"
  4014                              <1> ; asmsyntax=nasm
  4015                              <1> ;
  4016                              <1> ; ui.asm
  4017                              <1> ;
  4018                              <1> ; Functions for User Interface
  4019                              <1> ;
  4020                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
  4021                              <1> ;
  4022                              <1> 
  4023                              <1> %define DIRECT_DRAW
  4024                              <1> 
  4025                              <1> %define SCR_BUF_SEG0    0xB800
  4026                              <1> %define SCR_BUF_SEG1    0xB900
  4027                              <1> %define SCR_BUF_SEG2    0xBA00
  4028                              <1> %define SCR_PAGE_SEGS   0x0100
  4029                              <1> 
  4030                              <1> %define SCR_BAK_SEG     0x0900
  4031                              <1> %define BIOS_DATA_SEG   0x0040
  4032                              <1> 
  4033                              <1> %define BIOS_KEYSTAT_OFF 0x0017
  4034                              <1> 
  4035                              <1> %define WINDOW_DEF_ACTION_NUM  (window_def_action_table.end_of_table - window_def_action_table) / SIZE_OF_STRUC_ACTION
  4036                              <1> %define MENUBOX_DEF_ACTION_NUM  (menubox_def_action_table.end_of_table - menubox_def_action_table) / SIZE_OF_STRUC_ACTION
  4037                              <1> %define LISTBOX_ACTION_NUM  (listbox_action_table.end_of_table - listbox_action_table) / SIZE_OF_STRUC_ACTION
  4038                              <1> %define INPUTBOX_ACTION_NUM  (inputbox_action_table.end_of_table - inputbox_action_table) / SIZE_OF_STRUC_ACTION
  4039                              <1>       bits 16
  4040                              <1> 
  4041                              <1> 
  4042                              <1> ;=============================================================================
  4043                              <1> ; <<<<<<<<<<<<<<<<<<< Basic Drawing and Screen functions >>>>>>>>>>>>>>>>>>>>>
  4044                              <1> ;=============================================================================
  4045                              <1> 
  4046                              <1> %if 1
  4047                              <1> ;=============================================================================
  4048                              <1> ;draw_string_hl ---- Draw a zero ending string with highlighted characters 
  4049                              <1> ;                    at special position
  4050                              <1> ;input:
  4051                              <1> ;      bl = attribute for normal characters
  4052                              <1> ;           high 4 bit Background color and low 4 bit Foreground color
  4053                              <1> ;      bh = attribute for hightlight characters
  4054                              <1> ;      dh = start row
  4055                              <1> ;      dl = start column
  4056                              <1> ;      ds:si -> the string to be displayed
  4057                              <1> ;output:
  4058                              <1> ;      none
  4059                              <1> ;=============================================================================
  4060                              <1> draw_string:
  4061                              <1> draw_string_hl:
  4062 0000199A 60                  <1>         pusha
  4063 0000199B 52                  <1>         push dx
  4064 0000199C B90100              <1>         mov cx,1
  4065 0000199F FC                  <1>         cld
  4066                              <1> .start:
  4067                              <1> 
  4068 000019A0 AC                  <1>         lodsb
  4069 000019A1 08C0                <1>         or al,al
  4070 000019A3 7419                <1>         jz .end
  4071                              <1> 
  4072 000019A5 3C0D                <1>         cmp al,0x0d                ; if need Change row
  4073 000019A7 7506                <1>         jne .no_cr
  4074 000019A9 5A                  <1>         pop dx
  4075 000019AA FEC6                <1>         inc dh
  4076 000019AC 52                  <1>         push dx
  4077 000019AD EBF1                <1>         jmp short .start
  4078                              <1> 
  4079                              <1> .no_cr:
  4080 000019AF 3C7E                <1>         cmp al, '~'
  4081 000019B1 7504                <1>         jne .draw_it
  4082 000019B3 86FB                <1>         xchg bh, bl
  4083 000019B5 EB05                <1>         jmp short .next_char
  4084                              <1> 
  4085                              <1> .draw_it:
  4086 000019B7 E80700              <1>         call draw_char
  4087                              <1> 
  4088 000019BA FEC2                <1>         inc dl
  4089                              <1> .next_char:
  4090 000019BC EBE2                <1>         jmp short .start
  4091                              <1> .end:
  4092 000019BE 5A                  <1>         pop dx
  4093 000019BF 61                  <1>         popa
  4094 000019C0 C3                  <1>         ret
  4095                              <1> ;=============================================================================
  4096                              <1> %endif
  4097                              <1> 
  4098                              <1> %if 0
  4099                              <1> ;=============================================================================
  4100                              <1> ;draw_string ---- Draw a zero ending string at special position
  4101                              <1> ;input:
  4102                              <1> ;      bl = high 4 bit Background color and low 4 bit Foreground color
  4103                              <1> ;      dh = start row
  4104                              <1> ;      dl = start column
  4105                              <1> ;      ds:si -> the string to be displayed
  4106                              <1> ;output:
  4107                              <1> ;      none
  4108                              <1> ;=============================================================================
  4109                              <1> draw_string_hl:
  4110                              <1> draw_string:
  4111                              <1>         pusha
  4112                              <1>         push dx
  4113                              <1>         mov cx,1
  4114                              <1>         cld
  4115                              <1> .start:
  4116                              <1> 
  4117                              <1>         lodsb
  4118                              <1>         or al,al
  4119                              <1>         jz .end
  4120                              <1> 
  4121                              <1>         cmp al,0x0d                ; if need Change row
  4122                              <1>         jne .no_cr
  4123                              <1>         pop dx
  4124                              <1>         inc dh
  4125                              <1>         push dx
  4126                              <1>         jmp short .start
  4127                              <1> 
  4128                              <1> .no_cr:
  4129                              <1>         call draw_char
  4130                              <1> 
  4131                              <1>         inc dl
  4132                              <1>         jmp short .start
  4133                              <1> .end:
  4134                              <1>         pop dx
  4135                              <1>         popa
  4136                              <1>         ret
  4137                              <1> ;=============================================================================
  4138                              <1> %endif
  4139                              <1> 
  4140                              <1> ;=============================================================================
  4141                              <1> ;draw_char ---- Draw chars at special position
  4142                              <1> ;input:
  4143                              <1> ;      bl = high 4 bit Background color and low 4 bit Foreground color
  4144                              <1> ;      dh = start row
  4145                              <1> ;      dl = start column
  4146                              <1> ;      al = the char to be displayed
  4147                              <1> ;      cx = repeat times
  4148                              <1> ;output:
  4149                              <1> ;      none
  4150                              <1> ;=============================================================================
  4151                              <1> draw_char:
  4152                              <1> %ifdef DIRECT_DRAW                            ; directly write to video buffer
  4153 000019C1 60                  <1>         pusha
  4154 000019C2 06                  <1>         push es
  4155 000019C3 FC                  <1> 	cld
  4156                              <1> 
  4157 000019C4 88DC                <1>         mov ah, bl
  4158 000019C6 50                  <1>         push ax
  4159                              <1> 
  4160 000019C7 FF36[1B26]          <1> 	push word [ui_screen_bufseg]
  4161 000019CB 07                  <1> 	pop es
  4162                              <1> 
  4163 000019CC A0[1926]            <1>         mov al, [ui_screen_width]
  4164 000019CF F6E6                <1>         mul dh
  4165 000019D1 30F6                <1>         xor dh, dh
  4166 000019D3 01D0                <1>         add ax, dx
  4167 000019D5 D1E0                <1>         shl ax, 1
  4168 000019D7 89C7                <1>         mov di, ax
  4169                              <1> 
  4170 000019D9 58                  <1>         pop ax
  4171 000019DA F3AB                <1>         rep stosw
  4172 000019DC 07                  <1>         pop es
  4173 000019DD 61                  <1>         popa
  4174                              <1> %else
  4175                              <1>         push bx
  4176                              <1>         mov ah,2
  4177                              <1>         mov bh, [ui_screen_page]
  4178                              <1>         int 0x10
  4179                              <1>         mov ah,0x09
  4180                              <1>         int 0x10
  4181                              <1>         pop bx
  4182                              <1> %endif
  4183 000019DE C3                  <1>         ret
  4184                              <1> ;=============================================================================
  4185                              <1> 
  4186                              <1> ;=============================================================================
  4187                              <1> ;clear_screen ---- clear a screen area
  4188                              <1> ;input:
  4189                              <1> ;      ch = row of top left corner
  4190                              <1> ;      cl = column of top left corner
  4191                              <1> ;      dh = row of bottom right corner
  4192                              <1> ;      dl = column of bottom right corner
  4193                              <1> ;      bh = attribute
  4194                              <1> ;output:
  4195                              <1> ;      none
  4196                              <1> ;=============================================================================
  4197                              <1> clear_screen:
  4198 000019DF 60                  <1>         pusha
  4199                              <1> %ifdef DIRECT_DRAW
  4200 000019E0 06                  <1>         push es
  4201 000019E1 FC                  <1> 	cld
  4202                              <1> 
  4203 000019E2 88FC                <1>         mov ah, bh
  4204 000019E4 B020                <1>         mov al, ' '
  4205                              <1> 
  4206 000019E6 FF36[1B26]          <1> 	push word [ui_screen_bufseg]
  4207 000019EA 07                  <1> 	pop es
  4208                              <1> 
  4209 000019EB 28CA                <1>         sub dl, cl
  4210 000019ED FEC2                <1>         inc dl
  4211                              <1> 
  4212                              <1> .loop_fill:
  4213 000019EF 51                  <1>         push cx
  4214 000019F0 50                  <1>         push ax
  4215                              <1> 
  4216 000019F1 A0[1926]            <1>         mov al, [ui_screen_width]
  4217 000019F4 F6E5                <1>         mul ch
  4218 000019F6 30ED                <1>         xor ch, ch
  4219 000019F8 01C8                <1>         add ax, cx
  4220 000019FA D1E0                <1>         shl ax, 1
  4221 000019FC 89C7                <1>         mov di, ax
  4222 000019FE 88D1                <1>         mov cl, dl
  4223                              <1> 
  4224 00001A00 58                  <1>         pop ax
  4225 00001A01 F3AB                <1>         rep stosw
  4226 00001A03 59                  <1>         pop cx
  4227 00001A04 FEC5                <1>         inc ch
  4228 00001A06 38F5                <1>         cmp ch, dh
  4229 00001A08 76E5                <1>         jbe .loop_fill
  4230                              <1> 
  4231 00001A0A 07                  <1>         pop es
  4232                              <1> %else
  4233                              <1>         mov ax, 0x0600
  4234                              <1>         int 0x10
  4235                              <1> %endif
  4236 00001A0B 61                  <1>         popa
  4237 00001A0C C3                  <1>         ret
  4238                              <1> 
  4239                              <1> ;=============================================================================
  4240                              <1> ;read_scrchar ---- read a char from the screen
  4241                              <1> ;input:
  4242                              <1> ;       dh = row
  4243                              <1> ;       dl = column
  4244                              <1> ;output:
  4245                              <1> ;       ax = char with attribute
  4246                              <1> ;=============================================================================
  4247                              <1> read_scrchar:
  4248                              <1> %ifdef DIRECT_DRAW
  4249 00001A0D 1E                  <1>         push ds
  4250 00001A0E 52                  <1>         push dx
  4251 00001A0F 56                  <1>         push si
  4252                              <1> 
  4253 00001A10 A0[1926]            <1>         mov al, [ui_screen_width]
  4254 00001A13 F6E6                <1>         mul dh
  4255 00001A15 30F6                <1>         xor dh, dh
  4256 00001A17 01D0                <1>         add ax, dx
  4257 00001A19 D1E0                <1>         shl ax, 1
  4258 00001A1B 89C6                <1>         mov si, ax
  4259                              <1> 
  4260 00001A1D FF36[1B26]          <1> 	push word [ui_screen_bufseg]
  4261 00001A21 1F                  <1> 	pop ds
  4262                              <1> 
  4263 00001A22 AD                  <1>         lodsw
  4264 00001A23 5E                  <1>         pop si
  4265 00001A24 5A                  <1>         pop dx
  4266 00001A25 1F                  <1>         pop ds
  4267                              <1> %else
  4268                              <1>         push bx
  4269                              <1>         mov bh, [ui_screen_page]
  4270                              <1>         mov ah,0x02
  4271                              <1>         int 0x10
  4272                              <1>         mov ah,0x08
  4273                              <1>         int 0x10
  4274                              <1>         pop bx
  4275                              <1> %endif
  4276 00001A26 C3                  <1>         ret
  4277                              <1> 
  4278                              <1> %if 0
  4279                              <1> ;=============================================================================
  4280                              <1> ;draw_string_tty ---- Draw a string ending by zero ( tty mode )
  4281                              <1> ;input:
  4282                              <1> ;      ds:si -> string
  4283                              <1> ;output:
  4284                              <1> ;      none
  4285                              <1> ;=============================================================================
  4286                              <1> draw_string_tty:
  4287                              <1>         pusha
  4288                              <1>         cld
  4289                              <1> .draw1:
  4290                              <1>         lodsb
  4291                              <1>         or al, al
  4292                              <1>         jz .end
  4293                              <1>         mov bx,7
  4294                              <1>         mov ah,0x0e
  4295                              <1>         int 0x10
  4296                              <1>         jmp short .draw1
  4297                              <1> .end:
  4298                              <1>         popa
  4299                              <1>         ret
  4300                              <1> ;=============================================================================
  4301                              <1> %endif
  4302                              <1> 
  4303                              <1> ;=============================================================================
  4304                              <1> ;draw_window ---- Draw a framed window
  4305                              <1> ;input:
  4306                              <1> ;      ch = row of top left corner
  4307                              <1> ;      cl = column of top left corner
  4308                              <1> ;      dh = row of bottom right corner
  4309                              <1> ;      dl = column of bottom right corner
  4310                              <1> ;      bl = high 4 bit Background color and low 4 bit Foreground color
  4311                              <1> ;      bh = title attribute (define same as bl)
  4312                              <1> ;      ds:si -> title
  4313                              <1> ;output:
  4314                              <1> ;      none
  4315                              <1> ;=============================================================================
  4316                              <1> draw_window:
  4317 00001A27 60                  <1>         pusha
  4318 00001A28 890E[2130]          <1>         mov [ui_tmp.left_col], cx          ;
  4319 00001A2C 8916[2330]          <1>         mov [ui_tmp.right_col], dx         ; save window pos and attribute
  4320 00001A30 891E[2530]          <1>         mov [ui_tmp.frame_attr], bx        ;
  4321                              <1> 
  4322                              <1> ;Clear frame background
  4323 00001A34 86FB                <1>         xchg bh,bl
  4324 00001A36 E8A6FF              <1>         call clear_screen
  4325                              <1> 
  4326 00001A39 87D1                <1>         xchg dx,cx
  4327 00001A3B B90100              <1>         mov cx,1
  4328                              <1> 
  4329                              <1> ;Draw four corners
  4330 00001A3E 8A1E[2530]          <1>         mov bl, [ui_tmp.frame_attr]
  4331 00001A42 803E[4D46]02        <1>         cmp byte [draw_frame_method], 2             ; check draw method.
  4332 00001A47 7204                <1>         jb .draw_top_corner
  4333 00001A49 8A1E[2630]          <1>         mov bl, [ui_tmp.title_attr]
  4334                              <1> .draw_top_corner:
  4335 00001A4D A0[4946]            <1>         mov al, [frame_char.tl_corner]
  4336 00001A50 E86EFF              <1>         call draw_char
  4337                              <1> 
  4338 00001A53 8A16[2330]          <1>         mov dl, [ui_tmp.right_col]
  4339 00001A57 A0[4A46]            <1>         mov al, [frame_char.tr_corner]
  4340 00001A5A E864FF              <1>         call draw_char
  4341                              <1> 
  4342 00001A5D 8A1E[2530]          <1>         mov bl, [ui_tmp.frame_attr]
  4343 00001A61 8A36[2430]          <1>         mov dh, [ui_tmp.bottom_row]
  4344 00001A65 A0[4C46]            <1>         mov al, [frame_char.br_corner]
  4345 00001A68 E856FF              <1>         call draw_char
  4346                              <1>   
  4347 00001A6B 8A16[2130]          <1>         mov dl, [ui_tmp.left_col]
  4348 00001A6F A0[4B46]            <1>         mov al, [frame_char.bl_corner]
  4349 00001A72 E84CFF              <1>         call draw_char
  4350                              <1> 
  4351                              <1> ;Draw bottom horizontal line
  4352 00001A75 FEC2                <1>         inc dl
  4353 00001A77 8A0E[2330]          <1>         mov cl, [ui_tmp.right_col]
  4354 00001A7B 28D1                <1>         sub cl, dl
  4355 00001A7D A0[4646]            <1>         mov al, [frame_char.bottom]
  4356 00001A80 E83EFF              <1>         call draw_char
  4357                              <1> 
  4358                              <1> ;Draw top horizontal line
  4359 00001A83 8A1E[2530]          <1>         mov bl, [ui_tmp.frame_attr]
  4360 00001A87 803E[4D46]01        <1>         cmp byte [draw_frame_method], 1             ; check draw method.
  4361 00001A8C 7204                <1>         jb .draw_top_line
  4362 00001A8E 8A1E[2630]          <1>         mov bl, [ui_tmp.title_attr]
  4363                              <1> .draw_top_line:
  4364 00001A92 8A36[2230]          <1>         mov dh, [ui_tmp.top_row]
  4365 00001A96 A0[4546]            <1>         mov al, [frame_char.top]
  4366 00001A99 E825FF              <1>         call draw_char
  4367                              <1> 
  4368                              <1> ;Draw title
  4369 00001A9C E89B0C              <1>         call strlen
  4370 00001A9F 09C9                <1>         or cx,cx
  4371 00001AA1 741E                <1>         jz .no_title
  4372                              <1> 
  4373 00001AA3 A0[2330]            <1>         mov al, [ui_tmp.right_col]
  4374 00001AA6 2A06[2130]          <1>         sub al, [ui_tmp.left_col]
  4375 00001AAA 28C8                <1>         sub al, cl
  4376 00001AAC FEC0                <1>         inc al
  4377 00001AAE D0E8                <1>         shr al,1
  4378 00001AB0 8A16[2130]          <1>         mov dl, [ui_tmp.left_col]
  4379 00001AB4 00C2                <1>         add dl,al
  4380 00001AB6 8A36[2230]          <1>         mov dh, [ui_tmp.top_row]
  4381                              <1> 
  4382 00001ABA 8A1E[2630]          <1>         mov bl, [ui_tmp.title_attr]
  4383 00001ABE E8D9FE              <1>         call draw_string
  4384                              <1> 
  4385                              <1> .no_title:
  4386                              <1> 
  4387                              <1> ;Draw vertical line
  4388 00001AC1 8A1E[2530]          <1>         mov bl, [ui_tmp.frame_attr]
  4389 00001AC5 8A36[2230]          <1>         mov dh, [ui_tmp.top_row]
  4390 00001AC9 FEC6                <1>         inc dh
  4391                              <1> 
  4392 00001ACB B90100              <1>         mov cx,1
  4393                              <1> 
  4394                              <1> .draw_vert_line:
  4395 00001ACE A0[4746]            <1>         mov al, [frame_char.left]
  4396 00001AD1 8A16[2130]          <1>         mov dl, [ui_tmp.left_col]
  4397 00001AD5 E8E9FE              <1>         call draw_char
  4398 00001AD8 A0[4846]            <1>         mov al, [frame_char.right]
  4399 00001ADB 8A16[2330]          <1>         mov dl, [ui_tmp.right_col]
  4400 00001ADF E8DFFE              <1>         call draw_char
  4401                              <1> 
  4402 00001AE2 FEC6                <1>         inc dh
  4403 00001AE4 3A36[2430]          <1>         cmp dh, [ui_tmp.bottom_row]
  4404 00001AE8 72E4                <1>         jb .draw_vert_line
  4405                              <1> 
  4406                              <1> ;Draw shadow
  4407 00001AEA B308                <1>         mov bl, 0x08
  4408 00001AEC 8A2E[2430]          <1>         mov ch, [ui_tmp.bottom_row]
  4409 00001AF0 8A0E[2130]          <1>         mov cl, [ui_tmp.left_col]
  4410 00001AF4 FEC5                <1>         inc ch
  4411 00001AF6 80C102              <1> 	add cl, 2
  4412 00001AF9 8A36[2430]          <1>         mov dh, [ui_tmp.bottom_row]
  4413 00001AFD 8A16[2330]          <1>         mov dl, [ui_tmp.right_col]
  4414 00001B01 FEC6                <1>         inc dh
  4415 00001B03 E81400              <1>         call draw_shadow
  4416 00001B06 8A2E[2230]          <1>         mov ch, [ui_tmp.top_row]
  4417 00001B0A 8A0E[2330]          <1>         mov cl, [ui_tmp.right_col]
  4418 00001B0E FEC5                <1>         inc ch
  4419 00001B10 FEC1                <1>         inc cl
  4420 00001B12 80C202              <1> 	add dl, 2
  4421 00001B15 E80200              <1>         call draw_shadow
  4422                              <1> 
  4423 00001B18 61                  <1>         popa
  4424 00001B19 C3                  <1>         ret
  4425                              <1> ;=============================================================================
  4426                              <1> 
  4427                              <1> ;=============================================================================
  4428                              <1> ;draw_shadow ---- Draw shadow block
  4429                              <1> ;input:
  4430                              <1> ;      ch = row of top left corner
  4431                              <1> ;      cl = column of top left corner
  4432                              <1> ;      dh = row of bottom right corner
  4433                              <1> ;      dl = column of bottom right corner
  4434                              <1> ;      bl = high 4 bit Background color and low 4 bit Foreground color
  4435                              <1> ;output:
  4436                              <1> ;      none
  4437                              <1> ;=============================================================================
  4438                              <1> draw_shadow:
  4439 00001B1A 60                  <1>         pusha
  4440                              <1> .loop_row:
  4441 00001B1B 52                  <1>         push dx
  4442                              <1> .loop_col:
  4443 00001B1C 51                  <1>         push cx
  4444 00001B1D B90100              <1>         mov cx,1
  4445 00001B20 E8EAFE              <1>         call read_scrchar
  4446 00001B23 E89BFE              <1>         call draw_char
  4447 00001B26 59                  <1>         pop cx
  4448 00001B27 FECA                <1>         dec dl
  4449 00001B29 38D1                <1>         cmp cl, dl
  4450 00001B2B 76EF                <1>         jbe .loop_col
  4451 00001B2D 5A                  <1>         pop dx
  4452 00001B2E FECE                <1>         dec dh
  4453 00001B30 38F5                <1>         cmp ch, dh
  4454 00001B32 76E7                <1>         jbe .loop_row
  4455                              <1> 
  4456 00001B34 61                  <1>         popa
  4457 00001B35 C3                  <1>         ret
  4458                              <1> ;=============================================================================
  4459                              <1> 
  4460                              <1> 
  4461                              <1> ;=============================================================================
  4462                              <1> ;set_video_mode ---- Set the Alphabet Video Mode
  4463                              <1> ;input:
  4464                              <1> ;      al = 0 , set screen resolution to 90x25,
  4465                              <1> ;           otherwise set to 80x25
  4466                              <1> ;      bl = character bit size ( 8 or 9 )
  4467                              <1> ;      cx = fonts number
  4468                              <1> ;      es:bp -> fonts data
  4469                              <1> ;output:
  4470                              <1> ;      none
  4471                              <1> ;=============================================================================
  4472                              <1> BIOS_CRT_COLS        equ 0x4A
  4473                              <1> BIOS_ADDR_6845       equ 0x63
  4474                              <1> 
  4475                              <1> set_video_mode:
  4476 00001B36 06                  <1>         push es
  4477 00001B37 53                  <1>         push bx
  4478 00001B38 50                  <1>         push ax
  4479                              <1> 
  4480 00001B39 E8B700              <1>         call reset_video_mode
  4481                              <1> 
  4482                              <1> ;Establish CRTC vertical timing and cursor position in character matrix
  4483                              <1> ;and set user fonts table
  4484 00001B3C 09C9                <1>         or cx, cx
  4485 00001B3E 741D                <1>         jz .set_res                          ; no font data
  4486 00001B40 09ED                <1>         or bp, bp
  4487 00001B42 7419                <1>         jz .set_res                          ; no font data
  4488                              <1>         
  4489                              <1> .loop_set_fonts:                             ; set user defined chars
  4490 00001B44 51                  <1>         push cx
  4491 00001B45 31C9                <1>         xor cx,cx
  4492 00001B47 FEC1                <1>         inc cl
  4493 00001B49 260FB65600          <1>         movzx dx, byte [es:bp]
  4494 00001B4E 45                  <1>         inc bp
  4495 00001B4F B80011              <1>         mov ax,0x1100
  4496 00001B52 BB0010              <1>         mov bx,0x1000
  4497 00001B55 CD10                <1>         int 0x10
  4498 00001B57 59                  <1>         pop cx
  4499 00001B58 83C510              <1>         add bp, 16
  4500 00001B5B E2E7                <1>         loop .loop_set_fonts
  4501                              <1> 
  4502                              <1> .set_res:
  4503 00001B5D C606[1926]50        <1>         mov byte [ui_screen_width], 80
  4504 00001B62 C606[1A26]19        <1>         mov byte [ui_screen_height], 25
  4505                              <1> 
  4506 00001B67 B84000              <1>         mov ax,0x40
  4507 00001B6A 8EC0                <1>         mov es,ax
  4508 00001B6C 58                  <1>         pop ax
  4509                              <1> 
  4510 00001B6D 08C0                <1>         or al,al
  4511 00001B6F 7540                <1>         jnz .skip_res_set
  4512                              <1> 
  4513 00001B71 268B166300          <1>         mov dx,[es:BIOS_ADDR_6845]                   ; CRTC I/O port
  4514                              <1> 
  4515                              <1> ;Enable I/O writes to CRTC registers
  4516 00001B76 B011                <1>         mov al,0x11
  4517 00001B78 EE                  <1>         out dx,al
  4518 00001B79 42                  <1>         inc dx
  4519 00001B7A EC                  <1>         in al,dx
  4520 00001B7B 4A                  <1>         dec dx
  4521 00001B7C 88C4                <1>         mov ah,al
  4522 00001B7E B011                <1>         mov al,0x11
  4523 00001B80 50                  <1>         push ax
  4524 00001B81 80E47F              <1>         and ah,01111111b
  4525 00001B84 EF                  <1>         out dx,ax
  4526                              <1> 
  4527                              <1> ;Establish CRTC horizontal timing
  4528 00001B85 8D36[0B26]          <1>         lea si, [ui_VideoHorizParams]
  4529                              <1> 
  4530 00001B89 B90700              <1>         mov cx,7
  4531                              <1>         
  4532 00001B8C FC                  <1>         cld
  4533                              <1> .set_CRTC:
  4534 00001B8D AD                  <1>         lodsw
  4535 00001B8E EF                  <1>         out dx,ax
  4536 00001B8F E2FC                <1>         loop .set_CRTC
  4537                              <1> 
  4538                              <1> ;write-protect CRTC registers
  4539 00001B91 58                  <1>         pop ax
  4540 00001B92 EF                  <1>         out dx,ax
  4541                              <1> 
  4542                              <1> ;Program the Sequencer and Attribute Controller for 9 dots per character
  4543                              <1>         
  4544 00001B93 BAC403              <1>         mov dx, 0x3c4
  4545 00001B96 B80001              <1>         mov ax, 0x0100
  4546 00001B99 FA                  <1>         cli
  4547 00001B9A EF                  <1>         out dx,ax
  4548                              <1> 
  4549 00001B9B B80101              <1>         mov ax,0x0101
  4550 00001B9E EF                  <1>         out dx,ax
  4551 00001B9F B80003              <1>         mov ax,0x0300
  4552 00001BA2 EF                  <1>         out dx,ax
  4553 00001BA3 FB                  <1>         sti
  4554                              <1> 
  4555 00001BA4 BB1300              <1>         mov bx,0x0013
  4556 00001BA7 B80010              <1>         mov ax,0x1000
  4557 00001BAA CD10                <1>         int 0x10
  4558                              <1> 
  4559 00001BAC C606[1926]5A        <1>         mov byte [ui_screen_width], 90
  4560                              <1> .skip_res_set:
  4561                              <1> 
  4562                              <1> ;Program the Attribute Controller for 8- or 9-bit character codes
  4563 00001BB1 B80010              <1>         mov ax,0x1000
  4564 00001BB4 BB120F              <1>         mov bx,0x0f12
  4565 00001BB7 5A                  <1>         pop dx
  4566 00001BB8 80FA08              <1>         cmp dl,8
  4567 00001BBB 7402                <1>         je .svm01
  4568 00001BBD B707                <1>         mov bh,7
  4569                              <1> .svm01:
  4570 00001BBF CD10                <1>         int 0x10
  4571                              <1> 
  4572                              <1> ;Update video BIOS data area
  4573 00001BC1 A0[1926]            <1>         mov al,[ui_screen_width]
  4574 00001BC4 26A24A00            <1>         mov [es:BIOS_CRT_COLS],al
  4575                              <1> 
  4576                              <1> ;Set background highlight attribute
  4577 00001BC8 07                  <1>         pop es
  4578 00001BC9 B80310              <1>         mov ax,0x1003
  4579 00001BCC 30DB                <1>         xor bl,bl
  4580 00001BCE CD10                <1>         int 0x10
  4581 00001BD0 E80C00              <1>         call hide_cursor
  4582                              <1> 
  4583 00001BD3 C3                  <1>         ret
  4584                              <1> ;=============================================================================
  4585                              <1> 
  4586                              <1> ;=============================================================================
  4587                              <1> ;set_cursor ---- move the cursor
  4588                              <1> ;input:
  4589                              <1> ;       dh = row
  4590                              <1> ;       dl = column
  4591                              <1> ;=============================================================================
  4592                              <1> set_cursor:
  4593 00001BD4 60                  <1> 	pusha
  4594 00001BD5 8A3E[1D26]          <1>         mov bh, [ui_screen_page]
  4595 00001BD9 B402                <1>         mov ah, 0x02
  4596 00001BDB CD10                <1>         int 0x10
  4597 00001BDD 61                  <1> 	popa
  4598 00001BDE C3                  <1>         ret
  4599                              <1> 
  4600                              <1> ;=============================================================================
  4601                              <1> ;hide_cursor ---- Hide the cursor
  4602                              <1> ;input:
  4603                              <1> ;      none
  4604                              <1> ;output:
  4605                              <1> ;      none
  4606                              <1> ;=============================================================================
  4607                              <1> hide_cursor:
  4608 00001BDF 60                  <1>         pusha
  4609 00001BE0 B401                <1>         mov ah,1
  4610 00001BE2 B9006F              <1>         mov cx,0x6f00
  4611 00001BE5 CD10                <1>         int 0x10
  4612 00001BE7 61                  <1>         popa
  4613 00001BE8 C3                  <1>         ret
  4614                              <1> ;=============================================================================
  4615                              <1> 
  4616                              <1> ;=============================================================================
  4617                              <1> ;show_cursor ---- Show the cursor
  4618                              <1> ;input:
  4619                              <1> ;      none
  4620                              <1> ;output:
  4621                              <1> ;      none
  4622                              <1> ;=============================================================================
  4623                              <1> show_cursor:
  4624 00001BE9 60                  <1>         pusha
  4625 00001BEA B401                <1>         mov ah,1
  4626 00001BEC B90F0E              <1>         mov cx,0x0e0f
  4627 00001BEF CD10                <1>         int 0x10
  4628 00001BF1 61                  <1>         popa
  4629 00001BF2 C3                  <1>         ret
  4630                              <1> ;=============================================================================
  4631                              <1> 
  4632                              <1> ;=============================================================================
  4633                              <1> ;reset_video_mode ---- Reset the VideoMode
  4634                              <1> ;input:
  4635                              <1> ;      none
  4636                              <1> ;output:
  4637                              <1> ;      none
  4638                              <1> ;=============================================================================
  4639                              <1> reset_video_mode
  4640 00001BF3 60                  <1>         pusha
  4641 00001BF4 B80300              <1>         mov ax,3
  4642 00001BF7 CD10                <1>         int 0x10
  4643 00001BF9 E8EDFF              <1>         call show_cursor
  4644 00001BFC 61                  <1>         popa
  4645 00001BFD C3                  <1>         ret
  4646                              <1> ;=============================================================================
  4647                              <1> 
  4648                              <1> 
  4649                              <1> ;=============================================================================
  4650                              <1> ;draw_icon ---- Draw a icon at special position
  4651                              <1> ;input:
  4652                              <1> ;      dh = start row
  4653                              <1> ;      dl = start column
  4654                              <1> ;      ch = number of row
  4655                              <1> ;      cl = number of column
  4656                              <1> ;      ds:si -> icon data , which is a two dim word array, each elements
  4657                              <1> ;               indicates a char. high byte is the attribute, low byte is
  4658                              <1> ;               is the char code.
  4659                              <1> ;output:
  4660                              <1> ;      none
  4661                              <1> ;=============================================================================
  4662                              <1> draw_icon:
  4663 00001BFE 09F6                <1>         or si, si
  4664 00001C00 7422                <1>         jz .end
  4665 00001C02 09C9                <1>         or cx, cx
  4666 00001C04 741E                <1>         jz .end
  4667                              <1>         
  4668 00001C06 60                  <1>         pusha
  4669 00001C07 FC                  <1>         cld
  4670                              <1> .loop_row:
  4671 00001C08 52                  <1>         push dx
  4672 00001C09 51                  <1>         push cx
  4673                              <1> .loop_col:
  4674 00001C0A 51                  <1>         push cx
  4675 00001C0B B90100              <1>         mov cx,1
  4676 00001C0E AD                  <1>         lodsw
  4677 00001C0F 86E3                <1>         xchg ah,bl
  4678 00001C11 E8ADFD              <1>         call draw_char
  4679                              <1>         
  4680 00001C14 59                  <1>         pop cx
  4681 00001C15 FEC2                <1>         inc dl
  4682 00001C17 FEC9                <1>         dec cl
  4683 00001C19 75EF                <1>         jnz .loop_col
  4684                              <1>         
  4685 00001C1B 59                  <1>         pop cx
  4686 00001C1C 5A                  <1>         pop dx
  4687 00001C1D FEC6                <1>         inc dh
  4688 00001C1F FECD                <1>         dec ch
  4689 00001C21 75E5                <1>         jnz .loop_row
  4690                              <1> 
  4691 00001C23 61                  <1>         popa
  4692                              <1> .end:
  4693 00001C24 C3                  <1>         ret
  4694                              <1> ;=============================================================================
  4695                              <1> 
  4696                              <1> ;=============================================================================
  4697                              <1> ;draw_background ---- Draw the background using specified icon
  4698                              <1> ;input:
  4699                              <1> ;      bh = background color when no icon
  4700                              <1> ;      cx = icon size (ch = row, cl = col)
  4701                              <1> ;      ds:si -> icon data , which is a two dim word array, each elements
  4702                              <1> ;               indicates a char. high byte is the attribute, low byte is
  4703                              <1> ;               is the char code.
  4704                              <1> ;output:
  4705                              <1> ;      none
  4706                              <1> ;=============================================================================
  4707                              <1> draw_background:
  4708 00001C25 60                  <1>         pusha
  4709 00001C26 09F6                <1>         or si,si
  4710 00001C28 7513                <1>         jnz .normal_bg
  4711                              <1> 
  4712                              <1> ;no icon. clear background.
  4713 00001C2A 31C9                <1>         xor cx,cx
  4714 00001C2C 8A36[1A26]          <1>         mov dh,[ui_screen_height]
  4715 00001C30 8A16[1926]          <1>         mov dl,[ui_screen_width]
  4716 00001C34 FECE                <1>         dec dh
  4717 00001C36 FECA                <1>         dec dl
  4718 00001C38 E8A4FD              <1>         call clear_screen
  4719 00001C3B 61                  <1>         popa
  4720 00001C3C C3                  <1>         ret
  4721                              <1> 
  4722                              <1> .normal_bg:
  4723 00001C3D 31D2                <1>         xor dx,dx
  4724                              <1> 
  4725                              <1> .loop_row:
  4726 00001C3F 52                  <1>         push dx
  4727                              <1> .loop_col:
  4728 00001C40 E8BBFF              <1>         call draw_icon
  4729 00001C43 00CA                <1>         add dl, cl
  4730 00001C45 3A16[1926]          <1>         cmp dl, [ui_screen_width]
  4731 00001C49 72F5                <1>         jb .loop_col
  4732 00001C4B 5A                  <1>         pop dx
  4733 00001C4C 00EE                <1>         add dh, ch
  4734 00001C4E 3A36[1A26]          <1>         cmp dh, [ui_screen_height]
  4735 00001C52 72EB                <1>         jb .loop_row
  4736 00001C54 61                  <1>         popa
  4737 00001C55 C3                  <1>         ret
  4738                              <1> ;=============================================================================
  4739                              <1> 
  4740                              <1> ;=============================================================================
  4741                              <1> ;turnon_scrolllock ---- turn on the scroll lock key
  4742                              <1> ;input: none
  4743                              <1> ;output: none
  4744                              <1> ;=============================================================================
  4745                              <1> turnon_scrolllock:
  4746 00001C56 60                  <1>         pusha
  4747 00001C57 06                  <1>         push es
  4748 00001C58 6A40                <1>         push word BIOS_DATA_SEG
  4749 00001C5A 07                  <1> 	pop es
  4750 00001C5B 26800E170010        <1>         or byte [es: BIOS_KEYSTAT_OFF], kbScrollMask
  4751 00001C61 07                  <1>         pop es
  4752 00001C62 61                  <1>         popa
  4753 00001C63 C3                  <1>         ret
  4754                              <1> 
  4755                              <1> ;=============================================================================
  4756                              <1> ;turnoff_scrolllock ---- turn off the scroll lock key
  4757                              <1> ;input: none
  4758                              <1> ;output: none
  4759                              <1> ;=============================================================================
  4760                              <1> turnoff_scrolllock:
  4761 00001C64 60                  <1>         pusha
  4762 00001C65 06                  <1>         push es
  4763 00001C66 6A40                <1>         push word BIOS_DATA_SEG
  4764 00001C68 07                  <1> 	pop es
  4765 00001C69 2680261700EF        <1>         and byte [es: BIOS_KEYSTAT_OFF], ~ kbScrollMask
  4766 00001C6F 07                  <1>         pop es
  4767 00001C70 61                  <1>         popa
  4768 00001C71 C3                  <1>         ret
  4769                              <1> 
  4770                              <1> ;=============================================================================
  4771                              <1> ;lock_screen ---- lock the screen, any output will be stored in SCR_BAK_SEG
  4772                              <1> ;=============================================================================
  4773                              <1> lock_screen:
  4774 00001C72 60                  <1> 	pusha 
  4775 00001C73 803E[1E26]00        <1> 	cmp byte [ui_screen_lock], 0
  4776 00001C78 7518                <1> 	jnz .no_swap_page
  4777                              <1> 
  4778 00001C7A A0[1D26]            <1>         mov al, [ui_screen_page]
  4779 00001C7D 3402                <1>         xor al, 0x02
  4780 00001C7F C706[1B26]00B8      <1>         mov word [ui_screen_bufseg], SCR_BUF_SEG0
  4781 00001C85 08C0                <1>         or al, al
  4782 00001C87 7406                <1>         jz .set_seg0
  4783 00001C89 C706[1B26]00BA      <1>         mov word [ui_screen_bufseg], SCR_BUF_SEG2
  4784                              <1> .set_seg0:
  4785 00001C8F A2[1D26]            <1>         mov [ui_screen_page], al
  4786                              <1> 
  4787                              <1> .no_swap_page:
  4788 00001C92 FE06[1E26]          <1> 	inc byte [ui_screen_lock]
  4789 00001C96 61                  <1> 	popa
  4790 00001C97 C3                  <1>         ret
  4791                              <1> 
  4792                              <1> ;=============================================================================
  4793                              <1> ;unlock_screen ---- unlock the screen, copy SCR_BAK_SEG to SCR_BUF_SEG
  4794                              <1> ;=============================================================================
  4795                              <1> unlock_screen:
  4796 00001C98 60                  <1> 	pusha
  4797 00001C99 FE0E[1E26]          <1> 	dec byte [ui_screen_lock]
  4798 00001C9D 7507                <1> 	jnz .no_swap_page
  4799                              <1> 
  4800 00001C9F B405                <1>         mov ah, 0x05
  4801 00001CA1 A0[1D26]            <1>         mov al, [ui_screen_page]
  4802 00001CA4 CD10                <1>         int 0x10
  4803                              <1> .no_swap_page:
  4804 00001CA6 61                  <1> 	popa
  4805 00001CA7 C3                  <1>         ret
  4806                              <1> 
  4807                              <1> 
  4808                              <1> ;=============================================================================
  4809                              <1> ;<<<<<<<<<<<<<<<<<<<<<<<<< Standard Dialog functions >>>>>>>>>>>>>>>>>>>>>>>>>
  4810                              <1> ;=============================================================================
  4811                              <1> 
  4812                              <1> ;=============================================================================
  4813                              <1> ; msgbox_draw_body_proc ---- draw body proc of message box
  4814                              <1> ; input:
  4815                              <1> ;	ds:si -> the window
  4816                              <1> ; output:
  4817                              <1> ;	none
  4818                              <1> ;=============================================================================
  4819                              <1> msgbox_draw_body_proc:
  4820 00001CA8 60                  <1> 	pusha
  4821 00001CA9 89F7                <1> 	mov di, si
  4822 00001CAB 8B5C1C              <1> 	mov bx, [si + struc_message_box.message_attr]
  4823 00001CAE BA0302              <1> 	mov dx, 0x0203
  4824 00001CB1 8B741A              <1> 	mov si, [si + struc_message_box.message]
  4825 00001CB4 E8BB05              <1> 	call window_draw_string
  4826 00001CB7 61                  <1> 	popa
  4827 00001CB8 C3                  <1> 	ret
  4828                              <1> 
  4829                              <1> ;=============================================================================
  4830                              <1> ; msgbox_default_event_handle ---- default event handle for message box
  4831                              <1> ; input:
  4832                              <1> ;	ax    -> event
  4833                              <1> ;	ds:si -> the window
  4834                              <1> ; output:
  4835                              <1> ;	none
  4836                              <1> ;=============================================================================
  4837                              <1> msgbox_default_event_handle:
  4838 00001CB9 E8B507              <1> 	call window_default_event_handle
  4839 00001CBC 730D                <1> 	jnc .end
  4840                              <1> 
  4841 00001CBE 80FCF0              <1> 	cmp ah, EVTCODE_COMMAND
  4842 00001CC1 7202                <1> 	jb .exit
  4843                              <1> 
  4844 00001CC3 F9                  <1> 	stc
  4845 00001CC4 C3                  <1> 	ret
  4846                              <1> 
  4847                              <1> .exit:
  4848 00001CC5 89441E              <1> 	mov [si + struc_message_box.pressed_key], ax
  4849 00001CC8 E82007              <1> 	call window_close
  4850                              <1> .end:
  4851 00001CCB F8                  <1> 	clc
  4852 00001CCC C3                  <1> 	ret
  4853                              <1> 
  4854                              <1> ;=============================================================================
  4855                              <1> ; msgbox_prepare ---- prepare a message box
  4856                              <1> ; input:
  4857                              <1> ;	al    =  message attribute
  4858                              <1> ;	bx    =  window attribute
  4859                              <1> ;	ds:dx -> 2nd level pointer to title
  4860                              <1> ;	ds:si -> message
  4861                              <1> ;	ds:di -> pointer to the struc_message_box
  4862                              <1> ; output:
  4863                              <1> ;	none
  4864                              <1> ;=============================================================================
  4865                              <1> msgbox_prepare:
  4866 00001CCD 60                  <1> 	pusha
  4867 00001CCE B92000              <1> 	mov cx, SIZE_OF_STRUC_MESSAGE_BOX
  4868 00001CD1 E8820E              <1> 	call clear_memory
  4869                              <1> 
  4870 00001CD4 89751A              <1> 	mov [di + struc_message_box.message], si
  4871 00001CD7 89451C              <1> 	mov [di + struc_message_box.message_attr], ax
  4872 00001CDA 895D04              <1> 	mov [di + struc_window.win_attr], bx
  4873 00001CDD 895502              <1> 	mov [di + struc_window.title], dx
  4874                              <1> 
  4875 00001CE0 E8230B              <1> 	call count_lines
  4876                              <1> 
  4877 00001CE3 020E[0346]          <1> 	add cl, [size.box_width]
  4878 00001CE7 022E[0446]          <1> 	add ch, [size.box_height]
  4879 00001CEB 894D08              <1> 	mov [di + struc_window.win_size], cx
  4880 00001CEE 87F7                <1> 	xchg si, di
  4881 00001CF0 E86907              <1> 	call window_center_window
  4882                              <1> 
  4883 00001CF3 C60406              <1> 	mov byte [si], WINFLAG_FRAMED | WINFLAG_MODAL
  4884                              <1> 
  4885 00001CF6 C74414[B91C]        <1> 	mov word [si + struc_window.default_event_handle], msgbox_default_event_handle
  4886 00001CFB C74416[7D24]        <1> 	mov word [si + struc_window.event_handle], window_event_handle
  4887 00001D00 C74418[A81C]        <1> 	mov word [si + struc_window.draw_body_proc], msgbox_draw_body_proc
  4888 00001D05 61                  <1> 	popa
  4889 00001D06 C3                  <1> 	ret
  4890                              <1> 
  4891                              <1> 
  4892                              <1> ;=============================================================================
  4893                              <1> ;message_box ---- Show a message box
  4894                              <1> ;input:
  4895                              <1> ;	al = message attribute
  4896                              <1> ;	bx = window attribute
  4897                              <1> ;	ds:dx -> 2nd level pointer to title
  4898                              <1> ;	ds:si -> message
  4899                              <1> ;output:
  4900                              <1> ;	ax = user pressed key
  4901                              <1> ;=============================================================================
  4902                              <1> message_box:
  4903 00001D07 56                  <1> 	push si
  4904 00001D08 57                  <1> 	push di
  4905 00001D09 BF[4530]            <1> 	mov di, ui_tmp.tmp_msgbox
  4906 00001D0C 87F7                <1> 	xchg si, di
  4907 00001D0E E84708              <1> 	call winlist_remove
  4908 00001D11 87F7                <1> 	xchg si, di
  4909 00001D13 E8B7FF              <1> 	call msgbox_prepare
  4910 00001D16 87F7                <1> 	xchg si, di
  4911 00001D18 E87806              <1> 	call window_run
  4912 00001D1B 8B441E              <1> 	mov ax, [si + struc_message_box.pressed_key]
  4913 00001D1E 5F                  <1> 	pop di
  4914 00001D1F 5E                  <1> 	pop si
  4915 00001D20 C3                  <1>         ret
  4916                              <1> ;=============================================================================
  4917                              <1> 
  4918                              <1> ;=============================================================================
  4919                              <1> ;error_box ---- draw error message box.
  4920                              <1> ;input:
  4921                              <1> ;      ds:si -> error message
  4922                              <1> ;output:
  4923                              <1> ;      ax = return keycode
  4924                              <1> ;=============================================================================
  4925                              <1> error_box:
  4926 00001D21 53                  <1>         push bx
  4927 00001D22 52                  <1>         push dx
  4928 00001D23 A0[2546]            <1>         mov al, [color.error_box_msg]
  4929 00001D26 8B1E[2346]          <1>         mov bx, [color.error_box_frame]
  4930 00001D2A BA[5E46]            <1>         mov dx, str_idx.error
  4931 00001D2D E8D7FF              <1>         call message_box
  4932 00001D30 5A                  <1>         pop dx
  4933 00001D31 5B                  <1>         pop bx
  4934 00001D32 C3                  <1>         ret
  4935                              <1> 
  4936                              <1> ;=============================================================================
  4937                              <1> ;info_box ---- draw infomation message box.
  4938                              <1> ;input:
  4939                              <1> ;      ds:si -> infomation message
  4940                              <1> ;output:
  4941                              <1> ;      ax = return keycode
  4942                              <1> ;=============================================================================
  4943                              <1> info_box:
  4944 00001D33 53                  <1>         push bx
  4945 00001D34 52                  <1>         push dx
  4946 00001D35 A0[2846]            <1>         mov al, [color.info_box_msg]
  4947 00001D38 8B1E[2646]          <1>         mov bx, [color.info_box_frame]
  4948 00001D3C BA[6246]            <1>         mov dx, str_idx.info
  4949 00001D3F E8C5FF              <1>         call message_box
  4950 00001D42 5A                  <1>         pop dx
  4951 00001D43 5B                  <1>         pop bx
  4952 00001D44 C3                  <1>         ret
  4953                              <1> 
  4954                              <1> ;=============================================================================
  4955                              <1> ; inputbox_set_cursor
  4956                              <1> ; input:
  4957                              <1> ;	ds:si -> input box
  4958                              <1> ; output:
  4959                              <1> ;	none
  4960                              <1> ;=============================================================================
  4961                              <1> inputbox_set_cursor:
  4962 00001D45 8B5424              <1> 	mov dx, [si + struc_input_box.input_area_pos]
  4963 00001D48 025427              <1> 	add dl, [si + struc_input_box.input_curp]
  4964 00001D4B 2A5426              <1> 	sub dl, [si + struc_input_box.input_startp]
  4965 00001D4E E80505              <1> 	call window_set_cursor
  4966 00001D51 E895FE              <1> 	call show_cursor
  4967 00001D54 C3                  <1> 	ret
  4968                              <1> 	
  4969                              <1> ;=============================================================================
  4970                              <1> ; inputbox_draw_body_proc ---- draw_body_proc of input box
  4971                              <1> ; input:
  4972                              <1> ;	ds:si -> pointer to struc_input_box
  4973                              <1> ; output:
  4974                              <1> ;	none
  4975                              <1> ;=============================================================================
  4976                              <1> inputbox_draw_body_proc:
  4977 00001D55 60                  <1> 	pusha
  4978 00001D56 89F7                <1> 	mov di, si
  4979 00001D58 8B5C1C              <1> 	mov bx, [si + struc_input_box.message_attr]
  4980 00001D5B BA0202              <1> 	mov dx, 0x0202
  4981 00001D5E 8B741A              <1> 	mov si, [si + struc_input_box.message]
  4982 00001D61 E80E05              <1> 	call window_draw_string
  4983 00001D64 61                  <1> 	popa
  4984 00001D65 E80400              <1> 	call inputbox_draw_input_area
  4985 00001D68 E8DAFF              <1> 	call inputbox_set_cursor
  4986 00001D6B C3                  <1> 	ret
  4987                              <1> 
  4988                              <1> ;=============================================================================
  4989                              <1> ; inputbox_draw_input_area ---- draw the input area of a input box
  4990                              <1> ; input:
  4991                              <1> ;	ds:si -> pointer to struc_input_box
  4992                              <1> ; output:
  4993                              <1> ;	none
  4994                              <1> ;=============================================================================
  4995                              <1> inputbox_draw_input_area:
  4996 00001D6C 60                  <1> 	pusha
  4997 00001D6D 0FB64C23            <1> 	movzx cx, byte [si + struc_input_box.input_area_len]
  4998 00001D71 8B5424              <1> 	mov dx, [si + struc_input_box.input_area_pos]
  4999 00001D74 B020                <1> 	mov al, 0x20
  5000 00001D76 8A5C1E              <1> 	mov bl, [si + struc_input_box.input_attr]
  5001 00001D79 E8E804              <1> 	call window_draw_char
  5002                              <1> 
  5003 00001D7C 0FB64426            <1> 	movzx ax, byte [si + struc_input_box.input_startp]
  5004 00001D80 8B7C20              <1> 	mov di, [si + struc_input_box.input_buf]
  5005 00001D83 01C7                <1> 	add di, ax
  5006 00001D85 8A7C1F              <1> 	mov bh, [si + struc_input_box.input_type]
  5007                              <1> 
  5008                              <1> .loop_draw:
  5009 00001D88 8A05                <1> 	mov al, [di]
  5010 00001D8A 08C0                <1> 	or al, al
  5011 00001D8C 7412                <1> 	jz .end_draw
  5012 00001D8E 08FF                <1> 	or bh, bh
  5013 00001D90 7402                <1> 	jz .draw_normal
  5014 00001D92 B02A                <1> 	mov al, '*'
  5015                              <1> .draw_normal:
  5016 00001D94 51                  <1> 	push cx
  5017 00001D95 B101                <1> 	mov cl, 1
  5018 00001D97 E8CA04              <1> 	call window_draw_char
  5019 00001D9A 59                  <1> 	pop cx
  5020 00001D9B FEC2                <1> 	inc dl
  5021 00001D9D 47                  <1> 	inc di
  5022 00001D9E E2E8                <1> 	loop .loop_draw
  5023                              <1> 
  5024                              <1> .end_draw:
  5025 00001DA0 61                  <1> 	popa
  5026 00001DA1 C3                  <1> 	ret
  5027                              <1> 
  5028                              <1> 
  5029                              <1> ;=============================================================================
  5030                              <1> ; inputbox_get_strlen 
  5031                              <1> ; input:
  5032                              <1> ;	ds:si -> input box
  5033                              <1> ; output:
  5034                              <1> ;	cx = input buf strlen
  5035                              <1> ;=============================================================================
  5036                              <1> inputbox_get_strlen:
  5037 00001DA2 56                  <1> 	push si
  5038 00001DA3 8B7420              <1> 	mov si, [si + struc_input_box.input_buf]
  5039 00001DA6 E89109              <1> 	call strlen
  5040 00001DA9 5E                  <1> 	pop si
  5041 00001DAA C3                  <1> 	ret
  5042                              <1> 
  5043                              <1> ;=============================================================================
  5044                              <1> ; inputbox_delete_char
  5045                              <1> ; input:
  5046                              <1> ;	ds:si -> input box
  5047                              <1> ;	cl = position to be deleted
  5048                              <1> ; output:
  5049                              <1> ;	none
  5050                              <1> ;=============================================================================
  5051                              <1> inputbox_delete_char:
  5052 00001DAB 60                  <1> 	pusha
  5053 00001DAC 30ED                <1> 	xor ch, ch
  5054 00001DAE 8B7C20              <1> 	mov di, [si + struc_input_box.input_buf]
  5055 00001DB1 01CF                <1> 	add di, cx
  5056 00001DB3 89FE                <1> 	mov si, di
  5057 00001DB5 803C00              <1> 	cmp byte [si], 0
  5058 00001DB8 7406                <1> 	jz .end
  5059 00001DBA 46                  <1> 	inc si
  5060 00001DBB B1FF                <1> 	mov cl, 255
  5061 00001DBD E8B909              <1> 	call strncpy
  5062                              <1> .end:
  5063 00001DC0 61                  <1> 	popa
  5064 00001DC1 C3                  <1> 	ret
  5065                              <1> 
  5066                              <1> ;=============================================================================
  5067                              <1> ; inputbox_post_input
  5068                              <1> ;=============================================================================
  5069                              <1> inputbox_post_input:
  5070 00001DC2 8A4427              <1> 	mov al, [si + struc_input_box.input_curp]
  5071 00001DC5 8A4C26              <1> 	mov cl, [si + struc_input_box.input_startp]
  5072 00001DC8 38C1                <1> 	cmp cl, al
  5073 00001DCA 7205                <1> 	jb .below_cur
  5074 00001DCC 884426              <1> 	mov [si + struc_input_box.input_startp], al
  5075 00001DCF EB0D                <1> 	jmp short .end
  5076                              <1> 
  5077                              <1> .below_cur:
  5078 00001DD1 28C8                <1> 	sub al, cl
  5079 00001DD3 3A4423              <1> 	cmp al, [si + struc_input_box.input_area_len]
  5080 00001DD6 7606                <1> 	jbe .end
  5081 00001DD8 2A4423              <1> 	sub al, [si + struc_input_box.input_area_len]
  5082 00001DDB 004426              <1> 	add [si + struc_input_box.input_startp], al
  5083                              <1> .end:
  5084 00001DDE C3                  <1> 	ret
  5085                              <1> 
  5086                              <1> ;=============================================================================
  5087                              <1> ; inputbox_backspace 
  5088                              <1> ;=============================================================================
  5089                              <1> inputbox_backspace:
  5090 00001DDF E8C0FF              <1> 	call inputbox_get_strlen
  5091 00001DE2 09C9                <1> 	or cx, cx
  5092 00001DE4 7412                <1> 	jz .end
  5093 00001DE6 8A4C27              <1> 	mov cl, [si + struc_input_box.input_curp]
  5094 00001DE9 08C9                <1> 	or cl, cl
  5095 00001DEB 740B                <1> 	jz .end
  5096 00001DED FEC9                <1> 	dec cl
  5097 00001DEF 884C27              <1> 	mov [si + struc_input_box.input_curp], cl
  5098 00001DF2 E8B6FF              <1> 	call inputbox_delete_char
  5099 00001DF5 E8CAFF              <1> 	call inputbox_post_input
  5100                              <1> .end:
  5101 00001DF8 C3                  <1> 	ret
  5102                              <1> 
  5103                              <1> ;=============================================================================
  5104                              <1> ; inputbox_delete
  5105                              <1> ;=============================================================================
  5106                              <1> inputbox_delete:
  5107 00001DF9 E8A6FF              <1> 	call inputbox_get_strlen
  5108 00001DFC 09C9                <1> 	or cx, cx
  5109 00001DFE 7409                <1> 	jz .end
  5110 00001E00 8A4C27              <1> 	mov cl, [si + struc_input_box.input_curp]
  5111 00001E03 E8A5FF              <1> 	call inputbox_delete_char
  5112 00001E06 E8B9FF              <1> 	call inputbox_post_input
  5113                              <1> .end:
  5114 00001E09 C3                  <1> 	ret
  5115                              <1> 
  5116                              <1> ;=============================================================================
  5117                              <1> ; inputbox_right_arrow
  5118                              <1> ;=============================================================================
  5119                              <1> inputbox_right_arrow:
  5120 00001E0A E895FF              <1> 	call inputbox_get_strlen
  5121 00001E0D 3A4C27              <1> 	cmp cl, [si + struc_input_box.input_curp]
  5122 00001E10 7606                <1> 	jbe .end
  5123                              <1> 
  5124 00001E12 FE4427              <1> 	inc byte [si + struc_input_box.input_curp]
  5125 00001E15 E8AAFF              <1> 	call inputbox_post_input
  5126                              <1> .end:
  5127 00001E18 C3                  <1> 	ret
  5128                              <1> 
  5129                              <1> ;=============================================================================
  5130                              <1> ; inputbox_left_arrow
  5131                              <1> ;=============================================================================
  5132                              <1> inputbox_left_arrow:
  5133 00001E19 807C2700            <1> 	cmp byte [si + struc_input_box.input_curp], 0
  5134 00001E1D 7406                <1> 	jz .end
  5135                              <1> 
  5136 00001E1F FE4C27              <1> 	dec byte [si + struc_input_box.input_curp]
  5137 00001E22 E89DFF              <1> 	call inputbox_post_input
  5138                              <1> .end:
  5139 00001E25 C3                  <1> 	ret
  5140                              <1> 
  5141                              <1> ;=============================================================================
  5142                              <1> ; inputbox_end_key
  5143                              <1> ;=============================================================================
  5144                              <1> inputbox_end_key:
  5145 00001E26 E879FF              <1> 	call inputbox_get_strlen
  5146 00001E29 884C27              <1> 	mov [si + struc_input_box.input_curp], cl
  5147 00001E2C E893FF              <1> 	call inputbox_post_input
  5148 00001E2F C3                  <1> 	ret
  5149                              <1> 
  5150                              <1> ;=============================================================================
  5151                              <1> ; inputbox_home_key
  5152                              <1> ;=============================================================================
  5153                              <1> inputbox_home_key:
  5154 00001E30 C6442700            <1> 	mov byte [si + struc_input_box.input_curp], 0
  5155 00001E34 E88BFF              <1> 	call inputbox_post_input
  5156 00001E37 C3                  <1> 	ret
  5157                              <1> 
  5158                              <1> 
  5159                              <1> ;=============================================================================
  5160                              <1> ; inputbox_cancel
  5161                              <1> ;=============================================================================
  5162                              <1> inputbox_cancel:
  5163 00001E38 C6442801            <1> 	mov byte [si + struc_input_box.return_val], 1
  5164 00001E3C E8A0FD              <1> 	call hide_cursor
  5165 00001E3F C3                  <1> 	ret
  5166                              <1> 
  5167                              <1> ;=============================================================================
  5168                              <1> ; inputbox_enter
  5169                              <1> ;=============================================================================
  5170                              <1> inputbox_enter:
  5171 00001E40 C6442800            <1> 	mov byte [si + struc_input_box.return_val], 0
  5172 00001E44 E898FD              <1> 	call hide_cursor
  5173 00001E47 C3                  <1> 	ret
  5174                              <1> 
  5175                              <1> ;=============================================================================
  5176                              <1> ; inputbox_insert_char
  5177                              <1> ; input:
  5178                              <1> ;	al = char
  5179                              <1> ;	cl = position
  5180                              <1> ;	ds:si -> input box
  5181                              <1> ;=============================================================================
  5182                              <1> inputbox_insert_char:
  5183 00001E48 60                  <1> 	pusha
  5184 00001E49 30ED                <1> 	xor ch, ch
  5185 00001E4B 51                  <1> 	push cx
  5186 00001E4C E853FF              <1> 	call inputbox_get_strlen
  5187 00001E4F 8B7420              <1> 	mov si, [si + struc_input_box.input_buf]
  5188 00001E52 01CE                <1> 	add si, cx
  5189 00001E54 5A                  <1> 	pop dx
  5190 00001E55 29D1                <1> 	sub cx, dx
  5191 00001E57 09C9                <1> 	or cx, cx
  5192 00001E59 7408                <1> 	jz .no_move
  5193                              <1> 
  5194                              <1> .loop_move:
  5195 00001E5B 8A24                <1> 	mov ah, [si]
  5196 00001E5D 886401              <1> 	mov [si + 1], ah
  5197 00001E60 4E                  <1> 	dec si
  5198 00001E61 E2F8                <1> 	loop .loop_move
  5199                              <1> 
  5200                              <1> .no_move:
  5201 00001E63 8A24                <1> 	mov ah, [si]
  5202 00001E65 8904                <1> 	mov [si], ax
  5203 00001E67 61                  <1> 	popa
  5204 00001E68 C3                  <1> 	ret
  5205                              <1> 	
  5206                              <1> ;=============================================================================
  5207                              <1> ; inputbox_default_event_handle
  5208                              <1> ; input:
  5209                              <1> ;	ax = event code
  5210                              <1> ;	ds:si -> input box
  5211                              <1> ; output:
  5212                              <1> ;	none
  5213                              <1> ;=============================================================================
  5214                              <1> inputbox_default_event_handle:
  5215 00001E69 E80506              <1> 	call window_default_event_handle
  5216 00001E6C 732C                <1> 	jnc .end
  5217 00001E6E 08C0                <1> 	or al, al
  5218 00001E70 7427                <1> 	jz .no_action
  5219 00001E72 80FCF0              <1> 	cmp ah, EVTCODE_COMMAND
  5220 00001E75 7322                <1> 	jae .no_action
  5221 00001E77 3C20                <1> 	cmp al, 0x20
  5222 00001E79 721E                <1> 	jb .no_action
  5223 00001E7B 3CE0                <1> 	cmp al, 0xE0
  5224 00001E7D 741A                <1> 	je .no_action
  5225                              <1> 
  5226 00001E7F E820FF              <1> 	call inputbox_get_strlen
  5227 00001E82 2A4C22              <1> 	sub cl, [si + struc_input_box.input_buf_len]
  5228 00001E85 08C9                <1> 	or cl, cl
  5229 00001E87 7411                <1> 	jz .end
  5230                              <1> 
  5231 00001E89 8A4C27              <1> 	mov cl, [si + struc_input_box.input_curp]
  5232 00001E8C E8B9FF              <1> 	call inputbox_insert_char
  5233 00001E8F FE4427              <1> 	inc byte [si + struc_input_box.input_curp]
  5234 00001E92 E82DFF              <1> 	call inputbox_post_input
  5235 00001E95 E84903              <1> 	call window_draw_body
  5236 00001E98 C3                  <1> 	ret
  5237                              <1> 
  5238                              <1> .no_action:
  5239 00001E99 F9                  <1> 	stc
  5240                              <1> .end:
  5241 00001E9A C3                  <1> 	ret
  5242                              <1> 
  5243                              <1> ;=============================================================================
  5244                              <1> ; inputbox_prepare
  5245                              <1> ; input:
  5246                              <1> ;	ah = input method ( 0 = normal, 1 = security )
  5247                              <1> ;	al = message attribute
  5248                              <1> ;	bh = title attribute
  5249                              <1> ;	bl = frame attribute
  5250                              <1> ;	ch = input area length
  5251                              <1> ;	cl = max input length
  5252                              <1> ;	ds:si -> message ( no more than one line )
  5253                              <1> ;	ds:di -> pointer to struc_input_box
  5254                              <1> ;	ds:dx -> buffer to store input string
  5255                              <1> ;=============================================================================
  5256                              <1> inputbox_prepare:
  5257 00001E9B 60                  <1> 	pusha
  5258 00001E9C 08ED                <1> 	or ch, ch
  5259 00001E9E 7502                <1> 	jnz .go_prepare
  5260 00001EA0 88CD                <1> 	mov ch, cl
  5261                              <1> .go_prepare:
  5262                              <1> 
  5263 00001EA2 51                  <1> 	push cx
  5264 00001EA3 B92900              <1> 	mov cx, SIZE_OF_STRUC_INPUT_BOX
  5265 00001EA6 E8AD0C              <1> 	call clear_memory
  5266 00001EA9 59                  <1> 	pop cx
  5267                              <1> 
  5268 00001EAA C60506              <1> 	mov byte [di], WINFLAG_FRAMED | WINFLAG_MODAL		; win flag
  5269 00001EAD C74502[6446]        <1> 	mov word [di + struc_window.title], str_idx.input	; win title
  5270 00001EB2 895D04              <1> 	mov [di + struc_window.win_attr], bx			; win attr
  5271 00001EB5 89751A              <1> 	mov [di + struc_input_box.message], si
  5272 00001EB8 88451C              <1> 	mov [di + struc_input_box.message_attr], al
  5273 00001EBB B00F                <1> 	mov al, 0x0F
  5274 00001EBD 89451E              <1> 	mov [di + struc_input_box.input_attr], ax
  5275 00001EC0 895520              <1> 	mov [di + struc_input_box.input_buf], dx
  5276 00001EC3 894D22              <1> 	mov [di + struc_input_box.input_buf_len], cx		; input buf 
  5277                              <1> 								; and area len
  5278                              <1> 
  5279 00001EC6 8B1E[0346]          <1> 	mov bx, [size.box_width]
  5280 00001ECA FEC7                <1> 	inc bh
  5281 00001ECC 00EB                <1> 	add bl, ch
  5282                              <1> 
  5283 00001ECE E86908              <1> 	call strlen
  5284 00001ED1 00CB                <1> 	add bl, cl
  5285 00001ED3 895D08              <1> 	mov [di + struc_window.win_size], bx			; win size
  5286 00001ED6 894D24              <1> 	mov [di + struc_input_box.input_area_pos],cx		; input area pos
  5287 00001ED9 8145240202          <1> 	add word [di + struc_input_box.input_area_pos], 0x0202
  5288                              <1> 
  5289 00001EDE C745100E00          <1> 	mov word [di + struc_window.act_num], INPUTBOX_ACTION_NUM
  5290 00001EE3 C74512[6526]        <1> 	mov word [di + struc_window.act_table], inputbox_action_table
  5291 00001EE8 C74514[691E]        <1> 	mov word [di + struc_window.default_event_handle], inputbox_default_event_handle
  5292 00001EED C74516[7D24]        <1> 	mov word [di + struc_window.event_handle], window_event_handle
  5293 00001EF2 C74518[551D]        <1> 	mov word [di + struc_window.draw_body_proc], inputbox_draw_body_proc
  5294                              <1> 
  5295 00001EF7 FE4528              <1> 	inc byte [di + struc_input_box.return_val]
  5296                              <1> 
  5297 00001EFA 89FE                <1> 	mov si, di
  5298 00001EFC E85D05              <1> 	call window_center_window
  5299 00001EFF 61                  <1> 	popa
  5300 00001F00 C3                  <1> 	ret
  5301                              <1> 
  5302                              <1> ;=============================================================================
  5303                              <1> ;input_box ---- draw a input box and input a string
  5304                              <1> ;input:
  5305                              <1> ;      ah = input method ( 0 = normal, 1 = security )
  5306                              <1> ;      al = message attribute
  5307                              <1> ;      bh = title attribute
  5308                              <1> ;      bl = frame attribute
  5309                              <1> ;      ch = input area length
  5310                              <1> ;      cl = max input length
  5311                              <1> ;      ds:si -> message ( no more than one line )
  5312                              <1> ;      ds:di -> buffer to store input text
  5313                              <1> ;      ds:dx -> parent window
  5314                              <1> ;output:
  5315                              <1> ;      cf = 0 , ah = 0 ok, ch = number of inputed character
  5316                              <1> ;      cf = 1 , ah != 0 cancel, ch = 0
  5317                              <1> ;=============================================================================
  5318                              <1> input_box:
  5319 00001F01 56                  <1> 	push si
  5320 00001F02 57                  <1> 	push di
  5321 00001F03 57                  <1> 	push di
  5322 00001F04 52                  <1> 	push dx
  5323                              <1> 
  5324 00001F05 BA[B930]            <1> 	mov dx, ui_tmp.tmp_buf
  5325 00001F08 BF[6530]            <1> 	mov di, ui_tmp.tmp_inputbox
  5326 00001F0B 87F7                <1> 	xchg si, di
  5327 00001F0D E84806              <1> 	call winlist_remove
  5328 00001F10 87F7                <1> 	xchg si, di
  5329 00001F12 E886FF              <1> 	call inputbox_prepare
  5330                              <1> 
  5331 00001F15 8F450A              <1> 	pop word [di + struc_window.parent_win]
  5332 00001F18 87FA                <1> 	xchg di, dx
  5333 00001F1A 5E                  <1> 	pop si
  5334                              <1> 
  5335 00001F1B 06                  <1> 	push es
  5336 00001F1C 1E                  <1> 	push ds
  5337 00001F1D 07                  <1> 	pop es
  5338                              <1> 
  5339 00001F1E 56                  <1> 	push si
  5340 00001F1F 57                  <1> 	push di
  5341                              <1> 
  5342 00001F20 E87008              <1> 	call strcpy
  5343                              <1> 	
  5344 00001F23 89D6                <1> 	mov si, dx
  5345 00001F25 E86B04              <1> 	call window_run
  5346 00001F28 8A6428              <1> 	mov ah, [si + struc_input_box.return_val]
  5347 00001F2B E874FE              <1> 	call inputbox_get_strlen
  5348 00001F2E 88CD                <1> 	mov ch, cl
  5349 00001F30 8A4C22              <1> 	mov cl, [si + struc_input_box.input_buf_len]
  5350 00001F33 08E4                <1> 	or ah, ah
  5351                              <1> 
  5352 00001F35 5E                  <1> 	pop si
  5353 00001F36 5F                  <1> 	pop di
  5354 00001F37 7403                <1> 	jz .ok
  5355 00001F39 F9                  <1> 	stc
  5356 00001F3A EB04                <1> 	jmp short .end
  5357                              <1> .ok:
  5358 00001F3C E85408              <1> 	call strcpy
  5359 00001F3F F8                  <1> 	clc
  5360                              <1> .end:
  5361 00001F40 07                  <1> 	pop es
  5362 00001F41 5F                  <1> 	pop di
  5363 00001F42 5E                  <1> 	pop si
  5364 00001F43 C3                  <1> 	ret
  5365                              <1> 
  5366                              <1> ;=============================================================================
  5367                              <1> ;input_password ---- input a password
  5368                              <1> ;input:
  5369                              <1> ;      cl = max password length
  5370                              <1> ;      ds:si -> message string
  5371                              <1> ;output:
  5372                              <1> ;      cf = 0 success, ax:dx = password
  5373                              <1> ;      cf = 1 cancel
  5374                              <1> ;=============================================================================
  5375                              <1> input_password:
  5376 00001F44 53                  <1>         push bx
  5377 00001F45 51                  <1>         push cx
  5378                              <1>         
  5379 00001F46 B401                <1>         mov ah, 1
  5380 00001F48 A0[2246]            <1>         mov al, [color.input_box_msg]
  5381 00001F4B 8B1E[2046]          <1>         mov bx, [color.input_box_frame]
  5382 00001F4F 88CD                <1>         mov ch, cl
  5383 00001F51 31D2                <1>         xor dx, dx
  5384 00001F53 BF[B931]            <1>         mov di, ui_tmp.tmp_buf1
  5385                              <1> 
  5386 00001F56 C60500              <1>         mov byte [di], 0
  5387                              <1> 
  5388 00001F59 E8A5FF              <1>         call input_box
  5389 00001F5C 7209                <1>         jc .cancel_input
  5390                              <1> 
  5391 00001F5E 89FE                <1>         mov si, di
  5392 00001F60 0FB6CD              <1>         movzx cx, ch
  5393 00001F63 E83A08              <1>         call calc_password
  5394 00001F66 F8                  <1>         clc
  5395                              <1> 
  5396                              <1> .cancel_input:
  5397 00001F67 59                  <1>         pop cx
  5398 00001F68 5B                  <1>         pop bx
  5399 00001F69 C3                  <1>         ret
  5400                              <1> ;=============================================================================
  5401                              <1> 
  5402                              <1> ;=============================================================================
  5403                              <1> ; menubox_adjust_geometry ---- adjust the size and position of the menu box
  5404                              <1> ; input:
  5405                              <1> ;	ds:si -> pointer to struc_menu_box
  5406                              <1> ; output:
  5407                              <1> ;	none
  5408                              <1> ;=============================================================================
  5409                              <1> menubox_adjust_geometry:
  5410 00001F6A E80400              <1> 	call menubox_adjust_menu_area
  5411 00001F6D E86E00              <1> 	call menubox_adjust_win_width
  5412 00001F70 C3                  <1> 	ret
  5413                              <1> 
  5414                              <1> ;=============================================================================
  5415                              <1> ; menubox_adjust_menu_area ---- adjust the size and position of the menu area
  5416                              <1> ; input:
  5417                              <1> ;	ds:si -> pointer to struc_menu_box
  5418                              <1> ; output:
  5419                              <1> ;	none
  5420                              <1> ;=============================================================================
  5421                              <1> menubox_adjust_menu_area:
  5422 00001F71 60                  <1> 	pusha
  5423                              <1> 
  5424                              <1> ;adjust menu area position
  5425 00001F72 B90101              <1> 	mov cx, 0x0101
  5426 00001F75 8A04                <1> 	mov al, [si]
  5427 00001F77 A840                <1> 	test al, MENUFLAG_SINK_UPPER
  5428 00001F79 7402                <1> 	jz .no_sink_upper
  5429 00001F7B FEC5                <1> 	inc ch
  5430                              <1> .no_sink_upper:
  5431 00001F7D 837C1A00            <1> 	cmp word [si + struc_menu_box.menu_header], 0
  5432 00001F81 7402                <1> 	jz .no_header
  5433 00001F83 FEC5                <1> 	inc ch
  5434                              <1> .no_header:
  5435 00001F85 A820                <1> 	test al, MENUFLAG_SINK_WIDTH
  5436 00001F87 7402                <1> 	jz .no_sink_width
  5437 00001F89 FEC1                <1> 	inc cl
  5438                              <1> .no_sink_width:
  5439 00001F8B 894C21              <1> 	mov [si + struc_menu_box.menu_area_pos], cx
  5440                              <1> 
  5441                              <1> ;adjust menu area size
  5442 00001F8E 8B5408              <1> 	mov dx, [si + struc_window.win_size]
  5443 00001F91 28EE                <1> 	sub dh, ch
  5444 00001F93 FECE                <1> 	dec dh
  5445 00001F95 A880                <1> 	test al, MENUFLAG_SINK_BOTTOM
  5446 00001F97 7402                <1> 	jz .no_sink_bottom
  5447 00001F99 FECE                <1> 	dec dh
  5448                              <1> .no_sink_bottom:
  5449                              <1> 
  5450 00001F9B 30D2                <1> 	xor dl, dl
  5451 00001F9D 0FB64C26            <1> 	movzx cx, byte [si + struc_menu_box.items_num]
  5452 00001FA1 09C9                <1> 	or cx, cx
  5453 00001FA3 741D                <1> 	jz .end_calc
  5454 00001FA5 8B5C29              <1> 	mov bx, [si + struc_menu_box.item_str_proc]
  5455 00001FA8 09DB                <1> 	or bx, bx
  5456 00001FAA 7416                <1> 	jz .end_calc
  5457                              <1> 
  5458                              <1> .loop_calc_item_width:
  5459 00001FAC 56                  <1> 	push si
  5460 00001FAD 53                  <1> 	push bx
  5461 00001FAE 51                  <1> 	push cx
  5462 00001FAF 49                  <1> 	dec cx
  5463                              <1> 
  5464 00001FB0 52                  <1> 	push dx
  5465 00001FB1 FFD3                <1> 	call bx
  5466 00001FB3 5A                  <1> 	pop dx
  5467                              <1> 
  5468 00001FB4 E89607              <1> 	call strlen_hl
  5469 00001FB7 38CA                <1> 	cmp dl, cl
  5470 00001FB9 7302                <1> 	jae .cont_calc
  5471 00001FBB 88CA                <1> 	mov dl, cl
  5472                              <1> .cont_calc:
  5473 00001FBD 59                  <1> 	pop cx
  5474 00001FBE 5B                  <1> 	pop bx
  5475 00001FBF 5E                  <1> 	pop si
  5476 00001FC0 E2EA                <1> 	loop .loop_calc_item_width
  5477                              <1> 
  5478                              <1> .end_calc:
  5479                              <1> 
  5480 00001FC2 56                  <1> 	push si
  5481 00001FC3 8B741A              <1> 	mov si, [si + struc_menu_box.menu_header]
  5482 00001FC6 09F6                <1> 	or si, si
  5483 00001FC8 740B                <1> 	jz .no_header_len
  5484 00001FCA 8B34                <1> 	mov si, [si]
  5485 00001FCC E87E07              <1> 	call strlen_hl
  5486 00001FCF 38CA                <1> 	cmp dl, cl
  5487 00001FD1 7302                <1> 	jae .header_short
  5488 00001FD3 88CA                <1> 	mov dl, cl
  5489                              <1> .header_short:
  5490                              <1> .no_header_len:
  5491 00001FD5 80C202              <1> 	add dl, 2
  5492 00001FD8 5E                  <1> 	pop si
  5493 00001FD9 895423              <1> 	mov [si + struc_menu_box.menu_area_size], dx
  5494                              <1> 
  5495 00001FDC 61                  <1> 	popa
  5496 00001FDD C3                  <1> 	ret
  5497                              <1> 
  5498                              <1> 
  5499                              <1> ;=============================================================================
  5500                              <1> ; menubox_adjust_win_width ---- adjust the width the menu window. 
  5501                              <1> ; input:
  5502                              <1> ;	ds:si -> pointer to struc_menu_box
  5503                              <1> ; output:
  5504                              <1> ;	none
  5505                              <1> ;=============================================================================
  5506                              <1> menubox_adjust_win_width:
  5507 00001FDE 60                  <1> 	pusha
  5508 00001FDF 8A04                <1> 	mov al, [si]
  5509 00001FE1 8B5C23              <1> 	mov bx, [si + struc_menu_box.menu_area_size]
  5510                              <1> 
  5511                              <1> ; calculate window width
  5512 00001FE4 80C302              <1> 	add bl, 2
  5513                              <1> 
  5514 00001FE7 A820                <1> 	test al, MENUFLAG_SINK_WIDTH
  5515 00001FE9 7403                <1> 	jz .no_sink_width
  5516 00001FEB 80C302              <1> 	add bl, 2
  5517                              <1> .no_sink_width:
  5518 00001FEE A810                <1> 	test al, MENUFLAG_SCROLLBAR
  5519 00001FF0 7402                <1> 	jz .no_scrollbar
  5520 00001FF2 FEC3                <1> 	inc bl
  5521                              <1> .no_scrollbar:
  5522 00001FF4 885C08              <1> 	mov [si + struc_window.win_size], bl
  5523 00001FF7 8A0E[1926]          <1> 	mov cl, [ui_screen_width]
  5524 00001FFB 28D9                <1> 	sub cl, bl
  5525 00001FFD 80E902              <1> 	sub cl, 2
  5526                              <1> 
  5527 00002000 384C06              <1> 	cmp [si + struc_window.win_pos], cl
  5528 00002003 7603                <1> 	jbe .no_adjust_pos
  5529 00002005 884C06              <1> 	mov [si + struc_window.win_pos], cl
  5530                              <1> .no_adjust_pos:
  5531 00002008 61                  <1> 	popa
  5532 00002009 C3                  <1> 	ret
  5533                              <1> 
  5534                              <1> ;=============================================================================
  5535                              <1> ; menubox_draw_body_proc ---- draw the window body of a menu box
  5536                              <1> ; input:
  5537                              <1> ;	ds:si -> pointer to struc_menu_box
  5538                              <1> ; output:
  5539                              <1> ;	none
  5540                              <1> ;=============================================================================
  5541                              <1> menubox_draw_body_proc:
  5542 0000200A 60                  <1> 	pusha
  5543 0000200B E82700              <1> 	call menubox_draw_menu
  5544 0000200E 837C1A00            <1> 	cmp word [si + struc_menu_box.menu_header], 0
  5545 00002012 7403                <1> 	jz .no_header
  5546 00002014 E87D00              <1> 	call menubox_draw_header
  5547                              <1> .no_header:
  5548 00002017 F60410              <1> 	test byte [si], MENUFLAG_SCROLLBAR
  5549 0000201A 7403                <1> 	jz .no_scrollbar
  5550 0000201C E80200              <1> 	call menubox_draw_scrollbar
  5551                              <1> .no_scrollbar:
  5552 0000201F 61                  <1> 	popa
  5553 00002020 C3                  <1> 	ret
  5554                              <1> 
  5555                              <1> 
  5556                              <1> ;=============================================================================
  5557                              <1> ; menubox_draw_scrollbar ---- draw the scrollbar
  5558                              <1> ; input:
  5559                              <1> ;	ds:si -> pointer to struc_menu_box
  5560                              <1> ; output:
  5561                              <1> ;	none
  5562                              <1> ;=============================================================================
  5563                              <1> menubox_draw_scrollbar:
  5564 00002021 8B4426              <1> 	mov ax, [si + struc_menu_box.items_num]
  5565 00002024 8A5C25              <1> 	mov bl, [si + struc_menu_box.scrollbar_attr]
  5566 00002027 8B4C21              <1> 	mov cx, [si + struc_menu_box.menu_area_pos]
  5567 0000202A 8B5423              <1> 	mov dx, [si + struc_menu_box.menu_area_size]
  5568 0000202D 00D1                <1> 	add cl, dl
  5569 0000202F 30D2                <1> 	xor dl, dl
  5570 00002031 E84C02              <1> 	call window_draw_scrollbar
  5571 00002034 C3                  <1> 	ret
  5572                              <1> 
  5573                              <1> ;=============================================================================
  5574                              <1> ; menubox_draw_menu ---- draw the menu area
  5575                              <1> ; input:
  5576                              <1> ;	ds:si -> pointer to struc_menu_box
  5577                              <1> ; output:
  5578                              <1> ;	none
  5579                              <1> ;=============================================================================
  5580                              <1> menubox_draw_menu:
  5581 00002035 60                  <1> 	pusha
  5582 00002036 8B4C21              <1> 	mov cx, [si + struc_menu_box.menu_area_pos]
  5583 00002039 8B5423              <1> 	mov dx, [si + struc_menu_box.menu_area_size]
  5584 0000203C 52                  <1> 	push dx
  5585 0000203D 51                  <1> 	push cx
  5586 0000203E 034C06              <1> 	add cx, [si + struc_window.win_pos]
  5587 00002041 01CA                <1> 	add dx, cx
  5588                              <1> 
  5589 00002043 81EA0101            <1> 	sub dx, 0x0101
  5590 00002047 8A7C1D              <1> 	mov bh, [si + struc_menu_box.menu_norm_attr]
  5591 0000204A E892F9              <1> 	call clear_screen
  5592                              <1> 
  5593 0000204D 5A                  <1> 	pop dx
  5594 0000204E 58                  <1> 	pop ax
  5595                              <1> 
  5596 0000204F 0FB64C28            <1> 	movzx cx, [si + struc_menu_box.first_visible_item]
  5597 00002053 807C2600            <1> 	cmp byte [si + struc_menu_box.items_num], 0
  5598 00002057 7439                <1> 	je .end
  5599                              <1> 
  5600 00002059 89F7                <1> 	mov di, si
  5601                              <1> 
  5602                              <1> .loop_draw_item:
  5603 0000205B 3A4C27              <1> 	cmp cl, [si + struc_menu_box.focus_item]
  5604 0000205E 7405                <1> 	je .focused
  5605 00002060 8B5C1D              <1> 	mov bx, [si + struc_menu_box.menu_norm_attr]
  5606 00002063 EB03                <1> 	jmp short .draw_item
  5607                              <1> .focused:
  5608 00002065 8B5C1F              <1> 	mov bx, [si + struc_menu_box.menu_focus_attr]
  5609                              <1> .draw_item:
  5610 00002068 60                  <1> 	pusha
  5611 00002069 51                  <1> 	push cx
  5612 0000206A 88C1                <1> 	mov cl, al
  5613 0000206C B020                <1> 	mov al, ' '
  5614 0000206E E8F301              <1> 	call window_draw_char
  5615 00002071 59                  <1> 	pop cx
  5616 00002072 FEC2                <1> 	inc dl
  5617 00002074 53                  <1> 	push bx
  5618 00002075 52                  <1> 	push dx
  5619 00002076 57                  <1> 	push di
  5620 00002077 FF5429              <1> 	call word [si + struc_menu_box.item_str_proc]
  5621 0000207A 5F                  <1> 	pop di
  5622 0000207B 5A                  <1> 	pop dx
  5623 0000207C 5B                  <1> 	pop bx
  5624 0000207D E8F201              <1> 	call window_draw_string
  5625 00002080 61                  <1> 	popa
  5626 00002081 FEC6                <1> 	inc dh
  5627 00002083 FEC1                <1> 	inc cl
  5628 00002085 FECC                <1> 	dec ah
  5629 00002087 3A4C26              <1> 	cmp cl, [si + struc_menu_box.items_num]
  5630 0000208A 7306                <1> 	jae .end
  5631 0000208C 08E4                <1> 	or ah, ah
  5632 0000208E 7402                <1> 	jz .end
  5633 00002090 EBC9                <1> 	jmp short .loop_draw_item
  5634                              <1> .end:
  5635 00002092 61                  <1> 	popa
  5636 00002093 C3                  <1> 	ret
  5637                              <1> 
  5638                              <1> ;=============================================================================
  5639                              <1> ; menubox_draw_header ---- draw the menu header
  5640                              <1> ; input:
  5641                              <1> ;	ds:si -> pointer to struc_menu_box
  5642                              <1> ; output:
  5643                              <1> ;	none
  5644                              <1> ;=============================================================================
  5645                              <1> menubox_draw_header:
  5646 00002094 60                  <1> 	pusha
  5647 00002095 8B5C1C              <1> 	mov bx, [si + struc_menu_box.menu_header_attr]
  5648 00002098 8B5421              <1> 	mov dx, [si + struc_menu_box.menu_area_pos]
  5649 0000209B FECE                <1> 	dec dh
  5650 0000209D 0FB64C23            <1> 	movzx cx, byte [si + struc_menu_box.menu_area_size]
  5651 000020A1 B020                <1> 	mov al, ' '
  5652 000020A3 F60410              <1> 	test byte [si], MENUFLAG_SCROLLBAR
  5653 000020A6 7402                <1> 	jz .no_scrollbar
  5654 000020A8 FEC1                <1> 	inc cl
  5655                              <1> .no_scrollbar:
  5656 000020AA E8B701              <1> 	call window_draw_char
  5657 000020AD 89F7                <1> 	mov di, si
  5658 000020AF 8B741A              <1> 	mov si, [si + struc_menu_box.menu_header]
  5659 000020B2 8B34                <1> 	mov si, [si]
  5660 000020B4 FEC2                <1> 	inc dl
  5661 000020B6 E8B901              <1> 	call window_draw_string
  5662 000020B9 61                  <1> 	popa
  5663 000020BA C3                  <1> 	ret
  5664                              <1> 
  5665                              <1> ;=============================================================================
  5666                              <1> ; menubox_do_focus ---- do the focused menu item, get the pointer of item action
  5667                              <1> ;                    from action_table, then call window_do_action to do it.
  5668                              <1> ; input:
  5669                              <1> ;	ds:si -> pointer to struc_menu_box
  5670                              <1> ; output:
  5671                              <1> ;	none
  5672                              <1> ;=============================================================================
  5673                              <1> menubox_do_focus:
  5674 000020BB 8B5C12              <1> 	mov bx, [si + struc_window.act_table]
  5675 000020BE B005                <1> 	mov al, SIZE_OF_STRUC_ACTION
  5676 000020C0 8A4C27              <1> 	mov cl, [si + struc_menu_box.focus_item]
  5677 000020C3 F6E1                <1> 	mul cl
  5678 000020C5 01C3                <1> 	add bx, ax
  5679 000020C7 8B4701              <1> 	mov ax, [bx + struc_action.keycode]
  5680 000020CA E80004              <1> 	call window_do_action
  5681 000020CD C3                  <1> 	ret
  5682                              <1> 	
  5683                              <1> 
  5684                              <1> ;=============================================================================
  5685                              <1> ; menubox_adjust_visible_boundary
  5686                              <1> ;input:
  5687                              <1> ;	ds:si -> pointer to struc_menu_box
  5688                              <1> ;=============================================================================
  5689                              <1> menubox_adjust_visible_boundary:
  5690 000020CE 8B4427              <1> 	mov ax, [si + struc_menu_box.focus_item] ; al = focus_item, ah = first_visible_item
  5691                              <1> 
  5692                              <1> .check_upper:
  5693 000020D1 38E0                <1> 	cmp al, ah
  5694 000020D3 7303                <1> 	jae .check_bottom
  5695 000020D5 884428              <1> 	mov [si + struc_menu_box.first_visible_item], al
  5696                              <1> .check_bottom:
  5697 000020D8 026424              <1> 	add ah, [si + struc_menu_box.menu_area_size + 1]
  5698 000020DB 38E0                <1> 	cmp al, ah
  5699 000020DD 7207                <1> 	jb .end
  5700 000020DF 28E0                <1> 	sub al, ah
  5701 000020E1 FEC0                <1> 	inc al
  5702 000020E3 004428              <1> 	add [si + struc_menu_box.first_visible_item], al
  5703                              <1> .end:	
  5704 000020E6 C3                  <1> 	ret
  5705                              <1> 
  5706                              <1> ;=============================================================================
  5707                              <1> ; menubox_focus_up ---- move the focus bar up one line
  5708                              <1> ; input:
  5709                              <1> ;	ds:si -> pointer to struc_menu_box
  5710                              <1> ; output:
  5711                              <1> ;	none
  5712                              <1> ;=============================================================================
  5713                              <1> menubox_focus_up:
  5714 000020E7 8B4426              <1> 	mov ax, [si + struc_menu_box.items_num]	;al = items_num, ah = focus_item
  5715 000020EA 08E4                <1> 	or ah, ah
  5716 000020EC 7502                <1> 	jnz .up
  5717 000020EE 88C4                <1> 	mov ah, al
  5718                              <1> .up:
  5719 000020F0 FECC                <1> 	dec ah
  5720 000020F2 886427              <1> 	mov [si + struc_menu_box.focus_item], ah
  5721 000020F5 E8D6FF              <1> 	call menubox_adjust_visible_boundary
  5722 000020F8 C3                  <1> 	ret
  5723                              <1> 
  5724                              <1> ;=============================================================================
  5725                              <1> ; menu_focus_pageup ---- move the focus bar up one page
  5726                              <1> ; input:
  5727                              <1> ;	ds:si -> pointer to struc_menu_box
  5728                              <1> ; output:
  5729                              <1> ;	none
  5730                              <1> ;=============================================================================
  5731                              <1> menubox_focus_pageup:
  5732 000020F9 8A4427              <1> 	mov al, [si + struc_menu_box.focus_item]
  5733 000020FC 8A4C24              <1> 	mov cl, byte [si + struc_menu_box.menu_area_size+1]
  5734 000020FF FEC9                <1> 	dec cl
  5735 00002101 38C1                <1> 	cmp cl, al
  5736 00002103 7206                <1> 	jb .loop_up
  5737                              <1> 
  5738 00002105 88C1                <1> 	mov cl, al
  5739 00002107 08C9                <1> 	or cl, cl
  5740 00002109 7407                <1> 	jz .end
  5741                              <1> 
  5742                              <1> .loop_up:
  5743 0000210B 30ED                <1> 	xor ch, ch
  5744 0000210D E8D7FF              <1> 	call menubox_focus_up
  5745 00002110 E2F9                <1> 	loop .loop_up
  5746                              <1> .end:
  5747 00002112 C3                  <1> 	ret
  5748                              <1> 
  5749                              <1> ;=============================================================================
  5750                              <1> ; menu_focus_down ---- move the focus bar down one line
  5751                              <1> ; input:
  5752                              <1> ;	ds:si -> pointer to struc_menu_box
  5753                              <1> ; output:
  5754                              <1> ;	none
  5755                              <1> ;=============================================================================
  5756                              <1> menubox_focus_down:
  5757 00002113 8B4426              <1> 	mov ax, [si + struc_menu_box.items_num]	;al = items_num, ah = focus_item
  5758 00002116 FEC4                <1> 	inc ah
  5759 00002118 38C4                <1> 	cmp ah, al
  5760 0000211A 7202                <1> 	jb .down
  5761 0000211C 30E4                <1> 	xor ah, ah
  5762                              <1> .down:
  5763 0000211E 886427              <1> 	mov [si + struc_menu_box.focus_item], ah
  5764 00002121 E8AAFF              <1> 	call menubox_adjust_visible_boundary
  5765 00002124 C3                  <1> 	ret
  5766                              <1> 
  5767                              <1> ;=============================================================================
  5768                              <1> ; menu_focus_pagedown ---- move the focus bar down one page
  5769                              <1> ; input:
  5770                              <1> ;	ds:si -> pointer to struc_menu_box
  5771                              <1> ; output:
  5772                              <1> ;	none
  5773                              <1> ;=============================================================================
  5774                              <1> menubox_focus_pagedown:
  5775 00002125 8B4426              <1> 	mov ax, [si + struc_menu_box.items_num]
  5776 00002128 08C0                <1> 	or al, al
  5777 0000212A 741A                <1> 	jz .end
  5778                              <1> 
  5779 0000212C 28E0                <1> 	sub al, ah
  5780 0000212E FEC8                <1> 	dec al
  5781                              <1> 
  5782 00002130 8A4C24              <1> 	mov cl, byte [si + struc_menu_box.menu_area_size+1]
  5783 00002133 FEC9                <1> 	dec cl
  5784                              <1> 
  5785 00002135 38C1                <1> 	cmp cl, al
  5786 00002137 7206                <1> 	jb .loop_down
  5787 00002139 88C1                <1> 	mov cl, al
  5788 0000213B 08C9                <1> 	or cl, cl
  5789 0000213D 7407                <1> 	jz .end
  5790                              <1> 
  5791                              <1> .loop_down:
  5792 0000213F 30ED                <1> 	xor ch, ch
  5793 00002141 E8CFFF              <1> 	call menubox_focus_down
  5794 00002144 E2F9                <1> 	loop .loop_down
  5795                              <1> .end:
  5796 00002146 C3                  <1> 	ret
  5797                              <1> 
  5798                              <1> ;=============================================================================
  5799                              <1> ;menubox_default_event_handle
  5800                              <1> ;=============================================================================
  5801                              <1> menubox_default_event_handle:
  5802 00002147 60                  <1> 	pusha
  5803 00002148 B90A00              <1> 	mov cx, MENUBOX_DEF_ACTION_NUM
  5804 0000214B BB[BA26]            <1> 	mov bx, menubox_def_action_table
  5805 0000214E E84603              <1> 	call window_generic_event_handle
  5806 00002151 7303                <1> 	jnc .end
  5807 00002153 E81B03              <1> 	call window_default_event_handle
  5808                              <1> .end:
  5809 00002156 61                  <1> 	popa
  5810 00002157 C3                  <1> 	ret
  5811                              <1> ;=============================================================================
  5812                              <1> 
  5813                              <1> ;=============================================================================
  5814                              <1> ; listbox_prepare ---- prepare a list box
  5815                              <1> ; input:
  5816                              <1> ;	cl = number of items
  5817                              <1> ;	ch = height of list box
  5818                              <1> ;	ds:bx -> 2nd level pointer to title
  5819                              <1> ;	ds:dx -> 2nd level pointer to header
  5820                              <1> ;	ds:si -> items string proc
  5821                              <1> ;	ds:di -> struc_menu_box
  5822                              <1> ;=============================================================================
  5823                              <1> listbox_prepare:
  5824 00002158 60                  <1> 	pusha
  5825 00002159 51                  <1> 	push cx
  5826 0000215A B92B00              <1> 	mov cx, SIZE_OF_STRUC_MENU_BOX
  5827 0000215D E8F609              <1> 	call clear_memory
  5828 00002160 59                  <1> 	pop cx
  5829                              <1> 
  5830 00002161 C60516              <1> 	mov byte [di], WINFLAG_FRAMED | WINFLAG_MODAL | MENUFLAG_SCROLLBAR
  5831 00002164 895D02              <1> 	mov [di + struc_window.title], bx
  5832 00002167 89551A              <1> 	mov [di + struc_menu_box.menu_header], dx
  5833 0000216A 897529              <1> 	mov [di + struc_menu_box.item_str_proc], si
  5834                              <1> 
  5835 0000216D BE[1846]            <1> 	mov si, color.list_box
  5836 00002170 FC                  <1> 	cld
  5837 00002171 AD                  <1> 	lodsw
  5838 00002172 894504              <1> 	mov word [di + struc_window.win_attr], ax
  5839 00002175 AC                  <1> 	lodsb
  5840 00002176 88451C              <1> 	mov byte [di + struc_menu_box.menu_header_attr], al
  5841 00002179 AD                  <1> 	lodsw
  5842 0000217A 89451D              <1> 	mov word [di + struc_menu_box.menu_norm_attr], ax
  5843 0000217D AD                  <1> 	lodsw
  5844 0000217E 89451F              <1> 	mov word [di + struc_menu_box.menu_focus_attr], ax
  5845 00002181 AC                  <1> 	lodsb
  5846 00002182 884525              <1> 	mov byte [di + struc_menu_box.scrollbar_attr], al
  5847                              <1> 
  5848 00002185 884D26              <1> 	mov [di + struc_menu_box.items_num], cl
  5849 00002188 886D09              <1> 	mov [di + struc_window.win_size + 1], ch
  5850 0000218B C745100300          <1> 	mov word [di + struc_window.act_num], LISTBOX_ACTION_NUM
  5851 00002190 C74512[AB26]        <1> 	mov word [di + struc_window.act_table], listbox_action_table
  5852 00002195 C74514[4721]        <1> 	mov word [di + struc_window.default_event_handle], menubox_default_event_handle
  5853 0000219A C74516[7D24]        <1> 	mov word [di + struc_window.event_handle], window_event_handle
  5854 0000219F C74518[0A20]        <1> 	mov word [di + struc_window.draw_body_proc], menubox_draw_body_proc
  5855                              <1> 
  5856 000021A4 89FE                <1> 	mov si, di
  5857 000021A6 E8C1FD              <1> 	call menubox_adjust_geometry
  5858 000021A9 E8B002              <1> 	call window_center_window
  5859 000021AC 61                  <1> 	popa
  5860 000021AD C3                  <1> 	ret
  5861                              <1> 	
  5862                              <1> ;=============================================================================
  5863                              <1> ; list_box ---- run a list box
  5864                              <1> ; input:
  5865                              <1> ;	cl = number of items
  5866                              <1> ;	ch = height of list box
  5867                              <1> ;	ds:bx -> 2nd level pointer to title
  5868                              <1> ;	ds:dx -> 2nd level pointer to header
  5869                              <1> ;	ds:si -> items string proc
  5870                              <1> ; output:
  5871                              <1> ;	cl = selected item, 0xff means canceled
  5872                              <1> ;	cf = 0 success, cf = 1 canceled
  5873                              <1> ;=============================================================================
  5874                              <1> list_box:
  5875 000021AE 60                  <1> 	pusha
  5876 000021AF BF[8E30]            <1> 	mov di, ui_tmp.tmp_menubox
  5877 000021B2 E8A3FF              <1> 	call listbox_prepare
  5878 000021B5 89FE                <1> 	mov si, di
  5879 000021B7 E8D901              <1> 	call window_run
  5880 000021BA 61                  <1> 	popa
  5881 000021BB 8A0E[B530]          <1> 	mov cl, [ui_tmp.tmp_menubox + struc_menu_box.focus_item]
  5882 000021BF 80F9FF              <1> 	cmp cl, 0xFF
  5883 000021C2 7402                <1> 	je .cancel
  5884 000021C4 F8                  <1> 	clc
  5885 000021C5 C3                  <1> 	ret
  5886                              <1> .cancel:
  5887 000021C6 F9                  <1> 	stc
  5888 000021C7 C3                  <1> 	ret
  5889                              <1> 
  5890                              <1> ;=============================================================================
  5891                              <1> ; listbox_cancel
  5892                              <1> ;=============================================================================
  5893                              <1> listbox_cancel:
  5894 000021C8 C64427FF            <1> 	mov byte [si + struc_menu_box.focus_item], 0xFF
  5895 000021CC C3                  <1> 	ret
  5896                              <1> ;=============================================================================
  5897                              <1> 
  5898                              <1> 
  5899                              <1> 
  5900                              <1> ;=============================================================================
  5901                              <1> ;<<<<<<<<<<<<<<<<<<<<<<<<<< Window System functions >>>>>>>>>>>>>>>>>>>>>>>>>>
  5902                              <1> ;=============================================================================
  5903                              <1> 
  5904                              <1> ;=============================================================================
  5905                              <1> ; window_draw_all ---- draw all windows
  5906                              <1> ; input:
  5907                              <1> ;	none
  5908                              <1> ; output:
  5909                              <1> ;	none
  5910                              <1> ;=============================================================================
  5911                              <1> window_draw_all:
  5912 000021CD 60                  <1> 	pusha
  5913 000021CE 8B36[2930]          <1> 	mov si, [ui_tmp.root_win]
  5914 000021D2 09F6                <1> 	or si, si
  5915 000021D4 7409                <1> 	jz .end
  5916 000021D6 E899FA              <1> 	call lock_screen
  5917 000021D9 E82600              <1> 	call window_draw_window
  5918 000021DC E8B9FA              <1> 	call unlock_screen
  5919                              <1> .end:
  5920 000021DF 61                  <1> 	popa
  5921 000021E0 C3                  <1> 	ret
  5922                              <1> 
  5923                              <1> ;=============================================================================
  5924                              <1> ; window_draw_body ---- draw the window body
  5925                              <1> ; input:
  5926                              <1> ;	ds:si -> pointer to struc_window
  5927                              <1> ; output:
  5928                              <1> ;	none
  5929                              <1> ;=============================================================================
  5930                              <1> window_draw_body:
  5931 000021E1 60                  <1> 	pusha
  5932 000021E2 09F6                <1> 	or si, si
  5933 000021E4 741A                <1> 	jz .no_win
  5934                              <1> 
  5935 000021E6 F60401              <1> 	test byte [si], WINFLAG_OPEN
  5936 000021E9 7415                <1> 	jz .no_win
  5937                              <1> 
  5938 000021EB 8B5C18              <1> 	mov bx, [si + struc_window.draw_body_proc]
  5939 000021EE 09DB                <1> 	or bx, bx
  5940 000021F0 740E                <1> 	jz .no_win
  5941                              <1> 
  5942 000021F2 56                  <1> 	push si
  5943 000021F3 FFD3                <1> 	call bx
  5944 000021F5 5E                  <1> 	pop si
  5945                              <1> 
  5946 000021F6 8B740C              <1> 	mov si, [si + struc_window.next_win]
  5947 000021F9 09F6                <1> 	or si, si
  5948 000021FB 7403                <1> 	jz .no_win
  5949 000021FD E80200              <1> 	call window_draw_window		; draw top windows.
  5950                              <1> 
  5951                              <1> .no_win:
  5952 00002200 61                  <1> 	popa
  5953 00002201 C3                  <1> 	ret
  5954                              <1> ;=============================================================================
  5955                              <1> ; window_draw_window ---- draw the window and window body
  5956                              <1> ; input:
  5957                              <1> ;	ds:si -> pointer to struc_window
  5958                              <1> ; output:
  5959                              <1> ;	none
  5960                              <1> ;=============================================================================
  5961                              <1> window_draw_window:
  5962 00002202 60                  <1> 	pusha
  5963                              <1> 
  5964 00002203 E8D9F9              <1> 	call hide_cursor
  5965                              <1> 
  5966 00002206 09F6                <1> 	or si, si
  5967 00002208 7422                <1> 	jz .no_next_win
  5968                              <1> 
  5969 0000220A F60401              <1> 	test byte [si], WINFLAG_OPEN
  5970 0000220D 7413                <1> 	jz .no_body
  5971 0000220F F60404              <1> 	test byte [si], WINFLAG_FRAMED
  5972 00002212 7403                <1> 	jz .no_frame
  5973 00002214 E81700              <1> 	call window_draw_frame
  5974                              <1> .no_frame:
  5975 00002217 8B5C18              <1> 	mov bx, [si + struc_window.draw_body_proc]
  5976 0000221A 09DB                <1> 	or bx, bx
  5977 0000221C 7404                <1> 	jz .no_body
  5978 0000221E 56                  <1>         push si
  5979 0000221F FFD3                <1> 	call bx
  5980 00002221 5E                  <1>         pop si
  5981                              <1> .no_body:
  5982 00002222 8B740C              <1> 	mov si, [si + struc_window.next_win]
  5983 00002225 09F6                <1> 	or si, si
  5984 00002227 7403                <1> 	jz .no_next_win
  5985 00002229 E8D6FF              <1> 	call window_draw_window		; draw top windows.
  5986                              <1> 
  5987                              <1> .no_next_win:
  5988 0000222C 61                  <1> 	popa
  5989 0000222D C3                  <1> 	ret
  5990                              <1> 
  5991                              <1> ;=============================================================================
  5992                              <1> ; window_draw_frame ---- draw the window frame and clear the window body
  5993                              <1> ; input:
  5994                              <1> ;	ds:si -> pointer to struc_window
  5995                              <1> ; output:
  5996                              <1> ;	none
  5997                              <1> ;=============================================================================
  5998                              <1> window_draw_frame:
  5999 0000222E 60                  <1> 	pusha
  6000 0000222F 8B4C06              <1> 	mov cx, [si + struc_window.win_pos]	; window position
  6001 00002232 8B5408              <1> 	mov dx, [si + struc_window.win_size]	;
  6002 00002235 01CA                <1> 	add dx, cx				; calculate window bottom
  6003 00002237 81EA0101            <1> 	sub dx, 0x0101				; right corner.
  6004                              <1> 
  6005 0000223B 8B5C04              <1> 	mov bx, [si + struc_window.win_attr]	; window attribute
  6006                              <1> 
  6007 0000223E 3B36[2730]          <1> 	cmp si, [ui_tmp.focus_win]
  6008 00002242 7404                <1> 	je .focused
  6009                              <1> 
  6010 00002244 8A3E[0746]          <1> 	mov bh, [color.win_title_inactive]	; use another title attr for 
  6011                              <1> 						; inactive window.
  6012                              <1> .focused:
  6013 00002248 8B7402              <1> 	mov si, [si + struc_window.title]	; get window title pointer
  6014 0000224B 09F6                <1> 	or si, si
  6015 0000224D 7402                <1> 	jz .no_title
  6016 0000224F 8B34                <1> 	mov si, [si]
  6017                              <1> .no_title:
  6018 00002251 E8D3F7              <1> 	call draw_window
  6019 00002254 61                  <1> 	popa
  6020 00002255 C3                  <1> 	ret
  6021                              <1> 
  6022                              <1> ;=============================================================================
  6023                              <1> ; window_set_cursor
  6024                              <1> ; input:
  6025                              <1> ;	dx = cursor position
  6026                              <1> ;	ds:si -> window
  6027                              <1> ; output:
  6028                              <1> ;	none
  6029                              <1> ;=============================================================================
  6030                              <1> window_set_cursor:
  6031 00002256 52                  <1> 	push dx
  6032 00002257 F60401              <1> 	test byte [si], WINFLAG_OPEN
  6033 0000225A 7406                <1> 	jz .no_cursor
  6034                              <1> 
  6035 0000225C 035406              <1> 	add dx, [si + struc_window.win_pos]
  6036 0000225F E872F9              <1> 	call set_cursor
  6037                              <1> 
  6038                              <1> .no_cursor:
  6039 00002262 5A                  <1> 	pop dx
  6040 00002263 C3                  <1> 	ret
  6041                              <1> 
  6042                              <1> ;=============================================================================
  6043                              <1> ; window_draw_char ---- Draw chars at special position in a window
  6044                              <1> ;input:
  6045                              <1> ;      bl = high 4 bit Background color and low 4 bit Foreground color
  6046                              <1> ;      dh = start row
  6047                              <1> ;      dl = start column
  6048                              <1> ;      al = the char to be displayed
  6049                              <1> ;      cx = repeat times
  6050                              <1> ;      ds:si -> the window
  6051                              <1> ;output:
  6052                              <1> ;      none
  6053                              <1> ;=============================================================================
  6054                              <1> window_draw_char:
  6055 00002264 52                  <1> 	push dx
  6056 00002265 F60401              <1> 	test byte [si], WINFLAG_OPEN
  6057 00002268 7406                <1> 	jz .not_draw
  6058                              <1> 
  6059 0000226A 035406              <1> 	add dx, [si + struc_window.win_pos]
  6060 0000226D E851F7              <1> 	call draw_char
  6061                              <1> 
  6062                              <1> .not_draw:
  6063 00002270 5A                  <1> 	pop dx
  6064 00002271 C3                  <1> 	ret
  6065                              <1> 
  6066                              <1> ;=============================================================================
  6067                              <1> ;window_draw_string ---- Draw a zero ending string in a window 
  6068                              <1> ;                    at special position
  6069                              <1> ;input:
  6070                              <1> ;      bl = attribute for normal characters
  6071                              <1> ;           high 4 bit Background color and low 4 bit Foreground color
  6072                              <1> ;      bh = attribute for hightlight characters
  6073                              <1> ;      dh = start row
  6074                              <1> ;      dl = start column
  6075                              <1> ;      ds:si -> the string to be displayed
  6076                              <1> ;      ds:di -> the window
  6077                              <1> ;output:
  6078                              <1> ;      none
  6079                              <1> ;=============================================================================
  6080                              <1> window_draw_string:
  6081 00002272 60                  <1> 	pusha
  6082 00002273 F60501              <1> 	test byte [di], WINFLAG_OPEN
  6083 00002276 7406                <1> 	jz .not_draw
  6084                              <1> 
  6085 00002278 035506              <1> 	add dx, [di + struc_window.win_pos]
  6086 0000227B E81CF7              <1> 	call draw_string
  6087                              <1> .not_draw:
  6088 0000227E 61                  <1> 	popa
  6089 0000227F C3                  <1> 	ret
  6090                              <1> 
  6091                              <1> ;=============================================================================
  6092                              <1> ; window_draw_scrollbar ---- draw a scroll bar in a window
  6093                              <1> ; input:
  6094                              <1> ;	ds:si -> pointer to struc_window
  6095                              <1> ;	al    -> total amount
  6096                              <1> ;	ah    -> current value
  6097                              <1> ;	bl    -> attribute 
  6098                              <1> ;	ch    -> row of top of the scroll bar (relative to window position)
  6099                              <1> ;	cl    -> col of top of the scroll bar (relative to window position)
  6100                              <1> ;	dh    -> height of the scroll bar ( vertical bar, dl = 0 )
  6101                              <1> ;	dl    -> length of the scroll bar ( horizontal bar, dh = 0 )
  6102                              <1> ; output:
  6103                              <1> ;	none
  6104                              <1> ;=============================================================================
  6105                              <1> window_draw_scrollbar:
  6106 00002280 60                  <1> 	pusha
  6107                              <1> 
  6108                              <1> ; ================== do some initialization. ==================
  6109 00002281 51                  <1> 	push cx
  6110 00002282 31C9                <1> 	xor cx, cx
  6111 00002284 880E[2223]          <1> 	mov [.bar_type], cl
  6112 00002288 FEC1                <1> 	inc cl
  6113                              <1> 
  6114 0000228A 08F6                <1> 	or dh, dh
  6115 0000228C 7406                <1> 	jz .horiz1
  6116 0000228E 880E[2223]          <1> 	mov [.bar_type], cl
  6117 00002292 86D6                <1> 	xchg dl, dh
  6118                              <1> .horiz1:
  6119                              <1> 
  6120 00002294 8816[2323]          <1> 	mov [.bar_length], dl
  6121 00002298 5A                  <1> 	pop dx
  6122                              <1> 
  6123 00002299 50                  <1> 	push ax
  6124 0000229A 52                  <1> 	push dx
  6125                              <1> 
  6126                              <1> ; ==================== draw blank bar =================
  6127 0000229B 8A26[2323]          <1> 	mov ah, [.bar_length]
  6128 0000229F B020                <1> 	mov al, ' '
  6129                              <1> 
  6130                              <1> .loop_draw_blank:
  6131 000022A1 E8C0FF              <1> 	call window_draw_char
  6132 000022A4 FECC                <1> 	dec ah
  6133                              <1> 
  6134 000022A6 803E[2223]00        <1> 	cmp byte [.bar_type], 0
  6135 000022AB 7405                <1> 	jz .horiz2
  6136 000022AD FEC6                <1> 	inc dh
  6137 000022AF E90200              <1> 	jmp near .cont_draw_blank
  6138                              <1> .horiz2:
  6139 000022B2 FEC2                <1> 	inc dl
  6140                              <1> 
  6141                              <1> .cont_draw_blank:
  6142 000022B4 08E4                <1> 	or ah, ah
  6143 000022B6 75E9                <1> 	jnz .loop_draw_blank
  6144                              <1> 
  6145 000022B8 803E[2223]00        <1> 	cmp byte [.bar_type], 0
  6146 000022BD 7406                <1> 	jz .horiz3
  6147 000022BF B81E1F              <1> 	mov ax, 0x1f1e
  6148 000022C2 E90300              <1> 	jmp near .draw_arrow
  6149                              <1> .horiz3:
  6150 000022C5 B83C3E              <1> 	mov ax, '<>'
  6151                              <1> 
  6152                              <1> .draw_arrow:
  6153 000022C8 5A                  <1> 	pop dx
  6154 000022C9 52                  <1> 	push dx
  6155                              <1> 
  6156 000022CA E897FF              <1> 	call window_draw_char
  6157 000022CD 86C4                <1> 	xchg al, ah
  6158                              <1> 
  6159 000022CF 803E[2223]00        <1> 	cmp byte [.bar_type], 0
  6160 000022D4 7409                <1> 	jz .horiz4
  6161 000022D6 0236[2323]          <1> 	add dh, [.bar_length]
  6162 000022DA FECE                <1> 	dec dh
  6163 000022DC E90600              <1> 	jmp near .draw_end_arrow
  6164                              <1> .horiz4:
  6165 000022DF 0216[2323]          <1> 	add dl, [.bar_length]
  6166 000022E3 FECA                <1> 	dec dl
  6167                              <1> .draw_end_arrow:
  6168                              <1> 
  6169 000022E5 E87CFF              <1> 	call window_draw_char
  6170 000022E8 5A                  <1> 	pop dx
  6171                              <1> 
  6172                              <1> ; ================= draw scroll block ===============
  6173 000022E9 59                  <1> 	pop cx
  6174 000022EA 380E[2323]          <1> 	cmp [.bar_length], cl
  6175 000022EE 7330                <1> 	jae .no_cursor
  6176 000022F0 803E[2323]03        <1> 	cmp byte [.bar_length], 3
  6177 000022F5 7229                <1> 	jb .no_cursor
  6178                              <1> 
  6179 000022F7 0FB6C5              <1> 	movzx ax, ch			; block position =
  6180 000022FA 8A2E[2323]          <1> 	mov ch, [.bar_length]		; cur value * bar length / value max
  6181 000022FE 80ED02              <1> 	sub ch, 2			; 
  6182 00002301 F6E5                <1> 	mul ch				;
  6183 00002303 F6F1                <1> 	div cl				;
  6184                              <1> 
  6185 00002305 803E[2223]00        <1> 	cmp byte [.bar_type], 0
  6186 0000230A 7407                <1> 	jz .horiz5
  6187 0000230C 00C6                <1> 	add dh, al
  6188 0000230E FEC6                <1> 	inc dh
  6189 00002310 E90400              <1> 	jmp near .draw_scroll_block
  6190                              <1> .horiz5:
  6191 00002313 00C2                <1> 	add dl, al
  6192 00002315 FEC2                <1> 	inc dl
  6193                              <1> 
  6194                              <1> .draw_scroll_block:
  6195 00002317 B04F                <1> 	mov al, 'O'
  6196 00002319 31C9                <1> 	xor cx, cx
  6197 0000231B FEC1                <1> 	inc cl
  6198 0000231D E844FF              <1> 	call window_draw_char
  6199                              <1> 
  6200                              <1> .no_cursor:
  6201 00002320 61                  <1> 	popa
  6202 00002321 C3                  <1> 	ret
  6203                              <1> 
  6204 00002322 00                  <1> .bar_type	db 0		; 1 = vertical, 0 =horizontal
  6205 00002323 00                  <1> .bar_length	db 0
  6206                              <1> 
  6207                              <1> 
  6208                              <1> ;=============================================================================
  6209                              <1> ; window_initialize ---- initialize the window system.
  6210                              <1> ; input:
  6211                              <1> ;	none
  6212                              <1> ; output:
  6213                              <1> ;	none
  6214                              <1> ;=============================================================================
  6215                              <1> window_initialize:
  6216 00002324 60                  <1> 	pusha
  6217 00002325 30C0                <1> 	xor al, al
  6218 00002327 BF[2B30]            <1> 	mov di, ui_tmp.def_root_win
  6219 0000232A B91A00              <1> 	mov cx, SIZE_OF_STRUC_WINDOW
  6220 0000232D E82608              <1> 	call clear_memory
  6221 00002330 C60509              <1> 	mov byte [di], WINFLAG_OPEN | WINFLAG_NO_FOCUS
  6222 00002333 C74518[4423]        <1> 	mov word [di + struc_window.draw_body_proc], window_clear_win_area
  6223 00002338 A1[1926]            <1> 	mov ax, [ui_screen_size]
  6224 0000233B 894508              <1> 	mov [di + struc_window.win_size], ax
  6225                              <1> 
  6226 0000233E 893E[2930]          <1> 	mov [ui_tmp.root_win], di
  6227 00002342 61                  <1> 	popa
  6228 00002343 C3                  <1> 	ret
  6229                              <1> 
  6230                              <1> 
  6231                              <1> ;=============================================================================
  6232                              <1> ; window_clear_win_area:
  6233                              <1> ; input:
  6234                              <1> ;	ds:si -> root win
  6235                              <1> ; output:
  6236                              <1> ;	none
  6237                              <1> ;=============================================================================
  6238                              <1> window_clear_win_area:
  6239 00002344 60                  <1> 	pusha
  6240 00002345 8B4C06              <1> 	mov cx, [si + struc_window.win_pos]
  6241 00002348 8B5408              <1> 	mov dx, [si + struc_window.win_size]
  6242 0000234B 01CA                <1> 	add dx, cx
  6243 0000234D 81EA0101            <1> 	sub dx, 0x0101
  6244 00002351 8A7C04              <1> 	mov bh, [si + struc_window.win_attr]
  6245 00002354 E888F6              <1> 	call clear_screen
  6246 00002357 61                  <1> 	popa
  6247 00002358 C3                  <1> 	ret
  6248                              <1> 
  6249                              <1> ;=============================================================================
  6250                              <1> ; window_execute ---- execute the  window system, no return.
  6251                              <1> ; input:
  6252                              <1> ;	ds:bx -> pointer to root window
  6253                              <1> ;	ds:si -> pointer to current window
  6254                              <1> ; output:
  6255                              <1> ;	none
  6256                              <1> ;=============================================================================
  6257                              <1> window_execute:
  6258 00002359 09DB                <1> 	or bx, bx
  6259 0000235B 7503                <1> 	jnz .has_root
  6260 0000235D BB[2B30]            <1> 	mov bx, ui_tmp.def_root_win
  6261                              <1> .has_root:
  6262 00002360 09F6                <1> 	or si, si
  6263 00002362 742E                <1> 	jz .end
  6264                              <1> 
  6265 00002364 87F3                <1> 	xchg si, bx
  6266 00002366 E8B001              <1> 	call winlist_setroot
  6267 00002369 E896FE              <1> 	call window_draw_window
  6268 0000236C 87F3                <1> 	xchg si, bx
  6269                              <1> 
  6270                              <1> .loop_exec:
  6271 0000236E F60408              <1> 	test byte [si], WINFLAG_NO_FOCUS
  6272 00002371 7510                <1> 	jnz .find_focusable
  6273                              <1> 
  6274 00002373 E81D00              <1> 	call window_run
  6275 00002376 8B36[2730]          <1> 	mov si, [ui_tmp.focus_win]
  6276 0000237A 09F6                <1> 	or si, si
  6277 0000237C 7414                <1> 	jz .end
  6278                              <1> 
  6279 0000237E E84D02              <1> 	call winlist_findwin
  6280 00002381 7208                <1> 	jc .reset_focus
  6281                              <1> 
  6282                              <1> .find_focusable:
  6283 00002383 E85E02              <1> 	call winlist_find_focusable
  6284 00002386 09F6                <1> 	or si, si
  6285 00002388 75E4                <1> 	jnz .loop_exec
  6286 0000238A C3                  <1> 	ret
  6287                              <1> 
  6288                              <1> .reset_focus:
  6289 0000238B E8FA01              <1> 	call winlist_findtop
  6290 0000238E 89FE                <1> 	mov si, di
  6291 00002390 EBDC                <1> 	jmp short .loop_exec
  6292                              <1> .end:
  6293 00002392 C3                  <1> 	ret
  6294                              <1> 
  6295                              <1> ;=============================================================================
  6296                              <1> ; window_run ---- run a window, open it, and loop get key until the window
  6297                              <1> ;                 is closed (WINFLAG_OPEN is cleared). It passes the key to 
  6298                              <1> ;                 function window_event_handle. If window_event_handle failed
  6299                              <1> ;                 to handle this key, then the key will be passed to its 
  6300                              <1> ;                 parent window.
  6301                              <1> ; input:
  6302                              <1> ;	ds:si -> pointer to struc_window
  6303                              <1> ; output:
  6304                              <1> ;	none
  6305                              <1> ;=============================================================================
  6306                              <1> window_run:
  6307 00002393 E83802              <1> 	call winlist_findwin
  6308 00002396 720E                <1> 	jc .run_this_win
  6309                              <1> 
  6310 00002398 F6440101            <1> 	test byte [si + 1], WINFLAG_HI_RUNNING
  6311 0000239C 7408                <1> 	jz .run_this_win
  6312                              <1> 
  6313 0000239E 8936[2730]          <1> 	mov [ui_tmp.focus_win], si
  6314 000023A2 E8F501              <1> 	call winlist_raise
  6315 000023A5 C3                  <1> 	ret
  6316                              <1> 
  6317                              <1> .run_this_win:
  6318 000023A6 60                  <1> 	pusha
  6319 000023A7 804C0101            <1> 	or byte [si + 1], WINFLAG_HI_RUNNING
  6320                              <1> 
  6321 000023AB FF36[2730]          <1> 	push word [ui_tmp.focus_win]
  6322 000023AF E82D00              <1> 	call window_open
  6323                              <1> 
  6324                              <1> .loop_run:	
  6325 000023B2 3936[2730]          <1> 	cmp [ui_tmp.focus_win], si		; if current win is switched
  6326 000023B6 7520                <1> 	jne .end_run				; just return.
  6327                              <1> 
  6328 000023B8 E85DF2              <1> 	call get_event
  6329 000023BB 80FCF0              <1> 	cmp ah, EVTCODE_COMMAND
  6330 000023BE 720A                <1> 	jb .keycode
  6331 000023C0 F6C404              <1> 	test ah, EVTCODE_BROADCAST
  6332 000023C3 7405                <1> 	jz .keycode
  6333 000023C5 E83002              <1> 	call winlist_broadcast_event
  6334 000023C8 EB03                <1> 	jmp short .cont_run
  6335                              <1> .keycode:
  6336 000023CA E8E300              <1> 	call window_event_dispatcher
  6337                              <1> .cont_run:
  6338 000023CD F60401              <1> 	test byte [si], WINFLAG_OPEN
  6339 000023D0 75E0                <1> 	jnz .loop_run
  6340                              <1> 
  6341 000023D2 8F06[2730]          <1> 	pop word [ui_tmp.focus_win]		; if window is closed, restore
  6342 000023D6 EB01                <1> 	jmp short .end				; focus_win and return.
  6343                              <1> 
  6344                              <1> .end_run:
  6345 000023D8 58                  <1> 	pop ax
  6346                              <1> .end:
  6347 000023D9 806401FE            <1> 	and byte [si + 1], ~ WINFLAG_HI_RUNNING
  6348 000023DD 61                  <1> 	popa
  6349 000023DE C3                  <1> 	ret
  6350                              <1> 
  6351                              <1> 
  6352                              <1> ;=============================================================================
  6353                              <1> ; window_open ---- open a window, draw the window and set flag WINFLAG_OPEN, 
  6354                              <1> ;                  and insert it into the windows list.
  6355                              <1> ; input:
  6356                              <1> ;	ds:si -> pointer to struc_window
  6357                              <1> ; output:
  6358                              <1> ;	none
  6359                              <1> ;=============================================================================
  6360                              <1> window_open:
  6361 000023DF 60                  <1> 	pusha
  6362 000023E0 E8B701              <1> 	call winlist_raise
  6363 000023E3 800C01              <1> 	or byte [si], WINFLAG_OPEN
  6364 000023E6 E8B801              <1> 	call winlist_set_focus_win
  6365 000023E9 61                  <1> 	popa
  6366 000023EA C3                  <1> 	ret
  6367                              <1> 
  6368                              <1> ;=============================================================================
  6369                              <1> ; window_close ---- close a window, clear flag WINFLAG_OPEN, and remove it
  6370                              <1> ;                   from the windows list.
  6371                              <1> ; input:
  6372                              <1> ;	ds:si -> pointer to struc_window
  6373                              <1> ; output:
  6374                              <1> ;	none
  6375                              <1> ;=============================================================================
  6376                              <1> window_close:
  6377 000023EB 60                  <1> 	pusha
  6378 000023EC E86901              <1> 	call winlist_remove
  6379 000023EF 8024FE              <1> 	and byte [si], ~ WINFLAG_OPEN
  6380 000023F2 E8D8FD              <1> 	call window_draw_all
  6381 000023F5 61                  <1> 	popa
  6382 000023F6 C3                  <1> 	ret
  6383                              <1> 
  6384                              <1> ;=============================================================================
  6385                              <1> ; window_move_up ---- move the window up one row
  6386                              <1> ; input:
  6387                              <1> ;	ds:si -> pointer to struc_window
  6388                              <1> ; output:
  6389                              <1> ;	none
  6390                              <1> ;=============================================================================
  6391                              <1> window_move_up:
  6392 000023F7 50                  <1> 	push ax
  6393 000023F8 8A4407              <1> 	mov al, [si + struc_window.win_pos + 1]
  6394 000023FB 08C0                <1> 	or al, al
  6395 000023FD 7405                <1> 	jz .no_move
  6396 000023FF FEC8                <1> 	dec al
  6397 00002401 884407              <1> 	mov [si + struc_window.win_pos + 1], al
  6398                              <1> .no_move:
  6399 00002404 58                  <1> 	pop ax
  6400 00002405 C3                  <1> 	ret
  6401                              <1> 
  6402                              <1> ;=============================================================================
  6403                              <1> ; window_move_down ---- move the window down one row
  6404                              <1> ; input:
  6405                              <1> ;	ds:si -> pointer to struc_window
  6406                              <1> ; output:
  6407                              <1> ;	none
  6408                              <1> ;=============================================================================
  6409                              <1> window_move_down:
  6410 00002406 50                  <1> 	push ax
  6411 00002407 8A4407              <1> 	mov al, [si + struc_window.win_pos + 1]
  6412 0000240A 8A26[1A26]          <1> 	mov ah, [ui_screen_height]
  6413 0000240E FECC                <1> 	dec ah
  6414                              <1> 
  6415 00002410 38E0                <1> 	cmp al, ah
  6416 00002412 7305                <1> 	jae .no_move
  6417 00002414 FEC0                <1> 	inc al
  6418 00002416 884407              <1> 	mov [si + struc_window.win_pos + 1], al
  6419                              <1> .no_move:
  6420 00002419 58                  <1> 	pop ax
  6421 0000241A C3                  <1> 	ret
  6422                              <1> 
  6423                              <1> 
  6424                              <1> ;=============================================================================
  6425                              <1> ; window_move_left ---- move the window left one column
  6426                              <1> ; input:
  6427                              <1> ;	ds:si -> pointer to struc_window
  6428                              <1> ; output:
  6429                              <1> ;	none
  6430                              <1> ;=============================================================================
  6431                              <1> window_move_left:
  6432 0000241B 50                  <1> 	push ax
  6433 0000241C 8A4406              <1> 	mov al, [si + struc_window.win_pos]
  6434 0000241F 08C0                <1> 	or al, al
  6435 00002421 7405                <1> 	jz .no_move
  6436 00002423 FEC8                <1> 	dec al
  6437 00002425 884406              <1> 	mov [si + struc_window.win_pos], al
  6438                              <1> .no_move:
  6439 00002428 58                  <1> 	pop ax
  6440 00002429 C3                  <1> 	ret
  6441                              <1> 
  6442                              <1> 
  6443                              <1> ;=============================================================================
  6444                              <1> ; window_move_right ---- move the window right one column
  6445                              <1> ; input:
  6446                              <1> ;	ds:si -> pointer to struc_window
  6447                              <1> ; output:
  6448                              <1> ;	none
  6449                              <1> ;=============================================================================
  6450                              <1> window_move_right:
  6451 0000242A 50                  <1> 	push ax
  6452 0000242B 8A4406              <1> 	mov al, [si + struc_window.win_pos]
  6453 0000242E 8A26[1926]          <1> 	mov ah, [ui_screen_width]
  6454 00002432 2A6408              <1> 	sub ah, [si + struc_window.win_size]
  6455 00002435 80EC02              <1> 	sub ah, 2
  6456                              <1> 
  6457 00002438 38E0                <1> 	cmp al, ah
  6458 0000243A 7305                <1> 	jae .no_move
  6459 0000243C FEC0                <1> 	inc al
  6460 0000243E 884406              <1> 	mov [si + struc_window.win_pos], al
  6461                              <1> .no_move:
  6462 00002441 58                  <1> 	pop ax
  6463 00002442 C3                  <1> 	ret
  6464                              <1> 
  6465                              <1> 
  6466                              <1> ;=============================================================================
  6467                              <1> ; window_switch_window ---- switch to the next window
  6468                              <1> ; input:
  6469                              <1> ;	ds:si -> pointer to current window
  6470                              <1> ; output:
  6471                              <1> ;	none
  6472                              <1> ;=============================================================================
  6473                              <1> window_switch_window:
  6474 00002443 60                  <1> 	pusha
  6475 00002444 F60402              <1> 	test byte [si], WINFLAG_MODAL
  6476 00002447 7511                <1> 	jnz .no_switch
  6477 00002449 E88201              <1> 	call winlist_findwin
  6478 0000244C 720C                <1> 	jc .no_switch
  6479 0000244E 8B36[2930]          <1> 	mov si, [ui_tmp.root_win]
  6480 00002452 09F6                <1> 	or si, si
  6481 00002454 7404                <1> 	jz .no_switch
  6482                              <1> 
  6483 00002456 8936[2730]          <1> 	mov [ui_tmp.focus_win], si
  6484                              <1> 
  6485                              <1> .no_switch:
  6486 0000245A 61                  <1> 	popa
  6487 0000245B C3                  <1> 	ret
  6488                              <1> 
  6489                              <1> ;=============================================================================
  6490                              <1> ; move a window to center of the screen.
  6491                              <1> ;input:
  6492                              <1> ;	ds:si -> pointer to window
  6493                              <1> ;output:
  6494                              <1> ;	none
  6495                              <1> ;=============================================================================
  6496                              <1> window_center_window:
  6497 0000245C 60                  <1> 	pusha
  6498 0000245D 8B5408              <1> 	mov dx, [si + struc_window.win_size]
  6499 00002460 8B0E[1926]          <1> 	mov cx, [ui_screen_size]                   ; calculate the coordinate
  6500                              <1> 
  6501 00002464 28F5                <1> 	sub ch, dh                              ; of input box.
  6502 00002466 D0ED                <1> 	shr ch, 1                               ; cx = top left pos
  6503 00002468 28D1                <1> 	sub cl, dl                              ; 
  6504 0000246A D0E9                <1> 	shr cl, 1                               ;
  6505                              <1> 
  6506 0000246C 894C06              <1> 	mov [si + struc_window.win_pos], cx
  6507 0000246F 61                  <1> 	popa
  6508 00002470 C3                  <1> 	ret
  6509                              <1> 
  6510                              <1> 
  6511                              <1> ;=============================================================================
  6512                              <1> ; window_default_event_handle ---- default event handle for a normal window, it
  6513                              <1> ;                           handles some normal events, such as move window.
  6514                              <1> ; input:
  6515                              <1> ;	ax    -> keycode
  6516                              <1> ;	ds:si -> pointer to struc_window
  6517                              <1> ; output:
  6518                              <1> ;	cf = 0, success
  6519                              <1> ;	cf = 1, fail, no such action
  6520                              <1> ;=============================================================================
  6521                              <1> window_default_event_handle:
  6522 00002471 60                  <1> 	pusha
  6523 00002472 B90E00              <1> 	mov cx, WINDOW_DEF_ACTION_NUM
  6524 00002475 BB[1F26]            <1> 	mov bx, window_def_action_table
  6525 00002478 E81C00              <1> 	call window_generic_event_handle
  6526 0000247B 61                  <1> 	popa
  6527 0000247C C3                  <1> 	ret
  6528                              <1> 
  6529                              <1> ;=============================================================================
  6530                              <1> ; window_event_handle ----  event handle for a normal window, it finds 
  6531                              <1> ;                           the corresponding action for a key event from
  6532                              <1> ;                           action_table then call window_do_action to run it.
  6533                              <1> ;                           If the event is not in action_table, then
  6534                              <1> ;                           .defkey_handle will be called to handle it.
  6535                              <1> ; input:
  6536                              <1> ;	ax    -> keycode
  6537                              <1> ;	ds:si -> pointer to struc_window
  6538                              <1> ; output:
  6539                              <1> ;	cf = 0, success
  6540                              <1> ;	cf = 1, fail, no such action
  6541                              <1> ;=============================================================================
  6542                              <1> window_event_handle:
  6543 0000247D 60                  <1> 	pusha
  6544 0000247E 8B5C12              <1> 	mov bx, [si + struc_window.act_table]
  6545 00002481 8B4C10              <1> 	mov cx, [si + struc_window.act_num]
  6546 00002484 E81000              <1> 	call window_generic_event_handle
  6547 00002487 730C                <1> 	jnc .success
  6548 00002489 8B5C14              <1> 	mov bx, [si + struc_window.default_event_handle]
  6549 0000248C 09DB                <1> 	or bx, bx
  6550 0000248E 7404                <1> 	jz .failed
  6551 00002490 FFD3                <1> 	call bx
  6552 00002492 7301                <1> 	jnc .success
  6553                              <1> .failed:
  6554 00002494 F9                  <1> 	stc
  6555                              <1> .success:
  6556 00002495 61                  <1> 	popa
  6557 00002496 C3                  <1> 	ret
  6558                              <1> 
  6559                              <1> ;=============================================================================
  6560                              <1> ; window_generic_event_handle ---- generic event handle, it find a key from 
  6561                              <1> ;                                  an action list, then run it.
  6562                              <1> ; input:
  6563                              <1> ;	ax    -> keycode
  6564                              <1> ;	ds:si -> pointer to struc_window
  6565                              <1> ;	ds:bx -> action list
  6566                              <1> ;	cx    -> action number
  6567                              <1> ; output:
  6568                              <1> ;	cf = 0, success
  6569                              <1> ;	cf = 1, fail, no such action
  6570                              <1> ;=============================================================================
  6571                              <1> window_generic_event_handle:
  6572 00002497 09C9                <1> 	or cx, cx
  6573 00002499 7413                <1> 	jz .no_action
  6574 0000249B 09DB                <1> 	or bx, bx
  6575 0000249D 740F                <1> 	jz .no_action
  6576                              <1> 
  6577                              <1> .loop_find_act:
  6578 0000249F 394701              <1> 	cmp [bx + struc_action.keycode], ax
  6579 000024A2 7505                <1> 	jne .cont_find
  6580 000024A4 E82600              <1> 	call window_do_action
  6581 000024A7 F8                  <1> 	clc
  6582 000024A8 C3                  <1> 	ret
  6583                              <1> 
  6584                              <1> .cont_find:
  6585 000024A9 83C305              <1> 	add bx, SIZE_OF_STRUC_ACTION
  6586 000024AC E2F1                <1> 	loop .loop_find_act
  6587                              <1> 
  6588                              <1> .no_action:
  6589 000024AE F9                  <1> 	stc
  6590 000024AF C3                  <1> 	ret
  6591                              <1> 
  6592                              <1> ;=============================================================================
  6593                              <1> ; window_event_dispatcher ---- dispatch event to event handle 
  6594                              <1> ; input:
  6595                              <1> ;	ax    -> keycode
  6596                              <1> ;	ds:si -> pointer to struc_window
  6597                              <1> ; output:
  6598                              <1> ;	cf = 0, success
  6599                              <1> ;	cf = 1, fail, no such action
  6600                              <1> ;=============================================================================
  6601                              <1> window_event_dispatcher:
  6602 000024B0 60                  <1> 	pusha
  6603 000024B1 8B5C16              <1> 	mov bx, [si + struc_window.event_handle]
  6604 000024B4 09DB                <1> 	or bx, bx
  6605 000024B6 7406                <1> 	jz .no_event_handle
  6606                              <1> 
  6607 000024B8 56                  <1> 	push si
  6608 000024B9 FFD3                <1> 	call bx
  6609 000024BB 5E                  <1> 	pop si
  6610                              <1> 
  6611 000024BC 730D                <1> 	jnc .action_ok
  6612                              <1> 
  6613                              <1> .no_event_handle:
  6614 000024BE 8B740A              <1> 	mov si, [si + struc_window.parent_win]
  6615 000024C1 09F6                <1> 	or si, si
  6616 000024C3 7405                <1> 	jz .no_parent
  6617 000024C5 E8E8FF              <1> 	call window_event_dispatcher
  6618 000024C8 7301                <1> 	jnc .action_ok
  6619                              <1> 
  6620                              <1> .no_parent:
  6621 000024CA F9                  <1> 	stc
  6622                              <1> 
  6623                              <1> .action_ok:
  6624 000024CB 61                  <1> 	popa
  6625 000024CC C3                  <1> 	ret
  6626                              <1> 
  6627                              <1> ;=============================================================================
  6628                              <1> ; window_do_action ---- do a window action
  6629                              <1> ; input:
  6630                              <1> ;	ax    =  event code
  6631                              <1> ;	ds:si -> pointer to struc_window
  6632                              <1> ;	ds:bx -> pointer to struc_action
  6633                              <1> ; output:
  6634                              <1> ;	none
  6635                              <1> ;=============================================================================
  6636                              <1> window_do_action:
  6637 000024CD 60                  <1> 	pusha
  6638                              <1> 
  6639 000024CE 09F6                <1> 	or si, si
  6640 000024D0 7445                <1> 	jz .end
  6641 000024D2 09DB                <1> 	or bx, bx
  6642 000024D4 7441                <1> 	jz .end
  6643                              <1> 
  6644 000024D6 8A17                <1> 	mov dl, [bx]
  6645                              <1> 
  6646 000024D8 F6C2F0              <1> 	test dl, ACTFLAG_AUTHS		; check action flags
  6647 000024DB 7409                <1> 	jz .no_auth
  6648                              <1> 
  6649 000024DD 60                  <1> 	pusha
  6650 000024DE 88D0                <1> 	mov al, dl
  6651 000024E0 E881F1              <1> 	call main_auth_action		; check if the action is ready to do
  6652                              <1> 					; al = auth type
  6653 000024E3 61                  <1> 	popa
  6654 000024E4 720B                <1> 	jc .no_action
  6655                              <1> 
  6656                              <1> .no_auth:
  6657 000024E6 8B5F03              <1> 	mov bx, [bx + struc_action.func]
  6658 000024E9 09DB                <1> 	or bx, bx
  6659 000024EB 7404                <1> 	jz .no_action
  6660                              <1> 
  6661 000024ED 60                  <1> 	pusha
  6662 000024EE FFD3                <1> 	call bx				; do the action
  6663 000024F0 61                  <1> 	popa
  6664                              <1> 
  6665                              <1> .no_action:
  6666                              <1> 
  6667 000024F1 F6C201              <1> 	test dl, ACTFLAG_CLOSE_WIN
  6668 000024F4 7405                <1> 	jz .no_close
  6669 000024F6 E8F2FE              <1> 	call window_close
  6670 000024F9 EB1C                <1> 	jmp short .end
  6671                              <1> .no_close:
  6672 000024FB F6C202              <1> 	test dl, ACTFLAG_REDRAW_BODY
  6673 000024FE 7405                <1> 	jz .no_redraw_body
  6674 00002500 E8DEFC              <1> 	call window_draw_body
  6675 00002503 EB12                <1> 	jmp short .end
  6676                              <1> .no_redraw_body:
  6677 00002505 F6C204              <1> 	test dl, ACTFLAG_REDRAW_WIN
  6678 00002508 7405                <1> 	jz .no_redraw_win
  6679 0000250A E8F5FC              <1> 	call window_draw_window
  6680 0000250D EB08                <1> 	jmp short .end
  6681                              <1> .no_redraw_win:
  6682 0000250F F6C208              <1> 	test dl, ACTFLAG_REDRAW_SCR
  6683 00002512 7403                <1> 	jz .end
  6684 00002514 E8B6FC              <1> 	call window_draw_all
  6685                              <1> .end:
  6686 00002517 61                  <1> 	popa
  6687 00002518 C3                  <1> 	ret
  6688                              <1> 
  6689                              <1> ;=============================================================================
  6690                              <1> ; winlist_setroot ---- set root window
  6691                              <1> ; input:
  6692                              <1> ;	ds:si -> pointer to root window
  6693                              <1> ; output:
  6694                              <1> ;	none
  6695                              <1> ;=============================================================================
  6696                              <1> winlist_setroot:
  6697 00002519 53                  <1> 	push bx
  6698                              <1> 
  6699 0000251A 09F6                <1> 	or si, si
  6700 0000251C 741A                <1> 	jz .invalid_root
  6701                              <1> 
  6702 0000251E 8B1E[2930]          <1> 	mov bx, [ui_tmp.root_win]
  6703 00002522 09DB                <1> 	or bx, bx
  6704 00002524 7403                <1> 	jz .no_root
  6705 00002526 8B5F0C              <1> 	mov bx, [bx + struc_window.next_win]
  6706                              <1> 
  6707                              <1> .no_root:
  6708 00002529 8936[2930]          <1> 	mov [ui_tmp.root_win], si
  6709 0000252D 895C0C              <1> 	mov [si + struc_window.next_win], bx
  6710 00002530 31DB                <1> 	xor bx, bx
  6711 00002532 895C0E              <1> 	mov [si + struc_window.previous_win], bx
  6712 00002535 895C0A              <1> 	mov [si + struc_window.parent_win], bx
  6713                              <1> 
  6714                              <1> .invalid_root:
  6715 00002538 5B                  <1> 	pop bx
  6716 00002539 C3                  <1> 	ret
  6717                              <1> 
  6718                              <1> ;=============================================================================
  6719                              <1> ; winlist_insert ---- insert a window
  6720                              <1> ; input:
  6721                              <1> ;	ds:si -> pointer to the window
  6722                              <1> ; output:
  6723                              <1> ;	none
  6724                              <1> ;=============================================================================
  6725                              <1> winlist_insert:
  6726 0000253A 57                  <1> 	push di
  6727 0000253B 09F6                <1> 	or si, si
  6728 0000253D 7417                <1> 	jz .invalid_win
  6729 0000253F E88C00              <1> 	call winlist_findwin
  6730 00002542 7312                <1> 	jnc .invalid_win
  6731                              <1> 
  6732 00002544 E84100              <1> 	call winlist_findtop
  6733 00002547 09FF                <1> 	or di, di
  6734 00002549 740B                <1> 	jz .invalid_win
  6735                              <1> 
  6736 0000254B 89750C              <1> 	mov [di + struc_window.next_win], si
  6737 0000254E 897C0E              <1> 	mov [si + struc_window.previous_win], di
  6738 00002551 31FF                <1> 	xor di, di
  6739 00002553 897C0C              <1> 	mov [si + struc_window.next_win], di
  6740                              <1> 
  6741                              <1> .invalid_win:
  6742 00002556 5F                  <1> 	pop di
  6743 00002557 C3                  <1> 	ret
  6744                              <1> 
  6745                              <1> ;=============================================================================
  6746                              <1> ; winlist_remove ---- remove a window
  6747                              <1> ; input:
  6748                              <1> ;	ds:si -> pointer to the window
  6749                              <1> ; output:
  6750                              <1> ;	none
  6751                              <1> ;=============================================================================
  6752                              <1> winlist_remove:
  6753 00002558 09F6                <1> 	or si, si
  6754 0000255A 742B                <1> 	jz .invalid_win
  6755 0000255C 3936[2930]          <1> 	cmp [ui_tmp.root_win], si
  6756 00002560 7425                <1> 	je .invalid_win
  6757 00002562 E86900              <1> 	call winlist_findwin
  6758 00002565 7220                <1> 	jc .invalid_win
  6759                              <1> 
  6760 00002567 53                  <1> 	push bx
  6761 00002568 56                  <1> 	push si
  6762 00002569 8B5C0C              <1> 	mov bx, [si + struc_window.next_win]
  6763 0000256C 8B740E              <1> 	mov si ,[si + struc_window.previous_win]
  6764 0000256F 09DB                <1> 	or bx, bx
  6765 00002571 7403                <1> 	jz .no_next
  6766 00002573 89770E              <1> 	mov [bx + struc_window.previous_win], si
  6767                              <1> .no_next:
  6768 00002576 09F6                <1> 	or si, si
  6769 00002578 7403                <1> 	jz .no_previous
  6770 0000257A 895C0C              <1> 	mov [si + struc_window.next_win], bx
  6771                              <1> .no_previous:
  6772 0000257D 5E                  <1> 	pop si
  6773 0000257E 31DB                <1> 	xor bx, bx
  6774 00002580 895C0C              <1> 	mov [si + struc_window.next_win], bx
  6775 00002583 895C0E              <1> 	mov [si + struc_window.previous_win], bx
  6776 00002586 5B                  <1> 	pop bx
  6777                              <1> 
  6778                              <1> .invalid_win:
  6779 00002587 C3                  <1> 	ret
  6780                              <1> 
  6781                              <1> ;=============================================================================
  6782                              <1> ; winlist_findtop ---- find the top window
  6783                              <1> ; input:
  6784                              <1> ;	none
  6785                              <1> ; output:
  6786                              <1> ;	ds:di -> the top window
  6787                              <1> ;=============================================================================
  6788                              <1> winlist_findtop:
  6789 00002588 50                  <1> 	push ax
  6790 00002589 8B3E[2930]          <1> 	mov di, [ui_tmp.root_win]
  6791                              <1> 
  6792                              <1> .loop_find:
  6793 0000258D 8B450C              <1> 	mov ax, [di + struc_window.next_win]
  6794 00002590 09C0                <1> 	or ax, ax
  6795 00002592 7404                <1> 	jz .find_it
  6796 00002594 89C7                <1> 	mov di, ax
  6797 00002596 EBF5                <1> 	jmp short .loop_find
  6798                              <1> 
  6799                              <1> .find_it:
  6800 00002598 58                  <1> 	pop ax
  6801 00002599 C3                  <1> 	ret
  6802                              <1> 
  6803                              <1> ;=============================================================================
  6804                              <1> ; winlist_raise ---- raise a window to top
  6805                              <1> ; input:
  6806                              <1> ;	ds:si -> the window
  6807                              <1> ; output:
  6808                              <1> ;	none
  6809                              <1> ;=============================================================================
  6810                              <1> winlist_raise:
  6811 0000259A E8BBFF              <1> 	call winlist_remove
  6812 0000259D E89AFF              <1> 	call winlist_insert
  6813 000025A0 C3                  <1> 	ret
  6814                              <1> 
  6815                              <1> ;=============================================================================
  6816                              <1> ; winlist_set_focus_win ---- set the focus window
  6817                              <1> ; input:
  6818                              <1> ;	ds:si -> the window
  6819                              <1> ; output:
  6820                              <1> ;	none
  6821                              <1> ;=============================================================================
  6822                              <1> winlist_set_focus_win:
  6823 000025A1 53                  <1> 	push bx
  6824 000025A2 56                  <1> 	push si
  6825 000025A3 8B36[2730]          <1> 	mov si, [ui_tmp.focus_win]
  6826 000025A7 89F3                <1> 	mov bx, si
  6827 000025A9 E82200              <1> 	call winlist_findwin
  6828 000025AC 5E                  <1> 	pop si
  6829 000025AD 720A                <1> 	jc .ok
  6830                              <1> 
  6831 000025AF F60402              <1> 	test byte [si], WINFLAG_MODAL
  6832 000025B2 7505                <1> 	jnz .ok
  6833 000025B4 F60702              <1> 	test byte [bx], WINFLAG_MODAL
  6834 000025B7 7509                <1> 	jnz .end
  6835                              <1> 
  6836                              <1> .ok:
  6837 000025B9 E81200              <1> 	call winlist_findwin
  6838 000025BC 7204                <1> 	jc .end
  6839 000025BE 8936[2730]          <1> 	mov [ui_tmp.focus_win], si
  6840                              <1> .end:
  6841 000025C2 8B36[2730]          <1> 	mov si, [ui_tmp.focus_win]
  6842 000025C6 E8D1FF              <1> 	call winlist_raise
  6843 000025C9 E801FC              <1> 	call window_draw_all
  6844 000025CC 5B                  <1> 	pop bx
  6845 000025CD C3                  <1> 	ret
  6846                              <1> 
  6847                              <1> ;=============================================================================
  6848                              <1> ; winlist_findwin ---- find a window in winlist
  6849                              <1> ; input:
  6850                              <1> ;	ds:si -> the window
  6851                              <1> ; output:
  6852                              <1> ;	cf = 0  found
  6853                              <1> ;	cf = 1  not found
  6854                              <1> ;=============================================================================
  6855                              <1> winlist_findwin:
  6856 000025CE 53                  <1> 	push bx
  6857 000025CF 8B1E[2930]          <1> 	mov bx, [ui_tmp.root_win]
  6858                              <1> .loop_find:
  6859 000025D3 39F3                <1> 	cmp bx, si
  6860 000025D5 740A                <1> 	je .found
  6861 000025D7 8B5F0C              <1> 	mov bx, [bx + struc_window.next_win]
  6862 000025DA 09DB                <1> 	or bx, bx
  6863 000025DC 75F5                <1> 	jnz .loop_find
  6864 000025DE F9                  <1> 	stc
  6865 000025DF 5B                  <1> 	pop bx
  6866 000025E0 C3                  <1> 	ret
  6867                              <1> .found:
  6868 000025E1 F8                  <1> 	clc
  6869 000025E2 5B                  <1> 	pop bx
  6870 000025E3 C3                  <1> 	ret
  6871                              <1> 
  6872                              <1> ;=============================================================================
  6873                              <1> ; winlist_find_focusable ---- find a focusable window
  6874                              <1> ; input:
  6875                              <1> ;	ds:si -> the first win
  6876                              <1> ; output:
  6877                              <1> ;	ds:si -> the focusable win
  6878                              <1> ;=============================================================================
  6879                              <1> winlist_find_focusable:
  6880 000025E4 E8E7FF              <1> 	call winlist_findwin
  6881 000025E7 720C                <1> 	jc .failed
  6882                              <1> 
  6883                              <1> .loop_find:
  6884 000025E9 F60408              <1> 	test byte [si], WINFLAG_NO_FOCUS
  6885 000025EC 7409                <1> 	jz .found
  6886 000025EE 8B740C              <1> 	mov si, [si + struc_window.next_win]
  6887 000025F1 09F6                <1> 	or si, si
  6888 000025F3 75F4                <1> 	jnz .loop_find
  6889                              <1> .failed:
  6890 000025F5 31F6                <1> 	xor si, si
  6891                              <1> .found:
  6892 000025F7 C3                  <1> 	ret
  6893                              <1> 
  6894                              <1> 
  6895                              <1> ;=============================================================================
  6896                              <1> ; winlist_broadcast_event ---- broadcast an event to all opened windows
  6897                              <1> ; input:
  6898                              <1> ;	ax = event code
  6899                              <1> ; output:
  6900                              <1> ;	none
  6901                              <1> ;=============================================================================
  6902                              <1> winlist_broadcast_event:
  6903 000025F8 60                  <1> 	pusha
  6904 000025F9 8B36[2930]          <1> 	mov si, [ui_tmp.root_win]
  6905                              <1> 
  6906                              <1> .loop_broadcast:
  6907 000025FD E8B0FE              <1> 	call window_event_dispatcher
  6908 00002600 7307                <1> 	jnc .end
  6909 00002602 8B740C              <1> 	mov si, [si + struc_window.next_win]
  6910 00002605 09F6                <1> 	or si, si
  6911 00002607 75F4                <1> 	jnz .loop_broadcast
  6912                              <1> .end:
  6913 00002609 61                  <1> 	popa
  6914 0000260A C3                  <1> 	ret
  6915                              <1> 
  6916                              <1> 
  6917                              <1> 
  6918                              <1> 
  6919                              <1> ;=============================================================================
  6920                              <1> ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Private Data Area >>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  6921                              <1> ;=============================================================================
  6922 0000260B 006B0159025A038E04- <1> ui_VideoHorizParams dw 0x6B00,0x5901,0x5A02,0x8E03,0x5F04,0x8C05,0x2D13 ;8-wide
  6923 00002614 5F058C132D          <1>
  6924                              <1> 
  6925                              <1> ui_screen_size:
  6926 00002619 5A                  <1> ui_screen_width     db     90
  6927 0000261A 19                  <1> ui_screen_height    db     25
  6928                              <1> 
  6929 0000261B 00B8                <1> ui_screen_bufseg     dw     SCR_BUF_SEG0
  6930 0000261D 00                  <1> ui_screen_page       db     0
  6931 0000261E 00                  <1> ui_screen_lock       db     0
  6932                              <1> 
  6933                              <1> 
  6934                              <1> window_def_action_table:
  6935 0000261F 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  6936 00002620 008D                <1> 	dw	kbCtrlUp
  6937 00002622 [F723]              <1> 	dw	window_move_up
  6938                              <1> 
  6939 00002624 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  6940 00002625 E08D                <1> 	dw	kbEnhCtrlUp
  6941 00002627 [F723]              <1> 	dw	window_move_up
  6942                              <1> 
  6943 00002629 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  6944 0000262A E047                <1> 	dw	kbEnhHome
  6945 0000262C [F723]              <1> 	dw	window_move_up
  6946                              <1> 
  6947 0000262E 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  6948 0000262F 0091                <1> 	dw	kbCtrlDown
  6949 00002631 [0624]              <1> 	dw	window_move_down
  6950                              <1> 
  6951 00002633 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  6952 00002634 E091                <1> 	dw	kbEnhCtrlDown
  6953 00002636 [0624]              <1> 	dw	window_move_down
  6954                              <1> 
  6955 00002638 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  6956 00002639 E04F                <1> 	dw	kbEnhEnd
  6957 0000263B [0624]              <1> 	dw	window_move_down
  6958                              <1> 
  6959 0000263D 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  6960 0000263E 0073                <1> 	dw	kbCtrlLeft
  6961 00002640 [1B24]              <1> 	dw	window_move_left
  6962                              <1> 
  6963 00002642 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  6964 00002643 E073                <1> 	dw	kbEnhCtrlLeft
  6965 00002645 [1B24]              <1> 	dw	window_move_left
  6966                              <1> 
  6967 00002647 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  6968 00002648 E053                <1> 	dw	kbEnhDel
  6969 0000264A [1B24]              <1> 	dw	window_move_left
  6970                              <1> 
  6971 0000264C 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  6972 0000264D 0074                <1> 	dw	kbCtrlRight
  6973 0000264F [2A24]              <1> 	dw	window_move_right
  6974                              <1> 
  6975 00002651 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  6976 00002652 E074                <1> 	dw	kbEnhCtrlRight
  6977 00002654 [2A24]              <1> 	dw	window_move_right
  6978                              <1> 
  6979 00002656 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  6980 00002657 E051                <1> 	dw	kbEnhPgDn
  6981 00002659 [2A24]              <1> 	dw	window_move_right
  6982                              <1> 
  6983 0000265B 00                  <1> 	db	0
  6984 0000265C 0094                <1> 	dw	kbCtrlTab
  6985 0000265E [4324]              <1> 	dw	window_switch_window
  6986                              <1> 
  6987 00002660 00                  <1> 	db	0
  6988 00002661 00A5                <1> 	dw	kbAltTab
  6989 00002663 [4324]              <1> 	dw	window_switch_window
  6990                              <1> .end_of_table
  6991                              <1> 
  6992                              <1> inputbox_action_table:
  6993 00002665 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  6994 00002666 080E                <1> 	dw	kbBack
  6995 00002668 [DF1D]              <1> 	dw	inputbox_backspace
  6996                              <1> 
  6997 0000266A 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  6998 0000266B 0053                <1> 	dw	kbDel
  6999 0000266D [F91D]              <1> 	dw	inputbox_delete
  7000                              <1> 
  7001 0000266F 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7002 00002670 E053                <1> 	dw	kbEnhDel
  7003 00002672 [F91D]              <1> 	dw	inputbox_delete
  7004                              <1> 
  7005 00002674 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7006 00002675 0047                <1> 	dw	kbHome
  7007 00002677 [301E]              <1> 	dw	inputbox_home_key
  7008                              <1> 
  7009 00002679 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7010 0000267A E047                <1> 	dw	kbEnhHome
  7011 0000267C [301E]              <1> 	dw	inputbox_home_key
  7012                              <1> 
  7013 0000267E 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7014 0000267F 004F                <1> 	dw	kbEnd
  7015 00002681 [261E]              <1> 	dw	inputbox_end_key
  7016                              <1> 
  7017 00002683 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7018 00002684 E04F                <1> 	dw	kbEnhEnd
  7019 00002686 [261E]              <1> 	dw	inputbox_end_key
  7020                              <1> 
  7021 00002688 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7022 00002689 004B                <1> 	dw	kbLeft
  7023 0000268B [191E]              <1> 	dw	inputbox_left_arrow
  7024                              <1> 
  7025 0000268D 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7026 0000268E E04B                <1> 	dw	kbEnhLeft
  7027 00002690 [191E]              <1> 	dw	inputbox_left_arrow
  7028                              <1> 
  7029 00002692 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7030 00002693 004D                <1> 	dw	kbRight
  7031 00002695 [0A1E]              <1> 	dw	inputbox_right_arrow
  7032                              <1> 
  7033 00002697 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7034 00002698 E04D                <1> 	dw	kbEnhRight
  7035 0000269A [0A1E]              <1> 	dw	inputbox_right_arrow
  7036                              <1> 
  7037 0000269C 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7038 0000269D 1B01                <1> 	dw	kbEsc
  7039 0000269F [381E]              <1> 	dw	inputbox_cancel
  7040                              <1> 
  7041 000026A1 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7042 000026A2 0D1C                <1> 	dw	kbEnter
  7043 000026A4 [401E]              <1> 	dw	inputbox_enter
  7044                              <1> 
  7045 000026A6 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7046 000026A7 0DE0                <1> 	dw	kbEnhEnter
  7047 000026A9 [401E]              <1> 	dw	inputbox_enter
  7048                              <1> 
  7049                              <1> .end_of_table
  7050                              <1> 
  7051                              <1> listbox_action_table:
  7052 000026AB 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7053 000026AC 0D1C                <1> 	dw	kbEnter
  7054 000026AE 0000                <1> 	dw	0
  7055                              <1> 
  7056 000026B0 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7057 000026B1 0DE0                <1> 	dw	kbEnhEnter
  7058 000026B3 0000                <1> 	dw	0
  7059                              <1> 
  7060 000026B5 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7061 000026B6 1B01                <1> 	dw	kbEsc
  7062 000026B8 [C821]              <1> 	dw	listbox_cancel
  7063                              <1> .end_of_table
  7064                              <1> 
  7065                              <1> menubox_def_action_table:
  7066 000026BA 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7067 000026BB 0048                <1> 	dw	kbUp
  7068 000026BD [E720]              <1> 	dw	menubox_focus_up
  7069                              <1> 
  7070 000026BF 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7071 000026C0 E048                <1> 	dw	kbEnhUp
  7072 000026C2 [E720]              <1> 	dw	menubox_focus_up
  7073                              <1> 
  7074 000026C4 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7075 000026C5 0050                <1> 	dw	kbDown
  7076 000026C7 [1321]              <1> 	dw	menubox_focus_down
  7077                              <1> 
  7078 000026C9 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7079 000026CA E050                <1> 	dw	kbEnhDown
  7080 000026CC [1321]              <1> 	dw	menubox_focus_down
  7081                              <1> 
  7082 000026CE 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7083 000026CF 0049                <1> 	dw	kbPgUp
  7084 000026D1 [F920]              <1> 	dw	menubox_focus_pageup
  7085                              <1> 
  7086 000026D3 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7087 000026D4 0051                <1> 	dw	kbPgDn
  7088 000026D6 [2521]              <1> 	dw	menubox_focus_pagedown
  7089                              <1> 
  7090 000026D8 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7091 000026D9 0D1C                <1> 	dw	kbEnter
  7092 000026DB [BB20]              <1> 	dw	menubox_do_focus
  7093                              <1> 
  7094 000026DD 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7095 000026DE 0DE0                <1> 	dw	kbEnhEnter
  7096 000026E0 [BB20]              <1> 	dw	menubox_do_focus
  7097                              <1> 
  7098 000026E2 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7099 000026E3 1B01                <1> 	dw	kbEsc
  7100 000026E5 0000                <1> 	dw	0
  7101                              <1> 
  7102 000026E7 01                  <1>         db      ACTFLAG_CLOSE_WIN
  7103 000026E8 08F2                <1>         dw      EVENT_ALT_RELEASE
  7104 000026EA 0000                <1>         dw      0
  7105                              <1> .end_of_table
  7106                              <1> 
  7107                              <1> 
  7108                              <1> 
  7109                              <1> ; ===========================================================================
  7110                              <1> 
  7111                              <1> ; vi:nowrap
  7112                                  %include "utils.asm"
  7113                              <1> ; asmsyntax=nasm
  7114                              <1> ;
  7115                              <1> ; utils.asm
  7116                              <1> ;
  7117                              <1> ; Some utility functions
  7118                              <1> ;
  7119                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
  7120                              <1> ;
  7121                              <1> 
  7122                              <1> ;=============================================================================
  7123                              <1> ;itoa ---- convert integer to ascii string (the string is zero ending)
  7124                              <1> ;input:
  7125                              <1> ;      ax = the integer to be converted
  7126                              <1> ;      cl = max length of the integer
  7127                              <1> ;      es:di -> buffer
  7128                              <1> ;output:
  7129                              <1> ;      none
  7130                              <1> ;=============================================================================
  7131                              <1> itoa:
  7132 000026EC 60                  <1>         pusha
  7133 000026ED 30ED                <1>         xor ch, ch
  7134 000026EF 01CF                <1>         add di, cx
  7135 000026F1 C60500              <1>         mov byte [di], 0
  7136 000026F4 BB0A00              <1>         mov bx, 10
  7137                              <1> .loop_itoa:
  7138 000026F7 31D2                <1>         xor dx, dx
  7139 000026F9 4F                  <1>         dec di
  7140 000026FA F7F3                <1>         div bx
  7141 000026FC 80C230              <1>         add dl, '0'
  7142 000026FF 8815                <1>         mov [di], dl
  7143 00002701 49                  <1>         dec cx
  7144 00002702 09C0                <1>         or ax, ax
  7145 00002704 7404                <1>         jz .end_itoa
  7146 00002706 09C9                <1>         or cx, cx
  7147 00002708 75ED                <1>         jnz .loop_itoa
  7148                              <1> .end_itoa:
  7149 0000270A 09C9                <1>         or cx, cx
  7150 0000270C 7406                <1>         jz .end
  7151                              <1> .loop_fillspace:
  7152 0000270E 4F                  <1>         dec di
  7153 0000270F C60520              <1>         mov byte [di], ' '
  7154 00002712 E2FA                <1>         loop .loop_fillspace
  7155                              <1> .end:
  7156 00002714 61                  <1>         popa
  7157 00002715 C3                  <1>         ret
  7158                              <1> 
  7159                              <1> ;=============================================================================
  7160                              <1> ;atoi ---- convert ascii string to integer (the string is zero ending)
  7161                              <1> ;input:
  7162                              <1> ;      ds:si -> buffer
  7163                              <1> ;output:
  7164                              <1> ;      ax = convert result ( <= 65535 )
  7165                              <1> ;=============================================================================
  7166                              <1> atoi:
  7167 00002716 53                  <1> 	push bx
  7168 00002717 51                  <1> 	push cx
  7169                              <1> 
  7170 00002718 31DB                <1> 	xor bx, bx
  7171 0000271A 31C0                <1> 	xor ax, ax
  7172                              <1> 
  7173                              <1> .loop_conv:
  7174 0000271C AC                  <1> 	lodsb
  7175 0000271D 08C0                <1> 	or al, al
  7176 0000271F 7413                <1> 	jz .end
  7177 00002721 2C30                <1> 	sub al, '0'
  7178 00002723 3C0A                <1> 	cmp al, 10
  7179 00002725 730D                <1> 	jae .end
  7180                              <1> 
  7181 00002727 89D9                <1> 	mov cx, bx
  7182 00002729 C1E303              <1>         shl bx, 3                   ; bx = bx * 10
  7183 0000272C D1E1                <1>         shl cx, 1                   ;
  7184 0000272E 01CB                <1>         add bx, cx                  ;
  7185 00002730 01C3                <1> 	add bx, ax
  7186 00002732 EBE8                <1> 	jmp short .loop_conv
  7187                              <1> 
  7188                              <1> .end:
  7189 00002734 89D8                <1> 	mov ax, bx
  7190 00002736 4E                  <1> 	dec si
  7191 00002737 59                  <1> 	pop cx
  7192 00002738 5B                  <1> 	pop bx
  7193 00002739 C3                  <1> 	ret
  7194                              <1> 
  7195                              <1> ;=============================================================================
  7196                              <1> ;strlen ---- Count Length of a zero ending string
  7197                              <1> ;input:
  7198                              <1> ;      ds:si -> string
  7199                              <1> ;output:
  7200                              <1> ;      cx = length (not include the ending zero)
  7201                              <1> ;=============================================================================
  7202                              <1> strlen:
  7203 0000273A 50                  <1>         push ax
  7204 0000273B 31C9                <1>         xor cx,cx
  7205                              <1> 
  7206 0000273D 09F6                <1>         or si,si
  7207 0000273F 740A                <1>         jz .end
  7208                              <1> 
  7209 00002741 56                  <1>         push si
  7210 00002742 FC                  <1>         cld
  7211                              <1> .loop_count:
  7212 00002743 41                  <1>         inc cx
  7213 00002744 AC                  <1>         lodsb
  7214 00002745 08C0                <1>         or al, al
  7215 00002747 75FA                <1>         jnz .loop_count
  7216                              <1> 
  7217 00002749 49                  <1>         dec cx
  7218 0000274A 5E                  <1>         pop si
  7219                              <1> 
  7220                              <1> .end:
  7221 0000274B 58                  <1>         pop ax
  7222 0000274C C3                  <1>         ret
  7223                              <1> 
  7224                              <1> ;=============================================================================
  7225                              <1> ;strlen_hl ---- Count Length of a zero ending string (ignore ~ chars)
  7226                              <1> ;input:
  7227                              <1> ;      ds:si -> string
  7228                              <1> ;output:
  7229                              <1> ;      cx = length (not include the ending zero)
  7230                              <1> ;=============================================================================
  7231                              <1> strlen_hl:
  7232 0000274D 50                  <1>         push ax
  7233 0000274E 31C9                <1>         xor cx,cx
  7234                              <1> 
  7235 00002750 09F6                <1>         or si,si
  7236 00002752 740E                <1>         jz .end
  7237                              <1> 
  7238 00002754 56                  <1>         push si
  7239 00002755 FC                  <1>         cld
  7240                              <1> .loop_count:
  7241 00002756 41                  <1>         inc cx
  7242                              <1> 
  7243                              <1> .loop_nocount:
  7244 00002757 AC                  <1>         lodsb
  7245 00002758 3C7E                <1>         cmp al, '~'
  7246 0000275A 74FB                <1>         je .loop_nocount
  7247 0000275C 08C0                <1>         or al, al
  7248 0000275E 75F6                <1>         jnz .loop_count
  7249                              <1> 
  7250 00002760 49                  <1>         dec cx
  7251 00002761 5E                  <1>         pop si
  7252                              <1> 
  7253                              <1> .end:
  7254 00002762 58                  <1>         pop ax
  7255 00002763 C3                  <1>         ret
  7256                              <1> 
  7257                              <1> ;=============================================================================
  7258                              <1> ;strchr ---- search a char in a string
  7259                              <1> ;input:
  7260                              <1> ;      al = the char to be searched
  7261                              <1> ;      cx = length of the string
  7262                              <1> ;      es:di -> string
  7263                              <1> ;output:
  7264                              <1> ;      cf = 0 the char was found
  7265                              <1> ;            cx = offset of the char
  7266                              <1> ;      cf = 1 the char was not found
  7267                              <1> ;            cx = length of the string
  7268                              <1> ;=============================================================================
  7269                              <1> strchr:
  7270 00002764 53                  <1>         push bx
  7271 00002765 57                  <1>         push di
  7272 00002766 89CB                <1>         mov bx,cx
  7273 00002768 FC                  <1>         cld
  7274 00002769 F2AE                <1>         repnz scasb
  7275 0000276B 5F                  <1>         pop di
  7276 0000276C 87D9                <1>         xchg bx, cx
  7277 0000276E 7506                <1>         jnz .not_found
  7278 00002770 29D9                <1>         sub cx, bx
  7279 00002772 49                  <1>         dec cx
  7280 00002773 5B                  <1>         pop bx
  7281 00002774 F8                  <1>         clc
  7282 00002775 C3                  <1>         ret
  7283                              <1> .not_found:
  7284 00002776 5B                  <1>         pop bx
  7285 00002777 F9                  <1>         stc
  7286 00002778 C3                  <1>         ret
  7287                              <1> 
  7288                              <1> ;=============================================================================
  7289                              <1> ;strncpy ---- copy strings
  7290                              <1> ;input:
  7291                              <1> ;      cx = max number of chars to be copied
  7292                              <1> ;      ds:si -> source string
  7293                              <1> ;      es:di -> dest string
  7294                              <1> ;output:
  7295                              <1> ;      cx = number of chars actually copied (not include the ending zero char)
  7296                              <1> ;      es:di -> point to next char of the end of dest string and set it to
  7297                              <1> ;               zero
  7298                              <1> ;=============================================================================
  7299                              <1> strncpy:
  7300 00002779 56                  <1>         push si
  7301 0000277A 50                  <1>         push ax
  7302 0000277B 53                  <1>         push bx
  7303 0000277C 89CB                <1>         mov bx, cx
  7304 0000277E FC                  <1>         cld
  7305                              <1> .loop_copy:
  7306 0000277F AC                  <1>         lodsb
  7307 00002780 AA                  <1>         stosb
  7308 00002781 08C0                <1>         or al, al
  7309 00002783 7405                <1>         jz .end
  7310 00002785 E2F8                <1>         loop .loop_copy
  7311 00002787 30C0                <1>         xor al, al
  7312 00002789 AA                  <1>         stosb
  7313                              <1> .end:
  7314 0000278A 4F                  <1>         dec di
  7315 0000278B 87D9                <1>         xchg bx, cx
  7316 0000278D 29D9                <1>         sub cx, bx
  7317 0000278F 5B                  <1>         pop bx
  7318 00002790 58                  <1>         pop ax
  7319 00002791 5E                  <1>         pop si
  7320 00002792 C3                  <1>         ret
  7321                              <1> 
  7322                              <1> ;=============================================================================
  7323                              <1> ;strcpy ---- copy strings
  7324                              <1> ;input:
  7325                              <1> ;      ds:si -> source string
  7326                              <1> ;      es:di -> dest string
  7327                              <1> ;output:
  7328                              <1> ;      es:di -> point to next char of the end of dest string and set it to
  7329                              <1> ;               zero
  7330                              <1> ;=============================================================================
  7331                              <1> strcpy:
  7332 00002793 56                  <1>         push si
  7333 00002794 50                  <1>         push ax
  7334                              <1> 
  7335 00002795 FC                  <1>         cld
  7336                              <1> .loop_copy:
  7337 00002796 AC                  <1>         lodsb
  7338 00002797 AA                  <1>         stosb
  7339 00002798 08C0                <1>         or al, al
  7340 0000279A 75FA                <1> 	jnz .loop_copy
  7341                              <1> 
  7342 0000279C 4F                  <1>         dec di
  7343 0000279D 58                  <1>         pop ax
  7344 0000279E 5E                  <1>         pop si
  7345 0000279F C3                  <1>         ret
  7346                              <1> 
  7347                              <1> 
  7348                              <1> ;=============================================================================
  7349                              <1> ;calc_password ---- calculate the password
  7350                              <1> ;input:
  7351                              <1> ;      ds:si -> the pasword string (zero ending)
  7352                              <1> ;      cx = max length of the password
  7353                              <1> ;output:
  7354                              <1> ;      dx:ax = the encrypted password (32 bits)
  7355                              <1> ;=============================================================================
  7356                              <1> calc_password:
  7357 000027A0 56                  <1>         push si
  7358 000027A1 6631D2              <1>         xor edx, edx
  7359 000027A4 6631C0              <1>         xor eax, eax
  7360 000027A7 FC                  <1>         cld
  7361                              <1> .loop_calc:
  7362 000027A8 AC                  <1>         lodsb
  7363 000027A9 08C0                <1>         or al, al
  7364 000027AB 740E                <1>         jz .end
  7365 000027AD F6D0                <1>         not al
  7366 000027AF C0C004              <1>         rol al, 4
  7367 000027B2 6601C2              <1>         add edx, eax
  7368 000027B5 66C1C202            <1>         rol edx, 2
  7369 000027B9 E2ED                <1>         loop .loop_calc
  7370                              <1> .end:
  7371 000027BB 89D0                <1>         mov ax, dx
  7372 000027BD 66C1CA10            <1>         ror edx, 16
  7373 000027C1 5E                  <1>         pop si
  7374 000027C2 C3                  <1>         ret
  7375                              <1> 
  7376                              <1> ;=============================================================================
  7377                              <1> ;htoa ---- hex to ascii
  7378                              <1> ;input:
  7379                              <1> ;     ax = hex number
  7380                              <1> ;     cl = length of hex number (1 to 4)
  7381                              <1> ;     es:di -> buffer to store ascii string
  7382                              <1> ;output:
  7383                              <1> ;     es:di -> ascii string
  7384                              <1> ;=============================================================================
  7385                              <1> htoa:
  7386 000027C3 60                  <1>         pusha
  7387 000027C4 30ED                <1>         xor ch, ch
  7388 000027C6 01CF                <1>         add di, cx
  7389 000027C8 C60500              <1>         mov byte [di], 0
  7390                              <1> 
  7391                              <1> .loop_conv:
  7392 000027CB 50                  <1> 	push ax                 ;Save AX
  7393 000027CC 240F                <1> 	and al,0Fh              ;Keep 4 bits
  7394 000027CE 3C0A                <1> 	cmp al,0Ah              ;Compute the hex digit,
  7395 000027D0 1C69                <1> 	sbb al,69h              ;using Improved Allison's Algorithm
  7396 000027D2 2F                  <1> 	das
  7397 000027D3 4F                  <1> 	dec di
  7398 000027D4 8805                <1> 	mov [di], al
  7399 000027D6 58                  <1> 	pop ax                  ;Restore AX
  7400 000027D7 C1E804              <1> 	shr ax,4                ;Shift it over
  7401 000027DA E2EF                <1>         loop .loop_conv
  7402                              <1> 
  7403 000027DC 61                  <1>         popa
  7404 000027DD C3                  <1>         ret
  7405                              <1> 
  7406                              <1> ;=============================================================================
  7407                              <1> ;atoh ---- ascii to hex
  7408                              <1> ;input:
  7409                              <1> ;     ds:si -> buffer
  7410                              <1> ;output:
  7411                              <1> ;     ax = hex
  7412                              <1> ;     ds:si -> end of the hex number
  7413                              <1> ;=============================================================================
  7414                              <1> atoh:
  7415 000027DE 53                  <1> 	push bx
  7416                              <1> 
  7417 000027DF 31DB                <1> 	xor bx, bx
  7418 000027E1 31C0                <1> 	xor ax, ax
  7419                              <1> .loop_conv:
  7420 000027E3 AC                  <1> 	lodsb
  7421 000027E4 08C0                <1> 	or al, al
  7422 000027E6 7419                <1> 	jz .end
  7423                              <1> 
  7424 000027E8 2C30                <1> 	sub al, '0'
  7425 000027EA 3C0A                <1> 	cmp al, 10
  7426 000027EC 720C                <1> 	jb .ok
  7427 000027EE 2C07                <1> 	sub al, 'A'-'0'-10
  7428 000027F0 3C10                <1> 	cmp al, 16
  7429 000027F2 7206                <1> 	jb .ok
  7430 000027F4 2C20                <1> 	sub al, 'a'-'A'
  7431 000027F6 3C10                <1> 	cmp al, 16
  7432 000027F8 7307                <1> 	jae .end
  7433                              <1> 
  7434                              <1> .ok:
  7435 000027FA C1E304              <1> 	shl bx, 4
  7436 000027FD 01C3                <1> 	add bx, ax
  7437 000027FF EBE2                <1> 	jmp .loop_conv
  7438                              <1> 
  7439                              <1> .end:
  7440 00002801 4E                  <1> 	dec si
  7441 00002802 89D8                <1> 	mov ax, bx
  7442 00002804 5B                  <1>         pop bx
  7443 00002805 C3                  <1>         ret
  7444                              <1> 
  7445                              <1> ;=============================================================================
  7446                              <1> ;count_lines ---- count how many lines in a string.
  7447                              <1> ;input:
  7448                              <1> ;      ds:si -> string
  7449                              <1> ;output:
  7450                              <1> ;      ch = number of lines
  7451                              <1> ;      cl = max line length
  7452                              <1> ;=============================================================================
  7453                              <1> count_lines:
  7454 00002806 56                  <1>         push si
  7455 00002807 53                  <1>         push bx
  7456 00002808 50                  <1>         push ax
  7457                              <1> 
  7458 00002809 FC                  <1>         cld
  7459                              <1> 
  7460 0000280A 31C9                <1>         xor cx, cx
  7461 0000280C 31DB                <1>         xor bx, bx
  7462                              <1> 
  7463 0000280E 09F6                <1>         or si, si
  7464 00002810 7423                <1>         jz .end
  7465                              <1> 
  7466 00002812 FEC5                <1>         inc ch
  7467                              <1> .loop_count:
  7468 00002814 AC                  <1>         lodsb
  7469 00002815 08C0                <1>         or al, al
  7470 00002817 7416                <1>         jz .ending
  7471                              <1> 
  7472 00002819 3C0D                <1>         cmp al, 0x0d
  7473 0000281B 7404                <1>         je .new_line
  7474                              <1> 
  7475 0000281D FEC3                <1>         inc bl
  7476 0000281F EBF3                <1>         jmp short .loop_count
  7477                              <1> 
  7478                              <1> .new_line:
  7479 00002821 FEC5                <1>         inc ch
  7480                              <1> 
  7481 00002823 88DF                <1>         mov bh, bl
  7482 00002825 30DB                <1>         xor bl, bl
  7483 00002827 38CF                <1>         cmp bh, cl
  7484 00002829 76E9                <1>         jbe .loop_count
  7485 0000282B 88F9                <1>         mov cl, bh
  7486 0000282D EBE5                <1>         jmp short .loop_count
  7487                              <1> 
  7488                              <1> .ending:
  7489 0000282F 38CB                <1>         cmp bl, cl
  7490 00002831 7602                <1>         jbe .end
  7491 00002833 88D9                <1>         mov cl, bl
  7492                              <1> 
  7493                              <1> .end:
  7494 00002835 58                  <1>         pop ax
  7495 00002836 5B                  <1>         pop bx
  7496 00002837 5E                  <1>         pop si
  7497 00002838 C3                  <1>         ret
  7498                              <1> 
  7499                              <1> ;=============================================================================
  7500                              <1> ; power_off ---- turn the power off
  7501                              <1> ;input:
  7502                              <1> ;       none
  7503                              <1> ;output:
  7504                              <1> ;       never return if successful.
  7505                              <1> ;       cf = 1 on error.
  7506                              <1> ;=============================================================================
  7507                              <1> power_off:
  7508 00002839 60                  <1>         pusha
  7509 0000283A E82D00              <1> 	call check_apm_bios
  7510 0000283D 7229                <1>         jc .end
  7511                              <1> 
  7512 0000283F B80153              <1>         mov ax, 0x5301
  7513 00002842 31DB                <1>         xor bx, bx
  7514 00002844 CD15                <1>         int 0x15
  7515 00002846 7220                <1>         jc .end
  7516                              <1> 
  7517 00002848 B88053              <1>         mov ax, 0x5380
  7518 0000284B B78C                <1>         mov bh, 0x8c
  7519 0000284D CD15                <1>         int 0x15
  7520                              <1> 
  7521 0000284F B84000              <1>         mov ax, 0x40
  7522 00002852 BBD800              <1>         mov bx, 0xd8
  7523 00002855 1E                  <1>         push ds
  7524 00002856 8ED8                <1>         mov ds, ax
  7525 00002858 3E800F10            <1>         or byte [ds:bx], 0x10
  7526 0000285C 1F                  <1>         pop ds
  7527                              <1> 
  7528 0000285D B80753              <1>         mov ax, 0x5307
  7529 00002860 BB0100              <1>         mov bx, 1
  7530 00002863 B90300              <1>         mov cx, 3
  7531 00002866 CD15                <1>         int 0x15
  7532                              <1> 
  7533                              <1> .end:
  7534 00002868 61                  <1>         popa
  7535 00002869 C3                  <1>         ret
  7536                              <1> 
  7537                              <1> 
  7538                              <1> ;=============================================================================
  7539                              <1> ; check_apm_bios ---- check if the apm bios present
  7540                              <1> ; output:
  7541                              <1> ;	cf = 1 error, cf = 0 ok
  7542                              <1> ;=============================================================================
  7543                              <1> check_apm_bios:
  7544 0000286A 60                  <1>         pusha
  7545 0000286B B80053              <1>         mov ax, 0x5300
  7546 0000286E 31DB                <1>         xor bx, bx
  7547 00002870 CD15                <1>         int 0x15                                 ; check if apm present
  7548 00002872 720D                <1> 	jc .end
  7549 00002874 81FB4D50            <1> 	cmp bx, 0x504D
  7550 00002878 7506                <1> 	jnz .none
  7551 0000287A F7C10100            <1> 	test cx, 1
  7552 0000287E 7501                <1> 	jnz .end
  7553                              <1> .none:
  7554 00002880 F9                  <1> 	stc
  7555                              <1> .end:
  7556 00002881 61                  <1> 	popa
  7557 00002882 C3                  <1> 	ret
  7558                              <1> 
  7559                              <1> ;=============================================================================
  7560                              <1> ; leap_year ---- check if a year is leap a year
  7561                              <1> ; input:
  7562                              <1> ;      ax = year
  7563                              <1> ; output:
  7564                              <1> ;      cf = 1, it's a leap year
  7565                              <1> ;      cf = 0, not a leap year
  7566                              <1> ;=============================================================================
  7567                              <1> leap_year:
  7568 00002883 60                  <1>        pusha
  7569 00002884 B99001              <1>        mov cx, 400
  7570 00002887 31D2                <1>        xor dx, dx 
  7571 00002889 50                  <1>        push ax
  7572 0000288A F7F1                <1>        div cx
  7573 0000288C 58                  <1>        pop ax
  7574 0000288D 09D2                <1>        or dx, dx
  7575 0000288F 741B                <1>        jz .isleap
  7576                              <1> 
  7577 00002891 B96400              <1>        mov cx, 100
  7578 00002894 31D2                <1>        xor dx, dx
  7579 00002896 50                  <1>        push ax
  7580 00002897 F7F1                <1>        div cx
  7581 00002899 58                  <1>        pop ax
  7582 0000289A 09D2                <1>        or dx, dx
  7583 0000289C 740B                <1>        jz .noleap
  7584                              <1> 
  7585 0000289E 31D2                <1>        xor dx, dx
  7586 000028A0 B90400              <1>        mov cx, 4
  7587 000028A3 F7F1                <1>        div cx
  7588 000028A5 09D2                <1>        or dx, dx
  7589 000028A7 7403                <1>        jz .isleap
  7590                              <1> 
  7591                              <1> .noleap:
  7592 000028A9 F8                  <1>        clc
  7593 000028AA 61                  <1>        popa
  7594 000028AB C3                  <1>        ret
  7595                              <1> 
  7596                              <1> .isleap:
  7597 000028AC F9                  <1>        stc
  7598 000028AD 61                  <1>        popa
  7599 000028AE C3                  <1>        ret
  7600                              <1> 
  7601                              <1> ;=============================================================================
  7602                              <1> ; day_in_week
  7603                              <1> ; input:
  7604                              <1> ;      ax = year
  7605                              <1> ;      dh = month
  7606                              <1> ;      dl = day
  7607                              <1> ; output:
  7608                              <1> ;      cx = day in week
  7609                              <1> ;=============================================================================
  7610                              <1> day_in_week:
  7611 000028AF 50                  <1> 	push ax
  7612 000028B0 53                  <1> 	push bx
  7613 000028B1 52                  <1> 	push dx
  7614                              <1> 
  7615 000028B2 52                  <1> 	push dx
  7616                              <1> 
  7617 000028B3 48                  <1> 	dec ax
  7618 000028B4 89C1                <1> 	mov cx, ax
  7619 000028B6 31D2                <1> 	xor dx, dx
  7620 000028B8 50                  <1> 	push ax
  7621 000028B9 BB0400              <1> 	mov bx, 4
  7622 000028BC F7F3                <1> 	div bx
  7623 000028BE 01C1                <1> 	add cx, ax
  7624 000028C0 58                  <1> 	pop ax
  7625                              <1> 
  7626 000028C1 31D2                <1> 	xor dx, dx
  7627 000028C3 50                  <1> 	push ax
  7628 000028C4 BB6400              <1> 	mov bx, 100
  7629 000028C7 F7F3                <1> 	div bx
  7630 000028C9 29C1                <1> 	sub cx, ax
  7631 000028CB 58                  <1> 	pop ax
  7632                              <1> 
  7633 000028CC 31D2                <1> 	xor dx, dx
  7634 000028CE 50                  <1> 	push ax
  7635 000028CF BB9001              <1> 	mov bx, 400
  7636 000028D2 F7F3                <1> 	div bx
  7637 000028D4 01C1                <1> 	add cx, ax
  7638 000028D6 58                  <1> 	pop ax
  7639                              <1> 
  7640 000028D7 40                  <1> 	inc ax
  7641 000028D8 5A                  <1> 	pop dx
  7642                              <1> 
  7643 000028D9 0FB6DE              <1> 	movzx bx, dh
  7644 000028DC 8A9F[FF28]          <1> 	mov bl, [days_in_month_norm-1+bx]
  7645 000028E0 01D9                <1> 	add cx, bx 
  7646                              <1> 
  7647 000028E2 E89EFF              <1> 	call leap_year
  7648 000028E5 7306                <1> 	jnc .norm
  7649 000028E7 80FE03              <1> 	cmp dh, 3
  7650                              <1> 
  7651 000028EA 7201                <1> 	jb .norm
  7652 000028EC 41                  <1> 	inc cx
  7653                              <1> 
  7654                              <1> .norm:
  7655 000028ED 30F6                <1> 	xor dh, dh
  7656 000028EF 01D1                <1> 	add cx, dx
  7657                              <1> 
  7658 000028F1 89C8                <1> 	mov ax, cx
  7659 000028F3 31D2                <1> 	xor dx, dx
  7660 000028F5 B90700              <1> 	mov cx, 7
  7661 000028F8 F7F1                <1> 	div cx
  7662 000028FA 89D1                <1> 	mov cx, dx
  7663                              <1> 
  7664 000028FC 5A                  <1> 	pop dx
  7665 000028FD 5B                  <1> 	pop bx
  7666 000028FE 58                  <1> 	pop ax
  7667 000028FF C3                  <1> 	ret
  7668                              <1> 
  7669 00002900 000303060104060205- <1> days_in_month_norm db  0, 3, 3, 6, 1, 4, 6, 2, 5, 0, 3, 5
  7670 00002909 000305              <1>
  7671                              <1> 
  7672                              <1> ;=============================================================================
  7673                              <1> ; bcd_to_bin ---- convert bcd to binary
  7674                              <1> ; input: ax = bcd number
  7675                              <1> ; output: ax = binary number
  7676                              <1> ;=============================================================================
  7677                              <1> bcd_to_bin:
  7678 0000290C 53                  <1>        push bx
  7679 0000290D 51                  <1>        push cx
  7680 0000290E 52                  <1>        push dx
  7681 0000290F 56                  <1>        push si
  7682                              <1> 
  7683 00002910 8D36[3229]          <1>        lea si, [.mul_num]
  7684 00002914 B90400              <1>        mov cx, 4
  7685 00002917 31DB                <1>        xor bx, bx
  7686                              <1> 
  7687                              <1> .loop_conv:
  7688 00002919 50                  <1>        push ax
  7689 0000291A 83E00F              <1>        and ax, 0x000f
  7690 0000291D 8B14                <1>        mov dx, [si]
  7691 0000291F F7E2                <1>        mul dx
  7692 00002921 01C3                <1>        add bx, ax
  7693 00002923 58                  <1>        pop ax
  7694 00002924 C1E804              <1>        shr ax, 4
  7695 00002927 46                  <1>        inc si
  7696 00002928 46                  <1>        inc si
  7697 00002929 E2EE                <1>        loop .loop_conv
  7698                              <1> 
  7699 0000292B 89D8                <1>        mov ax, bx
  7700                              <1> 
  7701 0000292D 5E                  <1>        pop si
  7702 0000292E 5A                  <1>        pop dx
  7703 0000292F 59                  <1>        pop cx
  7704 00002930 5B                  <1>        pop bx
  7705 00002931 C3                  <1>        ret
  7706                              <1> 
  7707 00002932 01000A006400E803    <1> .mul_num  dw 1, 10, 100, 1000
  7708                              <1> 
  7709                              <1> ;=============================================================================
  7710                              <1> ; bcd_to_str ---- convert bcd to string
  7711                              <1> ; input: ax = bcd number
  7712                              <1> ;        cl = length (0 to 4)
  7713                              <1> ;        es:di -> buffer
  7714                              <1> ; output: none
  7715                              <1> ;=============================================================================
  7716                              <1> bcd_to_str:
  7717 0000293A 60                  <1>        pusha
  7718 0000293B 51                  <1>        push cx
  7719 0000293C 89C3                <1>        mov bx, ax
  7720 0000293E B004                <1>        mov al, 4
  7721 00002940 F6E1                <1>        mul cl
  7722 00002942 88C1                <1>        mov cl, al
  7723 00002944 D3CB                <1>        ror bx, cl
  7724 00002946 59                  <1>        pop cx
  7725                              <1> 
  7726                              <1> .loop_conv:
  7727 00002947 08C9                <1>        or cl, cl
  7728 00002949 740E                <1>        jz .end
  7729 0000294B C1C304              <1>        rol bx, 4
  7730 0000294E 89D8                <1>        mov ax, bx
  7731 00002950 240F                <1>        and al, 0x0f
  7732 00002952 0430                <1>        add al, '0'
  7733 00002954 AA                  <1>        stosb
  7734 00002955 FEC9                <1>        dec cl
  7735 00002957 EBEE                <1>        jmp .loop_conv
  7736                              <1> 
  7737                              <1> .end:
  7738 00002959 30C0                <1>        xor al, al
  7739 0000295B AA                  <1>        stosb
  7740 0000295C 61                  <1>        popa
  7741 0000295D C3                  <1>        ret
  7742                              <1> 
  7743                              <1> ;=============================================================================
  7744                              <1> ; reboot ---- reboot the computer
  7745                              <1> ; input:
  7746                              <1> ;	none
  7747                              <1> ;=============================================================================
  7748                              <1> reboot:
  7749 0000295E BB4000              <1>        mov bx, 0x40
  7750 00002961 53                  <1>        push bx
  7751 00002962 1F                  <1>        pop ds
  7752 00002963 B83412              <1>        mov ax, 0x1234
  7753 00002966 A37200              <1>        mov [0x0072], ax
  7754 00002969 EA0000FFFF          <1>        jmp 0xFFFF:0x0000
  7755                              <1> 
  7756                              <1> ;=============================================================================
  7757                              <1> ; bioskey ---- BIOS keyboard func
  7758                              <1> ;=============================================================================
  7759                              <1> bioskey:
  7760 0000296E C606[B932]00        <1>        mov byte [utils_tmp.kbd_work], 0
  7761 00002973 08E4                <1>        or ah, ah
  7762 00002975 740F                <1>        je .post_trans
  7763 00002977 80FC01              <1>        cmp ah, 0x01
  7764 0000297A 740A                <1>        je .post_trans
  7765 0000297C 80FC10              <1>        cmp ah, 0x10
  7766 0000297F 7405                <1>        je .post_trans
  7767 00002981 80FC11              <1>        cmp ah, 0x11
  7768 00002984 7504                <1>        jne .call_int16
  7769                              <1> 
  7770                              <1> .post_trans:
  7771 00002986 FE06[B932]          <1>        inc byte [utils_tmp.kbd_work]
  7772                              <1> 
  7773                              <1> .call_int16:
  7774 0000298A CD16                <1>        int 0x16
  7775 0000298C 9C                  <1>        pushf
  7776                              <1> 
  7777 0000298D 803E[B932]00        <1>        cmp byte [utils_tmp.kbd_work], 0
  7778 00002992 741E                <1>        jz .end
  7779                              <1> 
  7780 00002994 51                  <1>        push cx
  7781 00002995 56                  <1>        push si
  7782 00002996 8B0E[4E46]          <1>        mov cx, [keymap.number]
  7783 0000299A 8B36[5046]          <1>        mov si, [keymap.data]
  7784 0000299E 09C9                <1>        or cx, cx
  7785 000029A0 740E                <1>        jz .end_trans
  7786                              <1> 
  7787                              <1> .loop_trans:
  7788 000029A2 3B04                <1>        cmp ax, [si]
  7789 000029A4 7505                <1>        jne .loop_next
  7790 000029A6 8B4402              <1>        mov ax, [si+2]
  7791 000029A9 EB05                <1>        jmp short .end_trans
  7792                              <1> .loop_next:
  7793 000029AB 83C604              <1>        add si, 4
  7794 000029AE E2F2                <1>        loop .loop_trans
  7795                              <1> .end_trans:
  7796 000029B0 5E                  <1>        pop si
  7797 000029B1 59                  <1>        pop cx
  7798                              <1> .end:
  7799 000029B2 9D                  <1>        popf       
  7800 000029B3 C3                  <1>        ret
  7801                              <1> 
  7802                              <1> ;=============================================================================
  7803                              <1> ; check_keyevent ---- check if keyboard is pressed
  7804                              <1> ; input:
  7805                              <1> ;	none
  7806                              <1> ; output:
  7807                              <1> ;	ax = keyevent (0 = no key)
  7808                              <1> ;=============================================================================
  7809                              <1> check_keyevent:
  7810 000029B4 53                  <1> 	push bx
  7811                              <1> 
  7812 000029B5 8A3E[BA32]          <1> 	mov bh, [utils_tmp.kbd_last_shift]
  7813 000029B9 E85200              <1> 	call .check_stat_key
  7814 000029BC 88C3                <1> 	mov bl, al
  7815 000029BE A2[BA32]            <1> 	mov [utils_tmp.kbd_last_shift], al
  7816                              <1> 
  7817 000029C1 E85600              <1> 	call .check_norm_key
  7818 000029C4 09C0                <1> 	or ax, ax
  7819 000029C6 7407                <1> 	jz .no_norm_key
  7820                              <1> 
  7821 000029C8 C606[BB32]01        <1> 	mov byte [utils_tmp.kbd_bypass_next_shift], 1
  7822                              <1> .end:
  7823 000029CD 5B                  <1> 	pop bx
  7824 000029CE C3                  <1> 	ret
  7825                              <1> 
  7826                              <1> .no_norm_key:
  7827 000029CF 31C0                <1> 	xor ax, ax
  7828 000029D1 38FB                <1> 	cmp bl, bh
  7829 000029D3 74F8                <1> 	je .end
  7830                              <1> 
  7831 000029D5 51                  <1> 	push cx
  7832 000029D6 B90101              <1> 	mov cx, 0x0101
  7833                              <1> 
  7834                              <1> .loop_check_keys:
  7835 000029D9 53                  <1> 	push bx
  7836 000029DA 21CB                <1> 	and bx, cx
  7837 000029DC 38DF                <1> 	cmp bh, bl
  7838 000029DE 5B                  <1> 	pop bx
  7839                              <1> 
  7840 000029DF 740E                <1> 	je .no_this_key
  7841                              <1> 
  7842 000029E1 84CB                <1> 	test bl, cl
  7843 000029E3 7404                <1> 	jz .release
  7844 000029E5 B4F1                <1> 	mov ah, (EVTCODE_COMMAND | EVTCODE_KEYPRESS)
  7845 000029E7 EB02                <1> 	jmp short .key_ok
  7846                              <1> 
  7847                              <1> .release:
  7848 000029E9 B4F2                <1> 	mov ah, (EVTCODE_COMMAND | EVTCODE_KEYRELEASE)
  7849                              <1> 
  7850                              <1> .key_ok:
  7851 000029EB 88C8                <1> 	mov al, cl
  7852 000029ED EB06                <1> 	jmp short .end_check_keys
  7853                              <1> 
  7854                              <1> .no_this_key:
  7855 000029EF D1E1                <1> 	shl cx, 1
  7856 000029F1 08C9                <1> 	or cl, cl
  7857 000029F3 75E4                <1> 	jnz .loop_check_keys
  7858                              <1> 
  7859                              <1> .end_check_keys:
  7860 000029F5 09C0                <1> 	or ax, ax
  7861 000029F7 7412                <1> 	jz .end_stat
  7862                              <1> 
  7863 000029F9 A8F0                <1> 	test al, kbStateKeysMask
  7864 000029FB 7509                <1> 	jnz .dont_bypass
  7865                              <1> 
  7866 000029FD 803E[BB32]00        <1> 	cmp byte [utils_tmp.kbd_bypass_next_shift], 0
  7867 00002A02 7407                <1> 	jz .end_stat
  7868                              <1> 
  7869 00002A04 31C0                <1> 	xor ax, ax
  7870                              <1> 
  7871                              <1> .dont_bypass:
  7872 00002A06 C606[BB32]00        <1> 	mov byte [utils_tmp.kbd_bypass_next_shift], 0
  7873                              <1> 
  7874                              <1> .end_stat:
  7875 00002A0B 59                  <1> 	pop cx
  7876 00002A0C 5B                  <1> 	pop bx
  7877 00002A0D C3                  <1> 	ret
  7878                              <1> 
  7879                              <1> .check_stat_key:
  7880 00002A0E 53                  <1> 	push bx
  7881 00002A0F B402                <1> 	mov ah, 2
  7882 00002A11 0A26[F645]          <1> 	or ah, [keyboard_type]
  7883 00002A15 E856FF              <1> 	call bioskey
  7884 00002A18 5B                  <1> 	pop bx
  7885 00002A19 C3                  <1> 	ret
  7886                              <1> 
  7887                              <1> .check_norm_key:
  7888 00002A1A 53                  <1> 	push bx
  7889 00002A1B B401                <1>         mov ah,1                                        ; if no key pressed
  7890 00002A1D 0A26[F645]          <1>         or ah, [keyboard_type]
  7891 00002A21 E84AFF              <1>         call bioskey                                    ; go back to check
  7892 00002A24 7409                <1> 	jz .no_key
  7893 00002A26 8A26[F645]          <1> 	mov ah, [keyboard_type]
  7894 00002A2A E841FF              <1> 	call bioskey
  7895 00002A2D 5B                  <1> 	pop bx
  7896 00002A2E C3                  <1> 	ret
  7897                              <1> 
  7898                              <1> .no_key:
  7899 00002A2F 31C0                <1> 	xor ax, ax
  7900 00002A31 5B                  <1> 	pop bx
  7901 00002A32 C3                  <1> 	ret
  7902                              <1> 
  7903                              <1> ;=============================================================================
  7904                              <1> ;get_realtime ---- get the machine real time in minutes
  7905                              <1> ;input:
  7906                              <1> ;      none
  7907                              <1> ;output:
  7908                              <1> ;      cf = 0 success, ax = real time in minutes, dx = day (set a bit)
  7909                              <1> ;      cf = 1 failed
  7910                              <1> ;=============================================================================
  7911                              <1> get_realtime:
  7912 00002A33 53                  <1>         push bx
  7913 00002A34 51                  <1>         push cx
  7914                              <1> 
  7915 00002A35 B404                <1>         mov ah, 0x04
  7916 00002A37 CD1A                <1>         int 0x1a
  7917 00002A39 723C                <1>         jc .end
  7918                              <1> 
  7919 00002A3B 0FB6C6              <1>         movzx ax, dh
  7920 00002A3E E8CBFE              <1>         call bcd_to_bin
  7921 00002A41 88C6                <1>         mov dh, al
  7922 00002A43 88D0                <1>         mov al, dl
  7923 00002A45 E8C4FE              <1>         call bcd_to_bin
  7924 00002A48 88C2                <1>         mov dl, al
  7925                              <1> 
  7926 00002A4A 89C8                <1>         mov ax, cx
  7927 00002A4C E8BDFE              <1>         call bcd_to_bin
  7928                              <1> 
  7929 00002A4F E85DFE              <1>         call day_in_week
  7930                              <1> 
  7931 00002A52 BA0100              <1>         mov dx, 1
  7932 00002A55 D3E2                <1>         shl dx, cl
  7933                              <1> 
  7934 00002A57 52                  <1>         push dx
  7935 00002A58 B402                <1>         mov ah, 0x02
  7936 00002A5A CD1A                <1>         int 0x1a
  7937 00002A5C 5A                  <1>         pop dx
  7938 00002A5D 7218                <1>         jc .end
  7939                              <1> 
  7940 00002A5F 0FB6C5              <1>         movzx ax, ch
  7941 00002A62 E8A7FE              <1>         call bcd_to_bin
  7942 00002A65 88C5                <1>         mov ch, al
  7943                              <1> 
  7944 00002A67 88C8                <1>         mov al, cl
  7945 00002A69 E8A0FE              <1>         call bcd_to_bin
  7946 00002A6C 88C1                <1>         mov cl, al
  7947                              <1> 
  7948                              <1> ;convert hour and minute into minute
  7949 00002A6E B03C                <1>         mov al, 60
  7950 00002A70 F6E5                <1>         mul ch
  7951 00002A72 30ED                <1>         xor ch, ch
  7952 00002A74 01C8                <1>         add ax, cx
  7953                              <1> 
  7954 00002A76 F8                  <1>         clc
  7955                              <1> .end:
  7956 00002A77 59                  <1>         pop cx
  7957 00002A78 5B                  <1>         pop bx
  7958                              <1> 
  7959 00002A79 C3                  <1>         ret
  7960                              <1> 
  7961                              <1> 
  7962                              <1> ;=============================================================================
  7963                              <1> ; get_current_time_string ---- get current time string
  7964                              <1> ; input: al = show method, es:di -> buffer
  7965                              <1> ;=============================================================================
  7966                              <1> get_current_time_string:
  7967 00002A7A 60                  <1>        pusha
  7968 00002A7B 08C0                <1>        or al, al
  7969 00002A7D 741D                <1>        jz .end
  7970                              <1> 
  7971 00002A7F B402                <1>        mov ah, 0x02
  7972 00002A81 CD1A                <1>        int 0x1a
  7973 00002A83 7217                <1>        jc .end
  7974                              <1> 
  7975 00002A85 89CB                <1>        mov bx, cx
  7976                              <1> 
  7977 00002A87 B90200              <1>        mov cx, 2
  7978                              <1> 
  7979 00002A8A 0FB6C7              <1>        movzx ax, bh
  7980 00002A8D E8AAFE              <1>        call bcd_to_str
  7981 00002A90 01CF                <1>        add di, cx
  7982 00002A92 B03A                <1>        mov al, ':'
  7983 00002A94 AA                  <1>        stosb
  7984                              <1> 
  7985 00002A95 88D8                <1>        mov al, bl
  7986 00002A97 E8A0FE              <1>        call bcd_to_str
  7987 00002A9A 01CF                <1>        add di, cx
  7988                              <1>        
  7989                              <1> .end:
  7990 00002A9C 30C0                <1>        xor al, al
  7991 00002A9E AA                  <1>        stosb
  7992 00002A9F 61                  <1>        popa
  7993 00002AA0 C3                  <1>        ret      
  7994                              <1> 
  7995                              <1> 
  7996                              <1> ;=============================================================================
  7997                              <1> ; get_current_date_string ---- get current date string
  7998                              <1> ; input: al = show method, es:di -> buffer
  7999                              <1> ;        the method of show date:
  8000                              <1> ;           0 = don't show date
  8001                              <1> ;           1 = day mm-dd-yyyy
  8002                              <1> ;           2 = day yyyy-mm-dd
  8003                              <1> ;           3 = day dd-mm-yyyy
  8004                              <1> ; output: none
  8005                              <1> ;=============================================================================
  8006                              <1> get_current_date_string:
  8007 00002AA1 60                  <1>        pusha
  8008                              <1> 
  8009 00002AA2 08C0                <1>        or al, al
  8010 00002AA4 7443                <1>        jz .end
  8011                              <1> 
  8012 00002AA6 50                  <1>        push ax
  8013 00002AA7 B404                <1>        mov ah, 0x04
  8014 00002AA9 CD1A                <1>        int 0x1a
  8015 00002AAB 58                  <1>        pop ax
  8016 00002AAC 723B                <1>        jc .end
  8017                              <1> 
  8018 00002AAE 50                  <1>        push ax
  8019 00002AAF 51                  <1>        push cx
  8020 00002AB0 52                  <1>        push dx
  8021                              <1> 
  8022 00002AB1 0FB6C6              <1>        movzx ax, dh
  8023 00002AB4 E855FE              <1>        call bcd_to_bin
  8024 00002AB7 88C6                <1>        mov dh, al
  8025 00002AB9 88D0                <1>        mov al, dl
  8026 00002ABB E84EFE              <1>        call bcd_to_bin
  8027 00002ABE 88C2                <1>        mov dl, al
  8028                              <1> 
  8029 00002AC0 89C8                <1>        mov ax, cx
  8030 00002AC2 E847FE              <1>        call bcd_to_bin
  8031                              <1> 
  8032 00002AC5 E8E7FD              <1>        call day_in_week
  8033                              <1> 
  8034 00002AC8 89CB                <1>        mov bx, cx
  8035 00002ACA D1E3                <1>        shl bx, 1
  8036 00002ACC 8BB7[3447]          <1>        mov si, [str_idx.sunday+bx]
  8037                              <1> 
  8038 00002AD0 E8C0FC              <1>        call strcpy
  8039 00002AD3 B020                <1>        mov al, ' '
  8040 00002AD5 AA                  <1>        stosb
  8041                              <1> 
  8042 00002AD6 5A                  <1>        pop dx
  8043 00002AD7 5B                  <1>        pop bx
  8044 00002AD8 58                  <1>        pop ax
  8045                              <1> 
  8046 00002AD9 31C9                <1>        xor cx, cx
  8047                              <1> 
  8048 00002ADB 3C01                <1>        cmp al, 1
  8049 00002ADD 740F                <1>        je .mmddyy
  8050 00002ADF 3C02                <1>        cmp al, 2
  8051 00002AE1 741E                <1>        je .yymmdd
  8052 00002AE3 3C03                <1>        cmp al, 3
  8053 00002AE5 742D                <1>        je .ddmmyy
  8054 00002AE7 EB00                <1>        jmp .end
  8055                              <1> 
  8056                              <1> .end:       
  8057 00002AE9 30C0                <1>        xor al, al
  8058 00002AEB AA                  <1>        stosb
  8059 00002AEC 61                  <1>        popa
  8060 00002AED C3                  <1>        ret
  8061                              <1> 
  8062                              <1> .mmddyy:
  8063 00002AEE B02D                <1>        mov al, '-'
  8064 00002AF0 50                  <1>        push ax
  8065 00002AF1 E83300              <1>        call .write_mm
  8066 00002AF4 58                  <1>        pop ax
  8067 00002AF5 AA                  <1>        stosb
  8068 00002AF6 50                  <1>        push ax
  8069 00002AF7 E83800              <1>        call .write_dd
  8070 00002AFA 58                  <1>        pop ax
  8071 00002AFB AA                  <1>        stosb
  8072 00002AFC E83E00              <1>        call .write_yy
  8073                              <1> 
  8074 00002AFF EBE8                <1>        jmp .end
  8075                              <1> 
  8076                              <1> .yymmdd:
  8077 00002B01 B02D                <1>        mov al, '-'
  8078 00002B03 50                  <1>        push ax
  8079 00002B04 E83600              <1>        call .write_yy
  8080 00002B07 58                  <1>        pop ax
  8081 00002B08 AA                  <1>        stosb
  8082 00002B09 50                  <1>        push ax
  8083 00002B0A E81A00              <1>        call .write_mm
  8084 00002B0D 58                  <1>        pop ax
  8085 00002B0E AA                  <1>        stosb
  8086 00002B0F E82000              <1>        call .write_dd
  8087                              <1> 
  8088 00002B12 EBD5                <1>        jmp .end
  8089                              <1> 
  8090                              <1> .ddmmyy:
  8091 00002B14 B02D                <1>        mov al, '-'
  8092 00002B16 50                  <1>        push ax
  8093 00002B17 E81800              <1>        call .write_dd
  8094 00002B1A 58                  <1>        pop ax
  8095 00002B1B AA                  <1>        stosb
  8096 00002B1C 50                  <1>        push ax
  8097 00002B1D E80700              <1>        call .write_mm
  8098 00002B20 58                  <1>        pop ax
  8099 00002B21 AA                  <1>        stosb
  8100 00002B22 E81800              <1>        call .write_yy
  8101                              <1> 
  8102 00002B25 EBC2                <1>        jmp .end
  8103                              <1> 
  8104                              <1> .write_mm:
  8105 00002B27 0FB6C6              <1>        movzx ax, dh
  8106 00002B2A B102                <1>        mov cl, 2
  8107 00002B2C E80BFE              <1>        call bcd_to_str
  8108 00002B2F 01CF                <1>        add di, cx
  8109 00002B31 C3                  <1>        ret
  8110                              <1> 
  8111                              <1> .write_dd:
  8112 00002B32 0FB6C2              <1>        movzx ax, dl
  8113 00002B35 B102                <1>        mov cl, 2
  8114 00002B37 E800FE              <1>        call bcd_to_str
  8115 00002B3A 01CF                <1>        add di, cx
  8116 00002B3C C3                  <1>        ret
  8117                              <1> 
  8118                              <1> .write_yy:
  8119 00002B3D 89D8                <1>        mov ax, bx
  8120 00002B3F B104                <1>        mov cl, 4
  8121 00002B41 E8F6FD              <1>        call bcd_to_str
  8122 00002B44 01CF                <1>        add di, cx
  8123 00002B46 C3                  <1>        ret
  8124                              <1> 
  8125                              <1> ;=============================================================================
  8126                              <1> ;calc_checksum ---- calculate the checksum of a data block.
  8127                              <1> ;input:
  8128                              <1> ;      ds:si -> start of the checksum area
  8129                              <1> ;      cx = checksum size
  8130                              <1> ;output:
  8131                              <1> ;      bl = the checksum value.
  8132                              <1> ;=============================================================================
  8133                              <1> calc_checksum:
  8134 00002B47 51                  <1>         push cx
  8135 00002B48 50                  <1>         push ax
  8136 00002B49 56                  <1>         push si
  8137 00002B4A 30DB                <1>         xor bl, bl
  8138 00002B4C FC                  <1>         cld
  8139                              <1> .loop_calc:
  8140 00002B4D AC                  <1>         lodsb
  8141 00002B4E 00C3                <1>         add bl, al
  8142 00002B50 E2FB                <1>         loop .loop_calc
  8143 00002B52 5E                  <1>         pop si
  8144 00002B53 58                  <1>         pop ax
  8145 00002B54 59                  <1>         pop cx
  8146 00002B55 C3                  <1>         ret
  8147                              <1> 
  8148                              <1> ;=============================================================================
  8149                              <1> ; clear_memory ---- clear a memory block to zero
  8150                              <1> ; input:
  8151                              <1> ;	cx = size
  8152                              <1> ;	ds:di -> memory
  8153                              <1> ;=============================================================================
  8154                              <1> clear_memory:
  8155 00002B56 60                  <1> 	pusha
  8156 00002B57 06                  <1> 	push es
  8157 00002B58 1E                  <1> 	push ds
  8158 00002B59 07                  <1> 	pop es
  8159 00002B5A 30C0                <1> 	xor al, al
  8160 00002B5C F3AA                <1> 	rep stosb
  8161 00002B5E 07                  <1> 	pop es
  8162 00002B5F 61                  <1> 	popa
  8163 00002B60 C3                  <1> 	ret 
  8164                              <1> 
  8165                                  %include "knl.asm"
  8166                              <1> ; asmsyntax=nasm
  8167                              <1> ;
  8168                              <1> ; knl.asm
  8169                              <1> ;
  8170                              <1> ; kernel functions for partition list
  8171                              <1> ;
  8172                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
  8173                              <1> ;
  8174                              <1> 
  8175                              <1> %define LIMIT_FLOPPY_NUMBER
  8176                              <1> 
  8177                              <1> %define NUM_OF_ID       (part_type.str_tbl - part_type.id_tbl)
  8178                              <1> %define NUM_OF_LOG_DENY (part_type.auto_act_tbl - part_type.log_deny_tbl)
  8179                              <1> %define NUM_OF_PRI_DENY (part_type.auto_act_tbl - part_type.pri_deny_tbl)
  8180                              <1> %define NUM_OF_AUTO_ACT (part_type.hidden_tbl - part_type.auto_act_tbl)
  8181                              <1> %define NUM_OF_HIDDEN   (part_type.end_of_tbl - part_type.hidden_tbl)
  8182                              <1> %define NUM_OF_ALLOW_HIDE (part_type.hidden_tbl - part_type.allow_hide_tbl)
  8183                              <1> 
  8184                              <1> ;%define NUM_OF_EXT      (part_type.log_deny_tbl - part_type.ext_tbl)
  8185                              <1> 
  8186                              <1> %define MAX_FLOPPY_NUM  2
  8187                              <1> 
  8188                              <1> ;==============================================================================
  8189                              <1> ;fill_bootrecord ---- fill the boot record for a partition
  8190                              <1> ;input:
  8191                              <1> ;      ebx   =  father's abs LBA address
  8192                              <1> ;      dh    =  partition id
  8193                              <1> ;      dl    =  drive id
  8194                              <1> ;      ds:si -> source partition record
  8195                              <1> ;      es:di -> buffer to store the boot record
  8196                              <1> ;output:
  8197                              <1> ;      es:di -> filled with boot record
  8198                              <1> ;==============================================================================
  8199                              <1> fill_bootrecord:
  8200 00002B61 6660                <1>         pushad
  8201 00002B63 FC                  <1>         cld
  8202                              <1> 
  8203 00002B64 57                  <1>         push di                                  ; clear the boot record
  8204 00002B65 30C0                <1>         xor al, al                               ;
  8205 00002B67 B94000              <1>         mov cx, SIZE_OF_BOOTRECORD               ;
  8206 00002B6A F3AA                <1>         rep stosb                                ;
  8207 00002B6C 5F                  <1>         pop di                                   ;
  8208                              <1>         
  8209 00002B6D 895502              <1>         mov [di + struc_bootrecord.drive_id], dx ; fill the drive_id and
  8210                              <1>                                                  ; part_id
  8211 00002B70 6689D9              <1>         mov ecx, ebx
  8212 00002B73 66894D06            <1>         mov [di + struc_bootrecord.father_abs_addr], ecx
  8213                              <1> 
  8214 00002B77 8A7C04              <1>         mov bh, [si + struc_partition.type]
  8215                              <1> 
  8216 00002B7A E8200B              <1>         call get_drive_flags
  8217                              <1> 
  8218 00002B7D 83E015              <1>         and ax, DRVFLAG_MASK                     ; set flags
  8219                              <1>         
  8220 00002B80 08F6                <1>         or dh, dh                                ; check if it's a driver record
  8221 00002B82 7507                <1>         jnz .is_partition
  8222 00002B84 0D8000              <1>         or ax, INFOFLAG_ISDRIVER
  8223 00002B87 30FF                <1>         xor bh, bh
  8224 00002B89 EB0F                <1>         jmp short .set_other_flags
  8225                              <1> 
  8226                              <1> .is_partition:
  8227 00002B8B 6609C9              <1>         or ecx,ecx                               ;
  8228 00002B8E 7403                <1>         jz .not_logical                          ;
  8229 00002B90 0D0001              <1>         or ax, INFOFLAG_LOGICAL                  ;
  8230                              <1>         
  8231                              <1> .not_logical:
  8232 00002B93 3A14                <1>         cmp dl, [si + struc_partition.state]     ; test if it's active
  8233                              <1>                                                  ; should changed to
  8234                              <1>                                                  ; cmp 0x80, [xxx] ? 
  8235 00002B95 7503                <1>         jne .set_other_flags
  8236 00002B97 0D0008              <1>         or ax, INFOFLAG_ACTIVE
  8237                              <1> 
  8238                              <1> .set_other_flags:
  8239                              <1> 
  8240 00002B9A 51                  <1>         push cx                                  ;
  8241 00002B9B 57                  <1>         push di                                  ;
  8242                              <1> 
  8243 00002B9C A98000              <1>         test ax, INFOFLAG_ISDRIVER
  8244 00002B9F 752E                <1>         jnz .not_hidden                          ;
  8245                              <1> 
  8246 00002BA1 A90001              <1>         test ax, INFOFLAG_LOGICAL                ; ah = record flags
  8247 00002BA4 7513                <1>         jnz .not_auto_act                        ;
  8248                              <1> 
  8249 00002BA6 50                  <1>         push ax                                  ; check if it should
  8250 00002BA7 8D3E[8B35]          <1>         lea di, [part_type.auto_act_tbl]         ; be marked as
  8251 00002BAB B90800              <1>         mov cx, NUM_OF_AUTO_ACT                  ; auto active.
  8252 00002BAE 88F8                <1>         mov al, bh
  8253 00002BB0 E8B1FB              <1>         call strchr                              ;
  8254 00002BB3 58                  <1>         pop ax                                   ;
  8255 00002BB4 7203                <1>         jc .not_auto_act                         ;
  8256                              <1> 
  8257 00002BB6 0D0010              <1>         or ax, INFOFLAG_AUTOACTIVE
  8258                              <1>         
  8259                              <1> .not_auto_act:                                   ;
  8260 00002BB9 50                  <1>         push ax                                  ; check if it's a
  8261 00002BBA 8D3E[9335]          <1>         lea di, [part_type.hidden_tbl]           ; hidden partition.
  8262 00002BBE B90700              <1>         mov cx, NUM_OF_HIDDEN                    ;
  8263 00002BC1 88F8                <1>         mov al, bh
  8264 00002BC3 E89EFB              <1>         call strchr                              ;
  8265 00002BC6 58                  <1>         pop ax                                   ;
  8266 00002BC7 7206                <1>         jc .not_hidden                           ;
  8267                              <1> 
  8268 00002BC9 0D0002              <1>         or ax, INFOFLAG_HIDDEN                   ; set the hidden flag
  8269 00002BCC 80E70F              <1>         and bh, 0x0F                             ; clear the hidden signature
  8270                              <1>         
  8271                              <1> .not_hidden:
  8272 00002BCF 5F                  <1>         pop di
  8273 00002BD0 59                  <1>         pop cx
  8274                              <1> 
  8275 00002BD1 8905                <1>         mov [di + struc_bootrecord.flags], ax    ; fill the flags and type
  8276 00002BD3 887D04              <1>         mov [di + struc_bootrecord.type], bh
  8277                              <1> 
  8278 00002BD6 A98000              <1>         test ax, INFOFLAG_ISDRIVER
  8279 00002BD9 7507                <1>         jnz .no_abs_addr                         ; if it's floppy, abs_addr = 0
  8280                              <1>         
  8281 00002BDB 668B5C08            <1>         mov ebx, [si + struc_partition.relative_addr]    ;
  8282                              <1> 
  8283 00002BDF 6601D9              <1>         add ecx, ebx                                     ; ecx = abs_address
  8284                              <1>         
  8285                              <1> .no_abs_addr:
  8286 00002BE2 66894D0A            <1>         mov [di + struc_bootrecord.abs_addr], ecx
  8287                              <1> 
  8288 00002BE6 A98000              <1>         test ax, INFOFLAG_ISDRIVER
  8289 00002BE9 7511                <1>         jnz .isdriver
  8290                              <1> 
  8291 00002BEB A90001              <1>         test ax, INFOFLAG_LOGICAL
  8292 00002BEE 7406                <1>         jz .primary
  8293 00002BF0 8D36[3934]          <1>         lea si, [knl_strings.logical]               ; it's logical partition
  8294 00002BF4 EB2B                <1>         jmp short .fill_name                              ;
  8295                              <1> .primary:
  8296 00002BF6 8D36[3134]          <1>         lea si, [knl_strings.primary]               ; it's primary partition
  8297 00002BFA EB25                <1>         jmp short .fill_name
  8298                              <1> 
  8299                              <1> .isdriver:
  8300 00002BFC 80FA80              <1>         cmp dl, MIN_HD_ID
  8301 00002BFF 721C                <1>         jb .floppy
  8302                              <1> 
  8303 00002C01 A90400              <1>         test ax, DRVFLAG_REMOVABLE
  8304 00002C04 7411                <1>         jz .harddisk
  8305                              <1> 
  8306 00002C06 A91000              <1> 	test ax, DRVFLAG_ISCDROM
  8307 00002C09 7406                <1> 	jz .removable
  8308                              <1> 
  8309 00002C0B 8D36[5434]          <1> 	lea si, [knl_strings.cdrom]
  8310 00002C0F EB10                <1> 	jmp short .fill_name
  8311                              <1> 
  8312                              <1> .removable:
  8313 00002C11 8D36[4134]          <1>         lea si, [knl_strings.removable]
  8314 00002C15 EB0A                <1>         jmp short .fill_name
  8315                              <1> 
  8316                              <1> .harddisk:
  8317 00002C17 8D36[4B34]          <1>         lea si, [knl_strings.harddisk]              ; it's hard drive
  8318 00002C1B EB04                <1>         jmp short .fill_name
  8319                              <1> 
  8320                              <1> .floppy:
  8321 00002C1D 8D36[2A34]          <1>         lea si, [knl_strings.floppy]                ; it's floppy drive
  8322                              <1> 
  8323                              <1> .fill_name:
  8324 00002C21 83C716              <1>         add di, struc_bootrecord.name
  8325 00002C24 B90F00              <1>         mov cx, 15
  8326 00002C27 E84FFB              <1>         call strncpy
  8327                              <1> 
  8328 00002C2A A98000              <1>         test ax, INFOFLAG_ISDRIVER
  8329 00002C2D 7509                <1>         jnz .end
  8330                              <1> 
  8331 00002C2F 88F0                <1>         mov al, dh                                  ; append partition id
  8332 00002C31 30E4                <1>         xor ah, ah                                  ; at the end of the
  8333 00002C33 B103                <1>         mov cl, 3                                   ; name
  8334 00002C35 E8B4FA              <1>         call itoa                                   ;
  8335                              <1> 
  8336                              <1> .end:
  8337 00002C38 6661                <1>         popad
  8338 00002C3A C3                  <1>         ret
  8339                              <1> 
  8340                              <1> ;==============================================================================
  8341                              <1> ;fill_special_record ---- fill the boot record for a special command
  8342                              <1> ;input:
  8343                              <1> ;      al = command id
  8344                              <1> ;      es:di -> buffer to store the boot record
  8345                              <1> ;output:
  8346                              <1> ;      es:di -> filled with boot record
  8347                              <1> ;==============================================================================
  8348                              <1> fill_special_record:
  8349 00002C3B 60                  <1> 	pusha
  8350 00002C3C FC                  <1>         cld
  8351                              <1> 
  8352 00002C3D 50                  <1> 	push ax
  8353 00002C3E 57                  <1>         push di                                  ; clear the boot record
  8354 00002C3F 30C0                <1>         xor al, al                               ;
  8355 00002C41 B94000              <1>         mov cx, SIZE_OF_BOOTRECORD               ;
  8356 00002C44 F3AA                <1>         rep stosb                                ;
  8357 00002C46 5F                  <1>         pop di                                   ;
  8358 00002C47 58                  <1> 	pop ax
  8359                              <1> 
  8360 00002C48 830D08              <1> 	or word [di + struc_bootrecord.flags], INFOFLAG_ISSPECIAL
  8361 00002C4B 884504              <1> 	mov byte [di + struc_bootrecord.type], al
  8362 00002C4E 83C716              <1> 	add di, struc_bootrecord.name
  8363                              <1> 
  8364 00002C51 31F6                <1> 	xor si, si
  8365                              <1> 
  8366 00002C53 3C02                <1> 	cmp al, SPREC_POWEROFF
  8367 00002C55 7503                <1> 	jne .not_poweroff
  8368 00002C57 BE[6334]            <1> 	mov si, knl_strings.poweroff
  8369                              <1> 
  8370                              <1> .not_poweroff:
  8371 00002C5A 3C03                <1> 	cmp al, SPREC_RESTART
  8372 00002C5C 7503                <1> 	jne .not_restart
  8373 00002C5E BE[6D34]            <1> 	mov si, knl_strings.restart
  8374                              <1> 
  8375                              <1> .not_restart:
  8376 00002C61 3C01                <1> 	cmp al, SPREC_QUIT
  8377 00002C63 7503                <1> 	jne .not_quit
  8378 00002C65 BE[7434]            <1> 	mov si, knl_strings.quit
  8379                              <1> 
  8380                              <1> .not_quit:
  8381 00002C68 3C00                <1> 	cmp al, SPREC_BOOTPREV
  8382 00002C6A 7503                <1> 	jne .not_bootprev
  8383 00002C6C BE[8134]            <1> 	mov si, knl_strings.bootprev
  8384                              <1> 
  8385                              <1> .not_bootprev:
  8386 00002C6F B90F00              <1> 	mov cx, 15
  8387 00002C72 E804FB              <1> 	call strncpy
  8388 00002C75 61                  <1> 	popa
  8389 00002C76 C3                  <1> 	ret
  8390                              <1> 
  8391                              <1> ;==============================================================================
  8392                              <1> ;get_parttype_str ---- get partition type string
  8393                              <1> ;input:
  8394                              <1> ;      al = partition type
  8395                              <1> ;output:
  8396                              <1> ;      ds:si -> partition type string
  8397                              <1> ;==============================================================================
  8398                              <1> get_parttype_str:
  8399 00002C77 57                  <1>         push di
  8400 00002C78 51                  <1>         push cx
  8401 00002C79 8D3E[9534]          <1>         lea di, [part_type.id_tbl]
  8402 00002C7D B91A00              <1>         mov cx, NUM_OF_ID
  8403 00002C80 E8E1FA              <1>         call strchr
  8404 00002C83 C1E103              <1>         shl cx, 3                   ; cx = cx * 8
  8405 00002C86 8D36[AF34]          <1>         lea si, [part_type.str_tbl]
  8406 00002C8A 01CE                <1>         add si, cx
  8407 00002C8C 59                  <1>         pop cx
  8408 00002C8D 5F                  <1>         pop di
  8409 00002C8E C3                  <1>         ret
  8410                              <1> 
  8411                              <1> ;==============================================================================
  8412                              <1> ;check_bootrecord ---- check if the boot record is ok
  8413                              <1> ;input:
  8414                              <1> ;      ds:si -> boot record
  8415                              <1> ;output:
  8416                              <1> ;      cf = 0 the boot record is ok
  8417                              <1> ;      cf = 1 the boot record cannot boot
  8418                              <1> ;==============================================================================
  8419                              <1> check_bootrecord:
  8420 00002C8F 6660                <1>         pushad                           ; save registers
  8421 00002C91 09F6                <1> 	or si, si
  8422 00002C93 0F84F800            <1> 	jmpz .bad_record
  8423                              <1> 
  8424 00002C97 FC                  <1>         cld
  8425                              <1> 
  8426                              <1> ;============= check special record ===========
  8427 00002C98 8B04                <1>         mov ax, [si + struc_bootrecord.flags]        ; get record flags
  8428 00002C9A A90800              <1> 	test ax, INFOFLAG_ISSPECIAL
  8429 00002C9D 0F842400            <1> 	jmpz .normal_record
  8430                              <1> 
  8431 00002CA1 8A5C04              <1> 	mov bl, [si + struc_bootrecord.type]
  8432 00002CA4 80FB04              <1> 	cmp bl, NUM_OF_SPREC
  8433 00002CA7 0F83E400            <1> 	jmpnb .bad_record
  8434                              <1> 
  8435 00002CAB 80FB02              <1> 	cmp bl, SPREC_POWEROFF
  8436 00002CAE 0F850600            <1> 	jmpne .check_prev
  8437                              <1> 
  8438 00002CB2 E8B5FB              <1> 	call check_apm_bios
  8439 00002CB5 E9D800              <1> 	jmp .end
  8440                              <1> 
  8441                              <1> .check_prev:
  8442 00002CB8 80FB00              <1> 	cmp bl, SPREC_BOOTPREV
  8443 00002CBB 0F85CD00            <1> 	jmpne .good_record
  8444                              <1> 
  8445 00002CBF E84D07              <1> 	call check_prev_mbr
  8446 00002CC2 E9CB00              <1> 	jmp .end
  8447                              <1> 
  8448                              <1> .normal_record:
  8449                              <1> ;============= check driver ===================
  8450 00002CC5 8B5402              <1>         mov dx, [si + struc_bootrecord.drive_id]     ; get drive id and part id
  8451 00002CC8 8D3E[FB1F]          <1>         lea di, [hdio_tmp.driveinfo]
  8452 00002CCC E8E808              <1>         call get_drive_info                          ; check if the drive ok
  8453 00002CCF 0F82BC00            <1>         jmpc .bad_record
  8454                              <1> 
  8455 00002CD3 50                  <1>         push ax
  8456 00002CD4 8A6501              <1>         mov ah, [di + struc_driveinfo.flags]         ;
  8457 00002CD7 251515              <1>         and ax, ( DRVFLAG_MASK << 8) | DRVFLAG_MASK  ; check if the flags was
  8458 00002CDA 38E0                <1>         cmp al, ah                                   ; changed
  8459 00002CDC 58                  <1>         pop ax                                       ;
  8460 00002CDD 0F85AE00            <1>         jmpne .bad_record
  8461                              <1> 
  8462 00002CE1 A98000              <1>         test ax, INFOFLAG_ISDRIVER                   ; if it's a driver then ok
  8463 00002CE4 0F85A400            <1>         jmpnz .good_record
  8464                              <1> 
  8465                              <1> ;============ check partition =================
  8466                              <1> ; now we know it's a partiton!
  8467 00002CE8 8A5C04              <1>         mov bl, [si + struc_bootrecord.type]
  8468 00002CEB 08DB                <1>         or bl, bl                                    
  8469 00002CED 0F849E00            <1>         jmpz .bad_record                               ; it's free, bad!
  8470                              <1> 
  8471                              <1> .not_free:
  8472 00002CF1 A90001              <1>         test ax, INFOFLAG_LOGICAL                    ; it's logical partition
  8473 00002CF4 7509                <1>         jnz .logical_part                            ;
  8474                              <1> 
  8475 00002CF6 B90400              <1>         mov cx, NUM_OF_PRI_DENY                      ;
  8476 00002CF9 8D3E[8735]          <1>         lea di, [part_type.pri_deny_tbl]             ;
  8477 00002CFD EB07                <1>         jmp short .check_type                        ; check if the partition
  8478                              <1> 
  8479                              <1> .logical_part:                                       ; type is in the deny
  8480 00002CFF B90400              <1>         mov cx, NUM_OF_LOG_DENY                      ; table
  8481 00002D02 8D3E[8735]          <1>         lea di, [part_type.log_deny_tbl]             ;
  8482                              <1> 
  8483                              <1> .check_type:                                         ;
  8484 00002D06 50                  <1>         push ax
  8485 00002D07 88D8                <1>         mov al, bl                                   ; al = partition type
  8486 00002D09 E858FA              <1>         call strchr                                  ;
  8487 00002D0C 58                  <1>         pop ax
  8488 00002D0D 0F837E00            <1>         jmpnc .bad_record                              ; this type is denied!
  8489                              <1> 
  8490                              <1> ;================ check in father ===================        
  8491                              <1> ; read father's partition table into buffer and check it
  8492 00002D11 50                  <1>         push ax                                      ; save flags
  8493                              <1> 
  8494 00002D12 668B5C06            <1>         mov ebx, [si + struc_bootrecord.father_abs_addr]
  8495                              <1> 
  8496 00002D16 B80102              <1>         mov ax, (INT13H_READ << 8 ) | 0x01           ; read the first sector
  8497 00002D19 8D3E[2120]          <1>         lea di, [knl_tmp.disk_buf1]                           ; into buffer
  8498 00002D1D E83B0A              <1>         call disk_access                             ;
  8499 00002D20 58                  <1>         pop ax                                       ; load flags
  8500 00002D21 0F826A00            <1>         jmpc .bad_record
  8501                              <1> 
  8502 00002D25 81BDFE0155AA        <1>         cmp word [di + BR_FLAG_OFF], BR_GOOD_FLAG    ; check if the father is
  8503 00002D2B 7562                <1>         jne .bad_record                              ; good
  8504                              <1> 
  8505 00002D2D 668B4C0A            <1>         mov ecx, [si + struc_bootrecord.abs_addr]    ; get partition's abs addr
  8506 00002D31 6629D9              <1>         sub ecx, ebx                                 ; calculate relative address
  8507 00002D34 6689CB              <1> 	mov ebx, ecx
  8508                              <1> 
  8509 00002D37 81C7BE01            <1>         add di, PART_TBL_OFF                         ; point to father's partition
  8510                              <1>                                                      ; table
  8511 00002D3B B90400              <1>         mov cx, 4
  8512                              <1>         
  8513                              <1> .search_in_father:                                   ; find the record in
  8514 00002D3E 807D0400            <1> 	cmp byte [di + struc_partition.type], 0      ;
  8515 00002D42 7406                <1> 	je .invalid_entry
  8516 00002D44 66395D08            <1>         cmp [di + struc_partition.relative_addr], ebx; father's partition
  8517 00002D48 7407                <1>         je .found_it     
  8518                              <1> .invalid_entry:                                      ; table
  8519 00002D4A 83C710              <1>         add di, SIZE_OF_PARTITION                    ;
  8520 00002D4D E2EF                <1>         loop .search_in_father                       ;
  8521 00002D4F EB3E                <1>         jmp .bad_record                        ; not found! it's bad.
  8522                              <1>         
  8523                              <1> .found_it:
  8524                              <1> 
  8525                              <1> ;adjust some flags of the boot record.
  8526                              <1> ;there is no other place to suit these codes,
  8527                              <1> ;so I place them here :-(
  8528                              <1> 
  8529 00002D51 50                  <1>         push ax                                      ;
  8530 00002D52 57                  <1>         push di                                      ; hidden partition
  8531 00002D53 8A5D04              <1>         mov bl, [di + struc_partition.type]          ; check if it's a
  8532 00002D56 88D8                <1>         mov al, bl                                   ;
  8533 00002D58 8D3E[9335]          <1>         lea di, [part_type.hidden_tbl]               ;
  8534 00002D5C B90700              <1>         mov cx, NUM_OF_HIDDEN                        ;
  8535 00002D5F E802FA              <1>         call strchr                                  ;
  8536 00002D62 5F                  <1>         pop di                                       ;
  8537 00002D63 58                  <1>         pop ax                                       ;
  8538 00002D64 7208                <1>         jc .not_hidden                               ;
  8539 00002D66 80E30F              <1>         and bl, 0x0F
  8540 00002D69 0D0002              <1>         or ax, INFOFLAG_HIDDEN                       ; set hidden flag.
  8541 00002D6C EB03                <1>         jmp short .validate_type
  8542                              <1> 
  8543                              <1> .not_hidden:
  8544 00002D6E 25FFFD              <1>         and ax, ~ INFOFLAG_HIDDEN                    ; clear hidden flag.
  8545                              <1> 
  8546                              <1> .validate_type:
  8547                              <1> 
  8548                              <1> %ifdef STRICT_PART_CHECK
  8549                              <1>         cmp bl, [si + struc_bootrecord.type]         ; check the partition type
  8550                              <1>         jne .bad_record                              ; wrong type!
  8551                              <1> %else
  8552 00002D71 885C04              <1> 	mov [si + struc_bootrecord.type], bl         ; set partition type
  8553                              <1> %endif
  8554                              <1> 
  8555                              <1> .type_ok:
  8556 00002D74 52                  <1>         push dx
  8557 00002D75 A90020              <1>         test ax, INFOFLAG_SWAPDRVID                  ; check if swap driver id
  8558 00002D78 7403                <1>         jz .no_swapid
  8559 00002D7A 80E280              <1>         and dl, 0x80
  8560                              <1> 
  8561                              <1> .no_swapid:
  8562 00002D7D 3A15                <1>         cmp dl, [di + struc_partition.state]         ; check if the partition
  8563 00002D7F 5A                  <1>         pop dx
  8564 00002D80 7505                <1>         jne .not_active                              ; is active.
  8565 00002D82 0D0008              <1>         or ax, INFOFLAG_ACTIVE                       ; should change to
  8566 00002D85 EB03                <1>         jmp short .adjust_flags                      ; cmp 0x80, byte [state] ?
  8567                              <1> 
  8568                              <1> .not_active:
  8569 00002D87 25FFF7              <1>         and ax, ~ INFOFLAG_ACTIVE
  8570                              <1> 
  8571                              <1> .adjust_flags:
  8572 00002D8A 8904                <1>         mov [si + struc_bootrecord.flags], ax
  8573                              <1> 
  8574                              <1> ;==================  check partition itself ==============
  8575                              <1> .check_inside:                                       ; check partition itself
  8576                              <1> 
  8577                              <1> %ifdef STRICT_PART_CHECK
  8578                              <1>         mov ebx, [si + struc_bootrecord.abs_addr]
  8579                              <1> 
  8580                              <1>         lea di, [knl_tmp.disk_buf1]
  8581                              <1>         mov ax, (INT13H_READ << 8 ) | 0x01           ; read the first sector
  8582                              <1>         call disk_access                             ; into buffer
  8583                              <1>         jc .bad_record                               ; read error!
  8584                              <1>         
  8585                              <1>         cmp word [di + BR_FLAG_OFF], BR_GOOD_FLAG    ; check if the paritition
  8586                              <1>         jne .bad_record                              ; is good
  8587                              <1> %endif
  8588                              <1> 
  8589                              <1> .good_record:
  8590 00002D8C F8                  <1>         clc
  8591 00002D8D EB01                <1>         jmp short .end
  8592                              <1> 
  8593                              <1> .bad_record:
  8594 00002D8F F9                  <1>         stc
  8595                              <1> .end:
  8596 00002D90 6661                <1>         popad
  8597 00002D92 C3                  <1>         ret
  8598                              <1> 
  8599                              <1> ;==============================================================================
  8600                              <1> ;search_drv_records ---- search all driver records 
  8601                              <1> ;input:
  8602                              <1> ;      dl = beginning driver id.
  8603                              <1> ;      cl = max number of boot records could be searched
  8604                              <1> ;      es:di -> buffer to store boot records. 
  8605                              <1> ;output:
  8606                              <1> ;      ch = number of the valid boot records have searched
  8607                              <1> ;==============================================================================
  8608                              <1> search_drv_records:
  8609 00002D93 30ED                <1>        xor ch, ch
  8610 00002D95 882E[0620]          <1>        mov [knl_tmp.good_record_num], ch
  8611 00002D99 880E[0720]          <1>        mov [knl_tmp.max_record_num], cl
  8612 00002D9D 882E[0D20]          <1>        mov [knl_tmp.floppy_num], ch
  8613 00002DA1 08C9                <1>        or cl, cl 
  8614 00002DA3 7501                <1>        jnz .can_search_more
  8615 00002DA5 C3                  <1>        ret
  8616                              <1> 
  8617                              <1> .can_search_more:
  8618 00002DA6 60                  <1>        pusha
  8619 00002DA7 6631DB              <1>        xor ebx, ebx
  8620 00002DAA 30F6                <1>        xor dh, dh
  8621                              <1> 
  8622                              <1> .loop_search:
  8623 00002DAC E8EE08              <1>        call get_drive_flags
  8624 00002DAF 722C                <1>        jc .search_next
  8625                              <1> 
  8626 00002DB1 A801                <1>        test al, DRVFLAG_DRIVEOK
  8627 00002DB3 7228                <1>        jc .search_next
  8628                              <1> 
  8629                              <1> %ifdef LIMIT_FLOPPY_NUMBER
  8630 00002DB5 80FA80              <1>        cmp dl, MIN_HD_ID
  8631 00002DB8 730F                <1>        jae .isharddisk
  8632 00002DBA A804                <1>        test al, DRVFLAG_REMOVABLE
  8633 00002DBC 740B                <1>        jz .isharddisk
  8634                              <1> 
  8635 00002DBE FE06[0D20]          <1>        inc byte [knl_tmp.floppy_num]
  8636 00002DC2 803E[0D20]02        <1>        cmp byte [knl_tmp.floppy_num], MAX_FLOPPY_NUM
  8637 00002DC7 7714                <1>        ja .search_next
  8638                              <1> 
  8639                              <1> .isharddisk:
  8640                              <1> %endif
  8641                              <1> 
  8642 00002DC9 E895FD              <1>        call fill_bootrecord
  8643 00002DCC FE06[0620]          <1>        inc byte [knl_tmp.good_record_num]
  8644 00002DD0 8A26[0620]          <1>        mov ah, [knl_tmp.good_record_num]                ; check if there are any
  8645 00002DD4 3A26[0720]          <1>        cmp ah, [knl_tmp.max_record_num]                 ; more space.
  8646 00002DD8 7309                <1>        jae .end
  8647                              <1> 
  8648 00002DDA 83C740              <1>        add di, SIZE_OF_BOOTRECORD
  8649                              <1> 
  8650                              <1> .search_next:
  8651 00002DDD FEC2                <1>        inc dl
  8652 00002DDF 08D2                <1>        or dl, dl
  8653 00002DE1 75C9                <1>        jnz .loop_search
  8654                              <1> 
  8655                              <1> .end:
  8656 00002DE3 61                  <1>        popa
  8657 00002DE4 8A2E[0620]          <1>        mov ch, [knl_tmp.good_record_num]
  8658 00002DE8 C3                  <1>        ret
  8659                              <1> 
  8660                              <1> 
  8661                              <1> ;==============================================================================
  8662                              <1> ;search_part_records ---- search all boot records in a drive
  8663                              <1> ;input:
  8664                              <1> ;      dl = drive id
  8665                              <1> ;      cl = max number of boot records could be searched
  8666                              <1> ;      es:di -> buffer to store boot records
  8667                              <1> ;output:
  8668                              <1> ;      ch = number of the valid boot records have searched
  8669                              <1> ;==============================================================================
  8670                              <1> search_part_records:
  8671 00002DE9 30ED                <1>         xor ch, ch
  8672 00002DEB 882E[0620]          <1>         mov [knl_tmp.good_record_num], ch
  8673 00002DEF 880E[0720]          <1>         mov [knl_tmp.max_record_num], cl
  8674 00002DF3 08C9                <1>         or cl, cl
  8675 00002DF5 7501                <1>         jnz .can_search_more                         ; check if there are any
  8676 00002DF7 C3                  <1>         ret                                          ; space to search more.
  8677                              <1>         
  8678                              <1> .can_search_more:
  8679 00002DF8 60                  <1>         pusha
  8680                              <1> 
  8681 00002DF9 6631DB              <1>         xor ebx, ebx                                 ; clear some stuff
  8682 00002DFC 30F6                <1>         xor dh, dh                                   ;
  8683                              <1> 
  8684 00002DFE E89C08              <1>         call get_drive_flags                         ; get the drive flags.
  8685 00002E01 0F82A400            <1>         jmpc .end
  8686                              <1>         
  8687 00002E05 A804                <1>         test al, DRVFLAG_REMOVABLE                  ; check if it's a floppy
  8688 00002E07 0F859E00            <1>         jmpnz .end
  8689 00002E0B A810                <1> 	test al, DRVFLAG_ISCDROM
  8690 00002E0D 0F859800            <1> 	jmpnz .end
  8691                              <1> 
  8692                              <1> ;search partitions
  8693                              <1> .search_partitions:
  8694 00002E11 57                  <1>         push di
  8695 00002E12 8D3E[2128]          <1>         lea di, [knl_tmp.disk_buf2]
  8696 00002E16 89FE                <1>         mov si, di
  8697 00002E18 B80102              <1>         mov ax, (INT13H_READ << 8 ) | 0x01           ; read the first sector
  8698 00002E1B E83D09              <1>         call disk_access                             ; into buffer
  8699 00002E1E 5F                  <1>         pop di
  8700 00002E1F 0F828600            <1>         jmpc .end
  8701                              <1>         
  8702 00002E23 81BCFE0155AA        <1>         cmp word [si + BR_FLAG_OFF], BR_GOOD_FLAG    ; check if the partition
  8703 00002E29 0F857C00            <1>         jmpne .end                                   ; table is good
  8704                              <1>         
  8705 00002E2D 81C6BE01            <1>         add si, PART_TBL_OFF                         ; point to partition table
  8706                              <1>         
  8707 00002E31 30C0                <1>         xor al, al
  8708                              <1> 
  8709                              <1> .loop_search_part:
  8710 00002E33 FEC0                <1>         inc al
  8711                              <1> 
  8712 00002E35 6609DB              <1>         or ebx, ebx                                  ; check if it's primary
  8713 00002E38 7508                <1>         jnz .logical_part
  8714                              <1>         
  8715 00002E3A 88C6                <1>         mov dh, al                                   ;
  8716 00002E3C 8836[0820]          <1>         mov [knl_tmp.part_id], dh                        ;
  8717 00002E40 EB04                <1>         jmp short .cont_fill_it                      ; get the partition id
  8718                              <1>                                                      ;
  8719                              <1> .logical_part:                                       ;
  8720 00002E42 8A36[0820]          <1>         mov dh, [knl_tmp.part_id]                        ;
  8721                              <1>         
  8722                              <1> .cont_fill_it:
  8723 00002E46 E818FD              <1>         call fill_bootrecord                         ; fill the boot record
  8724 00002E49 87F7                <1>         xchg si, di
  8725 00002E4B E841FE              <1>         call check_bootrecord                        ; check if it's valid
  8726 00002E4E 87F7                <1>         xchg si, di
  8727 00002E50 7211                <1>         jc .cont_search_part
  8728                              <1> 
  8729                              <1> ; find a valid boot record!
  8730                              <1> 
  8731 00002E52 FE06[0620]          <1>         inc byte [knl_tmp.good_record_num]
  8732 00002E56 8A26[0620]          <1>         mov ah, [knl_tmp.good_record_num]                ; check if there are any
  8733 00002E5A 3A26[0720]          <1>         cmp ah, [knl_tmp.max_record_num]                 ; more space.
  8734 00002E5E 7349                <1>         jae .end
  8735                              <1> 
  8736 00002E60 83C740              <1>         add di, SIZE_OF_BOOTRECORD                   ; move the pointer to
  8737                              <1> 
  8738                              <1> .cont_search_part:
  8739 00002E63 83C610              <1>         add si, SIZE_OF_PARTITION
  8740 00002E66 3C04                <1>         cmp al, 4
  8741 00002E68 72C9                <1>         jb .loop_search_part
  8742                              <1>         
  8743 00002E6A 83EE40              <1>         sub si, SIZE_OF_PARTITION * 4
  8744                              <1>         
  8745                              <1> ;now go ahead to search logical partitons
  8746 00002E6D 30E4                <1>         xor ah, ah
  8747                              <1> 
  8748                              <1> .loop_search_ext:
  8749 00002E6F FEC4                <1>         inc ah
  8750 00002E71 8A4404              <1>         mov al, [si + struc_partition.type]
  8751                              <1>         
  8752 00002E74 3C05                <1>         cmp al, 0x05                                 ; check if it's
  8753 00002E76 7412                <1>         je .found_ext                                ; extended
  8754 00002E78 3C0F                <1>         cmp al, 0x0F                                 ; partition
  8755 00002E7A 740E                <1>         je .found_ext                                ;
  8756 00002E7C 3C85                <1>         cmp al, 0x85                                 ;
  8757 00002E7E 740A                <1>         je .found_ext                                ;
  8758                              <1> 
  8759 00002E80 83C610              <1>         add si, SIZE_OF_PARTITION
  8760 00002E83 80FC04              <1>         cmp ah, 4
  8761 00002E86 72E7                <1>         jb .loop_search_ext
  8762 00002E88 EB1F                <1>         jmp short .end
  8763                              <1> 
  8764                              <1> ;there are some extended partitions, find inside it!
  8765                              <1> .found_ext:
  8766 00002E8A FE06[0820]          <1>         inc byte [knl_tmp.part_id]                       ; increase the partition id.
  8767 00002E8E 668B4C08            <1> 	mov ecx, [si + struc_partition.relative_addr]
  8768                              <1> 
  8769 00002E92 6609DB              <1>         or ebx, ebx                                  ; all of the later logical
  8770 00002E95 7407                <1>         jz .first_ext                                ; extended partitions' relative
  8771 00002E97 668B1E[0920]        <1>         mov ebx, [knl_tmp.logi_father]                   ; address are based on the
  8772 00002E9C EB05                <1>         jmp short .calc_next_father                  ; first primary extended
  8773                              <1>                                                      ; partition
  8774                              <1> .first_ext:
  8775 00002E9E 66890E[0920]        <1>         mov [knl_tmp.logi_father], ecx
  8776                              <1> 
  8777                              <1> .calc_next_father:
  8778 00002EA3 6601CB              <1>         add ebx, ecx                                 ; calculate the next
  8779                              <1>                                                      ; father's abs
  8780                              <1>                                                      ; address
  8781                              <1>         
  8782 00002EA6 E968FF              <1>         jmp .search_partitions                       ; continue search
  8783                              <1> 
  8784                              <1> .end:
  8785 00002EA9 61                  <1>         popa
  8786 00002EAA 8A2E[0620]          <1>         mov ch, [knl_tmp.good_record_num]
  8787 00002EAE C3                  <1>         ret
  8788                              <1>         
  8789                              <1> ;==============================================================================
  8790                              <1> ;search_specials ---- search all special boot records
  8791                              <1> ;input:
  8792                              <1> ;      cl = max number of boot records could be searched
  8793                              <1> ;      es:di -> buffer to store boot records
  8794                              <1> ;output:
  8795                              <1> ;      ch = number of the valid boot records have searched
  8796                              <1> ;==============================================================================
  8797                              <1> search_specials:
  8798 00002EAF 50                  <1> 	push ax
  8799 00002EB0 52                  <1> 	push dx
  8800 00002EB1 56                  <1> 	push si
  8801                              <1> 
  8802 00002EB2 88CC                <1> 	mov ah, cl
  8803 00002EB4 80FC04              <1> 	cmp ah, NUM_OF_SPREC
  8804 00002EB7 7202                <1> 	jb .do_search
  8805 00002EB9 B404                <1> 	mov ah, NUM_OF_SPREC
  8806                              <1> 
  8807                              <1> .do_search:
  8808 00002EBB 30ED                <1> 	xor ch, ch
  8809 00002EBD 30C0                <1> 	xor al, al
  8810 00002EBF 08E4                <1> 	or ah, ah
  8811 00002EC1 7415                <1> 	jz .end
  8812                              <1> 
  8813                              <1> .loop_search:
  8814 00002EC3 E875FD              <1> 	call fill_special_record
  8815 00002EC6 89FE                <1> 	mov si, di
  8816 00002EC8 E8C4FD              <1> 	call check_bootrecord
  8817 00002ECB 7205                <1> 	jc .search_next
  8818 00002ECD 83C740              <1> 	add di, SIZE_OF_BOOTRECORD
  8819 00002ED0 FEC5                <1> 	inc ch
  8820                              <1> .search_next:
  8821 00002ED2 FEC0                <1> 	inc al
  8822 00002ED4 38E0                <1> 	cmp al, ah
  8823 00002ED6 72EB                <1> 	jb .loop_search
  8824                              <1> .end:
  8825 00002ED8 5E                  <1> 	pop si
  8826 00002ED9 5A                  <1> 	pop dx
  8827 00002EDA 58                  <1> 	pop ax
  8828 00002EDB C3                  <1> 	ret
  8829                              <1> 
  8830                              <1> ;==============================================================================
  8831                              <1> ;search_records ---- search all boot records
  8832                              <1> ;input:
  8833                              <1> ;      al = 0 all records, al = 1 only partitions
  8834                              <1> ;      cl = max number of boot records could be searched
  8835                              <1> ;      es:di -> buffer to store boot records
  8836                              <1> ;output:
  8837                              <1> ;      ch = number of the valid boot records have searched
  8838                              <1> ;==============================================================================
  8839                              <1> search_records:
  8840 00002EDC 57                  <1> 	push di
  8841 00002EDD 52                  <1> 	push dx
  8842 00002EDE 53                  <1> 	push bx
  8843 00002EDF 50                  <1> 	push ax
  8844                              <1> 
  8845 00002EE0 31D2                <1>         xor dx, dx
  8846                              <1> 
  8847 00002EE2 08C0                <1> 	or al, al
  8848 00002EE4 7516                <1> 	jnz .search_parts
  8849                              <1> 
  8850 00002EE6 E8C6FF              <1> 	call search_specials
  8851 00002EE9 28E9                <1> 	sub cl, ch
  8852 00002EEB 88EE                <1> 	mov dh, ch
  8853                              <1> 
  8854 00002EED B340                <1>         mov bl, SIZE_OF_BOOTRECORD
  8855                              <1> 
  8856 00002EEF E8A1FE              <1>         call search_drv_records
  8857 00002EF2 28E9                <1>         sub cl, ch
  8858 00002EF4 88E8                <1>         mov al, ch
  8859 00002EF6 00EE                <1> 	add dh, ch
  8860 00002EF8 F6E3                <1>         mul bl
  8861 00002EFA 01C7                <1>         add di, ax
  8862                              <1> 
  8863                              <1> .search_parts:
  8864 00002EFC E80700              <1> 	call search_all_partitions
  8865 00002EFF 00F5                <1> 	add ch, dh
  8866 00002F01 58                  <1> 	pop ax
  8867 00002F02 5B                  <1> 	pop bx
  8868 00002F03 5A                  <1> 	pop dx
  8869 00002F04 5F                  <1> 	pop di
  8870 00002F05 C3                  <1> 	ret
  8871                              <1> 
  8872                              <1> ;==============================================================================
  8873                              <1> ;search_all_partitions ---- search all partitions in all drives
  8874                              <1> ;input:
  8875                              <1> ;      cl = max number of boot records could be searched
  8876                              <1> ;      dl = lowest drive id to be searched
  8877                              <1> ;      es:di -> buffer to store boot records
  8878                              <1> ;output:
  8879                              <1> ;      ch = number of the valid boot records have searched
  8880                              <1> ;==============================================================================
  8881                              <1> search_all_partitions:
  8882 00002F06 50                  <1>         push ax
  8883 00002F07 52                  <1> 	push dx
  8884 00002F08 30F6                <1> 	xor dh, dh
  8885 00002F0A B340                <1>         mov bl, SIZE_OF_BOOTRECORD
  8886                              <1> 
  8887                              <1> .loop_search:
  8888 00002F0C E8DAFE              <1>         call search_part_records
  8889 00002F0F 28E9                <1>         sub cl, ch
  8890 00002F11 00EE                <1>         add dh, ch                                   ; count the searched boot
  8891                              <1>                                                      ; records
  8892 00002F13 88E8                <1>         mov al, ch                                   ;
  8893 00002F15 F6E3                <1>         mul bl                                       ; adjust the pointer (di)
  8894 00002F17 01C7                <1>         add di, ax                                   ;
  8895 00002F19 FEC2                <1>         inc dl
  8896 00002F1B 08D2                <1>         or dl, dl
  8897 00002F1D 75ED                <1>         jnz .loop_search
  8898 00002F1F 88F5                <1>         mov ch, dh
  8899 00002F21 5A                  <1> 	pop dx
  8900 00002F22 58                  <1>         pop ax
  8901 00002F23 C3                  <1>         ret
  8902                              <1> 
  8903                              <1> 
  8904                              <1> ;==============================================================================
  8905                              <1> ;get_record_typestr ---- get a record's type string
  8906                              <1> ;input:
  8907                              <1> ;      ds:si -> the record
  8908                              <1> ;      es:di -> the buffer to store the type string
  8909                              <1> ;output:
  8910                              <1> ;      none
  8911                              <1> ;==============================================================================
  8912                              <1> get_record_typestr:
  8913 00002F24 60                  <1>         pusha
  8914 00002F25 8B04                <1>         mov ax, [si + struc_bootrecord.flags]
  8915 00002F27 8A5C04              <1>         mov bl, [si + struc_bootrecord.type]
  8916 00002F2A 8B5402              <1>         mov dx, [si + struc_bootrecord.drive_id]
  8917                              <1> 
  8918 00002F2D A90800              <1> 	test ax, INFOFLAG_ISSPECIAL
  8919 00002F30 751A                <1> 	jnz .special
  8920                              <1> 
  8921 00002F32 A98000              <1>         test ax, INFOFLAG_ISDRIVER
  8922 00002F35 7430                <1>         jz .partition
  8923                              <1> 
  8924 00002F37 A90400              <1>         test ax, DRVFLAG_REMOVABLE
  8925 00002F3A 741C                <1>         jz .harddisk
  8926                              <1> 
  8927 00002F3C F6C280              <1>         test dl, 0x80
  8928 00002F3F 741D                <1>         jz .floppy
  8929                              <1> 
  8930 00002F41 A91000              <1> 	test ax, DRVFLAG_ISCDROM
  8931 00002F44 740C                <1> 	jz .removable
  8932                              <1> 
  8933 00002F46 8D36[5434]          <1> 	lea si, [knl_strings.cdrom]
  8934 00002F4A EB16                <1> 	jmp short .filldrv
  8935                              <1> 
  8936                              <1> .special:
  8937 00002F4C 8D36[5B34]          <1> 	lea si, [knl_strings.special]
  8938 00002F50 EB10                <1> 	jmp short .filldrv
  8939                              <1> 
  8940                              <1> .removable:
  8941 00002F52 8D36[4134]          <1>         lea si, [knl_strings.removable]
  8942 00002F56 EB0A                <1>         jmp short .filldrv
  8943                              <1> 
  8944                              <1> .harddisk:
  8945 00002F58 8D36[4B34]          <1>         lea si, [knl_strings.harddisk]
  8946 00002F5C EB04                <1>         jmp short .filldrv
  8947                              <1> 
  8948                              <1> .floppy:
  8949 00002F5E 8D36[2A34]          <1>         lea si, [knl_strings.floppy]
  8950                              <1> 
  8951                              <1> .filldrv:
  8952 00002F62 E82EF8              <1>         call strcpy
  8953 00002F65 EB27                <1>         jmp short .end
  8954                              <1> 
  8955                              <1> .partition:
  8956 00002F67 A90001              <1>         test ax, INFOFLAG_LOGICAL
  8957 00002F6A 7406                <1>         jz short .primary
  8958                              <1> 
  8959 00002F6C 8D36[3934]          <1>         lea si, [knl_strings.logical]
  8960 00002F70 EB04                <1>         jmp short .fillpart
  8961                              <1> 
  8962                              <1> .primary:
  8963 00002F72 8D36[3134]          <1>         lea si, [knl_strings.primary]
  8964                              <1> 
  8965                              <1> .fillpart:
  8966 00002F76 E81AF8              <1>         call strcpy
  8967                              <1> 
  8968 00002F79 C7052028            <1>         mov word [di], ' ('
  8969 00002F7D 47                  <1>         inc di
  8970 00002F7E 47                  <1>         inc di
  8971                              <1> 
  8972 00002F7F 88D8                <1>         mov al, bl
  8973 00002F81 E8F3FC              <1>         call get_parttype_str
  8974 00002F84 E80CF8              <1>         call strcpy
  8975 00002F87 C60529              <1>         mov byte [di], ')'
  8976 00002F8A 47                  <1>         inc di
  8977 00002F8B 30C0                <1>         xor al, al
  8978 00002F8D AA                  <1>         stosb
  8979                              <1> 
  8980                              <1> .end:
  8981 00002F8E 61                  <1>         popa
  8982 00002F8F C3                  <1>         ret
  8983                              <1> 
  8984                              <1> ;==============================================================================
  8985                              <1> ;get_record_string ---- get a record's string
  8986                              <1> ;input:
  8987                              <1> ;      ds:si -> the record
  8988                              <1> ;      es:di -> buffer to store the string
  8989                              <1> ;      al =1    don't draw flags
  8990                              <1> ;      al =2    don't draw flags and number
  8991                              <1> ;      al =3    don't draw flags and type
  8992                              <1> ;
  8993                              <1> ;output:
  8994                              <1> ;      none
  8995                              <1> ;
  8996                              <1> ;notes:
  8997                              <1> ; the string layout is:
  8998                              <1> ; pSkXaAhHlD  128 01  (Type )  Partition Name.
  8999                              <1> ; where :
  9000                              <1> ; p  is password flag, means have password.
  9001                              <1> ; S  is schedule flag, means have boot schedule set.
  9002                              <1> ; k  is keystrokes flag, means have keystrokes set.
  9003                              <1> ; X  is swap driver id flag, means the driver id will be swap to the bootable
  9004                              <1> ;    id when boot this record.
  9005                              <1> ; aA is active flags, a means auto active, A means active
  9006                              <1> ; hH is hidden flags, h means auto hide, H means hidden
  9007                              <1> ; lD is other flags, L means it's Logical Partition, D means it's Disk Driver 
  9008                              <1> ; 128 is the drive id
  9009                              <1> ; 01 is the partition id
  9010                              <1> ; (Type ) is the type of this partition, 7 bytes
  9011                              <1> ; Partition Name is the name of this partition, 15 bytes
  9012                              <1> ;==============================================================================
  9013                              <1> get_record_string:
  9014 00002F90 60                  <1>         pusha
  9015 00002F91 FC                  <1>         cld
  9016                              <1> 
  9017 00002F92 668B4C0E            <1>         mov ecx, [si + struc_bootrecord.password]
  9018 00002F96 8B1C                <1>         mov bx, [si + struc_bootrecord.flags]
  9019                              <1> 
  9020 00002F98 88C4                <1> 	mov ah, al
  9021                              <1> 
  9022 00002F9A B020                <1> 	mov al, ' '
  9023 00002F9C AA                  <1> 	stosb
  9024                              <1> 
  9025 00002F9D 08E4                <1>         or ah, ah
  9026 00002F9F 752C                <1>         jnz .no_flags
  9027 00002FA1 50                  <1> 	push ax
  9028                              <1> 
  9029                              <1> ;show flags
  9030                              <1> 
  9031 00002FA2 B02D                <1>         mov al, '-'
  9032                              <1> 
  9033 00002FA4 50                  <1>         push ax
  9034 00002FA5 6609C9              <1>         or ecx, ecx                                 ; check if has password.
  9035 00002FA8 7402                <1>         jz .no_password
  9036 00002FAA B070                <1>         mov al, 'p'                                 ; has password, draw a 'p'.
  9037                              <1> .no_password:
  9038 00002FAC AA                  <1>         stosb
  9039 00002FAD 58                  <1>         pop ax
  9040                              <1> 
  9041 00002FAE 56                  <1>         push si
  9042 00002FAF BA0080              <1>         mov dx, INFOFLAG_SCHEDULED
  9043 00002FB2 B90900              <1>         mov cx, NUM_OF_INFOFLAGS
  9044 00002FB5 8D36[2034]          <1>         lea si, [infoflag_chars]
  9045                              <1> 
  9046                              <1> .loop_show_flags:
  9047 00002FB9 50                  <1>         push ax
  9048 00002FBA 85D3                <1>         test bx, dx
  9049 00002FBC 7402                <1>         jz .no_thisflag
  9050 00002FBE 8A04                <1>         mov al, [si]
  9051                              <1> .no_thisflag:
  9052 00002FC0 AA                  <1>         stosb
  9053 00002FC1 58                  <1>         pop ax
  9054 00002FC2 46                  <1>         inc si
  9055 00002FC3 D1EA                <1>         shr dx, 1
  9056 00002FC5 E2F2                <1>         loop .loop_show_flags
  9057 00002FC7 5E                  <1>         pop si
  9058                              <1> 
  9059 00002FC8 B020                <1>         mov al, ' '
  9060 00002FCA AA                  <1>         stosb
  9061 00002FCB AA                  <1>         stosb
  9062                              <1> 
  9063 00002FCC 58                  <1> 	pop ax
  9064                              <1> 
  9065                              <1> .no_flags:
  9066 00002FCD 80FC01              <1> 	cmp ah, 1
  9067 00002FD0 7728                <1> 	ja .no_number
  9068                              <1> 
  9069 00002FD2 50                  <1> 	push ax
  9070                              <1> 
  9071 00002FD3 8B5402              <1>         mov dx, [si + struc_bootrecord.drive_id]
  9072 00002FD6 F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  9073 00002FDA 740A                <1> 	jz .get_drvid
  9074                              <1> 
  9075 00002FDC 56                  <1> 	push si
  9076 00002FDD BE[8E34]            <1> 	mov si, knl_strings.invalid_id
  9077 00002FE0 E8B0F7              <1> 	call strcpy
  9078 00002FE3 5E                  <1> 	pop si
  9079                              <1> 
  9080 00002FE4 EB0F                <1> 	jmp short .draw_type
  9081                              <1> 
  9082                              <1> .get_drvid:
  9083 00002FE6 E8BB07              <1> 	call get_drvid_str
  9084                              <1> 
  9085 00002FE9 88F0                <1>         mov al, dh                                  ; fill partition id
  9086 00002FEB 30E4                <1> 	xor ah, ah
  9087 00002FED B103                <1>         mov cl, 3                                   ;
  9088 00002FEF E8FAF6              <1>         call itoa                                   ;
  9089                              <1> 
  9090 00002FF2 83C703              <1>         add di, 3
  9091                              <1> 
  9092                              <1> .draw_type:
  9093 00002FF5 B020                <1>         mov al, ' '
  9094 00002FF7 AA                  <1>         stosb
  9095 00002FF8 AA                  <1>         stosb
  9096                              <1> 
  9097 00002FF9 58                  <1> 	pop ax
  9098                              <1> 
  9099                              <1> .no_number:
  9100 00002FFA 80FC02              <1> 	cmp ah, 2
  9101 00002FFD 771A                <1> 	ja .no_type
  9102                              <1> 
  9103 00002FFF 56                  <1>         push si                                     ; save the boot record pointer
  9104                              <1> 
  9105 00003000 30C0                <1> 	xor al, al
  9106 00003002 F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  9107 00003006 7503                <1> 	jnz .is_special
  9108 00003008 8A4404              <1>         mov al, [si + struc_bootrecord.type]
  9109                              <1> .is_special:
  9110                              <1> 
  9111 0000300B E869FC              <1>         call get_parttype_str
  9112 0000300E B90800              <1>         mov  cx, 8
  9113 00003011 E865F7              <1>         call strncpy
  9114 00003014 5E                  <1>         pop si
  9115                              <1>         
  9116 00003015 B020                <1>         mov al, ' '
  9117 00003017 AA                  <1>         stosb
  9118 00003018 AA                  <1>         stosb
  9119                              <1> 
  9120                              <1> .no_type:
  9121 00003019 83C616              <1>         add si, struc_bootrecord.name
  9122 0000301C B90F00              <1>         mov cx, 15
  9123 0000301F 51                  <1> 	push cx
  9124 00003020 E856F7              <1>         call strncpy                                ; fill record name
  9125 00003023 89C8                <1> 	mov ax, cx
  9126 00003025 59                  <1> 	pop cx
  9127 00003026 29C1                <1> 	sub cx, ax
  9128 00003028 B020                <1> 	mov al, ' '
  9129 0000302A F3AA                <1> 	rep stosb
  9130 0000302C 30C0                <1> 	xor al, al
  9131 0000302E AA                  <1> 	stosb
  9132 0000302F 61                  <1>         popa
  9133 00003030 C3                  <1>         ret
  9134                              <1> 
  9135                              <1> ;==============================================================================
  9136                              <1> ;mark_record_active ---- mark the boot record active.
  9137                              <1> ;input:
  9138                              <1> ;      ds:si -> the record
  9139                              <1> ;output:
  9140                              <1> ;      cf = 0 success
  9141                              <1> ;      cf = 1 failed, ax = 0 cannot mark active, otherwise disk error occured.
  9142                              <1> ;==============================================================================
  9143                              <1> mark_record_active:
  9144 00003031 60                  <1>         pusha
  9145 00003032 E8C303              <1>         call check_allow_act
  9146 00003035 725D                <1>         jc .cannot_active
  9147                              <1>         
  9148 00003037 B80102              <1>         mov ax, (INT13H_READ << 8 ) | 0x01                  ; read father's
  9149 0000303A 668B5C06            <1>         mov ebx, [si + struc_bootrecord.father_abs_addr]    ; partition table.
  9150 0000303E 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]            ;
  9151                              <1>                                                             ;
  9152 00003041 8D3E[2120]          <1>         lea di, [knl_tmp.disk_buf1]                                  ;
  9153 00003045 E81307              <1>         call disk_access                                    ;
  9154 00003048 724F                <1>         jc .disk_error                                      ;
  9155                              <1> 
  9156 0000304A 52                  <1>         push dx
  9157 0000304B 6653                <1>         push ebx
  9158 0000304D 57                  <1>         push di
  9159                              <1>         
  9160 0000304E 81C7BE01            <1>         add di, PART_TBL_OFF
  9161                              <1> 
  9162 00003052 668B4C0A            <1>         mov ecx, [si + struc_bootrecord.abs_addr]    ; abs addr -> ecx
  9163                              <1> 
  9164 00003056 6629D9              <1>         sub ecx, ebx                                 ; relative addr -> ebx
  9165 00003059 6689CB              <1> 	mov ebx, ecx
  9166 0000305C B90400              <1>         mov cx, 4
  9167                              <1> 
  9168 0000305F F7040020            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_SWAPDRVID  ; check if need swap id
  9169 00003063 7403                <1>         jz .no_swapid
  9170                              <1> 
  9171 00003065 80E2F0              <1>         and dl, 0xF0                                 ; use 0x80 as active flag if swap id is on.
  9172                              <1> .no_swapid:
  9173                              <1> 
  9174 00003068 30E4                <1>         xor ah, ah
  9175                              <1> .search_in_father:                                   ;
  9176 0000306A 30C0                <1>         xor al, al                                   ;
  9177 0000306C 66395D08            <1>         cmp [di + struc_partition.relative_addr], ebx; find the record in
  9178 00003070 7504                <1>         jne .not_it                                  ; father's partition
  9179 00003072 88D0                <1>         mov al, dl                                   ; table
  9180 00003074 FEC4                <1>         inc ah                                       ;
  9181                              <1> .not_it:                                             ;
  9182 00003076 8805                <1>         mov byte [di  + struc_partition.state], al   ;
  9183 00003078 83C710              <1>         add di, SIZE_OF_PARTITION                    ;
  9184 0000307B E2ED                <1>         loop .search_in_father                       ;
  9185                              <1> 
  9186 0000307D 5F                  <1>         pop di                                       ;
  9187 0000307E 665B                <1>         pop ebx                                       ;
  9188 00003080 5A                  <1>         pop dx
  9189                              <1> 
  9190 00003081 08E4                <1>         or ah, ah
  9191 00003083 740F                <1>         jz .cannot_active                            ; can not found the partition record
  9192                              <1>         
  9193 00003085 B80103              <1>         mov ax , (INT13H_WRITE << 8 ) | 0x01         ; write the partition
  9194 00003088 E8D006              <1>         call disk_access                             ; table back.
  9195 0000308B 720C                <1>         jc .disk_error
  9196                              <1> 
  9197 0000308D 810C0008            <1>         or word [si + struc_bootrecord.flags], INFOFLAG_ACTIVE ; set active flag
  9198 00003091 61                  <1>         popa
  9199 00003092 F8                  <1>         clc
  9200 00003093 C3                  <1>         ret
  9201                              <1>         
  9202                              <1> .cannot_active:
  9203 00003094 61                  <1>         popa
  9204 00003095 31C0                <1>         xor ax, ax
  9205 00003097 F9                  <1>         stc
  9206 00003098 C3                  <1>         ret
  9207                              <1> .disk_error:
  9208 00003099 61                  <1>         popa
  9209 0000309A C3                  <1>         ret
  9210                              <1> 
  9211                              <1> 
  9212                              <1> 
  9213                              <1> ;==============================================================================
  9214                              <1> ;toggle_record_hidden ---- toggle a boot record's hidden attribute
  9215                              <1> ;input:
  9216                              <1> ;      ds:si -> the record
  9217                              <1> ;output:
  9218                              <1> ;      cf = 0 success
  9219                              <1> ;      cf = 1 failed, ax = 0 cannot hide, otherwise disk error occured.
  9220                              <1> ;==============================================================================
  9221                              <1> toggle_record_hidden:
  9222 0000309B 60                  <1>         pusha
  9223                              <1>         
  9224 0000309C E83603              <1>         call check_allow_hide
  9225 0000309F 725F                <1>         jc .cannot_hide
  9226                              <1>         
  9227 000030A1 B80102              <1>         mov ax, (INT13H_READ << 8 ) | 0x01                  ; read father's
  9228 000030A4 668B5C06            <1>         mov ebx, [si + struc_bootrecord.father_abs_addr]    ; partition table.
  9229 000030A8 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]            ;
  9230                              <1>                                                             ;
  9231 000030AB 8D3E[2120]          <1>         lea di, [knl_tmp.disk_buf1]                                  ;
  9232 000030AF E8A906              <1>         call disk_access                                    ;
  9233 000030B2 7251                <1>         jc .disk_error                                      ;
  9234                              <1> 
  9235 000030B4 6653                <1>         push ebx
  9236 000030B6 57                  <1>         push di
  9237                              <1>         
  9238 000030B7 81C7BE01            <1>         add di, PART_TBL_OFF
  9239                              <1> 
  9240 000030BB 668B4C0A            <1>         mov ecx, [si + struc_bootrecord.abs_addr]    ; abs addr -> ebx
  9241                              <1> 
  9242 000030BF 6629D9              <1>         sub ecx, ebx                                 ; relative addr -> ebx
  9243 000030C2 6689CB              <1> 	mov ebx, ecx
  9244                              <1> 
  9245 000030C5 B90400              <1>         mov cx, 4
  9246                              <1> 
  9247 000030C8 8B04                <1>         mov ax, [si + struc_bootrecord.flags]        ; get flags and type
  9248 000030CA 8A7404              <1>         mov dh, [si + struc_bootrecord.type]
  9249 000030CD 80E60F              <1>         and dh, 0x0F
  9250 000030D0 A90002              <1>         test ax, INFOFLAG_HIDDEN
  9251 000030D3 7503                <1>         jnz .unhide_it
  9252 000030D5 80CE10              <1>         or dh, 0x10                                  ; hide the partition
  9253                              <1> 
  9254                              <1> .unhide_it:
  9255 000030D8 30C0                <1>         xor al, al
  9256                              <1>         
  9257                              <1> .search_in_father:                                   ;
  9258 000030DA 66395D08            <1>         cmp [di + struc_partition.relative_addr], ebx; find the record in
  9259 000030DE 7505                <1>         jne .not_it                                  ; father's partition
  9260 000030E0 FEC0                <1>         inc al
  9261 000030E2 887504              <1>         mov byte [di  + struc_partition.type], dh    ; set partition type.
  9262                              <1> .not_it:                                             ;
  9263 000030E5 83C710              <1>         add di, SIZE_OF_PARTITION                    ;
  9264 000030E8 E2F0                <1>         loop .search_in_father                       ;
  9265                              <1> 
  9266 000030EA 5F                  <1>         pop di                                       ;
  9267 000030EB 665B                <1>         pop ebx                                      ;
  9268                              <1> 
  9269 000030ED 08C0                <1>         or al, al
  9270 000030EF 740F                <1>         jz .cannot_hide                              ; can not found the partition record
  9271                              <1>         
  9272 000030F1 B80103              <1>         mov ax , (INT13H_WRITE << 8 ) | 0x01         ; write the partition
  9273 000030F4 E86406              <1>         call disk_access                             ; table back.
  9274 000030F7 720C                <1>         jc .disk_error
  9275                              <1> 
  9276 000030F9 81340002            <1>         xor word [si + struc_bootrecord.flags], INFOFLAG_HIDDEN ; toggle hidden flag.
  9277 000030FD 61                  <1>         popa
  9278 000030FE F8                  <1>         clc
  9279 000030FF C3                  <1>         ret
  9280                              <1>         
  9281                              <1> .cannot_hide:
  9282 00003100 61                  <1>         popa
  9283 00003101 31C0                <1>         xor ax, ax
  9284 00003103 F9                  <1>         stc
  9285 00003104 C3                  <1>         ret
  9286                              <1> .disk_error:
  9287 00003105 61                  <1>         popa
  9288 00003106 C3                  <1>         ret
  9289                              <1> 
  9290                              <1> ;==============================================================================
  9291                              <1> ;set_record_schedule ---- set the record's schedule time
  9292                              <1> ;input:
  9293                              <1> ;      ds:si -> the record
  9294                              <1> ;      ax = begin time (in minutes)
  9295                              <1> ;      bx = end time (in minutes)
  9296                              <1> ;      dx = week info (bit 0 to bit 6 indicate Mon to Sun, zero means all days)
  9297                              <1> ;output:
  9298                              <1> ;      none
  9299                              <1> ;==============================================================================
  9300                              <1> set_record_schedule:
  9301 00003107 60                  <1>        pusha
  9302 00003108 09C0                <1>        or ax, ax
  9303 0000310A 750E                <1>        jnz .timeok
  9304 0000310C 09DB                <1>        or bx, bx
  9305 0000310E 750A                <1>        jnz .timeok
  9306 00003110 09D2                <1>        or dx, dx
  9307 00003112 7506                <1>        jnz .timeok
  9308                              <1> 
  9309 00003114 8124FF7F            <1>        and word [si + struc_bootrecord.flags], ~ INFOFLAG_SCHEDULED
  9310 00003118 61                  <1>        popa
  9311 00003119 C3                  <1>        ret
  9312                              <1> 
  9313                              <1> .timeok:
  9314 0000311A 6681E3FF0F0000      <1>        and ebx, 0x00000fff
  9315 00003121 6625FF0F0000        <1>        and eax, 0x00000fff
  9316 00003127 66C1E30C            <1>        shl ebx, 12
  9317 0000312B 6609D8              <1>        or  eax, ebx
  9318 0000312E 6681E2FF000000      <1>        and edx, 0x000000ff
  9319 00003135 66C1E218            <1>        shl edx, 24
  9320 00003139 6609D0              <1>        or  eax, edx
  9321                              <1> 
  9322 0000313C 66894412            <1>        mov [si + struc_bootrecord.schedule_time], eax
  9323 00003140 810C0080            <1>        or word [si + struc_bootrecord.flags], INFOFLAG_SCHEDULED
  9324                              <1> 
  9325 00003144 61                  <1>        popa
  9326 00003145 C3                  <1>        ret
  9327                              <1> 
  9328                              <1> ;==============================================================================
  9329                              <1> ;get_record_schedule ---- set the record's schedule time
  9330                              <1> ;input:
  9331                              <1> ;      ds:si -> the record
  9332                              <1> ;output:
  9333                              <1> ;      ax = begin time (in minutes)
  9334                              <1> ;      bx = end time (in minutes)
  9335                              <1> ;      dx = week info (bit 0 to bit 6 indicate Mon to Sun, zero means all days)
  9336                              <1> ;==============================================================================
  9337                              <1> get_record_schedule:
  9338 00003146 31C0                <1>        xor ax, ax
  9339 00003148 31DB                <1>        xor bx, bx
  9340 0000314A 31D2                <1>        xor dx, dx
  9341                              <1> 
  9342 0000314C F7040080            <1>        test word [si + struc_bootrecord.flags], INFOFLAG_SCHEDULED
  9343 00003150 741D                <1>        jz .end
  9344                              <1> 
  9345 00003152 668B4412            <1>        mov eax, [si + struc_bootrecord.schedule_time]
  9346 00003156 6689C3              <1>        mov ebx, eax
  9347 00003159 6689C2              <1>        mov edx, eax
  9348                              <1> 
  9349 0000315C 25FF0F              <1>        and ax, 0x0fff
  9350 0000315F 66C1EB0C            <1>        shr ebx, 12
  9351 00003163 81E3FF0F            <1>        and bx, 0x0fff
  9352 00003167 66C1EA18            <1>        shr edx, 24
  9353 0000316B 81E2FF00            <1>        and dx, 0x00ff
  9354                              <1> 
  9355                              <1> .end:
  9356 0000316F C3                  <1>        ret
  9357                              <1> 
  9358                              <1> ;=============================================================================
  9359                              <1> ;schedule_to_str ---- convert schedule time to string
  9360                              <1> ;input:
  9361                              <1> ;       ax = start time
  9362                              <1> ;       bx = stop time
  9363                              <1> ;       dx = days info
  9364                              <1> ;       es:di -> buffer
  9365                              <1> ;output:
  9366                              <1> ;       none
  9367                              <1> ;=============================================================================
  9368                              <1> schedule_to_str:
  9369 00003170 60                  <1>         pusha
  9370 00003171 FC                  <1>         cld
  9371 00003172 E83700              <1>         call sch_time_to_str
  9372 00003175 89FE                <1>         mov si, di
  9373 00003177 E8C0F5              <1>         call strlen
  9374 0000317A 01CF                <1>         add di, cx
  9375 0000317C B02D                <1>         mov al, '-'
  9376 0000317E AA                  <1>         stosb
  9377 0000317F 89D8                <1>         mov ax, bx
  9378 00003181 E82800              <1>         call sch_time_to_str
  9379 00003184 89FE                <1>         mov si, di
  9380 00003186 E8B1F5              <1>         call strlen
  9381 00003189 01CF                <1>         add di, cx
  9382 0000318B B03B                <1>         mov al, ';'
  9383 0000318D AA                  <1>         stosb
  9384 0000318E E80200              <1>         call sch_days_to_str
  9385 00003191 61                  <1>         popa
  9386 00003192 C3                  <1>         ret
  9387                              <1> 
  9388                              <1> ;=============================================================================
  9389                              <1> ;sch_days_to_str ---- convert days info string 0123456
  9390                              <1> ;input:
  9391                              <1> ;       dx = day bits
  9392                              <1> ;       es:di -> buffer
  9393                              <1> ;output:
  9394                              <1> ;       none
  9395                              <1> ;=============================================================================
  9396                              <1> sch_days_to_str:
  9397 00003193 60                  <1>         pusha
  9398 00003194 B90700              <1>         mov cx, 7
  9399 00003197 B030                <1>         mov al, '0'
  9400 00003199 BB0100              <1>         mov bx, 1
  9401                              <1> 
  9402                              <1> .loop_chk:
  9403 0000319C 85DA                <1>         test dx, bx
  9404 0000319E 7401                <1>         jz .nothisday
  9405 000031A0 AA                  <1>         stosb
  9406                              <1> .nothisday:
  9407 000031A1 D1E3                <1>         shl bx, 1
  9408 000031A3 FEC0                <1>         inc al
  9409 000031A5 E2F5                <1>         loop .loop_chk
  9410                              <1> 
  9411 000031A7 30C0                <1>         xor al, al
  9412 000031A9 AA                  <1>         stosb
  9413                              <1> 
  9414 000031AA 61                  <1>         popa
  9415 000031AB C3                  <1>         ret
  9416                              <1> 
  9417                              <1> ;=============================================================================
  9418                              <1> ;sch_time_to_str ---- convert time in minute info string hh:mm
  9419                              <1> ;input:
  9420                              <1> ;       ax = time
  9421                              <1> ;       es:di -> buffer
  9422                              <1> ;output:
  9423                              <1> ;       none
  9424                              <1> ;=============================================================================
  9425                              <1> sch_time_to_str:
  9426 000031AC 60                  <1>         pusha
  9427                              <1> 
  9428 000031AD B23C                <1>         mov dl, 60
  9429 000031AF F6F2                <1>         div dl
  9430 000031B1 50                  <1>         push ax
  9431                              <1> 
  9432 000031B2 30E4                <1>         xor ah, ah
  9433 000031B4 3C0A                <1>         cmp al, 10
  9434 000031B6 7205                <1>         jb .hlten
  9435 000031B8 B90200              <1>         mov cx, 2
  9436 000031BB EB03                <1>         jmp short .showh
  9437                              <1> .hlten:
  9438 000031BD B90100              <1>         mov cx,1
  9439                              <1> .showh:
  9440 000031C0 E829F5              <1>         call itoa
  9441                              <1> 
  9442 000031C3 B03A                <1>         mov al,':'
  9443 000031C5 01CF                <1>         add di, cx
  9444 000031C7 AA                  <1>         stosb
  9445                              <1> 
  9446 000031C8 58                  <1>         pop ax
  9447 000031C9 0FB6C4              <1>         movzx ax, ah
  9448 000031CC 3C0A                <1>         cmp al, 10
  9449 000031CE 7205                <1>         jb .mlten
  9450 000031D0 B90200              <1>         mov cx, 2
  9451 000031D3 EB03                <1>         jmp short .showm
  9452                              <1> .mlten:
  9453 000031D5 B90100              <1>         mov cx,1
  9454                              <1> .showm:
  9455 000031D8 E811F5              <1>         call itoa
  9456                              <1> 
  9457 000031DB 61                  <1>         popa
  9458 000031DC C3                  <1>         ret
  9459                              <1> 
  9460                              <1> ;==============================================================================
  9461                              <1> ;boot_normal_record ---- boot a normal record
  9462                              <1> ;input:
  9463                              <1> ;      ds:si -> the record
  9464                              <1> ;output:
  9465                              <1> ;      will not return when successfully boot.
  9466                              <1> ;      if return then al != 0 disk error; al = 0 no operation system.
  9467                              <1> ;==============================================================================
  9468                              <1> boot_normal_record:
  9469 000031DD 06                  <1>         push es
  9470                              <1> 
  9471 000031DE 8B1C                <1>         mov bx, [si + struc_bootrecord.flags]
  9472 000031E0 F7C30010            <1>         test bx, INFOFLAG_AUTOACTIVE
  9473 000031E4 7403                <1>         jz .no_need_act
  9474 000031E6 E848FE              <1>         call mark_record_active             ; active the partition
  9475                              <1> 
  9476                              <1> .no_need_act:
  9477 000031E9 F7C30002            <1>         test bx, INFOFLAG_HIDDEN
  9478 000031ED 7403                <1>         jz .not_hidden
  9479 000031EF E8A9FE              <1>         call toggle_record_hidden           ; unhide the partition
  9480                              <1> 
  9481                              <1> .not_hidden:
  9482                              <1> 
  9483 000031F2 53                  <1>         push bx                             ; save the flags
  9484 000031F3 8D3E[2120]          <1>         lea di, [knl_tmp.disk_buf1]         ; load boot sector into knl_tmp.disk_buf1.
  9485 000031F7 B80102              <1>         mov ax, (INT13H_READ << 8 ) | 0x01
  9486 000031FA 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]
  9487 000031FD 668B5C0A            <1>         mov ebx, [si + struc_bootrecord.abs_addr]
  9488                              <1> 
  9489 00003201 E85705              <1>         call disk_access                    ; read the first sector of the
  9490                              <1>                                             ; partition / floppy into
  9491                              <1>                                             ; memory.
  9492 00003204 5B                  <1>         pop bx
  9493 00003205 0F829200            <1>         jmpc .disk_error
  9494                              <1> 
  9495 00003209 81BDFE0155AA        <1>         cmp word [di + BR_FLAG_OFF], BR_GOOD_FLAG
  9496 0000320F 0F858600            <1>         jmpne .no_system
  9497                              <1> 
  9498 00003213 F7C38000            <1>         test bx, INFOFLAG_ISDRIVER          ; if it's driver, skip loading the
  9499                              <1>                                             ; partition table.
  9500 00003217 7517                <1>         jnz .do_boot
  9501                              <1> 
  9502 00003219 53                  <1>         push bx                             ; save the flags 
  9503 0000321A 8D3E[2128]          <1>         lea di, [knl_tmp.disk_buf2]    ; load part table into knl_tmp.disk_buf2
  9504                              <1> 
  9505 0000321E 668B5C06            <1>         mov ebx, [si + struc_bootrecord.father_abs_addr]
  9506                              <1> 
  9507 00003222 E83605              <1>         call disk_access                    ; load part table into memory.
  9508 00003225 5B                  <1>         pop bx
  9509 00003226 7273                <1>         jc .disk_error
  9510                              <1> 
  9511 00003228 81BDFE0155AA        <1>         cmp word [di + BR_FLAG_OFF], BR_GOOD_FLAG
  9512 0000322E 7569                <1>         jne .no_system                      ; bad partition table, treated as
  9513                              <1>                                             ; no operating system.
  9514                              <1> 
  9515                              <1> .do_boot:
  9516                              <1> %ifndef EMULATE_PROG
  9517                              <1> 
  9518 00003230 F7C30020            <1>         test bx, INFOFLAG_SWAPDRVID         ; check if need swap id
  9519 00003234 7413                <1>         jz .no_swapid
  9520                              <1> 
  9521                              <1> ;================ swap the driver id ========================================
  9522 00003236 88D6                <1>         mov dh, dl
  9523 00003238 80E680              <1>         and dh, 0x80                        ; set driver id to the bootable id
  9524                              <1> 
  9525 0000323B 89D3                <1> 	mov bx, dx
  9526 0000323D 86F2                <1> 	xchg dh, dl
  9527 0000323F 89D1                <1> 	mov cx, dx
  9528                              <1> 
  9529 00003241 E8CF05              <1> 	call set_drive_map
  9530                              <1> 
  9531 00003244 885402              <1>         mov [si + struc_bootrecord.drive_id], dl  ; write new driver id back
  9532 00003247 EB03                <1> 	jmp short .swap_ok
  9533                              <1> 
  9534                              <1> .no_swapid:
  9535 00003249 E8AB05              <1> 	call uninstall_myint13h
  9536                              <1> 
  9537                              <1> .swap_ok:
  9538 0000324C E80901              <1>         call prepare_boot                   ; prepare to boot.
  9539 0000324F 7248                <1>         jc .no_system                       ; preparation failed.
  9540                              <1>         
  9541                              <1> %endif
  9542 00003251 E8E000              <1>         call preload_keystrokes     ; preload the keystrokes into key buffer.
  9543 00003254 E89CE9              <1>         call reset_video_mode
  9544                              <1> 
  9545                              <1> %ifndef EMULATE_PROG
  9546                              <1> 
  9547 00003257 56                  <1>         push si
  9548 00003258 FC                  <1>         cld
  9549                              <1> 
  9550 00003259 31C0                <1>         xor ax, ax
  9551 0000325B 50                  <1>         push ax
  9552 0000325C 07                  <1>         pop es
  9553 0000325D B90002              <1>         mov cx, SECTOR_SIZE
  9554                              <1> 
  9555 00003260 F7048000            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_ISDRIVER
  9556                              <1>                                             ; if it's driver, no partition
  9557 00003264 750B                <1>         jnz .boot_driver                    ; table to load.
  9558                              <1>         
  9559 00003266 8D36[2128]          <1>         lea si, [knl_tmp.disk_buf2]
  9560 0000326A BF0006              <1>         mov di, PART_OFF
  9561                              <1> 
  9562 0000326D 51                  <1>         push cx
  9563 0000326E F3A4                <1>         rep movsb                           ; move mbr (partition table) to
  9564                              <1>                                             ; 0000:0600
  9565 00003270 59                  <1>         pop cx
  9566                              <1>         
  9567                              <1> .boot_driver:
  9568 00003271 8D36[2120]          <1>         lea si, [knl_tmp.disk_buf1]
  9569 00003275 BF007C              <1>         mov di, 7C00h
  9570 00003278 F3A4                <1>         rep movsb                           ; move boot sector to 0000:7C00
  9571                              <1> 
  9572 0000327A 5E                  <1>         pop si
  9573                              <1> 
  9574 0000327B 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id] ; drive id -> dl
  9575 0000327E 30F6                <1>         xor dh, dh
  9576                              <1> 
  9577                              <1> ; boot code from lilo :-)
  9578                              <1> 
  9579 00003280 89DE                <1>         mov si, bx                          ; ds:si , es:di point to the
  9580 00003282 81C6BE07            <1>         add si, PART_OFF + PART_TBL_OFF     ; partition record.
  9581 00003286 56                  <1>         push si                             ;
  9582 00003287 5F                  <1>         pop di                              ;
  9583                              <1> 
  9584 00003288 50                  <1>         push ax                             ; ds = 0 ( es already set to 0 ).
  9585 00003289 1F                  <1>         pop ds                              ;
  9586                              <1>         
  9587                              <1> %if 0
  9588                              <1>         xor bp, bp                          ; might help some boot problems
  9589                              <1>         mov ax, BR_GOOD_FLAG                ; boot signature (just in case ...)
  9590                              <1>         jmp 0:7C00h                         ; start boot sector
  9591                              <1> %else
  9592                              <1> ;boot code from the OS2 Boot Manager
  9593 0000328A BB007C              <1>         mov bx, 7C00h
  9594                              <1>     
  9595 0000328D 8ED0                <1>         mov ss,ax                           ; on all processors since the 186
  9596 0000328F 89DC                <1>         mov sp,bx                           ; these instructions are locked
  9597                              <1>     
  9598 00003291 89F5                <1>         mov bp, si
  9599 00003293 50                  <1>         push    ax
  9600 00003294 53                  <1>         push    bx
  9601 00003295 B855AA              <1>         mov ax, BR_GOOD_FLAG
  9602 00003298 CB                  <1>         retf                                ; start boot sector
  9603                              <1> %endif
  9604                              <1>         
  9605                              <1> %else
  9606                              <1> 	call uninstall_myint13h
  9607                              <1>         mov ax, 0x4c00                      ; return to dos.
  9608                              <1>         int 0x21                            ;
  9609                              <1> %endif
  9610                              <1> 
  9611                              <1> .no_system:
  9612 00003299 30C0                <1>         xor al, al
  9613                              <1> .disk_error:
  9614 0000329B 07                  <1>         pop es
  9615 0000329C C3                  <1>         ret
  9616                              <1> 
  9617                              <1> %ifndef DISABLE_CDBOOT
  9618                              <1> ;==============================================================================
  9619                              <1> ; boot_cdrom ---- boot cdrom driver
  9620                              <1> ; input: ds:di -> boot catalog
  9621                              <1> ;        dl = cdrom drvid
  9622                              <1> ;==============================================================================
  9623                              <1> boot_cdrom:
  9624 0000329D 8A4501              <1> 	mov al, [di+1]
  9625 000032A0 240F                <1> 	and al, 0x0f
  9626                              <1> 
  9627 000032A2 BE[0E20]            <1> 	mov si, knl_tmp.cdemu_spec
  9628 000032A5 C60413              <1> 	mov byte [si], SIZE_OF_CDEMU_SPEC
  9629 000032A8 884401              <1> 	mov [si + struc_cdemu_spec.media_type], al
  9630                              <1> 
  9631 000032AB 30E4                <1> 	xor ah, ah
  9632 000032AD 08C0                <1> 	or al, al
  9633 000032AF 7502                <1> 	jnz .floppy_emu
  9634 000032B1 88D4                <1> 	mov ah, dl
  9635                              <1> .floppy_emu: 
  9636                              <1> 
  9637 000032B3 886402              <1> 	mov byte [si + struc_cdemu_spec.emu_drvid], ah
  9638 000032B6 668B5D08            <1> 	mov ebx, [di+0x08]
  9639 000032BA 66895C04            <1> 	mov [si + struc_cdemu_spec.image_lba], ebx
  9640 000032BE 8B5D02              <1> 	mov bx, [di+0x02]
  9641 000032C1 895C0C              <1> 	mov [si + struc_cdemu_spec.load_seg], bx
  9642 000032C4 8B5D06              <1> 	mov bx, [di+0x06]
  9643 000032C7 895C0E              <1> 	mov [si + struc_cdemu_spec.sect_count], bx
  9644 000032CA C6441050            <1> 	mov byte [si + struc_cdemu_spec.cylinders], 0x50
  9645 000032CE C6441202            <1> 	mov byte [si + struc_cdemu_spec.heads], 2
  9646                              <1> 
  9647 000032D2 88C3                <1> 	mov bl, al
  9648 000032D4 30FF                <1> 	xor bh, bh
  9649 000032D6 8AA7[F832]          <1> 	mov ah, [.sect_nums + bx]
  9650                              <1> 
  9651 000032DA 886411              <1> 	mov byte [si + struc_cdemu_spec.sectors], ah
  9652 000032DD 31C0                <1> 	xor ax, ax
  9653 000032DF 89440A              <1> 	mov [si + struc_cdemu_spec.user_bufseg], ax
  9654                              <1> 
  9655                              <1> ;Boot it!
  9656 000032E2 B8004A              <1> 	mov ax, 0x4a00
  9657 000032E5 CD13                <1> 	int 0x13
  9658 000032E7 8826[0520]          <1> 	mov [hdio_tmp.disk_errno],ah
  9659 000032EB 720A                <1> 	jc .end
  9660                              <1> 
  9661                              <1> ;If the cd-rom is accessed via BIOS, then uninstall my int13h.
  9662 000032ED E80705              <1> 	call uninstall_myint13h
  9663                              <1> 
  9664 000032F0 B8004C              <1> 	mov ax, 0x4c00
  9665 000032F3 CD13                <1> 	int 0x13
  9666 000032F5 31C0                <1> 	xor ax, ax
  9667                              <1> .end:
  9668 000032F7 C3                  <1> 	ret
  9669                              <1> 
  9670 000032F8 000F1224            <1> .sect_nums  db  0, 0x0f, 0x12, 0x24
  9671                              <1> 
  9672                              <1> 
  9673                              <1> ;==============================================================================
  9674                              <1> ;find_cdboot_catalog ---- find boot catalog entry from buffer
  9675                              <1> ;input: ds:si -> buffer  es:di -> entries buffer
  9676                              <1> ;return: cx = number of entries
  9677                              <1> ;==============================================================================
  9678                              <1> find_cdboot_catalog:
  9679 000032FC 56                  <1> 	push si
  9680 000032FD 57                  <1> 	push di
  9681 000032FE 50                  <1> 	push ax
  9682 000032FF FC                  <1> 	cld
  9683                              <1> 
  9684 00003300 31C9                <1> 	xor cx, cx
  9685                              <1> 
  9686 00003302 833C01              <1> 	cmp word [si], 0x0001
  9687 00003305 7529                <1> 	jne .end
  9688 00003307 817C1E55AA          <1> 	cmp word [si+0x1e], 0xaa55
  9689 0000330C 7522                <1> 	jne .end
  9690                              <1> 
  9691                              <1> .loop_find:
  9692 0000330E 8A04                <1> 	mov al, [si + struc_boot_catalog.indicator]
  9693 00003310 08C0                <1> 	or al, al
  9694 00003312 741C                <1> 	jz .end
  9695                              <1> 
  9696 00003314 3C88                <1> 	cmp al, 0x88
  9697 00003316 7513                <1> 	jne .loop_next
  9698                              <1> 
  9699 00003318 8A4401              <1> 	mov al, [si + struc_boot_catalog.media_type]
  9700 0000331B 240F                <1> 	and al, 0x0f
  9701 0000331D 3C04                <1> 	cmp al , 4
  9702 0000331F 730A                <1> 	jae .loop_next
  9703                              <1> 
  9704 00003321 51                  <1> 	push cx
  9705 00003322 56                  <1> 	push si
  9706 00003323 B92000              <1> 	mov cx, SIZE_OF_BOOT_CATALOG
  9707 00003326 F3A4                <1> 	rep movsb
  9708 00003328 5E                  <1> 	pop si
  9709 00003329 59                  <1> 	pop cx
  9710 0000332A 41                  <1> 	inc cx
  9711                              <1> 
  9712                              <1> .loop_next:
  9713 0000332B 83C620              <1> 	add si, SIZE_OF_BOOT_CATALOG
  9714 0000332E EBDE                <1> 	jmp short .loop_find
  9715                              <1> 
  9716                              <1> .end:
  9717 00003330 58                  <1> 	pop ax
  9718 00003331 5F                  <1> 	pop di
  9719 00003332 5E                  <1> 	pop si
  9720 00003333 C3                  <1> 	ret
  9721                              <1> 
  9722                              <1> %endif
  9723                              <1> 
  9724                              <1> ;==============================================================================
  9725                              <1> ;preload_keystrokes ---- preload the keystrokes into key buffer.
  9726                              <1> ;input:
  9727                              <1> ;      ds:si -> boot record
  9728                              <1> ;output:
  9729                              <1> ;      none
  9730                              <1> ;==============================================================================
  9731                              <1> preload_keystrokes:
  9732 00003334 60                  <1>         pusha
  9733 00003335 FC                  <1>         cld
  9734 00003336 F7040040            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_HAVEKEYS
  9735 0000333A 741A                <1>         jz .end
  9736                              <1> 
  9737 0000333C B90D00              <1>         mov cx, MAX_KEYSTROKES
  9738 0000333F 83C626              <1>         add si, struc_bootrecord.keystrokes
  9739                              <1> 
  9740                              <1> .loop_load:
  9741 00003342 AD                  <1>         lodsw
  9742 00003343 09C0                <1>         or ax, ax
  9743 00003345 740F                <1>         jz .end
  9744                              <1> 
  9745 00003347 51                  <1>         push cx
  9746 00003348 89C1                <1>         mov cx, ax
  9747 0000334A B405                <1>         mov ah, 0x05
  9748 0000334C E81FF6              <1>         call bioskey
  9749 0000334F 59                  <1>         pop cx
  9750 00003350 08C0                <1>         or al, al
  9751 00003352 7502                <1>         jnz .end
  9752 00003354 E2EC                <1>         loop .loop_load
  9753                              <1> .end:
  9754 00003356 61                  <1>         popa
  9755 00003357 C3                  <1>         ret
  9756                              <1> 
  9757                              <1> ;==============================================================================
  9758                              <1> ;prepare_boot ---- do some preparation before booting.
  9759                              <1> ;input:
  9760                              <1> ;      ds:si -> boot record
  9761                              <1> ;      knl_tmp.disk_buf1  -> boot sector
  9762                              <1> ;      knl_tmp.disk_buf2 -> father's first sector ( partition table ).
  9763                              <1> ;output:
  9764                              <1> ;      cf = 0 success
  9765                              <1> ;          bx = the partition record's offset in partition table.
  9766                              <1> ;      cf = 1 failed
  9767                              <1> ;==============================================================================
  9768                              <1> prepare_boot:
  9769 00003358 31C0                <1>         xor ax, ax
  9770 0000335A F7048000            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_ISDRIVER
  9771 0000335E 0F856F00            <1>         jmpnz .end
  9772                              <1> 
  9773 00003362 668B5C0A            <1>         mov ebx, [si + struc_bootrecord.abs_addr]         ;
  9774                              <1> 
  9775 00003366 668B4C06            <1>         mov ecx, [si + struc_bootrecord.father_abs_addr]  ;
  9776                              <1> 
  9777 0000336A 6689D8              <1>         mov eax, ebx
  9778 0000336D 6629C8              <1>         sub eax, ecx                                      ; relative addr -> eax
  9779                              <1> 
  9780 00003370 8D3E[DF29]          <1>         lea di, [knl_tmp.disk_buf2 + PART_TBL_OFF]
  9781 00003374 30C9                <1>         xor cl, cl
  9782                              <1>         
  9783                              <1> .search_in_father:
  9784 00003376 66394508            <1>         cmp [di + struc_partition.relative_addr], eax
  9785 0000337A 740C                <1>         je .found
  9786 0000337C FEC1                <1>         inc cl
  9787 0000337E 83C710              <1>         add di, SIZE_OF_PARTITION
  9788 00003381 80F904              <1>         cmp cl, 4
  9789 00003384 72F0                <1>         jb .search_in_father
  9790 00003386 EB49                <1>         jmp short .failed
  9791                              <1> 
  9792                              <1> .found:
  9793 00003388 B010                <1>         mov al, SIZE_OF_PARTITION                   ; ax = offset in partition
  9794 0000338A F6E1                <1>         mul cl                                      ; table.
  9795                              <1> 
  9796 0000338C 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]
  9797 0000338F 8815                <1>         mov [di + struc_partition.state], dl        ; store drive id into
  9798                              <1>                                                     ; partition record
  9799                              <1> 
  9800 00003391 8D3E[2120]          <1>         lea di, [knl_tmp.disk_buf1]                          ; di -> boot record
  9801 00003395 8A7404              <1>         mov dh, [si + struc_bootrecord.type]
  9802                              <1> 
  9803 00003398 80FE04              <1>         cmp dh, 0x04
  9804 0000339B 7416                <1>         je .fat16
  9805 0000339D 80FE06              <1>         cmp dh, 0x06
  9806 000033A0 7411                <1>         je .fat16
  9807 000033A2 80FE0E              <1>         cmp dh, 0x0e
  9808 000033A5 740C                <1>         je .fat16
  9809 000033A7 80FE0B              <1>         cmp dh, 0x0b
  9810 000033AA 7416                <1>         je .fat32
  9811 000033AC 80FE0C              <1>         cmp dh, 0x0c
  9812 000033AF 7411                <1>         je .fat32
  9813 000033B1 EB1E                <1>         jmp short .end
  9814                              <1> .fat16:
  9815 000033B3 807D2629            <1>         cmp byte [di + FAT16_EXTBRID_OFF], EXTBRID
  9816 000033B7 7518                <1>         jne .end
  9817                              <1>         
  9818 000033B9 885524              <1>         mov [di + FAT16_DRVID_OFF], dl              ; update the drive id.
  9819 000033BC 66895D1C            <1>         mov [di + FAT16_HIDSEC_OFF], ebx            ; update hidden sector
  9820                              <1>                                                     ; = abs_addr.
  9821 000033C0 EB0F                <1>         jmp short .end
  9822                              <1> .fat32:
  9823 000033C2 807D4229            <1>         cmp byte [di + FAT32_EXTBRID_OFF], EXTBRID
  9824 000033C6 7509                <1>         jne .end
  9825                              <1>         
  9826 000033C8 885540              <1>         mov [di + FAT32_DRVID_OFF], dl              ; update the drive id.
  9827 000033CB 66895D1C            <1>         mov [di + FAT32_HIDSEC_OFF], ebx            ; update hidden sector
  9828                              <1>                                                     ; = abs_addr.
  9829 000033CF EB00                <1>         jmp short .end
  9830                              <1>         
  9831                              <1> .failed:
  9832                              <1> ;        stc
  9833                              <1> ;        ret
  9834                              <1> .end:
  9835 000033D1 89C3                <1>         mov bx, ax          ; partition record's offset store to bx.
  9836 000033D3 F8                  <1>         clc
  9837 000033D4 C3                  <1>         ret
  9838                              <1> 
  9839                              <1> ;==============================================================================
  9840                              <1> ;check_allow_hide ---- check if the partition can be hidden.
  9841                              <1> ;input:
  9842                              <1> ;      ds:si -> the boot record
  9843                              <1> ;output:
  9844                              <1> ;      cf = 0 can be hidden
  9845                              <1> ;      cf = 1 cannot be hidden
  9846                              <1> ;==============================================================================
  9847                              <1> check_allow_hide:
  9848 000033D5 60                  <1>         pusha
  9849 000033D6 09F6                <1> 	or si, si
  9850 000033D8 741B                <1> 	jz .cannot_hide
  9851                              <1> 
  9852 000033DA 8B04                <1>         mov ax, [si + struc_bootrecord.flags]
  9853 000033DC A90100              <1>         test ax, DRVFLAG_DRIVEOK
  9854 000033DF 7414                <1>         jz .cannot_hide
  9855 000033E1 A99800              <1>         test ax, INFOFLAG_ISDRIVER | DRVFLAG_ISCDROM | INFOFLAG_ISSPECIAL
  9856 000033E4 750F                <1>         jnz .cannot_hide
  9857                              <1> 
  9858 000033E6 8A4404              <1>         mov al, [si + struc_bootrecord.type]
  9859 000033E9 B90700              <1>         mov cx, NUM_OF_ALLOW_HIDE
  9860 000033EC 8D3E[8C35]          <1>         lea di, [part_type.allow_hide_tbl]
  9861 000033F0 E871F3              <1>         call strchr
  9862 000033F3 61                  <1>         popa
  9863 000033F4 C3                  <1>         ret
  9864                              <1>         
  9865                              <1> .cannot_hide:
  9866 000033F5 61                  <1>         popa
  9867 000033F6 F9                  <1>         stc
  9868 000033F7 C3                  <1>         ret
  9869                              <1> 
  9870                              <1> ;==============================================================================
  9871                              <1> ;check_allow_act ---- check if the partition can be actived.
  9872                              <1> ;input:
  9873                              <1> ;      ds:si -> the boot record
  9874                              <1> ;output:
  9875                              <1> ;      cf = 0 can be actived
  9876                              <1> ;      cf = 1 cannot be actived
  9877                              <1> ;==============================================================================
  9878                              <1> check_allow_act:
  9879 000033F8 60                  <1>         pusha
  9880 000033F9 09F6                <1> 	or si, si
  9881 000033FB 740F                <1> 	jz .cannot_act
  9882                              <1> 
  9883 000033FD 8B04                <1>         mov ax, [si + struc_bootrecord.flags]   ; get flags
  9884 000033FF A90100              <1>         test ax, DRVFLAG_DRIVEOK
  9885 00003402 7408                <1>         jz .cannot_act
  9886 00003404 A99801              <1>         test ax, INFOFLAG_ISDRIVER | INFOFLAG_LOGICAL | DRVFLAG_ISCDROM | INFOFLAG_ISSPECIAL
  9887 00003407 7503                <1>         jnz .cannot_act
  9888 00003409 61                  <1>         popa
  9889 0000340A F8                  <1>         clc
  9890 0000340B C3                  <1>         ret
  9891                              <1>         
  9892                              <1> .cannot_act:
  9893 0000340C 61                  <1>         popa
  9894 0000340D F9                  <1>         stc
  9895 0000340E C3                  <1>         ret
  9896                              <1> 
  9897                              <1> ;==============================================================================
  9898                              <1> ;check_prev_mbr ---- check if the previous mbr is avaiable.
  9899                              <1> ;input:
  9900                              <1> ;      none
  9901                              <1> ;output:
  9902                              <1> ;      cf = 0 present
  9903                              <1> ;      cf = 1 absent
  9904                              <1> ;==============================================================================
  9905                              <1> check_prev_mbr:
  9906 0000340F 60                  <1> 	pusha
  9907 00003410 8A16[2100]          <1> 	mov dl, [ADDR_SBMK_DRVID]
  9908 00003414 E88602              <1> 	call get_drive_flags
  9909 00003417 7205                <1> 	jc .end
  9910 00003419 A804                <1> 	test al, DRVFLAG_REMOVABLE
  9911 0000341B 7401                <1> 	jz .end
  9912 0000341D F9                  <1> 	stc
  9913                              <1> .end:
  9914 0000341E 61                  <1> 	popa
  9915 0000341F C3                  <1> 	ret
  9916                              <1> 
  9917                              <1> ;==============================================================================
  9918                              <1> ;data area
  9919                              <1> ;==============================================================================
  9920                              <1> 
  9921                              <1> ; strings used in knl.asm
  9922 00003420 536B58614168486C44- <1> infoflag_chars  db "SkXaAhHlD",0
  9923 00003429 00                  <1>
  9924                              <1> 
  9925                              <1> knl_strings:
  9926 0000342A 466C6F70707900      <1> .floppy     db "Floppy",0
  9927 00003431 5072696D61727900    <1> .primary    db "Primary",0
  9928 00003439 4C6F676963616C00    <1> .logical    db "Logical",0
  9929 00003441 52656D6F7661626C65- <1> .removable  db "Removable",0
  9930 0000344A 00                  <1>
  9931 0000344B 486172646469736B00  <1> .harddisk   db "Harddisk",0
  9932 00003454 43442D524F4D00      <1> .cdrom      db "CD-ROM",0
  9933 0000345B 5370656369616C00    <1> .special    db "Special",0
  9934 00003463 506F776572204F6666- <1> .poweroff   db "Power Off",0
  9935 0000346C 00                  <1>
  9936 0000346D 5265626F6F7400      <1> .restart    db "Reboot",0
  9937 00003474 5175697420746F2042- <1> .quit       db "Quit to BIOS",0
  9938 0000347D 494F5300            <1>
  9939 00003481 50726576696F757320- <1> .bootprev   db "Previous MBR",0
  9940 0000348A 4D425200            <1>
  9941 0000348E 2D2D2D202D2D00      <1> .invalid_id db "--- --",0
  9942                              <1> 
  9943                              <1> ; partition types and strings
  9944                              <1> part_type:
  9945                              <1> 
  9946                              <1> ; table of partition type ids
  9947                              <1> .id_tbl:
  9948 00003495 00060708090A0B0C    <1>         db 0x00, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 
  9949 0000349D 0E3C4D4E4F636581    <1> 	db 0x0E, 0x3C, 0x4D, 0x4E, 0x4F, 0x63, 0x65, 0x81, 
  9950 000034A5 82838E93A5A6A9B7    <1> 	db 0x82, 0x83, 0x8E, 0x93, 0xA5, 0xA6, 0xA9, 0xB7, 
  9951 000034AD BEEB                <1> 	db 0xBE, 0xEB
  9952                              <1> 
  9953                              <1> ; table of partition type strings
  9954                              <1> .str_tbl:
  9955 000034AF 4E4F4E4520202000    <1>         db "NONE   ",0           ; No type
  9956 000034B7 4641543136202000    <1>         db "FAT16  ",0           ; 0x06
  9957 000034BF 48502F4E54465300    <1>         db "HP/NTFS",0           ; 0x07
  9958 000034C7 4149582830382900    <1> 	db "AIX(08)",0           ; 0x08
  9959 000034CF 4149582830392900    <1> 	db "AIX(09)",0           ; 0x09
  9960 000034D7 4F532F3220424D00    <1> 	db "OS/2 BM",0           ; 0x0A
  9961 000034DF 4641543332202000    <1>         db "FAT32  ",0           ; 0x0B
  9962 000034E7 4641543332782000    <1>         db "FAT32x ",0           ; 0x0C
  9963 000034EF 4641543136782000    <1>         db "FAT16x ",0           ; 0x0E
  9964 000034F7 50512D426F6F7400    <1>         db "PQ-Boot",0           ; 0x3C
  9965 000034FF 514E58342E782000    <1>         db "QNX4.x ",0           ; 0x4D
  9966 00003507 514E5834782D3200    <1>         db "QNX4x-2",0           ; 0x4E
  9967 0000350F 514E5834782D3300    <1>         db "QNX4x-3",0           ; 0x4F
  9968 00003517 4855524420202000    <1>         db "HURD   ",0           ; 0x63
  9969 0000351F 4E6F76656C6C2000    <1>         db "Novell ",0           ; 0x65
  9970 00003527 4D696E6978202000    <1>         db "Minix  ",0           ; 0x81
  9971 0000352F 4C6E785377617000    <1>         db "LnxSwap",0           ; 0x82
  9972 00003537 4C696E7578202000    <1>         db "Linux  ",0           ; 0x83
  9973 0000353F 4C6E78204C564D00    <1> 	db "Lnx LVM",0           ; 0x8E
  9974 00003547 416D6F6562612000    <1> 	db "Amoeba ",0           ; 0x93
  9975 0000354F 4253442F33383600    <1>         db "BSD/386",0           ; 0xA5
  9976 00003557 4F70656E42534400    <1>         db "OpenBSD",0           ; 0xA6
  9977 0000355F 4E65744253442000    <1>         db "NetBSD ",0           ; 0xA9
  9978 00003567 4253446920667300    <1>         db "BSDi fs",0           ; 0xB7
  9979 0000356F 536F6C6172697300    <1>         db "Solaris",0           ; 0xBE
  9980 00003577 42654F5320202000    <1>         db "BeOS   ",0           ; 0xEB
  9981 0000357F 556E6B6E6F776E00    <1>         db "Unknown",0           ; other
  9982                              <1> 
  9983                              <1> ; logical partition types which could not boot
  9984                              <1> ; include the following pri_deny_tbl
  9985                              <1> .log_deny_tbl:
  9986                              <1> %ifdef STRICT_PART_CHECK
  9987                              <1>         db 0x01, 0x0A, 0x07, 0x17
  9988                              <1> %endif
  9989                              <1> ; primary partition types which could not boot
  9990                              <1> .pri_deny_tbl:
  9991 00003587 050F85              <1>         db 0x05, 0x0F, 0x85
  9992                              <1> %ifdef STRIC_PART_CHECK
  9993                              <1>         db 0x82, 0xA0, 0xB8, 0xE1, 0xE3, 0xF2
  9994                              <1> %endif
  9995 0000358A 00                  <1> 	db 0x00
  9996                              <1> 
  9997                              <1> ;the partition types which should be marked as auto active.
  9998                              <1> .auto_act_tbl:
  9999                              <1> ;the partition types which can be hidden.
 10000                              <1> ;the hide method is add 0x10 to the partition type.
 10001                              <1> ; ie. the type of hidden FAT16 = 0x16, etc.
 10002 0000358B BE                  <1>         db 0xBE
 10003                              <1> .allow_hide_tbl:
 10004 0000358C 010406070B0C0E      <1>         db 0x01, 0x04, 0x06, 0x07, 0x0B, 0x0C, 0x0E
 10005                              <1> 
 10006                              <1> ; the types used to hide certain partitions.
 10007                              <1> .hidden_tbl:
 10008 00003593 111416171B1C1E      <1>         db 0x11, 0x14, 0x16, 0x17, 0x1B, 0x1C, 0x1E
 10009                              <1>         
 10010                              <1> .end_of_tbl
 10011                              <1> 
 10012                                  %include "hd_io.asm"
 10013                              <1> ; asmsyntax=nasm
 10014                              <1> ; hd_io.asm
 10015                              <1> ;
 10016                              <1> ; Interface to BIOS int 0x13 functions
 10017                              <1> ;
 10018                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
 10019                              <1> ;
 10020                              <1> 
 10021                              <1> %define RETRY_TIMES     3
 10022                              <1> 
 10023                              <1>         bits 16
 10024                              <1> ;==============================================================================
 10025                              <1> ;check_int13ext ---- Check if the extension of int13h is presents for a driver.
 10026                              <1> ;input:
 10027                              <1> ;      dl = driver id
 10028                              <1> ;output:
 10029                              <1> ;      cf = 0, int13ext is presents
 10030                              <1> ;          cl = interface support bitmap.
 10031                              <1> ;      cf = 1, int13ext is not presents
 10032                              <1> ;==============================================================================
 10033                              <1> check_int13ext:
 10034 0000359A 803E[B237]00        <1>         cmp byte [use_int13_ext], 0
 10035 0000359F 7414                <1>         jz .not_present
 10036                              <1> 
 10037 000035A1 BBAA55              <1>         mov bx, 0x55aa
 10038 000035A4 B441                <1>         mov ah, INT13H_EXT_INSTCHECK
 10039 000035A6 CD13                <1>         int 0x13                        ; Check if int13h extension is presents
 10040                              <1> ;        jc .not_present
 10041 000035A8 81FB55AA            <1>         cmp bx, 0xaa55
 10042 000035AC 7507                <1>         jne .not_present
 10043 000035AE F6C105              <1>         test cl, EXT_SUBSET_FIXED | EXT_SUBSET_EDD
 10044                              <1> 					; Check if this drive supports extended
 10045 000035B1 7402                <1>         jz .not_present                 ; read/write
 10046 000035B3 F8                  <1>         clc
 10047 000035B4 C3                  <1>         ret
 10048                              <1> .not_present:
 10049 000035B5 F9                  <1>         stc
 10050 000035B6 C3                  <1>         ret
 10051                              <1> 
 10052                              <1> ;==============================================================================
 10053                              <1> ;get_drive_info ---- Get drive informations
 10054                              <1> ;input:
 10055                              <1> ;      dl = drive id
 10056                              <1> ;      es:di -> buffer for drive info (struc struc_driveinfo)
 10057                              <1> ;output:
 10058                              <1> ;      cf = 0 ok
 10059                              <1> ;      cf = 1 drive is not presents
 10060                              <1> ;==============================================================================
 10061                              <1> get_drive_info:
 10062 000035B7 60                  <1>         pusha
 10063                              <1>         
 10064 000035B8 8815                <1>         mov [di + struc_driveinfo.id], dl
 10065 000035BA C6450100            <1>         mov byte [di + struc_driveinfo.flags], 0 ; clear the flags
 10066                              <1> 
 10067 000035BE 52                  <1>         push dx
 10068 000035BF E8D8FF              <1>         call check_int13ext
 10069 000035C2 5A                  <1>         pop dx
 10070 000035C3 7359                <1>         jnc .ext_present
 10071                              <1> 
 10072 000035C5 B415                <1>         mov ah, INT13H_GETTYPE
 10073 000035C7 52                  <1>         push dx
 10074 000035C8 CD13                <1>         int 0x13
 10075 000035CA 8826[0520]          <1>         mov [hdio_tmp.disk_errno], ah
 10076 000035CE 5A                  <1>         pop dx
 10077 000035CF 724A                <1>         jc .drive_not_present
 10078 000035D1 08E4                <1>         or ah, ah                           ; ah = drive type, = 0 no such drive
 10079 000035D3 7446                <1>         jz .drive_not_present
 10080                              <1>         
 10081 000035D5 06                  <1>         push es
 10082 000035D6 57                  <1>         push di
 10083 000035D7 50                  <1>         push ax                             ; save drive type
 10084 000035D8 B408                <1>         mov ah, INT13H_GETINFO
 10085 000035DA CD13                <1>         int 0x13
 10086 000035DC 8826[0520]          <1>         mov [hdio_tmp.disk_errno], ah
 10087 000035E0 58                  <1>         pop ax
 10088 000035E1 5F                  <1>         pop di
 10089 000035E2 07                  <1>         pop es
 10090 000035E3 7236                <1>         jc .drive_not_present
 10091                              <1> 
 10092 000035E5 50                  <1>         push ax                             ; drive type.
 10093 000035E6 53                  <1>         push bx                             ; floppy type.
 10094                              <1>         
 10095 000035E7 0FB6C1              <1>         movzx ax, cl                             ;
 10096 000035EA 243F                <1>         and al, 0x3f                             ; get sectors per track
 10097 000035EC 894506              <1>         mov [di + struc_driveinfo.sectors], ax   ;
 10098                              <1> 
 10099 000035EF 86E5                <1>         xchg ah, ch                              ;
 10100 000035F1 C1E102              <1>         shl cx, 2                                ;
 10101 000035F4 88E1                <1>         mov cl, ah                               ; get cylinders
 10102 000035F6 41                  <1>         inc cx                                   ;
 10103 000035F7 894D02              <1>         mov [di + struc_driveinfo.cylinders], cx ;
 10104                              <1> 
 10105 000035FA 0FB6C6              <1> 	movzx ax, dh                             ; get heads
 10106 000035FD 40                  <1>         inc ax                                   ;
 10107 000035FE 894504              <1>         mov [di + struc_driveinfo.heads], ax     ;
 10108                              <1> 
 10109 00003601 5B                  <1>         pop bx
 10110 00003602 58                  <1>         pop ax
 10111                              <1> 
 10112 00003603 B601                <1>         mov dh, DRVFLAG_DRIVEOK
 10113 00003605 80FC03              <1>         cmp ah, DRV_TYPE_FIXED                  ; fixed drive.
 10114 00003608 7403                <1>         je .fixed_drive
 10115 0000360A 80CE04              <1>         or dh, DRVFLAG_REMOVABLE
 10116                              <1>         
 10117                              <1> .fixed_drive:
 10118 0000360D 80CE02              <1>         or dh, DRVFLAG_CHSVALID
 10119 00003610 887501              <1>         mov [di + struc_driveinfo.flags], dh
 10120 00003613 C745080002          <1> 	mov word [di + struc_driveinfo.sector_size], 0x200
 10121 00003618 E97F00              <1>         jmp .endok
 10122                              <1> 
 10123                              <1> .drive_not_present:
 10124 0000361B 61                  <1>         popa
 10125 0000361C F9                  <1>         stc
 10126 0000361D C3                  <1>         ret
 10127                              <1> 
 10128                              <1> .ext_present:
 10129                              <1> ;Int13h ext is presents, use int13h ext to get drive info
 10130 0000361E B448                <1>         mov ah, INT13H_EXT_GETINFO
 10131 00003620 8D36[A91F]          <1>         lea si, [hdio_tmp.extparam]
 10132 00003624 C7044200            <1>         mov word [si + struc_extparam.pack_size], SIZE_OF_EXTPARAM
 10133 00003628 52                  <1>         push dx
 10134 00003629 CD13                <1>         int 0x13
 10135 0000362B 8826[0520]          <1>         mov [hdio_tmp.disk_errno], ah
 10136 0000362F 5A                  <1>         pop dx
 10137 00003630 72E9                <1>         jc .drive_not_present
 10138                              <1>         
 10139 00003632 8B4404              <1>         mov ax, [si + struc_extparam.cylinders]
 10140 00003635 894502              <1>         mov [di + struc_driveinfo.cylinders], ax
 10141 00003638 8B4408              <1>         mov ax, [si + struc_extparam.heads]
 10142 0000363B 894504              <1>         mov [di + struc_driveinfo.heads], ax
 10143 0000363E 8B440C              <1>         mov ax, [si + struc_extparam.sectors]
 10144 00003641 894506              <1>         mov [di + struc_driveinfo.sectors], ax
 10145 00003644 8B4418              <1> 	mov ax, [si + struc_extparam.bytes_per_sect]
 10146 00003647 894508              <1> 	mov [di + struc_driveinfo.sector_size], ax
 10147                              <1> 
 10148 0000364A 8A4402              <1>         mov al, [si + struc_extparam.flags]              ;
 10149 0000364D 2406                <1>         and al, (DRVFLAG_CHSVALID + DRVFLAG_REMOVABLE)   ; fill in the
 10150 0000364F 0C09                <1>         or al, DRVFLAG_EXTOK + DRVFLAG_DRIVEOK           ; struc_driveinfo.flags
 10151                              <1> 
 10152                              <1> %ifndef DISABLE_CDBOOT
 10153 00003651 803C42              <1> 	cmp byte [si + struc_extparam.pack_size], SIZE_OF_EXTPARAM
 10154 00003654 721F                <1> 	jb .no_edd30
 10155 00003656 817C1EDDBE          <1> 	cmp word [si + struc_extparam.dpi_key], 0xBEDD
 10156 0000365B 7518                <1> 	jne .no_edd30
 10157 0000365D 807C2024            <1> 	cmp byte [si + struc_extparam.dpi_length], 36
 10158 00003661 7512                <1> 	jne .no_edd30
 10159 00003663 66817C2841544150    <1> 	cmp dword [si + struc_extparam.interface_type], 'ATAP'
 10160 0000366B 752A                <1> 	jne .not_cdrom
 10161 0000366D 807C2C49            <1> 	cmp byte [si + struc_extparam.interface_type+4], 'I'
 10162 00003671 7524                <1> 	jne .not_cdrom
 10163 00003673 0C10                <1> 	or al, DRVFLAG_ISCDROM
 10164                              <1> 
 10165                              <1> .no_edd30:
 10166 00003675 803C1E              <1> 	cmp byte [si + struc_extparam.pack_size], 30
 10167 00003678 721D                <1> 	jb .not_cdrom
 10168 0000367A 8B5C1C              <1> 	mov bx, [si + struc_extparam.dpte_addr+2]
 10169 0000367D 83FBFF              <1> 	cmp bx, 0xffff
 10170 00003680 7415                <1> 	je .not_cdrom
 10171 00003682 8B741A              <1> 	mov si, [si + struc_extparam.dpte_addr]
 10172 00003685 83FEFF              <1> 	cmp si, 0xffff
 10173 00003688 740D                <1> 	je .not_cdrom
 10174 0000368A 1E                  <1> 	push ds
 10175 0000368B 8EDB                <1> 	mov ds, bx
 10176 0000368D 3EF6440A40          <1> 	test byte [ds:si + struc_dpte.bios_spec], 0x40  ; check if is atapi dev
 10177 00003692 1F                  <1> 	pop ds
 10178 00003693 7402                <1> 	jz .not_cdrom
 10179 00003695 0C10                <1> 	or al, DRVFLAG_ISCDROM
 10180                              <1> 
 10181                              <1> .not_cdrom:
 10182                              <1> %endif
 10183 00003697 884501              <1>         mov [di + struc_driveinfo.flags], al
 10184                              <1> 
 10185                              <1> .endok:
 10186 0000369A 61                  <1>         popa
 10187 0000369B F8                  <1>         clc
 10188 0000369C C3                  <1>         ret
 10189                              <1>         
 10190                              <1> ;==============================================================================
 10191                              <1> ;get_drive_flags ---- get drive flags
 10192                              <1> ;input:
 10193                              <1> ;      dl = drive id
 10194                              <1> ;output:
 10195                              <1> ;      cf = 0 ok, al = drive flags
 10196                              <1> ;      cf = 1 error, al = 0
 10197                              <1> ;==============================================================================
 10198                              <1> get_drive_flags:
 10199 0000369D 57                  <1>         push di
 10200 0000369E 8D3E[FB1F]          <1>         lea di, [hdio_tmp.driveinfo]
 10201 000036A2 E812FF              <1>         call get_drive_info
 10202 000036A5 8A4501              <1>         mov al, [di + struc_driveinfo.flags]
 10203 000036A8 5F                  <1>         pop di
 10204 000036A9 C3                  <1>         ret
 10205                              <1> 
 10206                              <1> ;;;;;;;;;;;;;;;;;;; perhaps these will be used in future ;;;;;;;;;;;;;;;;;;;
 10207                              <1> %if 0
 10208                              <1> ;==============================================================================
 10209                              <1> ;init_drives_info ---- get all drives info
 10210                              <1> ;input:
 10211                              <1> ;      es:di -> buffer to store the info of each drives
 10212                              <1> ;               should have enought space to store 255 drives' info
 10213                              <1> ;output:
 10214                              <1> ;      dh = the number of drives (include the floppy)
 10215                              <1> ;==============================================================================
 10216                              <1> init_drives_info:
 10217                              <1>         push es
 10218                              <1>         push di
 10219                              <1>         mov cx, 256
 10220                              <1>         xor dx, dx
 10221                              <1> .loop_query:
 10222                              <1>         push cx
 10223                              <1>         push dx
 10224                              <1>         call get_drive_info
 10225                              <1>         pop dx
 10226                              <1>         pop cx
 10227                              <1>         jc .bad_drive
 10228                              <1>         inc dh
 10229                              <1>         
 10230                              <1> .bad_drive:
 10231                              <1>         add di, SIZE_OF_DRIVEINFO
 10232                              <1>         inc dl
 10233                              <1>         loop .loop_query
 10234                              <1>         
 10235                              <1>         pop di
 10236                              <1>         pop es
 10237                              <1>         ret
 10238                              <1> 
 10239                              <1> %endif
 10240                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10241                              <1> 
 10242                              <1> ;==============================================================================
 10243                              <1> ;lba2chs ---- lba to chs translation
 10244                              <1> ;input:
 10245                              <1> ;      ebx = lba address 
 10246                              <1> ;      ds : si -> drive info struc
 10247                              <1> ;output:
 10248                              <1> ;      cf = 0 success
 10249                              <1> ;            ch = low eight bits of cylinder number
 10250                              <1> ;            cl = sector number 1-63 (bits 0-5)
 10251                              <1> ;                 high two bits of cylinder (bits 6-7, hard disk only)
 10252                              <1> ;            dh = head number
 10253                              <1> ;      cf = 1 error ( cylinder exceed )
 10254                              <1> ;==============================================================================
 10255                              <1> lba2chs:
 10256 000036AA 50                  <1>         push ax
 10257 000036AB 6689D8              <1> 	mov eax, ebx
 10258                              <1> 
 10259 000036AE 660FB74C06          <1>         movzx ecx, word [si + struc_driveinfo.sectors] ; calculate sector:
 10260                              <1> 
 10261 000036B3 09C9                <1>         or cx, cx                              ; sectors per track cannot equal
 10262 000036B5 7429                <1>         jz .convert_failed                     ; to zero.
 10263                              <1>         
 10264 000036B7 6631D2              <1>         xor edx, edx
 10265 000036BA 66F7F1              <1>         div ecx                                ; sector =  lba % sects_per_track + 1
 10266 000036BD 42                  <1>         inc dx                                 ; lba1 = lba / sects_per_track
 10267 000036BE 89D1                <1>         mov cx, dx                             ;
 10268                              <1> 
 10269                              <1>                                                ; calculate head and cylinder:
 10270                              <1>                                                ; head = lba1 % num_of_heads
 10271 000036C0 660FB75C04          <1>         movzx ebx, word [si + struc_driveinfo.heads] 
 10272                              <1>                                                ; cylinder = lba1 / num_of_heads
 10273                              <1> 
 10274 000036C5 08DB                <1>         or bl, bl                              ; heads cannot equal to zero.
 10275 000036C7 7417                <1>         jz .convert_failed                     ;
 10276                              <1>         
 10277 000036C9 6631D2              <1>         xor edx, edx
 10278 000036CC 66F7F3              <1>         div ebx                                ;
 10279                              <1>         
 10280 000036CF 88D6                <1>         mov dh, dl                             ; head = dl <= 255
 10281 000036D1 3DFF03              <1>         cmp ax, MAX_CYLS                       ; cylinder = ax
 10282 000036D4 770A                <1>         ja .convert_failed                     ; cylinder is too big.
 10283                              <1> 
 10284 000036D6 86C4                <1>         xchg al, ah                            ;
 10285 000036D8 C0E006              <1>         shl al, 6                              ; fill cylinder and sector into
 10286 000036DB 09C1                <1>         or cx, ax                              ; cx
 10287 000036DD 58                  <1>         pop ax
 10288 000036DE F8                  <1>         clc
 10289 000036DF C3                  <1>         ret
 10290                              <1>         
 10291                              <1> .convert_failed:
 10292 000036E0 C606[0520]FE        <1>         mov byte [hdio_tmp.disk_errno], 0xFE             ; invalid LBA address
 10293 000036E5 58                  <1>         pop ax
 10294 000036E6 F9                  <1>         stc
 10295 000036E7 C3                  <1>         ret
 10296                              <1>         
 10297                              <1> ;==============================================================================
 10298                              <1> ;disk_access_low ---- read / write sectors on disk
 10299                              <1> ;input:
 10300                              <1> ;      ah      = function id, ( 02 = read, 03 = write )
 10301                              <1> ;      al      = number of sectors to be accessed
 10302                              <1> ;      ebx     = lba address
 10303                              <1> ;      ds : si -> drive info struc
 10304                              <1> ;      es : di -> buffer to get/store data
 10305                              <1> ;output:
 10306                              <1> ;      cf = 0 success
 10307                              <1> ;      cf = 1 error
 10308                              <1> ;==============================================================================
 10309                              <1> disk_access_low:
 10310 000036E8 60                  <1>         pusha
 10311                              <1>         
 10312 000036E9 8A7401              <1>         mov dh, [si + struc_driveinfo.flags]
 10313 000036EC F6C601              <1>         test dh, DRVFLAG_DRIVEOK ; check if drive ok
 10314 000036EF 7467                <1>         jz .access_error
 10315                              <1>         
 10316 000036F1 F6C608              <1>         test dh, DRVFLAG_EXTOK
 10317 000036F4 7440                <1>         jz .no_ext
 10318                              <1>         
 10319                              <1> ;int13h extension is present, use it
 10320                              <1>         
 10321 000036F6 8A14                <1>         mov dl, [si + struc_driveinfo.id]    ; get drive id
 10322 000036F8 80C440              <1>         add ah, 0x40                         ; ext read func id = 0x42
 10323 000036FB 8D36[EB1F]          <1>         lea si, [hdio_tmp.int13ext]
 10324 000036FF 6631C9              <1>         xor ecx, ecx
 10325 00003702 C60410              <1>         mov byte [si + struc_int13ext.pack_size], 0x10 ;
 10326 00003705 66894C0C            <1>         mov [si + struc_int13ext.blk_num_high1], ecx ; clear and set
 10327 00003709 884C01              <1>         mov [si + struc_int13ext.reserved], cl       ; some stuff.
 10328 0000370C 884C03              <1>         mov [si + struc_int13ext.reserved1], cl      ;
 10329                              <1> 
 10330 0000370F 897C04              <1>         mov [si + struc_int13ext.buf_addr_off], di
 10331 00003712 8C4406              <1>         mov [si + struc_int13ext.buf_addr_seg], es
 10332 00003715 66895C08            <1>         mov [si + struc_int13ext.blk_num_low1], ebx
 10333                              <1> 
 10334                              <1> .retry_ext_read:
 10335 00003719 884402              <1>         mov [si + struc_int13ext.blk_count], al
 10336                              <1>         
 10337 0000371C 50                  <1>         push ax
 10338 0000371D 52                  <1>         push dx
 10339 0000371E 56                  <1>         push si
 10340 0000371F CD13                <1>         int 0x13
 10341 00003721 8826[0520]          <1>         mov [hdio_tmp.disk_errno], ah
 10342 00003725 5E                  <1>         pop si
 10343 00003726 5A                  <1>         pop dx
 10344 00003727 58                  <1>         pop ax
 10345 00003728 732F                <1>         jnc .access_ok
 10346 0000372A E86C00              <1>         call reset_drive
 10347 0000372D FEC6                <1>         inc dh
 10348 0000372F 80FE03              <1>         cmp dh, RETRY_TIMES                 ; retry 3 times
 10349 00003732 72E5                <1>         jb .retry_ext_read
 10350 00003734 EB22                <1>         jmp short .access_error
 10351                              <1> 
 10352                              <1> ;int13h extension is not ok, use old int13h
 10353                              <1> .no_ext:
 10354 00003736 E871FF              <1>         call lba2chs
 10355 00003739 721D                <1>         jc .access_error
 10356 0000373B 8A14                <1>         mov dl, [si + struc_driveinfo.id]   ; dl = drive id
 10357 0000373D 89FB                <1>         mov bx, di                          ; es : bx -> buffer
 10358 0000373F 31FF                <1>         xor di, di
 10359                              <1>         
 10360                              <1> .retry_read:
 10361 00003741 50                  <1>         push ax
 10362 00003742 52                  <1>         push dx
 10363 00003743 53                  <1>         push bx
 10364 00003744 CD13                <1>         int 0x13
 10365 00003746 8826[0520]          <1>         mov [hdio_tmp.disk_errno], ah
 10366 0000374A 5B                  <1>         pop bx
 10367 0000374B 5A                  <1>         pop dx
 10368 0000374C 58                  <1>         pop ax
 10369 0000374D 730A                <1>         jnc .access_ok
 10370 0000374F E84700              <1>         call reset_drive
 10371 00003752 47                  <1>         inc di
 10372 00003753 83FF03              <1>         cmp di, RETRY_TIMES                 ; retry 3 times
 10373 00003756 72E9                <1>         jb .retry_read
 10374                              <1> 
 10375                              <1> .access_error:
 10376 00003758 F9                  <1>         stc
 10377                              <1> .access_ok:
 10378 00003759 61                  <1>         popa
 10379 0000375A C3                  <1>         ret
 10380                              <1> 
 10381                              <1> ;==============================================================================
 10382                              <1> ;disk_access ---- read / write sectors on disk
 10383                              <1> ;input:
 10384                              <1> ;      ah = function id, ( 02 = read, 03 = write )
 10385                              <1> ;      al = number of sectors to be accessed
 10386                              <1> ;      ebx = lba address
 10387                              <1> ;      dl = drive id
 10388                              <1> ;      es : di -> buffer
 10389                              <1> ;output:
 10390                              <1> ;      cf = 0 success
 10391                              <1> ;      cf = 1 error
 10392                              <1> ;==============================================================================
 10393                              <1> disk_access:
 10394 0000375B 56                  <1>         push si
 10395 0000375C 57                  <1>         push di
 10396 0000375D 6653                <1> 	push ebx
 10397                              <1> 
 10398 0000375F 06                  <1>         push es
 10399 00003760 1E                  <1>         push ds                         ; ds -> es, hdio_tmp.driveinfo is in ds segment.
 10400 00003761 07                  <1>         pop es
 10401                              <1>         
 10402 00003762 8D3E[FB1F]          <1>         lea di, [hdio_tmp.driveinfo]
 10403 00003766 E84EFE              <1>         call get_drive_info
 10404                              <1>         
 10405 00003769 07                  <1>         pop es
 10406 0000376A 665B                <1> 	pop ebx
 10407 0000376C 5F                  <1>         pop di
 10408                              <1>         
 10409 0000376D 7207                <1>         jc .access_error
 10410 0000376F 8D36[FB1F]          <1>         lea si, [hdio_tmp.driveinfo]
 10411 00003773 E872FF              <1>         call disk_access_low
 10412                              <1> .access_error:
 10413 00003776 5E                  <1>         pop si
 10414 00003777 C3                  <1>         ret
 10415                              <1> 
 10416                              <1> 
 10417                              <1> %if 0
 10418                              <1> ;==============================================================================
 10419                              <1> ;get_cdrom_devinfo ---- get the CDROM's device info, e.g. io port
 10420                              <1> ;input: dl = drive id
 10421                              <1> ;output: cf = 0 success, ax = base io port, bx = ctrl port,
 10422                              <1> ;        cx = device specification
 10423                              <1> ;==============================================================================
 10424                              <1> get_cdrom_devinfo:
 10425                              <1> 	push si
 10426                              <1> 	call get_drive_flags
 10427                              <1> 	test al, DRVFLAG_ISCDROM
 10428                              <1> 	jz .not_cdrom
 10429                              <1> 
 10430                              <1> 	mov si, hdio_tmp.extparam
 10431                              <1> 	mov word [si], SIZE_OF_EXTPARAM
 10432                              <1> 	mov ah, 0x48
 10433                              <1> 	int 0x13
 10434                              <1> 
 10435                              <1> 	jc .not_cdrom
 10436                              <1> 	cmp byte [si], 30
 10437                              <1> 	jb .not_cdrom
 10438                              <1> 	mov ax, [si + struc_extparam.dpte_addr + 2]
 10439                              <1> 	cmp ax, 0xffff
 10440                              <1> 	je .not_cdrom
 10441                              <1> 
 10442                              <1> 	push es
 10443                              <1> 	push di
 10444                              <1> 	mov es, ax
 10445                              <1> 	mov di, [si + struc_extparam.dpte_addr]
 10446                              <1> 	mov ax, [es:di + struc_dpte.base_io]
 10447                              <1> 	mov bx, [es:di + struc_dpte.ctrl_io]
 10448                              <1> 	pop di
 10449                              <1> 	pop es
 10450                              <1> 
 10451                              <1> 	cmp byte [si], SIZE_OF_EXTPARAM
 10452                              <1> 	jb .not_cdrom
 10453                              <1> 	mov cx, [si + struc_extparam.device_path]
 10454                              <1> 	clc
 10455                              <1> 	jmp short .ok
 10456                              <1> 
 10457                              <1> .not_cdrom:
 10458                              <1> 	stc
 10459                              <1> .ok:
 10460                              <1> 	pop si
 10461                              <1> 	ret
 10462                              <1> 
 10463                              <1> %endif
 10464                              <1> 
 10465                              <1> %ifndef DISABLE_CDBOOT
 10466                              <1> ;==============================================================================
 10467                              <1> ;get_cdrom_boot_catalog ---- get the CDROM's boot catalog
 10468                              <1> ;input:
 10469                              <1> ;	dl = drive id
 10470                              <1> ;	es:di -> buffer
 10471                              <1> ;output:
 10472                              <1> ;	cf =0 success
 10473                              <1> ;	cf =1 error
 10474                              <1> ;==============================================================================
 10475                              <1> get_cdrom_boot_catalog:
 10476 00003778 60                  <1> 	pusha
 10477 00003779 BE[A11F]            <1> 	mov si, hdio_tmp.cdbc_cmd
 10478 0000377C C60408              <1> 	mov byte [si], SIZE_OF_CDBC_CMD
 10479 0000377F C6440101            <1> 	mov byte [si+struc_cdbc_cmd.sector_count], 1
 10480 00003783 897C02              <1> 	mov [si+struc_cdbc_cmd.buf_addr_off], di
 10481 00003786 8C4404              <1> 	mov [si+struc_cdbc_cmd.buf_addr_seg], es
 10482 00003789 31DB                <1> 	xor bx, bx
 10483 0000378B 895C06              <1> 	mov [si+struc_cdbc_cmd.begnning_sect], bx
 10484 0000378E B8004D              <1> 	mov ax, 0x4d00
 10485 00003791 CD13                <1> 	int 0x13
 10486 00003793 8826[0520]          <1> 	mov [hdio_tmp.disk_errno], ah
 10487 00003797 61                  <1> 	popa
 10488 00003798 C3                  <1> 	ret
 10489                              <1> %endif
 10490                              <1> 
 10491                              <1> ;==============================================================================
 10492                              <1> ;reset_drive ---- reset the drive
 10493                              <1> ;input:
 10494                              <1> ;      dl = drive id
 10495                              <1> ;output:
 10496                              <1> ;      cf = 0 success
 10497                              <1> ;      cf = 1 error
 10498                              <1> ;==============================================================================
 10499                              <1> reset_drive:
 10500 00003799 60                  <1>         pusha
 10501 0000379A 31C0                <1>         xor ax, ax
 10502 0000379C CD13                <1>         int 0x13
 10503 0000379E 61                  <1>         popa
 10504 0000379F C3                  <1>         ret
 10505                              <1> 
 10506                              <1> ;==============================================================================
 10507                              <1> ; get_last_disk_errno ---- get the last disk error number
 10508                              <1> ; input:
 10509                              <1> ;	none
 10510                              <1> ; output:
 10511                              <1> ;	ax = errno
 10512                              <1> ;==============================================================================
 10513                              <1> get_last_disk_errno:
 10514 000037A0 A1[0520]            <1> 	mov ax, [hdio_tmp.disk_errno]
 10515 000037A3 C3                  <1> 	ret
 10516                              <1> 
 10517                              <1> ;==============================================================================
 10518                              <1> ;get_drvid_str ---- get driver id string
 10519                              <1> ;input:
 10520                              <1> ;	dl = drive id
 10521                              <1> ;	es:di -> buffer
 10522                              <1> ;output:
 10523                              <1> ;	es:di -> point to the end of the string
 10524                              <1> ;==============================================================================
 10525                              <1> get_drvid_str:
 10526 000037A4 60                  <1> 	pusha
 10527                              <1> 
 10528                              <1> %ifdef SHOW_DRV_NAME
 10529                              <1> 	call get_drive_flags
 10530                              <1> 	cmp dl, MIN_HD_ID
 10531                              <1> 	jb .floppy
 10532                              <1> 	test al, DRVFLAG_REMOVABLE
 10533                              <1> 	jz .harddisk
 10534                              <1> 	test al, DRVFLAG_ISCDROM
 10535                              <1> 	jnz .cdrom
 10536                              <1> 	mov ax, 'RD'
 10537                              <1> 	jmp short .show_drv_name
 10538                              <1> .floppy:
 10539                              <1> 	mov ax, 'FD'
 10540                              <1> 	jmp short .show_drv_name
 10541                              <1> .harddisk:
 10542                              <1> 	mov ax, 'HD'
 10543                              <1> 	jmp short .show_drv_name
 10544                              <1> .cdrom:
 10545                              <1> 	mov ax, 'CD'
 10546                              <1> .show_drv_name:
 10547                              <1> 	stosb
 10548                              <1> 	mov al, ah
 10549                              <1> 	stosb
 10550                              <1> 
 10551                              <1> 	movzx ax, dl
 10552                              <1> 	and al, 0x0F
 10553                              <1> 	mov cl, 1
 10554                              <1> 	call htoa
 10555                              <1> %else
 10556 000037A5 0FB6C2              <1>         movzx ax, dl                                ; fill drive id
 10557 000037A8 B103                <1>         mov cl, 3                                   ;
 10558 000037AA E83FEF              <1>         call itoa                                   ;
 10559                              <1> %endif
 10560 000037AD 61                  <1> 	popa
 10561 000037AE 83C703              <1> 	add di, 3
 10562 000037B1 C3                  <1> 	ret
 10563                              <1> 
 10564 000037B2 01                  <1> use_int13_ext  db 1
 10565                                  %include "myint13h.asm"
 10566                              <1> ; asmsyntax=nasm
 10567                              <1> ;
 10568                              <1> ; myint13h.asm
 10569                              <1> ;
 10570                              <1> ; install / uninstall func for my int13h
 10571                              <1> ;
 10572                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
 10573                              <1> ;
 10574                              <1> %ifndef DISABLE_CDBOOT
 10575                              <1>   %define SIZE_OF_EDD30	8	; my EDD3.0 and ATAPI driver need 6K mem
 10576                              <1> %else
 10577                              <1>   %define SIZE_OF_EDD30	1	; my SWAP Driver ID wrapper needs 1K mem
 10578                              <1> %endif
 10579                              <1> 
 10580                              <1> %ifndef DISABLE_CDBOOT
 10581                              <1>   %define EDD30_SIG1	'BM'
 10582                              <1>   %define EDD30_SIG2	'CB'
 10583                              <1> %else
 10584                              <1>   %define EDD30_SIG1	'BM'
 10585                              <1>   %define EDD30_SIG2	'SD'
 10586                              <1> %endif
 10587                              <1> 
 10588                              <1> ;=============================================================================
 10589                              <1> ;install_myint13h ---- install my int13h handler
 10590                              <1> ; bl = 0 init cdrom
 10591                              <1> ; bl = 1 don't init cdrom
 10592                              <1> ;=============================================================================
 10593                              <1> install_myint13h:
 10594 000037B3 60                  <1> 	pusha
 10595 000037B4 06                  <1> 	push es
 10596 000037B5 31C0                <1> 	xor ax, ax
 10597 000037B7 8EC0                <1> 	mov es, ax
 10598                              <1> 
 10599 000037B9 E87300              <1> 	call check_myint13h
 10600 000037BC 7209                <1> 	jc .not_inst
 10601 000037BE 26A14E00            <1> 	mov ax, [es:0x13*4+2]
 10602 000037C2 A3[BD3C]            <1> 	mov [myint13h_tmp.edd30_seg], ax
 10603                              <1> 
 10604 000037C5 EB2D                <1> 	jmp .end
 10605                              <1> 	
 10606                              <1> .not_inst:
 10607                              <1> 
 10608                              <1> %ifndef DISABLE_CDBOOT
 10609 000037C7 53                  <1> 	push bx
 10610                              <1> %endif
 10611 000037C8 26832E130408        <1> 	sub word [es:0x413], SIZE_OF_EDD30 ; allocate memory for module edd30
 10612 000037CE CD12                <1> 	int 0x12
 10613 000037D0 C1E006              <1> 	shl ax, 6
 10614 000037D3 50                  <1> 	push ax
 10615 000037D4 07                  <1> 	pop es
 10616 000037D5 31FF                <1> 	xor di, di
 10617 000037D7 BE[4D38]            <1> 	mov si, module_edd30
 10618 000037DA B9900B              <1> 	mov cx, end_of_mod_edd30 - module_edd30
 10619 000037DD FC                  <1> 	cld
 10620 000037DE F3A4                <1> 	rep movsb
 10621                              <1> 
 10622 000037E0 A3[BD3C]            <1> 	mov [myint13h_tmp.edd30_seg], ax
 10623                              <1> 
 10624                              <1> %ifndef DISABLE_CDBOOT
 10625 000037E3 5B                  <1> 	pop bx
 10626 000037E4 08DB                <1> 	or bl, bl
 10627 000037E6 7506                <1> 	jnz .go_inst_int13
 10628 000037E8 B402                <1> 	mov ah, 2
 10629 000037EA FF1E[BB3C]          <1> 	call far [myint13h_tmp.edd30_off]	;initialize cdrom drivers
 10630                              <1> %endif
 10631                              <1> 
 10632                              <1> .go_inst_int13:
 10633 000037EE 31C0                <1> 	xor ax, ax
 10634 000037F0 FF1E[BB3C]          <1> 	call far [myint13h_tmp.edd30_off]	;install my int13h 
 10635                              <1> 
 10636                              <1> .end:
 10637 000037F4 07                  <1> 	pop es
 10638 000037F5 61                  <1> 	popa
 10639 000037F6 C3                  <1> 	ret
 10640                              <1> 
 10641                              <1> ;=============================================================================
 10642                              <1> ;uninstall_myint13h ---- uninstall my int13h handler
 10643                              <1> ;=============================================================================
 10644                              <1> uninstall_myint13h:
 10645 000037F7 60                  <1> 	pusha
 10646 000037F8 E83400              <1> 	call check_myint13h
 10647 000037FB 7214                <1> 	jc .not_inst
 10648                              <1> 
 10649 000037FD B401                <1> 	mov ah, 1
 10650 000037FF FF1E[BB3C]          <1> 	call far [myint13h_tmp.edd30_off]
 10651 00003803 720C                <1> 	jc .not_inst
 10652                              <1> 
 10653 00003805 06                  <1> 	push es
 10654 00003806 31C0                <1> 	xor ax, ax
 10655 00003808 8EC0                <1> 	mov es, ax
 10656 0000380A 268306130408        <1> 	add word [es:0x413], SIZE_OF_EDD30 ; free memory
 10657 00003810 07                  <1> 	pop es
 10658                              <1> 
 10659                              <1> .not_inst:
 10660 00003811 61                  <1> 	popa
 10661 00003812 C3                  <1> 	ret
 10662                              <1> 
 10663                              <1> ;=============================================================================
 10664                              <1> ;set_drive_map
 10665                              <1> ;input: bx, cx drive map
 10666                              <1> ;=============================================================================
 10667                              <1> set_drive_map:
 10668 00003813 60                  <1> 	pusha
 10669 00003814 E81800              <1> 	call check_myint13h
 10670 00003817 7206                <1> 	jc .end
 10671 00003819 B403                <1> 	mov ah, 3
 10672                              <1> 
 10673 0000381B FF1E[BB3C]          <1> 	call far [myint13h_tmp.edd30_off]
 10674                              <1> .end:
 10675 0000381F 61                  <1> 	popa
 10676 00003820 C3                  <1> 	ret
 10677                              <1> 
 10678                              <1> ;=============================================================================
 10679                              <1> ;set_io_ports
 10680                              <1> ;input: bx, cx io ports
 10681                              <1> ;=============================================================================
 10682                              <1> set_io_ports:
 10683 00003821 60                  <1> 	pusha
 10684 00003822 E80A00              <1> 	call check_myint13h
 10685 00003825 7206                <1> 	jc .end
 10686 00003827 B404                <1> 	mov ah, 4
 10687                              <1> 
 10688 00003829 FF1E[BB3C]          <1> 	call far [myint13h_tmp.edd30_off]
 10689                              <1> .end:
 10690 0000382D 61                  <1> 	popa
 10691 0000382E C3                  <1> 	ret
 10692                              <1> 
 10693                              <1> ;=============================================================================
 10694                              <1> ;check_myint13h ---- check if myint13h is present
 10695                              <1> ;=============================================================================
 10696                              <1> check_myint13h:
 10697 0000382F 60                  <1> 	pusha
 10698 00003830 B86666              <1> 	mov ax, 0x6666
 10699 00003833 BB424D              <1> 	mov bx, EDD30_SIG1
 10700 00003836 B94342              <1> 	mov cx, EDD30_SIG2
 10701 00003839 F8                  <1> 	clc
 10702 0000383A CD13                <1> 	int 0x13
 10703 0000383C 720C                <1> 	jc .absent
 10704 0000383E 81FB4342            <1> 	cmp bx, EDD30_SIG2
 10705 00003842 7506                <1> 	jne .absent
 10706 00003844 81F9424D            <1> 	cmp cx, EDD30_SIG1
 10707 00003848 7401                <1> 	je .end
 10708                              <1> .absent:
 10709 0000384A F9                  <1> 	stc
 10710                              <1> .end:
 10711 0000384B 61                  <1> 	popa
 10712 0000384C C3                  <1> 	ret
 10713                              <1> 
 10714                              <1> module_edd30:
 10715 0000384C <incbin>            <1> incbin "edd30.bin"
 10716                              <1> end_of_mod_edd30:
 10717                                  
 10718                                  ;=============================================================================
 10719                                  ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  DATA AREA  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 10720                                  ;=============================================================================
 10721                                  
 10722                                  %define ROOT_WINDOW_ACTION_NUMBER (main_action_table.end_of_root_window - main_action_table.root_window) / SIZE_OF_STRUC_ACTION
 10723                                  %define BOOT_MENU_ACTION_NUMBER (main_action_table.end_of_boot_menu - main_action_table.boot_menu) / SIZE_OF_STRUC_ACTION
 10724                                  %define MAIN_MENU_ACTION_NUMBER (main_action_table.end_of_main_menu - main_action_table.main_menu) / SIZE_OF_STRUC_ACTION
 10725                                  %define RECORD_MENU_ACTION_NUMBER (main_action_table.end_of_record_menu - main_action_table.record_menu) / SIZE_OF_STRUC_ACTION
 10726                                  %define SYS_MENU_ACTION_NUMBER (main_action_table.end_of_sys_menu - main_action_table.sys_menu) / SIZE_OF_STRUC_ACTION
 10727                                  
 10728                                  %define MAIN_MENU_ITEMS_NUMBER   11
 10729                                  %define RECORD_MENU_ITEMS_NUMBER 16
 10730                                  %define SYS_MENU_ITEMS_NUMBER    18
 10731                                  ;=============================================================================
 10732                                  ; Windows data
 10733                                  ;=============================================================================
 10734                                  main_windows_data:
 10735                                  .root_window    istruc struc_window
 10736 000043DD 0900                    		at struc_window.flags,                  dw WINFLAG_OPEN | WINFLAG_NO_FOCUS
 10737 000043DF 0000                    		at struc_window.title,                  dw 0
 10738 000043E1 0000                    		at struc_window.win_attr,               dw 0
 10739 000043E3 0000                    		at struc_window.win_pos,                dw 0
 10740 000043E5 0000                    		at struc_window.win_size,               dw 0
 10741 000043E7 0000                    		at struc_window.parent_win,             dw 0
 10742 000043E9 0000                    		at struc_window.next_win,               dw 0
 10743 000043EB 0000                    		at struc_window.previous_win,           dw 0
 10744 000043ED 2D00                    		at struc_window.act_num,                dw ROOT_WINDOW_ACTION_NUMBER
 10745 000043EF [A344]                  		at struc_window.act_table,              dw main_action_table.root_window
 10746 000043F1 [7124]                  		at struc_window.default_event_handle,   dw window_default_event_handle
 10747 000043F3 [7D24]                  		at struc_window.event_handle,           dw window_event_handle
 10748 000043F5 [2614]                  		at struc_window.draw_body_proc,         dw root_window_draw_body_proc
 10749                                  		iend
 10750                                  
 10751                                  .boot_menu      istruc struc_menu_box
 10752 000043F7 F400                    		at struc_window.flags,                  dw WINFLAG_FRAMED | MENUFLAG_SCROLLBAR | MENUFLAG_SINK_UPPER | MENUFLAG_SINK_WIDTH | MENUFLAG_SINK_BOTTOM
 10753 000043F9 [5246]                  		at struc_window.title,                  dw str_idx.boot_menu_title
 10754 000043FB F13F                    		at struc_window.win_attr,               dw 0x3FF1
 10755 000043FD 0000                    		at struc_window.win_pos,                dw 0
 10756 000043FF 0000                    		at struc_window.win_size,               dw 0
 10757 00004401 [DD43]                  		at struc_window.parent_win,             dw .root_window
 10758 00004403 0000                    		at struc_window.next_win,               dw 0
 10759 00004405 0000                    		at struc_window.previous_win,           dw 0
 10760 00004407 1300                    		at struc_window.act_num,                dw BOOT_MENU_ACTION_NUMBER
 10761 00004409 [8445]                  		at struc_window.act_table,              dw main_action_table.boot_menu
 10762 0000440B [4721]                  		at struc_window.default_event_handle,   dw menubox_default_event_handle
 10763 0000440D [7D24]                  		at struc_window.event_handle,           dw window_event_handle
 10764 0000440F [0A20]                  		at struc_window.draw_body_proc,         dw menubox_draw_body_proc
 10765 00004411 [5446]                  		at struc_menu_box.menu_header,          dw str_idx.boot_menu_header
 10766 00004413 1F                      		at struc_menu_box.menu_header_attr,     db 0x1F
 10767 00004414 707C                    		at struc_menu_box.menu_norm_attr,       dw 0x7C70
 10768 00004416 0F0C                    		at struc_menu_box.menu_focus_attr,      dw 0x0C0F
 10769 00004418 0000                                    at struc_menu_box.menu_area_pos,        dw 0
 10770 0000441A 0000                                    at struc_menu_box.menu_area_size,       dw 0
 10771 0000441C 3F                      		at struc_menu_box.scrollbar_attr,       db 0x3F
 10772 0000441D 00                      		at struc_menu_box.items_num,            db 0
 10773 0000441E 00                      		at struc_menu_box.focus_item,           db 0
 10774 0000441F 00                      		at struc_menu_box.first_visible_item,   db 0
 10775 00004420 [A415]                  		at struc_menu_box.item_str_proc,        dw boot_menu_item_str_proc
 10776                                  		iend
 10777                                  
 10778                                  .main_menu      istruc struc_menu_box
 10779 00004422 0400                    		at struc_window.flags,                  dw WINFLAG_FRAMED
 10780 00004424 [CA46]                  		at struc_window.title,                  dw str_idx.main_menu_title
 10781 00004426 F130                    		at struc_window.win_attr,               dw 0x30F1
 10782 00004428 0101                    		at struc_window.win_pos,                dw 0x0101
 10783 0000442A 000D                    		at struc_window.win_size,               db 0, MAIN_MENU_ITEMS_NUMBER+2
 10784 0000442C [F743]                  		at struc_window.parent_win,             dw .boot_menu
 10785 0000442E 0000                    		at struc_window.next_win,               dw 0
 10786 00004430 0000                    		at struc_window.previous_win,           dw 0
 10787 00004432 0B00                    		at struc_window.act_num,                dw MAIN_MENU_ACTION_NUMBER
 10788 00004434 [A344]                  		at struc_window.act_table,              dw main_action_table.main_menu
 10789 00004436 [4721]                  		at struc_window.default_event_handle,   dw menubox_default_event_handle
 10790 00004438 [7D24]                  		at struc_window.event_handle,           dw window_event_handle
 10791 0000443A [0A20]                  		at struc_window.draw_body_proc,	        dw menubox_draw_body_proc
 10792 0000443C 0000                    		at struc_menu_box.menu_header,          dw 0
 10793 0000443E 3F                      		at struc_menu_box.menu_header_attr,     db 0x3F
 10794 0000443F 303C                    		at struc_menu_box.menu_norm_attr,       dw 0x3C30
 10795 00004441 070C                    		at struc_menu_box.menu_focus_attr,      dw 0x0C07
 10796 00004443 0000                                    at struc_menu_box.menu_area_pos,        dw 0
 10797 00004445 0000                                    at struc_menu_box.menu_area_size,       dw 0
 10798 00004447 3F                      		at struc_menu_box.scrollbar_attr,       db 0x3F
 10799 00004448 0B                      		at struc_menu_box.items_num,            db MAIN_MENU_ITEMS_NUMBER
 10800 00004449 00                      		at struc_menu_box.focus_item,           db 0
 10801 0000444A 00                      		at struc_menu_box.first_visible_item,   db 0
 10802 0000444B [BE15]                  		at struc_menu_box.item_str_proc,        dw main_menu_item_str_proc
 10803                                  		iend
 10804                                  
 10805                                  .record_menu    istruc struc_menu_box
 10806 0000444D 0400                    		at struc_window.flags,                  dw WINFLAG_FRAMED
 10807 0000444F [E246]                  		at struc_window.title,                  dw str_idx.record_menu_title
 10808 00004451 F130                    		at struc_window.win_attr,               dw 0x30F1
 10809 00004453 0202                    		at struc_window.win_pos,                dw 0x0202
 10810 00004455 0012                    		at struc_window.win_size,               db 0, RECORD_MENU_ITEMS_NUMBER+2
 10811 00004457 [F743]                  		at struc_window.parent_win,             dw .boot_menu
 10812 00004459 0000                    		at struc_window.next_win,               dw 0
 10813 0000445B 0000                    		at struc_window.previous_win,           dw 0
 10814 0000445D 1000                    		at struc_window.act_num,                dw RECORD_MENU_ACTION_NUMBER
 10815 0000445F [DA44]                  		at struc_window.act_table,              dw main_action_table.record_menu
 10816 00004461 [4721]                  		at struc_window.default_event_handle,   dw menubox_default_event_handle
 10817 00004463 [7D24]                  		at struc_window.event_handle,           dw window_event_handle
 10818 00004465 [0A20]                  		at struc_window.draw_body_proc,	        dw menubox_draw_body_proc
 10819 00004467 0000                    		at struc_menu_box.menu_header,          dw 0
 10820 00004469 3F                      		at struc_menu_box.menu_header_attr,     db 0x3F
 10821 0000446A 303C                    		at struc_menu_box.menu_norm_attr,       dw 0x3C30
 10822 0000446C 070C                    		at struc_menu_box.menu_focus_attr,      dw 0x0C07
 10823 0000446E 0000                                    at struc_menu_box.menu_area_pos,        dw 0
 10824 00004470 0000                                    at struc_menu_box.menu_area_size,       dw 0
 10825 00004472 3F                      		at struc_menu_box.scrollbar_attr,       db 0x3F
 10826 00004473 10                      		at struc_menu_box.items_num,            db RECORD_MENU_ITEMS_NUMBER
 10827 00004474 00                      		at struc_menu_box.focus_item,           db 0
 10828 00004475 00                      		at struc_menu_box.first_visible_item,   db 0
 10829 00004476 [C315]                  		at struc_menu_box.item_str_proc,        dw record_menu_item_str_proc
 10830                                  		iend
 10831                                  
 10832                                  .sys_menu       istruc struc_menu_box
 10833 00004478 0400                    		at struc_window.flags,                  dw WINFLAG_FRAMED
 10834 0000447A [0447]                  		at struc_window.title,                  dw str_idx.sys_menu_title
 10835 0000447C F130                    		at struc_window.win_attr,               dw 0x30F1
 10836 0000447E 0303                    		at struc_window.win_pos,                dw 0x0303
 10837 00004480 0014                    		at struc_window.win_size,               db 0, SYS_MENU_ITEMS_NUMBER+2
 10838 00004482 [F743]                  		at struc_window.parent_win,             dw .boot_menu
 10839 00004484 0000                    		at struc_window.next_win,               dw 0
 10840 00004486 0000                    		at struc_window.previous_win,           dw 0
 10841 00004488 1000                    		at struc_window.act_num,                dw SYS_MENU_ACTION_NUMBER
 10842 0000448A [2A45]                  		at struc_window.act_table,              dw main_action_table.sys_menu
 10843 0000448C [4721]                  		at struc_window.default_event_handle,   dw menubox_default_event_handle
 10844 0000448E [7D24]                  		at struc_window.event_handle,           dw window_event_handle
 10845 00004490 [0A20]                  		at struc_window.draw_body_proc,         dw menubox_draw_body_proc
 10846 00004492 0000                    		at struc_menu_box.menu_header,          dw 0
 10847 00004494 3F                      		at struc_menu_box.menu_header_attr,     db 0x3F
 10848 00004495 303C                    		at struc_menu_box.menu_norm_attr,       dw 0x3C30
 10849 00004497 070C                    		at struc_menu_box.menu_focus_attr,      dw 0x0C07
 10850 00004499 0000                                    at struc_menu_box.menu_area_pos,        dw 0
 10851 0000449B 0000                                    at struc_menu_box.menu_area_size,       dw 0
 10852 0000449D 3F                      		at struc_menu_box.scrollbar_attr,       db 0x3F
 10853 0000449E 12                      		at struc_menu_box.items_num,            db SYS_MENU_ITEMS_NUMBER
 10854 0000449F 00                      		at struc_menu_box.focus_item,           db 0
 10855 000044A0 00                      		at struc_menu_box.first_visible_item,   db 0
 10856 000044A1 [C815]                  		at struc_menu_box.item_str_proc,        dw sys_menu_item_str_proc
 10857                                  		iend
 10858                                  
 10859                                  .end_of_windows_data:
 10860                                  
 10861                                  ;=============================================================================
 10862                                  ; Action table
 10863                                  ;=============================================================================
 10864                                  main_action_table:
 10865                                  
 10866                                  .root_window:
 10867                                  
 10868                                  .main_menu:
 10869 000044A3 08                              db  ACTFLAG_REDRAW_SCR
 10870 000044A4 003B                            dw  kbF1
 10871 000044A6 [F00A]                          dw  main_show_help
 10872                                  
 10873 000044A8 08                              db  ACTFLAG_REDRAW_SCR
 10874 000044A9 005E                            dw  kbCtrlF1
 10875 000044AB [060B]                          dw  main_show_about
 10876                                  
 10877 000044AD 88                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_SECURITY
 10878 000044AE 003C                            dw  kbF2
 10879 000044B0 [510B]                          dw  main_save_changes
 10880                                  
 10881 000044B2 54                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_AUTH_RECORD | ACTFLAG_CHK_RECNUM
 10882 000044B3 0000                            dw  0
 10883 000044B5 [D40D]                          dw  main_boot_it
 10884                                  
 10885 000044B7 04                              db  ACTFLAG_REDRAW_WIN
 10886 000044B8 0000                            dw  0
 10887 000044BA [9E11]                          dw  main_boot_prev_in_menu
 10888                                  
 10889 000044BC 00                              db  0
 10890 000044BD 0000                            dw  0
 10891 000044BF 0000                            dw  0
 10892                                  
 10893 000044C1 08                              db  ACTFLAG_REDRAW_SCR
 10894 000044C2 0013                            dw  kbAltR
 10895 000044C4 [230B]                          dw  main_show_record_menu
 10896                                  
 10897 000044C6 08                              db  ACTFLAG_REDRAW_SCR
 10898 000044C7 001F                            dw  kbAltS
 10899 000044C9 [2A0B]                          dw  main_show_sys_menu
 10900                                  
 10901 000044CB 00                              db  0
 10902 000044CC 0000                            dw  0
 10903 000044CE 0000                            dw  0
 10904                                  
 10905 000044D0 24                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_AUTH_ROOT
 10906 000044D1 1110                            dw  kbCtrlQ
 10907 000044D3 [FF0D]                          dw  main_return_to_bios
 10908                                  
 10909 000044D5 00                              db  0
 10910 000044D6 008A                            dw  kbCtrlF12
 10911 000044D8 [7B11]                          dw  main_power_off
 10912                                  
 10913                                  .end_of_main_menu
 10914                                  
 10915                                  .record_menu:
 10916 000044DA 04                              db  ACTFLAG_REDRAW_WIN
 10917 000044DB 2F35                            dw  kbSlash
 10918 000044DD [8710]                          dw  main_show_record_info
 10919                                  
 10920 000044DF D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 10921 000044E0 003D                            dw  kbF3
 10922 000044E2 [670B]                          dw  main_change_name
 10923                                  
 10924 000044E4 D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 10925 000044E5 0043                            dw  kbF9
 10926 000044E7 [EE0B]                          dw  main_change_record_password
 10927                                  
 10928 000044E9 D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 10929 000044EA 131F                            dw  kbCtrlS
 10930 000044EC [D00E]                          dw  main_toggle_schedule
 10931                                  
 10932 000044EE D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 10933 000044EF 0B25                            dw  kbCtrlK
 10934 000044F1 [9E0F]                          dw  main_toggle_keystrokes
 10935                                  
 10936 000044F3 00                              db  0
 10937 000044F4 0000                            dw  0
 10938 000044F6 0000                            dw  0
 10939                                  
 10940 000044F8 08                              db  ACTFLAG_REDRAW_SCR 
 10941 000044F9 003E                            dw  kbF4
 10942 000044FB [770C]                          dw  main_mark_active
 10943                                  
 10944 000044FD 08                              db  ACTFLAG_REDRAW_SCR
 10945 000044FE 003F                            dw  kbF5
 10946 00004500 [CF0C]                          dw  main_toggle_hidden
 10947                                  
 10948 00004502 08                              db  ACTFLAG_REDRAW_SCR
 10949 00004503 0040                            dw  kbF6
 10950 00004505 [4B0C]                          dw  main_toggle_auto_active
 10951                                  
 10952 00004507 08                              db  ACTFLAG_REDRAW_SCR
 10953 00004508 0041                            dw  kbF7
 10954 0000450A [610C]                          dw  main_toggle_auto_hide
 10955                                  
 10956 0000450C 08                              db  ACTFLAG_REDRAW_SCR
 10957 0000450D 182D                            dw  kbCtrlX
 10958 0000450F [B20E]                          dw  main_toggle_swapid
 10959                                  
 10960 00004511 00                              db  0
 10961 00004512 0000                            dw  0
 10962 00004514 0000                            dw  0
 10963                                  
 10964 00004516 D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 10965 00004517 0420                            dw  kbCtrlD
 10966 00004519 [F70C]                          dw  main_delete_record
 10967                                  
 10968 0000451B D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 10969 0000451C 1019                            dw  kbCtrlP
 10970 0000451E [0B0E]                          dw  main_dup_record
 10971                                  
 10972 00004520 98                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY
 10973 00004521 1516                            dw  kbCtrlU
 10974 00004523 [600E]                          dw  main_move_record_up
 10975                                  
 10976 00004525 98                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY
 10977 00004526 0E31                            dw  kbCtrlN
 10978 00004528 [2E0E]                          dw  main_move_record_down
 10979                                  
 10980                                  
 10981                                  .end_of_record_menu
 10982                                  
 10983                                  .sys_menu:
 10984 0000452A 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 10985 0000452B 0044                            dw  kbF10
 10986 0000452D [A10B]                          dw  main_change_root_password
 10987                                  
 10988 0000452F A8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT | ACTFLAG_AUTH_SECURITY
 10989 00004530 0067                            dw  kbCtrlF10
 10990 00004532 [8B0B]                          dw  main_login_as_root
 10991                                  
 10992 00004534 88                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_SECURITY
 10993 00004535 0071                            dw  kbAltF10
 10994 00004537 [970B]                          dw  main_change_security_mode
 10995                                  
 10996 00004539 00                              db  0
 10997 0000453A 0000                            dw  0
 10998 0000453C 0000                            dw  0
 10999                                  
 11000 0000453E 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11001 0000453F 0042                            dw  kbF8
 11002 00004541 [310C]                          dw  main_set_default_record
 11003                                  
 11004 00004543 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11005 00004544 005B                            dw  kbShiftF8
 11006 00004546 [410C]                          dw  main_unset_default_record
 11007                                  
 11008 00004548 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11009 00004549 1414                            dw  kbCtrlT
 11010 0000454B [A40D]                          dw  main_set_delay_time
 11011                                  
 11012 0000454D 08                              db  ACTFLAG_REDRAW_SCR
 11013 0000454E 0621                            dw  kbCtrlF
 11014 00004550 [7E11]                          dw  main_change_bootmenu_style
 11015                                  
 11016 00004552 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11017 00004553 0C26                            dw  kbCtrlL
 11018 00004555 [9411]                          dw  main_toggle_rem_last
 11019                                  
 11020 00004557 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11021 00004558 0000                            dw  0
 11022 0000455A [AC11]                          dw  main_toggle_int13ext
 11023                                  
 11024 0000455C 00                              db  0
 11025 0000455D 0000                            dw  0
 11026 0000455F 0000                            dw  0
 11027                                  
 11028 00004561 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11029 00004562 0917                            dw  kbCtrlI
 11030 00004564 [490D]                          dw  main_rescan_all_records
 11031                                  
 11032 00004566 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11033 00004567 0823                            dw  kbCtrlH
 11034 00004569 [500D]                          dw  main_rescan_all_partitions
 11035                                  
 11036 0000456B 08                              db  ACTFLAG_REDRAW_SCR
 11037 0000456C 0000                            dw  0
 11038 0000456E [C911]                          dw  main_set_cdrom_ioports
 11039                                  
 11040 00004570 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11041 00004571 0000                            dw  0
 11042 00004573 [3F12]                          dw  main_set_y2k_year
 11043                                  
 11044 00004575 00                              db  0
 11045 00004576 0000                            dw  0
 11046 00004578 0000                            dw  0
 11047                                  
 11048                                          ;db  ACTFLAG_REDRAW_SCR
 11049                                          ;dw  0
 11050                                          ;dw  main_install_sbm
 11051                                  
 11052                                          ;db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11053                                          ;dw  0
 11054                                          ;dw  main_uninstall_sbm
 11055                                  
 11056                                  .end_of_sys_menu
 11057                                  
 11058 0000457A 08                              db  ACTFLAG_REDRAW_SCR
 11059 0000457B 01F4                            dw  EVENT_REDRAW_ROOT
 11060 0000457D 0000                            dw  0
 11061                                  
 11062 0000457F 18                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM
 11063 00004580 02F4                            dw  EVENT_BOOT_DEFAULT
 11064 00004582 [7D17]                          dw  main_boot_default
 11065                                  
 11066                                  .end_of_root_window
 11067                                          
 11068                                  .boot_menu:
 11069 00004584 08                              db  ACTFLAG_REDRAW_SCR
 11070 00004585 0098                            dw  kbEnhAltUp
 11071 00004587 [E720]                          dw  menubox_focus_up
 11072                                  
 11073 00004589 08                              db  ACTFLAG_REDRAW_SCR
 11074 0000458A 00A0                            dw  kbEnhAltDown
 11075 0000458C [1321]                          dw  menubox_focus_down
 11076                                  
 11077 0000458E 04                              db  ACTFLAG_REDRAW_WIN
 11078 0000458F 3F35                            dw  kbQuestion
 11079 00004591 [8710]                          dw  main_show_record_info
 11080                                  
 11081 00004593 D4                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11082 00004594 003D                            dw  kbF3
 11083 00004596 [670B]                          dw  main_change_name
 11084                                  
 11085 00004598 D4                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11086 00004599 0043                            dw  kbF9
 11087 0000459B [EE0B]                          dw  main_change_record_password
 11088                                  
 11089 0000459D D4                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11090 0000459E 131F                            dw  kbCtrlS
 11091 000045A0 [D00E]                          dw  main_toggle_schedule
 11092                                  
 11093 000045A2 D4                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11094 000045A3 0B25                            dw  kbCtrlK
 11095 000045A5 [9E0F]                          dw  main_toggle_keystrokes
 11096                                  
 11097 000045A7 D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11098 000045A8 003E                            dw  kbF4
 11099 000045AA [770C]                          dw  main_mark_active
 11100                                  
 11101 000045AC D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11102 000045AD 003F                            dw  kbF5
 11103 000045AF [CF0C]                          dw  main_toggle_hidden
 11104                                  
 11105 000045B1 D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11106 000045B2 0040                            dw  kbF6
 11107 000045B4 [4B0C]                          dw  main_toggle_auto_active
 11108                                  
 11109 000045B6 D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11110 000045B7 0041                            dw  kbF7
 11111 000045B9 [610C]                          dw  main_toggle_auto_hide
 11112                                  
 11113 000045BB D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11114 000045BC 182D                            dw  kbCtrlX
 11115 000045BE [B20E]                          dw  main_toggle_swapid
 11116                                  
 11117 000045C0 D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11118 000045C1 0420                            dw  kbCtrlD
 11119 000045C3 [F70C]                          dw  main_delete_record
 11120                                  
 11121 000045C5 D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11122 000045C6 1019                            dw  kbCtrlP
 11123 000045C8 [0B0E]                          dw  main_dup_record
 11124                                  
 11125 000045CA 02                              db  ACTFLAG_REDRAW_BODY
 11126 000045CB 1516                            dw  kbCtrlU
 11127 000045CD [600E]                          dw  main_move_record_up
 11128                                  
 11129 000045CF 02                              db  ACTFLAG_REDRAW_BODY
 11130 000045D0 0E31                            dw  kbCtrlN
 11131 000045D2 [2E0E]                          dw  main_move_record_down
 11132                                  
 11133 000045D4 54                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_AUTH_RECORD | ACTFLAG_CHK_RECNUM
 11134 000045D5 0D1C                            dw  kbEnter
 11135 000045D7 [D40D]                          dw  main_boot_it
 11136                                  
 11137 000045D9 14                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_CHK_RECNUM
 11138 000045DA 1B01                            dw  kbEsc
 11139 000045DC [7D17]                          dw  main_boot_default
 11140                                  
 11141 000045DE 08                              db  ACTFLAG_REDRAW_SCR
 11142 000045DF 08F2                            dw  EVENT_ALT_RELEASE
 11143 000045E1 [1C0B]                          dw  main_show_main_menu
 11144                                  .end_of_boot_menu
 11145                                  
 11146                                  ;END OF KERNEL
 11147 000045E3 55AA                            dw BR_GOOD_FLAG
 11148                                  
 11149                                  end_of_kernel:
 11150                                  ;=============================================================================
 11151                                  ;theme data
 11152                                  ;=============================================================================
 11153                                  theme_start:
 11154                                  
 11155                                  
 11156                                  %ifdef THEME_ZH
 11157                                  %include "themes/theme-zh.asm"
 11158                                  %elifdef THEME_DE
 11159                                  %include "themes/theme-de.asm"
 11160                                  %elifdef THEME_HU
 11161                                  %include "themes/theme-hu.asm"
 11162                                  %elifdef THEME_RU
 11163                                  %include "themes/theme-ru.asm"
 11164                                  %elifdef THEME_CZ
 11165                                  %include "themes/theme-cz.asm"
 11166                                  %elifdef THEME_ES
 11167                                  %include "themes/theme-es.asm"
 11168                                  %elifdef THEME_FR
 11169                                  %include "themes/theme-fr.asm"
 11170                                  %elifdef THEME_PT
 11171                                  %include "themes/theme-pt.asm"
 11172                                  %else
 11173                                  %include "themes/theme-us.asm"
 11174                              <1> ; asmsyntax=nasm
 11175                              <1> ;
 11176                              <1> ; theme-us.asm
 11177                              <1> ;
 11178                              <1> ; English theme data for Smart Boot Manager
 11179                              <1> ;
 11180                              <1> ; Copyright (C) 2001, Suzhe. See file COPYING for details.
 11181                              <1> ;
 11182                              <1> 
 11183                              <1> ; some constant used in this theme.
 11184                              <1> 
 11185                              <1> ; PLEASE DO NOT CHANGE THESE, UNLESS YOU KNOW WHAT YOU ARE DOING!
 11186                              <1> %define SBMT_MAGIC      0x544D4253         ; magic number of
 11187                              <1>                                            ; Smart Boot Manager theme.
 11188                              <1> %define SBMT_VERSION    0x035A             ; version of theme ( 3.90 ).
 11189                              <1> 
 11190                              <1> start_font              equ     219
 11191                              <1> brand_char1             equ     start_font
 11192                              <1> brand_char2             equ     start_font+1
 11193                              <1> brand_char3             equ     start_font+2
 11194                              <1> brand_char4             equ     start_font+3
 11195                              <1> 
 11196                              <1> start_of_theme:
 11197                              <1> 
 11198                              <1> ;!!! PLEASE DON NOT CHANGE THE SIZE AND ORDER OF FOLLOWING DATA !!!
 11199                              <1> 
 11200                              <1> ;=============================================================================
 11201                              <1> ;the header of Smart Boot Manager theme ( 16 bytes )
 11202                              <1> ;=============================================================================
 11203 000045E5 53424D54            <1> theme_magic             dd  SBMT_MAGIC ; magic number = 'SBMT', 4 bytes.
 11204                              <1>                                        ; it's abbr. of 'Smart Boot Manager Theme'
 11205 000045E9 0000                <1>                         dw  0          ;
 11206 000045EB 656E2D555300        <1> theme_lang              db  'en-US',0  ; language of this theme, 6 bytes.
 11207 000045F1 5A03                <1> theme_version           dw  SBMT_VERSION ; version, high byte is major version,
 11208                              <1>                                          ; low byte is minor version. should be
 11209                              <1>                                          ; equal to the version of Smart Boot Manager.
 11210 000045F3 AA0F                <1> theme_size              dw  (end_of_theme - start_of_theme)
 11211                              <1>                                          ; size of the theme (bytes).
 11212                              <1> 
 11213                              <1> ;=============================================================================
 11214                              <1> ; fix size data and index tables of variable size data
 11215                              <1> ;=============================================================================
 11216                              <1> 
 11217 000045F5 FF                  <1> video_mode              db  0xff        ; 0 = 90x25, 0xff = 80x25
 11218                              <1>                                         ; do not use other value!!!
 11219                              <1> 
 11220 000045F6 10                  <1> keyboard_type           db  0x10        ; = 0x10 means use enhanced keyboard
 11221                              <1>                                         ; = 0x00 means use normal keyboard
 11222                              <1>                                         ; CAUTION: cannot use other value!!!
 11223                              <1> 
 11224 000045F7 01                  <1> show_date_method        db  1           ; the method of show date:
 11225                              <1>                                         ; 0 = don't show date
 11226                              <1>                                         ; 1 = day mm-dd-yyyy
 11227                              <1>                                         ; 2 = day yyyy-mm-dd
 11228                              <1>                                         ; 3 = day dd-mm-yyyy
 11229                              <1> 
 11230 000045F8 01                  <1> show_time_method        db  1           ; the method of show time:
 11231                              <1>                                         ; 0 = don't show time
 11232                              <1>                                         ; 1 = hh:mm (24 hours)
 11233                              <1> 
 11234 000045F9 79                  <1> yes_key_lower	        db  'y'
 11235 000045FA 59                  <1> yes_key_upper	        db  'Y'
 11236                              <1>  
 11237                              <1> ; position of screen elements, low byte = column, high byte = row
 11238                              <1> position:
 11239 000045FB FF00                <1> .brand                  dw  0x00FF      ; start position of brand icon
 11240                              <1>                                         ; low = column, high = row
 11241                              <1>                                         ; if low = 255 then brand will be
 11242                              <1>                                         ; right justify in the screen.
 11243 000045FD 3700                <1> .date                   dw  0x0037
 11244                              <1> 
 11245 000045FF 4600                <1> .time                   dw  0x0046
 11246                              <1> 
 11247                              <1> ; size of screen elements
 11248                              <1> size:
 11249 00004601 01                  <1> .copyright              db  1           ; number of rows used by copyright info
 11250 00004602 01                  <1> .hint                   db  1           ; number of rows used by hint info
 11251 00004603 05                  <1> .box_width              db  5           ; the minimal width of info/error/input box
 11252                              <1>                                         ; (when no info string)
 11253 00004604 04                  <1> .box_height             db  4           ; the minimal height of info/error/input box
 11254                              <1>                                         ; (when no info string)
 11255 00004605 0D                  <1> .boot_menu_win_height   db  13          ; the height of the boot menu window
 11256 00004606 0A                  <1> .list_box_win_height    db  10          ; the height of the list box window
 11257                              <1> 
 11258                              <1> ;Black          = 0
 11259                              <1> ;Blue           = 1
 11260                              <1> ;Green          = 2
 11261                              <1> ;Cyan           = 3
 11262                              <1> ;Red            = 4
 11263                              <1> ;Violet         = 5
 11264                              <1> ;Yellow (brown) = 6
 11265                              <1> ;White          = 7
 11266                              <1> ;Black (gray)   = 8
 11267                              <1> ;Intense blue   = 9
 11268                              <1> ;Intense green  = a
 11269                              <1> ;Intense cyan   = b
 11270                              <1> ;Intense red    = c
 11271                              <1> ;Intense violet = d
 11272                              <1> ;Intense yellow = e
 11273                              <1> ;Intense white  = f
 11274                              <1> 
 11275                              <1> ; color of screen elements
 11276                              <1> ; high 4 bits is background color, low 4 bits is foreground color
 11277                              <1> 
 11278                              <1> color:
 11279 00004607 70                  <1> .win_title_inactive     db  0x70        ; title attribute for inactive window.
 11280                              <1> 
 11281                              <1> .boot_menu:
 11282 00004608 3F                  <1> .boot_menu_frame        db  0x3F        ; attributes of boot menu window
 11283 00004609 F1                  <1> .boot_menu_title        db  0xF1        ;
 11284 0000460A 1F                  <1> .boot_menu_header       db  0x1F        ;
 11285 0000460B 707C                <1> .boot_menu_normal       dw  0x7C70      ;
 11286 0000460D 0F0C                <1> .boot_menu_focus        dw  0x0C0F      ; 
 11287 0000460F 3F                  <1> .boot_menu_scrollbar    db  0x3F        ; scroll bar
 11288                              <1> 
 11289                              <1> .cmd_menu:
 11290 00004610 30                  <1> .cmd_menu_frame         db  0x30        ;
 11291 00004611 F1                  <1> .cmd_menu_title         db  0xF1        ; the colors used 
 11292 00004612 3F                  <1> .cmd_menu_header        db  0x3F        ;
 11293 00004613 303C                <1> .cmd_menu_normal        dw  0x3C30      ; in command menu
 11294 00004615 070C                <1> .cmd_menu_focus         dw  0x0C07      ;
 11295 00004617 3F                  <1> .cmd_menu_scrollbar     db  0x3F        ;
 11296                              <1> 
 11297                              <1> .list_box:
 11298 00004618 30                  <1> .list_box_frame         db  0x30        ;
 11299 00004619 F1                  <1> .list_box_title         db  0xF1        ; list box
 11300 0000461A 1F                  <1> .list_box_header        db  0x1F        ;
 11301 0000461B 303C                <1> .list_box_normal        dw  0x3C30      ;
 11302 0000461D 070C                <1> .list_box_focus         dw  0x0C07      ;
 11303 0000461F 3F                  <1> .list_box_scrollbar     db  0x3F        ;
 11304                              <1> 
 11305                              <1> .input_box:
 11306 00004620 B0                  <1> .input_box_frame        db  0xB0        ;
 11307 00004621 F1                  <1> .input_box_title        db  0xF1        ; input box
 11308 00004622 B0                  <1> .input_box_msg          db  0xB0        ;
 11309                              <1> 
 11310                              <1> .error_box:
 11311 00004623 CF                  <1> .error_box_frame        db  0xCF        ;
 11312 00004624 F1                  <1> .error_box_title        db  0xF1        ; error box
 11313 00004625 CF                  <1> .error_box_msg          db  0xCF        ;
 11314                              <1> 
 11315                              <1> .info_box:
 11316 00004626 B0                  <1> .info_box_frame         db  0xB0        ;
 11317 00004627 F1                  <1> .info_box_title         db  0xF1        ; info box
 11318 00004628 B0                  <1> .info_box_msg           db  0xB0        ;
 11319                              <1> 
 11320                              <1> .help_win:
 11321 00004629 3F                  <1> .help_win_frame         db  0x3F        ;
 11322 0000462A F1                  <1> .help_win_title         db  0xF1        ; help window
 11323 0000462B 30                  <1> .help_msg               db  0x30        ;
 11324                              <1> 
 11325                              <1> .about_win:
 11326 0000462C 3F                  <1> .about_win_frame        db  0x3F        ;
 11327 0000462D F1                  <1> .about_win_title        db  0xF1        ; about window
 11328 0000462E 3E                  <1> .about_msg              db  0x3E        ;
 11329                              <1> 
 11330 0000462F 70                  <1> .delay_time             db  0x70        ; delay time
 11331 00004630 00                  <1> .background             db  0x00        ; background (if no background icon)
 11332 00004631 7074                <1> .copyright              dw  0x7470      ; copyright string
 11333 00004633 7074                <1> .hint                   dw  0x7470      ; hint string
 11334 00004635 7C                  <1> .knl_flags              db  0x7C        ; the color of kernal fags.
 11335 00004636 70                  <1> .knl_drvid              db  0x70        ; the color of kernel drive id.
 11336 00004637 70                  <1> .date                   db  0x70        ; color of date string
 11337 00004638 70                  <1> .time                   db  0x70        ; color of time string
 11338                              <1> 
 11339                              <1> ; icon data
 11340                              <1> icon:
 11341 00004639 0401                <1> .brand_size         dw  0x0104              ; the size of brand icon,
 11342                              <1>                                             ; high byte = row, low byte = col.
 11343 0000463B [4247]              <1> .brand              dw  icon_data.brand     ; offset of brand icon data, set to
 11344                              <1>                                             ; zero if no brand icon.
 11345                              <1> 
 11346 0000463D 0401                <1> .background_size    dw  0x0104              ; the size of background icon,
 11347                              <1>                                             ; high byte = row, low byte = col.
 11348 0000463F [4A47]              <1> .background         dw  icon_data.background; offset of background icon data,
 11349                              <1>                                             ; set to zero if no background icon.
 11350                              <1> 
 11351                              <1> ; font data
 11352                              <1> font:
 11353 00004641 0400                <1> .number             dw  (font_data.end-font_data)/17
 11354                              <1>                                             ; number of chars to be replaced,
 11355                              <1>                                             ; should <= (256 - start).
 11356 00004643 [5247]              <1> .data               dw  font_data           ; offset of font set data, set to
 11357                              <1>                                             ; zero if no font to be replaced.
 11358                              <1> 
 11359                              <1> ; chars used by window frame
 11360                              <1> frame_char:
 11361 00004645 20                  <1> .top                db     0x20            ; top horizontal
 11362 00004646 CD                  <1> .bottom             db     0xCD            ; bottom horiztontal
 11363 00004647 BA                  <1> .left               db     0xBA            ; left vertical
 11364 00004648 BA                  <1> .right              db     0xBA            ; right vertical
 11365 00004649 C9                  <1> .tl_corner          db     0xC9            ; top left corner
 11366 0000464A BB                  <1> .tr_corner          db     0xBB            ; top right corner
 11367 0000464B C8                  <1> .bl_corner          db     0xC8            ; bottom left corner
 11368 0000464C BC                  <1> .br_corner          db     0xBC            ; bottom right corner
 11369                              <1> 
 11370                              <1> ; how to draw window frame
 11371 0000464D 01                  <1> draw_frame_method   db  1          ; = 0 means draw all frame using frame attr.
 11372                              <1>                                    ; = 1 means draw top horizontal line using
 11373                              <1>                                    ;     title attr.
 11374                              <1>                                    ; = 2 means draw top corner and horizontal
 11375                              <1>                                    ;     line using title attr.
 11376                              <1> 
 11377                              <1> ; keymap data
 11378                              <1> keymap:                                  ; entry of keymap
 11379 0000464E 0000                <1> .number             dw  (keymap_data.end-keymap_data)/4
 11380                              <1>                                            ; number of keymap entries
 11381 00004650 [9647]              <1> .data               dw  keymap_data      ; pointer to keymap
 11382                              <1> 
 11383                              <1> ; index table of strings
 11384                              <1> str_idx:
 11385 00004652 [9647]              <1> .boot_menu_title                dw  string.boot_menu_title
 11386 00004654 [A047]              <1> .boot_menu_header               dw  string.boot_menu_header
 11387 00004656 [AC47]              <1> .boot_menu_header_noflags       dw  string.boot_menu_header_noflags
 11388 00004658 [B447]              <1> .boot_menu_header_nonumber      dw  string.boot_menu_header_nonumber
 11389 0000465A [BD47]              <1> .boot_menu_header_notype        dw  string.boot_menu_header_notype
 11390                              <1> 
 11391 0000465C [C447]              <1> .about              dw  string.about
 11392 0000465E [CA47]              <1> .error              dw  string.error
 11393 00004660 [D047]              <1> .help               dw  string.help
 11394 00004662 [D547]              <1> .info               dw  string.info
 11395 00004664 [E047]              <1> .input              dw  string.input
 11396                              <1> 
 11397 00004666 [E647]              <1> .delay_time         dw  string.delay_time
 11398 00004668 [F347]              <1> .name               dw  string.name
 11399 0000466A [FA47]              <1> .new_root_passwd    dw  string.new_root_passwd
 11400 0000466C [FE47]              <1> .root_passwd        dw  string.root_passwd
 11401 0000466E [0E48]              <1> .new_record_passwd  dw  string.new_record_passwd
 11402 00004670 [1248]              <1> .record_passwd      dw  string.record_passwd
 11403 00004672 [2448]              <1> .retype_passwd      dw  string.retype_passwd
 11404 00004674 [3648]              <1> .input_schedule     dw  string.input_schedule
 11405 00004676 [5448]              <1> .input_keystrokes   dw  string.input_keystrokes
 11406 00004678 [A048]              <1> .key_count          dw  string.key_count
 11407 0000467A [AE48]              <1> .io_port            dw  string.io_port
 11408 0000467C [CB48]              <1> .year               dw  string.year
 11409                              <1> 
 11410 0000467E [D248]              <1> .drive_id           dw  string.drive_id
 11411 00004680 [E048]              <1> .part_id            dw  string.part_id
 11412 00004682 [ED48]              <1> .record_type        dw  string.record_type
 11413 00004684 [FC48]              <1> .record_name        dw  string.record_name
 11414 00004686 [0B49]              <1> .auto_active        dw  string.auto_active
 11415 00004688 [1B49]              <1> .active             dw  string.active
 11416 0000468A [2849]              <1> .auto_hide          dw  string.auto_hide
 11417 0000468C [3749]              <1> .hidden             dw  string.hidden
 11418 0000468E [4449]              <1> .swap_drv           dw  string.swap_drv
 11419 00004690 [5349]              <1> .logical            dw  string.logical
 11420 00004692 [6049]              <1> .key_strokes        dw  string.key_strokes
 11421 00004694 [7049]              <1> .password           dw  string.password
 11422 00004696 [7D49]              <1> .schedule           dw  string.schedule
 11423 00004698 [8C49]              <1> .yes                dw  string.yes
 11424 0000469A [9049]              <1> .no                 dw  string.no
 11425                              <1> 
 11426 0000469C [9449]              <1> .copyright          dw  string.copyright
 11427 0000469E [CA49]              <1> .hint               dw  string.hint
 11428 000046A0 [114A]              <1> .about_content      dw  string.about_content
 11429 000046A2 [1A4B]              <1> .help_content       dw  string.help_content
 11430                              <1> 
 11431 000046A4 [AC4E]              <1> .changes_saved      dw  string.changes_saved
 11432 000046A6 [BB4E]              <1> .passwd_changed     dw  string.passwd_changed
 11433 000046A8 [CD4E]              <1> .ask_save_changes   dw  string.ask_save_changes
 11434                              <1> 
 11435 000046AA [E54E]              <1> .wrong_passwd       dw  string.wrong_passwd
 11436 000046AC [F54E]              <1> .disk_error         dw  string.disk_error
 11437 000046AE [044F]              <1> .mark_act_failed    dw  string.mark_act_failed
 11438 000046B0 [184F]              <1> .toggle_hid_failed  dw  string.toggle_hid_failed
 11439 000046B2 [2C4F]              <1> .no_system          dw  string.no_system
 11440 000046B4 [5F4F]              <1> .invalid_record     dw  string.invalid_record
 11441 000046B6 [744F]              <1> .invalid_schedule   dw  string.invalid_schedule
 11442 000046B8 [8B4F]              <1> .inst_confirm       dw  string.inst_confirm
 11443 000046BA [BA4F]              <1> .inst_ok            dw  string.inst_ok
 11444 000046BC [D64F]              <1> .inst_abort         dw  string.inst_abort
 11445 000046BE [EE4F]              <1> .uninst_confirm     dw  string.uninst_confirm
 11446 000046C0 [1450]              <1> .uninst_ok          dw  string.uninst_ok
 11447 000046C2 [4E50]              <1> .uninst_abort       dw  string.uninst_abort
 11448 000046C4 [6850]              <1> .confirm            dw  string.confirm
 11449 000046C6 [9150]              <1> .no_sbml            dw  string.no_sbml
 11450 000046C8 [C950]              <1> .invalid_ioports    dw  string.invalid_ioports
 11451                              <1> 
 11452                              <1> ; command menu str_idx
 11453                              <1> ; main menu
 11454 000046CA [DC50]              <1> .main_menu_title    dw string.main_menu_title
 11455                              <1> .main_menu_strings:
 11456 000046CC [E650]              <1>                     dw string.main_menu_help
 11457 000046CE [FC50]              <1>                     dw string.main_menu_about
 11458 000046D0 [8051]              <1>                     dw string.main_menu_save
 11459 000046D2 [1251]              <1>                     dw string.main_menu_bootit
 11460 000046D4 [1A51]              <1>                     dw string.main_menu_bootprev
 11461 000046D6 [9651]              <1>                     dw string.main_menu_bar
 11462 000046D8 [5851]              <1>                     dw string.main_menu_recordset
 11463 000046DA [6C51]              <1>                     dw string.main_menu_sysset
 11464 000046DC [9651]              <1>                     dw string.main_menu_bar
 11465 000046DE [2C51]              <1>                     dw string.main_menu_quit
 11466 000046E0 [4251]              <1>                     dw string.main_menu_poweroff
 11467                              <1> 
 11468                              <1> ; record settings menu
 11469 000046E2 [AA51]              <1> .record_menu_title  dw string.record_menu_title
 11470                              <1> .record_menu_strings:
 11471 000046E4 [BA51]              <1>                     dw string.record_menu_info
 11472 000046E6 [D351]              <1>                     dw string.record_menu_name
 11473 000046E8 [EC51]              <1>                     dw string.record_menu_passwd
 11474 000046EA [0552]              <1>                     dw string.record_menu_schedule
 11475 000046EC [1E52]              <1>                     dw string.record_menu_keys
 11476 000046EE [1853]              <1>                     dw string.record_menu_bar
 11477 000046F0 [3752]              <1>                     dw string.record_menu_act
 11478 000046F2 [5052]              <1>                     dw string.record_menu_hide
 11479 000046F4 [6952]              <1>                     dw string.record_menu_autoact
 11480 000046F6 [8252]              <1>                     dw string.record_menu_autohide
 11481 000046F8 [9B52]              <1>                     dw string.record_menu_swapdrv
 11482 000046FA [1853]              <1>                     dw string.record_menu_bar
 11483 000046FC [B452]              <1>                     dw string.record_menu_del
 11484 000046FE [CD52]              <1>                     dw string.record_menu_dup
 11485 00004700 [E652]              <1>                     dw string.record_menu_moveup
 11486 00004702 [FF52]              <1>                     dw string.record_menu_movedown
 11487                              <1> 
 11488                              <1> ; system setting menu
 11489 00004704 [2F53]              <1> .sys_menu_title     dw string.sys_menu_title
 11490                              <1> .sys_menu_strings:
 11491 00004706 [3F53]              <1>                     dw string.sys_menu_rootpasswd
 11492 00004708 [6053]              <1>                     dw string.sys_menu_admin
 11493 0000470A [8153]              <1>                     dw string.sys_menu_security
 11494 0000470C [0855]              <1>                     dw string.sys_menu_bar
 11495 0000470E [A253]              <1>                     dw string.sys_menu_setdef
 11496 00004710 [C353]              <1>                     dw string.sys_menu_unsetdef
 11497 00004712 [E453]              <1>                     dw string.sys_menu_delay
 11498 00004714 [0554]              <1>                     dw string.sys_menu_bmstyle
 11499 00004716 [2654]              <1>                     dw string.sys_menu_remlast
 11500 00004718 [4754]              <1>                     dw string.sys_menu_int13ext
 11501 0000471A [0855]              <1>                     dw string.sys_menu_bar
 11502 0000471C [5F54]              <1>                     dw string.sys_menu_rescanall
 11503 0000471E [8054]              <1>                     dw string.sys_menu_rescanpart
 11504 00004720 [A154]              <1>                     dw string.sys_menu_set_ioports
 11505 00004722 [B654]              <1>                     dw string.sys_menu_set_y2kfix
 11506 00004724 [0855]              <1>                     dw string.sys_menu_bar
 11507 00004726 [D254]              <1>                     dw string.sys_menu_inst
 11508 00004728 [EC54]              <1>                     dw string.sys_menu_uninst
 11509                              <1> 
 11510 0000472A [2755]              <1> .cdimg_menu_title   dw string.cdimg_menu_title
 11511 0000472C [3955]              <1> .cdimg_menu_strings dw string.cdimg_menu_noemu
 11512 0000472E [4655]              <1>                     dw string.cdimg_menu_120m
 11513 00004730 [5555]              <1>                     dw string.cdimg_menu_144m
 11514 00004732 [6455]              <1>                     dw string.cdimg_menu_288m
 11515                              <1> 
 11516 00004734 [7355]              <1> .sunday             dw string.sunday
 11517 00004736 [7755]              <1> .monday             dw string.monday
 11518 00004738 [7B55]              <1> .tuesday            dw string.tuesday
 11519 0000473A [7F55]              <1> .wednesday          dw string.wednesday
 11520 0000473C [8355]              <1> .thursday           dw string.thursday
 11521 0000473E [8755]              <1> .friday             dw string.friday
 11522 00004740 [8B55]              <1> .saturday           dw string.saturday
 11523                              <1> 
 11524                              <1> end_of_str_idx:
 11525                              <1> 
 11526                              <1> ;=============================================================================
 11527                              <1> ; variable size data
 11528                              <1> ;=============================================================================
 11529                              <1> 
 11530                              <1> ; icon data
 11531                              <1> 
 11532                              <1> ; two bytes corresponding to a char,
 11533                              <1> ; high byte is color, low byte is char code.
 11534                              <1> icon_data:
 11535                              <1> .brand:
 11536 00004742 DB7CDC7CDD7CDE7C    <1> db  brand_char1, 0x7C, brand_char2, 0x7C, brand_char3, 0x7C, brand_char4, 0x7C
 11537                              <1> 
 11538                              <1> .background:
 11539 0000474A B071B071B071B071    <1> db  0xB0, 0x71, 0xB0, 0x71, 0xB0, 0x71, 0xB0, 0x71
 11540                              <1> 
 11541                              <1> ; font data
 11542                              <1> ; each char occupied 17 bytes
 11543                              <1> ; the first bytes is the ascii code used by this char
 11544                              <1> ; the following 16 bytes is font data
 11545                              <1> ;
 11546                              <1> ; NOTE:
 11547                              <1> ;   Do not replace ascii char 0 and 0x0d, 0x1e and 0x1f,
 11548                              <1> ;   these chars have special use.
 11549                              <1> ;
 11550                              <1> font_data:
 11551 00004752 DB                  <1>   db  start_font
 11552 00004753 00000000070C08080C- <1>   db  0x00,0x00,0x00,0x00,0x07,0x0c,0x08,0x08,0x0c,0x07,0x00,0x00,0x00,0x00,0xfe,0x00
 11553 0000475C 0700000000FE00      <1>
 11554 00004763 DC                  <1>   db  start_font+1
 11555 00004764 01010101FD011F1F03- <1>   db  0x01,0x01,0x01,0x01,0xfd,0x01,0x1f,0x1f,0x03,0xf7,0x0d,0x19,0x31,0x61,0xff,0xff
 11556 0000476D F70D193161FFFF      <1>
 11557 00004774 DD                  <1>   db  start_font+2
 11558 00004775 80808080BF80F0F898- <1>   db  0x80,0x80,0x80,0x80,0xbf,0x80,0xf0,0xf8,0x98,0x9b,0x98,0x98,0x98,0x98,0x9e,0x9e
 11559 0000477E 9B989898989E9E      <1>
 11560 00004785 DE                  <1>   db  start_font+3
 11561 00004786 00000000FF00000000- <1>   db  0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0xf0,0x18,0x08,0x08,0x18,0xf0,0x00
 11562 0000478F F018080818F000      <1>
 11563                              <1> .end:
 11564                              <1> 
 11565                              <1> ; keymap
 11566                              <1> ; each entry has two words, the first is original keycode, 
 11567                              <1> ; the second is new keycode.
 11568                              <1> keymap_data:
 11569                              <1> %ifdef KEYMAP_AZERTY
 11570                              <1>   %include "azerty.kbd"
 11571                              <1> %elifdef KEYMAP_QWERTZ
 11572                              <1>   %include "qwertz.kbd"
 11573                              <1> %elifdef KEYMAP_DVORAK
 11574                              <1>   %include "dvorak.kbd"
 11575                              <1> %elifdef KEYMAP_DVORAK_ANSI
 11576                              <1>   %include "dvorak-ansi.kbd"
 11577                              <1> %endif
 11578                              <1> .end:
 11579                              <1> 
 11580                              <1> ; strings
 11581                              <1> ; all strings are zero ending,
 11582                              <1> ; use 0x0d to break string into multi-lines.
 11583                              <1> string:
 11584                              <1> ; used in main window and boot menu.
 11585 00004796 426F6F74204D656E75- <1> .boot_menu_title                db  'Boot Menu',0
 11586 0000479F 00                  <1>
 11587 000047A0 2020202020466C6167- <1> .boot_menu_header               db  '     Flags  '
 11588 000047A9 732020              <1>
 11589 000047AC 20204E756D626572    <1> .boot_menu_header_noflags       db  '  Number'
 11590 000047B4 202054797065202020  <1> .boot_menu_header_nonumber      db  '  Type   '
 11591 000047BD 20204E616D6500      <1> .boot_menu_header_notype        db  '  Name',0
 11592                              <1> 
 11593                              <1> ; window titles.
 11594 000047C4 41626F757400        <1> .about                          db  'About',0
 11595 000047CA 4572726F7200        <1> .error                          db  'Error',0
 11596 000047D0 48656C7000          <1> .help                           db  'Help',0
 11597 000047D5 496E666F6D6174696F- <1> .info                           db  'Infomation',0
 11598 000047DE 6E00                <1>
 11599 000047E0 496E70757400        <1> .input                          db  'Input',0
 11600                              <1> 
 11601                              <1> ; used in input boxes.
 11602 000047E6 44656C61792074696D- <1> .delay_time                     db  'Delay time: ',0
 11603 000047EF 653A2000            <1>
 11604 000047F3 4E616D653A2000      <1> .name                           db  'Name: ',0
 11605 000047FA 4E657720            <1> .new_root_passwd                db  'New '
 11606 000047FE 526F6F742070617373- <1> .root_passwd                    db  'Root password: ',0
 11607 00004807 776F72643A2000      <1>
 11608 0000480E 4E657720            <1> .new_record_passwd              db  'New '
 11609 00004812 5265636F7264207061- <1> .record_passwd                  db  'Record password: ',0
 11610 0000481B 7373776F72643A2000  <1>
 11611 00004824 526574797065207061- <1> .retype_passwd                  db  'Retype password: ',0
 11612 0000482D 7373776F72643A2000  <1>
 11613 00004836 5363686564756C6520- <1> .input_schedule                 db  'Schedule (hh:mm-hh:mm;days): ',0
 11614 0000483F 2868683A6D6D2D6868- <1>
 11615 00004848 3A6D6D3B6461797329- <1>
 11616 00004851 3A2000              <1>
 11617 00004854 496E707574206B6579- <1> .input_keystrokes               db  'Input keystrokes (max 13 keys)',0x0d
 11618 0000485D 7374726F6B65732028- <1>
 11619 00004866 6D6178203133206B65- <1>
 11620 0000486F 7973290D            <1>
 11621 00004873 5072657373203C5363- <1>                                 db  'Press <Scroll Lock> to finish,',0x0d
 11622 0000487C 726F6C6C204C6F636B- <1>
 11623 00004885 3E20746F2066696E69- <1>
 11624 0000488E 73682C0D            <1>
 11625 00004892 4B657920636F646520- <1>                                 db  'Key code = 0x',0
 11626 0000489B 3D20307800          <1>
 11627 000048A0 0D4B657920636F756E- <1> .key_count                      db  0x0d,'Key count = ',0
 11628 000048A9 74203D2000          <1>
 11629 000048AE 492F4F204261736520- <1> .io_port                        db  'I/O Base Ports (hex1,hex2): ',0
 11630 000048B7 506F72747320286865- <1>
 11631 000048C0 78312C68657832293A- <1>
 11632 000048C9 2000                <1>
 11633 000048CB 596561723A2000      <1> .year                           db  'Year: ',0
 11634                              <1> 
 11635                              <1> ; used in record info box.
 11636 000048D2 202020447269766520- <1> .drive_id                       db       '   Drive ID: ',0
 11637 000048DB 49443A2000          <1>
 11638 000048E0 202020506172742049- <1> .part_id                        db  '   Part ID: ',0
 11639 000048E9 443A2000            <1>
 11640 000048ED 0D5265636F72642054- <1> .record_type                    db  0x0d,'Record Type: ',0
 11641 000048F6 7970653A2000        <1>
 11642 000048FC 0D5265636F7264204E- <1> .record_name                    db  0x0d,'Record Name: ',0
 11643 00004905 616D653A2000        <1>
 11644                              <1> 
 11645 0000490B 0D0D4175746F204163- <1> .auto_active                    db  0x0d,0x0d,'Auto Active: ',0
 11646 00004914 746976653A2000      <1>
 11647 0000491B 202020204163746976- <1> .active                         db  '    Active: ',0
 11648 00004924 653A2000            <1>
 11649 00004928 0D20204175746F2048- <1> .auto_hide                      db  0x0d,'  Auto Hide: ',0
 11650 00004931 6964653A2000        <1>
 11651 00004937 202020204869646465- <1> .hidden                         db  '    Hidden: ',0
 11652 00004940 6E3A2000            <1>
 11653 00004944 0D5377617020647269- <1> .swap_drv                       db  0x0d,'Swap driver: ',0
 11654 0000494D 7665723A2000        <1>
 11655 00004953 2020204C6F67696361- <1> .logical                        db  '   Logical: ',0
 11656 0000495C 6C3A2000            <1>
 11657 00004960 0D0D4B657920537472- <1> .key_strokes                    db  0x0d,0x0d,'Key Strokes: ',0
 11658 00004969 6F6B65733A2000      <1>
 11659 00004970 202050617373776F72- <1> .password                       db  '  Password: ',0
 11660 00004979 643A2000            <1>
 11661 0000497D 0D2020205363686564- <1> .schedule                       db  0x0d,'   Schedule: ',0
 11662 00004986 756C653A2000        <1>
 11663                              <1> 
 11664 0000498C 59657300            <1> .yes                            db  'Yes',0
 11665 00004990 4E6F2000            <1> .no                             db  'No ',0
 11666                              <1> 
 11667                              <1> ; copyright infomation, displayed at the top of the screen.
 11668 00004994 20536D61727420426F- <1> .copyright          db  ' Smart Boot Manager 3.90.1 | Copyright (C) 2001 Suzhe',0
 11669 0000499D 6F74204D616E616765- <1>
 11670 000049A6 7220332E39302E3120- <1>
 11671 000049AF 7C20436F7079726967- <1>
 11672 000049B8 687420284329203230- <1>
 11673 000049C1 30312053757A686500  <1>
 11674                              <1> 
 11675                              <1> ; hint message, displayed at the bottom of the screen.
 11676 000049CA 207E46317E2D48656C- <1> .hint               db  ' ~F1~-Help  ~F2~-Save  ~F3~-Rename  ~F4~-Active  ~F5~-Hide  ~Tab~-Menu',0
 11677 000049D3 7020207E46327E2D53- <1>
 11678 000049DC 61766520207E46337E- <1>
 11679 000049E5 2D52656E616D652020- <1>
 11680 000049EE 7E46347E2D41637469- <1>
 11681 000049F7 766520207E46357E2D- <1>
 11682 00004A00 4869646520207E5461- <1>
 11683 00004A09 627E2D4D656E7500    <1>
 11684                              <1> 
 11685                              <1> ; about infomation.
 11686 00004A11 202020202020202020- <1> .about_content      db  '           Smart Boot Manager 3.90.1',0x0d
 11687 00004A1A 2020536D6172742042- <1>
 11688 00004A23 6F6F74204D616E6167- <1>
 11689 00004A2C 657220332E39302E31- <1>
 11690 00004A35 0D                  <1>
 11691 00004A36 2020436F7079726967- <1>                     db  '  Copyright (C) 2001 Suzhe <su_zhe@sina.com>',0x0d,0x0d
 11692 00004A3F 687420284329203230- <1>
 11693 00004A48 30312053757A686520- <1>
 11694 00004A51 3C73755F7A68654073- <1>
 11695 00004A5A 696E612E636F6D3E0D- <1>
 11696 00004A63 0D                  <1>
 11697 00004A64 205468697320697320- <1>                     db  ' This is free software, you can redistribute',0x0d
 11698 00004A6D 6672656520736F6674- <1>
 11699 00004A76 776172652C20796F75- <1>
 11700 00004A7F 2063616E2072656469- <1>
 11701 00004A88 73747269627574650D  <1>
 11702 00004A91 2020697420616E642F- <1>                     db  '  it and/or modify it under the terms of the',0x0d
 11703 00004A9A 6F72206D6F64696679- <1>
 11704 00004AA3 20697420756E646572- <1>
 11705 00004AAC 20746865207465726D- <1>
 11706 00004AB5 73206F66207468650D  <1>
 11707 00004ABE 2020202020474E5520- <1>                     db  '     GNU General Public License version 2.',0x0d,0x0d
 11708 00004AC7 47656E6572616C2050- <1>
 11709 00004AD0 75626C6963204C6963- <1>
 11710 00004AD9 656E73652076657273- <1>
 11711 00004AE2 696F6E20322E0D0D    <1>
 11712 00004AEA 546869732070726F67- <1>                     db  'This program comes with ABSOLUTELY NO WARRANTY!',0
 11713 00004AF3 72616D20636F6D6573- <1>
 11714 00004AFC 207769746820414253- <1>
 11715 00004B05 4F4C5554454C59204E- <1>
 11716 00004B0E 4F2057415252414E54- <1>
 11717 00004B17 592100              <1>
 11718                              <1> 
 11719                              <1> ; help infomation.
 11720                              <1> .help_content:
 11721 00004B1A 202020202020463120- <1>         db '      F1 = Help                  Ctrl+F1 = About',0x0d
 11722 00004B23 3D2048656C70202020- <1>
 11723 00004B2C 202020202020202020- <1>
 11724 00004B35 202020202020437472- <1>
 11725 00004B3E 6C2B4631203D204162- <1>
 11726 00004B47 6F75740D            <1>
 11727 00004B4B 202020202020463220- <1>         db '      F2 = Save                       F3 = Rename',0x0d
 11728 00004B54 3D2053617665202020- <1>
 11729 00004B5D 202020202020202020- <1>
 11730 00004B66 202020202020202020- <1>
 11731 00004B6F 20204633203D205265- <1>
 11732 00004B78 6E616D650D          <1>
 11733 00004B7D 202020202020463420- <1>         db '      F4 = Mark active                F5 = Hide/unhide',0x0d
 11734 00004B86 3D204D61726B206163- <1>
 11735 00004B8F 746976652020202020- <1>
 11736 00004B98 202020202020202020- <1>
 11737 00004BA1 20204635203D204869- <1>
 11738 00004BAA 64652F756E68696465- <1>
 11739 00004BB3 0D                  <1>
 11740 00004BB4 202020202020463620- <1>         db '      F6 = Toggle auto active         F7 = Toggle auto hide',0x0d
 11741 00004BBD 3D20546F67676C6520- <1>
 11742 00004BC6 6175746F2061637469- <1>
 11743 00004BCF 766520202020202020- <1>
 11744 00004BD8 20204637203D20546F- <1>
 11745 00004BE1 67676C65206175746F- <1>
 11746 00004BEA 20686964650D        <1>
 11747 00004BF0 202020202020463820- <1>         db '      F8 = Set default          Shift+F8 = Unset default',0x0d
 11748 00004BF9 3D2053657420646566- <1>
 11749 00004C02 61756C742020202020- <1>
 11750 00004C0B 202020202053686966- <1>
 11751 00004C14 742B4638203D20556E- <1>
 11752 00004C1D 736574206465666175- <1>
 11753 00004C26 6C740D              <1>
 11754 00004C29 20204374726C2B4420- <1>         db '  Ctrl+D = Delete                 Ctrl+P = Duplicate',0x0d
 11755 00004C32 3D2044656C65746520- <1>
 11756 00004C3B 202020202020202020- <1>
 11757 00004C44 202020202020204374- <1>
 11758 00004C4D 726C2B50203D204475- <1>
 11759 00004C56 706C69636174650D    <1>
 11760 00004C5E 20204374726C2B5520- <1>         db '  Ctrl+U = Move record up         Ctrl+N = Move record down',0x0d
 11761 00004C67 3D204D6F7665207265- <1>
 11762 00004C70 636F72642075702020- <1>
 11763 00004C79 202020202020204374- <1>
 11764 00004C82 726C2B4E203D204D6F- <1>
 11765 00004C8B 7665207265636F7264- <1>
 11766 00004C94 20646F776E0D        <1>
 11767 00004C9A 20204374726C2B5320- <1>         db '  Ctrl+S = Set/unset schedule     Ctrl+T = Set delay time',0x0d
 11768 00004CA3 3D205365742F756E73- <1>
 11769 00004CAC 657420736368656475- <1>
 11770 00004CB5 6C6520202020204374- <1>
 11771 00004CBE 726C2B54203D205365- <1>
 11772 00004CC7 742064656C61792074- <1>
 11773 00004CD0 696D650D            <1>
 11774 00004CD4 20204374726C2B4B20- <1>         db '  Ctrl+K = Set/unset keystrokes   / or ? = Show information',0x0d
 11775 00004CDD 3D205365742F756E73- <1>
 11776 00004CE6 6574206B6579737472- <1>
 11777 00004CEF 6F6B65732020202F20- <1>
 11778 00004CF8 6F72203F203D205368- <1>
 11779 00004D01 6F7720696E666F726D- <1>
 11780 00004D0A 6174696F6E0D        <1>
 11781 00004D10 20204374726C2B4920- <1>         db '  Ctrl+I = Rescan all records     Ctrl+H = Rescan all partitions',0x0d,
 11782 00004D19 3D2052657363616E20- <1>
 11783 00004D22 616C6C207265636F72- <1>
 11784 00004D2B 647320202020204374- <1>
 11785 00004D34 726C2B48203D205265- <1>
 11786 00004D3D 7363616E20616C6C20- <1>
 11787 00004D46 706172746974696F6E- <1>
 11788 00004D4F 730D                <1>
 11789 00004D51 20204374726C2B5820- <1>         db '  Ctrl+X = Toggle swap driver id  Ctrl+F = Show/hide flags',0x0d
 11790 00004D5A 3D20546F67676C6520- <1>
 11791 00004D63 737761702064726976- <1>
 11792 00004D6C 657220696420204374- <1>
 11793 00004D75 726C2B46203D205368- <1>
 11794 00004D7E 6F772F686964652066- <1>
 11795 00004D87 6C6167730D          <1>
 11796 00004D8C 20204374726C2B4C20- <1>         db '  Ctrl+L = Toggle remember the last booted record',0x0d
 11797 00004D95 3D20546F67676C6520- <1>
 11798 00004D9E 72656D656D62657220- <1>
 11799 00004DA7 746865206C61737420- <1>
 11800 00004DB0 626F6F746564207265- <1>
 11801 00004DB9 636F72640D          <1>
 11802 00004DBE 202020202020463920- <1>         db '      F9 = Change boot record password',0x0d
 11803 00004DC7 3D204368616E676520- <1>
 11804 00004DD0 626F6F74207265636F- <1>
 11805 00004DD9 72642070617373776F- <1>
 11806 00004DE2 72640D              <1>
 11807 00004DE5 202020202046313020- <1>         db '     F10 = Change root password',0x0d
 11808 00004DEE 3D204368616E676520- <1>
 11809 00004DF7 726F6F742070617373- <1>
 11810 00004E00 776F72640D          <1>
 11811 00004E05 4374726C2B46313020- <1>         db 'Ctrl+F10 = Enter/leave Administrator mode',0x0d
 11812 00004E0E 3D20456E7465722F6C- <1>
 11813 00004E17 656176652041646D69- <1>
 11814 00004E20 6E6973747261746F72- <1>
 11815 00004E29 206D6F64650D        <1>
 11816 00004E2F 20416C742B46313020- <1>         db ' Alt+F10 = Enter/leave Security Lock mode',0x0d
 11817 00004E38 3D20456E7465722F6C- <1>
 11818 00004E41 656176652053656375- <1>
 11819 00004E4A 72697479204C6F636B- <1>
 11820 00004E53 206D6F64650D        <1>
 11821 00004E59 202020202054616220- <1>         db '     Tab = Popup command menu',0x0d
 11822 00004E62 3D20506F7075702063- <1>
 11823 00004E6B 6F6D6D616E64206D65- <1>
 11824 00004E74 6E750D              <1>
 11825 00004E77 20204374726C2B5120- <1>         db '  Ctrl+Q = Quit to BIOS         Ctrl+F12 = Power off',0
 11826 00004E80 3D205175697420746F- <1>
 11827 00004E89 2042494F5320202020- <1>
 11828 00004E92 20202020204374726C- <1>
 11829 00004E9B 2B463132203D20506F- <1>
 11830 00004EA4 776572206F666600    <1>
 11831                              <1> 
 11832                              <1> ; normal messages.
 11833 00004EAC 4368616E6765732073- <1> .changes_saved      db  'Changes saved.',0
 11834 00004EB5 617665642E00        <1>
 11835 00004EBB 50617373776F726420- <1> .passwd_changed     db  'Password changed.',0
 11836 00004EC4 6368616E6765642E00  <1>
 11837 00004ECD 536176652074686520- <1> .ask_save_changes   db  'Save the changes (y/n)?',0
 11838 00004ED6 6368616E6765732028- <1>
 11839 00004EDF 792F6E293F00        <1>
 11840                              <1> 
 11841                              <1> ; error messages.
 11842 00004EE5 57726F6E6720706173- <1> .wrong_passwd       db  'Wrong password!',0
 11843 00004EEE 73776F72642100      <1>
 11844 00004EF5 4469736B206572726F- <1> .disk_error         db  'Disk error! 0x',0
 11845 00004EFE 722120307800        <1>
 11846 00004F04 4D61726B2061637469- <1> .mark_act_failed    db  'Mark active failed!',0
 11847 00004F0D 7665206661696C6564- <1>
 11848 00004F16 2100                <1>
 11849 00004F18 486964652F756E6869- <1> .toggle_hid_failed  db  'Hide/unhide failed!',0
 11850 00004F21 6465206661696C6564- <1>
 11851 00004F2A 2100                <1>
 11852 00004F2C 4E6F204F7065726174- <1> .no_system          db  'No Operating System!',0x0d
 11853 00004F35 696E67205379737465- <1>
 11854 00004F3E 6D210D              <1>
 11855 00004F41 5265706C6163652061- <1>                     db  'Replace a disk and try again.',0
 11856 00004F4A 206469736B20616E64- <1>
 11857 00004F53 207472792061676169- <1>
 11858 00004F5C 6E2E00              <1>
 11859 00004F5F 496E76616C69642062- <1> .invalid_record     db  'Invalid boot record!',0
 11860 00004F68 6F6F74207265636F72- <1>
 11861 00004F71 642100              <1>
 11862 00004F74 496E76616C69642073- <1> .invalid_schedule   db  'Invalid schedule time!',0
 11863 00004F7D 63686564756C652074- <1>
 11864 00004F86 696D652100          <1>
 11865 00004F8B 5375726520746F2069- <1> .inst_confirm       db  'Sure to install Smart BootManager ',
 11866 00004F94 6E7374616C6C20536D- <1>
 11867 00004F9D 61727420426F6F744D- <1>
 11868 00004FA6 616E6167657220      <1>
 11869 00004FAD 696E746F2064726976- <1>                     db  'into driver ',0
 11870 00004FB6 65722000            <1>
 11871 00004FBA 496E7374616C6C6174- <1> .inst_ok            db  'Installation is successful!',0
 11872 00004FC3 696F6E206973207375- <1>
 11873 00004FCC 636365737366756C21- <1>
 11874 00004FD5 00                  <1>
 11875 00004FD6 41626F727420746865- <1> .inst_abort         db  'Abort the installation.',0
 11876 00004FDF 20696E7374616C6C61- <1>
 11877 00004FE8 74696F6E2E00        <1>
 11878 00004FEE 5375726520746F2075- <1> .uninst_confirm     db  'Sure to uninstall Smart BootManager?',0x0d,0
 11879 00004FF7 6E696E7374616C6C20- <1>
 11880 00005000 536D61727420426F6F- <1>
 11881 00005009 744D616E616765723F- <1>
 11882 00005012 0D00                <1>
 11883 00005014 556E696E7374616C6C- <1> .uninst_ok          db  'Uninstallation is successful!',0x0d
 11884 0000501D 6174696F6E20697320- <1>
 11885 00005026 737563636573736675- <1>
 11886 0000502F 6C210D              <1>
 11887 00005032 436F6D707574657220- <1>                     db  'Computer will be restarted.',0
 11888 0000503B 77696C6C2062652072- <1>
 11889 00005044 65737461727465642E- <1>
 11890 0000504D 00                  <1>
 11891 0000504E 41626F727420746865- <1> .uninst_abort       db  'Abort the uninstallation.',0
 11892 00005057 20756E696E7374616C- <1>
 11893 00005060 6C6174696F6E2E00    <1>
 11894 00005068 507265737320592074- <1> .confirm            db  'Press Y to continue, other key to abort.',0
 11895 00005071 6F20636F6E74696E75- <1>
 11896 0000507A 652C206F7468657220- <1>
 11897 00005083 6B657920746F206162- <1>
 11898 0000508C 6F72742E00          <1>
 11899 00005091 536D61727420426F6F- <1> .no_sbml            db  'Smart Boot Manager Loader missing ',0x0d
 11900 0000509A 74204D616E61676572- <1>
 11901 000050A3 204C6F61646572206D- <1>
 11902 000050AC 697373696E67200D    <1>
 11903 000050B4 6F722076657273696F- <1>                     db  'or version mismatch!',0
 11904 000050BD 6E206D69736D617463- <1>
 11905 000050C6 682100              <1>
 11906 000050C9 496E76616C69642049- <1> .invalid_ioports    db  'Invalid I/O Ports!',0
 11907 000050D2 2F4F20506F72747321- <1>
 11908 000050DB 00                  <1>
 11909                              <1> 
 11910                              <1> ; command menu strings
 11911                              <1> ; main menu
 11912 000050DC 4D61696E204D656E75- <1> .main_menu_title     db  'Main Menu',0
 11913 000050E5 00                  <1>
 11914 000050E6 48656C702020202020- <1> .main_menu_help      db  'Help             ~F1~',0
 11915 000050EF 20202020202020207E- <1>
 11916 000050F8 46317E00            <1>
 11917 000050FC 41626F757420202020- <1> .main_menu_about     db  'About       ~Ctrl-F1~',0
 11918 00005105 2020207E4374726C2D- <1>
 11919 0000510E 46317E00            <1>
 11920 00005112 426F6F7420697400    <1> .main_menu_bootit    db  'Boot it',0
 11921 0000511A 426F6F742050726576- <1> .main_menu_bootprev  db  'Boot Previous MBR',0
 11922 00005123 696F7573204D425200  <1>
 11923 0000512C 517569742020202020- <1> .main_menu_quit      db  'Quit         ~Ctrl-Q~',0
 11924 00005135 202020207E4374726C- <1>
 11925 0000513E 2D517E00            <1>
 11926 00005142 506F776572204F6666- <1> .main_menu_poweroff  db  'Power Off  ~Ctrl-F12~',0
 11927 0000514B 20207E4374726C2D46- <1>
 11928 00005154 31327E00            <1>
 11929 00005158 5265636F7264205365- <1> .main_menu_recordset db  'Record Settings  ->',0
 11930 00005161 7474696E677320202D- <1>
 11931 0000516A 3E00                <1>
 11932 0000516C 53797374656D205365- <1> .main_menu_sysset    db  'System Settings  ->',0
 11933 00005175 7474696E677320202D- <1>
 11934 0000517E 3E00                <1>
 11935 00005180 53617665204368616E- <1> .main_menu_save      db  'Save Changes     ~F2~',0
 11936 00005189 67657320202020207E- <1>
 11937 00005192 46327E00            <1>
 11938 00005196 2D2D2D2D2D2D2D2D2D- <1> .main_menu_bar       db  '-------------------',0
 11939 0000519F 2D2D2D2D2D2D2D2D2D- <1>
 11940 000051A8 2D00                <1>
 11941                              <1> 
 11942                              <1> ; record settings menu
 11943 000051AA 5265636F7264205365- <1> .record_menu_title    db  'Record Settings',0
 11944 000051B3 7474696E677300      <1>
 11945 000051BA 496E666F726D617469- <1> .record_menu_info     db  'Information     ~/ or ?~',0
 11946 000051C3 6F6E20202020207E2F- <1>
 11947 000051CC 206F72203F7E00      <1>
 11948 000051D3 4E616D652020202020- <1> .record_menu_name     db  'Name                ~F3~',0
 11949 000051DC 202020202020202020- <1>
 11950 000051E5 20207E46337E00      <1>
 11951 000051EC 50617373776F726420- <1> .record_menu_passwd   db  'Password            ~F9~',0
 11952 000051F5 202020202020202020- <1>
 11953 000051FE 20207E46397E00      <1>
 11954 00005205 5363686564756C6520- <1> .record_menu_schedule db  'Schedule        ~Ctrl-S~',0
 11955 0000520E 202020202020207E43- <1>
 11956 00005217 74726C2D537E00      <1>
 11957 0000521E 4B65797374726F6B65- <1> .record_menu_keys     db  'Keystrokes      ~Ctrl-K~',0
 11958 00005227 732020202020207E43- <1>
 11959 00005230 74726C2D4B7E00      <1>
 11960 00005237 4D61726B2041637469- <1> .record_menu_act      db  'Mark Active         ~F4~',0
 11961 00005240 766520202020202020- <1>
 11962 00005249 20207E46347E00      <1>
 11963 00005250 486964652F756E6869- <1> .record_menu_hide     db  'Hide/unhide         ~F5~',0
 11964 00005259 646520202020202020- <1>
 11965 00005262 20207E46357E00      <1>
 11966 00005269 4175746F2041637469- <1> .record_menu_autoact  db  'Auto Active         ~F6~',0
 11967 00005272 766520202020202020- <1>
 11968 0000527B 20207E46367E00      <1>
 11969 00005282 4175746F2048696465- <1> .record_menu_autohide db  'Auto Hide           ~F7~',0
 11970 0000528B 202020202020202020- <1>
 11971 00005294 20207E46377E00      <1>
 11972 0000529B 537761702044726976- <1> .record_menu_swapdrv  db  'Swap Driver ID  ~Ctrl-X~',0
 11973 000052A4 657220494420207E43- <1>
 11974 000052AD 74726C2D587E00      <1>
 11975 000052B4 44656C657465202020- <1> .record_menu_del      db  'Delete          ~Ctrl-D~',0
 11976 000052BD 202020202020207E43- <1>
 11977 000052C6 74726C2D447E00      <1>
 11978 000052CD 4475706C6963617465- <1> .record_menu_dup      db  'Duplicate       ~Ctrl-P~',0
 11979 000052D6 202020202020207E43- <1>
 11980 000052DF 74726C2D507E00      <1>
 11981 000052E6 4D6F76652055702020- <1> .record_menu_moveup   db  'Move Up         ~Ctrl-U~',0
 11982 000052EF 202020202020207E43- <1>
 11983 000052F8 74726C2D557E00      <1>
 11984 000052FF 4D6F766520446F776E- <1> .record_menu_movedown db  'Move Down       ~Ctrl-N~',0
 11985 00005308 202020202020207E43- <1>
 11986 00005311 74726C2D4E7E00      <1>
 11987 00005318 2D2D2D2D2D2D2D2D2D- <1> .record_menu_bar      db  '----------------------',0
 11988 00005321 2D2D2D2D2D2D2D2D2D- <1>
 11989 0000532A 2D2D2D2D00          <1>
 11990                              <1> 
 11991                              <1> ; system setting menu
 11992 0000532F 53797374656D205365- <1> .sys_menu_title       db  'System Settings',0
 11993 00005338 7474696E677300      <1>
 11994 0000533F 526F6F742050617373- <1> .sys_menu_rootpasswd  db  'Root Password              ~F10~',0
 11995 00005348 776F72642020202020- <1>
 11996 00005351 202020202020202020- <1>
 11997 0000535A 7E4631307E00        <1>
 11998 00005360 546F67676C65204164- <1> .sys_menu_admin       db  'Toggle Admin Mode     ~Ctrl-F10~',0
 11999 00005369 6D696E204D6F646520- <1>
 12000 00005372 202020207E4374726C- <1>
 12001 0000537B 2D4631307E00        <1>
 12002 00005381 546F67676C65205365- <1> .sys_menu_security    db  'Toggle Security Mode   ~Alt-F10~',0
 12003 0000538A 637572697479204D6F- <1>
 12004 00005393 64652020207E416C74- <1>
 12005 0000539C 2D4631307E00        <1>
 12006 000053A2 536574204465666175- <1> .sys_menu_setdef      db  'Set Default Record          ~F8~',0
 12007 000053AB 6C74205265636F7264- <1>
 12008 000053B4 202020202020202020- <1>
 12009 000053BD 207E46387E00        <1>
 12010 000053C3 556E73657420446566- <1> .sys_menu_unsetdef    db  'Unset Default Record  ~Shift-F8~',0
 12011 000053CC 61756C74205265636F- <1>
 12012 000053D5 726420207E53686966- <1>
 12013 000053DE 742D46387E00        <1>
 12014 000053E4 5365742044656C6179- <1> .sys_menu_delay       db  'Set Delay Time          ~Ctrl-T~',0
 12015 000053ED 2054696D6520202020- <1>
 12016 000053F6 2020202020207E4374- <1>
 12017 000053FF 726C2D547E00        <1>
 12018 00005405 4368616E676520426F- <1> .sys_menu_bmstyle     db  'Change Boot Menu Style  ~Ctrl-F~',0
 12019 0000540E 6F74204D656E752053- <1>
 12020 00005417 74796C6520207E4374- <1>
 12021 00005420 726C2D467E00        <1>
 12022 00005426 546F67676C65205265- <1> .sys_menu_remlast     db  'Toggle Remember Last    ~Ctrl-L~',0
 12023 0000542F 6D656D626572204C61- <1>
 12024 00005438 7374202020207E4374- <1>
 12025 00005441 726C2D4C7E00        <1>
 12026 00005447 546F67676C65204578- <1> .sys_menu_int13ext    db  'Toggle Extended Int 13H',0
 12027 00005450 74656E64656420496E- <1>
 12028 00005459 742031334800        <1>
 12029 0000545F 52657363616E20416C- <1> .sys_menu_rescanall   db  'Rescan All Boot Records ~Ctrl-I~',0
 12030 00005468 6C20426F6F74205265- <1>
 12031 00005471 636F726473207E4374- <1>
 12032 0000547A 726C2D497E00        <1>
 12033 00005480 52657363616E20416C- <1> .sys_menu_rescanpart  db  'Rescan All Partitions   ~Ctrl-H~',0
 12034 00005489 6C2050617274697469- <1>
 12035 00005492 6F6E732020207E4374- <1>
 12036 0000549B 726C2D487E00        <1>
 12037 000054A1 5365742043442D524F- <1> .sys_menu_set_ioports db  'Set CD-ROM I/O Ports',0
 12038 000054AA 4D20492F4F20506F72- <1>
 12039 000054B3 747300              <1>
 12040 000054B6 536574207965617220- <1> .sys_menu_set_y2kfix  db  'Set year (fix Y2K BIOS bug)',0
 12041 000054BF 286669782059324B20- <1>
 12042 000054C8 42494F532062756729- <1>
 12043 000054D1 00                  <1>
 12044 000054D2 496E7374616C6C2053- <1> .sys_menu_inst        db  'Install Smart BootManager',0
 12045 000054DB 6D61727420426F6F74- <1>
 12046 000054E4 4D616E6167657200    <1>
 12047 000054EC 556E696E7374616C6C- <1> .sys_menu_uninst      db  'Uninstall Smart BootManager',0
 12048 000054F5 20536D61727420426F- <1>
 12049 000054FE 6F744D616E61676572- <1>
 12050 00005507 00                  <1>
 12051 00005508 2D2D2D2D2D2D2D2D2D- <1> .sys_menu_bar         db  '------------------------------',0
 12052 00005511 2D2D2D2D2D2D2D2D2D- <1>
 12053 0000551A 2D2D2D2D2D2D2D2D2D- <1>
 12054 00005523 2D2D2D00            <1>
 12055                              <1> 
 12056 00005527 43686F6F7365206120- <1> .cdimg_menu_title     db  'Choose a CD Image',0
 12057 00005530 434420496D61676500  <1>
 12058 00005539 4E6F20456D756C6174- <1> .cdimg_menu_noemu     db  'No Emulation',0
 12059 00005542 696F6E00            <1>
 12060 00005546 312E32204D20446973- <1> .cdimg_menu_120m      db  '1.2 M Diskette',0
 12061 0000554F 6B6574746500        <1>
 12062 00005555 312E34344D20446973- <1> .cdimg_menu_144m      db  '1.44M Diskette',0
 12063 0000555E 6B6574746500        <1>
 12064 00005564 322E38384D20446973- <1> .cdimg_menu_288m      db  '2.88M Diskette',0
 12065 0000556D 6B6574746500        <1>
 12066                              <1> 
 12067 00005573 53756E00            <1> .sunday              db 'Sun',0
 12068 00005577 4D6F6E00            <1> .monday              db 'Mon',0
 12069 0000557B 54756500            <1> .tuesday             db 'Tue',0
 12070 0000557F 57656400            <1> .wednesday           db 'Wed',0
 12071 00005583 54687500            <1> .thursday            db 'Thu',0
 12072 00005587 46726900            <1> .friday              db 'Fri',0
 12073 0000558B 53617400            <1> .saturday            db 'Sat',0
 12074                              <1> 
 12075                              <1> ; END OF THEME.
 12076                              <1> end_of_theme:
 12077                              <1> 
 12078                              <1> ; vi:ts=8:et:nowrap
 12079                                  %endif
 12080                                  
 12081                                  end_of_sbm:
 12082                                  SIZE_OF_SBMK equ ($-$$)
 12083                                  
 12084                                  %ifndef EMULATE_PROG
 12085                                  
 12086 0000558F 00<rept>                  times 63*512-($-$$) db 0
 12087                                  
 12088                                  %endif
 12089                                  
 12090                                  
 12091                                  ;=============================================================================
 12092                                  ; temp data area
 12093                                  ;=============================================================================
 12094                                  	section .bss
 12095                                  
 12096                                  %ifndef EMULATE_PROG
 12097 00000000 <res 00001FA1>                  resb MAX_SBM_SIZE - SIZE_OF_SBMK   ; skip enough space for theme.
 12098                                  %endif
 12099                                   
 12100                                  Start_of_Temporary_Data_Area:
 12101                                  start_of_tmp_data:
 12102                                  %include "tempdata.asm"
 12103                              <1> ; tempdata.asm
 12104                              <1> ;
 12105                              <1> ; some temp data for Smart Boot Manager
 12106                              <1> ;
 12107                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
 12108                              <1> ;
 12109                              <1> 
 12110                              <1> ;==============================================================================
 12111                              <1> ;temp data area for hd_io.asm
 12112                              <1> ;==============================================================================
 12113                              <1> %ifndef HD_IO_TEMPDATA
 12114                              <1> %define HD_IO_TEMPDATA
 12115                              <1> 
 12116                              <1> hdio_tmp:
 12117 00001FA1 <res 00000008>      <1> .cdbc_cmd	resb SIZE_OF_CDBC_CMD
 12118 00001FA9 <res 00000042>      <1> .extparam	resb SIZE_OF_EXTPARAM
 12119 00001FEB <res 00000010>      <1> .int13ext	resb SIZE_OF_INT13EXT
 12120 00001FFB <res 0000000A>      <1> .driveinfo	resb SIZE_OF_DRIVEINFO
 12121 00002005 <res 00000001>      <1> .disk_errno	resb 1
 12122                              <1> 
 12123                              <1> %endif
 12124                              <1> 
 12125                              <1> ;==============================================================================
 12126                              <1> ;temp data area for knl.asm
 12127                              <1> ;==============================================================================
 12128                              <1> %ifndef KNL_TEMPDATA
 12129                              <1> %define KNL_TEMPDATA
 12130                              <1> 
 12131                              <1> knl_tmp:
 12132 00002006 <res 00000001>      <1> .good_record_num	resb 1
 12133 00002007 <res 00000001>      <1> .max_record_num		resb 1
 12134 00002008 <res 00000001>      <1> .part_id		resb 1
 12135 00002009 <res 00000004>      <1> .logi_father		resd 1
 12136                              <1> 
 12137 0000200D <res 00000001>      <1> .floppy_num		resb 1
 12138 0000200E <res 00000013>      <1> .cdemu_spec		resb SIZE_OF_CDEMU_SPEC
 12139                              <1> 
 12140 00002021 <res 00000800>      <1> .disk_buf1		resb 2048
 12141 00002821 <res 00000800>      <1> .disk_buf2		resb 2048
 12142                              <1> 
 12143                              <1> %endif
 12144                              <1> 
 12145                              <1> ;==============================================================================
 12146                              <1> ;temp data area for ui.asm
 12147                              <1> ;==============================================================================
 12148                              <1> %ifndef UI_TEMPDATA
 12149                              <1> %define UI_TEMPDATA
 12150                              <1> 
 12151                              <1> ui_tmp:
 12152 00003021 <res 00000001>      <1> .left_col	resb  1
 12153 00003022 <res 00000001>      <1> .top_row	resb  1
 12154 00003023 <res 00000001>      <1> .right_col	resb  1
 12155 00003024 <res 00000001>      <1> .bottom_row	resb  1
 12156 00003025 <res 00000001>      <1> .frame_attr	resb  1
 12157 00003026 <res 00000001>      <1> .title_attr	resb  1
 12158 00003027 <res 00000002>      <1> .focus_win	resw  1
 12159 00003029 <res 00000002>      <1> .root_win	resw  1
 12160 0000302B <res 0000001A>      <1> .def_root_win	resb SIZE_OF_STRUC_WINDOW
 12161 00003045 <res 00000020>      <1> .tmp_msgbox	resb SIZE_OF_STRUC_MESSAGE_BOX
 12162 00003065 <res 00000029>      <1> .tmp_inputbox	resb SIZE_OF_STRUC_INPUT_BOX
 12163 0000308E <res 0000002B>      <1> .tmp_menubox	resb SIZE_OF_STRUC_MENU_BOX
 12164 000030B9 <res 00000100>      <1> .tmp_buf	resb  256
 12165 000031B9 <res 00000100>      <1> .tmp_buf1	resb  256
 12166                              <1> 
 12167                              <1> %endif
 12168                              <1> 
 12169                              <1> ;==============================================================================
 12170                              <1> ;temp data area for utils.asm
 12171                              <1> ;==============================================================================
 12172                              <1> %ifndef UTILS_TEMPDATA
 12173                              <1> %define UTILS_TEMPDATA
 12174                              <1> 
 12175                              <1> utils_tmp:
 12176 000032B9 <res 00000001>      <1> .kbd_work	       resb  1
 12177 000032BA <res 00000001>      <1> .kbd_last_shift        resb  1
 12178 000032BB <res 00000001>      <1> .kbd_bypass_next_shift resb 1
 12179                              <1> 
 12180                              <1> %endif
 12181                              <1> 
 12182                              <1> ;=============================================================================
 12183                              <1> ;temp data area for main.asm
 12184                              <1> ;=============================================================================
 12185                              <1> %ifndef MAIN_TEMPDATA
 12186                              <1> %define MAIN_TEMPDATA
 12187                              <1> 
 12188                              <1> main_tmp:
 12189 000032BC <res 00000020>      <1> .good_record_list    resb MAX_RECORD_NUM
 12190                              <1> 
 12191 000032DC <res 00000001>      <1> .time_count         resb  1                       ;
 12192 000032DD <res 00000002>      <1> .ticks_count        resw  1                       ; used in get_key func
 12193 000032DF <res 00000001>      <1> .key_pressed        resb  1                       ;
 12194 000032E0 <res 00000002>      <1> .keycode            resw  1
 12195                              <1> 
 12196 000032E2 <res 00000001>      <1> .change_occured     resb  1                       ; if change occured.
 12197 000032E3 <res 00000001>      <1> .root_login         resb  1                       ; root login state.
 12198                              <1> 
 12199 000032E4 <res 00000002>      <1> .last_time          resw  1
 12200                              <1> 
 12201 000032E6 <res 00000002>      <1> .schedule_begin  resw  1
 12202 000032E8 <res 00000002>      <1> .schedule_end    resw  1
 12203 000032EA <res 00000002>      <1> .schedule_day    resw  1
 12204                              <1> 
 12205 000032EC <res 00000002>      <1> .keystroke_ptr   resw  1
 12206 000032EE <res 00000001>      <1> .keystroke_num   resb  1
 12207 000032EF <res 00000001>      <1> .keystroke_max   resb  1
 12208 000032F0 <res 0000002B>      <1> .ikbox           resb SIZE_OF_STRUC_MENU_BOX
 12209                              <1> 
 12210 0000331B <res 00000800>      <1> .records_buf     resb MAX_RECORD_NUM * SIZE_OF_BOOTRECORD
 12211 00003B1B <res 00000050>      <1> .record_string   resb 80
 12212 00003B6B <res 00000100>      <1> .dialog_buf      resb 256
 12213 00003C6B <res 00000050>      <1> .root_buf        resb 80
 12214                              <1> 
 12215                              <1> %endif
 12216                              <1> 
 12217                              <1> %ifndef MYINT13H_TEMPDATA
 12218                              <1> %define MYINT13H_TEMPDATA
 12219                              <1> 
 12220                              <1> myint13h_tmp:
 12221 00003CBB <res 00000002>      <1> .edd30_off  resw 1
 12222 00003CBD <res 00000002>      <1> .edd30_seg  resw 1
 12223                              <1> 
 12224                              <1> %endif
 12225                              <1> 
 12226                                  End_of_Temporary_Data_Area:
 12227                                  
 12228                                  ; vi:ts=8:et:nowrap
