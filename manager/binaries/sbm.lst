     1                                  ; asmsyntax=nasm
     2                                  ;
     3                                  ; main.asm
     4                                  ;
     5                                  ; Main programs for Smart Boot Manager
     6                                  ;
     7                                  ; Copyright (C) 2000, Suzhe. See file COPYING for details.
     8                                  ; Copyright (C) 2001, Suzhe. See file COPYING for details.
     9                                  ;
    10                                  
    11                                  %define MAIN
    12                                  %define HAVE_MAIN_PROG
    13                                  ;%define EMULATE_PROG
    14                                  
    15                                  %include "macros.h"
    16                              <1> ; macros.h
    17                              <1> ;
    18                              <1> ; some nasm macros that simplify the coding.
    19                              <1> ;
    20                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
    21                              <1> ;
    22                              <1> 
    23                              <1> %ifndef DEFINE_MACROS
    24                              <1> %define DEFINE_MACROS
    25                              <1> 
    26                              <1> %macro retz 0
    27                              <1>        jnz %%skip
    28                              <1>        ret
    29                              <1> %%skip:
    30                              <1> %endmacro
    31                              <1> 
    32                              <1> %define jmpz  jz near
    33                              <1> %define jmpnz jnz near
    34                              <1> %define jmpe  je near
    35                              <1> %define jmpne jne near
    36                              <1> %define jmpc  jc near
    37                              <1> %define jmpnc jnc near
    38                              <1> %define jmpa  ja near
    39                              <1> %define jmpna jna near
    40                              <1> %define jmpb  jb near
    41                              <1> %define jmpnb jnb near
    42                              <1> 
    43                              <1> 
    44                              <1> %if 0
    45                              <1> %macro jmpz 1
    46                              <1>        jnz %%skip
    47                              <1>        jmp %1
    48                              <1> %%skip:
    49                              <1> %endmacro
    50                              <1> 
    51                              <1> %macro jmpnz 1
    52                              <1>        jz %%skip
    53                              <1>        jmp %1
    54                              <1> %%skip:
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro jmpe 1
    58                              <1>        jne %%skip
    59                              <1>        jmp %1
    60                              <1> %%skip:
    61                              <1> %endmacro
    62                              <1> 
    63                              <1> %macro jmpne 1
    64                              <1>        je %%skip
    65                              <1>        jmp %1
    66                              <1> %%skip:
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro jmpc 1
    70                              <1>        jnc %%skip
    71                              <1>        jmp %1
    72                              <1> %%skip:
    73                              <1> %endmacro
    74                              <1> 
    75                              <1> %macro jmpnc 1
    76                              <1>        jc %%skip
    77                              <1>        jmp %1
    78                              <1> %%skip:
    79                              <1> %endmacro
    80                              <1> 
    81                              <1> %macro jmpb 1
    82                              <1>        jnb %%skip
    83                              <1>        jmp %1
    84                              <1> %%skip:
    85                              <1> %endmacro
    86                              <1> 
    87                              <1> %macro jmpnb 1
    88                              <1>        jb %%skip
    89                              <1>        jmp %1
    90                              <1> %%skip:
    91                              <1> %endmacro
    92                              <1> 
    93                              <1> %endif
    94                              <1> 
    95                              <1> %endif
    96                                  %include "ui.h"
    97                              <1> ;
    98                              <1> ; ui.h
    99                              <1> ;
   100                              <1> ; header file for ui.asm
   101                              <1> ;
   102                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   103                              <1> ;
   104                              <1> 
   105                              <1> ; following flags is used in struc_window.flags
   106                              <1> 
   107                              <1> %define WINFLAG_OPEN		0x01  ; set this flag when open the window
   108                              <1> %define WINFLAG_MODAL		0x02  ; Modal window
   109                              <1> %define WINFLAG_FRAMED		0x04  ; the window has frame.
   110                              <1> %define WINFLAG_NO_FOCUS	0x08  ; Cannot be focused.
   111                              <1> 
   112                              <1> %define MENUFLAG_SCROLLBAR	0x10  ; the menu has scroll bar
   113                              <1> %define MENUFLAG_SINK_WIDTH	0x20  ; reduce the width of menu area by two char
   114                              <1> %define MENUFLAG_SINK_UPPER	0x40  ; reduce the upper of menu area by one char
   115                              <1> %define MENUFLAG_SINK_BOTTOM	0x80  ; ..
   116                              <1> 
   117                              <1> %define WINFLAG_HI_RUNNING	0x01  ; unsed in hi-byte of struc_window.flags
   118                              <1> 
   119                              <1> ; following flags is used in struc_action.flags
   120                              <1> 
   121                              <1> %define ACTFLAG_CLOSE_WIN	0x01  ; close the window after doing the action
   122                              <1> %define ACTFLAG_REDRAW_BODY	0x02  ; redraw window body after doing it
   123                              <1> %define ACTFLAG_REDRAW_WIN	0x04  ; redraw entire window after doing it
   124                              <1> %define ACTFLAG_REDRAW_SCR	0x08  ; redraw entire screen after doint it
   125                              <1> 
   126                              <1> %define ACTFLAG_CHK_RECNUM	0x10  ; check good record number before do it
   127                              <1> %define ACTFLAG_AUTH_ROOT	0x20  ; confirm root password before do it
   128                              <1> %define ACTFLAG_AUTH_RECORD	0x40  ; confirm record password before do it
   129                              <1> %define ACTFLAG_AUTH_SECURITY	0x80  ; confirm password according to security
   130                              <1>                                       ; level
   131                              <1> %define ACTFLAG_AUTHS		0xF0
   132                              <1> 
   133                              <1> %define SIZE_OF_STRUC_WINDOW		struc_window.end_of_struc
   134                              <1> %define SIZE_OF_STRUC_MENU_BOX		struc_menu_box.end_of_struc
   135                              <1> %define SIZE_OF_STRUC_ACTION		struc_action.end_of_struc
   136                              <1> %define SIZE_OF_STRUC_MESSAGE_BOX	struc_message_box.end_of_struc
   137                              <1> %define SIZE_OF_STRUC_INPUT_BOX		struc_input_box.end_of_struc
   138                              <1> 
   139                              <1> struc struc_window
   140 00000000 <res 00000002>      <1> 	.flags			resw 1	; flags
   141 00000002 <res 00000002>      <1> 	.title			resw 1	; 2nd level pointer to window title
   142 00000004 <res 00000002>      <1> 	.win_attr		resw 1  ; window attribute, 
   143                              <1> 					; high = title, low = frame
   144 00000006 <res 00000002>      <1> 	.win_pos		resw 1	; window position, 
   145                              <1> 					; high = row, low = col
   146 00000008 <res 00000002>      <1> 	.win_size		resw 1	; window size,
   147                              <1> 					; high = height, low = width
   148 0000000A <res 00000002>      <1> 	.parent_win		resw 1	; pointer to parent window
   149 0000000C <res 00000002>      <1> 	.next_win		resw 1  ; pointer to next window
   150 0000000E <res 00000002>      <1> 	.previous_win		resw 1  ; pointer to previous window
   151                              <1> 
   152 00000010 <res 00000002>      <1> 	.act_num		resw 1  ; number of actions
   153 00000012 <res 00000002>      <1> 	.act_table		resw 1	; pointer to action table
   154                              <1> 
   155 00000014 <res 00000002>      <1> 	.default_event_handle	resw 1	; default key event handle
   156 00000016 <res 00000002>      <1> 	.event_handle		resw 1	; key event handle
   157 00000018 <res 00000002>      <1> 	.draw_body_proc		resw 1	; draw window body proc
   158                              <1> 	.end_of_struc
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc struc_action
   162 00000000 <res 00000001>      <1> 	.flags			resb 1	; flags
   163 00000001 <res 00000002>      <1> 	.keycode		resw 1	; keycode
   164 00000003 <res 00000002>      <1> 	.func			resw 1	; function entry
   165                              <1> 	.end_of_struc
   166                              <1> endstruc
   167                              <1> 
   168                              <1> 
   169                              <1> ; For menubox, the actions of menu items are stored in struc_window.act_table.
   170                              <1> ; First items_num actions in act_table are menu items'. Other actions are 
   171                              <1> ; hotkeys.
   172                              <1> 
   173                              <1> struc struc_menu_box
   174                              <1> ; first part is a struc_window data
   175 00000000 <res 0000001A>      <1> 	.window			resb SIZE_OF_STRUC_WINDOW
   176                              <1> 
   177                              <1> ; data member of menu box
   178 0000001A <res 00000002>      <1> 	.menu_header		resw 1	; 2nd level pointer to menu header string
   179 0000001C <res 00000001>      <1> 	.menu_header_attr	resb 1	; attribute of menu header (if have)
   180 0000001D <res 00000002>      <1> 	.menu_norm_attr		resw 1	; attribute of normal menu item, 
   181                              <1> 					; high = hotkey attr, low =normal attr
   182 0000001F <res 00000002>      <1> 	.menu_focus_attr	resw 1	; attribute of focused menu item
   183 00000021 <res 00000002>      <1> 	.menu_area_pos		resw 1	; position of menu area
   184 00000023 <res 00000002>      <1> 	.menu_area_size		resw 1	; size of menu area
   185 00000025 <res 00000001>      <1> 	.scrollbar_attr		resb 1	; attribute of scrollbar
   186                              <1> 
   187 00000026 <res 00000001>      <1> 	.items_num		resb 1	; number of menu items
   188 00000027 <res 00000001>      <1> 	.focus_item		resb 1	; focused item
   189 00000028 <res 00000001>      <1> 	.first_visible_item	resb 1	; first visible item
   190                              <1> 
   191 00000029 <res 00000002>      <1> 	.item_str_proc		resw 1	; proc of get a item's string
   192                              <1> 					; input cx = index, si -> menu
   193                              <1> 					; output si -> string
   194                              <1> 	.end_of_struc
   195                              <1> endstruc
   196                              <1> 
   197                              <1> struc struc_message_box
   198 00000000 <res 0000001A>      <1> 	.window			resb SIZE_OF_STRUC_WINDOW
   199 0000001A <res 00000002>      <1> 	.message		resw 1  ; pointer to the message
   200 0000001C <res 00000002>      <1> 	.message_attr		resw 1  ; attribute of the message
   201 0000001E <res 00000002>      <1> 	.pressed_key		resw 1  ; the key which user pressed
   202                              <1> 	.end_of_struc
   203                              <1> endstruc
   204                              <1> 
   205                              <1> struc struc_input_box
   206 00000000 <res 0000001A>      <1> 	.window			resb SIZE_OF_STRUC_WINDOW
   207 0000001A <res 00000002>      <1> 	.message		resw 1  ; pointer to the message
   208 0000001C <res 00000002>      <1> 	.message_attr		resw 1  ; attribute of the message
   209 0000001E <res 00000001>      <1> 	.input_attr		resb 1  ; attribute of input area
   210 0000001F <res 00000001>      <1> 	.input_type		resb 1	; input type, 0=normal, 1=passwd
   211 00000020 <res 00000002>      <1> 	.input_buf		resw 1	; pointer to input buffer
   212 00000022 <res 00000001>      <1> 	.input_buf_len		resb 1	; length of input buffer
   213 00000023 <res 00000001>      <1> 	.input_area_len		resb 1	; length of input area
   214 00000024 <res 00000002>      <1> 	.input_area_pos		resw 1	; position of input area (in window)
   215 00000026 <res 00000001>      <1> 	.input_startp		resb 1	; the first visible char in input buf
   216 00000027 <res 00000001>      <1> 	.input_curp		resb 1	; cursor position
   217 00000028 <res 00000001>      <1> 	.return_val		resb 1	; return val, 0 = success, 1 = cancel
   218                              <1> 	.end_of_struc
   219                              <1> endstruc
   220                              <1> 
   221                              <1> ; vi:nowrap
   222                                  %include "hd_io.h"
   223                              <1> ; hd_io.h
   224                              <1> ;
   225                              <1> ; header file for hd_io.asm
   226                              <1> ;
   227                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   228                              <1> ;
   229                              <1> 
   230                              <1> 
   231                              <1> %define DRVFLAG_DRIVEOK    0x0001       ;
   232                              <1> %define DRVFLAG_CHSVALID   0x0002       ; used in driveinfo structure
   233                              <1> %define DRVFLAG_REMOVABLE  0x0004       ; and bootrecord structure 
   234                              <1> %define DRVFLAG_EXTOK      0x0008       ;
   235                              <1> %define DRVFLAG_ISCDROM    0x0010       ; 0000,0000,0001,0000B
   236                              <1> 
   237                              <1> %define DRVFLAG_MASK       0x0015       ; 0000,0000,0001,0101B
   238                              <1> 
   239                              <1> %define INT13H_EXT_INSTCHECK 0x41
   240                              <1> %define INT13H_EXT_READ      0x42
   241                              <1> %define INT13H_EXT_WRITE     0x43
   242                              <1> %define INT13H_EXT_GETINFO   0x48
   243                              <1> %define INT13H_EXT_LOCK      0x45
   244                              <1> %define INT13H_RESET         0X00
   245                              <1> %define INT13H_READ          0X02
   246                              <1> %define INT13H_WRITE         0X03
   247                              <1> %define INT13H_GETINFO       0X08
   248                              <1> %define INT13H_GETTYPE       0x15
   249                              <1> 
   250                              <1> %define EXT_SUBSET_FIXED     0x01
   251                              <1> %define EXT_SUBSET_REMOVABLE 0x02
   252                              <1> %define EXT_SUBSET_EDD       0x04
   253                              <1> 
   254                              <1> %define DRV_TYPE_FIXED       0x03
   255                              <1> 
   256                              <1> %define MIN_HD_ID            0X80
   257                              <1> %define EXTPARAM_SIZE        0x42
   258                              <1> 
   259                              <1> %define MAX_CYLS             1023
   260                              <1> 
   261                              <1> ; Structure for calling int 13h ext Read / Write functions
   262                              <1> struc struc_int13ext
   263 00000000 <res 00000001>      <1>       .pack_size    : resb  1      ; ==16 size of struct Int13ExtData
   264 00000001 <res 00000001>      <1>       .reserved     : resb  1      ; ==0
   265 00000002 <res 00000001>      <1>       .blk_count    : resb  1      ; number of blocks to transfer <= 127
   266 00000003 <res 00000001>      <1>       .reserved1    : resb  1      ; ==0
   267 00000004 <res 00000002>      <1>       .buf_addr_off : resw  1      ; address of transfer buffer(segment:offset)
   268 00000006 <res 00000002>      <1>       .buf_addr_seg : resw  1
   269 00000008 <res 00000002>      <1>       .blk_num_low1 : resw  1      ; starting absolute block number
   270 0000000A <res 00000002>      <1>       .blk_num_low2 : resw  1
   271 0000000C <res 00000002>      <1>       .blk_num_high1: resw  1
   272 0000000E <res 00000002>      <1>       .blk_num_high2: resw  1
   273                              <1>       .end_of_struc
   274                              <1> endstruc
   275                              <1> 
   276                              <1> ; structure for calling int 13h ext get drive parameters functions (0x48)
   277                              <1> struc struc_extparam
   278 00000000 <res 00000002>      <1>       .pack_size         : resw  1
   279 00000002 <res 00000002>      <1>       .flags             : resw  1
   280 00000004 <res 00000004>      <1>       .cylinders         : resd  1
   281 00000008 <res 00000004>      <1>       .heads             : resd  1      ; <= 255
   282 0000000C <res 00000004>      <1>       .sectors           : resd  1      ; <= 63
   283 00000010 <res 00000008>      <1>       .total_sectors     : resd  2
   284 00000018 <res 00000002>      <1>       .bytes_per_sect    : resw  1
   285 0000001A <res 00000004>      <1>       .dpte_addr         : resd  1      ; device parameter table extension
   286 0000001E <res 00000002>      <1>       .dpi_key           : resw  1      ; 0xBEDD - Key, indicates presence
   287                              <1>                                         ; of Device Path Information
   288 00000020 <res 00000001>      <1>       .dpi_length        : resb  1      ; Length of Device Path Information 
   289                              <1>                                         ; including the key. = 36
   290 00000021 <res 00000001>      <1>       .reserved1         : resb  1
   291 00000022 <res 00000002>      <1>       .reserved2         : resw  1
   292 00000024 <res 00000004>      <1>       .host_bus_type     : resb  4      ; Host bus type, 4 bytes
   293                              <1>                                         ; PCI    PCI Local Bus
   294                              <1>                                         ; ISA    Legacy 16 bit fixed bus
   295 00000028 <res 00000008>      <1>       .interface_type    : resb  8      ; Interface type, 8 bytes
   296                              <1>                                         ; ATA   ATA/ATAPI-4 compliant device using ATA commands
   297                              <1>                                         ; ATAPI ATA/ATAPI-4 compliant device using ATAPI commands
   298                              <1>                                         ; SCSI  SCSI compliant device
   299                              <1>                                         ; USB   USB Mass Storage compliant device
   300                              <1>                                         ; 1394  1394 Mass Storage device
   301                              <1>                                         ; FIBRE Fibre Channel
   302 00000030 <res 00000008>      <1>       .interface_path    : resq  1
   303 00000038 <res 00000008>      <1>       .device_path       : resq  1
   304 00000040 <res 00000001>      <1>       .reserved3         : resb  1
   305 00000041 <res 00000001>      <1>       .checksum          : resb  1
   306                              <1>       .end_of_struc
   307                              <1> endstruc
   308                              <1> 
   309                              <1> ; Device parameter table extension
   310                              <1> %define SIZE_OF_DPTE struc_dpte.end_of_struc
   311                              <1> struc struc_dpte
   312 00000000 <res 00000002>      <1> 	.base_io	: resw 1
   313 00000002 <res 00000002>      <1> 	.ctrl_io	: resw 1
   314 00000004 <res 00000001>      <1> 	.flags		: resb 1
   315 00000005 <res 00000001>      <1> 	.vender_spec	: resb 1
   316 00000006 <res 00000001>      <1> 	.irq		: resb 1
   317 00000007 <res 00000001>      <1> 	.blk_count	: resb 1
   318 00000008 <res 00000001>      <1> 	.dma		: resb 1
   319 00000009 <res 00000001>      <1> 	.pio		: resb 1
   320 0000000A <res 00000002>      <1> 	.bios_spec	: resw 1
   321 0000000C <res 00000002>      <1> 	.reserved	: resw 1
   322 0000000E <res 00000001>      <1> 	.revision	: resb 1
   323 0000000F <res 00000001>      <1> 	.checksum	: resb 1
   324                              <1> 	.end_of_struc
   325                              <1> endstruc
   326                              <1> 
   327                              <1> ;Return cdrom boot catalog command packet
   328                              <1> %define SIZE_OF_CDBC_CMD struc_cdbc_cmd.end_of_struc
   329                              <1> struc struc_cdbc_cmd
   330 00000000 <res 00000001>      <1> 	.pack_size	: resb 1
   331 00000001 <res 00000001>      <1> 	.sector_count	: resb 1
   332 00000002 <res 00000002>      <1> 	.buf_addr_off	: resw 1
   333 00000004 <res 00000002>      <1> 	.buf_addr_seg	: resw 1
   334 00000006 <res 00000002>      <1> 	.begnning_sect	: resw 1
   335                              <1> 	.end_of_struc
   336                              <1> endstruc
   337                              <1> 
   338                              <1> ;CD Emulation Specification Packet
   339                              <1> %define SIZE_OF_CDEMU_SPEC struc_cdemu_spec.end_of_struc
   340                              <1> struc struc_cdemu_spec
   341 00000000 <res 00000001>      <1> 	.pack_size	: resb 1
   342 00000001 <res 00000001>      <1> 	.media_type	: resb 1
   343 00000002 <res 00000001>      <1> 	.emu_drvid	: resb 1
   344 00000003 <res 00000001>      <1> 	.controller_id	: resb 1
   345 00000004 <res 00000004>      <1> 	.image_lba	: resd 1
   346 00000008 <res 00000002>      <1> 	.device_spec	: resw 1
   347 0000000A <res 00000002>      <1> 	.user_bufseg	: resw 1
   348 0000000C <res 00000002>      <1> 	.load_seg	: resw 1
   349 0000000E <res 00000002>      <1> 	.sect_count	: resw 1
   350 00000010 <res 00000001>      <1> 	.cylinders	: resb 1
   351 00000011 <res 00000001>      <1> 	.sectors	: resb 1
   352 00000012 <res 00000001>      <1> 	.heads		: resb 1
   353                              <1> 	.end_of_struc
   354                              <1> endstruc
   355                              <1> 
   356                              <1> 
   357                              <1> ;Structure of boot catalog entry
   358                              <1> %define SIZE_OF_BOOT_CATALOG struc_boot_catalog.end_of_struc
   359                              <1> struc struc_boot_catalog
   360 00000000 <res 00000001>      <1> 	.indicator	: resb 1
   361 00000001 <res 00000001>      <1> 	.media_type	: resb 1
   362 00000002 <res 00000002>      <1> 	.load_seg	: resw 1
   363 00000004 <res 00000001>      <1> 	.sys_type	: resb 1
   364 00000005 <res 00000001>      <1> 	.reserved	: resb 1
   365 00000006 <res 00000002>      <1> 	.sect_count	: resw 1
   366 00000008 <res 00000004>      <1> 	.load_rba	: resd 1
   367 0000000C <res 00000014>      <1> 	.reserved1	: resb 20
   368                              <1> 	.end_of_struc
   369                              <1> endstruc
   370                              <1> 
   371                              <1> 
   372                              <1> ; structure for record drive informations
   373                              <1> struc struc_driveinfo
   374 00000000 <res 00000001>      <1>       .id                : resb  1
   375 00000001 <res 00000001>      <1>       .flags             : resb  1
   376 00000002 <res 00000002>      <1>       .cylinders         : resw  1
   377 00000004 <res 00000002>      <1>       .heads             : resw  1
   378 00000006 <res 00000002>      <1>       .sectors           : resw  1
   379 00000008 <res 00000002>      <1>       .sector_size       : resw  1
   380                              <1>       .end_of_struc
   381                              <1> endstruc
   382                              <1> 
   383                              <1> 
   384                              <1> 
   385                              <1> %define SIZE_OF_DRIVEINFO (struc_driveinfo.end_of_struc)
   386                              <1> %define SIZE_OF_EXTPARAM (struc_extparam.end_of_struc)
   387                              <1> %define SIZE_OF_INT13EXT (struc_int13ext.end_of_struc)
   388                              <1> 
   389                                  %include "knl.h"
   390                              <1> ; knl.h
   391                              <1> ;
   392                              <1> ; header file for knl.asm
   393                              <1> ;
   394                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   395                              <1> ;
   396                              <1> 
   397                              <1> %define MAX_NAME_LENGTH   15
   398                              <1> %define MAX_KEYSTROKES    13
   399                              <1> 
   400                              <1> %define FAT16_DRVID_OFF   0x24               ; drive id offset in fat16
   401                              <1> %define FAT16_HIDSEC_OFF  0x1C               ; hidden sector offset in fat16
   402                              <1> %define FAT16_EXTBRID_OFF 0x26               ; EXBRID offset in fat16
   403                              <1> 
   404                              <1> %define FAT32_DRVID_OFF   0x40
   405                              <1> %define FAT32_HIDSEC_OFF  0x1C
   406                              <1> %define FAT32_EXTBRID_OFF 0x42
   407                              <1> 
   408                              <1> %define EXTBRID           0x29               ; ext boot record id for fat
   409                              <1> 
   410                              <1> %define INFOFLAG_SCHEDULED  0x8000       ; 1000,0000,0000,0000B
   411                              <1> %define INFOFLAG_HAVEKEYS   0x4000       ; 0100,0000,0000,0000B
   412                              <1> %define INFOFLAG_SWAPDRVID  0x2000       ; 0010,0000,0000,0000B
   413                              <1> %define INFOFLAG_AUTOACTIVE 0x1000       ; 0001,0000,0000,0000B
   414                              <1> %define INFOFLAG_ACTIVE     0x0800       ; 0000,1000,0000,0000B
   415                              <1> %define INFOFLAG_AUTOHIDE   0x0400       ; 0000,0100,0000,0000B
   416                              <1> %define INFOFLAG_HIDDEN     0x0200       ; 0000,0010,0000,0000B
   417                              <1> %define INFOFLAG_LOGICAL    0x0100       ; 0000,0001,0000,0000B
   418                              <1> 
   419                              <1> %define INFOFLAG_ISDRIVER   0x0080       ; 0000,0000,1000,0000B
   420                              <1> %define INFOFLAG_ISSPECIAL  0X0008       ; 0000,0000,0000,1000B
   421                              <1> 
   422                              <1> %define SPREC_BOOTPREV      0
   423                              <1> %define SPREC_QUIT          1
   424                              <1> %define SPREC_POWEROFF      2
   425                              <1> %define SPREC_RESTART       3
   426                              <1> 
   427                              <1> %define NUM_OF_SPREC        4
   428                              <1> 
   429                              <1> %define NUM_OF_INFOFLAGS    9
   430                              <1> 
   431                              <1> ; structure for boot record, including removable drives and partitions
   432                              <1> struc struc_bootrecord
   433 00000000 <res 00000002>      <1>       .flags           : resw 1  ; type flags of this record, see INFOFLAG_x
   434 00000002 <res 00000001>      <1>       .drive_id        : resb 1  ; drive id = 0 to 255
   435                              <1>                                  ; partition id used in linux,
   436 00000003 <res 00000001>      <1>       .part_id         : resb 1  ; 1-4 for primary partitions,
   437                              <1>                                  ; > 5 for logical partitions,
   438                              <1>                                  ; 0 for driver or special bootrecord.
   439 00000004 <res 00000001>      <1>       .type            : resb 1  ; partition type, = 0 : not a partition
   440 00000005 <res 00000001>      <1>       .reserved        : resb 1  ;
   441 00000006 <res 00000004>      <1>       .father_abs_addr : resd 1  ; father's LBA address
   442 0000000A <res 00000004>      <1>       .abs_addr        : resd 1  ; partition's abs LBA address
   443 0000000E <res 00000004>      <1>       .password        : resd 1  ; password of this record
   444 00000012 <res 00000004>      <1>       .schedule_time   : resd 1  ; schedule time
   445 00000016 <res 00000010>      <1>       .name            : resb 16 ; name of this record, zero ending.
   446 00000026 <res 0000001A>      <1>       .keystrokes      : resw 13 ; keystrokes to be preloaded.
   447                              <1>       .end_of_struc
   448                              <1> endstruc
   449                              <1> 
   450                              <1> ; structure for partition record
   451                              <1> struc struc_partition
   452 00000000 <res 00000001>      <1>       .state           : resb 1  ; = 0 : inactive; = drive id : active
   453 00000001 <res 00000001>      <1>       .start_head      : resb 1  ; start chs address of the partition
   454 00000002 <res 00000002>      <1>       .start_cs        : resw 1  ;
   455 00000004 <res 00000001>      <1>       .type            : resb 1  ; equal to the same item in struc_bootrecord
   456 00000005 <res 00000001>      <1>       .end_head        : resb 1  ; end chs address of the partition
   457 00000006 <res 00000002>      <1>       .end_cs          : resw 1  ;
   458 00000008 <res 00000004>      <1>       .relative_addr   : resd 1  ; the relative address of this partition
   459 0000000C <res 00000004>      <1>       .sectors         : resd 1  ; the number of sectors of the partition
   460                              <1>       .end_of_struc
   461                              <1> endstruc
   462                              <1> 
   463                              <1> %define SIZE_OF_BOOTRECORD (struc_bootrecord.end_of_struc)
   464                              <1> %define SIZE_OF_PARTITION  (struc_partition.end_of_struc)
   465                              <1> 
   466                                  %include "sbm.h"
   467                              <1> ; sbm.h
   468                              <1> ;
   469                              <1> ; header file for main.asm and loader.asm
   470                              <1> ;
   471                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   472                              <1> ;
   473                              <1> 
   474                              <1> %define BR_GOOD_FLAG    0XAA55
   475                              <1> %define BR_FLAG_OFF     0x01FE
   476                              <1> %define PART_TBL_OFF    0x01BE
   477                              <1> 
   478                              <1> %define SECTOR_SIZE     0x200              ; size of a sector
   479                              <1> %define CDSECTOR_SIZE   0x800              ; size of a CD-ROM sector
   480                              <1> 
   481                              <1> %define SBMK_MAGIC      0x4B4D4253         ; magic number of
   482                              <1>                                            ; Smart Boot Manager kernel.
   483                              <1> %define SBMK_VERSION    0x035A             ; version of kernel.
   484                              <1> %define SBMT_MAGIC      0x544D4253         ; magic number of
   485                              <1>                                            ; Smart Boot Manager theme.
   486                              <1> %define SBMT_VERSION    0x035A             ; version of theme.
   487                              <1> %define SBML_MAGIC      0x4C4D4253         ; magic number of
   488                              <1>                                            ; Smart Boot Manager loader.
   489                              <1> %define SBML_VERSION    0x0301             ; version of loader.
   490                              <1> 
   491                              <1> %define MAX_SBM_SIZE    30000              ; the max size of Smart Boot Manager
   492                              <1> 
   493                              <1> %define SIZE_OF_MBR     446                ; the size of master boot record
   494                              <1> 
   495                              <1> %define MAX_RECORD_NUM      32
   496                              <1> %define MAX_FLOPPY_NUM      2
   497                              <1> %define MAX_PASSWORD_LENGTH 16
   498                              <1> 
   499                              <1> %define BOOT_OFF        0x7C00             ; boot sector startup offset
   500                              <1> %define BOOT_SEG	0x07C0
   501                              <1> %define PART_OFF        0x0600             ; partition table offset
   502                              <1>                                            ; Smart Boot Manager kernel startup
   503                              <1> %define KERNEL_SEG      0x1000             ; Segment ( Off = 0 )
   504                              <1> %define KNLBACKUP_SEG   0x2000             ; Backup Segment ( Off = 0 )
   505                              <1> 
   506                              <1> %define STACK_SEG       0x3000
   507                              <1> %define STACK_SIZE      0x8000
   508                              <1> 
   509                              <1> %define SBM_SAVE_NBLKS  5
   510                              <1> 
   511                              <1> %ifndef STRUC_SBMK_HEADER
   512                              <1> %define STRUC_SBMK_HEADER
   513                              <1> 
   514                              <1> struc struc_block_map
   515 00000000 <res 00000001>      <1>       .n_sects         resb 1
   516 00000001 <res 00000004>      <1>       .lba_addr        resd 1
   517                              <1>       .end_of_struc
   518                              <1> endstruc
   519                              <1> 
   520                              <1> %define SIZE_OF_STRUC_BLOCK_MAP struc_block_map.end_of_struc
   521                              <1> 
   522                              <1> struc struc_sbml_header
   523 00000000 <res 00000003>      <1>       .jmp_cmd     resb 3               ; cli and jmp command.
   524                              <1> 
   525                              <1> ;=================== For floppy FAT12 filesystem ======================
   526 00000003 <res 00000008>      <1>       .bsOEM       resb 8               ; OEM String
   527 0000000B <res 00000002>      <1>       .bsSectSize  resw 1               ; Bytes per sector
   528 0000000D <res 00000001>      <1>       .bsClustSize resb 1               ; Sectors per cluster
   529 0000000E <res 00000002>      <1>       .bsRessect   resw 1               ; # of reserved sectors
   530 00000010 <res 00000001>      <1>       .bsFatCnt    resb 1               ; # of fat copies
   531 00000011 <res 00000002>      <1>       .bsRootSize  resw 1               ; size of root directory
   532 00000013 <res 00000002>      <1>       .bsTotalSect resw 1               ; total # of sectors if < 32 meg
   533 00000015 <res 00000001>      <1>       .bsMedia     resb 1               ; Media Descriptor
   534 00000016 <res 00000002>      <1>       .bsFatSize   resw 1               ; Size of each FAT
   535 00000018 <res 00000002>      <1>       .bsTrackSect resw 1               ; Sectors per track
   536 0000001A <res 00000002>      <1>       .bsHeadCnt   resw 1               ; number of read-write heads
   537 0000001C <res 00000004>      <1>       .bsHidenSect resd 1               ; number of hidden sectors
   538 00000020 <res 00000004>      <1>       .bsHugeSect  resd 1               ; if bsTotalSect is 0 this value is
   539                              <1>                                         ; the number of sectors
   540 00000024 <res 00000001>      <1>       .bsBootDrv   resb 1               ; holds drive that the bs came from
   541 00000025 <res 00000001>      <1>       .bsReserv    resb 1               ; not used for anything
   542 00000026 <res 00000001>      <1>       .bsBootSign  resb 1               ; boot signature 29h
   543 00000027 <res 00000004>      <1>       .bsVolID     resd 1               ; Disk volume ID also used for temp
   544                              <1>                                         ; sector # / # sectors to load
   545 0000002B <res 0000000B>      <1>       .bsVoLabel   resb 11              ; Volume Label
   546 00000036 <res 00000008>      <1>       .bsFSType    resb 8               ; File System type
   547                              <1> 
   548 0000003E <res 00000002>      <1>       .reserved    resb 2
   549                              <1> ;====================================================================
   550                              <1> 
   551 00000040 <res 00000004>      <1>       .magic           resd 1           ; magic number.
   552 00000044 <res 00000002>      <1>       .version         resw 1           ; version.
   553                              <1> 
   554 00000046 <res 00000019>      <1>       .block_map       resb SIZE_OF_STRUC_BLOCK_MAP * 5
   555                              <1>                                         ; block map for SBMK, 5 blocks allowed
   556                              <1> endstruc
   557                              <1> 
   558                              <1> struc struc_sbmk_header
   559 00000000 <res 00000004>      <1>       .jmp_cmd         resd 1           ; jmp and nop command.
   560 00000004 <res 00000004>      <1>       .magic           resd 1           ; magic number.
   561 00000008 <res 00000002>      <1>       .version         resw 1           ; version.
   562 0000000A <res 00000002>      <1>       .total_size      resw 1           ; the size of kernel code.
   563 0000000C <res 00000002>      <1>       .compressed_addr resw 1           ; the address of compressed part
   564 0000000E <res 00000001>      <1>       .checksum        resb 1           ; checksum value.
   565 0000000F <res 00000001>      <1>       .sectors         resb 1           ;
   566 00000010 <res 00000001>      <1>       .drvid           resb 1           ;
   567 00000011 <res 00000019>      <1>       .block_map       resb SIZE_OF_STRUC_BLOCK_MAP * 5
   568                              <1>                                         ; block map for SBMK, 5 blocks allowed
   569 0000002A <res 00000002>      <1>       .reserved1       resw 1           ;
   570                              <1> 
   571 0000002C <res 00000001>      <1>       .flags           resb 1           ; kernel flags. 
   572 0000002D <res 00000001>      <1>       .delay_time      resb 1           ; delay time ( seconds )
   573 0000002E <res 00000001>      <1>       .direct_boot     resb 1           ; >= MAX_RECORD_NUM means no
   574                              <1>                                         ; direct boot.
   575 0000002F <res 00000001>      <1>       .default_boot    resb 1           ; the record number will
   576                              <1>                                         ; be booted after the
   577                              <1>                                         ; delay time is up or ESC
   578                              <1>                                         ; key is pressed.
   579 00000030 <res 00000004>      <1>       .root_password   resd 1           ; root password.
   580                              <1> 
   581 00000034 <res 00000002>      <1>       .bootmenu_style  resb 2
   582 00000036 <res 00000004>      <1>       .cdrom_ioports   resw 2
   583 0000003A <res 00000002>      <1>       .y2k_last_year   resw 1
   584 0000003C <res 00000001>      <1>       .y2k_last_month  resb 1
   585 0000003D <res 00000003>      <1>       .reserved2       resb 3
   586                              <1> endstruc
   587                              <1> 
   588                              <1> struc struc_sbmk_data
   589 00000000 <res 00000800>      <1>       .boot_records    resb MAX_RECORD_NUM * SIZE_OF_BOOTRECORD
   590 00000800 <res 000001BE>      <1>       .sbml_codes      resb SIZE_OF_MBR
   591 000009BE <res 00000200>      <1>       .previous_mbr    resb SECTOR_SIZE
   592                              <1> 
   593 00000BBE <res 00000002>      <1>       .boot_menu_pos   resw 1
   594 00000BC0 <res 00000002>      <1>       .main_menu_pos   resw 1
   595 00000BC2 <res 00000002>      <1>       .record_menu_pos resw 1
   596 00000BC4 <res 00000002>      <1>       .sys_menu_pos    resw 1
   597                              <1> endstruc
   598                              <1> 
   599                              <1> struc struc_sbmt_header
   600 00000000 <res 00000004>      <1>       .magic           resd 1           ; magic number.
   601 00000004 <res 00000002>      <1>       .reserved        resw 1           ;
   602 00000006 <res 00000006>      <1>       .lang            resb 6           ; language info.
   603 0000000C <res 00000002>      <1>       .version         resw 1           ; theme version.
   604 0000000E <res 00000002>      <1>       .size            resw 1           ; theme size.
   605                              <1> endstruc
   606                              <1> 
   607                              <1> 
   608                              <1> %endif
   609                              <1> 
   610                                  %include "main.h"
   611                              <1> ; main.h
   612                              <1> ;
   613                              <1> ; header file for main.asm main-cmds.asm main-utils.asm
   614                              <1> ;
   615                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   616                              <1> ;
   617                              <1> 
   618                              <1> %define KNLFLAG_FIRSTSCAN   0x01
   619                              <1> %define KNLFLAG_SECURITY    0x02
   620                              <1> %define KNLFLAG_NOINT13EXT  0x04
   621                              <1> %define KNLFLAG_NOCDROM     0x08
   622                              <1> 
   623                              <1> %define KNLFLAG_REMLAST     0x10
   624                              <1> %define KNLFLAG_ONLYPARTS   0X20
   625                              <1> %define KNLFLAG_COMPRESSED  0x80
   626                              <1> 
   627                              <1> %define BMSTYLE_FULL        0
   628                              <1> %define BMSTYLE_NOFLAGS     1
   629                              <1> %define BMSTYLE_NONUMBER    2
   630                              <1> %define BMSTYLE_NOTYPE      3
   631                              <1> 
   632                                  %include "evtcode.h"
   633                              <1> ;
   634                              <1> ; evtcode.h
   635                              <1> ;
   636                              <1> ; definiation of event codes
   637                              <1> ;
   638                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   639                              <1> ;
   640                              <1> 
   641                              <1> %define kbEsc                0x011B
   642                              <1> %define kbAltEsc             0x0100
   643                              <1> 
   644                              <1> %define kbF1                 0x3B00
   645                              <1> %define kbAltF1              0x6800
   646                              <1> %define kbCtrlF1             0x5E00
   647                              <1> %define kbShiftF1            0x5400
   648                              <1> 
   649                              <1> %define kbF2                 0x3C00
   650                              <1> %define kbAltF2              0x6900
   651                              <1> %define kbCtrlF2             0x5F00
   652                              <1> %define kbShiftF2            0x5500
   653                              <1> 
   654                              <1> %define kbF3                 0x3D00
   655                              <1> %define kbAltF3              0x6A00
   656                              <1> %define kbCtrlF3             0x6000
   657                              <1> %define kbShiftF3            0x5600
   658                              <1> 
   659                              <1> %define kbF4                 0x3E00
   660                              <1> %define kbAltF4              0x6B00
   661                              <1> %define kbCtrlF4             0x6100
   662                              <1> %define kbShiftF4            0x5700
   663                              <1> 
   664                              <1> %define kbF5                 0x3F00
   665                              <1> %define kbAltF5              0x6C00
   666                              <1> %define kbCtrlF5             0x6200
   667                              <1> %define kbShiftF5            0x5800
   668                              <1> 
   669                              <1> %define kbF6                 0x4000
   670                              <1> %define kbAltF6              0x6D00
   671                              <1> %define kbCtrlF6             0x6300
   672                              <1> %define kbShiftF6            0x5900
   673                              <1> 
   674                              <1> %define kbF7                 0x4100
   675                              <1> %define kbAltF7              0x6E00
   676                              <1> %define kbCtrlF7             0x6400
   677                              <1> %define kbShiftF7            0x5A00
   678                              <1> 
   679                              <1> %define kbF8                 0x4200
   680                              <1> %define kbAltF8              0x6F00
   681                              <1> %define kbCtrlF8             0x6500
   682                              <1> %define kbShiftF8            0x5B00
   683                              <1> 
   684                              <1> %define kbF9                 0x4300
   685                              <1> %define kbAltF9              0x7000
   686                              <1> %define kbCtrlF9             0x6600
   687                              <1> %define kbShiftF9            0x5C00
   688                              <1> 
   689                              <1> %define kbF10                0x4400
   690                              <1> %define kbAltF10             0x7100
   691                              <1> %define kbCtrlF10            0x6700
   692                              <1> %define kbShiftF10           0x5D00
   693                              <1> 
   694                              <1> %define kbF11                0x8500
   695                              <1> %define kbAltF11             0x8B00
   696                              <1> %define kbCtrlF11            0x8900
   697                              <1> %define kbShiftF11           0x8700
   698                              <1> 
   699                              <1> %define kbF12                0x8600
   700                              <1> %define kbAltF12             0x8C00
   701                              <1> %define kbCtrlF12            0x8A00
   702                              <1> %define kbShiftF12           0x8800
   703                              <1> 
   704                              <1> %define kbTab                0x0F09
   705                              <1> %define kbAltTab             0xA500
   706                              <1> %define kbCtrlTab            0x9400
   707                              <1> %define kbShiftTab           0x0F00
   708                              <1> 
   709                              <1> %define kbBack               0x0E08
   710                              <1> %define kbAltBack            0x0E00
   711                              <1> %define kbCtrlBack           0x0E7F
   712                              <1> 
   713                              <1> %define kbEnter              0x1C0D
   714                              <1> %define kbAltEnter           0x1C00
   715                              <1> %define kbCtrlEnter          0x1C0A
   716                              <1> %define kbEnhEnter           0xE00D
   717                              <1> %define kbEnhAltEnter        0xA600
   718                              <1> %define kbEnhCtrlEnter       0xE00A
   719                              <1> 
   720                              <1> %define kbSpace              0x3920
   721                              <1> 
   722                              <1> %define kbIns                0x5200
   723                              <1> %define kbEnhIns             0x52E0
   724                              <1> %define kbCtrlIns            0x9200
   725                              <1> %define kbEnhCtrlIns         0x92E0
   726                              <1> %define kbEnhAltIns          0xA200
   727                              <1> 
   728                              <1> %define kbHome               0x4700
   729                              <1> %define kbEnhHome            0x47E0
   730                              <1> %define kbCtrlHome           0x7700
   731                              <1> %define kbEnhCtrlHome        0x77E0
   732                              <1> %define kbEnhAltHome         0x9700
   733                              <1> 
   734                              <1> %define kbPgUp               0x4900
   735                              <1> %define kbEnhPgUp            0x49E0
   736                              <1> %define kbCtrlPgUp           0x8400
   737                              <1> %define kbEnhCtrlPgUp        0x84E0
   738                              <1> %define kbEnhAltPgUp         0x9900
   739                              <1> 
   740                              <1> %define kbEnd                0x4F00
   741                              <1> %define kbEnhEnd             0x4FE0
   742                              <1> %define kbCtrlEnd            0x7500
   743                              <1> %define kbEnhCtrlEnd         0x75E0
   744                              <1> %define kbEnhAltEnd          0x9F00
   745                              <1> 
   746                              <1> %define kbDel                0x5300
   747                              <1> %define kbEnhDel             0x53E0
   748                              <1> %define kbCtrlDel            0x9300
   749                              <1> %define kbEnhCtrlDel         0x93E0
   750                              <1> %define kbEnhAltDel          0xA300
   751                              <1> 
   752                              <1> %define kbPgDn               0x5100
   753                              <1> %define kbEnhPgDn            0x51E0
   754                              <1> %define kbCtrlPgDn           0x7600
   755                              <1> %define kbEnhCtrlPgDn        0x76E0
   756                              <1> %define kbEnhAltPgDn         0xA100
   757                              <1> 
   758                              <1> %define kbUp                 0x4800
   759                              <1> %define kbCtrlUp             0x8D00
   760                              <1> %define kbEnhUp              0x48E0
   761                              <1> %define kbEnhAltUp           0x9800
   762                              <1> %define kbEnhCtrlUp          0x8DE0
   763                              <1> 
   764                              <1> %define kbDown               0x5000
   765                              <1> %define kbCtrlDown           0x9100
   766                              <1> %define kbEnhDown            0x50E0
   767                              <1> %define kbEnhAltDown         0xA000
   768                              <1> %define kbEnhCtrlDown        0x91E0
   769                              <1> 
   770                              <1> %define kbLeft               0x4b00
   771                              <1> %define kbCtrlLeft           0x7300
   772                              <1> %define kbEnhLeft            0x4BE0
   773                              <1> %define kbEnhAltLeft         0x9B00
   774                              <1> %define kbEnhCtrlLeft        0x73E0
   775                              <1> 
   776                              <1> %define kbRight              0x4d00
   777                              <1> %define kbCtrlRight          0x7400
   778                              <1> %define kbEnhRight           0x4DE0
   779                              <1> %define kbEnhAltRight        0x9D00
   780                              <1> %define kbEnhCtrlRight       0x74E0
   781                              <1> 
   782                              <1> %define kbGraySlash          0xE02F
   783                              <1> %define kbGrayStar           0x372A
   784                              <1> %define kbGrayMinus          0x4A2D
   785                              <1> %define kbGrayPlus           0x4E2B
   786                              <1> 
   787                              <1> %define kbCtrlQ              0x1011
   788                              <1> %define kbCtrlW              0x1117
   789                              <1> %define kbCtrlE              0x1205
   790                              <1> %define kbCtrlR              0x1312
   791                              <1> %define kbCtrlT              0x1414
   792                              <1> %define kbCtrlY              0x1519
   793                              <1> %define kbCtrlU              0x1615
   794                              <1> %define kbCtrlI              0x1709
   795                              <1> %define kbCtrlO              0x180F
   796                              <1> %define kbCtrlP              0x1910
   797                              <1> %define kbCtrlA              0x1E01
   798                              <1> %define kbCtrlS              0x1f13
   799                              <1> %define kbCtrlD              0x2004
   800                              <1> %define kbCtrlF              0x2106
   801                              <1> %define kbCtrlG              0x2207
   802                              <1> %define kbCtrlH              0x2308
   803                              <1> %define kbCtrlJ              0x240A
   804                              <1> %define kbCtrlK              0x250b
   805                              <1> %define kbCtrlL              0x260C
   806                              <1> %define kbCtrlZ              0x2C1A
   807                              <1> %define kbCtrlX              0x2D18
   808                              <1> %define kbCtrlC              0x2E03
   809                              <1> %define kbCtrlV              0x2F16
   810                              <1> %define kbCtrlB              0x3002
   811                              <1> %define kbCtrlN              0x310E
   812                              <1> %define kbCtrlM              0x320D
   813                              <1> 
   814                              <1> %define kbLowerY             0x1579
   815                              <1> %define kbUpperY             0x1559
   816                              <1> 
   817                              <1> %define kbSlash              0x352F
   818                              <1> %define kbQuestion           0x353F
   819                              <1> 
   820                              <1> %define kbAltS               0x1F00
   821                              <1> %define kbAltR               0x1300
   822                              <1> 
   823                              <1> %define kbOne                0x0231
   824                              <1> 
   825                              <1> %define kbRightShiftMask     0x01
   826                              <1> %define kbLeftShiftMask      0x02
   827                              <1> %define kbShiftMask          0x03
   828                              <1> %define kbCtrlMask           0x04
   829                              <1> %define kbAltMask            0x08
   830                              <1> %define kbScrollMask         0x10
   831                              <1> %define kbNumLockMask        0x20
   832                              <1> %define kbCapsLockMask       0x40
   833                              <1> %define kbInsertMask         0x80
   834                              <1> 
   835                              <1> %define kbStateKeysMask   (kbScrollMask | kbNumLockMask | kbCapsLockMask | kbInsertMask)
   836                              <1> 
   837                              <1> %define EVTCODE_COMMAND		0xF0
   838                              <1> %define EVTCODE_KEYPRESS        0x01
   839                              <1> %define EVTCODE_KEYRELEASE      0x02
   840                              <1> %define EVTCODE_BROADCAST	0x04
   841                              <1> 
   842                              <1> ; Broadcast events
   843                              <1> %define EVENT_REDRAW_ROOT  ((EVTCODE_COMMAND | EVTCODE_BROADCAST) << 8 | 0x0001)
   844                              <1> %define EVENT_BOOT_DEFAULT ((EVTCODE_COMMAND | EVTCODE_BROADCAST) << 8 | 0x0002)
   845                              <1> 
   846                              <1> ; Normal events
   847                              <1> %define EVENT_TOGGLE_MENU  ((EVTCODE_COMMAND ) << 8 | 0x0001)
   848                              <1> 
   849                              <1> ; Key press event
   850                              <1> %define EVENT_RIGHTSHIFT_PRESS    ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbRightShiftMask)
   851                              <1> %define EVENT_LEFTSHIFT_PRESS     ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbLeftShiftMask)
   852                              <1> %define EVENT_SHIFT_PRESS         ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbShiftMask)
   853                              <1> %define EVENT_CTRL_PRESS          ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbCtrlMask)
   854                              <1> %define EVENT_ALT_PRESS           ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbAltMask)
   855                              <1> %define EVENT_SCROLL_ON           ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbScrollMask)
   856                              <1> %define EVENT_NUMLOCK_ON          ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbNumLockMask)
   857                              <1> %define EVENT_CAPSLOCK_ON         ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbCapsLockMask)
   858                              <1> %define EVENT_INSERT_ON           ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbInsertMask)
   859                              <1> 
   860                              <1> %define EVENT_RIGHTSHIFT_RELEASE  ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbRightShiftMask)
   861                              <1> %define EVENT_LEFTSHIFT_RELEASE   ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbLeftShiftMask)
   862                              <1> %define EVENT_SHIFT_RELEASE       ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbShiftMask)
   863                              <1> %define EVENT_CTRL_RELEASE        ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbCtrlMask)
   864                              <1> %define EVENT_ALT_RELEASE         ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbAltMask)
   865                              <1> %define EVENT_SCROLL_OFF          ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbScrollMask)
   866                              <1> %define EVENT_NUMLOCK_OFF         ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbNumLockMask)
   867                              <1> %define EVENT_CAPSLOCK_OFF        ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbCapsLockMask)
   868                              <1> %define EVENT_INSERT_OFF          ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbInsertMask)
   869                              <1> 
   870                              <1> 
   871                                  
   872                                  %define GOOD_RECORD_NUMBER    (main_windows_data.boot_menu + struc_menu_box.items_num)
   873                                  %define FOCUS_RECORD          (main_windows_data.boot_menu + struc_menu_box.focus_item)
   874                                  %define FIRST_VISIBLE_RECORD  (main_windows_data.boot_menu + struc_menu_box.first_visible_item)
   875                                  %define BOOT_MENU_AREA_HEIGHT (main_windows_data.boot_menu + struc_menu_box.menu_area_size + 1) 
   876                                  
   877                                  %define ADDR_SBMK_MAGIC            (sbmk_header + struc_sbmk_header.magic)
   878                                  %define ADDR_SBMK_VERSION          (sbmk_header + struc_sbmk_header.version)
   879                                  %define ADDR_SBMK_TOTAL_SIZE       (sbmk_header + struc_sbmk_header.total_size)
   880                                  %define ADDR_SBMK_COMPRESSED_ADDR  (sbmk_header + struc_sbmk_header.compressed_addr)
   881                                  %define ADDR_SBMK_CHECKSUM         (sbmk_header + struc_sbmk_header.checksum)
   882                                  %define ADDR_SBMK_SECTORS          (sbmk_header + struc_sbmk_header.sectors)
   883                                  %define ADDR_SBMK_DRVID            (sbmk_header + struc_sbmk_header.drvid)
   884                                  %define ADDR_SBMK_BLOCK_MAP        (sbmk_header + struc_sbmk_header.block_map)
   885                                  %define ADDR_SBMK_FLAGS            (sbmk_header + struc_sbmk_header.flags)
   886                                  %define ADDR_SBMK_DELAY_TIME       (sbmk_header + struc_sbmk_header.delay_time)
   887                                  %define ADDR_SBMK_DIRECT_BOOT      (sbmk_header + struc_sbmk_header.direct_boot)
   888                                  %define ADDR_SBMK_DEFAULT_BOOT     (sbmk_header + struc_sbmk_header.default_boot)
   889                                  %define ADDR_SBMK_ROOT_PASSWORD    (sbmk_header + struc_sbmk_header.root_password)
   890                                  %define ADDR_SBMK_BOOTMENU_STYLE   (sbmk_header + struc_sbmk_header.bootmenu_style)
   891                                  %define ADDR_SBMK_CDROM_IOPORTS    (sbmk_header + struc_sbmk_header.cdrom_ioports)
   892                                  %define ADDR_SBMK_Y2K_LAST_YEAR    (sbmk_header + struc_sbmk_header.y2k_last_year)
   893                                  %define ADDR_SBMK_Y2K_LAST_MONTH   (sbmk_header + struc_sbmk_header.y2k_last_month)
   894                                  %define ADDR_SBMK_BOOT_RECORDS     (sbmk_data + struc_sbmk_data.boot_records)
   895                                  %define ADDR_SBMK_SBML_CODES       (sbmk_data + struc_sbmk_data.sbml_codes)
   896                                  %define ADDR_SBMK_PREVIOUS_MBR     (sbmk_data + struc_sbmk_data.previous_mbr)
   897                                  %define ADDR_SBMK_BOOT_MENU_POS    (sbmk_data + struc_sbmk_data.boot_menu_pos)
   898                                  %define ADDR_SBMK_MAIN_MENU_POS    (sbmk_data + struc_sbmk_data.main_menu_pos)
   899                                  %define ADDR_SBMK_RECORD_MENU_POS  (sbmk_data + struc_sbmk_data.record_menu_pos)
   900                                  %define ADDR_SBMK_SYS_MENU_POS     (sbmk_data + struc_sbmk_data.sys_menu_pos)
   901                                  
   902                                  	bits 16
   903                                  
   904                                  %ifdef EMULATE_PROG
   905                                  	org 0x100
   906                                  %else
   907                                  	org 0
   908                                  %endif
   909                                  
   910                                  	section .text
   911                                          
   912                                  start_of_sbm:
   913                                  start_of_kernel:
   914                                  
   915                                  ;=============================================================================
   916                                  ;the header of Smart Boot Manager kernel
   917                                  ;=============================================================================
   918                                  sbmk_header     istruc  struc_sbmk_header
   919 00000000 E9030C                  	        jmp sbm_start
   920 00000003 90                      	        nop
   921                                  ;!!! PLEASE DON NOT CHANGE THE SIZE AND ORDER OF FOLLOWING DATA !!!
   922 00000004 53424D4B                    at struc_sbmk_header.magic,          dd SBMK_MAGIC   ; magic number = 'SBMK', 4 bytes.
   923 00000008 5A03                        at struc_sbmk_header.version,        dw SBMK_VERSION ; version, high byte is major version,
   924                                                                                           ; low byte is minor version.
   925 0000000A 9949                        at struc_sbmk_header.total_size,     dw (end_of_kernel - start_of_kernel)
   926                                                                                           ; set to total(compressed) 
   927                                                                                           ; size by installer
   928 0000000C [250C]                      at struc_sbmk_header.compressed_addr,dw sbm_real_start ; The address of compressed part
   929                                  
   930 0000000E 00                          at struc_sbmk_header.checksum,       db 0            ; checksum of the kernel program.
   931                                  
   932 0000000F 00                          at struc_sbmk_header.sectors,        db 0            ; kernel size in sectors
   933 00000010 00                          at struc_sbmk_header.drvid,          db 0
   934 00000011 00<rept>                    at struc_sbmk_header.block_map,      times SIZE_OF_STRUC_BLOCK_MAP * 5 db 0
   935 0000002A 55AA                        at struc_sbmk_header.reserved1,      dw  BR_GOOD_FLAG
   936                                  ;=============================================================================
   937                                  ; MAIN data area
   938                                  ;=============================================================================
   939 0000002C 01                          at struc_sbmk_header.flags,          db KNLFLAG_FIRSTSCAN 
   940 0000002D 1E                          at struc_sbmk_header.delay_time,     db 30           ; delay time ( seconds )
   941 0000002E FF                          at struc_sbmk_header.direct_boot,    db 0xff         ; >= MAX_RECORD_NUM means no
   942                                                                                           ; direct boot.
   943 0000002F FF                          at struc_sbmk_header.default_boot,   db 0xff         ; the record number will
   944                                                                                           ; be booted after the
   945                                                                                           ; delay time is up or ESC
   946                                                                                           ; key is pressed.
   947 00000030 00000000                    at struc_sbmk_header.root_password,  dd 0
   948                                  
   949 00000034 0000                        at struc_sbmk_header.bootmenu_style, db 0,0
   950 00000036 00000000                    at struc_sbmk_header.cdrom_ioports,  dw 0, 0
   951 0000003A 0000                        at struc_sbmk_header.y2k_last_year,  dw 0
   952 0000003C 00                          at struc_sbmk_header.y2k_last_month, db 0
   953 0000003D 0055AA                      at struc_sbmk_header.reserved2,      db 0,0x55,0xAA
   954                                                  iend
   955                                  
   956                                  end_of_sbmk_header:
   957                                  
   958                                  ;=============================================================================
   959                                  ; Other DATA
   960                                  ;=============================================================================
   961                                  sbmk_data       istruc struc_sbmk_data
   962                                  ; buffer to store boot records
   963 00000040 00<rept>                    at struc_sbmk_data.boot_records, times MAX_RECORD_NUM * SIZE_OF_BOOTRECORD db 0
   964 00000840 00<rept>                    at struc_sbmk_data.sbml_codes,   times SIZE_OF_MBR db 0
   965 000009FE 00<rept>                    at struc_sbmk_data.previous_mbr, times SECTOR_SIZE db 0
   966                                  
   967                                  ; private data 
   968 00000BFE 0E06                        at struc_sbmk_data.boot_menu_pos,    dw 0x060E
   969 00000C00 0101                        at struc_sbmk_data.main_menu_pos,    dw 0x0101
   970 00000C02 0202                        at struc_sbmk_data.record_menu_pos,  dw 0x0202
   971 00000C04 0303                        at struc_sbmk_data.sys_menu_pos,     dw 0x0303
   972                                                  iend
   973                                  
   974                                  
   975                                  end_of_sbmk_data:
   976                                  
   977                                  
   978                                  ;=============================================================================
   979                                  ; Program entry
   980                                  ;=============================================================================
   981                                  
   982                                  sbm_start:
   983                                  
   984                                  %ifndef EMULATE_PROG                            ; real program goes here.
   985 00000C06 FA                      	cli
   986 00000C07 B80030                  	mov ax, STACK_SEG
   987 00000C0A 8ED0                    	mov ss, ax                              ; ss:sp = 0x3000:0x1000
   988 00000C0C BC0080                  	mov sp, STACK_SIZE                      ;
   989                                  
   990 00000C0F 0E                      	push cs
   991 00000C10 1F                      	pop ds
   992 00000C11 FB                      	sti
   993                                  
   994                                  ;Save current driver id for future use.
   995 00000C12 8816[1000]              	mov [ADDR_SBMK_DRVID], dl
   996                                  
   997                                  ;Backup Smart BootManager and decompress it, if it's compressed.
   998 00000C16 680020                  	push word KNLBACKUP_SEG
   999 00000C19 07                      	pop es
  1000                                  
  1001 00000C1A 31F6                    	xor si, si
  1002 00000C1C 31FF                    	xor di, di
  1003                                  
  1004 00000C1E 8B0E[0A00]              	mov cx, [ADDR_SBMK_TOTAL_SIZE]
  1005 00000C22 FC                      	cld
  1006 00000C23 F3A4                    	rep movsb
  1007                                  
  1008                                  %ifdef COMPRESS_SBM
  1009                                  ;test if it's compressed
  1010                                  	test byte [ADDR_SBMK_FLAGS], KNLFLAG_COMPRESSED
  1011                                  	jmpz sbm_real_start
  1012                                  
  1013                                  ;decompress SBM
  1014                                  	mov si, sbm_real_start
  1015                                  	push si
  1016                                  	pop di
  1017                                  
  1018                                  	push ds
  1019                                  	push es
  1020                                  	pop ds
  1021                                  	pop es
  1022                                  
  1023                                  	mov bx, 0x800F
  1024                                  	xor cx, cx
  1025                                  	xor bp, bp
  1026                                  	inc bp
  1027                                  	push ds
  1028                                  	pop dx
  1029                                  
  1030                                  	jmp short decompr_start_n2b		; decompress SBM
  1031                                  
  1032                                  
  1033                                  ;=============================================================================
  1034                                  %include "n2b_d8e.ash"
  1035                                  ;=============================================================================
  1036                                  
  1037                                  %endif
  1038                                  %endif
  1039                                  
  1040                                  ;=============================================================================
  1041                                  ; Compressed area starts here.
  1042                                  ;=============================================================================
  1043                                  sbm_real_start:
  1044 00000C25 0E                      	push cs					; reinitialize cs, ds
  1045 00000C26 0E                      	push cs
  1046 00000C27 1F                      	pop ds
  1047 00000C28 07                      	pop es
  1048                                  
  1049                                  ; clear the temp data area.
  1050 00000C29 BF[ED1B]                	mov di, start_of_tmp_data
  1051 00000C2C B91E1D                  	mov cx, end_of_tmp_data - start_of_tmp_data
  1052 00000C2F E8CE22                          call clear_memory
  1053                                  
  1054                                  ; Install My Int 13H handle
  1055 00000C32 B301                    	mov bl, 1
  1056 00000C34 E8262F                  	call install_myint13h
  1057                                  
  1058                                  ;Initializing the CD-ROMs..
  1059                                  %ifndef DISABLE_CDBOOT
  1060 00000C37 F606[2C00]08            	test byte [ADDR_SBMK_FLAGS], KNLFLAG_NOCDROM
  1061 00000C3C 750B                    	jnz .not_set_cdrom_ports
  1062 00000C3E 8B1E[3600]              	mov bx, [ADDR_SBMK_CDROM_IOPORTS]
  1063 00000C42 8B0E[3800]              	mov cx, [ADDR_SBMK_CDROM_IOPORTS+2]
  1064 00000C46 E8822F                  	call set_io_ports
  1065                                  .not_set_cdrom_ports:
  1066                                  %endif
  1067                                  
  1068                                  
  1069                                  %ifndef EMULATE_PROG
  1070                                  
  1071                                  ; Set "No Int 13h Extension" flag
  1072 00000C49 30C0                    	xor al, al
  1073 00000C4B F606[2C00]04            	test byte [ADDR_SBMK_FLAGS], KNLFLAG_NOINT13EXT
  1074 00000C50 7502                    	jnz .no_int13_ext
  1075 00000C52 FEC0                            inc al
  1076                                  .no_int13_ext:
  1077 00000C54 A2[5C3B]                	mov [use_int13_ext], al
  1078                                  
  1079                                  ; Do some initialization
  1080 00000C57 E86809                  	call main_init_theme		; initialize the theme
  1081 00000C5A E8490A                  	call main_init_video		; initialize the video mode.
  1082 00000C5D E86E1A                          call window_initialize
  1083                                  
  1084                                  ; Check if needs scan boot records.
  1085 00000C60 F606[2C00]01            	test byte [ADDR_SBMK_FLAGS], KNLFLAG_FIRSTSCAN
  1086 00000C65 740D                    	jz .no_first_scan
  1087                                  
  1088 00000C67 E8780A                  	call main_init_boot_records	; if it's the first time
  1089                                  					; to run this program,
  1090                                  					; call the init_boot_records.
  1091 00000C6A E84C0A                  	call main_init_good_record_list
  1092                                  
  1093 00000C6D 8026[2C00]FE            	and byte [ADDR_SBMK_FLAGS], ~ KNLFLAG_FIRSTSCAN
  1094 00000C72 EB3E                    	jmp short .show_menu
  1095                                  
  1096                                  .no_first_scan:
  1097                                  
  1098                                  %ifdef Y2K_BUGFIX
  1099                                  
  1100                                  ;Initialize the Y2K bug workaround stuff
  1101                                  
  1102                                  ;Y2K fix for some BIOS which don't boot with years after 1999, we need to set
  1103                                  ;the year based on the last time we booted the machine
  1104                                  	mov ah, 4
  1105                                  	int 0x1a				;(bcd) cx=year dh=month ...
  1106                                  	jc .y2k_donothing
  1107                                  	mov ax,[ADDR_SBMK_Y2K_LAST_YEAR]
  1108                                  	or ax,ax
  1109                                  	jz .y2k_donothing
  1110                                  	cmp [ADDR_SBMK_Y2K_LAST_MONTH],dh
  1111                                  	je .y2k_unbug
  1112                                  	jb .y2k_chmonth
  1113                                  	inc ax	;we enter here only if above wich means we don't have CF
  1114                                  	daa	;this is a must as daa uses CF and inc doesn't set it
  1115                                  	xchg ah,al
  1116                                  	adc al,0
  1117                                  	daa
  1118                                  	xchg ah,al
  1119                                  	mov [ADDR_SBMK_Y2K_LAST_YEAR],ax
  1120                                  .y2k_chmonth:
  1121                                  	mov [ADDR_SBMK_Y2K_LAST_MONTH],dh
  1122                                          inc byte [main_tmp.change_occured]
  1123                                  .y2k_unbug:
  1124                                  	mov cx,ax
  1125                                  	mov ah,5				; FIXME this can go one day
  1126                                  	int 0x1a				; back if the day ends
  1127                                  .y2k_donothing:
  1128                                  %endif
  1129                                  
  1130                                  ; go ahead!
  1131                                  
  1132                                  ; Initialize the good record list
  1133 00000C74 E8420A                  	call main_init_good_record_list
  1134                                  
  1135                                  ; Initialize the keyboard shift var, and test if Ctrl is pressed down.
  1136 00000C77 B402                    	mov ah, 0x02			; test the keyboard status,
  1137 00000C79 E89C20                  	call bioskey			; if ctrl pressed then show
  1138 00000C7C A2[062F]                        mov [utils_tmp.kbd_last_shift], al ; Initialize the kbd stat reg.
  1139 00000C7F A804                    	test al, kbCtrlMask		; menu directly,
  1140 00000C81 752F                    	jnz .show_menu			;
  1141                                  
  1142                                  ; Check direct boot, and schedule boot
  1143 00000C83 A0[2E00]                	mov al, [ADDR_SBMK_DIRECT_BOOT]	; check if need boot directly.
  1144 00000C86 3C20                    	cmp al, MAX_RECORD_NUM		;
  1145 00000C88 7213                    	jb .go_direct_boot
  1146                                  
  1147 00000C8A E8260F                  	call main_do_schedule		; implement the schedule table.
  1148                                  
  1149 00000C8D 803E[2D00]00            	cmp byte [ADDR_SBMK_DELAY_TIME], 0
  1150 00000C92 751E                    	jnz .show_menu			; delay_time = 0, boot the
  1151                                  					; default record directly.
  1152 00000C94 A0[2F00]                	mov al, [ADDR_SBMK_DEFAULT_BOOT]
  1153 00000C97 3C20                    	cmp al, MAX_RECORD_NUM
  1154 00000C99 720F                    	jb .go_def_boot
  1155 00000C9B EB15                    	jmp short .show_menu
  1156                                          
  1157                                  .go_direct_boot:
  1158 00000C9D C606[2E00]FF            	mov byte [ADDR_SBMK_DIRECT_BOOT], 0xff ; clear the direct boot sig.
  1159 00000CA2 E8500F                  	call main_save_boot_manager
  1160 00000CA5 7208                    	jc .disk_error
  1161                                  
  1162 00000CA7 A2[2F00]                	mov [ADDR_SBMK_DEFAULT_BOOT], al
  1163                                  
  1164                                  .go_def_boot:
  1165 00000CAA E8520E                  	call main_boot_default
  1166 00000CAD EB03                    	jmp short .show_menu
  1167                                  
  1168                                  .disk_error:
  1169 00000CAF E8D40D                  	call main_show_disk_error
  1170                                  
  1171                                  %else
  1172                                  ; For emulator program
  1173                                  	call main_init_video			; here is the code for
  1174                                  	call main_init_boot_records		; emulate program.
  1175                                          call main_init_good_record_list
  1176                                  	call main_do_schedule
  1177                                  %endif
  1178                                  
  1179                                  
  1180                                  .show_menu:
  1181 00000CB2 E86009                  	call main_init_all_menus	; initialize the command menus
  1182                                  
  1183                                  ;Initialize  time count var
  1184 00000CB5 A0[2D00]                	mov al, [ADDR_SBMK_DELAY_TIME]
  1185 00000CB8 3CFF                    	cmp al, 255
  1186 00000CBA 7305                    	jae .not_count_time			; if delay_time = 255
  1187 00000CBC A2[282F]                	mov [main_tmp.time_count], al		; then do not count time.
  1188 00000CBF 30C0                    	xor al, al
  1189                                  
  1190                                  .not_count_time:
  1191 00000CC1 A2[2B2F]                	mov [main_tmp.key_pressed], al
  1192                                  
  1193                                  ; Set focus bar to the default record
  1194 00000CC4 8A1E[2F00]              	mov bl, [ADDR_SBMK_DEFAULT_BOOT]
  1195 00000CC8 8D36[082F]              	lea si, [main_tmp.good_record_list]
  1196 00000CCC 8A0E[C747]              	mov cl, [GOOD_RECORD_NUMBER]
  1197 00000CD0 30ED                    	xor ch, ch
  1198 00000CD2 30FF                    	xor bh, bh
  1199                                          
  1200                                  .loop_search_def:
  1201 00000CD4 AC                      	lodsb
  1202 00000CD5 38D8                    	cmp al, bl
  1203 00000CD7 7406                    	je .found_def
  1204 00000CD9 FEC7                    	inc bh
  1205 00000CDB E2F7                    	loop .loop_search_def
  1206 00000CDD EB14                    	jmp short .go_ahead
  1207                                  
  1208                                  .found_def:
  1209 00000CDF 883E[C847]              	mov [FOCUS_RECORD], bh
  1210 00000CE3 3A3E[C547]              	cmp bh, [BOOT_MENU_AREA_HEIGHT]
  1211 00000CE7 720A                    	jb .go_ahead
  1212 00000CE9 FEC7                    	inc bh
  1213 00000CEB 2A3E[C547]              	sub bh, [BOOT_MENU_AREA_HEIGHT]
  1214 00000CEF 883E[C947]              	mov [FIRST_VISIBLE_RECORD], bh
  1215                                  
  1216                                  ; Run the UI system
  1217                                  .go_ahead:
  1218 00000CF3 BB[8747]                        mov bx, main_windows_data.root_window
  1219 00000CF6 BE[A147]                        mov si, main_windows_data.boot_menu
  1220 00000CF9 E8071A                          call window_execute
  1221                                  
  1222                                  .halt:
  1223 00000CFC EBFE                            jmp short .halt
  1224                                  
  1225                                  ;=============================================================================
  1226                                  ;include area
  1227                                  ;=============================================================================
  1228                                  
  1229                                  %include "main-cmds.asm"
  1230                              <1> ; asmsyntax=nasm
  1231                              <1> ;
  1232                              <1> ; main-cmds.asm
  1233                              <1> ;
  1234                              <1> ; command handles for main program
  1235                              <1> ;
  1236                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
  1237                              <1> ;
  1238                              <1> 
  1239                              <1> %ifdef MAIN
  1240                              <1> 
  1241                              <1> ;=============================================================================
  1242                              <1> ;main_show_help ---- show the help window
  1243                              <1> ;=============================================================================
  1244                              <1> main_show_help:
  1245 00000CFE 8B36[564A]          <1>         mov si, [str_idx.help_content]
  1246 00000D02 09F6                <1>         or si, si
  1247 00000D04 740D                <1>         jz .end
  1248                              <1>         
  1249 00000D06 A0[DF49]            <1> 	mov al, [color.help_msg]
  1250 00000D09 8B1E[DD49]          <1> 	mov bx, [color.help_win]
  1251 00000D0D BA[144A]            <1>         mov dx, str_idx.help
  1252 00000D10 E89E13              <1>         call message_box
  1253                              <1> .end:
  1254 00000D13 C3                  <1>         ret
  1255                              <1> 
  1256                              <1> ;=============================================================================
  1257                              <1> ;main_show_about ---- show the about window
  1258                              <1> ;=============================================================================
  1259                              <1> main_show_about:
  1260 00000D14 8B36[544A]          <1>         mov si, [str_idx.about_content]
  1261 00000D18 09F6                <1>         or si, si
  1262 00000D1A 740D                <1>         jz .end
  1263                              <1>         
  1264 00000D1C A0[E249]            <1>         mov al, [color.about_msg]
  1265 00000D1F 8B1E[E049]          <1>         mov bx, [color.about_win]
  1266 00000D23 BA[104A]            <1>         mov dx, str_idx.about
  1267 00000D26 E88813              <1>         call message_box
  1268                              <1> .end:
  1269 00000D29 C3                  <1>         ret
  1270                              <1> 
  1271                              <1> ;=============================================================================
  1272                              <1> ;main_show_main_menu ---- show the main command menu
  1273                              <1> ;=============================================================================
  1274                              <1> main_show_main_menu:
  1275 00000D2A BE[CC47]            <1> 	mov si, main_windows_data.main_menu
  1276 00000D2D E80D1A              <1> 	call window_run
  1277 00000D30 C3                  <1> 	ret
  1278                              <1> 
  1279                              <1> ;=============================================================================
  1280                              <1> ;main_show_record_menu ---- show the record command menu
  1281                              <1> ;=============================================================================
  1282                              <1> main_show_record_menu:
  1283 00000D31 BE[F747]            <1> 	mov si, main_windows_data.record_menu
  1284 00000D34 E8061A              <1> 	call window_run
  1285 00000D37 C3                  <1> 	ret
  1286                              <1> 
  1287                              <1> ;=============================================================================
  1288                              <1> ;main_show_sys_menu ---- show the sys command menu
  1289                              <1> ;=============================================================================
  1290                              <1> main_show_sys_menu:
  1291 00000D38 BE[2248]            <1> 	mov si, main_windows_data.sys_menu
  1292 00000D3B E8FF19              <1> 	call window_run
  1293 00000D3E C3                  <1> 	ret
  1294                              <1> 
  1295                              <1> ;=============================================================================
  1296                              <1> ;main_ask_save_changes ---- save boot manager to disk
  1297                              <1> ;=============================================================================
  1298                              <1> main_ask_save_changes:
  1299 00000D3F 803E[2E2F]00        <1>         cmp byte [main_tmp.change_occured], 0
  1300 00000D44 7418                <1>         je .no_changes
  1301                              <1>         
  1302 00000D46 8B36[5C4A]          <1>         mov si, [str_idx.ask_save_changes]
  1303 00000D4A E89013              <1>         call info_box
  1304 00000D4D 3D0D1C              <1>         cmp ax, kbEnter
  1305 00000D50 740D                <1>         je main_save_changes
  1306 00000D52 3A06[AD49]          <1>         cmp al, [yes_key_lower]
  1307 00000D56 7407                <1>         je main_save_changes
  1308 00000D58 3A06[AE49]          <1>         cmp al, [yes_key_upper]
  1309 00000D5C 7401                <1>         je main_save_changes
  1310                              <1>         
  1311                              <1> .no_changes:
  1312 00000D5E C3                  <1>         ret
  1313                              <1> 
  1314                              <1> ;=============================================================================
  1315                              <1> ;main_save_changes ---- save boot manager to disk
  1316                              <1> ;=============================================================================
  1317                              <1> main_save_changes:
  1318                              <1> 
  1319                              <1> %ifndef EMULATE_PROG
  1320 00000D5F E8930E              <1>         call main_save_boot_manager
  1321 00000D62 720D                <1>         jc .disk_error
  1322                              <1> %endif
  1323                              <1> 
  1324 00000D64 C606[2E2F]00        <1>         mov byte [main_tmp.change_occured], 0       ; clear change signature.
  1325                              <1> 
  1326 00000D69 8B36[584A]          <1>         mov si, [str_idx.changes_saved]
  1327 00000D6D E86D13              <1>         call info_box
  1328 00000D70 C3                  <1>         ret
  1329                              <1> 
  1330                              <1> .disk_error:
  1331 00000D71 E8120D              <1>         call main_show_disk_error
  1332                              <1> .end:
  1333 00000D74 C3                  <1>         ret
  1334                              <1> 
  1335                              <1> %if 0
  1336                              <1> ;=============================================================================
  1337                              <1> ;main_change_video_mode ---- change the video mode
  1338                              <1> ;=============================================================================
  1339                              <1> main_change_video_mode:
  1340                              <1> 
  1341                              <1>         inc byte [change_occured]               ; some changes occured.
  1342                              <1> 
  1343                              <1>         mov al, [video_mode]
  1344                              <1>         not al
  1345                              <1>         mov [video_mode], al
  1346                              <1>         call init_video
  1347                              <1>         call draw_screen
  1348                              <1>         ret
  1349                              <1> %endif
  1350                              <1> 
  1351                              <1> ;=============================================================================
  1352                              <1> ;main_change_name ---- change the record name
  1353                              <1> ;=============================================================================
  1354                              <1> main_change_name:
  1355 00000D75 E85C0D              <1>         call main_get_focus_record_pointer
  1356                              <1> 
  1357 00000D78 89F7                <1> 	mov di, si
  1358 00000D7A 83C716              <1> 	add di, struc_bootrecord.name
  1359                              <1> 
  1360 00000D7D 0FB606[D649]        <1>         movzx ax, byte [color.input_box_msg]
  1361 00000D82 8B1E[D449]          <1>         mov bx, [color.input_box]
  1362 00000D86 B90F0F              <1> 	mov cx, (MAX_NAME_LENGTH<<8)|MAX_NAME_LENGTH
  1363 00000D89 31D2                <1> 	xor dx, dx
  1364 00000D8B 8B36[1C4A]          <1>         mov si, [str_idx.name]
  1365                              <1>         
  1366 00000D8F E81915              <1>         call input_box
  1367 00000D92 7204                <1>         jc .end
  1368 00000D94 FE06[2E2F]          <1>         inc byte [main_tmp.change_occured]          ; some changes occured.
  1369                              <1> .end:
  1370 00000D98 C3                  <1>         ret
  1371                              <1> 
  1372                              <1> 
  1373                              <1> ;=============================================================================
  1374                              <1> ;main_login_as_root ---- login as root
  1375                              <1> ;=============================================================================
  1376                              <1> main_login_as_root:
  1377 00000D99 A0[2F2F]            <1> 	mov al, [main_tmp.root_login]
  1378 00000D9C 08C0                <1> 	or al, al
  1379 00000D9E 0F94C0              <1> 	setz al
  1380 00000DA1 A2[2F2F]            <1> 	mov [main_tmp.root_login], al
  1381 00000DA4 C3                  <1>         ret
  1382                              <1> 
  1383                              <1> 
  1384                              <1> ;=============================================================================
  1385                              <1> ;main_change_security_mode ---- change the secure mode
  1386                              <1> ;=============================================================================
  1387                              <1> main_change_security_mode:
  1388 00000DA5 8036[2C00]02        <1> 	xor byte [ADDR_SBMK_FLAGS], KNLFLAG_SECURITY
  1389 00000DAA FE06[2E2F]          <1>         inc byte [main_tmp.change_occured]
  1390 00000DAE C3                  <1>         ret
  1391                              <1> 
  1392                              <1> ;=============================================================================
  1393                              <1> ;main_change_root_password ---- change the root password
  1394                              <1> ;=============================================================================
  1395                              <1> main_change_root_password:
  1396 00000DAF B110                <1> 	mov cl, MAX_PASSWORD_LENGTH
  1397 00000DB1 8B36[1E4A]          <1>         mov si, [str_idx.new_root_passwd]
  1398 00000DB5 E83615              <1>         call input_password
  1399 00000DB8 7241                <1>         jc .end
  1400 00000DBA 89C3                <1>         mov bx, ax
  1401 00000DBC 89D1                <1>         mov cx, dx
  1402                              <1> 
  1403 00000DBE 53                  <1>         push bx
  1404 00000DBF 51                  <1>         push cx
  1405 00000DC0 B110                <1> 	mov cl, MAX_PASSWORD_LENGTH
  1406 00000DC2 8B36[264A]          <1>         mov si, [str_idx.retype_passwd]
  1407 00000DC6 E82515              <1>         call input_password
  1408 00000DC9 59                  <1>         pop cx
  1409 00000DCA 5B                  <1>         pop bx
  1410 00000DCB 722E                <1>         jc .end
  1411 00000DCD 39C3                <1>         cmp bx, ax
  1412 00000DCF 7523                <1>         jne .wrong
  1413 00000DD1 39D1                <1>         cmp cx, dx
  1414 00000DD3 751F                <1>         jne .wrong
  1415                              <1> 
  1416 00000DD5 891E[3000]          <1>         mov [ADDR_SBMK_ROOT_PASSWORD], bx
  1417 00000DD9 890E[3200]          <1>         mov [ADDR_SBMK_ROOT_PASSWORD+2], cx
  1418                              <1> 
  1419 00000DDD C606[2F2F]00        <1>         mov byte [main_tmp.root_login], 0
  1420 00000DE2 8026[2C00]FD        <1>         and byte [ADDR_SBMK_FLAGS], ~ KNLFLAG_SECURITY
  1421                              <1> 
  1422 00000DE7 8B36[5A4A]          <1>         mov si, [str_idx.passwd_changed]
  1423 00000DEB E8EF12              <1>         call info_box
  1424                              <1> 
  1425 00000DEE FE06[2E2F]          <1>         inc byte [main_tmp.change_occured]         ; some changes occured.
  1426 00000DF2 EB07                <1>         jmp short .end
  1427                              <1> .wrong:
  1428 00000DF4 8B36[5E4A]          <1>         mov si, [str_idx.wrong_passwd]
  1429 00000DF8 E8D012              <1>         call error_box
  1430                              <1> .end:
  1431 00000DFB C3                  <1>         ret
  1432                              <1> 
  1433                              <1> ;=============================================================================
  1434                              <1> ;main_change_record_password ---- change the record password
  1435                              <1> ;=============================================================================
  1436                              <1> main_change_record_password:
  1437 00000DFC B110                <1> 	mov cl, MAX_PASSWORD_LENGTH
  1438 00000DFE 8B36[224A]          <1>         mov si, [str_idx.new_record_passwd]
  1439 00000E02 E8E914              <1>         call input_password
  1440 00000E05 7237                <1>         jc .end
  1441 00000E07 89C3                <1>         mov bx, ax
  1442 00000E09 89D1                <1>         mov cx, dx
  1443                              <1> 
  1444 00000E0B 53                  <1>         push bx
  1445 00000E0C 51                  <1>         push cx
  1446 00000E0D B110                <1> 	mov cl, MAX_PASSWORD_LENGTH
  1447 00000E0F 8B36[264A]          <1>         mov si, [str_idx.retype_passwd]
  1448 00000E13 E8D814              <1>         call input_password
  1449 00000E16 59                  <1>         pop cx
  1450 00000E17 5B                  <1>         pop bx
  1451 00000E18 7224                <1>         jc .end
  1452 00000E1A 39C3                <1>         cmp bx, ax
  1453 00000E1C 7519                <1>         jne .wrong
  1454 00000E1E 39D1                <1>         cmp cx, dx
  1455 00000E20 7515                <1>         jne .wrong
  1456                              <1> 
  1457 00000E22 E8AF0C              <1>         call main_get_focus_record_pointer
  1458 00000E25 895C0E              <1>         mov [si+struc_bootrecord.password], bx
  1459 00000E28 894C10              <1>         mov [si+struc_bootrecord.password+2], cx
  1460                              <1>         
  1461 00000E2B 8B36[5A4A]          <1>         mov si, [str_idx.passwd_changed]
  1462 00000E2F E8AB12              <1>         call info_box
  1463                              <1> 
  1464 00000E32 FE06[2E2F]          <1>         inc byte [main_tmp.change_occured]         ; some changes occured.
  1465 00000E36 C3                  <1>         ret
  1466                              <1>         
  1467                              <1> .wrong:
  1468 00000E37 8B36[5E4A]          <1>         mov si, [str_idx.wrong_passwd]
  1469 00000E3B E88D12              <1>         call error_box
  1470                              <1> .end:
  1471 00000E3E C3                  <1>         ret
  1472                              <1> 
  1473                              <1> ;=============================================================================
  1474                              <1> ;main_set_default_record ---- set the default boot record
  1475                              <1> ;=============================================================================
  1476                              <1> main_set_default_record:
  1477 00000E3F 8A0E[C847]          <1> 	mov cl, [FOCUS_RECORD]
  1478 00000E43 E8A10C              <1> 	call main_get_record_pointer           ; get real record index
  1479                              <1> 
  1480 00000E46 880E[2F00]          <1>         mov [ADDR_SBMK_DEFAULT_BOOT], cl
  1481 00000E4A FE06[2E2F]          <1>         inc byte [main_tmp.change_occured]      ; some changes occured.
  1482 00000E4E C3                  <1>         ret
  1483                              <1> 
  1484                              <1> ;=============================================================================
  1485                              <1> ;main_unset_default_record ---- unset the default boot record
  1486                              <1> ;=============================================================================
  1487                              <1> main_unset_default_record:
  1488 00000E4F C606[2F00]FF        <1>         mov byte [ADDR_SBMK_DEFAULT_BOOT], 0xFF
  1489 00000E54 FE06[2E2F]          <1>         inc byte [main_tmp.change_occured]      ; some changes occured.
  1490 00000E58 C3                  <1>         ret
  1491                              <1>         
  1492                              <1> ;=============================================================================
  1493                              <1> ;main_toggle_auto_active ---- toggle the auto active switch
  1494                              <1> ;=============================================================================
  1495                              <1> main_toggle_auto_active:
  1496 00000E59 E8780C              <1>         call main_get_focus_record_pointer
  1497 00000E5C E84329              <1>         call check_allow_act
  1498 00000E5F 720D                <1>         jc .end
  1499                              <1> 
  1500 00000E61 E8800B              <1> 	call main_auth_record_action
  1501 00000E64 7208                <1> 	jc .end
  1502                              <1> 
  1503 00000E66 81340010            <1>         xor word [si + struc_bootrecord.flags], INFOFLAG_AUTOACTIVE
  1504 00000E6A FE06[2E2F]          <1>         inc byte [main_tmp.change_occured]        ; some changes occured.
  1505                              <1> .end:
  1506 00000E6E C3                  <1>         ret
  1507                              <1> 
  1508                              <1> ;=============================================================================
  1509                              <1> ;main_toggle_auto_hide ---- toggle the auto hide switch
  1510                              <1> ;=============================================================================
  1511                              <1> main_toggle_auto_hide:
  1512 00000E6F E8620C              <1>         call main_get_focus_record_pointer
  1513 00000E72 E80A29              <1>         call check_allow_hide
  1514 00000E75 720D                <1>         jc .end
  1515                              <1> 
  1516 00000E77 E86A0B              <1> 	call main_auth_record_action
  1517 00000E7A 7208                <1> 	jc .end
  1518                              <1>         
  1519 00000E7C 81340004            <1>         xor word [si + struc_bootrecord.flags], INFOFLAG_AUTOHIDE
  1520 00000E80 FE06[2E2F]          <1>         inc byte [main_tmp.change_occured]        ; some changes occured.
  1521                              <1> 
  1522                              <1> .end:
  1523 00000E84 C3                  <1>         ret
  1524                              <1> 
  1525                              <1> ;=============================================================================
  1526                              <1> ;main_mark_active ---- mark the record active
  1527                              <1> ;=============================================================================
  1528                              <1> main_mark_active:
  1529 00000E85 E84C0C              <1>         call main_get_focus_record_pointer
  1530 00000E88 E81729              <1>         call check_allow_act
  1531 00000E8B 724F                <1>         jc .end
  1532                              <1> 
  1533 00000E8D E8540B              <1> 	call main_auth_record_action
  1534 00000E90 724A                <1> 	jc .end
  1535                              <1> 
  1536 00000E92 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]
  1537                              <1> 
  1538 00000E95 56                  <1>         push si
  1539 00000E96 8D36[082F]          <1>         lea si, [main_tmp.good_record_list]
  1540 00000E9A 8D3E[4000]          <1>         lea di, [ADDR_SBMK_BOOT_RECORDS]
  1541                              <1> 
  1542 00000E9E 0FB60E[C747]        <1>         movzx cx, byte [GOOD_RECORD_NUMBER]
  1543 00000EA3 B640                <1>         mov dh, SIZE_OF_BOOTRECORD
  1544 00000EA5 6631DB              <1>         xor ebx, ebx
  1545 00000EA8 FC                  <1>         cld
  1546                              <1> .loop_clear_act:                                ; clear all active marks of
  1547 00000EA9 57                  <1>         push di                                 ; the boot records in same
  1548 00000EAA AC                  <1>         lodsb                                   ; drive and father partition.
  1549 00000EAB F6E6                <1>         mul dh
  1550 00000EAD 01C7                <1>         add di, ax
  1551 00000EAF 3A5502              <1>         cmp dl, [di + struc_bootrecord.drive_id]
  1552 00000EB2 750A                <1>         jne .do_nothing
  1553 00000EB4 66395D06            <1>         cmp [di + struc_bootrecord.father_abs_addr], ebx
  1554 00000EB8 7504                <1>         jne .do_nothing
  1555 00000EBA 8125FFF7            <1>         and word [di + struc_bootrecord.flags], ~ INFOFLAG_ACTIVE
  1556                              <1> .do_nothing:
  1557 00000EBE 5F                  <1>         pop di
  1558 00000EBF E2E8                <1>         loop .loop_clear_act
  1559                              <1> 
  1560 00000EC1 5E                  <1>         pop si
  1561                              <1>         
  1562 00000EC2 E81625              <1>         call mark_record_active
  1563 00000EC5 7206                <1>         jc .error                                ; mark active ok
  1564 00000EC7 E8D40B              <1>         call main_recheck_same_records           ; recheck same records
  1565 00000ECA 7205                <1>         jc .disk_error
  1566 00000ECC C3                  <1>         ret
  1567                              <1> 
  1568                              <1> .error:
  1569 00000ECD 09C0                <1>         or ax, ax
  1570 00000ECF 7404                <1>         jz .cannot_act
  1571                              <1> 
  1572                              <1> .disk_error:
  1573 00000ED1 E8B20B              <1>         call main_show_disk_error
  1574 00000ED4 C3                  <1>         ret
  1575                              <1> 
  1576                              <1> .cannot_act:
  1577 00000ED5 8B36[624A]          <1>         mov si, [str_idx.mark_act_failed]
  1578 00000ED9 E8EF11              <1>         call error_box
  1579                              <1> .end:
  1580 00000EDC C3                  <1>         ret
  1581                              <1> 
  1582                              <1> ;=============================================================================
  1583                              <1> ;main_toggle_hidden ---- toggle a record's hidden attribute
  1584                              <1> ;=============================================================================
  1585                              <1> main_toggle_hidden:
  1586 00000EDD E8F40B              <1>         call main_get_focus_record_pointer
  1587 00000EE0 E89C28              <1>         call check_allow_hide
  1588 00000EE3 721F                <1>         jc .end
  1589                              <1> 
  1590 00000EE5 E8FC0A              <1> 	call main_auth_record_action
  1591 00000EE8 721A                <1> 	jc .end
  1592                              <1> 
  1593 00000EEA E85825              <1>         call toggle_record_hidden
  1594 00000EED 7206                <1>         jc .error                                 ; toggle hidden ok
  1595 00000EEF E8AC0B              <1>         call main_recheck_same_records            ; recheck same records
  1596 00000EF2 7205                <1>         jc .disk_error
  1597 00000EF4 C3                  <1>         ret
  1598                              <1> 
  1599                              <1> .error:
  1600 00000EF5 09C0                <1>         or ax, ax
  1601 00000EF7 7404                <1>         jz .cannot_hide
  1602                              <1> 
  1603                              <1> .disk_error:
  1604 00000EF9 E88A0B              <1>         call main_show_disk_error
  1605 00000EFC C3                  <1>         ret
  1606                              <1> 
  1607                              <1> .cannot_hide:
  1608 00000EFD 8B36[644A]          <1>         mov si, [str_idx.toggle_hid_failed]
  1609 00000F01 E8C711              <1>         call error_box
  1610                              <1> .end:
  1611 00000F04 C3                  <1>         ret
  1612                              <1> 
  1613                              <1> ;=============================================================================
  1614                              <1> ;main_delete_record ---- delete a boot record
  1615                              <1> ;=============================================================================
  1616                              <1> main_delete_record:
  1617 00000F05 E8CC0B              <1>         call main_get_focus_record_pointer
  1618 00000F08 F7040002            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_HIDDEN
  1619 00000F0C 7415                <1>         jz .del_it
  1620                              <1> 
  1621 00000F0E E83425              <1>         call toggle_record_hidden           ; unhide it first.
  1622 00000F11 7310                <1>         jnc .del_it                         ; unhide ok, del it.
  1623                              <1> 
  1624 00000F13 09C0                <1>         or ax, ax
  1625 00000F15 7404                <1>         jz .cannot_hide
  1626 00000F17 E86C0B              <1>         call main_show_disk_error
  1627 00000F1A C3                  <1>         ret
  1628                              <1> 
  1629                              <1> .cannot_hide:
  1630 00000F1B 8B36[644A]          <1>         mov si, [str_idx.toggle_hid_failed]
  1631 00000F1F E8A911              <1>         call error_box
  1632 00000F22 C3                  <1>         ret
  1633                              <1> 
  1634                              <1> .del_it:
  1635 00000F23 30C0                <1>         xor al, al
  1636 00000F25 89F7                <1>         mov di, si
  1637 00000F27 B94000              <1>         mov cx, SIZE_OF_BOOTRECORD
  1638 00000F2A FC                  <1>         cld
  1639 00000F2B F3AA                <1>         rep stosb
  1640                              <1> 
  1641 00000F2D FE06[2E2F]          <1>         inc byte [main_tmp.change_occured]               ; some changes occured.
  1642                              <1> 
  1643 00000F31 E88507              <1>         call main_init_good_record_list
  1644 00000F34 A0[C747]            <1>         mov al, [GOOD_RECORD_NUMBER]
  1645 00000F37 08C0                <1>         or al, al
  1646 00000F39 7415                <1>         jz .no_record
  1647                              <1>         
  1648 00000F3B FEC8                <1>         dec al
  1649 00000F3D 3A06[C947]          <1>         cmp al, [FIRST_VISIBLE_RECORD]                  ; adjust the cursor
  1650 00000F41 7303                <1>         jae .check_focus_pos                            ; and menu position.
  1651 00000F43 A2[C947]            <1>         mov [FIRST_VISIBLE_RECORD], al                  ;
  1652                              <1> .check_focus_pos:                                       ;
  1653 00000F46 3A06[C847]          <1>         cmp al, [FOCUS_RECORD]                          ;
  1654 00000F4A 730A                <1>         jae .end                                        ;
  1655 00000F4C A2[C847]            <1>         mov [FOCUS_RECORD], al                          ;
  1656 00000F4F C3                  <1>         ret
  1657                              <1> 
  1658                              <1> .no_record:
  1659 00000F50 A2[C947]            <1>         mov [FIRST_VISIBLE_RECORD], al
  1660 00000F53 A2[C847]            <1>         mov [FOCUS_RECORD], al
  1661                              <1> .end:
  1662 00000F56 C3                  <1>         ret
  1663                              <1>         
  1664                              <1> 
  1665                              <1> ;=============================================================================
  1666                              <1> ;main_rescan_all_drives ---- research all drives for boot records
  1667                              <1> ;=============================================================================
  1668                              <1> main_rescan_all_records:
  1669 00000F57 8026[2C00]DF        <1>         and byte [ADDR_SBMK_FLAGS], ~ KNLFLAG_ONLYPARTS
  1670 00000F5C EB05                <1>         jmp short main_rescan_records
  1671                              <1>         
  1672                              <1> ;=============================================================================
  1673                              <1> ;rescan_fixed_drives ---- research fixed drives for boot records
  1674                              <1> ;=============================================================================
  1675                              <1> main_rescan_all_partitions:
  1676 00000F5E 800E[2C00]20        <1>         or byte [ADDR_SBMK_FLAGS], KNLFLAG_ONLYPARTS
  1677                              <1>         
  1678                              <1> ;=============================================================================
  1679                              <1> ;rescan_records ---- research all drives for boot records
  1680                              <1> ;=============================================================================
  1681                              <1> main_rescan_records:
  1682 00000F63 0FB60E[C747]        <1>         movzx cx, byte [GOOD_RECORD_NUMBER]
  1683 00000F68 08C9                <1>         or cl, cl                               ; if no good record then go to
  1684 00000F6A 7423                <1>         jz .init_it                             ; init directly.
  1685                              <1>         
  1686 00000F6C 8D3E[082F]          <1>         lea di, [main_tmp.good_record_list]
  1687 00000F70 B240                <1>         mov dl, SIZE_OF_BOOTRECORD
  1688                              <1> 
  1689                              <1> ; unhide all hidden partition first.
  1690                              <1> .loop_unhide:
  1691 00000F72 8A05                <1>         mov al, [di]
  1692 00000F74 47                  <1>         inc di
  1693 00000F75 F6E2                <1>         mul dl
  1694 00000F77 8D36[4000]          <1>         lea si, [ADDR_SBMK_BOOT_RECORDS]
  1695 00000F7B 01C6                <1>         add si, ax
  1696 00000F7D F7040002            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_HIDDEN
  1697 00000F81 740A                <1>         jz .not_hidden
  1698 00000F83 E8BF24              <1>         call toggle_record_hidden
  1699 00000F86 721A                <1>         jc .hidden_error
  1700 00000F88 E8130B              <1>         call main_recheck_same_records
  1701 00000F8B 7219                <1>         jc .disk_error
  1702                              <1> 
  1703                              <1> .not_hidden:
  1704 00000F8D E2E3                <1>         loop .loop_unhide
  1705                              <1>         
  1706                              <1> .init_it:
  1707 00000F8F FE06[2E2F]          <1>         inc byte [main_tmp.change_occured]               ; some changes occured.
  1708                              <1> 
  1709 00000F93 E84C07              <1>         call main_init_boot_records
  1710 00000F96 E82007              <1>         call main_init_good_record_list
  1711                              <1> 
  1712 00000F99 30C0                <1>         xor al, al
  1713 00000F9B A2[C847]            <1>         mov byte [FOCUS_RECORD], al
  1714 00000F9E A2[C947]            <1>         mov byte [FIRST_VISIBLE_RECORD], al
  1715 00000FA1 C3                  <1> 	ret
  1716                              <1>         
  1717                              <1> .hidden_error:
  1718 00000FA2 09C0                <1>         or ax, ax
  1719 00000FA4 7404                <1>         jz .cannot_hide
  1720                              <1> 
  1721                              <1> .disk_error:
  1722 00000FA6 E8DD0A              <1>         call main_show_disk_error
  1723 00000FA9 C3                  <1>         ret
  1724                              <1> 
  1725                              <1> .cannot_hide:
  1726 00000FAA 8B36[644A]          <1>         mov si, [str_idx.toggle_hid_failed]
  1727 00000FAE E81A11              <1>         call error_box
  1728                              <1> .end:
  1729 00000FB1 C3                  <1>         ret
  1730                              <1> 
  1731                              <1> ;=============================================================================
  1732                              <1> ;main_set_delay_time ---- set the delay time
  1733                              <1> ;=============================================================================
  1734                              <1> main_set_delay_time:
  1735 00000FB2 0FB606[D649]        <1>         movzx ax, [color.input_box_msg]
  1736 00000FB7 8B1E[D449]          <1>         mov bx, [color.input_box]
  1737 00000FBB B90303              <1>         mov cx, 0x0303
  1738 00000FBE 31D2                <1> 	xor dx, dx
  1739 00000FC0 8B36[1A4A]          <1>         mov si, [str_idx.delay_time]
  1740 00000FC4 BF[B737]            <1>         mov di, main_tmp.dialog_buf
  1741 00000FC7 8835                <1>         mov [di], dh
  1742 00000FC9 E8DF12              <1>         call input_box
  1743 00000FCC 7213                <1>         jc .end
  1744                              <1> 
  1745 00000FCE 89FE                <1>         mov si, di
  1746 00000FD0 E8ED1A              <1>         call atoi
  1747                              <1> 
  1748 00000FD3 3DFF00              <1>         cmp ax, 255
  1749 00000FD6 7602                <1>         jbe .set_time
  1750 00000FD8 B0FF                <1>         mov al, 255
  1751                              <1> .set_time:
  1752 00000FDA A2[2D00]            <1>         mov [ADDR_SBMK_DELAY_TIME], al
  1753 00000FDD FE06[2E2F]          <1>         inc byte [main_tmp.change_occured]         ; some changes occured.
  1754                              <1> .end:
  1755 00000FE1 C3                  <1>         ret
  1756                              <1> 
  1757                              <1> ;=============================================================================
  1758                              <1> ;main_boot_it ---- boot the selected record
  1759                              <1> ;=============================================================================
  1760                              <1> main_boot_it:
  1761 00000FE2 8A0E[C847]          <1> 	mov cl, [FOCUS_RECORD]
  1762 00000FE6 E8FE0A              <1> 	call main_get_record_pointer
  1763 00000FE9 88C8                <1> 	mov al, cl
  1764 00000FEB 50                  <1> 	push ax
  1765                              <1> 
  1766 00000FEC F606[2C00]10        <1>         test byte [ADDR_SBMK_FLAGS], KNLFLAG_REMLAST
  1767 00000FF1 740D                <1>         jz .no_remlast
  1768                              <1> 
  1769 00000FF3 A2[2F00]            <1>         mov [ADDR_SBMK_DEFAULT_BOOT], al
  1770                              <1>        
  1771 00000FF6 E8FC0B              <1>         call main_save_boot_manager
  1772 00000FF9 7308                <1>         jnc .cont_boot
  1773                              <1> 
  1774 00000FFB E8880A              <1>         call main_show_disk_error
  1775 00000FFE EB03                <1>         jmp short .cont_boot
  1776                              <1> 
  1777                              <1> .no_remlast:
  1778 00001000 E83CFD              <1>         call main_ask_save_changes              ; ask if save the changes.
  1779                              <1> 
  1780                              <1> .cont_boot:
  1781 00001003 E8640C              <1>         call main_hide_auto_hides
  1782 00001006 58                  <1>         pop ax
  1783 00001007 7203                <1>         jc .end
  1784                              <1>  
  1785 00001009 E8170B              <1>         call main_do_boot_record
  1786                              <1> .end:
  1787 0000100C C3                  <1>         ret
  1788                              <1> 
  1789                              <1> ;=============================================================================
  1790                              <1> ;main_return_to_bios ---- give control back to BIOS
  1791                              <1> ;=============================================================================
  1792                              <1> main_return_to_bios:
  1793 0000100D E82FFD              <1>         call main_ask_save_changes              ; ask if save the changes.
  1794                              <1>         
  1795 00001010 E88A0F              <1>         call reset_video_mode
  1796                              <1>         
  1797 00001013 E88B2B              <1> 	call uninstall_myint13h
  1798                              <1> %ifdef EMULATE_PROG
  1799                              <1>         mov ax, 0x4c00                          ; exit to dos
  1800                              <1>         int 0x21                                ;
  1801                              <1> %else
  1802 00001016 CD18                <1>         int 0x18                                ; return to BIOS
  1803                              <1> %endif
  1804                              <1> 
  1805                              <1> .end:
  1806 00001018 C3                  <1>         ret
  1807                              <1> 
  1808                              <1> 
  1809                              <1> ;=============================================================================
  1810                              <1> ; Duplicate the boot record
  1811                              <1> ;=============================================================================
  1812                              <1> main_dup_record:
  1813 00001019 B84000              <1>         mov ax, SIZE_OF_BOOTRECORD
  1814 0000101C B92000              <1>         mov cx, MAX_RECORD_NUM
  1815 0000101F BF[4000]            <1>         mov di, ADDR_SBMK_BOOT_RECORDS
  1816                              <1> 
  1817                              <1> .search_empty_slot:
  1818 00001022 F60509              <1>         test byte [di + struc_bootrecord.flags], DRVFLAG_DRIVEOK | INFOFLAG_ISSPECIAL
  1819 00001025 7405                <1>         jz .found_empty
  1820 00001027 01C7                <1>         add di, ax
  1821 00001029 E2F7                <1>         loop .search_empty_slot
  1822 0000102B C3                  <1> 	ret
  1823                              <1> 
  1824                              <1> .found_empty:
  1825                              <1> 
  1826 0000102C FE06[2E2F]          <1>         inc byte [main_tmp.change_occured]
  1827                              <1> 
  1828 00001030 E8A10A              <1>         call main_get_focus_record_pointer
  1829 00001033 89C1                <1>         mov cx, ax
  1830 00001035 FC                  <1>         cld
  1831 00001036 F3A4                <1>         rep movsb
  1832 00001038 E87E06              <1>         call main_init_good_record_list
  1833 0000103B C3                  <1>         ret
  1834                              <1> 
  1835                              <1> 
  1836                              <1> 
  1837                              <1> ;=============================================================================
  1838                              <1> ; move the boot record down 
  1839                              <1> ;=============================================================================
  1840                              <1> main_move_record_down:
  1841 0000103C 0FB61E[C847]        <1>         movzx bx, byte [FOCUS_RECORD]
  1842 00001041 8A87[082F]          <1>         mov al, [main_tmp.good_record_list + bx]
  1843 00001045 FEC3                <1>         inc bl
  1844 00001047 8AA7[082F]          <1>         mov ah, [main_tmp.good_record_list + bx]
  1845 0000104B 3A1E[C747]          <1>         cmp bl, [GOOD_RECORD_NUMBER]
  1846 0000104F 731C                <1>         jae .end
  1847                              <1> 
  1848 00001051 3A06[2F00]          <1>         cmp al, [ADDR_SBMK_DEFAULT_BOOT]
  1849 00001055 7506                <1>         jne .chknext
  1850 00001057 8826[2F00]          <1>         mov [ADDR_SBMK_DEFAULT_BOOT], ah
  1851 0000105B EB09                <1>         jmp short .swap_record
  1852                              <1> .chknext:
  1853 0000105D 3A26[2F00]          <1>         cmp ah, [ADDR_SBMK_DEFAULT_BOOT]
  1854 00001061 7503                <1>         jne .swap_record
  1855 00001063 A2[2F00]            <1>         mov [ADDR_SBMK_DEFAULT_BOOT], al
  1856                              <1> 
  1857                              <1> .swap_record:
  1858 00001066 881E[C847]          <1>         mov [FOCUS_RECORD], bl
  1859 0000106A E83100              <1>         call main_swap_records
  1860                              <1> .end:
  1861 0000106D C3                  <1>         ret
  1862                              <1> 
  1863                              <1> ;=============================================================================
  1864                              <1> ; move the boot record up
  1865                              <1> ;=============================================================================
  1866                              <1> main_move_record_up:
  1867 0000106E 0FB61E[C847]        <1>         movzx bx, byte [FOCUS_RECORD]
  1868 00001073 08DB                <1>         or bl, bl
  1869 00001075 7426                <1>         jz .end
  1870 00001077 8A87[082F]          <1>         mov al, [main_tmp.good_record_list + bx]
  1871 0000107B FECB                <1>         dec bl
  1872 0000107D 8AA7[082F]          <1>         mov ah, [main_tmp.good_record_list + bx]
  1873                              <1> 
  1874 00001081 3A06[2F00]          <1>         cmp al, [ADDR_SBMK_DEFAULT_BOOT]
  1875 00001085 7506                <1>         jne .chknext
  1876 00001087 8826[2F00]          <1>         mov [ADDR_SBMK_DEFAULT_BOOT], ah
  1877 0000108B EB09                <1>         jmp short .swap_record
  1878                              <1> .chknext:
  1879 0000108D 3A26[2F00]          <1>         cmp ah, [ADDR_SBMK_DEFAULT_BOOT]
  1880 00001091 7503                <1>         jne .swap_record
  1881 00001093 A2[2F00]            <1>         mov [ADDR_SBMK_DEFAULT_BOOT], al
  1882                              <1> 
  1883                              <1> .swap_record:
  1884                              <1>   
  1885 00001096 E80500              <1>         call main_swap_records
  1886 00001099 881E[C847]          <1>         mov [FOCUS_RECORD],bl
  1887                              <1> .end:
  1888 0000109D C3                  <1>         ret
  1889                              <1> 
  1890                              <1> ;=============================================================================
  1891                              <1> ; swap current and previous boot record
  1892                              <1> ;=============================================================================
  1893                              <1> main_swap_records:
  1894 0000109E 60                  <1> 	pusha
  1895 0000109F FE0E[C847]          <1>         dec byte [FOCUS_RECORD]
  1896 000010A3 E82E0A              <1>         call main_get_focus_record_pointer
  1897 000010A6 89F7                <1> 	mov di, si
  1898 000010A8 FE06[C847]          <1> 	inc byte [FOCUS_RECORD]
  1899 000010AC E8250A              <1> 	call main_get_focus_record_pointer	; si -> current  di -> prev
  1900                              <1> 
  1901 000010AF B94000              <1>         mov cx, SIZE_OF_BOOTRECORD
  1902                              <1> 
  1903                              <1> .loop_swap:
  1904 000010B2 8A04                <1> 	mov al, [si]
  1905 000010B4 8A1D                <1> 	mov bl, [di]
  1906 000010B6 881C                <1> 	mov [si], bl
  1907 000010B8 8805                <1> 	mov [di], al
  1908 000010BA 46                  <1> 	inc si
  1909 000010BB 47                  <1> 	inc di
  1910 000010BC E2F4                <1> 	loop .loop_swap
  1911 000010BE 61                  <1> 	popa
  1912                              <1> 
  1913 000010BF C3                  <1>         ret
  1914                              <1> 
  1915                              <1> ;=============================================================================
  1916                              <1> ;main_toggle_swapid ---- toggle the swap driver id flag 
  1917                              <1> ;=============================================================================
  1918                              <1> main_toggle_swapid:
  1919 000010C0 E8110A              <1> 	call main_get_focus_record_pointer
  1920 000010C3 09F6                <1> 	or si, si
  1921 000010C5 7416                <1> 	jz .end
  1922 000010C7 F7041800            <1> 	test word [si + struc_bootrecord.flags], DRVFLAG_ISCDROM | INFOFLAG_ISSPECIAL
  1923 000010CB 7510                <1> 	jnz .end
  1924                              <1> 
  1925 000010CD E81409              <1> 	call main_auth_record_action
  1926 000010D0 720B                <1> 	jc .end
  1927                              <1> 
  1928 000010D2 81340020            <1>         xor word [si + struc_bootrecord.flags], INFOFLAG_SWAPDRVID
  1929 000010D6 E8601F              <1>         call check_bootrecord
  1930 000010D9 FE06[2E2F]          <1>         inc byte [main_tmp.change_occured]
  1931                              <1> .end:
  1932 000010DD C3                  <1>         ret
  1933                              <1> 
  1934                              <1> ;=============================================================================
  1935                              <1> ;main_toggle_schedule ---- toggle the schedule of the bootrecord
  1936                              <1> ;=============================================================================
  1937                              <1> main_toggle_schedule:
  1938 000010DE E8F309              <1>         call main_get_focus_record_pointer
  1939 000010E1 F7040080            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_SCHEDULED
  1940 000010E5 7512                <1>         jnz .clear_schedule
  1941                              <1> 
  1942 000010E7 56                  <1>         push si
  1943 000010E8 E81700              <1>         call main_input_schedule_time
  1944 000010EB 5E                  <1>         pop si
  1945 000010EC 7213                <1>         jc .end
  1946                              <1> 
  1947 000010EE 09D2                <1>         or dx, dx
  1948 000010F0 7502                <1>         jnz .set_schedule
  1949 000010F2 F7D2                <1>         not dx
  1950                              <1> 
  1951                              <1> .set_schedule:
  1952 000010F4 E8BA23              <1>         call set_record_schedule
  1953 000010F7 EB04                <1>         jmp short .end_ok
  1954                              <1> 
  1955                              <1> .clear_schedule:
  1956 000010F9 8124FF7F            <1>         and word [si + struc_bootrecord.flags], ~INFOFLAG_SCHEDULED
  1957                              <1> 
  1958                              <1> .end_ok:
  1959 000010FD FE06[2E2F]          <1>         inc byte [main_tmp.change_occured]
  1960                              <1> .end:
  1961 00001101 C3                  <1>         ret
  1962                              <1> 
  1963                              <1> ;=============================================================================
  1964                              <1> ;main_input_schedule_time ---- input the schedule time
  1965                              <1> ;input:
  1966                              <1> ;      none
  1967                              <1> ;output:
  1968                              <1> ;      cf = 0 success, 
  1969                              <1> ;           ax = begin time (in minutes)
  1970                              <1> ;           bx = end time (in minutes)
  1971                              <1> ;           dx = days info (bit 0 to bit 7 indicate Mon to Sun)
  1972                              <1> ;      cf = 1 cancel
  1973                              <1> ;=============================================================================
  1974                              <1> main_input_schedule_time:
  1975 00001102 60                  <1>         pusha
  1976                              <1> 
  1977 00001103 31C0                <1>         xor ax, ax
  1978 00001105 B90400              <1> 	mov cx, 4
  1979 00001108 FC                  <1> 	cld
  1980 00001109 BF[322F]            <1> 	mov di, main_tmp.schedule_begin
  1981 0000110C F3AB                <1> 	rep stosw
  1982                              <1> 
  1983 0000110E A0[D649]            <1>         mov al, [color.input_box_msg]
  1984 00001111 8B1E[D449]          <1>         mov bx, [color.input_box_frame]
  1985 00001115 B91313              <1>         mov cx, 0x1313
  1986 00001118 31D2                <1> 	xor dx, dx
  1987 0000111A 8B36[284A]          <1>         mov si, [str_idx.input_schedule]
  1988 0000111E BF[B737]            <1>         mov di, main_tmp.dialog_buf
  1989 00001121 C60500              <1> 	mov byte [di], 0 
  1990                              <1>         
  1991 00001124 E88411              <1>         call input_box
  1992 00001127 724C                <1>         jc .exit
  1993                              <1> 
  1994                              <1> ;convert begin time
  1995 00001129 89FE                <1>         mov si, di
  1996 0000112B E85400              <1> 	call main_str_to_schtime
  1997 0000112E 723D                <1> 	jc .invalid_input
  1998 00001130 A3[322F]            <1>         mov [main_tmp.schedule_begin], ax
  1999                              <1> 
  2000                              <1> ;convert end time
  2001 00001133 AC                  <1> 	lodsb
  2002 00001134 3C2D                <1> 	cmp al,'-'
  2003 00001136 7535                <1> 	jne .invalid_input
  2004                              <1> 
  2005 00001138 E84700              <1> 	call main_str_to_schtime
  2006 0000113B 7230                <1> 	jc .invalid_input
  2007 0000113D A3[342F]            <1>         mov [main_tmp.schedule_end], ax
  2008                              <1> 
  2009                              <1> ;convert day info
  2010 00001140 AC                  <1>         lodsb
  2011 00001141 08C0                <1>         or al, al
  2012 00001143 7425                <1>         jz .end
  2013                              <1> 
  2014 00001145 3C3B                <1>         cmp al, ';'
  2015 00001147 7524                <1>         jne .invalid_input
  2016                              <1> 
  2017 00001149 B90700              <1>         mov cx, 7
  2018 0000114C 31D2                <1>         xor dx, dx
  2019                              <1> 
  2020                              <1> .loop_get_days:
  2021 0000114E AC                  <1>         lodsb
  2022 0000114F 08C0                <1>         or al, al
  2023 00001151 7413                <1>         jz .end_get_days
  2024 00001153 2C30                <1>         sub al, '0'
  2025 00001155 3C07                <1>         cmp al, 7
  2026 00001157 7314                <1>         jae .invalid_input
  2027 00001159 BB0100              <1>         mov bx, 1
  2028 0000115C 51                  <1>         push cx
  2029 0000115D 88C1                <1>         mov cl, al
  2030 0000115F D3E3                <1>         shl bx, cl
  2031 00001161 59                  <1>         pop cx
  2032 00001162 09DA                <1>         or dx, bx
  2033 00001164 E2E8                <1>         loop .loop_get_days
  2034                              <1> 
  2035                              <1> .end_get_days:
  2036 00001166 8916[362F]          <1>         mov [main_tmp.schedule_day], dx
  2037                              <1> 
  2038                              <1> .end:
  2039 0000116A F8                  <1> 	clc
  2040 0000116B EB08                <1> 	jmp short .exit
  2041                              <1> 
  2042                              <1> .invalid_input:
  2043 0000116D 8B36[6A4A]          <1>         mov si, [str_idx.invalid_schedule]
  2044 00001171 E8570F              <1>         call error_box
  2045 00001174 F9                  <1>         stc
  2046                              <1> .exit:
  2047 00001175 61                  <1>         popa
  2048 00001176 A1[322F]            <1>         mov ax, [main_tmp.schedule_begin]
  2049 00001179 8B1E[342F]          <1>         mov bx, [main_tmp.schedule_end]
  2050 0000117D 8B16[362F]          <1>         mov dx, [main_tmp.schedule_day]
  2051 00001181 C3                  <1>         ret
  2052                              <1> 
  2053                              <1> 
  2054                              <1> ;=============================================================================
  2055                              <1> ;input ds:si -> string
  2056                              <1> ;output cf =0 ok, ax = time in minutes
  2057                              <1> ;       cf =1 fail
  2058                              <1> ;=============================================================================
  2059                              <1> main_str_to_schtime:
  2060 00001182 31DB                <1> 	xor bx, bx
  2061 00001184 31C9                <1> 	xor cx, cx
  2062                              <1> 
  2063 00001186 E83719              <1>         call atoi
  2064 00001189 3C18                <1>         cmp al, 24                          ; hh must be less than 24
  2065 0000118B 771D                <1>         ja .fail
  2066                              <1> 
  2067 0000118D 88C3                <1>         mov bl, al
  2068 0000118F AC                  <1> 	lodsb
  2069 00001190 3C3A                <1> 	cmp al, ':'
  2070 00001192 7516                <1> 	jne .fail
  2071                              <1> 
  2072 00001194 E82919              <1>         call atoi
  2073 00001197 3C3C                <1>         cmp al, 60                          ; mm must be less than 60
  2074 00001199 730F                <1>         jae .fail
  2075 0000119B 88C1                <1>         mov cl, al
  2076                              <1> 
  2077 0000119D B03C                <1>         mov al, 60
  2078 0000119F F6E3                <1>         mul bl
  2079 000011A1 01C8                <1>         add ax, cx
  2080 000011A3 3DA005              <1>         cmp ax, 24*60                       ; begin time must be no more than
  2081 000011A6 7702                <1>         ja .fail                            ; 24*60 minutes
  2082 000011A8 F8                  <1> 	clc
  2083 000011A9 C3                  <1> 	ret
  2084                              <1> .fail:
  2085 000011AA F9                  <1> 	stc
  2086 000011AB C3                  <1> 	ret
  2087                              <1> 
  2088                              <1> ;=============================================================================
  2089                              <1> ;main_toggle_keystrokes ---- toggle the keystrokes switch of the bootrecord
  2090                              <1> ;=============================================================================
  2091                              <1> main_toggle_keystrokes:
  2092                              <1> 
  2093 000011AC E82509              <1>         call main_get_focus_record_pointer
  2094 000011AF F7040040            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_HAVEKEYS
  2095 000011B3 7406                <1>         jz .input_keys
  2096                              <1> 
  2097 000011B5 8124FFBF            <1>         and word [si + struc_bootrecord.flags], ~INFOFLAG_HAVEKEYS
  2098 000011B9 EB12                <1>         jmp short .end_ok
  2099                              <1> 
  2100                              <1> .input_keys:
  2101 000011BB 8D7C26              <1>         lea di, [si + struc_bootrecord.keystrokes]
  2102 000011BE B10D                <1>         mov cl, MAX_KEYSTROKES
  2103 000011C0 56                  <1>         push si
  2104 000011C1 E89800              <1>         call main_input_keystrokes
  2105 000011C4 5E                  <1>         pop si
  2106 000011C5 08ED                <1>         or ch, ch
  2107 000011C7 7408                <1>         jz .end
  2108                              <1> 
  2109 000011C9 810C0040            <1>         or word [si + struc_bootrecord.flags], INFOFLAG_HAVEKEYS
  2110                              <1> 
  2111                              <1> .end_ok:
  2112 000011CD FE06[2E2F]          <1>         inc byte [main_tmp.change_occured]
  2113                              <1> .end:
  2114 000011D1 C3                  <1>         ret
  2115                              <1> 
  2116                              <1> ;=============================================================================
  2117                              <1> ; main_ikbox_event_handle ---- event handle for Input keystroke box
  2118                              <1> ;=============================================================================
  2119                              <1> main_ikbox_event_handle:
  2120 000011D2 80FCF0              <1>         cmp ah, EVTCODE_COMMAND
  2121 000011D5 720A                <1>         jb .normal_key
  2122                              <1> 
  2123 000011D7 3D10F2              <1>         cmp ax, EVENT_SCROLL_OFF
  2124 000011DA 7524                <1>         jne .end
  2125                              <1> 
  2126 000011DC E8B615              <1>         call window_close
  2127 000011DF F8                  <1>         clc
  2128 000011E0 C3                  <1>         ret
  2129                              <1> 
  2130                              <1> .normal_key:
  2131 000011E1 FC                  <1>         cld
  2132 000011E2 8B3E[382F]          <1>         mov di, [main_tmp.keystroke_ptr]
  2133 000011E6 0FB60E[3A2F]        <1>         movzx cx, [main_tmp.keystroke_num]
  2134 000011EB 3A0E[3B2F]          <1>         cmp cl, [main_tmp.keystroke_max]
  2135 000011EF 730F                <1>         jae .end
  2136                              <1> 
  2137 000011F1 D1E1                <1>         shl cx, 1
  2138 000011F3 01CF                <1>         add di, cx
  2139 000011F5 AB                  <1>         stosw
  2140                              <1> 
  2141 000011F6 FE06[3A2F]          <1>         inc byte [main_tmp.keystroke_num]
  2142 000011FA E80500              <1>         call main_ikbox_prepare
  2143 000011FD E88B13              <1>         call window_draw_body
  2144                              <1> .end:
  2145 00001200 F8                  <1>         clc
  2146 00001201 C3                  <1>         ret
  2147                              <1> 
  2148                              <1> ;=============================================================================
  2149                              <1> ;main_ikbox_prepare
  2150                              <1> ;input:
  2151                              <1> ;       ds:si -> the message_box struc
  2152                              <1> ;=============================================================================
  2153                              <1> main_ikbox_prepare:
  2154 00001202 C74416[D211]        <1>         mov word [si + struc_window.event_handle],main_ikbox_event_handle
  2155 00001207 31C0                <1> 	xor ax, ax
  2156                              <1> 
  2157 00001209 56                  <1>         push si
  2158 0000120A 8B7C1A              <1>         mov di, [si + struc_message_box.message]
  2159 0000120D 8B36[2A4A]          <1>         mov si, [str_idx.input_keystrokes]
  2160 00001211 57                  <1>         push di
  2161                              <1> 
  2162 00001212 E82819              <1>         call strcpy
  2163 00001215 57                  <1>         push di
  2164 00001216 0FB60E[3A2F]        <1>         movzx cx, byte [main_tmp.keystroke_num]
  2165                              <1> 
  2166 0000121B D1E1                <1>         shl cx,1
  2167 0000121D 8B3E[382F]          <1>         mov di, [main_tmp.keystroke_ptr]
  2168 00001221 01CF                <1>         add di, cx
  2169 00001223 09C9                <1> 	or cx, cx
  2170 00001225 7403                <1> 	jz .first_prepare
  2171 00001227 83EF02              <1> 	sub di, 2
  2172                              <1> .first_prepare:
  2173 0000122A 8B05                <1> 	mov ax, [di]
  2174                              <1> 
  2175 0000122C 5F                  <1>         pop di
  2176 0000122D 51                  <1>         push cx
  2177                              <1>         
  2178 0000122E B104                <1>         mov cl, 4
  2179 00001230 E83A19              <1>         call htoa                          ; fill in the key code string
  2180 00001233 83C704              <1>         add di, 4
  2181                              <1> 
  2182 00001236 8B36[2C4A]          <1>         mov si, [str_idx.key_count]
  2183 0000123A E80019              <1>         call strcpy
  2184                              <1> 
  2185 0000123D 59                  <1>         pop cx
  2186 0000123E D1E9                <1>         shr cx, 1
  2187 00001240 0FB6C1              <1>         movzx ax, cl
  2188 00001243 B102                <1>         mov cl, 2
  2189 00001245 E84E18              <1>         call itoa                          ; fill in the key cound string
  2190                              <1> 
  2191 00001248 5E                  <1>         pop si
  2192                              <1> 
  2193 00001249 E86419              <1> 	call count_lines
  2194                              <1> 
  2195 0000124C 020E[B749]          <1> 	add cl, [size.box_width]
  2196 00001250 022E[B849]          <1> 	add ch, [size.box_height]
  2197                              <1> 
  2198 00001254 5E                  <1>         pop si
  2199 00001255 894C08              <1> 	mov [si + struc_window.win_size], cx
  2200 00001258 E8AB15              <1> 	call window_center_window
  2201 0000125B C3                  <1>         ret
  2202                              <1> 
  2203                              <1> 
  2204                              <1> ;=============================================================================
  2205                              <1> ;main_input_keystrokes ---- input a set of key strokes
  2206                              <1> ;input:
  2207                              <1> ;      cl = max key strokes number
  2208                              <1> ;      es:di -> the buffer
  2209                              <1> ;output:
  2210                              <1> ;      es:di -> the buffer filled by key strokes
  2211                              <1> ;      ch = number of key strokes that inputed
  2212                              <1> ;=============================================================================
  2213                              <1> main_input_keystrokes:
  2214 0000125C 57                  <1>         push di
  2215                              <1> 
  2216 0000125D 31C0                <1>         xor ax, ax
  2217 0000125F 893E[382F]          <1>         mov [main_tmp.keystroke_ptr], di
  2218 00001263 880E[3B2F]          <1>         mov [main_tmp.keystroke_max], cl
  2219 00001267 A2[3A2F]            <1>         mov [main_tmp.keystroke_num], al
  2220 0000126A 8905                <1>         mov [di], ax
  2221                              <1> 
  2222 0000126C A0[D649]            <1>         mov al, [color.input_box_msg]
  2223 0000126F 8B1E[D449]          <1>         mov bx, [color.input_box]
  2224 00001273 BA[184A]            <1>         mov dx, str_idx.input
  2225 00001276 BE[B737]            <1>         mov si, main_tmp.dialog_buf
  2226 00001279 BF[3C2F]            <1>         mov di, main_tmp.ikbox
  2227                              <1> 
  2228 0000127C 8824                <1>         mov [si], ah
  2229 0000127E E8F60D              <1>         call msgbox_prepare
  2230 00001281 89FE                <1>         mov si, di
  2231 00001283 E87CFF              <1>         call main_ikbox_prepare
  2232                              <1> 
  2233 00001286 E8770D              <1>         call turnon_scrolllock
  2234 00001289 E8B114              <1>         call window_run
  2235 0000128C E87F0D              <1>         call turnoff_scrolllock
  2236                              <1> 
  2237 0000128F 8A2E[3A2F]          <1>         mov ch, [main_tmp.keystroke_num]
  2238 00001293 5F                  <1>         pop di
  2239 00001294 C3                  <1>         ret
  2240                              <1> 
  2241                              <1> ;=============================================================================
  2242                              <1> ;main_show_record_info ---- show the information of the boot record
  2243                              <1> ;=============================================================================
  2244                              <1> main_show_record_info:
  2245 00001295 E83C08              <1>         call main_get_focus_record_pointer
  2246 00001298 BF[B737]            <1>         mov di, main_tmp.dialog_buf
  2247                              <1> 
  2248 0000129B E85222              <1>         call get_record_schedule
  2249 0000129E 52                  <1>         push dx
  2250 0000129F 53                  <1>         push bx
  2251 000012A0 50                  <1>         push ax
  2252                              <1> 
  2253 000012A1 66FF740E            <1>         push dword [si + struc_bootrecord.password]
  2254                              <1> 
  2255 000012A5 8B1C                <1>         mov bx, [si + struc_bootrecord.flags]
  2256 000012A7 8B4402              <1>         mov ax, [si + struc_bootrecord.drive_id]
  2257                              <1> 
  2258 000012AA 89F2                <1>         mov dx, si
  2259 000012AC 83C616              <1>         add si, struc_bootrecord.name
  2260 000012AF 56                  <1>         push si                               ; save record name pointer
  2261 000012B0 52                  <1>         push dx                               ; save record pointer
  2262 000012B1 50                  <1>         push ax                               ; save drive_id and part_id
  2263                              <1> 
  2264                              <1> ;write drive id
  2265 000012B2 8B36[324A]          <1>         mov si, [str_idx.drive_id]
  2266 000012B6 E88418              <1>         call strcpy
  2267                              <1> 
  2268 000012B9 F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  2269 000012BD 7407                <1> 	jz .drvid_ok
  2270                              <1> 
  2271 000012BF B02D                <1> 	mov al, '-'
  2272 000012C1 AA                  <1> 	stosb
  2273 000012C2 AA                  <1> 	stosb
  2274 000012C3 AA                  <1> 	stosb
  2275 000012C4 EB05                <1> 	jmp short .write_partid
  2276                              <1> 
  2277                              <1> .drvid_ok:
  2278 000012C6 88C2                <1> 	mov dl, al
  2279 000012C8 E88328              <1> 	call get_drvid_str
  2280                              <1> 
  2281                              <1> .write_partid:
  2282                              <1> ;write part id
  2283 000012CB 8B36[344A]          <1>         mov si, [str_idx.part_id]
  2284 000012CF E86B18              <1>         call strcpy
  2285                              <1> 
  2286 000012D2 58                  <1>         pop ax                          ; ax = drive id, partition id
  2287 000012D3 F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  2288 000012D7 7406                <1> 	jz .partid_ok
  2289 000012D9 B02D                <1> 	mov al, '-'
  2290 000012DB AA                  <1> 	stosb
  2291 000012DC AA                  <1> 	stosb
  2292 000012DD EB0B                <1> 	jmp short .write_rectype
  2293                              <1> 
  2294                              <1> .partid_ok:
  2295 000012DF 0FB6C4              <1>         movzx ax, ah
  2296 000012E2 B90200              <1>         mov cx, 2
  2297 000012E5 E8AE17              <1>         call itoa
  2298 000012E8 01CF                <1>         add di, cx
  2299                              <1> 
  2300                              <1> .write_rectype:
  2301                              <1> ;write record type
  2302 000012EA 8B36[364A]          <1>         mov si, [str_idx.record_type]
  2303 000012EE E84C18              <1>         call strcpy
  2304                              <1> 
  2305 000012F1 89FE                <1>         mov si, di
  2306 000012F3 E8EE17              <1>         call strlen
  2307                              <1> 
  2308 000012F6 89C8                <1>         mov ax, cx
  2309 000012F8 5E                  <1>         pop si                          ; si -> record pointer
  2310 000012F9 E8D21F              <1>         call get_record_typestr
  2311 000012FC 89FE                <1>         mov si, di
  2312 000012FE E8E317              <1>         call strlen
  2313 00001301 29C1                <1>         sub cx, ax
  2314 00001303 01CF                <1>         add di, cx
  2315                              <1> 
  2316                              <1> ;write record name 
  2317 00001305 8B36[384A]          <1>         mov si, [str_idx.record_name]
  2318 00001309 E83118              <1>         call strcpy
  2319 0000130C 5E                  <1>         pop si
  2320 0000130D E82D18              <1>         call strcpy
  2321                              <1> 
  2322                              <1> ;write flags
  2323 00001310 B90700              <1> 	mov cx, 7
  2324 00001313 89DA                <1> 	mov dx, bx
  2325 00001315 31DB                <1> 	xor bx, bx
  2326                              <1> .loop_copy_flags:
  2327 00001317 8BB7[3A4A]          <1> 	mov si, [str_idx.auto_active + bx]
  2328 0000131B 8B87[7B13]          <1> 	mov ax, [.flag_val + bx]
  2329 0000131F E84400              <1> 	call .copy_flag_stat
  2330 00001322 43                  <1> 	inc bx
  2331 00001323 43                  <1> 	inc bx
  2332 00001324 E2F1                <1> 	loop .loop_copy_flags
  2333                              <1> 
  2334                              <1> ;write password flag
  2335 00001326 8B36[484A]          <1>         mov si, [str_idx.password]
  2336 0000132A E81018              <1>         call strcpy
  2337 0000132D 6659                <1>         pop ecx
  2338 0000132F 6609C9              <1>         or ecx, ecx
  2339 00001332 7406                <1>         jz .no_pswd
  2340 00001334 8B36[4C4A]          <1>         mov si, [str_idx.yes]
  2341 00001338 EB04                <1>         jmp short .pswd
  2342                              <1> .no_pswd:
  2343 0000133A 8B36[4E4A]          <1>         mov si, [str_idx.no]
  2344                              <1> .pswd:
  2345 0000133E E8FC17              <1>         call strcpy
  2346                              <1> 
  2347                              <1> ;write schedule time
  2348 00001341 8B36[4A4A]          <1>         mov si, [str_idx.schedule]
  2349 00001345 E8F517              <1>         call strcpy
  2350 00001348 89D1                <1>         mov cx, dx
  2351                              <1> 
  2352 0000134A 58                  <1>         pop ax
  2353 0000134B 5B                  <1>         pop bx
  2354 0000134C 5A                  <1>         pop dx
  2355                              <1> 
  2356 0000134D F7C10080            <1>         test cx, INFOFLAG_SCHEDULED
  2357 00001351 7405                <1>         jz .no_sched
  2358 00001353 E8C421              <1>         call schedule_to_str
  2359 00001356 EB07                <1>         jmp short .show_info
  2360                              <1> 
  2361                              <1> .no_sched:
  2362 00001358 8B36[4E4A]          <1>         mov si, [str_idx.no]
  2363 0000135C E8DE17              <1>         call strcpy
  2364                              <1> 
  2365                              <1> .show_info:
  2366 0000135F BE[B737]            <1>         mov si, main_tmp.dialog_buf
  2367 00001362 E8780D              <1>         call info_box
  2368                              <1> .end:
  2369 00001365 C3                  <1>         ret
  2370                              <1> 
  2371                              <1> ; si -> flag string
  2372                              <1> ; ax = flag
  2373                              <1> .copy_flag_stat:
  2374 00001366 E8D417              <1> 	call strcpy
  2375 00001369 85C2                <1>         test dx, ax
  2376 0000136B 7406                <1>         jz .no_this_flag
  2377 0000136D 8B36[4C4A]          <1>         mov si, [str_idx.yes] 
  2378 00001371 EB04                <1>         jmp short .copy_flag
  2379                              <1> .no_this_flag:
  2380 00001373 8B36[4E4A]          <1>         mov si, [str_idx.no]
  2381                              <1> .copy_flag:
  2382 00001377 E8C317              <1>         call strcpy
  2383 0000137A C3                  <1> 	ret
  2384                              <1> 
  2385 0000137B 001000080004000200- <1> .flag_val	dw INFOFLAG_AUTOACTIVE, INFOFLAG_ACTIVE, INFOFLAG_AUTOHIDE, INFOFLAG_HIDDEN, INFOFLAG_SWAPDRVID
  2386 00001384 20                  <1>
  2387 00001385 00010040            <1> 		dw INFOFLAG_LOGICAL, INFOFLAG_HAVEKEYS
  2388                              <1> 
  2389                              <1>        
  2390                              <1> ;=============================================================================
  2391                              <1> ;main_power_off ---- turn of the power
  2392                              <1> ;=============================================================================
  2393                              <1> main_power_off:
  2394 00001389 E95718              <1>         jmp power_off
  2395                              <1> 
  2396                              <1> 
  2397                              <1> ;=============================================================================
  2398                              <1> ;main_change_bootmenu_style ---- change the boot menu's draw style
  2399                              <1> ;=============================================================================
  2400                              <1> main_change_bootmenu_style:
  2401 0000138C A0[3400]            <1> 	mov al, [ADDR_SBMK_BOOTMENU_STYLE]
  2402 0000138F FEC0                <1> 	inc al
  2403 00001391 3C04                <1> 	cmp al, 4
  2404 00001393 7202                <1> 	jb .ok
  2405 00001395 30C0                <1> 	xor al, al
  2406                              <1> 
  2407                              <1> .ok:
  2408 00001397 A2[3400]            <1> 	mov [ADDR_SBMK_BOOTMENU_STYLE], al
  2409 0000139A E8C602              <1> 	call main_init_boot_menu
  2410                              <1> 
  2411 0000139D FE06[2E2F]          <1>         inc byte [main_tmp.change_occured]
  2412 000013A1 C3                  <1>         ret
  2413                              <1> 
  2414                              <1> ;=============================================================================
  2415                              <1> ;main_toggle_rem_last ---- toggle the remember last switch.
  2416                              <1> ;=============================================================================
  2417                              <1> main_toggle_rem_last:
  2418 000013A2 8036[2C00]10        <1>         xor byte [ADDR_SBMK_FLAGS], KNLFLAG_REMLAST
  2419 000013A7 FE06[2E2F]          <1>         inc byte [main_tmp.change_occured]
  2420 000013AB C3                  <1>         ret
  2421                              <1> 
  2422                              <1> 
  2423                              <1> ;=============================================================================
  2424                              <1> ;main_boot_prev_in_menu ---- boot previous MBR in command menu
  2425                              <1> ;=============================================================================
  2426                              <1> main_boot_prev_in_menu:
  2427 000013AC E80A24              <1> 	call check_prev_mbr
  2428 000013AF 7208                <1> 	jc .end
  2429                              <1> 
  2430 000013B1 E86806              <1>         call main_confirm_root_passwd
  2431 000013B4 7203                <1>         jc .end
  2432                              <1> 
  2433 000013B6 E8F708              <1> 	call main_boot_prev_mbr
  2434                              <1> .end:
  2435 000013B9 C3                  <1> 	ret
  2436                              <1> 
  2437                              <1> ;=============================================================================
  2438                              <1> ;main_install_sbm
  2439                              <1> ;=============================================================================
  2440                              <1> main_install_sbm:
  2441                              <1> 
  2442                              <1> %ifndef EMULATE_PROG
  2443 000013BA 803E[C747]00        <1>         cmp byte [GOOD_RECORD_NUMBER], 0
  2444 000013BF 744B                <1>         je .end
  2445                              <1> 
  2446 000013C1 E81007              <1>         call main_get_focus_record_pointer
  2447 000013C4 8B04                <1> 	mov ax, [si + struc_bootrecord.flags]
  2448 000013C6 A98000              <1>         test ax , INFOFLAG_ISDRIVER
  2449 000013C9 7441                <1>         jz .end
  2450 000013CB A91000              <1>         test ax, DRVFLAG_ISCDROM
  2451 000013CE 753C                <1> 	jnz .end
  2452                              <1> 
  2453 000013D0 E84906              <1>         call main_confirm_root_passwd
  2454 000013D3 7237                <1>         jc .end
  2455                              <1> 
  2456 000013D5 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]
  2457 000013D8 52                  <1> 	push dx
  2458                              <1> 
  2459 000013D9 BF[B737]            <1>         mov di, main_tmp.dialog_buf
  2460 000013DC 8B36[6C4A]          <1>         mov si, [str_idx.inst_confirm]
  2461 000013E0 57                  <1>         push di
  2462 000013E1 E85917              <1>         call strcpy
  2463 000013E4 E86727              <1> 	call get_drvid_str
  2464                              <1> 
  2465 000013E7 B03F                <1>         mov al, '?'
  2466 000013E9 AA                  <1>         stosb
  2467 000013EA B00D                <1>         mov al, 0x0d
  2468 000013EC AA                  <1>         stosb
  2469                              <1> 
  2470 000013ED 8B36[784A]          <1>         mov si, [str_idx.confirm]
  2471 000013F1 E84917              <1>         call strcpy
  2472 000013F4 5E                  <1>         pop si
  2473 000013F5 E8E50C              <1>         call info_box
  2474 000013F8 5A                  <1> 	pop dx
  2475                              <1> 
  2476 000013F9 3A06[AD49]          <1>         cmp al, [yes_key_lower]
  2477 000013FD 740E                <1>         je .go_inst
  2478 000013FF 3A06[AE49]          <1>         cmp al, [yes_key_upper]
  2479 00001403 7408                <1>         je .go_inst
  2480                              <1> 
  2481 00001405 8B36[704A]          <1>         mov si, [str_idx.inst_abort]
  2482 00001409 E8BF0C              <1>         call error_box
  2483                              <1> .end:
  2484 0000140C C3                  <1>         ret
  2485                              <1> 
  2486                              <1> .go_inst:
  2487 0000140D FC                  <1> 	cld
  2488                              <1> ;read mbr into buf1
  2489 0000140E 6631DB              <1>         xor ebx, ebx
  2490 00001411 B80102              <1>         mov ax, (INT13H_READ << 8) | 0x01
  2491 00001414 BF[6D1C]            <1>         mov di, knl_tmp.disk_buf1
  2492 00001417 E8EB26              <1>         call disk_access
  2493 0000141A 0F827C00            <1>         jmpc .disk_error
  2494                              <1> 
  2495                              <1> ;backup old previous mbr into buf1, put new mbr into previous_mbr
  2496 0000141E BE[FE09]            <1> 	mov si, ADDR_SBMK_PREVIOUS_MBR
  2497 00001421 B90002              <1> 	mov cx, SECTOR_SIZE
  2498 00001424 E87700              <1> 	call main_xchg_buffer
  2499                              <1> 
  2500                              <1> ;backup sbmk header data into buf2
  2501 00001427 31F6                <1>         xor si, si
  2502 00001429 BF[6D24]            <1> 	mov di, knl_tmp.disk_buf2
  2503 0000142C B9[4000]            <1> 	mov cx, end_of_sbmk_header
  2504 0000142F F3A4                <1> 	rep movsb
  2505                              <1> 
  2506                              <1> ;set some variate
  2507 00001431 6631C0              <1>         xor eax, eax
  2508 00001434 FEC0                <1> 	inc al
  2509 00001436 8A0E[0F00]          <1> 	mov cl, [ADDR_SBMK_SECTORS]
  2510                              <1> 
  2511 0000143A 8816[1000]          <1> 	mov [ADDR_SBMK_DRVID], dl
  2512 0000143E 880E[1100]          <1> 	mov [ADDR_SBMK_BLOCK_MAP], cl
  2513 00001442 66A3[1200]          <1> 	mov [ADDR_SBMK_BLOCK_MAP+1], eax    ; kernel address = 1
  2514 00001446 8826[1600]          <1> 	mov [ADDR_SBMK_BLOCK_MAP+SIZE_OF_STRUC_BLOCK_MAP], ah
  2515                              <1>                                               ; only one block of kernel
  2516 0000144A 8826[0E00]          <1> 	mov [ADDR_SBMK_CHECKSUM], ah        ; set checksum to zero
  2517                              <1> 
  2518 0000144E 880E[8608]          <1>         mov [ADDR_SBMK_SBML_CODES + struc_sbml_header.block_map], cl
  2519 00001452 66A3[8708]          <1>         mov [ADDR_SBMK_SBML_CODES + struc_sbml_header.block_map+1], eax
  2520 00001456 8826[8B08]          <1> 	mov [ADDR_SBMK_SBML_CODES + struc_sbml_header.block_map+SIZE_OF_STRUC_BLOCK_MAP], ah
  2521                              <1> 
  2522                              <1> ;write sbmk to disk
  2523 0000145A E89807              <1>         call main_save_boot_manager
  2524 0000145D 9C                  <1> 	pushf
  2525                              <1> 
  2526                              <1> ;restore sbmk header data
  2527 0000145E 31FF                <1> 	xor di, di
  2528 00001460 BE[6D24]            <1> 	mov si, knl_tmp.disk_buf2
  2529 00001463 B9[4000]            <1> 	mov cx, end_of_sbmk_header
  2530 00001466 F3A4                <1> 	rep movsb
  2531                              <1> 	
  2532                              <1> ;restore previous mbr
  2533 00001468 BE[FE09]            <1> 	mov si, ADDR_SBMK_PREVIOUS_MBR
  2534 0000146B BF[6D1C]            <1> 	mov di, knl_tmp.disk_buf1
  2535                              <1> 
  2536 0000146E B90002              <1> 	mov cx, SECTOR_SIZE
  2537 00001471 E82A00              <1> 	call main_xchg_buffer
  2538                              <1> 
  2539 00001474 9D                  <1> 	popf
  2540 00001475 7223                <1>         jc .disk_error
  2541                              <1> 
  2542                              <1> ;copy sbml to disk_buf1
  2543 00001477 57                  <1> 	push di
  2544 00001478 BE[4008]            <1> 	mov si, ADDR_SBMK_SBML_CODES
  2545 0000147B B9BE01              <1> 	mov cx, SIZE_OF_MBR
  2546 0000147E F3A4                <1> 	rep movsb
  2547 00001480 5F                  <1> 	pop di
  2548 00001481 C785FE0155AA        <1> 	mov word [di + BR_FLAG_OFF], BR_GOOD_FLAG
  2549                              <1> 
  2550                              <1> ;write loader to disk
  2551 00001487 B80103              <1>         mov ax, (INT13H_WRITE << 8) | 0x01
  2552 0000148A 6631DB              <1> 	xor ebx,ebx
  2553 0000148D E87526              <1>         call disk_access
  2554 00001490 7208                <1>         jc .disk_error
  2555                              <1> 
  2556                              <1> ;install ok
  2557 00001492 8B36[6E4A]          <1>         mov si, [str_idx.inst_ok]
  2558 00001496 E8440C              <1>         call info_box
  2559 00001499 C3                  <1>         ret
  2560                              <1> 
  2561                              <1> .disk_error:
  2562 0000149A E8E905              <1>         call main_show_disk_error
  2563                              <1> 
  2564                              <1> %endif
  2565 0000149D C3                  <1>         ret
  2566                              <1> 
  2567                              <1> ; cx = count
  2568                              <1> ; si -> source
  2569                              <1> ; di -> dest
  2570                              <1> main_xchg_buffer:
  2571 0000149E 60                  <1> 	pusha
  2572                              <1> .xchg:
  2573 0000149F 8A04                <1> 	mov al, [si]
  2574 000014A1 8605                <1> 	xchg al, [di]
  2575 000014A3 8804                <1> 	mov [si], al
  2576 000014A5 46                  <1> 	inc si
  2577 000014A6 47                  <1> 	inc di
  2578 000014A7 E2F6                <1> 	loop .xchg
  2579 000014A9 61                  <1> 	popa
  2580 000014AA C3                  <1> 	ret
  2581                              <1> 
  2582                              <1> ;=============================================================================
  2583                              <1> ; main_uninstall_sbm
  2584                              <1> ;=============================================================================
  2585                              <1> main_uninstall_sbm:
  2586                              <1> %ifndef EMULATE_PROG
  2587                              <1> 
  2588 000014AB BF[B737]            <1>         mov di, main_tmp.dialog_buf
  2589 000014AE 8B36[724A]          <1>         mov si, [str_idx.uninst_confirm]
  2590 000014B2 57                  <1>         push di
  2591 000014B3 E88716              <1>         call strcpy
  2592 000014B6 8B36[784A]          <1>         mov si, [str_idx.confirm]
  2593 000014BA E88016              <1>         call strcpy
  2594 000014BD 5E                  <1>         pop si
  2595 000014BE E81C0C              <1>         call info_box
  2596                              <1> 
  2597 000014C1 3A06[AD49]          <1>         cmp al, [yes_key_lower]
  2598 000014C5 740E                <1>         je .go_uninst
  2599 000014C7 3A06[AE49]          <1>         cmp al, [yes_key_upper]
  2600 000014CB 7408                <1>         je .go_uninst
  2601                              <1> 
  2602 000014CD 8B36[764A]          <1>         mov si, [str_idx.uninst_abort]
  2603 000014D1 E8F70B              <1>         call error_box
  2604                              <1> .end:
  2605 000014D4 C3                  <1>         ret
  2606                              <1> 
  2607                              <1> .go_uninst:
  2608                              <1>         
  2609                              <1> ;read mbr into buf1
  2610 000014D5 8A16[1000]          <1>         mov dl, [ADDR_SBMK_DRVID]
  2611 000014D9 6631DB              <1>         xor ebx, ebx
  2612 000014DC B80102              <1>         mov ax, (INT13H_READ << 8) | 0x01
  2613 000014DF BF[6D1C]            <1>         mov di, knl_tmp.disk_buf1
  2614 000014E2 E82026              <1>         call disk_access
  2615 000014E5 723B                <1>         jc .disk_error
  2616                              <1> 
  2617                              <1> ;check if sbm is present
  2618 000014E7 66817D4053424D4C    <1>         cmp dword [di + struc_sbml_header.magic], SBML_MAGIC
  2619 000014EF 7535                <1>         jne .no_sbml
  2620                              <1> 
  2621 000014F1 817D440103          <1>         cmp word [di + struc_sbml_header.version], SBML_VERSION
  2622 000014F6 752E                <1>         jne .no_sbml
  2623                              <1> 
  2624                              <1> ;restore previous mbr
  2625 000014F8 57                  <1>         push di
  2626 000014F9 BE[FE09]            <1>         mov si, ADDR_SBMK_PREVIOUS_MBR
  2627 000014FC B9BE01              <1>         mov cx, SIZE_OF_MBR
  2628 000014FF FC                  <1>         cld
  2629 00001500 F3A4                <1>         rep movsb
  2630 00001502 5F                  <1>         pop di
  2631 00001503 C785FE0155AA        <1>         mov word [di + BR_FLAG_OFF], BR_GOOD_FLAG
  2632                              <1> 
  2633                              <1> ;write mbr back to disk
  2634 00001509 6631DB              <1>         xor ebx, ebx
  2635 0000150C B80103              <1>         mov ax, (INT13H_WRITE << 8) | 0x01
  2636 0000150F BF[6D1C]            <1>         mov di, knl_tmp.disk_buf1
  2637 00001512 E8F025              <1>         call disk_access
  2638 00001515 720B                <1>         jc .disk_error
  2639 00001517 8B36[744A]          <1>         mov si, [str_idx.uninst_ok]
  2640 0000151B E8BF0B              <1>         call info_box
  2641 0000151E E8E717              <1>         call reboot
  2642 00001521 C3                  <1>         ret
  2643                              <1> 
  2644                              <1> .disk_error:
  2645 00001522 E86105              <1>         call main_show_disk_error
  2646 00001525 C3                  <1>         ret
  2647                              <1> 
  2648                              <1> .no_sbml:
  2649 00001526 8B36[7A4A]          <1>         mov si, [str_idx.no_sbml]
  2650 0000152A E89E0B              <1>         call error_box
  2651                              <1> %endif
  2652 0000152D C3                  <1>         ret
  2653                              <1> 
  2654                              <1> ;=============================================================================
  2655                              <1> ; main_toggle_int13ext
  2656                              <1> ;=============================================================================
  2657                              <1> main_toggle_int13ext:
  2658 0000152E A0[2C00]            <1>         mov al, [ADDR_SBMK_FLAGS]
  2659 00001531 3404                <1>         xor al, KNLFLAG_NOINT13EXT
  2660 00001533 A2[2C00]            <1>         mov [ADDR_SBMK_FLAGS], al
  2661                              <1> 
  2662 00001536 A804                <1>         test al, KNLFLAG_NOINT13EXT
  2663 00001538 7507                <1>         jnz .no_int13ext
  2664 0000153A C606[5C3B]01        <1>         mov byte [use_int13_ext], 1
  2665 0000153F EB05                <1>         jmp short .endok
  2666                              <1> 
  2667                              <1> .no_int13ext:
  2668 00001541 C606[5C3B]00        <1>         mov byte [use_int13_ext], 0
  2669                              <1> .endok:
  2670 00001546 FE06[2E2F]          <1>         inc byte [main_tmp.change_occured]
  2671 0000154A C3                  <1>         ret
  2672                              <1> 
  2673                              <1> ;=============================================================================
  2674                              <1> ; main_set_cdrom_ioports
  2675                              <1> ;=============================================================================
  2676                              <1> 
  2677                              <1> main_set_cdrom_ioports:
  2678                              <1> %ifndef DISABLE_CDBOOT
  2679 0000154B F606[2C00]08        <1> 	test byte [ADDR_SBMK_FLAGS], KNLFLAG_NOCDROM
  2680 00001550 756E                <1> 	jnz .end
  2681                              <1> 
  2682 00001552 E8C704              <1>         call main_confirm_root_passwd
  2683 00001555 7269                <1>         jc .end
  2684                              <1> 
  2685 00001557 8D3E[B737]          <1>         lea di, [main_tmp.dialog_buf]
  2686 0000155B 57                  <1> 	push di
  2687 0000155C C60500              <1> 	mov byte [di], 0 
  2688 0000155F A1[3600]            <1> 	mov ax, [ADDR_SBMK_CDROM_IOPORTS]
  2689 00001562 09C0                <1> 	or ax, ax
  2690 00001564 7411                <1> 	jz .no_ports
  2691 00001566 B104                <1> 	mov cl, 4
  2692 00001568 E80216              <1> 	call htoa
  2693 0000156B 83C704              <1> 	add di, 4
  2694 0000156E B02C                <1> 	mov al, ','
  2695 00001570 AA                  <1> 	stosb
  2696 00001571 A1[3800]            <1> 	mov ax, [ADDR_SBMK_CDROM_IOPORTS+2]
  2697 00001574 E8F615              <1> 	call htoa
  2698                              <1> .no_ports:
  2699 00001577 5F                  <1> 	pop di
  2700                              <1> 
  2701 00001578 0FB606[D649]        <1>         movzx ax, [color.input_box_msg]
  2702 0000157D 8B1E[D449]          <1>         mov bx, [color.input_box]
  2703 00001581 B90909              <1>         mov cx, 0x0909
  2704 00001584 31D2                <1>         xor dx, dx
  2705 00001586 8B36[2E4A]          <1>         mov si, [str_idx.io_port]
  2706                              <1> 	
  2707 0000158A E81E0D              <1>         call input_box
  2708 0000158D 7231                <1>         jc .end
  2709                              <1> 
  2710 0000158F 89FE                <1>         mov si, di
  2711 00001591 E8F415              <1> 	call atoh
  2712 00001594 803C2C              <1> 	cmp byte [si], ','
  2713 00001597 751E                <1> 	jne .invalid
  2714 00001599 89C3                <1> 	mov bx, ax
  2715 0000159B 46                  <1> 	inc si
  2716 0000159C E8E915              <1> 	call atoh
  2717 0000159F 803C00              <1> 	cmp byte [si], 0
  2718 000015A2 7513                <1> 	jne .invalid
  2719                              <1> 
  2720 000015A4 89C1                <1> 	mov cx, ax
  2721 000015A6 891E[3600]          <1> 	mov [ADDR_SBMK_CDROM_IOPORTS], bx
  2722 000015AA 890E[3800]          <1> 	mov [ADDR_SBMK_CDROM_IOPORTS+2], cx
  2723                              <1> 
  2724 000015AE FE06[2E2F]          <1>         inc byte [main_tmp.change_occured]               ; some changes occured.
  2725 000015B2 E81626              <1> 	call set_io_ports
  2726 000015B5 EB09                <1> 	jmp short .end
  2727                              <1> 
  2728                              <1> .invalid:
  2729 000015B7 8B36[7C4A]          <1> 	mov si, [str_idx.invalid_ioports]
  2730 000015BB E80D0B              <1> 	call error_box
  2731 000015BE EB00                <1> 	jmp .end
  2732                              <1> .end:
  2733                              <1> %endif
  2734 000015C0 C3                  <1>         ret
  2735                              <1> 
  2736                              <1> ;=============================================================================
  2737                              <1> ;main_set_y2k_year
  2738                              <1> ;=============================================================================
  2739                              <1> 
  2740                              <1> main_set_y2k_year:
  2741                              <1> %ifdef Y2K_BUGFIX
  2742                              <1>         lea di, [main_tmp.dialog_buf]
  2743                              <1> 	mov byte [di], 0 
  2744                              <1> 	mov cl,4
  2745                              <1> 	mov ax,[ADDR_SBMK_Y2K_LAST_YEAR]
  2746                              <1> 	or ax,ax
  2747                              <1> 	jz .nofix
  2748                              <1> 	call bcd_to_str
  2749                              <1> .nofix:
  2750                              <1>         movzx ax, [color.input_box_msg]
  2751                              <1>         mov bx, [color.input_box]
  2752                              <1>         mov si, [str_idx.year]
  2753                              <1>         mov ch, cl
  2754                              <1> 	xor dx, dx
  2755                              <1> 
  2756                              <1>         call input_box
  2757                              <1>         jc .end
  2758                              <1> 
  2759                              <1> 	xor bx,bx
  2760                              <1> 	or ch,ch
  2761                              <1> 	jz .set
  2762                              <1> 
  2763                              <1>         mov si,di
  2764                              <1> .loop:
  2765                              <1> 	shl bx,cl
  2766                              <1> 	lodsb
  2767                              <1> 	sub al,'0'
  2768                              <1> 	or bl,al
  2769                              <1> 	dec ch
  2770                              <1> 	jnz .loop
  2771                              <1> 
  2772                              <1> 	mov ah,4
  2773                              <1> 	int 0x1a
  2774                              <1> 	jc .end
  2775                              <1> 
  2776                              <1> 	mov cx,bx
  2777                              <1> 	mov ah,5
  2778                              <1> 	int 0x1a
  2779                              <1> .set:
  2780                              <1> 	mov [ADDR_SBMK_Y2K_LAST_YEAR],bx
  2781                              <1>         inc byte [main_tmp.change_occured]               ; some changes occured.
  2782                              <1> .end:
  2783                              <1> %endif
  2784 000015C1 C3                  <1>         ret
  2785                              <1> 
  2786                              <1> %endif  ; END OF MAIN
  2787                                  %include "main-utils.asm"
  2788                              <1> ; asmsyntax=nasm
  2789                              <1> ;
  2790                              <1> ; main-utils.asm
  2791                              <1> ;
  2792                              <1> ; utility functions for main program
  2793                              <1> ;
  2794                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
  2795                              <1> ;
  2796                              <1> 
  2797                              <1> %ifdef MAIN
  2798                              <1> 
  2799                              <1> 
  2800                              <1> ;=============================================================================
  2801                              <1> ; >>>>>>>>>>>>>>>>>>>>>>>>> Initialization Functions <<<<<<<<<<<<<<<<<<<<<<<<<
  2802                              <1> ;=============================================================================
  2803                              <1> 
  2804                              <1> ;=============================================================================
  2805                              <1> ; main_init_theme ---- initialize the theme data.
  2806                              <1> ;=============================================================================
  2807                              <1> main_init_theme:
  2808 000015C2 8B1E[EF49]          <1>         mov bx, [icon.brand]
  2809 000015C6 09DB                <1>         or bx, bx
  2810 000015C8 7406                <1>         jz .adjust_bkgnd                            ; no brand icon
  2811 000015CA 8106[EF49][9949]    <1>         add word [icon.brand], theme_start          ;
  2812                              <1> .adjust_bkgnd:
  2813 000015D0 8B1E[F349]          <1>         mov bx, [icon.background]
  2814 000015D4 09DB                <1>         or bx, bx
  2815 000015D6 7406                <1>         jz .adjust_font                             ; no background icon
  2816 000015D8 8106[F349][9949]    <1>         add word [icon.background], theme_start
  2817                              <1> .adjust_font:
  2818 000015DE 8B1E[F749]          <1>         mov bx, [font.data]
  2819 000015E2 09DB                <1>         or bx, bx
  2820 000015E4 7406                <1>         jz .adjust_keymap
  2821 000015E6 8106[F749][9949]    <1>         add word [font.data], theme_start
  2822                              <1> .adjust_keymap:
  2823 000015EC 8B1E[044A]          <1>         mov bx, [keymap.data]
  2824 000015F0 09DB                <1>         or bx, bx
  2825 000015F2 7406                <1>         jz .adjust_str
  2826 000015F4 8106[044A][9949]    <1>         add word [keymap.data], theme_start
  2827                              <1> 
  2828                              <1> .adjust_str:
  2829 000015FA 8D36[064A]          <1>         lea si, [str_idx]
  2830 000015FE B97800              <1>         mov cx, (end_of_str_idx - str_idx)/2
  2831                              <1>         
  2832                              <1> .loop_adjust:
  2833 00001601 8B1C                <1>         mov bx, [si]
  2834 00001603 81C3[9949]          <1>         add bx, theme_start
  2835 00001607 891C                <1>         mov [si], bx
  2836 00001609 83C602              <1>         add si, 2
  2837 0000160C E2F3                <1>         loop .loop_adjust
  2838                              <1> 
  2839 0000160E B010                <1>         mov al, 0x10
  2840 00001610 2006[AA49]          <1>         and [keyboard_type], al
  2841                              <1> 
  2842 00001614 C3                  <1>         ret
  2843                              <1>         
  2844                              <1> ;=============================================================================
  2845                              <1> ; main_init_all_menus ---- initialize the menus
  2846                              <1> ;=============================================================================
  2847                              <1> main_init_all_menus:
  2848 00001615 BE[C449]            <1>         mov si, color.cmd_menu
  2849                              <1> ;initialize main menu
  2850 00001618 BF[CC47]            <1>         mov di, main_windows_data.main_menu
  2851 0000161B E82800              <1>         call main_init_menu
  2852 0000161E A1[000C]            <1> 	mov ax, [ADDR_SBMK_MAIN_MENU_POS]
  2853 00001621 A3[D247]            <1> 	mov [main_windows_data.main_menu + struc_window.win_pos], ax
  2854                              <1> ;initialize record menu
  2855 00001624 BF[F747]            <1>         mov di, main_windows_data.record_menu
  2856 00001627 E81C00              <1>         call main_init_menu
  2857 0000162A A1[020C]            <1> 	mov ax, [ADDR_SBMK_RECORD_MENU_POS]
  2858 0000162D A3[FD47]            <1> 	mov [main_windows_data.record_menu + struc_window.win_pos], ax
  2859                              <1> ;initialize system menu
  2860 00001630 BF[2248]            <1>         mov di, main_windows_data.sys_menu
  2861 00001633 E81000              <1>         call main_init_menu
  2862 00001636 A1[040C]            <1> 	mov ax, [ADDR_SBMK_SYS_MENU_POS]
  2863 00001639 A3[2848]            <1> 	mov [main_windows_data.sys_menu + struc_window.win_pos], ax
  2864                              <1> ;initialize boot menu
  2865 0000163C A1[FE0B]            <1> 	mov ax, [ADDR_SBMK_BOOT_MENU_POS]
  2866 0000163F A3[A747]            <1> 	mov [main_windows_data.boot_menu + struc_window.win_pos], ax
  2867 00001642 E81E00              <1>         call main_init_boot_menu
  2868 00001645 C3                  <1>         ret
  2869                              <1> 
  2870                              <1> ;=============================================================================
  2871                              <1> ; main_init_menu
  2872                              <1> ;input:
  2873                              <1> ;       ds:si -> colors
  2874                              <1> ;       ds:di -> struc_menu_box
  2875                              <1> ;=============================================================================
  2876                              <1> main_init_menu:
  2877 00001646 56                  <1>         push si
  2878 00001647 FC                  <1>         cld
  2879 00001648 AD                  <1>         lodsw
  2880 00001649 894504              <1>         mov [di + struc_window.win_attr], ax
  2881 0000164C AC                  <1>         lodsb
  2882 0000164D 88451C              <1>         mov [di + struc_menu_box.menu_header_attr], al
  2883 00001650 AD                  <1>         lodsw
  2884 00001651 89451D              <1>         mov [di + struc_menu_box.menu_norm_attr], ax
  2885 00001654 AD                  <1>         lodsw
  2886 00001655 89451F              <1>         mov [di + struc_menu_box.menu_focus_attr], ax
  2887 00001658 AC                  <1>         lodsb
  2888 00001659 884525              <1>         mov [di + struc_menu_box.scrollbar_attr], al
  2889 0000165C 89FE                <1>         mov si, di
  2890 0000165E E8B30C              <1>         call menubox_adjust_geometry
  2891 00001661 5E                  <1>         pop si
  2892 00001662 C3                  <1>         ret
  2893                              <1> 
  2894                              <1> ;=============================================================================
  2895                              <1> ; main_init_boot_menu
  2896                              <1> ;=============================================================================
  2897                              <1> main_init_boot_menu:
  2898 00001663 60                  <1>         pusha
  2899                              <1> ;initialize boot menu
  2900 00001664 BF[A147]            <1>         mov di, main_windows_data.boot_menu
  2901 00001667 A0[B949]            <1>         mov al, [size.boot_menu_win_height]
  2902 0000166A 884509              <1>         mov [di + struc_window.win_size + 1], al        ; set boot menu height
  2903                              <1> 
  2904                              <1> ;set boot menu header
  2905 0000166D 0FB606[3400]        <1>         movzx ax, byte [ADDR_SBMK_BOOTMENU_STYLE]
  2906 00001672 BB[084A]            <1>         mov bx, str_idx.boot_menu_header
  2907 00001675 3C03                <1>         cmp al, 3
  2908 00001677 7602                <1>         jbe .bmstyle_ok
  2909 00001679 30C0                <1>         xor al, al
  2910                              <1> 
  2911                              <1> .bmstyle_ok:
  2912 0000167B D0E0                <1>         shl al, 1
  2913 0000167D 01C3                <1>         add bx, ax
  2914 0000167F 895D1A              <1>         mov [di + struc_menu_box.menu_header], bx
  2915                              <1> 
  2916                              <1> ;init the color and geometry of boot menu
  2917 00001682 BE[BC49]            <1>         mov si, color.boot_menu
  2918 00001685 E8BEFF              <1>         call main_init_menu
  2919                              <1> 
  2920                              <1> ; set position of boot menu window 
  2921                              <1> 
  2922 00001688 8B4506              <1>         mov ax, [di + struc_window.win_pos]
  2923 0000168B 88C3                <1>         mov bl, al
  2924                              <1> 
  2925 0000168D 025D08              <1>         add bl, [di + struc_window.win_size]
  2926 00001690 80C302              <1>         add bl, 2
  2927 00001693 3A1E[C329]          <1>         cmp bl, [ui_screen_width]
  2928 00001697 7208                <1>         jb .bmpos_ok
  2929                              <1> 
  2930 00001699 A0[C329]            <1>         mov al, [ui_screen_width]
  2931 0000169C 2A4508              <1>         sub al, [di + struc_window.win_size]
  2932 0000169F 2C02                <1>         sub al, 2
  2933                              <1> 
  2934                              <1> .bmpos_ok:
  2935 000016A1 894506              <1>         mov [di + struc_window.win_pos], ax
  2936 000016A4 61                  <1>         popa
  2937 000016A5 C3                  <1>         ret
  2938                              <1> 
  2939                              <1> ;=============================================================================
  2940                              <1> ;main_init_video ---- init the video mode
  2941                              <1> ;input:
  2942                              <1> ;      none
  2943                              <1> ;output:
  2944                              <1> ;      none
  2945                              <1> ;=============================================================================
  2946                              <1> main_init_video:
  2947 000016A6 60                  <1> 	pusha
  2948 000016A7 A0[A949]            <1>         mov al, [video_mode]
  2949 000016AA B308                <1>         mov bl, 8
  2950 000016AC 8B2E[F749]          <1>         mov bp, [font.data]
  2951 000016B0 8B0E[F549]          <1>         mov cx, [font.number]
  2952                              <1>         
  2953 000016B4 E82908              <1>         call set_video_mode
  2954 000016B7 61                  <1> 	popa
  2955 000016B8 C3                  <1>         ret
  2956                              <1> 
  2957                              <1> ;=============================================================================
  2958                              <1> ;main_init_good_record_list ---- init the good boot record list
  2959                              <1> ;input:
  2960                              <1> ;      none
  2961                              <1> ;output:
  2962                              <1> ;      cf = 0 sucess
  2963                              <1> ;      cf = 1 failed, no good record
  2964                              <1> ;=============================================================================
  2965                              <1> main_init_good_record_list:
  2966 000016B9 FC                  <1>         cld
  2967 000016BA 60                  <1>         pusha
  2968 000016BB B92000              <1>         mov cx, MAX_RECORD_NUM
  2969 000016BE 8D3E[082F]          <1>         lea di, [main_tmp.good_record_list]
  2970 000016C2 8D36[4000]          <1>         lea si, [ADDR_SBMK_BOOT_RECORDS]
  2971 000016C6 31C0                <1>         xor ax, ax
  2972                              <1> 
  2973                              <1> .loop_check:
  2974 000016C8 E86E19              <1>         call check_bootrecord                   ; check if it's valid
  2975 000016CB 7203                <1>         jc .check_next
  2976 000016CD AA                  <1>         stosb                                   ; store it's index to buffer
  2977 000016CE FEC4                <1>         inc ah
  2978                              <1>         
  2979                              <1> .check_next:
  2980 000016D0 FEC0                <1>         inc al
  2981 000016D2 83C640              <1>         add si, SIZE_OF_BOOTRECORD
  2982 000016D5 E2F1                <1>         loop .loop_check
  2983                              <1> 
  2984 000016D7 8826[C747]          <1>         mov [GOOD_RECORD_NUMBER], ah
  2985 000016DB 08E4                <1>         or ah, ah
  2986 000016DD 7501                <1>         jnz .ok
  2987 000016DF F9                  <1>         stc
  2988                              <1> .ok:
  2989 000016E0 61                  <1>         popa
  2990 000016E1 C3                  <1>         ret
  2991                              <1> 
  2992                              <1> ;=============================================================================
  2993                              <1> ;init_boot_records ---- init the boot records list
  2994                              <1> ;input:
  2995                              <1> ;      none
  2996                              <1> ;output:
  2997                              <1> ;      none
  2998                              <1> ;=============================================================================
  2999                              <1> main_init_boot_records:
  3000 000016E2 60                  <1>         pusha
  3001 000016E3 FE06[2E2F]          <1>         inc byte [main_tmp.change_occured]         ; some changes occured.
  3002                              <1> 
  3003 000016E7 FC                  <1>         cld
  3004 000016E8 BE[4000]            <1>         mov si, ADDR_SBMK_BOOT_RECORDS
  3005 000016EB BF[672F]            <1>         mov di, main_tmp.records_buf
  3006                              <1> 
  3007 000016EE B90008              <1> 	mov cx, MAX_RECORD_NUM * SIZE_OF_BOOTRECORD
  3008 000016F1 E80C18              <1> 	call clear_memory
  3009                              <1> 
  3010 000016F4 B84000              <1>         mov ax, SIZE_OF_BOOTRECORD        ; ax = size of bootrecord
  3011 000016F7 B92000              <1>         mov cx, MAX_RECORD_NUM            ; cx = max record number
  3012                              <1> 
  3013 000016FA 88CB                <1>         mov bl, cl
  3014                              <1> 
  3015 000016FC 56                  <1>         push si
  3016 000016FD 51                  <1>         push cx                           ; cx = MAX_RECORD_NUM
  3017                              <1> .bkp_good_records:
  3018 000016FE E83819              <1>         call check_bootrecord
  3019 00001701 720A                <1>         jc .bad_record
  3020                              <1> 
  3021 00001703 56                  <1>         push si
  3022 00001704 51                  <1>         push cx
  3023 00001705 89C1                <1>         mov cx, ax
  3024 00001707 F3A4                <1>         rep movsb
  3025 00001709 59                  <1>         pop cx
  3026 0000170A 5E                  <1>         pop si
  3027                              <1> 
  3028 0000170B FECB                <1>         dec bl
  3029                              <1>         
  3030                              <1> .bad_record:
  3031 0000170D 01C6                <1>         add si, ax
  3032 0000170F E2ED                <1>         loop .bkp_good_records
  3033                              <1> 
  3034 00001711 59                  <1>         pop cx                           ; cx = MAX_RECORD_NUM
  3035 00001712 5E                  <1>         pop si                           ; si -> boot_records
  3036 00001713 87F7                <1>         xchg si, di                      ; di -> boot_records
  3037                              <1> 
  3038 00001715 57                  <1>         push di
  3039 00001716 50                  <1> 	push ax
  3040 00001717 30D2                <1>         xor dl, dl
  3041 00001719 F606[2C00]20        <1>         test byte [ADDR_SBMK_FLAGS], KNLFLAG_ONLYPARTS
  3042 0000171E 0F95C0              <1> 	setnz al
  3043 00001721 E8621B              <1>         call search_records
  3044 00001724 58                  <1> 	pop ax
  3045 00001725 5F                  <1>         pop di
  3046                              <1> 
  3047                              <1> ;search finished, find out new records
  3048 00001726 B92000              <1>         mov cx, MAX_RECORD_NUM
  3049 00001729 87F7                <1>         xchg si, di                      ; si -> boot_records
  3050                              <1> 
  3051 0000172B 56                  <1>         push si
  3052                              <1> 
  3053 0000172C 08DB                <1>         or bl, bl
  3054 0000172E 741C                <1>         jz .no_space
  3055                              <1> 
  3056                              <1> .search_news:
  3057 00001730 57                  <1>         push di
  3058 00001731 BF[672F]            <1>         mov di, main_tmp.records_buf
  3059 00001734 E82000              <1>         call main_find_record_in_buf
  3060 00001737 5F                  <1>         pop di
  3061                              <1> 
  3062 00001738 730A                <1>         jnc .found
  3063                              <1> 
  3064 0000173A 51                  <1>         push cx
  3065 0000173B 56                  <1>         push si
  3066 0000173C 89C1                <1>         mov cx, ax
  3067 0000173E F3A4                <1>         rep movsb
  3068 00001740 5E                  <1>         pop si
  3069 00001741 59                  <1>         pop cx
  3070                              <1> 
  3071 00001742 FECB                <1>         dec bl
  3072                              <1> 
  3073                              <1> .found:
  3074 00001744 08DB                <1>         or bl, bl
  3075 00001746 7404                <1>         jz .no_space
  3076 00001748 01C6                <1>         add si, ax
  3077 0000174A E2E4                <1>         loop .search_news
  3078                              <1> 
  3079                              <1> .no_space:
  3080                              <1> 
  3081 0000174C 5F                  <1>         pop di
  3082 0000174D BE[672F]            <1>         mov si, main_tmp.records_buf
  3083 00001750 B90008              <1> 	mov cx, MAX_RECORD_NUM * SIZE_OF_BOOTRECORD
  3084 00001753 F3A4                <1>         rep movsb
  3085                              <1> 
  3086 00001755 61                  <1>         popa
  3087 00001756 C3                  <1>         ret
  3088                              <1> 
  3089                              <1> ;=============================================================================
  3090                              <1> ; main_find_record_in_buf ---- find a record in a buffer
  3091                              <1> ; input:
  3092                              <1> ;      ds:si -> the record
  3093                              <1> ;      es:di -> the buffer
  3094                              <1> ; output:
  3095                              <1> ;      cf = 1 not found
  3096                              <1> ;=============================================================================
  3097                              <1> main_find_record_in_buf:
  3098 00001757 60                  <1>         pusha
  3099 00001758 8B1C                <1> 	mov bx, [si]				; flags
  3100 0000175A F7C30900            <1>         test bx, DRVFLAG_DRIVEOK|INFOFLAG_ISSPECIAL
  3101                              <1> 
  3102 0000175E 7442                <1>         jz .not_found
  3103                              <1> 
  3104 00001760 B92000              <1>         mov cx, MAX_RECORD_NUM
  3105                              <1> 
  3106                              <1> .compare_next:
  3107 00001763 F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  3108 00001767 7408                <1> 	jz .normal_rec
  3109 00001769 F7050800            <1> 	test word [di], INFOFLAG_ISSPECIAL
  3110 0000176D 7524                <1> 	jnz .special_rec
  3111 0000176F EB2C                <1> 	jmp short .not_same
  3112                              <1> 
  3113                              <1> .normal_rec:
  3114 00001771 F7050100            <1> 	test word [di], DRVFLAG_DRIVEOK
  3115 00001775 7426                <1> 	jz .not_same
  3116 00001777 8B4502              <1>         mov ax, [di + struc_bootrecord.drive_id]
  3117 0000177A 394402              <1>         cmp [si + struc_bootrecord.drive_id], ax
  3118 0000177D 751E                <1>         jne .not_same
  3119 0000177F 668B4506            <1>         mov eax, [di + struc_bootrecord.father_abs_addr]
  3120 00001783 66394406            <1>         cmp [si + struc_bootrecord.father_abs_addr], eax
  3121 00001787 7514                <1>         jne .not_same
  3122 00001789 668B450A            <1>         mov eax, [di + struc_bootrecord.abs_addr]
  3123 0000178D 6639440A            <1>         cmp [si + struc_bootrecord.abs_addr], eax
  3124 00001791 750A                <1>         jne .not_same
  3125                              <1> 
  3126                              <1> .special_rec:
  3127 00001793 8A4504              <1>         mov al, [di + struc_bootrecord.type]
  3128 00001796 384404              <1>         cmp [si + struc_bootrecord.type], al
  3129 00001799 7502                <1>         jne .not_same
  3130                              <1> 
  3131 0000179B EB08                <1>         jmp short .found_same
  3132                              <1> 
  3133                              <1> .not_same:
  3134 0000179D 83C740              <1>         add di, SIZE_OF_BOOTRECORD
  3135 000017A0 E2C1                <1>         loop .compare_next
  3136                              <1> 
  3137                              <1> .not_found:
  3138 000017A2 F9                  <1>         stc
  3139 000017A3 61                  <1>         popa
  3140 000017A4 C3                  <1>         ret
  3141                              <1> 
  3142                              <1> .found_same:
  3143 000017A5 F8                  <1>         clc
  3144 000017A6 61                  <1>         popa
  3145 000017A7 C3                  <1>         ret
  3146                              <1> 
  3147                              <1> 
  3148                              <1> ;=============================================================================
  3149                              <1> ; >>>>>>>>>>>>>>>>>>>>>>>>> User Interface Functions <<<<<<<<<<<<<<<<<<<<<<<<<
  3150                              <1> ;=============================================================================
  3151                              <1> 
  3152                              <1> ;=============================================================================
  3153                              <1> ;root_window_draw_body_proc ---- draw the root window
  3154                              <1> ;input:
  3155                              <1> ;      none
  3156                              <1> ;output:
  3157                              <1> ;      none
  3158                              <1> ;=============================================================================
  3159                              <1> root_window_draw_body_proc:
  3160 000017A8 8A3E[E449]          <1>         mov bh, [color.background]              ;
  3161 000017AC 8B36[F349]          <1>         mov si, [icon.background]               ; draw background
  3162 000017B0 8B0E[F149]          <1>         mov cx, [icon.background_size]          ;
  3163 000017B4 E81808              <1>         call draw_background                    ;
  3164                              <1> 
  3165 000017B7 31D2                <1>         xor dx, dx                              ;
  3166 000017B9 8B1E[E549]          <1>         mov bx, [color.copyright]               ;
  3167 000017BD A0[C329]            <1>         mov al, [ui_screen_width]               ; draw copyright message
  3168 000017C0 50                  <1>         push ax                                 ; save screen width
  3169 000017C1 8A0E[B549]          <1>         mov cl, [size.copyright]
  3170 000017C5 F6E1                <1>         mul cl
  3171 000017C7 89C1                <1>         mov cx, ax
  3172 000017C9 B020                <1>         mov al, ' '                             ;
  3173 000017CB E89D05              <1>         call draw_char                          ;
  3174 000017CE 8B36[504A]          <1>         mov si, [str_idx.copyright]
  3175 000017D2 E86F05              <1>         call draw_string_hl
  3176                              <1>         
  3177 000017D5 8B1E[E749]          <1>         mov bx, [color.hint]                    ;
  3178 000017D9 8A36[C429]          <1>         mov dh, [ui_screen_height]              ;
  3179 000017DD 8A0E[B649]          <1>         mov cl, [size.hint]                     ;
  3180 000017E1 28CE                <1>         sub dh, cl                              ; draw hint message
  3181 000017E3 58                  <1>         pop ax                                  ; get screen width
  3182 000017E4 F6E1                <1>         mul cl                                  ;
  3183 000017E6 89C1                <1>         mov cx, ax                              ;
  3184 000017E8 B020                <1>         mov al, ' '                             ;
  3185 000017EA E87E05              <1>         call draw_char                          ;
  3186 000017ED 8B36[524A]          <1>         mov si, [str_idx.hint]                  ;
  3187 000017F1 E85005              <1>         call draw_string_hl                     ;
  3188                              <1> 
  3189 000017F4 8B16[AF49]          <1>         mov dx, [position.brand]                ; draw brand icon
  3190 000017F8 8B0E[ED49]          <1>         mov cx, [icon.brand_size]               ;
  3191 000017FC 80FAFF              <1>         cmp dl, 0xFF                            ;
  3192 000017FF 7506                <1>         jne .not_justify                        ;
  3193 00001801 8A16[C329]          <1>         mov dl, [ui_screen_width]               ; right justify
  3194 00001805 28CA                <1>         sub dl, cl                              ;
  3195                              <1> .not_justify:                                   ;
  3196 00001807 8B36[EF49]          <1>         mov si, [icon.brand]                    ;
  3197 0000180B E89A07              <1>         call draw_icon                          ;
  3198                              <1> 
  3199 0000180E E80A00              <1>         call root_window_draw_date
  3200 00001811 E82000              <1>         call root_window_draw_time
  3201 00001814 E8CD00              <1>         call root_window_draw_delay_time
  3202 00001817 E83300              <1>         call root_window_draw_knl_flags
  3203                              <1> 
  3204 0000181A C3                  <1>         ret
  3205                              <1>         
  3206                              <1> ;=============================================================================
  3207                              <1> ;root_window_draw_date ---- draw the date string
  3208                              <1> ;input:
  3209                              <1> ;      none
  3210                              <1> ;output:
  3211                              <1> ;      none
  3212                              <1> ;=============================================================================
  3213                              <1> root_window_draw_date:
  3214 0000181B 60                  <1>         pusha
  3215 0000181C BF[B738]            <1>         mov di, main_tmp.root_buf               ; draw date
  3216 0000181F A0[AB49]            <1>         mov al, [show_date_method]              ;
  3217 00001822 E82616              <1>         call get_current_date_string            ;
  3218 00001825 89FE                <1>         mov si, di                              ;
  3219 00001827 8A1E[EB49]          <1>         mov bl, [color.date]                    ;
  3220 0000182B 8B16[B149]          <1>         mov dx, [position.date]                 ;
  3221 0000182F E81205              <1>         call draw_string                        ;
  3222 00001832 61                  <1>         popa
  3223 00001833 C3                  <1>         ret
  3224                              <1> 
  3225                              <1> ;=============================================================================
  3226                              <1> ;draw_time ---- draw the time string
  3227                              <1> ;input:
  3228                              <1> ;      none
  3229                              <1> ;output:
  3230                              <1> ;      none
  3231                              <1> ;=============================================================================
  3232                              <1> root_window_draw_time:
  3233 00001834 60                  <1>         pusha
  3234 00001835 BF[B738]            <1>         mov di, main_tmp.root_buf               ; draw date
  3235 00001838 A0[AC49]            <1>         mov al, [show_time_method]              ;
  3236 0000183B E8E615              <1>         call get_current_time_string            ;
  3237 0000183E 89FE                <1>         mov si, di                              ;
  3238 00001840 8A1E[EC49]          <1>         mov bl, [color.time]                    ;
  3239 00001844 8B16[B349]          <1>         mov dx, [position.time]                 ;
  3240 00001848 E8F904              <1>         call draw_string                        ;
  3241 0000184B 61                  <1>         popa
  3242 0000184C C3                  <1>         ret
  3243                              <1> 
  3244                              <1> ;=============================================================================
  3245                              <1> ;root_window_draw_knl_flags ---- draw root passwd, login, secure mode, 
  3246                              <1> ;                                remember last and int13 ext flags.
  3247                              <1> ;=============================================================================
  3248                              <1> root_window_draw_knl_flags:
  3249 0000184D 8B16[C329]          <1>         mov dx, [ui_screen_size]
  3250 00001851 81EA1301            <1>         sub dx, 0x0113
  3251 00001855 B90100              <1>         mov cx, 1
  3252                              <1> 
  3253                              <1> ; draw seperators
  3254 00001858 8A1E[E749]          <1>         mov bl, [color.hint]
  3255 0000185C B07C                <1>         mov al, '|'
  3256 0000185E E80A05              <1>         call draw_char
  3257 00001861 80C204              <1> 	add dl,4
  3258 00001864 E80405              <1> 	call draw_char
  3259 00001867 80C206              <1> 	add dl,6
  3260 0000186A E8FE04              <1> 	call draw_char
  3261 0000186D 80EA09              <1> 	sub dl,9
  3262                              <1> 
  3263                              <1> ; draw driver id
  3264 00001870 BF[B738]            <1>         mov di, main_tmp.root_buf
  3265 00001873 57                  <1> 	push di
  3266 00001874 52                  <1> 	push dx
  3267 00001875 8A16[1000]          <1> 	mov dl, [ADDR_SBMK_DRVID]
  3268 00001879 E8D222              <1> 	call get_drvid_str
  3269 0000187C 5A                  <1> 	pop dx
  3270 0000187D 5E                  <1> 	pop si
  3271                              <1> 
  3272 0000187E 8A1E[EA49]          <1>         mov bl, [color.knl_drvid]
  3273                              <1> 
  3274 00001882 E8BF04              <1>         call draw_string
  3275 00001885 80C204              <1>         add dl, 4
  3276                              <1> 
  3277                              <1> ; draw flags
  3278 00001888 8A1E[E949]          <1>         mov bl, [color.knl_flags]
  3279 0000188C 66833E[3000]00      <1>         cmp dword [ADDR_SBMK_ROOT_PASSWORD], 0
  3280 00001892 7404                <1>         jz .no_root_password
  3281                              <1>         
  3282 00001894 B050                <1>         mov al, 'P'
  3283 00001896 EB02                <1>         jmp short .draw_pwd
  3284                              <1> .no_root_password:
  3285 00001898 B02D                <1>         mov al, '-'
  3286                              <1> .draw_pwd:
  3287 0000189A E8CE04              <1>         call draw_char
  3288 0000189D FEC2                <1>         inc dl
  3289                              <1> 
  3290 0000189F 8A26[2C00]          <1> 	mov ah, [ADDR_SBMK_FLAGS]
  3291                              <1> 
  3292 000018A3 F6C402              <1>         test ah, KNLFLAG_SECURITY
  3293 000018A6 7404                <1>         jz .no_security
  3294                              <1> 
  3295 000018A8 B053                <1>         mov al, 'S'
  3296 000018AA EB02                <1>         jmp short .draw_security
  3297                              <1> .no_security:
  3298 000018AC B02D                <1>         mov al, '-'
  3299                              <1> .draw_security:
  3300 000018AE E8BA04              <1>         call draw_char
  3301 000018B1 FEC2                <1>         inc dl
  3302                              <1> 
  3303 000018B3 803E[2F2F]00        <1>         cmp byte [main_tmp.root_login],0
  3304 000018B8 7404                <1>         jz .no_root_login
  3305                              <1> 
  3306 000018BA B041                <1>         mov al, 'A'
  3307 000018BC EB02                <1>         jmp short .draw_login
  3308                              <1> .no_root_login:
  3309 000018BE B02D                <1>         mov al, '-'
  3310                              <1> .draw_login:
  3311 000018C0 E8A804              <1>         call draw_char
  3312                              <1> 
  3313 000018C3 FEC2                <1>         inc dl
  3314                              <1> 
  3315 000018C5 F6C410              <1>         test ah, KNLFLAG_REMLAST
  3316 000018C8 7404                <1>         jz .no_remlast
  3317 000018CA B04C                <1>         mov al, 'L'
  3318 000018CC EB02                <1>         jmp short .draw_remlast
  3319                              <1> .no_remlast:
  3320 000018CE B02D                <1>         mov al, '-'
  3321                              <1> .draw_remlast:
  3322 000018D0 E89804              <1>         call draw_char
  3323                              <1> 
  3324 000018D3 FEC2                <1>         inc dl
  3325                              <1> 
  3326 000018D5 F6C404              <1>         test ah, KNLFLAG_NOINT13EXT
  3327 000018D8 7504                <1>         jnz .no_int13ext
  3328 000018DA B045                <1>         mov al, 'E'
  3329 000018DC EB02                <1>         jmp .draw_int13ext
  3330                              <1> .no_int13ext:
  3331 000018DE B02D                <1>         mov al, '-'
  3332                              <1> .draw_int13ext:
  3333 000018E0 E88804              <1>         call draw_char
  3334 000018E3 C3                  <1>         ret
  3335                              <1> 
  3336                              <1> ;=============================================================================
  3337                              <1> ;root_window_draw_delay_time ---- draw the delay_time and time_count
  3338                              <1> ;=============================================================================
  3339                              <1> root_window_draw_delay_time:
  3340 000018E4 0FB606[282F]        <1>         movzx ax, byte [main_tmp.time_count]
  3341 000018E9 B90300              <1>         mov cx, 3
  3342 000018EC BF[B738]            <1>         mov di, main_tmp.root_buf
  3343 000018EF E8A411              <1>         call itoa
  3344                              <1>         
  3345 000018F2 8A1E[E349]          <1>         mov bl, [color.delay_time]
  3346 000018F6 8B16[C329]          <1>         mov dx, [ui_screen_size]
  3347 000018FA 81EA0801            <1>         sub dx, 0x0108
  3348 000018FE 89FE                <1>         mov si, di
  3349 00001900 E84104              <1>         call draw_string
  3350                              <1> 
  3351 00001903 0FB606[2D00]        <1>         movzx ax, byte [ADDR_SBMK_DELAY_TIME]
  3352 00001908 B90300              <1>         mov cx, 3
  3353 0000190B E88811              <1>         call itoa
  3354                              <1> 
  3355 0000190E B03A                <1>         mov al, ':'
  3356 00001910 B101                <1>         mov cl, 1
  3357 00001912 80C203              <1>         add dl, 3
  3358 00001915 E85304              <1>         call draw_char
  3359 00001918 FEC2                <1>         inc dl
  3360 0000191A E82704              <1>         call draw_string
  3361 0000191D B020                <1>         mov al, ' '
  3362 0000191F 80C203              <1>         add dl, 3
  3363 00001922 E84604              <1>         call draw_char
  3364 00001925 C3                  <1>         ret
  3365                              <1> 
  3366                              <1> 
  3367                              <1> ;=============================================================================
  3368                              <1> ; boot_menu_item_str_proc ---- get item string of boot menu
  3369                              <1> ; input:
  3370                              <1> ;	cx = index
  3371                              <1> ; output:
  3372                              <1> ;	ds:si -> item string
  3373                              <1> ;=============================================================================
  3374                              <1> boot_menu_item_str_proc:
  3375 00001926 E8BE01              <1> 	call main_get_record_pointer
  3376                              <1> 
  3377 00001929 FC                  <1> 	cld
  3378 0000192A 8D3E[6737]          <1>         lea di, [main_tmp.record_string]
  3379 0000192E 57                  <1> 	push di
  3380                              <1> 
  3381 0000192F 3A0E[2F00]          <1> 	cmp cl, [ADDR_SBMK_DEFAULT_BOOT]
  3382 00001933 7502                <1> 	jne .not_def
  3383 00001935 B02A                <1> 	mov al, '*'
  3384                              <1> .not_def:
  3385 00001937 AA                  <1> 	stosb
  3386                              <1> 
  3387 00001938 A0[3400]            <1>         mov al, [ADDR_SBMK_BOOTMENU_STYLE]
  3388 0000193B E8FC19              <1>         call get_record_string
  3389 0000193E 5E                  <1> 	pop si
  3390 0000193F C3                  <1> 	ret
  3391                              <1> 
  3392                              <1> ;=============================================================================
  3393                              <1> ; main_menu_item_str_proc ---- get item string of main menu
  3394                              <1> ; input:
  3395                              <1> ;	cx = index
  3396                              <1> ; output:
  3397                              <1> ;	ds:si -> item string
  3398                              <1> ;=============================================================================
  3399                              <1> main_menu_item_str_proc:
  3400 00001940 BE[804A]            <1> 	mov si, str_idx.main_menu_strings
  3401 00001943 EB0A                <1> 	jmp short main_get_cmd_menu_item_str
  3402                              <1> 
  3403                              <1> ;=============================================================================
  3404                              <1> ; record_menu_item_str_proc ---- get item string of record menu
  3405                              <1> ; input:
  3406                              <1> ;	cx = index
  3407                              <1> ; output:
  3408                              <1> ;	ds:si -> item string
  3409                              <1> ;=============================================================================
  3410                              <1> record_menu_item_str_proc:
  3411 00001945 BE[984A]            <1> 	mov si, str_idx.record_menu_strings
  3412 00001948 EB05                <1> 	jmp short main_get_cmd_menu_item_str
  3413                              <1> 
  3414                              <1> ;=============================================================================
  3415                              <1> ; sys_menu_item_str_proc ---- get item string of sys menu
  3416                              <1> ; input:
  3417                              <1> ;	cx = index
  3418                              <1> ; output:
  3419                              <1> ;	ds:si -> item string
  3420                              <1> ;=============================================================================
  3421                              <1> sys_menu_item_str_proc:
  3422 0000194A BE[BA4A]            <1> 	mov si, str_idx.sys_menu_strings
  3423 0000194D EB00                <1> 	jmp short main_get_cmd_menu_item_str
  3424                              <1> 
  3425                              <1> ;=============================================================================
  3426                              <1> ; main_get_cmd_menu_item_str ---- get item string of a command menu
  3427                              <1> ; input:
  3428                              <1> ;	cx = index
  3429                              <1> ;	ds:si -> str_idx
  3430                              <1> ; output:
  3431                              <1> ;	ds:si -> item string
  3432                              <1> ;=============================================================================
  3433                              <1> main_get_cmd_menu_item_str:
  3434 0000194F D1E1                <1> 	shl cx,1
  3435 00001951 01CE                <1> 	add si, cx
  3436 00001953 8B34                <1> 	mov si, [si]
  3437 00001955 C3                  <1> 	ret
  3438                              <1> 
  3439                              <1> ;=============================================================================
  3440                              <1> ;main_check_update_time ---- check if the time message needs update.
  3441                              <1> ;output:
  3442                              <1> ;	cf = 0 not changed
  3443                              <1> ;	cf = 1 changed
  3444                              <1> ;=============================================================================
  3445                              <1> main_check_update_time:
  3446 00001956 50                  <1> 	push ax
  3447 00001957 B402                <1>         mov ah, 0x02
  3448 00001959 CD1A                <1>         int 0x1a
  3449                              <1> 
  3450 0000195B 390E[302F]          <1>         cmp [main_tmp.last_time], cx
  3451 0000195F 7407                <1>         je .end
  3452                              <1> 
  3453 00001961 890E[302F]          <1>         mov [main_tmp.last_time], cx
  3454 00001965 F9                  <1> 	stc
  3455 00001966 58                  <1> 	pop ax
  3456 00001967 C3                  <1> 	ret
  3457                              <1> .end:
  3458 00001968 F8                  <1> 	clc
  3459 00001969 58                  <1> 	pop ax
  3460 0000196A C3                  <1>         ret
  3461                              <1> 
  3462                              <1> 
  3463                              <1> ;=============================================================================
  3464                              <1> ;main_check_delay_time ---- check if the delay time is up
  3465                              <1> ; output:
  3466                              <1> ;	cf = 0 not zero
  3467                              <1> ;	cf = 1 zero
  3468                              <1> ;=============================================================================
  3469                              <1> main_check_delay_time:
  3470 0000196B 30E4                <1>         xor ah, ah                                      ; get time ticks
  3471 0000196D CD1A                <1>         int 0x1a                                        ;
  3472                              <1> 
  3473 0000196F 3B16[292F]          <1>         cmp dx, [main_tmp.ticks_count]
  3474 00001973 7304                <1>         jae .next_time                                  ; dx must greater than
  3475 00001975 8916[292F]          <1>         mov [main_tmp.ticks_count], dx                  ; ticks_count
  3476                              <1> .next_time:
  3477 00001979 31C0                <1> 	xor ax, ax
  3478 0000197B 89D1                <1>         mov cx, dx                                      ; every 18 ticks approxmiately
  3479 0000197D 2B0E[292F]          <1>         sub cx, [main_tmp.ticks_count]                  ; equal to 1 second,
  3480 00001981 83F912              <1>         cmp cx, 18                                      ; decrease time_count
  3481 00001984 7609                <1>         jbe .not_add                                    ; until to zero.
  3482 00001986 8916[292F]          <1>         mov [main_tmp.ticks_count], dx
  3483 0000198A FE0E[282F]          <1>         dec byte [main_tmp.time_count]
  3484 0000198E 40                  <1> 	inc ax
  3485                              <1> .not_add:
  3486 0000198F 803E[282F]00        <1>         cmp byte [main_tmp.time_count], 0               ; if time is up, then
  3487 00001994 7502                <1>         jne .no_up                                      ; send ESC key.
  3488 00001996 F9                  <1> 	stc
  3489 00001997 C3                  <1> 	ret
  3490                              <1> 
  3491                              <1> .no_up:
  3492 00001998 F8                  <1> 	clc
  3493 00001999 C3                  <1> 	ret
  3494                              <1> 
  3495                              <1> ;=============================================================================
  3496                              <1> ;get_event ---- get a event, if no key is pressed then count down the 
  3497                              <1> ;               delay time until to zero and send an EVENT_BOOT_DEFAULT event
  3498                              <1> ;input:
  3499                              <1> ;      none
  3500                              <1> ;output:
  3501                              <1> ;      ax = the key code
  3502                              <1> ;=============================================================================
  3503                              <1> get_event:
  3504 0000199A 60                  <1> 	pusha
  3505                              <1> 
  3506 0000199B 31C0                <1> 	xor ax, ax
  3507                              <1> 
  3508                              <1> .loop_get_event:
  3509 0000199D E8B6FF              <1> 	call main_check_update_time
  3510 000019A0 7305                <1> 	jnc .no_update_time
  3511                              <1> 
  3512 000019A2 B801F4              <1> 	mov ax, EVENT_REDRAW_ROOT
  3513 000019A5 EB31                <1> 	jmp short .cont_loop
  3514                              <1> 
  3515                              <1> .no_update_time:
  3516                              <1> 
  3517 000019A7 803E[2D00]00        <1> 	cmp byte [ADDR_SBMK_DELAY_TIME], 0
  3518 000019AC 741E                <1> 	je .no_count
  3519 000019AE 803E[2B2F]00        <1> 	cmp byte [main_tmp.key_pressed], 0
  3520 000019B3 7517                <1> 	jne .no_count
  3521                              <1> 
  3522 000019B5 E8B3FF              <1> 	call main_check_delay_time
  3523 000019B8 7309                <1> 	jnc .has_delay
  3524 000019BA B802F4              <1> 	mov ax, EVENT_BOOT_DEFAULT
  3525 000019BD FE06[2B2F]          <1> 	inc byte [main_tmp.key_pressed]
  3526 000019C1 EB15                <1> 	jmp short .cont_loop
  3527                              <1> 
  3528                              <1> .has_delay
  3529 000019C3 09C0                <1> 	or ax, ax
  3530 000019C5 7405                <1> 	jz .no_count
  3531 000019C7 B801F4              <1> 	mov ax, EVENT_REDRAW_ROOT
  3532 000019CA EB0C                <1> 	jmp short .cont_loop
  3533                              <1> 
  3534                              <1> .no_count:
  3535 000019CC E88F13              <1> 	call check_keyevent
  3536 000019CF 09C0                <1> 	or ax, ax
  3537 000019D1 7405                <1> 	jz .cont_loop
  3538                              <1> 
  3539                              <1> .key_pressed:
  3540 000019D3 C606[2B2F]01        <1> 	mov byte [main_tmp.key_pressed], 1
  3541                              <1> 
  3542                              <1> .cont_loop:
  3543 000019D8 09C0                <1> 	or ax, ax
  3544 000019DA 74C1                <1> 	jz .loop_get_event
  3545                              <1> 
  3546 000019DC A3[2C2F]            <1> 	mov [main_tmp.keycode], ax
  3547 000019DF 61                  <1> 	popa
  3548 000019E0 A1[2C2F]            <1> 	mov ax, [main_tmp.keycode]
  3549 000019E3 C3                  <1> 	ret
  3550                              <1>         
  3551                              <1> 
  3552                              <1> ;=============================================================================
  3553                              <1> ; main_auth_record_action
  3554                              <1> ;=============================================================================
  3555                              <1> main_auth_record_action:
  3556 000019E4 B0D0                <1> 	mov al, ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
  3557                              <1> 
  3558                              <1> ;=============================================================================
  3559                              <1> ; main_auth_action  ---- auth an action
  3560                              <1> ; input:
  3561                              <1> ;	al = auth type
  3562                              <1> ; output:
  3563                              <1> ;	cf = 0, success
  3564                              <1> ;	cf = 1, failed
  3565                              <1> ;=============================================================================
  3566                              <1> main_auth_action:
  3567 000019E6 60                  <1> 	pusha
  3568                              <1> 
  3569 000019E7 A810                <1> 	test al, ACTFLAG_CHK_RECNUM
  3570 000019E9 7407                <1> 	jz .test_security
  3571                              <1> 
  3572 000019EB 803E[C747]00        <1> 	cmp byte [GOOD_RECORD_NUMBER], 0
  3573 000019F0 7427                <1> 	jz .auth_failed
  3574                              <1> 
  3575                              <1> .test_security:
  3576 000019F2 803E[2F2F]00        <1>         cmp byte [main_tmp.root_login], 0
  3577 000019F7 7514                <1>         jnz .auth_ok
  3578                              <1> 
  3579 000019F9 F606[2C00]02        <1> 	test byte [ADDR_SBMK_FLAGS], KNLFLAG_SECURITY
  3580 000019FE 7404                <1> 	jz .test_root
  3581                              <1> 
  3582 00001A00 A880                <1> 	test al, ACTFLAG_AUTH_SECURITY
  3583 00001A02 7504                <1> 	jnz .auth_root
  3584                              <1> 
  3585                              <1> .test_root:
  3586 00001A04 A820                <1> 	test al, ACTFLAG_AUTH_ROOT
  3587 00001A06 7408                <1> 	jz .test_record
  3588                              <1> 
  3589                              <1> .auth_root:
  3590 00001A08 E81100              <1> 	call main_confirm_root_passwd
  3591 00001A0B 720C                <1> 	jc .auth_failed
  3592                              <1> 
  3593                              <1> .auth_ok:
  3594 00001A0D F8                  <1> 	clc
  3595 00001A0E 61                  <1> 	popa
  3596 00001A0F C3                  <1> 	ret
  3597                              <1> 
  3598                              <1> .test_record:
  3599 00001A10 A840                <1> 	test al, ACTFLAG_AUTH_RECORD
  3600 00001A12 74F9                <1> 	jz .auth_ok
  3601 00001A14 E82100              <1> 	call main_confirm_record_passwd
  3602 00001A17 73F4                <1> 	jnc .auth_ok
  3603                              <1> 
  3604                              <1> .auth_failed:
  3605 00001A19 F9                  <1> 	stc
  3606 00001A1A 61                  <1> 	popa
  3607 00001A1B C3                  <1> 	ret
  3608                              <1> 
  3609                              <1> 	
  3610                              <1> ;=============================================================================
  3611                              <1> ;main_confirm_root_passwd ---- confirm the root password
  3612                              <1> ;input:
  3613                              <1> ;      none
  3614                              <1> ;output:
  3615                              <1> ;      cf = 0 success
  3616                              <1> ;      cf = 1 failed or cancel
  3617                              <1> ;=============================================================================
  3618                              <1> main_confirm_root_passwd:
  3619 00001A1C 60                  <1>         pusha
  3620 00001A1D 8B1E[3000]          <1>         mov bx, [ADDR_SBMK_ROOT_PASSWORD]
  3621 00001A21 8B0E[3200]          <1>         mov cx, [ADDR_SBMK_ROOT_PASSWORD+2]
  3622 00001A25 09DB                <1>         or bx, bx
  3623 00001A27 7506                <1>         jnz .have_password
  3624 00001A29 09C9                <1>         or cx, cx
  3625 00001A2B 7502                <1>         jnz .have_password
  3626 00001A2D EB07                <1>         jmp short .auth_ok
  3627                              <1>         
  3628                              <1> .have_password:                                     
  3629 00001A2F 8B36[204A]          <1>         mov si, [str_idx.root_passwd]               ; check root
  3630 00001A33 E81F00              <1>         call main_confirm_passwd                    ; password
  3631                              <1> .auth_ok:
  3632 00001A36 61                  <1>         popa
  3633 00001A37 C3                  <1>         ret
  3634                              <1> 
  3635                              <1> ;=============================================================================
  3636                              <1> ;main_confirm_record_passwd ---- confirm the record password
  3637                              <1> ;=============================================================================
  3638                              <1> main_confirm_record_passwd:
  3639 00001A38 60                  <1>         pusha
  3640 00001A39 E89800              <1>         call main_get_focus_record_pointer
  3641 00001A3C 8B5C0E              <1>         mov bx, [si + struc_bootrecord.password]
  3642 00001A3F 8B4C10              <1>         mov cx, [si + struc_bootrecord.password+2]
  3643 00001A42 09DB                <1>         or bx, bx
  3644 00001A44 7506                <1>         jnz .have_password
  3645 00001A46 09C9                <1>         or cx, cx
  3646 00001A48 7502                <1>         jnz .have_password
  3647 00001A4A EB07                <1>         jmp short .auth_ok
  3648                              <1>         
  3649                              <1> .have_password:
  3650 00001A4C 8B36[244A]          <1>         mov si, [str_idx.record_passwd]             ; check record
  3651 00001A50 E80200              <1>         call main_confirm_passwd                    ; password
  3652                              <1> .auth_ok:
  3653 00001A53 61                  <1>         popa
  3654 00001A54 C3                  <1>         ret
  3655                              <1> 
  3656                              <1> ;=============================================================================
  3657                              <1> ;main_confirm_passwd ---- let user input a password and confirm it.
  3658                              <1> ;input:
  3659                              <1> ;      bx:cx = password
  3660                              <1> ;      ds:si -> message string
  3661                              <1> ;output:
  3662                              <1> ;      cf = 0 success
  3663                              <1> ;      cf = 1 failed or cancel
  3664                              <1> ;=============================================================================
  3665                              <1> main_confirm_passwd:
  3666 00001A55 803E[2F2F]00        <1>         cmp byte [main_tmp.root_login],0       ; check if root has logined
  3667 00001A5A 751F                <1>         jnz .ok
  3668                              <1> 
  3669 00001A5C 51                  <1> 	push cx
  3670 00001A5D B110                <1> 	mov cl, MAX_PASSWORD_LENGTH
  3671 00001A5F E88C08              <1>         call input_password
  3672 00001A62 59                  <1> 	pop cx
  3673 00001A63 721F                <1>         jc .cancel
  3674                              <1> 
  3675 00001A65 39C3                <1>         cmp bx, ax
  3676 00001A67 7506                <1>         jne .cmp_root
  3677 00001A69 39D1                <1>         cmp cx, dx
  3678 00001A6B 7502                <1>         jne .cmp_root
  3679 00001A6D EB0C                <1>         jmp .ok
  3680                              <1>         
  3681                              <1> .cmp_root:
  3682 00001A6F 3906[3000]          <1>         cmp [ADDR_SBMK_ROOT_PASSWORD], ax
  3683 00001A73 7508                <1>         jne .failed
  3684 00001A75 3916[3200]          <1>         cmp [ADDR_SBMK_ROOT_PASSWORD+2], dx
  3685 00001A79 7502                <1>         jne .failed
  3686                              <1> .ok:
  3687 00001A7B F8                  <1>         clc
  3688 00001A7C C3                  <1>         ret
  3689                              <1>         
  3690                              <1> .failed:
  3691 00001A7D 8B36[5E4A]          <1>         mov si, [str_idx.wrong_passwd]
  3692 00001A81 E84706              <1>         call error_box
  3693                              <1>         
  3694                              <1> .cancel:
  3695 00001A84 F9                  <1>         stc
  3696 00001A85 C3                  <1>         ret
  3697                              <1> 
  3698                              <1> ;=============================================================================
  3699                              <1> ; main_show_disk_error ---- show the disk error box.
  3700                              <1> ;=============================================================================
  3701                              <1> main_show_disk_error:
  3702 00001A86 8B36[604A]          <1>         mov si, [str_idx.disk_error]
  3703 00001A8A BF[B737]            <1>         mov di, main_tmp.dialog_buf
  3704 00001A8D 57                  <1>         push di
  3705 00001A8E E8AC10              <1>         call strcpy
  3706 00001A91 E8B620              <1> 	call get_last_disk_errno
  3707 00001A94 B102                <1>         mov cl, 2
  3708 00001A96 E8D410              <1>         call htoa
  3709 00001A99 5E                  <1>         pop si
  3710 00001A9A E82E06              <1>         call error_box
  3711 00001A9D C3                  <1>         ret
  3712                              <1> 
  3713                              <1> 
  3714                              <1> ;=============================================================================
  3715                              <1> ;>>>>>>>>>>>>>>>>>>>>>>>>>> Miscellaneous Functions <<<<<<<<<<<<<<<<<<<<<<<<<<
  3716                              <1> ;=============================================================================
  3717                              <1> 
  3718                              <1> ;=============================================================================
  3719                              <1> ;main_recheck_same_records ---- recheck all records that same as given record
  3720                              <1> ;input:
  3721                              <1> ;      ds:si -> record
  3722                              <1> ;output:
  3723                              <1> ;      cf = 0  success
  3724                              <1> ;      cf = 1  failed
  3725                              <1> ;=============================================================================
  3726                              <1> main_recheck_same_records:
  3727 00001A9E 60                  <1>         pusha
  3728 00001A9F 8B4402              <1>         mov ax, [si + struc_bootrecord.drive_id]
  3729 00001AA2 668B5C06            <1>         mov ebx, [si + struc_bootrecord.father_abs_addr]
  3730 00001AA6 668B540A            <1>         mov edx, [si + struc_bootrecord.abs_addr]
  3731                              <1> 
  3732 00001AAA 8D36[4000]          <1>         lea si, [ADDR_SBMK_BOOT_RECORDS]
  3733 00001AAE B92000              <1>         mov cx, MAX_RECORD_NUM
  3734                              <1> 
  3735                              <1> .loop_check:
  3736 00001AB1 F60401              <1>         test byte [si + struc_bootrecord.flags], DRVFLAG_DRIVEOK
  3737 00001AB4 7416                <1>         jz .check_next
  3738 00001AB6 394402              <1>         cmp [si + struc_bootrecord.drive_id], ax
  3739 00001AB9 7511                <1>         jne .check_next
  3740 00001ABB 66395C06            <1>         cmp [si + struc_bootrecord.father_abs_addr], ebx
  3741 00001ABF 750B                <1>         jne .check_next
  3742 00001AC1 6639540A            <1>         cmp [si + struc_bootrecord.abs_addr], edx
  3743 00001AC5 7505                <1>         jne .check_next
  3744                              <1> 
  3745 00001AC7 E86F15              <1>         call check_bootrecord
  3746 00001ACA 7206                <1>         jc .end
  3747                              <1> 
  3748                              <1> .check_next:
  3749 00001ACC 83C640              <1>         add si, SIZE_OF_BOOTRECORD
  3750 00001ACF E2E0                <1>         loop .loop_check
  3751 00001AD1 F8                  <1>         clc
  3752                              <1> .end:
  3753 00001AD2 61                  <1>         popa
  3754 00001AD3 C3                  <1>         ret
  3755                              <1> 
  3756                              <1> ;=============================================================================
  3757                              <1> ;main_get_focus_record_pointer ---- get current boot record's pointer
  3758                              <1> ;input:
  3759                              <1> ;	none
  3760                              <1> ;output:
  3761                              <1> ;       ds:si -> record pointer
  3762                              <1> ;=============================================================================
  3763                              <1> main_get_focus_record_pointer:
  3764 00001AD4 31F6                <1>         xor si, si
  3765 00001AD6 803E[C747]00        <1>         cmp byte [GOOD_RECORD_NUMBER], 0
  3766 00001ADB 7409                <1>         jz .end
  3767 00001ADD 51                  <1> 	push cx
  3768 00001ADE 8A0E[C847]          <1> 	mov cl, [FOCUS_RECORD]
  3769 00001AE2 E80200              <1> 	call main_get_record_pointer
  3770 00001AE5 59                  <1> 	pop cx
  3771                              <1> .end:
  3772 00001AE6 C3                  <1> 	ret
  3773                              <1> 
  3774                              <1> ;=============================================================================
  3775                              <1> ;main_get_record_pointer ---- get boot record's pointer
  3776                              <1> ;input:
  3777                              <1> ;      cl = record index in good record list
  3778                              <1> ;output:
  3779                              <1> ;      cl = real index in boot_records list
  3780                              <1> ;      ds:si -> record pointer
  3781                              <1> ;=============================================================================
  3782                              <1> main_get_record_pointer:
  3783 00001AE7 50                  <1>         push ax
  3784 00001AE8 30ED                <1>         xor ch, ch
  3785 00001AEA BE[082F]            <1>         mov si, main_tmp.good_record_list       ;
  3786 00001AED 01CE                <1>         add si, cx                              ;
  3787 00001AEF AC                  <1>         lodsb                                   ;
  3788 00001AF0 50                  <1> 	push ax
  3789                              <1> 
  3790 00001AF1 B140                <1>         mov cl, SIZE_OF_BOOTRECORD              ; get the pointer to
  3791 00001AF3 F6E1                <1>         mul cl                                  ; the record.
  3792 00001AF5 BE[4000]            <1>         mov si, ADDR_SBMK_BOOT_RECORDS          ;
  3793 00001AF8 01C6                <1>         add si, ax                              ;
  3794 00001AFA 59                  <1> 	pop cx
  3795 00001AFB 30ED                <1> 	xor ch, ch
  3796 00001AFD 58                  <1>         pop ax
  3797 00001AFE C3                  <1>         ret
  3798                              <1> 
  3799                              <1> ;=============================================================================
  3800                              <1> ;main_boot_default ---- boot the default record
  3801                              <1> ;=============================================================================
  3802                              <1> main_boot_default:
  3803 00001AFF 8A26[2F00]          <1>         mov ah, [ADDR_SBMK_DEFAULT_BOOT]
  3804 00001B03 BE[082F]            <1>         mov si, main_tmp.good_record_list
  3805 00001B06 0FB60E[C747]        <1>         movzx cx, [GOOD_RECORD_NUMBER]
  3806 00001B0B 08C9                <1>         or cl, cl
  3807 00001B0D 7408                <1>         jz .no_default
  3808 00001B0F FC                  <1>         cld
  3809                              <1> 
  3810                              <1> .loop_search:
  3811 00001B10 AC                  <1>         lodsb
  3812 00001B11 38E0                <1>         cmp al, ah
  3813 00001B13 7403                <1>         je .found_it
  3814 00001B15 E2F9                <1>         loop .loop_search
  3815                              <1>         
  3816                              <1> .no_default:                                ; no default record, do nothing.
  3817 00001B17 C3                  <1>         ret
  3818                              <1>         
  3819                              <1> .found_it:
  3820 00001B18 50                  <1> 	push ax
  3821 00001B19 E84E01              <1> 	call main_hide_auto_hides
  3822 00001B1C 58                  <1> 	pop ax
  3823 00001B1D 30E4                <1> 	xor ah, ah
  3824 00001B1F E80100              <1>         call main_do_boot_record
  3825 00001B22 C3                  <1>         ret
  3826                              <1>         
  3827                              <1> ;=============================================================================
  3828                              <1> ;main_do_boot_record ---- really boot the given record.
  3829                              <1> ;input:
  3830                              <1> ;      ax =  the boot record number.
  3831                              <1> ;=============================================================================
  3832                              <1> main_do_boot_record:
  3833 00001B23 B340                <1>         mov bl, SIZE_OF_BOOTRECORD
  3834 00001B25 F6E3                <1>         mul bl
  3835                              <1> 
  3836 00001B27 BE[4000]            <1>         mov si, ADDR_SBMK_BOOT_RECORDS
  3837 00001B2A 01C6                <1>         add si, ax
  3838                              <1> 
  3839 00001B2C 8B1C                <1> 	mov bx, [si + struc_bootrecord.flags]
  3840                              <1> 
  3841 00001B2E F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  3842 00001B32 7405                <1> 	jz .boot_drv_part
  3843                              <1> 
  3844 00001B34 E85A00              <1> 	call main_do_special_record
  3845 00001B37 EB57                <1> 	jmp short .end
  3846                              <1> 
  3847                              <1> .boot_drv_part:
  3848                              <1> %ifndef DISABLE_CDBOOT
  3849 00001B39 F7C31000            <1> 	test bx, DRVFLAG_ISCDROM
  3850 00001B3D 743C                <1> 	jz .normal_boot
  3851                              <1> 
  3852 00001B3F 8A5402              <1> 	mov dl, [si + struc_bootrecord.drive_id]
  3853 00001B42 BF[6D24]            <1> 	mov di, knl_tmp.disk_buf2
  3854 00001B45 E8DA1F              <1> 	call get_cdrom_boot_catalog
  3855 00001B48 723B                <1> 	jc .disk_error
  3856                              <1> 
  3857 00001B4A 56                  <1> 	push si
  3858 00001B4B 89FE                <1> 	mov si, di
  3859 00001B4D BF[6D1C]            <1> 	mov di, knl_tmp.disk_buf1
  3860 00001B50 E8531B              <1> 	call find_cdboot_catalog
  3861 00001B53 5E                  <1> 	pop si
  3862                              <1> 
  3863 00001B54 09C9                <1> 	or cx, cx
  3864 00001B56 7431                <1> 	jz .no_system
  3865 00001B58 83F901              <1> 	cmp cx, 1
  3866 00001B5B 740F                <1> 	je .go_boot_cdrom
  3867                              <1> 
  3868 00001B5D 56                  <1> 	push si
  3869 00001B5E 89FE                <1> 	mov si, di
  3870 00001B60 E89101              <1> 	call main_choose_cdimg
  3871 00001B63 5E                  <1> 	pop si
  3872 00001B64 722A                <1> 	jc .end
  3873                              <1> 
  3874 00001B66 B120                <1> 	mov cl, SIZE_OF_BOOT_CATALOG
  3875 00001B68 F6E1                <1> 	mul cl
  3876                              <1> 
  3877 00001B6A 01C7                <1> 	add di, ax
  3878                              <1> 
  3879                              <1> .go_boot_cdrom:
  3880 00001B6C 52                  <1> 	push dx
  3881 00001B6D 57                  <1> 	push di
  3882 00001B6E E86D1B              <1>         call preload_keystrokes     ; preload the keystrokes into key buffer.
  3883 00001B71 E82904              <1>         call reset_video_mode
  3884 00001B74 5F                  <1> 	pop di
  3885 00001B75 5A                  <1> 	pop dx
  3886 00001B76 E8CE1A              <1> 	call boot_cdrom
  3887 00001B79 EB03                <1> 	jmp short .boot_fail
  3888                              <1> 
  3889                              <1> %endif
  3890                              <1> 
  3891                              <1> .normal_boot:
  3892 00001B7B E8091A              <1>         call boot_normal_record
  3893                              <1> 
  3894                              <1> .boot_fail:
  3895 00001B7E E825FB              <1> 	call main_init_video
  3896                              <1> 
  3897 00001B81 08C0                <1>         or al, al
  3898 00001B83 7404                <1>         jz .no_system
  3899                              <1> 
  3900                              <1> .disk_error:
  3901 00001B85 E8FEFE              <1>         call main_show_disk_error
  3902 00001B88 C3                  <1>         ret
  3903                              <1> 
  3904                              <1> .no_system:
  3905 00001B89 8B36[664A]          <1>         mov si, [str_idx.no_system]
  3906 00001B8D E83B05              <1>         call error_box
  3907                              <1> 
  3908                              <1> .end:
  3909 00001B90 C3                  <1>         ret
  3910                              <1>         
  3911                              <1> 
  3912                              <1> ;=============================================================================
  3913                              <1> ;main_do_special_record ---- execute a special boot record.
  3914                              <1> ;input:
  3915                              <1> ;      si ->  the boot record.
  3916                              <1> ;=============================================================================
  3917                              <1> main_do_special_record:
  3918 00001B91 E80904              <1> 	call reset_video_mode
  3919 00001B94 8A4404              <1> 	mov al, [si + struc_bootrecord.type]
  3920                              <1> 
  3921 00001B97 3C02                <1> 	cmp al, SPREC_POWEROFF
  3922 00001B99 7503                <1> 	jne .chk_rst
  3923 00001B9B E84510              <1> 	call power_off
  3924                              <1> 
  3925                              <1> .chk_rst:
  3926 00001B9E 3C03                <1> 	cmp al, SPREC_RESTART
  3927 00001BA0 7503                <1> 	jne .chk_quit
  3928 00001BA2 E86311              <1> 	call reboot
  3929                              <1> 
  3930                              <1> .chk_quit:
  3931 00001BA5 3C01                <1> 	cmp al, SPREC_QUIT
  3932 00001BA7 7502                <1> 	jne .chk_bootprev
  3933                              <1> 
  3934                              <1> %ifdef EMULATE_PROG
  3935                              <1>         mov ax, 0x4c00                          ; exit to dos
  3936                              <1>         int 0x21                                ;
  3937                              <1> %else
  3938 00001BA9 CD18                <1>         int 0x18                                ; return to BIOS
  3939                              <1> %endif
  3940                              <1> 
  3941                              <1> .chk_bootprev:
  3942 00001BAB 3C00                <1> 	cmp al, SPREC_BOOTPREV
  3943 00001BAD 7503                <1> 	jne .end
  3944 00001BAF E8FE00              <1> 	call main_boot_prev_mbr
  3945                              <1> 
  3946                              <1> .end:
  3947 00001BB2 C3                  <1> 	ret
  3948                              <1> 
  3949                              <1> ;=============================================================================
  3950                              <1> ;main_do_schedule ---- implement the schedule table
  3951                              <1> ;input:
  3952                              <1> ;      none
  3953                              <1> ;output:
  3954                              <1> ;      default_boot set to the scheduled record
  3955                              <1> ;=============================================================================
  3956                              <1> main_do_schedule:
  3957 00001BB3 60                  <1>         pusha
  3958 00001BB4 E82612              <1>         call get_realtime
  3959 00001BB7 723A                <1>         jc .end
  3960                              <1> 
  3961 00001BB9 A3[322F]            <1>         mov [main_tmp.schedule_begin], ax
  3962 00001BBC 8916[362F]          <1>         mov [main_tmp.schedule_day], dx
  3963 00001BC0 31C9                <1>         xor cx, cx
  3964 00001BC2 BE[4000]            <1>         mov si, ADDR_SBMK_BOOT_RECORDS
  3965                              <1> 
  3966                              <1> .loop_check:
  3967 00001BC5 F7040080            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_SCHEDULED
  3968 00001BC9 741E                <1>         jz .check_next
  3969                              <1> 
  3970 00001BCB E86B14              <1>         call check_bootrecord
  3971 00001BCE 7219                <1>         jc .check_next
  3972                              <1> 
  3973 00001BD0 E81D19              <1>         call get_record_schedule
  3974                              <1> 
  3975 00001BD3 3906[322F]          <1>         cmp [main_tmp.schedule_begin], ax 
  3976 00001BD7 7210                <1>         jb .check_next
  3977 00001BD9 391E[322F]          <1>         cmp [main_tmp.schedule_begin], bx
  3978 00001BDD 770A                <1>         ja .check_next
  3979                              <1> 
  3980 00001BDF 8516[362F]          <1>         test dx, [main_tmp.schedule_day]
  3981 00001BE3 7404                <1>         jz .check_next
  3982                              <1> 
  3983 00001BE5 880E[2F00]          <1>         mov [ADDR_SBMK_DEFAULT_BOOT], cl
  3984                              <1> 
  3985                              <1> .check_next:
  3986 00001BE9 FEC1                <1>         inc cl
  3987 00001BEB 83C640              <1>         add si, SIZE_OF_BOOTRECORD
  3988 00001BEE 80F920              <1>         cmp cl, MAX_RECORD_NUM
  3989 00001BF1 72D2                <1>         jb .loop_check
  3990                              <1> 
  3991                              <1> .end:
  3992 00001BF3 61                  <1>         popa
  3993 00001BF4 C3                  <1>         ret
  3994                              <1> 
  3995                              <1> ;=============================================================================
  3996                              <1> ;main_save_boot_manager ---- save boot manager to disk.
  3997                              <1> ;input:
  3998                              <1> ;      none
  3999                              <1> ;output:
  4000                              <1> ;      cf = 0 success
  4001                              <1> ;      cf = 1 failed
  4002                              <1> ;=============================================================================
  4003                              <1> main_save_boot_manager:
  4004 00001BF5 60                  <1> 	pusha
  4005 00001BF6 06                  <1> 	push es
  4006 00001BF7 1E                  <1> 	push ds
  4007                              <1> 
  4008                              <1> ; Backup the menus' pos
  4009 00001BF8 A1[A747]            <1> 	mov ax, [main_windows_data.boot_menu + struc_window.win_pos]
  4010 00001BFB A3[FE0B]            <1> 	mov [ADDR_SBMK_BOOT_MENU_POS], ax
  4011 00001BFE A1[D247]            <1> 	mov ax, [main_windows_data.main_menu + struc_window.win_pos]
  4012 00001C01 A3[000C]            <1> 	mov [ADDR_SBMK_MAIN_MENU_POS], ax
  4013 00001C04 A1[FD47]            <1> 	mov ax, [main_windows_data.record_menu + struc_window.win_pos]
  4014 00001C07 A3[020C]            <1> 	mov [ADDR_SBMK_RECORD_MENU_POS], ax
  4015 00001C0A A1[2848]            <1> 	mov ax, [main_windows_data.sys_menu + struc_window.win_pos]
  4016 00001C0D A3[040C]            <1> 	mov [ADDR_SBMK_SYS_MENU_POS], ax
  4017                              <1> 
  4018                              <1> ;Copy data area to backup seg
  4019 00001C10 31F6                <1> 	xor si, si
  4020 00001C12 31FF                <1> 	xor di, di
  4021                              <1> 
  4022 00001C14 680020              <1> 	push word KNLBACKUP_SEG
  4023 00001C17 07                  <1> 	pop es
  4024                              <1> 
  4025 00001C18 B9[060C]            <1> 	mov cx, sbm_start
  4026 00001C1B FC                  <1> 	cld
  4027 00001C1C F3A4                <1> 	rep movsb
  4028                              <1> 
  4029                              <1> ;calculate checksum
  4030 00001C1E 06                  <1> 	push es
  4031 00001C1F 1F                  <1> 	pop ds
  4032                              <1> 
  4033 00001C20 31F6                <1> 	xor si, si
  4034 00001C22 8B0E[0A00]          <1> 	mov cx, [ADDR_SBMK_TOTAL_SIZE]
  4035 00001C26 C606[0E00]00        <1> 	mov byte [ADDR_SBMK_CHECKSUM], 0
  4036 00001C2B E8C312              <1> 	call calc_checksum                      ; calculate the checksum.
  4037 00001C2E F6DB                <1> 	neg bl
  4038 00001C30 881E[0E00]          <1> 	mov [ADDR_SBMK_CHECKSUM], bl
  4039                              <1> 
  4040 00001C34 8A16[1000]          <1> 	mov dl, [ADDR_SBMK_DRVID]
  4041 00001C38 8D36[1100]          <1> 	lea si, [ADDR_SBMK_BLOCK_MAP]
  4042 00001C3C B90500              <1> 	mov cx, SBM_SAVE_NBLKS
  4043 00001C3F 31FF                <1> 	xor di, di
  4044                              <1> 
  4045 00001C41 1F                  <1> 	pop ds
  4046                              <1> 
  4047                              <1> .loop_save_blk:
  4048 00001C42 51                  <1> 	push cx
  4049                              <1> 
  4050 00001C43 AC                  <1> 	lodsb
  4051 00001C44 88C1                <1> 	mov cl, al			; number of sectors for this block
  4052 00001C46 66AD                <1> 	lodsd
  4053 00001C48 6689C3              <1> 	mov ebx,eax			; lba address for this block
  4054                              <1>         
  4055 00001C4B B80103              <1> 	mov ax, ( INT13H_WRITE << 8 ) | 1 
  4056                              <1> 
  4057 00001C4E F8                  <1> 	clc
  4058 00001C4F 09C9                <1> 	or cx, cx
  4059 00001C51 7413                <1> 	jz .write_end
  4060                              <1> 
  4061                              <1> .loop_write:
  4062 00001C53 E8AF1E              <1> 	call disk_access
  4063 00001C56 720E                <1> 	jc .write_end
  4064                              <1>         
  4065 00001C58 81C70002            <1> 	add di, SECTOR_SIZE
  4066 00001C5C 6643                <1> 	inc ebx
  4067 00001C5E E2F3                <1> 	loop .loop_write
  4068                              <1> 
  4069 00001C60 59                  <1> 	pop cx
  4070 00001C61 E2DF                <1> 	loop .loop_save_blk
  4071                              <1> 
  4072 00001C63 F8                  <1> 	clc
  4073 00001C64 EB01                <1> 	jmp short .end
  4074                              <1> 
  4075                              <1> .write_end:
  4076 00001C66 59                  <1> 	pop cx
  4077                              <1> 
  4078                              <1> .end:
  4079 00001C67 07                  <1> 	pop es
  4080 00001C68 61                  <1> 	popa
  4081 00001C69 C3                  <1> 	ret
  4082                              <1> 
  4083                              <1> 
  4084                              <1> ;=============================================================================
  4085                              <1> ;main_hide_auto_hides ---- hide all partitions that marked auto hide,
  4086                              <1> ;                          except the focus record.
  4087                              <1> ;input:
  4088                              <1> ;      none
  4089                              <1> ;output:
  4090                              <1> ;      cf = 0 success
  4091                              <1> ;      cf = 1 failed
  4092                              <1> ;=============================================================================
  4093                              <1> main_hide_auto_hides:
  4094 00001C6A 0FB60E[C747]        <1>         movzx cx, byte [GOOD_RECORD_NUMBER]
  4095 00001C6F 08C9                <1>         or cl, cl                               ; if no good record then go to
  4096 00001C71 7429                <1>         jz .end_ok                              ; init directly.
  4097                              <1> 
  4098 00001C73 86E9                <1> 	xchg ch, cl
  4099                              <1>         
  4100                              <1> ; hide all auto hide partitions.
  4101                              <1> .loop_hide:
  4102 00001C75 3A0E[C847]          <1>         cmp cl, [FOCUS_RECORD]                  ; do not hide the focus record.
  4103 00001C79 741B                <1>         je .not_hide
  4104                              <1> 
  4105 00001C7B 51                  <1> 	push cx
  4106 00001C7C E868FE              <1> 	call main_get_record_pointer
  4107 00001C7F 59                  <1> 	pop cx
  4108                              <1> 
  4109 00001C80 8B04                <1>         mov ax, [si + struc_bootrecord.flags]
  4110 00001C82 A90004              <1>         test ax, INFOFLAG_AUTOHIDE
  4111 00001C85 740F                <1>         jz .not_hide
  4112 00001C87 A90002              <1>         test ax, INFOFLAG_HIDDEN
  4113 00001C8A 750A                <1>         jnz .not_hide
  4114                              <1> 
  4115 00001C8C E8B617              <1>         call toggle_record_hidden
  4116 00001C8F 720D                <1>         jc .hidden_error
  4117                              <1> 
  4118 00001C91 E80AFE              <1>         call main_recheck_same_records
  4119 00001C94 720C                <1>         jc .disk_error
  4120                              <1> 
  4121                              <1> .not_hide:
  4122 00001C96 FEC1                <1>         inc cl
  4123 00001C98 38E9                <1>         cmp cl, ch
  4124 00001C9A 72D9                <1>         jb .loop_hide
  4125                              <1>         
  4126                              <1> .end_ok:
  4127 00001C9C F8                  <1>         clc
  4128 00001C9D C3                  <1>         ret
  4129                              <1>         
  4130                              <1> .hidden_error:
  4131 00001C9E 09C0                <1>         or ax, ax
  4132 00001CA0 7405                <1>         jz .cannot_hide
  4133                              <1> 
  4134                              <1> .disk_error:
  4135 00001CA2 E8E1FD              <1>         call main_show_disk_error
  4136 00001CA5 EB07                <1>         jmp short .end
  4137                              <1> 
  4138                              <1> .cannot_hide:
  4139 00001CA7 8B36[644A]          <1>         mov si, [str_idx.toggle_hid_failed]
  4140 00001CAB E81D04              <1>         call error_box
  4141                              <1> .end:
  4142 00001CAE F9                  <1>         stc
  4143 00001CAF C3                  <1>         ret
  4144                              <1> 
  4145                              <1> ;=============================================================================
  4146                              <1> ; main_boot_prev_mbr ---- boot previous MBR
  4147                              <1> ;=============================================================================
  4148                              <1> main_boot_prev_mbr:
  4149                              <1> ; read partition table
  4150 00001CB0 06                  <1>         push es
  4151 00001CB1 6631DB              <1>         xor ebx, ebx
  4152 00001CB4 8EC3                <1>         mov es, bx
  4153 00001CB6 8A16[1000]          <1>         mov dl, [ADDR_SBMK_DRVID]
  4154 00001CBA BF007C              <1>         mov di, BOOT_OFF
  4155 00001CBD B80102              <1>         mov ax, (INT13H_READ << 8) | 0x01
  4156 00001CC0 E8421E              <1>         call disk_access
  4157 00001CC3 07                  <1>         pop es
  4158 00001CC4 722A                <1>         jc .disk_failed
  4159                              <1> 
  4160 00001CC6 52                  <1>         push dx
  4161 00001CC7 57                  <1>         push di
  4162 00001CC8 E874F0              <1>         call main_ask_save_changes
  4163 00001CCB E89CFF              <1>         call main_hide_auto_hides
  4164 00001CCE E8CC02              <1>         call reset_video_mode
  4165 00001CD1 5F                  <1>         pop di
  4166 00001CD2 5A                  <1>         pop dx
  4167                              <1> 
  4168 00001CD3 E8CB1E              <1> 	call uninstall_myint13h
  4169                              <1> 
  4170                              <1> ; copy previous mbr to Boot Offset 0x7c00
  4171 00001CD6 FC                  <1>         cld
  4172 00001CD7 B9BE01              <1>         mov cx, SIZE_OF_MBR
  4173 00001CDA 8D36[FE09]          <1>         lea si, [ADDR_SBMK_PREVIOUS_MBR]
  4174 00001CDE 31C0                <1>         xor ax, ax
  4175 00001CE0 50                  <1>         push ax
  4176 00001CE1 07                  <1>         pop es
  4177 00001CE2 F3A4                <1>         rep movsb
  4178                              <1> 
  4179 00001CE4 50                  <1>         push ax
  4180 00001CE5 1F                  <1>         pop ds
  4181                              <1> 
  4182 00001CE6 31ED                <1>         xor bp, bp                          ; might help some boot problems
  4183 00001CE8 B855AA              <1>         mov ax, BR_GOOD_FLAG                ; boot signature (just in case ...)
  4184 00001CEB EA007C0000          <1>         jmp 0:BOOT_OFF                      ; start boot sector
  4185                              <1> 
  4186                              <1> .disk_failed:
  4187 00001CF0 E893FD              <1>         call main_show_disk_error
  4188                              <1> .end:
  4189 00001CF3 C3                  <1>         ret
  4190                              <1> 
  4191                              <1> 
  4192                              <1> ;==============================================================================
  4193                              <1> ; CD-ROM Boot Stuff
  4194                              <1> ;==============================================================================
  4195                              <1> 
  4196                              <1> %ifndef DISABLE_CDBOOT
  4197                              <1> ;==============================================================================
  4198                              <1> ;main_choose_cdimg ---- let user choose a cdimg to boot
  4199                              <1> ;input ds:si -> buffer to store boot catalogs
  4200                              <1> ;      cl = number of entries
  4201                              <1> ;output cf =0 ok, al = user choice
  4202                              <1> ;       cf =1 cancel
  4203                              <1> ;==============================================================================
  4204                              <1> main_choose_cdimg:
  4205 00001CF4 53                  <1> 	push bx
  4206 00001CF5 51                  <1> 	push cx
  4207 00001CF6 52                  <1> 	push dx
  4208 00001CF7 56                  <1> 	push si
  4209                              <1> 
  4210 00001CF8 31D2                <1> 	xor dx, dx
  4211 00001CFA 8936[421D]          <1> 	mov [.catalogs_buf], si
  4212 00001CFE 8A2E[BA49]          <1> 	mov ch, [size.list_box_win_height]
  4213 00001D02 BB[DE4A]            <1> 	mov bx, str_idx.cdimg_menu_title
  4214                              <1> 
  4215 00001D05 BE[121D]            <1> 	mov si, .item_str_proc
  4216 00001D08 E84D08              <1> 	call list_box
  4217 00001D0B 88C8                <1> 	mov al, cl
  4218                              <1> 
  4219 00001D0D 5E                  <1> 	pop si
  4220 00001D0E 5A                  <1> 	pop dx
  4221 00001D0F 59                  <1> 	pop cx
  4222 00001D10 5B                  <1> 	pop bx
  4223 00001D11 C3                  <1> 	ret
  4224                              <1> 
  4225                              <1> .item_str_proc:
  4226 00001D12 8B36[421D]          <1> 	mov si, [.catalogs_buf]
  4227 00001D16 BF[B737]            <1> 	mov di, main_tmp.dialog_buf
  4228 00001D19 57                  <1> 	push di
  4229 00001D1A B82000              <1> 	mov ax, SIZE_OF_BOOT_CATALOG
  4230 00001D1D F6E1                <1> 	mul cl
  4231 00001D1F 01C6                <1> 	add si, ax
  4232                              <1> 
  4233 00001D21 89C8                <1> 	mov ax, cx
  4234 00001D23 B102                <1> 	mov cl, 2
  4235 00001D25 E86E0D              <1> 	call itoa
  4236 00001D28 83C702              <1> 	add di, 2
  4237 00001D2B B82E20              <1> 	mov ax, '. '
  4238 00001D2E FC                  <1> 	cld
  4239 00001D2F AB                  <1> 	stosw
  4240                              <1> 
  4241 00001D30 0FB64401            <1> 	movzx ax, [si + struc_boot_catalog.media_type]
  4242                              <1> 
  4243 00001D34 D0E0                <1> 	shl al, 1
  4244                              <1> 
  4245 00001D36 BE[E04A]            <1> 	mov si, str_idx.cdimg_menu_strings
  4246 00001D39 01C6                <1> 	add si, ax
  4247 00001D3B 8B34                <1> 	mov si, [si]
  4248 00001D3D E8FD0D              <1> 	call strcpy
  4249 00001D40 5E                  <1> 	pop si
  4250 00001D41 C3                  <1> 	ret
  4251                              <1> 
  4252 00001D42 0000                <1> .catalogs_buf dw 0
  4253                              <1> 
  4254                              <1> %endif
  4255                              <1> 
  4256                              <1> %endif
  4257                                  %include "ui.asm"
  4258                              <1> ; asmsyntax=nasm
  4259                              <1> ;
  4260                              <1> ; ui.asm
  4261                              <1> ;
  4262                              <1> ; Functions for User Interface
  4263                              <1> ;
  4264                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
  4265                              <1> ;
  4266                              <1> 
  4267                              <1> %ifndef HAVE_UI
  4268                              <1> 
  4269                              <1> %ifndef MAIN
  4270                              <1> %include "ui.h"
  4271                              <1> %include "evtcode.h"
  4272                              <1> %include "utils.asm"
  4273                              <1> 	section .text
  4274                              <1> %endif
  4275                              <1> 
  4276                              <1> %define HAVE_UI
  4277                              <1> %define DIRECT_DRAW
  4278                              <1> 
  4279                              <1> %define SCR_BUF_SEG0    0xB800
  4280                              <1> %define SCR_BUF_SEG1    0xB900
  4281                              <1> %define SCR_BUF_SEG2    0xBA00
  4282                              <1> %define SCR_PAGE_SEGS   0x0100
  4283                              <1> 
  4284                              <1> %define SCR_BAK_SEG     0x0900
  4285                              <1> %define BIOS_DATA_SEG   0x0040
  4286                              <1> 
  4287                              <1> %define BIOS_KEYSTAT_OFF 0x0017
  4288                              <1> 
  4289                              <1> %define WINDOW_DEF_ACTION_NUM  (window_def_action_table.end_of_table - window_def_action_table) / SIZE_OF_STRUC_ACTION
  4290                              <1> %define MENUBOX_DEF_ACTION_NUM  (menubox_def_action_table.end_of_table - menubox_def_action_table) / SIZE_OF_STRUC_ACTION
  4291                              <1> %define LISTBOX_ACTION_NUM  (listbox_action_table.end_of_table - listbox_action_table) / SIZE_OF_STRUC_ACTION
  4292                              <1> %define INPUTBOX_ACTION_NUM  (inputbox_action_table.end_of_table - inputbox_action_table) / SIZE_OF_STRUC_ACTION
  4293                              <1>       bits 16
  4294                              <1> 
  4295                              <1> 
  4296                              <1> ;=============================================================================
  4297                              <1> ; <<<<<<<<<<<<<<<<<<< Basic Drawing and Screen functions >>>>>>>>>>>>>>>>>>>>>
  4298                              <1> ;=============================================================================
  4299                              <1> 
  4300                              <1> %if 1
  4301                              <1> ;=============================================================================
  4302                              <1> ;draw_string_hl ---- Draw a zero ending string with highlighted characters 
  4303                              <1> ;                    at special position
  4304                              <1> ;input:
  4305                              <1> ;      bl = attribute for normal characters
  4306                              <1> ;           high 4 bit Background color and low 4 bit Foreground color
  4307                              <1> ;      bh = attribute for hightlight characters
  4308                              <1> ;      dh = start row
  4309                              <1> ;      dl = start column
  4310                              <1> ;      ds:si -> the string to be displayed
  4311                              <1> ;output:
  4312                              <1> ;      none
  4313                              <1> ;=============================================================================
  4314                              <1> draw_string:
  4315                              <1> draw_string_hl:
  4316 00001D44 60                  <1>         pusha
  4317 00001D45 52                  <1>         push dx
  4318 00001D46 B90100              <1>         mov cx,1
  4319 00001D49 FC                  <1>         cld
  4320                              <1> .start:
  4321                              <1> 
  4322 00001D4A AC                  <1>         lodsb
  4323 00001D4B 08C0                <1>         or al,al
  4324 00001D4D 7419                <1>         jz .end
  4325                              <1> 
  4326 00001D4F 3C0D                <1>         cmp al,0x0d                ; if need Change row
  4327 00001D51 7506                <1>         jne .no_cr
  4328 00001D53 5A                  <1>         pop dx
  4329 00001D54 FEC6                <1>         inc dh
  4330 00001D56 52                  <1>         push dx
  4331 00001D57 EBF1                <1>         jmp short .start
  4332                              <1> 
  4333                              <1> .no_cr:
  4334 00001D59 3C7E                <1>         cmp al, '~'
  4335 00001D5B 7504                <1>         jne .draw_it
  4336 00001D5D 86FB                <1>         xchg bh, bl
  4337 00001D5F EB05                <1>         jmp short .next_char
  4338                              <1> 
  4339                              <1> .draw_it:
  4340 00001D61 E80700              <1>         call draw_char
  4341                              <1> 
  4342 00001D64 FEC2                <1>         inc dl
  4343                              <1> .next_char:
  4344 00001D66 EBE2                <1>         jmp short .start
  4345                              <1> .end:
  4346 00001D68 5A                  <1>         pop dx
  4347 00001D69 61                  <1>         popa
  4348 00001D6A C3                  <1>         ret
  4349                              <1> ;=============================================================================
  4350                              <1> %endif
  4351                              <1> 
  4352                              <1> %if 0
  4353                              <1> ;=============================================================================
  4354                              <1> ;draw_string ---- Draw a zero ending string at special position
  4355                              <1> ;input:
  4356                              <1> ;      bl = high 4 bit Background color and low 4 bit Foreground color
  4357                              <1> ;      dh = start row
  4358                              <1> ;      dl = start column
  4359                              <1> ;      ds:si -> the string to be displayed
  4360                              <1> ;output:
  4361                              <1> ;      none
  4362                              <1> ;=============================================================================
  4363                              <1> draw_string_hl:
  4364                              <1> draw_string:
  4365                              <1>         pusha
  4366                              <1>         push dx
  4367                              <1>         mov cx,1
  4368                              <1>         cld
  4369                              <1> .start:
  4370                              <1> 
  4371                              <1>         lodsb
  4372                              <1>         or al,al
  4373                              <1>         jz .end
  4374                              <1> 
  4375                              <1>         cmp al,0x0d                ; if need Change row
  4376                              <1>         jne .no_cr
  4377                              <1>         pop dx
  4378                              <1>         inc dh
  4379                              <1>         push dx
  4380                              <1>         jmp short .start
  4381                              <1> 
  4382                              <1> .no_cr:
  4383                              <1>         call draw_char
  4384                              <1> 
  4385                              <1>         inc dl
  4386                              <1>         jmp short .start
  4387                              <1> .end:
  4388                              <1>         pop dx
  4389                              <1>         popa
  4390                              <1>         ret
  4391                              <1> ;=============================================================================
  4392                              <1> %endif
  4393                              <1> 
  4394                              <1> ;=============================================================================
  4395                              <1> ;draw_char ---- Draw chars at special position
  4396                              <1> ;input:
  4397                              <1> ;      bl = high 4 bit Background color and low 4 bit Foreground color
  4398                              <1> ;      dh = start row
  4399                              <1> ;      dl = start column
  4400                              <1> ;      al = the char to be displayed
  4401                              <1> ;      cx = repeat times
  4402                              <1> ;output:
  4403                              <1> ;      none
  4404                              <1> ;=============================================================================
  4405                              <1> draw_char:
  4406                              <1> %ifdef DIRECT_DRAW                            ; directly write to video buffer
  4407 00001D6B 60                  <1>         pusha
  4408 00001D6C 06                  <1>         push es
  4409 00001D6D FC                  <1> 	cld
  4410                              <1> 
  4411 00001D6E 88DC                <1>         mov ah, bl
  4412 00001D70 50                  <1>         push ax
  4413                              <1> 
  4414 00001D71 FF36[C529]          <1> 	push word [ui_screen_bufseg]
  4415 00001D75 07                  <1> 	pop es
  4416                              <1> 
  4417 00001D76 A0[C329]            <1>         mov al, [ui_screen_width]
  4418 00001D79 F6E6                <1>         mul dh
  4419 00001D7B 30F6                <1>         xor dh, dh
  4420 00001D7D 01D0                <1>         add ax, dx
  4421 00001D7F D1E0                <1>         shl ax, 1
  4422 00001D81 89C7                <1>         mov di, ax
  4423                              <1> 
  4424 00001D83 58                  <1>         pop ax
  4425 00001D84 F3AB                <1>         rep stosw
  4426 00001D86 07                  <1>         pop es
  4427 00001D87 61                  <1>         popa
  4428                              <1> %else
  4429                              <1>         push bx
  4430                              <1>         mov ah,2
  4431                              <1>         mov bh, [ui_screen_page]
  4432                              <1>         int 0x10
  4433                              <1>         mov ah,0x09
  4434                              <1>         int 0x10
  4435                              <1>         pop bx
  4436                              <1> %endif
  4437 00001D88 C3                  <1>         ret
  4438                              <1> ;=============================================================================
  4439                              <1> 
  4440                              <1> ;=============================================================================
  4441                              <1> ;clear_screen ---- clear a screen area
  4442                              <1> ;input:
  4443                              <1> ;      ch = row of top left corner
  4444                              <1> ;      cl = column of top left corner
  4445                              <1> ;      dh = row of bottom right corner
  4446                              <1> ;      dl = column of bottom right corner
  4447                              <1> ;      bh = attribute
  4448                              <1> ;output:
  4449                              <1> ;      none
  4450                              <1> ;=============================================================================
  4451                              <1> clear_screen:
  4452 00001D89 60                  <1>         pusha
  4453                              <1> %ifdef DIRECT_DRAW
  4454 00001D8A 06                  <1>         push es
  4455 00001D8B FC                  <1> 	cld
  4456                              <1> 
  4457 00001D8C 88FC                <1>         mov ah, bh
  4458 00001D8E B020                <1>         mov al, ' '
  4459                              <1> 
  4460 00001D90 FF36[C529]          <1> 	push word [ui_screen_bufseg]
  4461 00001D94 07                  <1> 	pop es
  4462                              <1> 
  4463 00001D95 28CA                <1>         sub dl, cl
  4464 00001D97 FEC2                <1>         inc dl
  4465                              <1> 
  4466                              <1> .loop_fill:
  4467 00001D99 51                  <1>         push cx
  4468 00001D9A 50                  <1>         push ax
  4469                              <1> 
  4470 00001D9B A0[C329]            <1>         mov al, [ui_screen_width]
  4471 00001D9E F6E5                <1>         mul ch
  4472 00001DA0 30ED                <1>         xor ch, ch
  4473 00001DA2 01C8                <1>         add ax, cx
  4474 00001DA4 D1E0                <1>         shl ax, 1
  4475 00001DA6 89C7                <1>         mov di, ax
  4476 00001DA8 88D1                <1>         mov cl, dl
  4477                              <1> 
  4478 00001DAA 58                  <1>         pop ax
  4479 00001DAB F3AB                <1>         rep stosw
  4480 00001DAD 59                  <1>         pop cx
  4481 00001DAE FEC5                <1>         inc ch
  4482 00001DB0 38F5                <1>         cmp ch, dh
  4483 00001DB2 76E5                <1>         jbe .loop_fill
  4484                              <1> 
  4485 00001DB4 07                  <1>         pop es
  4486                              <1> %else
  4487                              <1>         mov ax, 0x0600
  4488                              <1>         int 0x10
  4489                              <1> %endif
  4490 00001DB5 61                  <1>         popa
  4491 00001DB6 C3                  <1>         ret
  4492                              <1> 
  4493                              <1> ;=============================================================================
  4494                              <1> ;read_scrchar ---- read a char from the screen
  4495                              <1> ;input:
  4496                              <1> ;       dh = row
  4497                              <1> ;       dl = column
  4498                              <1> ;output:
  4499                              <1> ;       ax = char with attribute
  4500                              <1> ;=============================================================================
  4501                              <1> read_scrchar:
  4502                              <1> %ifdef DIRECT_DRAW
  4503 00001DB7 1E                  <1>         push ds
  4504 00001DB8 52                  <1>         push dx
  4505 00001DB9 56                  <1>         push si
  4506                              <1> 
  4507 00001DBA A0[C329]            <1>         mov al, [ui_screen_width]
  4508 00001DBD F6E6                <1>         mul dh
  4509 00001DBF 30F6                <1>         xor dh, dh
  4510 00001DC1 01D0                <1>         add ax, dx
  4511 00001DC3 D1E0                <1>         shl ax, 1
  4512 00001DC5 89C6                <1>         mov si, ax
  4513                              <1> 
  4514 00001DC7 FF36[C529]          <1> 	push word [ui_screen_bufseg]
  4515 00001DCB 1F                  <1> 	pop ds
  4516                              <1> 
  4517 00001DCC AD                  <1>         lodsw
  4518 00001DCD 5E                  <1>         pop si
  4519 00001DCE 5A                  <1>         pop dx
  4520 00001DCF 1F                  <1>         pop ds
  4521                              <1> %else
  4522                              <1>         push bx
  4523                              <1>         mov bh, [ui_screen_page]
  4524                              <1>         mov ah,0x02
  4525                              <1>         int 0x10
  4526                              <1>         mov ah,0x08
  4527                              <1>         int 0x10
  4528                              <1>         pop bx
  4529                              <1> %endif
  4530 00001DD0 C3                  <1>         ret
  4531                              <1> 
  4532                              <1> %if 0
  4533                              <1> ;=============================================================================
  4534                              <1> ;draw_string_tty ---- Draw a string ending by zero ( tty mode )
  4535                              <1> ;input:
  4536                              <1> ;      ds:si -> string
  4537                              <1> ;output:
  4538                              <1> ;      none
  4539                              <1> ;=============================================================================
  4540                              <1> draw_string_tty:
  4541                              <1>         pusha
  4542                              <1>         cld
  4543                              <1> .draw1:
  4544                              <1>         lodsb
  4545                              <1>         or al, al
  4546                              <1>         jz .end
  4547                              <1>         mov bx,7
  4548                              <1>         mov ah,0x0e
  4549                              <1>         int 0x10
  4550                              <1>         jmp short .draw1
  4551                              <1> .end:
  4552                              <1>         popa
  4553                              <1>         ret
  4554                              <1> ;=============================================================================
  4555                              <1> %endif
  4556                              <1> 
  4557                              <1> ;=============================================================================
  4558                              <1> ;draw_window ---- Draw a framed window
  4559                              <1> ;input:
  4560                              <1> ;      ch = row of top left corner
  4561                              <1> ;      cl = column of top left corner
  4562                              <1> ;      dh = row of bottom right corner
  4563                              <1> ;      dl = column of bottom right corner
  4564                              <1> ;      bl = high 4 bit Background color and low 4 bit Foreground color
  4565                              <1> ;      bh = title attribute (define same as bl)
  4566                              <1> ;      ds:si -> title
  4567                              <1> ;output:
  4568                              <1> ;      none
  4569                              <1> ;=============================================================================
  4570                              <1> draw_window:
  4571 00001DD1 60                  <1>         pusha
  4572 00001DD2 890E[6D2C]          <1>         mov [ui_tmp.left_col], cx          ;
  4573 00001DD6 8916[6F2C]          <1>         mov [ui_tmp.right_col], dx         ; save window pos and attribute
  4574 00001DDA 891E[712C]          <1>         mov [ui_tmp.frame_attr], bx        ;
  4575                              <1> 
  4576                              <1> ;Clear frame background
  4577 00001DDE 86FB                <1>         xchg bh,bl
  4578 00001DE0 E8A6FF              <1>         call clear_screen
  4579                              <1> 
  4580 00001DE3 87D1                <1>         xchg dx,cx
  4581 00001DE5 B90100              <1>         mov cx,1
  4582                              <1> 
  4583                              <1> ;Draw four corners
  4584 00001DE8 8A1E[712C]          <1>         mov bl, [ui_tmp.frame_attr]
  4585 00001DEC 803E[014A]02        <1>         cmp byte [draw_frame_method], 2             ; check draw method.
  4586 00001DF1 7204                <1>         jb .draw_top_corner
  4587 00001DF3 8A1E[722C]          <1>         mov bl, [ui_tmp.title_attr]
  4588                              <1> .draw_top_corner:
  4589 00001DF7 A0[FD49]            <1>         mov al, [frame_char.tl_corner]
  4590 00001DFA E86EFF              <1>         call draw_char
  4591                              <1> 
  4592 00001DFD 8A16[6F2C]          <1>         mov dl, [ui_tmp.right_col]
  4593 00001E01 A0[FE49]            <1>         mov al, [frame_char.tr_corner]
  4594 00001E04 E864FF              <1>         call draw_char
  4595                              <1> 
  4596 00001E07 8A1E[712C]          <1>         mov bl, [ui_tmp.frame_attr]
  4597 00001E0B 8A36[702C]          <1>         mov dh, [ui_tmp.bottom_row]
  4598 00001E0F A0[004A]            <1>         mov al, [frame_char.br_corner]
  4599 00001E12 E856FF              <1>         call draw_char
  4600                              <1>   
  4601 00001E15 8A16[6D2C]          <1>         mov dl, [ui_tmp.left_col]
  4602 00001E19 A0[FF49]            <1>         mov al, [frame_char.bl_corner]
  4603 00001E1C E84CFF              <1>         call draw_char
  4604                              <1> 
  4605                              <1> ;Draw bottom horizontal line
  4606 00001E1F FEC2                <1>         inc dl
  4607 00001E21 8A0E[6F2C]          <1>         mov cl, [ui_tmp.right_col]
  4608 00001E25 28D1                <1>         sub cl, dl
  4609 00001E27 A0[FA49]            <1>         mov al, [frame_char.bottom]
  4610 00001E2A E83EFF              <1>         call draw_char
  4611                              <1> 
  4612                              <1> ;Draw top horizontal line
  4613 00001E2D 8A1E[712C]          <1>         mov bl, [ui_tmp.frame_attr]
  4614 00001E31 803E[014A]01        <1>         cmp byte [draw_frame_method], 1             ; check draw method.
  4615 00001E36 7204                <1>         jb .draw_top_line
  4616 00001E38 8A1E[722C]          <1>         mov bl, [ui_tmp.title_attr]
  4617                              <1> .draw_top_line:
  4618 00001E3C 8A36[6E2C]          <1>         mov dh, [ui_tmp.top_row]
  4619 00001E40 A0[F949]            <1>         mov al, [frame_char.top]
  4620 00001E43 E825FF              <1>         call draw_char
  4621                              <1> 
  4622                              <1> ;Draw title
  4623 00001E46 E89B0C              <1>         call strlen
  4624 00001E49 09C9                <1>         or cx,cx
  4625 00001E4B 741E                <1>         jz .no_title
  4626                              <1> 
  4627 00001E4D A0[6F2C]            <1>         mov al, [ui_tmp.right_col]
  4628 00001E50 2A06[6D2C]          <1>         sub al, [ui_tmp.left_col]
  4629 00001E54 28C8                <1>         sub al, cl
  4630 00001E56 FEC0                <1>         inc al
  4631 00001E58 D0E8                <1>         shr al,1
  4632 00001E5A 8A16[6D2C]          <1>         mov dl, [ui_tmp.left_col]
  4633 00001E5E 00C2                <1>         add dl,al
  4634 00001E60 8A36[6E2C]          <1>         mov dh, [ui_tmp.top_row]
  4635                              <1> 
  4636 00001E64 8A1E[722C]          <1>         mov bl, [ui_tmp.title_attr]
  4637 00001E68 E8D9FE              <1>         call draw_string
  4638                              <1> 
  4639                              <1> .no_title:
  4640                              <1> 
  4641                              <1> ;Draw vertical line
  4642 00001E6B 8A1E[712C]          <1>         mov bl, [ui_tmp.frame_attr]
  4643 00001E6F 8A36[6E2C]          <1>         mov dh, [ui_tmp.top_row]
  4644 00001E73 FEC6                <1>         inc dh
  4645                              <1> 
  4646 00001E75 B90100              <1>         mov cx,1
  4647                              <1> 
  4648                              <1> .draw_vert_line:
  4649 00001E78 A0[FB49]            <1>         mov al, [frame_char.left]
  4650 00001E7B 8A16[6D2C]          <1>         mov dl, [ui_tmp.left_col]
  4651 00001E7F E8E9FE              <1>         call draw_char
  4652 00001E82 A0[FC49]            <1>         mov al, [frame_char.right]
  4653 00001E85 8A16[6F2C]          <1>         mov dl, [ui_tmp.right_col]
  4654 00001E89 E8DFFE              <1>         call draw_char
  4655                              <1> 
  4656 00001E8C FEC6                <1>         inc dh
  4657 00001E8E 3A36[702C]          <1>         cmp dh, [ui_tmp.bottom_row]
  4658 00001E92 72E4                <1>         jb .draw_vert_line
  4659                              <1> 
  4660                              <1> ;Draw shadow
  4661 00001E94 B308                <1>         mov bl, 0x08
  4662 00001E96 8A2E[702C]          <1>         mov ch, [ui_tmp.bottom_row]
  4663 00001E9A 8A0E[6D2C]          <1>         mov cl, [ui_tmp.left_col]
  4664 00001E9E FEC5                <1>         inc ch
  4665 00001EA0 80C102              <1> 	add cl, 2
  4666 00001EA3 8A36[702C]          <1>         mov dh, [ui_tmp.bottom_row]
  4667 00001EA7 8A16[6F2C]          <1>         mov dl, [ui_tmp.right_col]
  4668 00001EAB FEC6                <1>         inc dh
  4669 00001EAD E81400              <1>         call draw_shadow
  4670 00001EB0 8A2E[6E2C]          <1>         mov ch, [ui_tmp.top_row]
  4671 00001EB4 8A0E[6F2C]          <1>         mov cl, [ui_tmp.right_col]
  4672 00001EB8 FEC5                <1>         inc ch
  4673 00001EBA FEC1                <1>         inc cl
  4674 00001EBC 80C202              <1> 	add dl, 2
  4675 00001EBF E80200              <1>         call draw_shadow
  4676                              <1> 
  4677 00001EC2 61                  <1>         popa
  4678 00001EC3 C3                  <1>         ret
  4679                              <1> ;=============================================================================
  4680                              <1> 
  4681                              <1> ;=============================================================================
  4682                              <1> ;draw_shadow ---- Draw shadow block
  4683                              <1> ;input:
  4684                              <1> ;      ch = row of top left corner
  4685                              <1> ;      cl = column of top left corner
  4686                              <1> ;      dh = row of bottom right corner
  4687                              <1> ;      dl = column of bottom right corner
  4688                              <1> ;      bl = high 4 bit Background color and low 4 bit Foreground color
  4689                              <1> ;output:
  4690                              <1> ;      none
  4691                              <1> ;=============================================================================
  4692                              <1> draw_shadow:
  4693 00001EC4 60                  <1>         pusha
  4694                              <1> .loop_row:
  4695 00001EC5 52                  <1>         push dx
  4696                              <1> .loop_col:
  4697 00001EC6 51                  <1>         push cx
  4698 00001EC7 B90100              <1>         mov cx,1
  4699 00001ECA E8EAFE              <1>         call read_scrchar
  4700 00001ECD E89BFE              <1>         call draw_char
  4701 00001ED0 59                  <1>         pop cx
  4702 00001ED1 FECA                <1>         dec dl
  4703 00001ED3 38D1                <1>         cmp cl, dl
  4704 00001ED5 76EF                <1>         jbe .loop_col
  4705 00001ED7 5A                  <1>         pop dx
  4706 00001ED8 FECE                <1>         dec dh
  4707 00001EDA 38F5                <1>         cmp ch, dh
  4708 00001EDC 76E7                <1>         jbe .loop_row
  4709                              <1> 
  4710 00001EDE 61                  <1>         popa
  4711 00001EDF C3                  <1>         ret
  4712                              <1> ;=============================================================================
  4713                              <1> 
  4714                              <1> 
  4715                              <1> ;=============================================================================
  4716                              <1> ;set_video_mode ---- Set the Alphabet Video Mode
  4717                              <1> ;input:
  4718                              <1> ;      al = 0 , set screen resolution to 90x25,
  4719                              <1> ;           otherwise set to 80x25
  4720                              <1> ;      bl = character bit size ( 8 or 9 )
  4721                              <1> ;      cx = fonts number
  4722                              <1> ;      es:bp -> fonts data
  4723                              <1> ;output:
  4724                              <1> ;      none
  4725                              <1> ;=============================================================================
  4726                              <1> BIOS_CRT_COLS        equ 0x4A
  4727                              <1> BIOS_ADDR_6845       equ 0x63
  4728                              <1> 
  4729                              <1> set_video_mode:
  4730 00001EE0 06                  <1>         push es
  4731 00001EE1 53                  <1>         push bx
  4732 00001EE2 50                  <1>         push ax
  4733                              <1> 
  4734 00001EE3 E8B700              <1>         call reset_video_mode
  4735                              <1> 
  4736                              <1> ;Establish CRTC vertical timing and cursor position in character matrix
  4737                              <1> ;and set user fonts table
  4738 00001EE6 09C9                <1>         or cx, cx
  4739 00001EE8 741D                <1>         jz .set_res                          ; no font data
  4740 00001EEA 09ED                <1>         or bp, bp
  4741 00001EEC 7419                <1>         jz .set_res                          ; no font data
  4742                              <1>         
  4743                              <1> .loop_set_fonts:                             ; set user defined chars
  4744 00001EEE 51                  <1>         push cx
  4745 00001EEF 31C9                <1>         xor cx,cx
  4746 00001EF1 FEC1                <1>         inc cl
  4747 00001EF3 260FB65600          <1>         movzx dx, byte [es:bp]
  4748 00001EF8 45                  <1>         inc bp
  4749 00001EF9 B80011              <1>         mov ax,0x1100
  4750 00001EFC BB0010              <1>         mov bx,0x1000
  4751 00001EFF CD10                <1>         int 0x10
  4752 00001F01 59                  <1>         pop cx
  4753 00001F02 83C510              <1>         add bp, 16
  4754 00001F05 E2E7                <1>         loop .loop_set_fonts
  4755                              <1> 
  4756                              <1> .set_res:
  4757 00001F07 C606[C329]50        <1>         mov byte [ui_screen_width], 80
  4758 00001F0C C606[C429]19        <1>         mov byte [ui_screen_height], 25
  4759                              <1> 
  4760 00001F11 B84000              <1>         mov ax,0x40
  4761 00001F14 8EC0                <1>         mov es,ax
  4762 00001F16 58                  <1>         pop ax
  4763                              <1> 
  4764 00001F17 08C0                <1>         or al,al
  4765 00001F19 7540                <1>         jnz .skip_res_set
  4766                              <1> 
  4767 00001F1B 268B166300          <1>         mov dx,[es:BIOS_ADDR_6845]                   ; CRTC I/O port
  4768                              <1> 
  4769                              <1> ;Enable I/O writes to CRTC registers
  4770 00001F20 B011                <1>         mov al,0x11
  4771 00001F22 EE                  <1>         out dx,al
  4772 00001F23 42                  <1>         inc dx
  4773 00001F24 EC                  <1>         in al,dx
  4774 00001F25 4A                  <1>         dec dx
  4775 00001F26 88C4                <1>         mov ah,al
  4776 00001F28 B011                <1>         mov al,0x11
  4777 00001F2A 50                  <1>         push ax
  4778 00001F2B 80E47F              <1>         and ah,01111111b
  4779 00001F2E EF                  <1>         out dx,ax
  4780                              <1> 
  4781                              <1> ;Establish CRTC horizontal timing
  4782 00001F2F 8D36[B529]          <1>         lea si, [ui_VideoHorizParams]
  4783                              <1> 
  4784 00001F33 B90700              <1>         mov cx,7
  4785                              <1>         
  4786 00001F36 FC                  <1>         cld
  4787                              <1> .set_CRTC:
  4788 00001F37 AD                  <1>         lodsw
  4789 00001F38 EF                  <1>         out dx,ax
  4790 00001F39 E2FC                <1>         loop .set_CRTC
  4791                              <1> 
  4792                              <1> ;write-protect CRTC registers
  4793 00001F3B 58                  <1>         pop ax
  4794 00001F3C EF                  <1>         out dx,ax
  4795                              <1> 
  4796                              <1> ;Program the Sequencer and Attribute Controller for 9 dots per character
  4797                              <1>         
  4798 00001F3D BAC403              <1>         mov dx, 0x3c4
  4799 00001F40 B80001              <1>         mov ax, 0x0100
  4800 00001F43 FA                  <1>         cli
  4801 00001F44 EF                  <1>         out dx,ax
  4802                              <1> 
  4803 00001F45 B80101              <1>         mov ax,0x0101
  4804 00001F48 EF                  <1>         out dx,ax
  4805 00001F49 B80003              <1>         mov ax,0x0300
  4806 00001F4C EF                  <1>         out dx,ax
  4807 00001F4D FB                  <1>         sti
  4808                              <1> 
  4809 00001F4E BB1300              <1>         mov bx,0x0013
  4810 00001F51 B80010              <1>         mov ax,0x1000
  4811 00001F54 CD10                <1>         int 0x10
  4812                              <1> 
  4813 00001F56 C606[C329]5A        <1>         mov byte [ui_screen_width], 90
  4814                              <1> .skip_res_set:
  4815                              <1> 
  4816                              <1> ;Program the Attribute Controller for 8- or 9-bit character codes
  4817 00001F5B B80010              <1>         mov ax,0x1000
  4818 00001F5E BB120F              <1>         mov bx,0x0f12
  4819 00001F61 5A                  <1>         pop dx
  4820 00001F62 80FA08              <1>         cmp dl,8
  4821 00001F65 7402                <1>         je .svm01
  4822 00001F67 B707                <1>         mov bh,7
  4823                              <1> .svm01:
  4824 00001F69 CD10                <1>         int 0x10
  4825                              <1> 
  4826                              <1> ;Update video BIOS data area
  4827 00001F6B A0[C329]            <1>         mov al,[ui_screen_width]
  4828 00001F6E 26A24A00            <1>         mov [es:BIOS_CRT_COLS],al
  4829                              <1> 
  4830                              <1> ;Set background highlight attribute
  4831 00001F72 07                  <1>         pop es
  4832 00001F73 B80310              <1>         mov ax,0x1003
  4833 00001F76 30DB                <1>         xor bl,bl
  4834 00001F78 CD10                <1>         int 0x10
  4835 00001F7A E80C00              <1>         call hide_cursor
  4836                              <1> 
  4837 00001F7D C3                  <1>         ret
  4838                              <1> ;=============================================================================
  4839                              <1> 
  4840                              <1> ;=============================================================================
  4841                              <1> ;set_cursor ---- move the cursor
  4842                              <1> ;input:
  4843                              <1> ;       dh = row
  4844                              <1> ;       dl = column
  4845                              <1> ;=============================================================================
  4846                              <1> set_cursor:
  4847 00001F7E 60                  <1> 	pusha
  4848 00001F7F 8A3E[C729]          <1>         mov bh, [ui_screen_page]
  4849 00001F83 B402                <1>         mov ah, 0x02
  4850 00001F85 CD10                <1>         int 0x10
  4851 00001F87 61                  <1> 	popa
  4852 00001F88 C3                  <1>         ret
  4853                              <1> 
  4854                              <1> ;=============================================================================
  4855                              <1> ;hide_cursor ---- Hide the cursor
  4856                              <1> ;input:
  4857                              <1> ;      none
  4858                              <1> ;output:
  4859                              <1> ;      none
  4860                              <1> ;=============================================================================
  4861                              <1> hide_cursor:
  4862 00001F89 60                  <1>         pusha
  4863 00001F8A B401                <1>         mov ah,1
  4864 00001F8C B9006F              <1>         mov cx,0x6f00
  4865 00001F8F CD10                <1>         int 0x10
  4866 00001F91 61                  <1>         popa
  4867 00001F92 C3                  <1>         ret
  4868                              <1> ;=============================================================================
  4869                              <1> 
  4870                              <1> ;=============================================================================
  4871                              <1> ;show_cursor ---- Show the cursor
  4872                              <1> ;input:
  4873                              <1> ;      none
  4874                              <1> ;output:
  4875                              <1> ;      none
  4876                              <1> ;=============================================================================
  4877                              <1> show_cursor:
  4878 00001F93 60                  <1>         pusha
  4879 00001F94 B401                <1>         mov ah,1
  4880 00001F96 B90F0E              <1>         mov cx,0x0e0f
  4881 00001F99 CD10                <1>         int 0x10
  4882 00001F9B 61                  <1>         popa
  4883 00001F9C C3                  <1>         ret
  4884                              <1> ;=============================================================================
  4885                              <1> 
  4886                              <1> ;=============================================================================
  4887                              <1> ;reset_video_mode ---- Reset the VideoMode
  4888                              <1> ;input:
  4889                              <1> ;      none
  4890                              <1> ;output:
  4891                              <1> ;      none
  4892                              <1> ;=============================================================================
  4893                              <1> reset_video_mode
  4894 00001F9D 60                  <1>         pusha
  4895 00001F9E B80300              <1>         mov ax,3
  4896 00001FA1 CD10                <1>         int 0x10
  4897 00001FA3 E8EDFF              <1>         call show_cursor
  4898 00001FA6 61                  <1>         popa
  4899 00001FA7 C3                  <1>         ret
  4900                              <1> ;=============================================================================
  4901                              <1> 
  4902                              <1> 
  4903                              <1> ;=============================================================================
  4904                              <1> ;draw_icon ---- Draw a icon at special position
  4905                              <1> ;input:
  4906                              <1> ;      dh = start row
  4907                              <1> ;      dl = start column
  4908                              <1> ;      ch = number of row
  4909                              <1> ;      cl = number of column
  4910                              <1> ;      ds:si -> icon data , which is a two dim word array, each elements
  4911                              <1> ;               indicates a char. high byte is the attribute, low byte is
  4912                              <1> ;               is the char code.
  4913                              <1> ;output:
  4914                              <1> ;      none
  4915                              <1> ;=============================================================================
  4916                              <1> draw_icon:
  4917 00001FA8 09F6                <1>         or si, si
  4918 00001FAA 7422                <1>         jz .end
  4919 00001FAC 09C9                <1>         or cx, cx
  4920 00001FAE 741E                <1>         jz .end
  4921                              <1>         
  4922 00001FB0 60                  <1>         pusha
  4923 00001FB1 FC                  <1>         cld
  4924                              <1> .loop_row:
  4925 00001FB2 52                  <1>         push dx
  4926 00001FB3 51                  <1>         push cx
  4927                              <1> .loop_col:
  4928 00001FB4 51                  <1>         push cx
  4929 00001FB5 B90100              <1>         mov cx,1
  4930 00001FB8 AD                  <1>         lodsw
  4931 00001FB9 86E3                <1>         xchg ah,bl
  4932 00001FBB E8ADFD              <1>         call draw_char
  4933                              <1>         
  4934 00001FBE 59                  <1>         pop cx
  4935 00001FBF FEC2                <1>         inc dl
  4936 00001FC1 FEC9                <1>         dec cl
  4937 00001FC3 75EF                <1>         jnz .loop_col
  4938                              <1>         
  4939 00001FC5 59                  <1>         pop cx
  4940 00001FC6 5A                  <1>         pop dx
  4941 00001FC7 FEC6                <1>         inc dh
  4942 00001FC9 FECD                <1>         dec ch
  4943 00001FCB 75E5                <1>         jnz .loop_row
  4944                              <1> 
  4945 00001FCD 61                  <1>         popa
  4946                              <1> .end:
  4947 00001FCE C3                  <1>         ret
  4948                              <1> ;=============================================================================
  4949                              <1> 
  4950                              <1> ;=============================================================================
  4951                              <1> ;draw_background ---- Draw the background using specified icon
  4952                              <1> ;input:
  4953                              <1> ;      bh = background color when no icon
  4954                              <1> ;      cx = icon size (ch = row, cl = col)
  4955                              <1> ;      ds:si -> icon data , which is a two dim word array, each elements
  4956                              <1> ;               indicates a char. high byte is the attribute, low byte is
  4957                              <1> ;               is the char code.
  4958                              <1> ;output:
  4959                              <1> ;      none
  4960                              <1> ;=============================================================================
  4961                              <1> draw_background:
  4962 00001FCF 60                  <1>         pusha
  4963 00001FD0 09F6                <1>         or si,si
  4964 00001FD2 7513                <1>         jnz .normal_bg
  4965                              <1> 
  4966                              <1> ;no icon. clear background.
  4967 00001FD4 31C9                <1>         xor cx,cx
  4968 00001FD6 8A36[C429]          <1>         mov dh,[ui_screen_height]
  4969 00001FDA 8A16[C329]          <1>         mov dl,[ui_screen_width]
  4970 00001FDE FECE                <1>         dec dh
  4971 00001FE0 FECA                <1>         dec dl
  4972 00001FE2 E8A4FD              <1>         call clear_screen
  4973 00001FE5 61                  <1>         popa
  4974 00001FE6 C3                  <1>         ret
  4975                              <1> 
  4976                              <1> .normal_bg:
  4977 00001FE7 31D2                <1>         xor dx,dx
  4978                              <1> 
  4979                              <1> .loop_row:
  4980 00001FE9 52                  <1>         push dx
  4981                              <1> .loop_col:
  4982 00001FEA E8BBFF              <1>         call draw_icon
  4983 00001FED 00CA                <1>         add dl, cl
  4984 00001FEF 3A16[C329]          <1>         cmp dl, [ui_screen_width]
  4985 00001FF3 72F5                <1>         jb .loop_col
  4986 00001FF5 5A                  <1>         pop dx
  4987 00001FF6 00EE                <1>         add dh, ch
  4988 00001FF8 3A36[C429]          <1>         cmp dh, [ui_screen_height]
  4989 00001FFC 72EB                <1>         jb .loop_row
  4990 00001FFE 61                  <1>         popa
  4991 00001FFF C3                  <1>         ret
  4992                              <1> ;=============================================================================
  4993                              <1> 
  4994                              <1> ;=============================================================================
  4995                              <1> ;turnon_scrolllock ---- turn on the scroll lock key
  4996                              <1> ;input: none
  4997                              <1> ;output: none
  4998                              <1> ;=============================================================================
  4999                              <1> turnon_scrolllock:
  5000 00002000 60                  <1>         pusha
  5001 00002001 06                  <1>         push es
  5002 00002002 6A40                <1>         push word BIOS_DATA_SEG
  5003 00002004 07                  <1> 	pop es
  5004 00002005 26800E170010        <1>         or byte [es: BIOS_KEYSTAT_OFF], kbScrollMask
  5005 0000200B 07                  <1>         pop es
  5006 0000200C 61                  <1>         popa
  5007 0000200D C3                  <1>         ret
  5008                              <1> 
  5009                              <1> ;=============================================================================
  5010                              <1> ;turnoff_scrolllock ---- turn off the scroll lock key
  5011                              <1> ;input: none
  5012                              <1> ;output: none
  5013                              <1> ;=============================================================================
  5014                              <1> turnoff_scrolllock:
  5015 0000200E 60                  <1>         pusha
  5016 0000200F 06                  <1>         push es
  5017 00002010 6A40                <1>         push word BIOS_DATA_SEG
  5018 00002012 07                  <1> 	pop es
  5019 00002013 2680261700EF        <1>         and byte [es: BIOS_KEYSTAT_OFF], ~ kbScrollMask
  5020 00002019 07                  <1>         pop es
  5021 0000201A 61                  <1>         popa
  5022 0000201B C3                  <1>         ret
  5023                              <1> 
  5024                              <1> ;=============================================================================
  5025                              <1> ;lock_screen ---- lock the screen, any output will be stored in SCR_BAK_SEG
  5026                              <1> ;=============================================================================
  5027                              <1> lock_screen:
  5028 0000201C 60                  <1> 	pusha 
  5029 0000201D 803E[C829]00        <1> 	cmp byte [ui_screen_lock], 0
  5030 00002022 7518                <1> 	jnz .no_swap_page
  5031                              <1> 
  5032 00002024 A0[C729]            <1>         mov al, [ui_screen_page]
  5033 00002027 3402                <1>         xor al, 0x02
  5034 00002029 C706[C529]00B8      <1>         mov word [ui_screen_bufseg], SCR_BUF_SEG0
  5035 0000202F 08C0                <1>         or al, al
  5036 00002031 7406                <1>         jz .set_seg0
  5037 00002033 C706[C529]00BA      <1>         mov word [ui_screen_bufseg], SCR_BUF_SEG2
  5038                              <1> .set_seg0:
  5039 00002039 A2[C729]            <1>         mov [ui_screen_page], al
  5040                              <1> 
  5041                              <1> .no_swap_page:
  5042 0000203C FE06[C829]          <1> 	inc byte [ui_screen_lock]
  5043 00002040 61                  <1> 	popa
  5044 00002041 C3                  <1>         ret
  5045                              <1> 
  5046                              <1> ;=============================================================================
  5047                              <1> ;unlock_screen ---- unlock the screen, copy SCR_BAK_SEG to SCR_BUF_SEG
  5048                              <1> ;=============================================================================
  5049                              <1> unlock_screen:
  5050 00002042 60                  <1> 	pusha
  5051 00002043 FE0E[C829]          <1> 	dec byte [ui_screen_lock]
  5052 00002047 7507                <1> 	jnz .no_swap_page
  5053                              <1> 
  5054 00002049 B405                <1>         mov ah, 0x05
  5055 0000204B A0[C729]            <1>         mov al, [ui_screen_page]
  5056 0000204E CD10                <1>         int 0x10
  5057                              <1> .no_swap_page:
  5058 00002050 61                  <1> 	popa
  5059 00002051 C3                  <1>         ret
  5060                              <1> 
  5061                              <1> 
  5062                              <1> ;=============================================================================
  5063                              <1> ;<<<<<<<<<<<<<<<<<<<<<<<<< Standard Dialog functions >>>>>>>>>>>>>>>>>>>>>>>>>
  5064                              <1> ;=============================================================================
  5065                              <1> 
  5066                              <1> ;=============================================================================
  5067                              <1> ; msgbox_draw_body_proc ---- draw body proc of message box
  5068                              <1> ; input:
  5069                              <1> ;	ds:si -> the window
  5070                              <1> ; output:
  5071                              <1> ;	none
  5072                              <1> ;=============================================================================
  5073                              <1> msgbox_draw_body_proc:
  5074 00002052 60                  <1> 	pusha
  5075 00002053 89F7                <1> 	mov di, si
  5076 00002055 8B5C1C              <1> 	mov bx, [si + struc_message_box.message_attr]
  5077 00002058 BA0302              <1> 	mov dx, 0x0203
  5078 0000205B 8B741A              <1> 	mov si, [si + struc_message_box.message]
  5079 0000205E E8BB05              <1> 	call window_draw_string
  5080 00002061 61                  <1> 	popa
  5081 00002062 C3                  <1> 	ret
  5082                              <1> 
  5083                              <1> ;=============================================================================
  5084                              <1> ; msgbox_default_event_handle ---- default event handle for message box
  5085                              <1> ; input:
  5086                              <1> ;	ax    -> event
  5087                              <1> ;	ds:si -> the window
  5088                              <1> ; output:
  5089                              <1> ;	none
  5090                              <1> ;=============================================================================
  5091                              <1> msgbox_default_event_handle:
  5092 00002063 E8B507              <1> 	call window_default_event_handle
  5093 00002066 730D                <1> 	jnc .end
  5094                              <1> 
  5095 00002068 80FCF0              <1> 	cmp ah, EVTCODE_COMMAND
  5096 0000206B 7202                <1> 	jb .exit
  5097                              <1> 
  5098 0000206D F9                  <1> 	stc
  5099 0000206E C3                  <1> 	ret
  5100                              <1> 
  5101                              <1> .exit:
  5102 0000206F 89441E              <1> 	mov [si + struc_message_box.pressed_key], ax
  5103 00002072 E82007              <1> 	call window_close
  5104                              <1> .end:
  5105 00002075 F8                  <1> 	clc
  5106 00002076 C3                  <1> 	ret
  5107                              <1> 
  5108                              <1> ;=============================================================================
  5109                              <1> ; msgbox_prepare ---- prepare a message box
  5110                              <1> ; input:
  5111                              <1> ;	al    =  message attribute
  5112                              <1> ;	bx    =  window attribute
  5113                              <1> ;	ds:dx -> 2nd level pointer to title
  5114                              <1> ;	ds:si -> message
  5115                              <1> ;	ds:di -> pointer to the struc_message_box
  5116                              <1> ; output:
  5117                              <1> ;	none
  5118                              <1> ;=============================================================================
  5119                              <1> msgbox_prepare:
  5120 00002077 60                  <1> 	pusha
  5121 00002078 B92000              <1> 	mov cx, SIZE_OF_STRUC_MESSAGE_BOX
  5122 0000207B E8820E              <1> 	call clear_memory
  5123                              <1> 
  5124 0000207E 89751A              <1> 	mov [di + struc_message_box.message], si
  5125 00002081 89451C              <1> 	mov [di + struc_message_box.message_attr], ax
  5126 00002084 895D04              <1> 	mov [di + struc_window.win_attr], bx
  5127 00002087 895502              <1> 	mov [di + struc_window.title], dx
  5128                              <1> 
  5129 0000208A E8230B              <1> 	call count_lines
  5130                              <1> 
  5131 0000208D 020E[B749]          <1> 	add cl, [size.box_width]
  5132 00002091 022E[B849]          <1> 	add ch, [size.box_height]
  5133 00002095 894D08              <1> 	mov [di + struc_window.win_size], cx
  5134 00002098 87F7                <1> 	xchg si, di
  5135 0000209A E86907              <1> 	call window_center_window
  5136                              <1> 
  5137 0000209D C60406              <1> 	mov byte [si], WINFLAG_FRAMED | WINFLAG_MODAL
  5138                              <1> 
  5139 000020A0 C74414[6320]        <1> 	mov word [si + struc_window.default_event_handle], msgbox_default_event_handle
  5140 000020A5 C74416[2728]        <1> 	mov word [si + struc_window.event_handle], window_event_handle
  5141 000020AA C74418[5220]        <1> 	mov word [si + struc_window.draw_body_proc], msgbox_draw_body_proc
  5142 000020AF 61                  <1> 	popa
  5143 000020B0 C3                  <1> 	ret
  5144                              <1> 
  5145                              <1> 
  5146                              <1> ;=============================================================================
  5147                              <1> ;message_box ---- Show a message box
  5148                              <1> ;input:
  5149                              <1> ;	al = message attribute
  5150                              <1> ;	bx = window attribute
  5151                              <1> ;	ds:dx -> 2nd level pointer to title
  5152                              <1> ;	ds:si -> message
  5153                              <1> ;output:
  5154                              <1> ;	ax = user pressed key
  5155                              <1> ;=============================================================================
  5156                              <1> message_box:
  5157 000020B1 56                  <1> 	push si
  5158 000020B2 57                  <1> 	push di
  5159 000020B3 BF[912C]            <1> 	mov di, ui_tmp.tmp_msgbox
  5160 000020B6 87F7                <1> 	xchg si, di
  5161 000020B8 E84708              <1> 	call winlist_remove
  5162 000020BB 87F7                <1> 	xchg si, di
  5163 000020BD E8B7FF              <1> 	call msgbox_prepare
  5164 000020C0 87F7                <1> 	xchg si, di
  5165 000020C2 E87806              <1> 	call window_run
  5166 000020C5 8B441E              <1> 	mov ax, [si + struc_message_box.pressed_key]
  5167 000020C8 5F                  <1> 	pop di
  5168 000020C9 5E                  <1> 	pop si
  5169 000020CA C3                  <1>         ret
  5170                              <1> ;=============================================================================
  5171                              <1> 
  5172                              <1> ;=============================================================================
  5173                              <1> ;error_box ---- draw error message box.
  5174                              <1> ;input:
  5175                              <1> ;      ds:si -> error message
  5176                              <1> ;output:
  5177                              <1> ;      ax = return keycode
  5178                              <1> ;=============================================================================
  5179                              <1> error_box:
  5180 000020CB 53                  <1>         push bx
  5181 000020CC 52                  <1>         push dx
  5182 000020CD A0[D949]            <1>         mov al, [color.error_box_msg]
  5183 000020D0 8B1E[D749]          <1>         mov bx, [color.error_box_frame]
  5184 000020D4 BA[124A]            <1>         mov dx, str_idx.error
  5185 000020D7 E8D7FF              <1>         call message_box
  5186 000020DA 5A                  <1>         pop dx
  5187 000020DB 5B                  <1>         pop bx
  5188 000020DC C3                  <1>         ret
  5189                              <1> 
  5190                              <1> ;=============================================================================
  5191                              <1> ;info_box ---- draw infomation message box.
  5192                              <1> ;input:
  5193                              <1> ;      ds:si -> infomation message
  5194                              <1> ;output:
  5195                              <1> ;      ax = return keycode
  5196                              <1> ;=============================================================================
  5197                              <1> info_box:
  5198 000020DD 53                  <1>         push bx
  5199 000020DE 52                  <1>         push dx
  5200 000020DF A0[DC49]            <1>         mov al, [color.info_box_msg]
  5201 000020E2 8B1E[DA49]          <1>         mov bx, [color.info_box_frame]
  5202 000020E6 BA[164A]            <1>         mov dx, str_idx.info
  5203 000020E9 E8C5FF              <1>         call message_box
  5204 000020EC 5A                  <1>         pop dx
  5205 000020ED 5B                  <1>         pop bx
  5206 000020EE C3                  <1>         ret
  5207                              <1> 
  5208                              <1> ;=============================================================================
  5209                              <1> ; inputbox_set_cursor
  5210                              <1> ; input:
  5211                              <1> ;	ds:si -> input box
  5212                              <1> ; output:
  5213                              <1> ;	none
  5214                              <1> ;=============================================================================
  5215                              <1> inputbox_set_cursor:
  5216 000020EF 8B5424              <1> 	mov dx, [si + struc_input_box.input_area_pos]
  5217 000020F2 025427              <1> 	add dl, [si + struc_input_box.input_curp]
  5218 000020F5 2A5426              <1> 	sub dl, [si + struc_input_box.input_startp]
  5219 000020F8 E80505              <1> 	call window_set_cursor
  5220 000020FB E895FE              <1> 	call show_cursor
  5221 000020FE C3                  <1> 	ret
  5222                              <1> 	
  5223                              <1> ;=============================================================================
  5224                              <1> ; inputbox_draw_body_proc ---- draw_body_proc of input box
  5225                              <1> ; input:
  5226                              <1> ;	ds:si -> pointer to struc_input_box
  5227                              <1> ; output:
  5228                              <1> ;	none
  5229                              <1> ;=============================================================================
  5230                              <1> inputbox_draw_body_proc:
  5231 000020FF 60                  <1> 	pusha
  5232 00002100 89F7                <1> 	mov di, si
  5233 00002102 8B5C1C              <1> 	mov bx, [si + struc_input_box.message_attr]
  5234 00002105 BA0202              <1> 	mov dx, 0x0202
  5235 00002108 8B741A              <1> 	mov si, [si + struc_input_box.message]
  5236 0000210B E80E05              <1> 	call window_draw_string
  5237 0000210E 61                  <1> 	popa
  5238 0000210F E80400              <1> 	call inputbox_draw_input_area
  5239 00002112 E8DAFF              <1> 	call inputbox_set_cursor
  5240 00002115 C3                  <1> 	ret
  5241                              <1> 
  5242                              <1> ;=============================================================================
  5243                              <1> ; inputbox_draw_input_area ---- draw the input area of a input box
  5244                              <1> ; input:
  5245                              <1> ;	ds:si -> pointer to struc_input_box
  5246                              <1> ; output:
  5247                              <1> ;	none
  5248                              <1> ;=============================================================================
  5249                              <1> inputbox_draw_input_area:
  5250 00002116 60                  <1> 	pusha
  5251 00002117 0FB64C23            <1> 	movzx cx, byte [si + struc_input_box.input_area_len]
  5252 0000211B 8B5424              <1> 	mov dx, [si + struc_input_box.input_area_pos]
  5253 0000211E B020                <1> 	mov al, 0x20
  5254 00002120 8A5C1E              <1> 	mov bl, [si + struc_input_box.input_attr]
  5255 00002123 E8E804              <1> 	call window_draw_char
  5256                              <1> 
  5257 00002126 0FB64426            <1> 	movzx ax, byte [si + struc_input_box.input_startp]
  5258 0000212A 8B7C20              <1> 	mov di, [si + struc_input_box.input_buf]
  5259 0000212D 01C7                <1> 	add di, ax
  5260 0000212F 8A7C1F              <1> 	mov bh, [si + struc_input_box.input_type]
  5261                              <1> 
  5262                              <1> .loop_draw:
  5263 00002132 8A05                <1> 	mov al, [di]
  5264 00002134 08C0                <1> 	or al, al
  5265 00002136 7412                <1> 	jz .end_draw
  5266 00002138 08FF                <1> 	or bh, bh
  5267 0000213A 7402                <1> 	jz .draw_normal
  5268 0000213C B02A                <1> 	mov al, '*'
  5269                              <1> .draw_normal:
  5270 0000213E 51                  <1> 	push cx
  5271 0000213F B101                <1> 	mov cl, 1
  5272 00002141 E8CA04              <1> 	call window_draw_char
  5273 00002144 59                  <1> 	pop cx
  5274 00002145 FEC2                <1> 	inc dl
  5275 00002147 47                  <1> 	inc di
  5276 00002148 E2E8                <1> 	loop .loop_draw
  5277                              <1> 
  5278                              <1> .end_draw:
  5279 0000214A 61                  <1> 	popa
  5280 0000214B C3                  <1> 	ret
  5281                              <1> 
  5282                              <1> 
  5283                              <1> ;=============================================================================
  5284                              <1> ; inputbox_get_strlen 
  5285                              <1> ; input:
  5286                              <1> ;	ds:si -> input box
  5287                              <1> ; output:
  5288                              <1> ;	cx = input buf strlen
  5289                              <1> ;=============================================================================
  5290                              <1> inputbox_get_strlen:
  5291 0000214C 56                  <1> 	push si
  5292 0000214D 8B7420              <1> 	mov si, [si + struc_input_box.input_buf]
  5293 00002150 E89109              <1> 	call strlen
  5294 00002153 5E                  <1> 	pop si
  5295 00002154 C3                  <1> 	ret
  5296                              <1> 
  5297                              <1> ;=============================================================================
  5298                              <1> ; inputbox_delete_char
  5299                              <1> ; input:
  5300                              <1> ;	ds:si -> input box
  5301                              <1> ;	cl = position to be deleted
  5302                              <1> ; output:
  5303                              <1> ;	none
  5304                              <1> ;=============================================================================
  5305                              <1> inputbox_delete_char:
  5306 00002155 60                  <1> 	pusha
  5307 00002156 30ED                <1> 	xor ch, ch
  5308 00002158 8B7C20              <1> 	mov di, [si + struc_input_box.input_buf]
  5309 0000215B 01CF                <1> 	add di, cx
  5310 0000215D 89FE                <1> 	mov si, di
  5311 0000215F 803C00              <1> 	cmp byte [si], 0
  5312 00002162 7406                <1> 	jz .end
  5313 00002164 46                  <1> 	inc si
  5314 00002165 B1FF                <1> 	mov cl, 255
  5315 00002167 E8B909              <1> 	call strncpy
  5316                              <1> .end:
  5317 0000216A 61                  <1> 	popa
  5318 0000216B C3                  <1> 	ret
  5319                              <1> 
  5320                              <1> ;=============================================================================
  5321                              <1> ; inputbox_post_input
  5322                              <1> ;=============================================================================
  5323                              <1> inputbox_post_input:
  5324 0000216C 8A4427              <1> 	mov al, [si + struc_input_box.input_curp]
  5325 0000216F 8A4C26              <1> 	mov cl, [si + struc_input_box.input_startp]
  5326 00002172 38C1                <1> 	cmp cl, al
  5327 00002174 7205                <1> 	jb .below_cur
  5328 00002176 884426              <1> 	mov [si + struc_input_box.input_startp], al
  5329 00002179 EB0D                <1> 	jmp short .end
  5330                              <1> 
  5331                              <1> .below_cur:
  5332 0000217B 28C8                <1> 	sub al, cl
  5333 0000217D 3A4423              <1> 	cmp al, [si + struc_input_box.input_area_len]
  5334 00002180 7606                <1> 	jbe .end
  5335 00002182 2A4423              <1> 	sub al, [si + struc_input_box.input_area_len]
  5336 00002185 004426              <1> 	add [si + struc_input_box.input_startp], al
  5337                              <1> .end:
  5338 00002188 C3                  <1> 	ret
  5339                              <1> 
  5340                              <1> ;=============================================================================
  5341                              <1> ; inputbox_backspace 
  5342                              <1> ;=============================================================================
  5343                              <1> inputbox_backspace:
  5344 00002189 E8C0FF              <1> 	call inputbox_get_strlen
  5345 0000218C 09C9                <1> 	or cx, cx
  5346 0000218E 7412                <1> 	jz .end
  5347 00002190 8A4C27              <1> 	mov cl, [si + struc_input_box.input_curp]
  5348 00002193 08C9                <1> 	or cl, cl
  5349 00002195 740B                <1> 	jz .end
  5350 00002197 FEC9                <1> 	dec cl
  5351 00002199 884C27              <1> 	mov [si + struc_input_box.input_curp], cl
  5352 0000219C E8B6FF              <1> 	call inputbox_delete_char
  5353 0000219F E8CAFF              <1> 	call inputbox_post_input
  5354                              <1> .end:
  5355 000021A2 C3                  <1> 	ret
  5356                              <1> 
  5357                              <1> ;=============================================================================
  5358                              <1> ; inputbox_delete
  5359                              <1> ;=============================================================================
  5360                              <1> inputbox_delete:
  5361 000021A3 E8A6FF              <1> 	call inputbox_get_strlen
  5362 000021A6 09C9                <1> 	or cx, cx
  5363 000021A8 7409                <1> 	jz .end
  5364 000021AA 8A4C27              <1> 	mov cl, [si + struc_input_box.input_curp]
  5365 000021AD E8A5FF              <1> 	call inputbox_delete_char
  5366 000021B0 E8B9FF              <1> 	call inputbox_post_input
  5367                              <1> .end:
  5368 000021B3 C3                  <1> 	ret
  5369                              <1> 
  5370                              <1> ;=============================================================================
  5371                              <1> ; inputbox_right_arrow
  5372                              <1> ;=============================================================================
  5373                              <1> inputbox_right_arrow:
  5374 000021B4 E895FF              <1> 	call inputbox_get_strlen
  5375 000021B7 3A4C27              <1> 	cmp cl, [si + struc_input_box.input_curp]
  5376 000021BA 7606                <1> 	jbe .end
  5377                              <1> 
  5378 000021BC FE4427              <1> 	inc byte [si + struc_input_box.input_curp]
  5379 000021BF E8AAFF              <1> 	call inputbox_post_input
  5380                              <1> .end:
  5381 000021C2 C3                  <1> 	ret
  5382                              <1> 
  5383                              <1> ;=============================================================================
  5384                              <1> ; inputbox_left_arrow
  5385                              <1> ;=============================================================================
  5386                              <1> inputbox_left_arrow:
  5387 000021C3 807C2700            <1> 	cmp byte [si + struc_input_box.input_curp], 0
  5388 000021C7 7406                <1> 	jz .end
  5389                              <1> 
  5390 000021C9 FE4C27              <1> 	dec byte [si + struc_input_box.input_curp]
  5391 000021CC E89DFF              <1> 	call inputbox_post_input
  5392                              <1> .end:
  5393 000021CF C3                  <1> 	ret
  5394                              <1> 
  5395                              <1> ;=============================================================================
  5396                              <1> ; inputbox_end_key
  5397                              <1> ;=============================================================================
  5398                              <1> inputbox_end_key:
  5399 000021D0 E879FF              <1> 	call inputbox_get_strlen
  5400 000021D3 884C27              <1> 	mov [si + struc_input_box.input_curp], cl
  5401 000021D6 E893FF              <1> 	call inputbox_post_input
  5402 000021D9 C3                  <1> 	ret
  5403                              <1> 
  5404                              <1> ;=============================================================================
  5405                              <1> ; inputbox_home_key
  5406                              <1> ;=============================================================================
  5407                              <1> inputbox_home_key:
  5408 000021DA C6442700            <1> 	mov byte [si + struc_input_box.input_curp], 0
  5409 000021DE E88BFF              <1> 	call inputbox_post_input
  5410 000021E1 C3                  <1> 	ret
  5411                              <1> 
  5412                              <1> 
  5413                              <1> ;=============================================================================
  5414                              <1> ; inputbox_cancel
  5415                              <1> ;=============================================================================
  5416                              <1> inputbox_cancel:
  5417 000021E2 C6442801            <1> 	mov byte [si + struc_input_box.return_val], 1
  5418 000021E6 E8A0FD              <1> 	call hide_cursor
  5419 000021E9 C3                  <1> 	ret
  5420                              <1> 
  5421                              <1> ;=============================================================================
  5422                              <1> ; inputbox_enter
  5423                              <1> ;=============================================================================
  5424                              <1> inputbox_enter:
  5425 000021EA C6442800            <1> 	mov byte [si + struc_input_box.return_val], 0
  5426 000021EE E898FD              <1> 	call hide_cursor
  5427 000021F1 C3                  <1> 	ret
  5428                              <1> 
  5429                              <1> ;=============================================================================
  5430                              <1> ; inputbox_insert_char
  5431                              <1> ; input:
  5432                              <1> ;	al = char
  5433                              <1> ;	cl = position
  5434                              <1> ;	ds:si -> input box
  5435                              <1> ;=============================================================================
  5436                              <1> inputbox_insert_char:
  5437 000021F2 60                  <1> 	pusha
  5438 000021F3 30ED                <1> 	xor ch, ch
  5439 000021F5 51                  <1> 	push cx
  5440 000021F6 E853FF              <1> 	call inputbox_get_strlen
  5441 000021F9 8B7420              <1> 	mov si, [si + struc_input_box.input_buf]
  5442 000021FC 01CE                <1> 	add si, cx
  5443 000021FE 5A                  <1> 	pop dx
  5444 000021FF 29D1                <1> 	sub cx, dx
  5445 00002201 09C9                <1> 	or cx, cx
  5446 00002203 7408                <1> 	jz .no_move
  5447                              <1> 
  5448                              <1> .loop_move:
  5449 00002205 8A24                <1> 	mov ah, [si]
  5450 00002207 886401              <1> 	mov [si + 1], ah
  5451 0000220A 4E                  <1> 	dec si
  5452 0000220B E2F8                <1> 	loop .loop_move
  5453                              <1> 
  5454                              <1> .no_move:
  5455 0000220D 8A24                <1> 	mov ah, [si]
  5456 0000220F 8904                <1> 	mov [si], ax
  5457 00002211 61                  <1> 	popa
  5458 00002212 C3                  <1> 	ret
  5459                              <1> 	
  5460                              <1> ;=============================================================================
  5461                              <1> ; inputbox_default_event_handle
  5462                              <1> ; input:
  5463                              <1> ;	ax = event code
  5464                              <1> ;	ds:si -> input box
  5465                              <1> ; output:
  5466                              <1> ;	none
  5467                              <1> ;=============================================================================
  5468                              <1> inputbox_default_event_handle:
  5469 00002213 E80506              <1> 	call window_default_event_handle
  5470 00002216 732C                <1> 	jnc .end
  5471 00002218 08C0                <1> 	or al, al
  5472 0000221A 7427                <1> 	jz .no_action
  5473 0000221C 80FCF0              <1> 	cmp ah, EVTCODE_COMMAND
  5474 0000221F 7322                <1> 	jae .no_action
  5475 00002221 3C20                <1> 	cmp al, 0x20
  5476 00002223 721E                <1> 	jb .no_action
  5477 00002225 3CE0                <1> 	cmp al, 0xE0
  5478 00002227 741A                <1> 	je .no_action
  5479                              <1> 
  5480 00002229 E820FF              <1> 	call inputbox_get_strlen
  5481 0000222C 2A4C22              <1> 	sub cl, [si + struc_input_box.input_buf_len]
  5482 0000222F 08C9                <1> 	or cl, cl
  5483 00002231 7411                <1> 	jz .end
  5484                              <1> 
  5485 00002233 8A4C27              <1> 	mov cl, [si + struc_input_box.input_curp]
  5486 00002236 E8B9FF              <1> 	call inputbox_insert_char
  5487 00002239 FE4427              <1> 	inc byte [si + struc_input_box.input_curp]
  5488 0000223C E82DFF              <1> 	call inputbox_post_input
  5489 0000223F E84903              <1> 	call window_draw_body
  5490 00002242 C3                  <1> 	ret
  5491                              <1> 
  5492                              <1> .no_action:
  5493 00002243 F9                  <1> 	stc
  5494                              <1> .end:
  5495 00002244 C3                  <1> 	ret
  5496                              <1> 
  5497                              <1> ;=============================================================================
  5498                              <1> ; inputbox_prepare
  5499                              <1> ; input:
  5500                              <1> ;	ah = input method ( 0 = normal, 1 = security )
  5501                              <1> ;	al = message attribute
  5502                              <1> ;	bh = title attribute
  5503                              <1> ;	bl = frame attribute
  5504                              <1> ;	ch = input area length
  5505                              <1> ;	cl = max input length
  5506                              <1> ;	ds:si -> message ( no more than one line )
  5507                              <1> ;	ds:di -> pointer to struc_input_box
  5508                              <1> ;	ds:dx -> buffer to store input string
  5509                              <1> ;=============================================================================
  5510                              <1> inputbox_prepare:
  5511 00002245 60                  <1> 	pusha
  5512 00002246 08ED                <1> 	or ch, ch
  5513 00002248 7502                <1> 	jnz .go_prepare
  5514 0000224A 88CD                <1> 	mov ch, cl
  5515                              <1> .go_prepare:
  5516                              <1> 
  5517 0000224C 51                  <1> 	push cx
  5518 0000224D B92900              <1> 	mov cx, SIZE_OF_STRUC_INPUT_BOX
  5519 00002250 E8AD0C              <1> 	call clear_memory
  5520 00002253 59                  <1> 	pop cx
  5521                              <1> 
  5522 00002254 C60506              <1> 	mov byte [di], WINFLAG_FRAMED | WINFLAG_MODAL		; win flag
  5523 00002257 C74502[184A]        <1> 	mov word [di + struc_window.title], str_idx.input	; win title
  5524 0000225C 895D04              <1> 	mov [di + struc_window.win_attr], bx			; win attr
  5525 0000225F 89751A              <1> 	mov [di + struc_input_box.message], si
  5526 00002262 88451C              <1> 	mov [di + struc_input_box.message_attr], al
  5527 00002265 B00F                <1> 	mov al, 0x0F
  5528 00002267 89451E              <1> 	mov [di + struc_input_box.input_attr], ax
  5529 0000226A 895520              <1> 	mov [di + struc_input_box.input_buf], dx
  5530 0000226D 894D22              <1> 	mov [di + struc_input_box.input_buf_len], cx		; input buf 
  5531                              <1> 								; and area len
  5532                              <1> 
  5533 00002270 8B1E[B749]          <1> 	mov bx, [size.box_width]
  5534 00002274 FEC7                <1> 	inc bh
  5535 00002276 00EB                <1> 	add bl, ch
  5536                              <1> 
  5537 00002278 E86908              <1> 	call strlen
  5538 0000227B 00CB                <1> 	add bl, cl
  5539 0000227D 895D08              <1> 	mov [di + struc_window.win_size], bx			; win size
  5540 00002280 894D24              <1> 	mov [di + struc_input_box.input_area_pos],cx		; input area pos
  5541 00002283 8145240202          <1> 	add word [di + struc_input_box.input_area_pos], 0x0202
  5542                              <1> 
  5543 00002288 C745100E00          <1> 	mov word [di + struc_window.act_num], INPUTBOX_ACTION_NUM
  5544 0000228D C74512[0F2A]        <1> 	mov word [di + struc_window.act_table], inputbox_action_table
  5545 00002292 C74514[1322]        <1> 	mov word [di + struc_window.default_event_handle], inputbox_default_event_handle
  5546 00002297 C74516[2728]        <1> 	mov word [di + struc_window.event_handle], window_event_handle
  5547 0000229C C74518[FF20]        <1> 	mov word [di + struc_window.draw_body_proc], inputbox_draw_body_proc
  5548                              <1> 
  5549 000022A1 FE4528              <1> 	inc byte [di + struc_input_box.return_val]
  5550                              <1> 
  5551 000022A4 89FE                <1> 	mov si, di
  5552 000022A6 E85D05              <1> 	call window_center_window
  5553 000022A9 61                  <1> 	popa
  5554 000022AA C3                  <1> 	ret
  5555                              <1> 
  5556                              <1> ;=============================================================================
  5557                              <1> ;input_box ---- draw a input box and input a string
  5558                              <1> ;input:
  5559                              <1> ;      ah = input method ( 0 = normal, 1 = security )
  5560                              <1> ;      al = message attribute
  5561                              <1> ;      bh = title attribute
  5562                              <1> ;      bl = frame attribute
  5563                              <1> ;      ch = input area length
  5564                              <1> ;      cl = max input length
  5565                              <1> ;      ds:si -> message ( no more than one line )
  5566                              <1> ;      ds:di -> buffer to store input text
  5567                              <1> ;      ds:dx -> parent window
  5568                              <1> ;output:
  5569                              <1> ;      cf = 0 , ah = 0 ok, ch = number of inputed character
  5570                              <1> ;      cf = 1 , ah != 0 cancel, ch = 0
  5571                              <1> ;=============================================================================
  5572                              <1> input_box:
  5573 000022AB 56                  <1> 	push si
  5574 000022AC 57                  <1> 	push di
  5575 000022AD 57                  <1> 	push di
  5576 000022AE 52                  <1> 	push dx
  5577                              <1> 
  5578 000022AF BA[052D]            <1> 	mov dx, ui_tmp.tmp_buf
  5579 000022B2 BF[B12C]            <1> 	mov di, ui_tmp.tmp_inputbox
  5580 000022B5 87F7                <1> 	xchg si, di
  5581 000022B7 E84806              <1> 	call winlist_remove
  5582 000022BA 87F7                <1> 	xchg si, di
  5583 000022BC E886FF              <1> 	call inputbox_prepare
  5584                              <1> 
  5585 000022BF 8F450A              <1> 	pop word [di + struc_window.parent_win]
  5586 000022C2 87FA                <1> 	xchg di, dx
  5587 000022C4 5E                  <1> 	pop si
  5588                              <1> 
  5589 000022C5 06                  <1> 	push es
  5590 000022C6 1E                  <1> 	push ds
  5591 000022C7 07                  <1> 	pop es
  5592                              <1> 
  5593 000022C8 56                  <1> 	push si
  5594 000022C9 57                  <1> 	push di
  5595                              <1> 
  5596 000022CA E87008              <1> 	call strcpy
  5597                              <1> 	
  5598 000022CD 89D6                <1> 	mov si, dx
  5599 000022CF E86B04              <1> 	call window_run
  5600 000022D2 8A6428              <1> 	mov ah, [si + struc_input_box.return_val]
  5601 000022D5 E874FE              <1> 	call inputbox_get_strlen
  5602 000022D8 88CD                <1> 	mov ch, cl
  5603 000022DA 8A4C22              <1> 	mov cl, [si + struc_input_box.input_buf_len]
  5604 000022DD 08E4                <1> 	or ah, ah
  5605                              <1> 
  5606 000022DF 5E                  <1> 	pop si
  5607 000022E0 5F                  <1> 	pop di
  5608 000022E1 7403                <1> 	jz .ok
  5609 000022E3 F9                  <1> 	stc
  5610 000022E4 EB04                <1> 	jmp short .end
  5611                              <1> .ok:
  5612 000022E6 E85408              <1> 	call strcpy
  5613 000022E9 F8                  <1> 	clc
  5614                              <1> .end:
  5615 000022EA 07                  <1> 	pop es
  5616 000022EB 5F                  <1> 	pop di
  5617 000022EC 5E                  <1> 	pop si
  5618 000022ED C3                  <1> 	ret
  5619                              <1> 
  5620                              <1> ;=============================================================================
  5621                              <1> ;input_password ---- input a password
  5622                              <1> ;input:
  5623                              <1> ;      cl = max password length
  5624                              <1> ;      ds:si -> message string
  5625                              <1> ;output:
  5626                              <1> ;      cf = 0 success, ax:dx = password
  5627                              <1> ;      cf = 1 cancel
  5628                              <1> ;=============================================================================
  5629                              <1> input_password:
  5630 000022EE 53                  <1>         push bx
  5631 000022EF 51                  <1>         push cx
  5632                              <1>         
  5633 000022F0 B401                <1>         mov ah, 1
  5634 000022F2 A0[D649]            <1>         mov al, [color.input_box_msg]
  5635 000022F5 8B1E[D449]          <1>         mov bx, [color.input_box_frame]
  5636 000022F9 88CD                <1>         mov ch, cl
  5637 000022FB 31D2                <1>         xor dx, dx
  5638 000022FD BF[052E]            <1>         mov di, ui_tmp.tmp_buf1
  5639                              <1> 
  5640 00002300 C60500              <1>         mov byte [di], 0
  5641                              <1> 
  5642 00002303 E8A5FF              <1>         call input_box
  5643 00002306 7209                <1>         jc .cancel_input
  5644                              <1> 
  5645 00002308 89FE                <1>         mov si, di
  5646 0000230A 0FB6CD              <1>         movzx cx, ch
  5647 0000230D E83A08              <1>         call calc_password
  5648 00002310 F8                  <1>         clc
  5649                              <1> 
  5650                              <1> .cancel_input:
  5651 00002311 59                  <1>         pop cx
  5652 00002312 5B                  <1>         pop bx
  5653 00002313 C3                  <1>         ret
  5654                              <1> ;=============================================================================
  5655                              <1> 
  5656                              <1> ;=============================================================================
  5657                              <1> ; menubox_adjust_geometry ---- adjust the size and position of the menu box
  5658                              <1> ; input:
  5659                              <1> ;	ds:si -> pointer to struc_menu_box
  5660                              <1> ; output:
  5661                              <1> ;	none
  5662                              <1> ;=============================================================================
  5663                              <1> menubox_adjust_geometry:
  5664 00002314 E80400              <1> 	call menubox_adjust_menu_area
  5665 00002317 E86E00              <1> 	call menubox_adjust_win_width
  5666 0000231A C3                  <1> 	ret
  5667                              <1> 
  5668                              <1> ;=============================================================================
  5669                              <1> ; menubox_adjust_menu_area ---- adjust the size and position of the menu area
  5670                              <1> ; input:
  5671                              <1> ;	ds:si -> pointer to struc_menu_box
  5672                              <1> ; output:
  5673                              <1> ;	none
  5674                              <1> ;=============================================================================
  5675                              <1> menubox_adjust_menu_area:
  5676 0000231B 60                  <1> 	pusha
  5677                              <1> 
  5678                              <1> ;adjust menu area position
  5679 0000231C B90101              <1> 	mov cx, 0x0101
  5680 0000231F 8A04                <1> 	mov al, [si]
  5681 00002321 A840                <1> 	test al, MENUFLAG_SINK_UPPER
  5682 00002323 7402                <1> 	jz .no_sink_upper
  5683 00002325 FEC5                <1> 	inc ch
  5684                              <1> .no_sink_upper:
  5685 00002327 837C1A00            <1> 	cmp word [si + struc_menu_box.menu_header], 0
  5686 0000232B 7402                <1> 	jz .no_header
  5687 0000232D FEC5                <1> 	inc ch
  5688                              <1> .no_header:
  5689 0000232F A820                <1> 	test al, MENUFLAG_SINK_WIDTH
  5690 00002331 7402                <1> 	jz .no_sink_width
  5691 00002333 FEC1                <1> 	inc cl
  5692                              <1> .no_sink_width:
  5693 00002335 894C21              <1> 	mov [si + struc_menu_box.menu_area_pos], cx
  5694                              <1> 
  5695                              <1> ;adjust menu area size
  5696 00002338 8B5408              <1> 	mov dx, [si + struc_window.win_size]
  5697 0000233B 28EE                <1> 	sub dh, ch
  5698 0000233D FECE                <1> 	dec dh
  5699 0000233F A880                <1> 	test al, MENUFLAG_SINK_BOTTOM
  5700 00002341 7402                <1> 	jz .no_sink_bottom
  5701 00002343 FECE                <1> 	dec dh
  5702                              <1> .no_sink_bottom:
  5703                              <1> 
  5704 00002345 30D2                <1> 	xor dl, dl
  5705 00002347 0FB64C26            <1> 	movzx cx, byte [si + struc_menu_box.items_num]
  5706 0000234B 09C9                <1> 	or cx, cx
  5707 0000234D 741D                <1> 	jz .end_calc
  5708 0000234F 8B5C29              <1> 	mov bx, [si + struc_menu_box.item_str_proc]
  5709 00002352 09DB                <1> 	or bx, bx
  5710 00002354 7416                <1> 	jz .end_calc
  5711                              <1> 
  5712                              <1> .loop_calc_item_width:
  5713 00002356 56                  <1> 	push si
  5714 00002357 53                  <1> 	push bx
  5715 00002358 51                  <1> 	push cx
  5716 00002359 49                  <1> 	dec cx
  5717                              <1> 
  5718 0000235A 52                  <1> 	push dx
  5719 0000235B FFD3                <1> 	call bx
  5720 0000235D 5A                  <1> 	pop dx
  5721                              <1> 
  5722 0000235E E89607              <1> 	call strlen_hl
  5723 00002361 38CA                <1> 	cmp dl, cl
  5724 00002363 7302                <1> 	jae .cont_calc
  5725 00002365 88CA                <1> 	mov dl, cl
  5726                              <1> .cont_calc:
  5727 00002367 59                  <1> 	pop cx
  5728 00002368 5B                  <1> 	pop bx
  5729 00002369 5E                  <1> 	pop si
  5730 0000236A E2EA                <1> 	loop .loop_calc_item_width
  5731                              <1> 
  5732                              <1> .end_calc:
  5733                              <1> 
  5734 0000236C 56                  <1> 	push si
  5735 0000236D 8B741A              <1> 	mov si, [si + struc_menu_box.menu_header]
  5736 00002370 09F6                <1> 	or si, si
  5737 00002372 740B                <1> 	jz .no_header_len
  5738 00002374 8B34                <1> 	mov si, [si]
  5739 00002376 E87E07              <1> 	call strlen_hl
  5740 00002379 38CA                <1> 	cmp dl, cl
  5741 0000237B 7302                <1> 	jae .header_short
  5742 0000237D 88CA                <1> 	mov dl, cl
  5743                              <1> .header_short:
  5744                              <1> .no_header_len:
  5745 0000237F 80C202              <1> 	add dl, 2
  5746 00002382 5E                  <1> 	pop si
  5747 00002383 895423              <1> 	mov [si + struc_menu_box.menu_area_size], dx
  5748                              <1> 
  5749 00002386 61                  <1> 	popa
  5750 00002387 C3                  <1> 	ret
  5751                              <1> 
  5752                              <1> 
  5753                              <1> ;=============================================================================
  5754                              <1> ; menubox_adjust_win_width ---- adjust the width the menu window. 
  5755                              <1> ; input:
  5756                              <1> ;	ds:si -> pointer to struc_menu_box
  5757                              <1> ; output:
  5758                              <1> ;	none
  5759                              <1> ;=============================================================================
  5760                              <1> menubox_adjust_win_width:
  5761 00002388 60                  <1> 	pusha
  5762 00002389 8A04                <1> 	mov al, [si]
  5763 0000238B 8B5C23              <1> 	mov bx, [si + struc_menu_box.menu_area_size]
  5764                              <1> 
  5765                              <1> ; calculate window width
  5766 0000238E 80C302              <1> 	add bl, 2
  5767                              <1> 
  5768 00002391 A820                <1> 	test al, MENUFLAG_SINK_WIDTH
  5769 00002393 7403                <1> 	jz .no_sink_width
  5770 00002395 80C302              <1> 	add bl, 2
  5771                              <1> .no_sink_width:
  5772 00002398 A810                <1> 	test al, MENUFLAG_SCROLLBAR
  5773 0000239A 7402                <1> 	jz .no_scrollbar
  5774 0000239C FEC3                <1> 	inc bl
  5775                              <1> .no_scrollbar:
  5776 0000239E 885C08              <1> 	mov [si + struc_window.win_size], bl
  5777 000023A1 8A0E[C329]          <1> 	mov cl, [ui_screen_width]
  5778 000023A5 28D9                <1> 	sub cl, bl
  5779 000023A7 80E902              <1> 	sub cl, 2
  5780                              <1> 
  5781 000023AA 384C06              <1> 	cmp [si + struc_window.win_pos], cl
  5782 000023AD 7603                <1> 	jbe .no_adjust_pos
  5783 000023AF 884C06              <1> 	mov [si + struc_window.win_pos], cl
  5784                              <1> .no_adjust_pos:
  5785 000023B2 61                  <1> 	popa
  5786 000023B3 C3                  <1> 	ret
  5787                              <1> 
  5788                              <1> ;=============================================================================
  5789                              <1> ; menubox_draw_body_proc ---- draw the window body of a menu box
  5790                              <1> ; input:
  5791                              <1> ;	ds:si -> pointer to struc_menu_box
  5792                              <1> ; output:
  5793                              <1> ;	none
  5794                              <1> ;=============================================================================
  5795                              <1> menubox_draw_body_proc:
  5796 000023B4 60                  <1> 	pusha
  5797 000023B5 E82700              <1> 	call menubox_draw_menu
  5798 000023B8 837C1A00            <1> 	cmp word [si + struc_menu_box.menu_header], 0
  5799 000023BC 7403                <1> 	jz .no_header
  5800 000023BE E87D00              <1> 	call menubox_draw_header
  5801                              <1> .no_header:
  5802 000023C1 F60410              <1> 	test byte [si], MENUFLAG_SCROLLBAR
  5803 000023C4 7403                <1> 	jz .no_scrollbar
  5804 000023C6 E80200              <1> 	call menubox_draw_scrollbar
  5805                              <1> .no_scrollbar:
  5806 000023C9 61                  <1> 	popa
  5807 000023CA C3                  <1> 	ret
  5808                              <1> 
  5809                              <1> 
  5810                              <1> ;=============================================================================
  5811                              <1> ; menubox_draw_scrollbar ---- draw the scrollbar
  5812                              <1> ; input:
  5813                              <1> ;	ds:si -> pointer to struc_menu_box
  5814                              <1> ; output:
  5815                              <1> ;	none
  5816                              <1> ;=============================================================================
  5817                              <1> menubox_draw_scrollbar:
  5818 000023CB 8B4426              <1> 	mov ax, [si + struc_menu_box.items_num]
  5819 000023CE 8A5C25              <1> 	mov bl, [si + struc_menu_box.scrollbar_attr]
  5820 000023D1 8B4C21              <1> 	mov cx, [si + struc_menu_box.menu_area_pos]
  5821 000023D4 8B5423              <1> 	mov dx, [si + struc_menu_box.menu_area_size]
  5822 000023D7 00D1                <1> 	add cl, dl
  5823 000023D9 30D2                <1> 	xor dl, dl
  5824 000023DB E84C02              <1> 	call window_draw_scrollbar
  5825 000023DE C3                  <1> 	ret
  5826                              <1> 
  5827                              <1> ;=============================================================================
  5828                              <1> ; menubox_draw_menu ---- draw the menu area
  5829                              <1> ; input:
  5830                              <1> ;	ds:si -> pointer to struc_menu_box
  5831                              <1> ; output:
  5832                              <1> ;	none
  5833                              <1> ;=============================================================================
  5834                              <1> menubox_draw_menu:
  5835 000023DF 60                  <1> 	pusha
  5836 000023E0 8B4C21              <1> 	mov cx, [si + struc_menu_box.menu_area_pos]
  5837 000023E3 8B5423              <1> 	mov dx, [si + struc_menu_box.menu_area_size]
  5838 000023E6 52                  <1> 	push dx
  5839 000023E7 51                  <1> 	push cx
  5840 000023E8 034C06              <1> 	add cx, [si + struc_window.win_pos]
  5841 000023EB 01CA                <1> 	add dx, cx
  5842                              <1> 
  5843 000023ED 81EA0101            <1> 	sub dx, 0x0101
  5844 000023F1 8A7C1D              <1> 	mov bh, [si + struc_menu_box.menu_norm_attr]
  5845 000023F4 E892F9              <1> 	call clear_screen
  5846                              <1> 
  5847 000023F7 5A                  <1> 	pop dx
  5848 000023F8 58                  <1> 	pop ax
  5849                              <1> 
  5850 000023F9 0FB64C28            <1> 	movzx cx, [si + struc_menu_box.first_visible_item]
  5851 000023FD 807C2600            <1> 	cmp byte [si + struc_menu_box.items_num], 0
  5852 00002401 7439                <1> 	je .end
  5853                              <1> 
  5854 00002403 89F7                <1> 	mov di, si
  5855                              <1> 
  5856                              <1> .loop_draw_item:
  5857 00002405 3A4C27              <1> 	cmp cl, [si + struc_menu_box.focus_item]
  5858 00002408 7405                <1> 	je .focused
  5859 0000240A 8B5C1D              <1> 	mov bx, [si + struc_menu_box.menu_norm_attr]
  5860 0000240D EB03                <1> 	jmp short .draw_item
  5861                              <1> .focused:
  5862 0000240F 8B5C1F              <1> 	mov bx, [si + struc_menu_box.menu_focus_attr]
  5863                              <1> .draw_item:
  5864 00002412 60                  <1> 	pusha
  5865 00002413 51                  <1> 	push cx
  5866 00002414 88C1                <1> 	mov cl, al
  5867 00002416 B020                <1> 	mov al, ' '
  5868 00002418 E8F301              <1> 	call window_draw_char
  5869 0000241B 59                  <1> 	pop cx
  5870 0000241C FEC2                <1> 	inc dl
  5871 0000241E 53                  <1> 	push bx
  5872 0000241F 52                  <1> 	push dx
  5873 00002420 57                  <1> 	push di
  5874 00002421 FF5429              <1> 	call word [si + struc_menu_box.item_str_proc]
  5875 00002424 5F                  <1> 	pop di
  5876 00002425 5A                  <1> 	pop dx
  5877 00002426 5B                  <1> 	pop bx
  5878 00002427 E8F201              <1> 	call window_draw_string
  5879 0000242A 61                  <1> 	popa
  5880 0000242B FEC6                <1> 	inc dh
  5881 0000242D FEC1                <1> 	inc cl
  5882 0000242F FECC                <1> 	dec ah
  5883 00002431 3A4C26              <1> 	cmp cl, [si + struc_menu_box.items_num]
  5884 00002434 7306                <1> 	jae .end
  5885 00002436 08E4                <1> 	or ah, ah
  5886 00002438 7402                <1> 	jz .end
  5887 0000243A EBC9                <1> 	jmp short .loop_draw_item
  5888                              <1> .end:
  5889 0000243C 61                  <1> 	popa
  5890 0000243D C3                  <1> 	ret
  5891                              <1> 
  5892                              <1> ;=============================================================================
  5893                              <1> ; menubox_draw_header ---- draw the menu header
  5894                              <1> ; input:
  5895                              <1> ;	ds:si -> pointer to struc_menu_box
  5896                              <1> ; output:
  5897                              <1> ;	none
  5898                              <1> ;=============================================================================
  5899                              <1> menubox_draw_header:
  5900 0000243E 60                  <1> 	pusha
  5901 0000243F 8B5C1C              <1> 	mov bx, [si + struc_menu_box.menu_header_attr]
  5902 00002442 8B5421              <1> 	mov dx, [si + struc_menu_box.menu_area_pos]
  5903 00002445 FECE                <1> 	dec dh
  5904 00002447 0FB64C23            <1> 	movzx cx, byte [si + struc_menu_box.menu_area_size]
  5905 0000244B B020                <1> 	mov al, ' '
  5906 0000244D F60410              <1> 	test byte [si], MENUFLAG_SCROLLBAR
  5907 00002450 7402                <1> 	jz .no_scrollbar
  5908 00002452 FEC1                <1> 	inc cl
  5909                              <1> .no_scrollbar:
  5910 00002454 E8B701              <1> 	call window_draw_char
  5911 00002457 89F7                <1> 	mov di, si
  5912 00002459 8B741A              <1> 	mov si, [si + struc_menu_box.menu_header]
  5913 0000245C 8B34                <1> 	mov si, [si]
  5914 0000245E FEC2                <1> 	inc dl
  5915 00002460 E8B901              <1> 	call window_draw_string
  5916 00002463 61                  <1> 	popa
  5917 00002464 C3                  <1> 	ret
  5918                              <1> 
  5919                              <1> ;=============================================================================
  5920                              <1> ; menubox_do_focus ---- do the focused menu item, get the pointer of item action
  5921                              <1> ;                    from action_table, then call window_do_action to do it.
  5922                              <1> ; input:
  5923                              <1> ;	ds:si -> pointer to struc_menu_box
  5924                              <1> ; output:
  5925                              <1> ;	none
  5926                              <1> ;=============================================================================
  5927                              <1> menubox_do_focus:
  5928 00002465 8B5C12              <1> 	mov bx, [si + struc_window.act_table]
  5929 00002468 B005                <1> 	mov al, SIZE_OF_STRUC_ACTION
  5930 0000246A 8A4C27              <1> 	mov cl, [si + struc_menu_box.focus_item]
  5931 0000246D F6E1                <1> 	mul cl
  5932 0000246F 01C3                <1> 	add bx, ax
  5933 00002471 8B4701              <1> 	mov ax, [bx + struc_action.keycode]
  5934 00002474 E80004              <1> 	call window_do_action
  5935 00002477 C3                  <1> 	ret
  5936                              <1> 	
  5937                              <1> 
  5938                              <1> ;=============================================================================
  5939                              <1> ; menubox_adjust_visible_boundary
  5940                              <1> ;input:
  5941                              <1> ;	ds:si -> pointer to struc_menu_box
  5942                              <1> ;=============================================================================
  5943                              <1> menubox_adjust_visible_boundary:
  5944 00002478 8B4427              <1> 	mov ax, [si + struc_menu_box.focus_item] ; al = focus_item, ah = first_visible_item
  5945                              <1> 
  5946                              <1> .check_upper:
  5947 0000247B 38E0                <1> 	cmp al, ah
  5948 0000247D 7303                <1> 	jae .check_bottom
  5949 0000247F 884428              <1> 	mov [si + struc_menu_box.first_visible_item], al
  5950                              <1> .check_bottom:
  5951 00002482 026424              <1> 	add ah, [si + struc_menu_box.menu_area_size + 1]
  5952 00002485 38E0                <1> 	cmp al, ah
  5953 00002487 7207                <1> 	jb .end
  5954 00002489 28E0                <1> 	sub al, ah
  5955 0000248B FEC0                <1> 	inc al
  5956 0000248D 004428              <1> 	add [si + struc_menu_box.first_visible_item], al
  5957                              <1> .end:	
  5958 00002490 C3                  <1> 	ret
  5959                              <1> 
  5960                              <1> ;=============================================================================
  5961                              <1> ; menubox_focus_up ---- move the focus bar up one line
  5962                              <1> ; input:
  5963                              <1> ;	ds:si -> pointer to struc_menu_box
  5964                              <1> ; output:
  5965                              <1> ;	none
  5966                              <1> ;=============================================================================
  5967                              <1> menubox_focus_up:
  5968 00002491 8B4426              <1> 	mov ax, [si + struc_menu_box.items_num]	;al = items_num, ah = focus_item
  5969 00002494 08E4                <1> 	or ah, ah
  5970 00002496 7502                <1> 	jnz .up
  5971 00002498 88C4                <1> 	mov ah, al
  5972                              <1> .up:
  5973 0000249A FECC                <1> 	dec ah
  5974 0000249C 886427              <1> 	mov [si + struc_menu_box.focus_item], ah
  5975 0000249F E8D6FF              <1> 	call menubox_adjust_visible_boundary
  5976 000024A2 C3                  <1> 	ret
  5977                              <1> 
  5978                              <1> ;=============================================================================
  5979                              <1> ; menu_focus_pageup ---- move the focus bar up one page
  5980                              <1> ; input:
  5981                              <1> ;	ds:si -> pointer to struc_menu_box
  5982                              <1> ; output:
  5983                              <1> ;	none
  5984                              <1> ;=============================================================================
  5985                              <1> menubox_focus_pageup:
  5986 000024A3 8A4427              <1> 	mov al, [si + struc_menu_box.focus_item]
  5987 000024A6 8A4C24              <1> 	mov cl, byte [si + struc_menu_box.menu_area_size+1]
  5988 000024A9 FEC9                <1> 	dec cl
  5989 000024AB 38C1                <1> 	cmp cl, al
  5990 000024AD 7206                <1> 	jb .loop_up
  5991                              <1> 
  5992 000024AF 88C1                <1> 	mov cl, al
  5993 000024B1 08C9                <1> 	or cl, cl
  5994 000024B3 7407                <1> 	jz .end
  5995                              <1> 
  5996                              <1> .loop_up:
  5997 000024B5 30ED                <1> 	xor ch, ch
  5998 000024B7 E8D7FF              <1> 	call menubox_focus_up
  5999 000024BA E2F9                <1> 	loop .loop_up
  6000                              <1> .end:
  6001 000024BC C3                  <1> 	ret
  6002                              <1> 
  6003                              <1> ;=============================================================================
  6004                              <1> ; menu_focus_down ---- move the focus bar down one line
  6005                              <1> ; input:
  6006                              <1> ;	ds:si -> pointer to struc_menu_box
  6007                              <1> ; output:
  6008                              <1> ;	none
  6009                              <1> ;=============================================================================
  6010                              <1> menubox_focus_down:
  6011 000024BD 8B4426              <1> 	mov ax, [si + struc_menu_box.items_num]	;al = items_num, ah = focus_item
  6012 000024C0 FEC4                <1> 	inc ah
  6013 000024C2 38C4                <1> 	cmp ah, al
  6014 000024C4 7202                <1> 	jb .down
  6015 000024C6 30E4                <1> 	xor ah, ah
  6016                              <1> .down:
  6017 000024C8 886427              <1> 	mov [si + struc_menu_box.focus_item], ah
  6018 000024CB E8AAFF              <1> 	call menubox_adjust_visible_boundary
  6019 000024CE C3                  <1> 	ret
  6020                              <1> 
  6021                              <1> ;=============================================================================
  6022                              <1> ; menu_focus_pagedown ---- move the focus bar down one page
  6023                              <1> ; input:
  6024                              <1> ;	ds:si -> pointer to struc_menu_box
  6025                              <1> ; output:
  6026                              <1> ;	none
  6027                              <1> ;=============================================================================
  6028                              <1> menubox_focus_pagedown:
  6029 000024CF 8B4426              <1> 	mov ax, [si + struc_menu_box.items_num]
  6030 000024D2 08C0                <1> 	or al, al
  6031 000024D4 741A                <1> 	jz .end
  6032                              <1> 
  6033 000024D6 28E0                <1> 	sub al, ah
  6034 000024D8 FEC8                <1> 	dec al
  6035                              <1> 
  6036 000024DA 8A4C24              <1> 	mov cl, byte [si + struc_menu_box.menu_area_size+1]
  6037 000024DD FEC9                <1> 	dec cl
  6038                              <1> 
  6039 000024DF 38C1                <1> 	cmp cl, al
  6040 000024E1 7206                <1> 	jb .loop_down
  6041 000024E3 88C1                <1> 	mov cl, al
  6042 000024E5 08C9                <1> 	or cl, cl
  6043 000024E7 7407                <1> 	jz .end
  6044                              <1> 
  6045                              <1> .loop_down:
  6046 000024E9 30ED                <1> 	xor ch, ch
  6047 000024EB E8CFFF              <1> 	call menubox_focus_down
  6048 000024EE E2F9                <1> 	loop .loop_down
  6049                              <1> .end:
  6050 000024F0 C3                  <1> 	ret
  6051                              <1> 
  6052                              <1> ;=============================================================================
  6053                              <1> ;menubox_default_event_handle
  6054                              <1> ;=============================================================================
  6055                              <1> menubox_default_event_handle:
  6056 000024F1 60                  <1> 	pusha
  6057 000024F2 B90A00              <1> 	mov cx, MENUBOX_DEF_ACTION_NUM
  6058 000024F5 BB[642A]            <1> 	mov bx, menubox_def_action_table
  6059 000024F8 E84603              <1> 	call window_generic_event_handle
  6060 000024FB 7303                <1> 	jnc .end
  6061 000024FD E81B03              <1> 	call window_default_event_handle
  6062                              <1> .end:
  6063 00002500 61                  <1> 	popa
  6064 00002501 C3                  <1> 	ret
  6065                              <1> ;=============================================================================
  6066                              <1> 
  6067                              <1> ;=============================================================================
  6068                              <1> ; listbox_prepare ---- prepare a list box
  6069                              <1> ; input:
  6070                              <1> ;	cl = number of items
  6071                              <1> ;	ch = height of list box
  6072                              <1> ;	ds:bx -> 2nd level pointer to title
  6073                              <1> ;	ds:dx -> 2nd level pointer to header
  6074                              <1> ;	ds:si -> items string proc
  6075                              <1> ;	ds:di -> struc_menu_box
  6076                              <1> ;=============================================================================
  6077                              <1> listbox_prepare:
  6078 00002502 60                  <1> 	pusha
  6079 00002503 51                  <1> 	push cx
  6080 00002504 B92B00              <1> 	mov cx, SIZE_OF_STRUC_MENU_BOX
  6081 00002507 E8F609              <1> 	call clear_memory
  6082 0000250A 59                  <1> 	pop cx
  6083                              <1> 
  6084 0000250B C60516              <1> 	mov byte [di], WINFLAG_FRAMED | WINFLAG_MODAL | MENUFLAG_SCROLLBAR
  6085 0000250E 895D02              <1> 	mov [di + struc_window.title], bx
  6086 00002511 89551A              <1> 	mov [di + struc_menu_box.menu_header], dx
  6087 00002514 897529              <1> 	mov [di + struc_menu_box.item_str_proc], si
  6088                              <1> 
  6089 00002517 BE[CC49]            <1> 	mov si, color.list_box
  6090 0000251A FC                  <1> 	cld
  6091 0000251B AD                  <1> 	lodsw
  6092 0000251C 894504              <1> 	mov word [di + struc_window.win_attr], ax
  6093 0000251F AC                  <1> 	lodsb
  6094 00002520 88451C              <1> 	mov byte [di + struc_menu_box.menu_header_attr], al
  6095 00002523 AD                  <1> 	lodsw
  6096 00002524 89451D              <1> 	mov word [di + struc_menu_box.menu_norm_attr], ax
  6097 00002527 AD                  <1> 	lodsw
  6098 00002528 89451F              <1> 	mov word [di + struc_menu_box.menu_focus_attr], ax
  6099 0000252B AC                  <1> 	lodsb
  6100 0000252C 884525              <1> 	mov byte [di + struc_menu_box.scrollbar_attr], al
  6101                              <1> 
  6102 0000252F 884D26              <1> 	mov [di + struc_menu_box.items_num], cl
  6103 00002532 886D09              <1> 	mov [di + struc_window.win_size + 1], ch
  6104 00002535 C745100300          <1> 	mov word [di + struc_window.act_num], LISTBOX_ACTION_NUM
  6105 0000253A C74512[552A]        <1> 	mov word [di + struc_window.act_table], listbox_action_table
  6106 0000253F C74514[F124]        <1> 	mov word [di + struc_window.default_event_handle], menubox_default_event_handle
  6107 00002544 C74516[2728]        <1> 	mov word [di + struc_window.event_handle], window_event_handle
  6108 00002549 C74518[B423]        <1> 	mov word [di + struc_window.draw_body_proc], menubox_draw_body_proc
  6109                              <1> 
  6110 0000254E 89FE                <1> 	mov si, di
  6111 00002550 E8C1FD              <1> 	call menubox_adjust_geometry
  6112 00002553 E8B002              <1> 	call window_center_window
  6113 00002556 61                  <1> 	popa
  6114 00002557 C3                  <1> 	ret
  6115                              <1> 	
  6116                              <1> ;=============================================================================
  6117                              <1> ; list_box ---- run a list box
  6118                              <1> ; input:
  6119                              <1> ;	cl = number of items
  6120                              <1> ;	ch = height of list box
  6121                              <1> ;	ds:bx -> 2nd level pointer to title
  6122                              <1> ;	ds:dx -> 2nd level pointer to header
  6123                              <1> ;	ds:si -> items string proc
  6124                              <1> ; output:
  6125                              <1> ;	cl = selected item, 0xff means canceled
  6126                              <1> ;	cf = 0 success, cf = 1 canceled
  6127                              <1> ;=============================================================================
  6128                              <1> list_box:
  6129 00002558 60                  <1> 	pusha
  6130 00002559 BF[DA2C]            <1> 	mov di, ui_tmp.tmp_menubox
  6131 0000255C E8A3FF              <1> 	call listbox_prepare
  6132 0000255F 89FE                <1> 	mov si, di
  6133 00002561 E8D901              <1> 	call window_run
  6134 00002564 61                  <1> 	popa
  6135 00002565 8A0E[012D]          <1> 	mov cl, [ui_tmp.tmp_menubox + struc_menu_box.focus_item]
  6136 00002569 80F9FF              <1> 	cmp cl, 0xFF
  6137 0000256C 7402                <1> 	je .cancel
  6138 0000256E F8                  <1> 	clc
  6139 0000256F C3                  <1> 	ret
  6140                              <1> .cancel:
  6141 00002570 F9                  <1> 	stc
  6142 00002571 C3                  <1> 	ret
  6143                              <1> 
  6144                              <1> ;=============================================================================
  6145                              <1> ; listbox_cancel
  6146                              <1> ;=============================================================================
  6147                              <1> listbox_cancel:
  6148 00002572 C64427FF            <1> 	mov byte [si + struc_menu_box.focus_item], 0xFF
  6149 00002576 C3                  <1> 	ret
  6150                              <1> ;=============================================================================
  6151                              <1> 
  6152                              <1> 
  6153                              <1> 
  6154                              <1> ;=============================================================================
  6155                              <1> ;<<<<<<<<<<<<<<<<<<<<<<<<<< Window System functions >>>>>>>>>>>>>>>>>>>>>>>>>>
  6156                              <1> ;=============================================================================
  6157                              <1> 
  6158                              <1> ;=============================================================================
  6159                              <1> ; window_draw_all ---- draw all windows
  6160                              <1> ; input:
  6161                              <1> ;	none
  6162                              <1> ; output:
  6163                              <1> ;	none
  6164                              <1> ;=============================================================================
  6165                              <1> window_draw_all:
  6166 00002577 60                  <1> 	pusha
  6167 00002578 8B36[752C]          <1> 	mov si, [ui_tmp.root_win]
  6168 0000257C 09F6                <1> 	or si, si
  6169 0000257E 7409                <1> 	jz .end
  6170 00002580 E899FA              <1> 	call lock_screen
  6171 00002583 E82600              <1> 	call window_draw_window
  6172 00002586 E8B9FA              <1> 	call unlock_screen
  6173                              <1> .end:
  6174 00002589 61                  <1> 	popa
  6175 0000258A C3                  <1> 	ret
  6176                              <1> 
  6177                              <1> ;=============================================================================
  6178                              <1> ; window_draw_body ---- draw the window body
  6179                              <1> ; input:
  6180                              <1> ;	ds:si -> pointer to struc_window
  6181                              <1> ; output:
  6182                              <1> ;	none
  6183                              <1> ;=============================================================================
  6184                              <1> window_draw_body:
  6185 0000258B 60                  <1> 	pusha
  6186 0000258C 09F6                <1> 	or si, si
  6187 0000258E 741A                <1> 	jz .no_win
  6188                              <1> 
  6189 00002590 F60401              <1> 	test byte [si], WINFLAG_OPEN
  6190 00002593 7415                <1> 	jz .no_win
  6191                              <1> 
  6192 00002595 8B5C18              <1> 	mov bx, [si + struc_window.draw_body_proc]
  6193 00002598 09DB                <1> 	or bx, bx
  6194 0000259A 740E                <1> 	jz .no_win
  6195                              <1> 
  6196 0000259C 56                  <1> 	push si
  6197 0000259D FFD3                <1> 	call bx
  6198 0000259F 5E                  <1> 	pop si
  6199                              <1> 
  6200 000025A0 8B740C              <1> 	mov si, [si + struc_window.next_win]
  6201 000025A3 09F6                <1> 	or si, si
  6202 000025A5 7403                <1> 	jz .no_win
  6203 000025A7 E80200              <1> 	call window_draw_window		; draw top windows.
  6204                              <1> 
  6205                              <1> .no_win:
  6206 000025AA 61                  <1> 	popa
  6207 000025AB C3                  <1> 	ret
  6208                              <1> ;=============================================================================
  6209                              <1> ; window_draw_window ---- draw the window and window body
  6210                              <1> ; input:
  6211                              <1> ;	ds:si -> pointer to struc_window
  6212                              <1> ; output:
  6213                              <1> ;	none
  6214                              <1> ;=============================================================================
  6215                              <1> window_draw_window:
  6216 000025AC 60                  <1> 	pusha
  6217                              <1> 
  6218 000025AD E8D9F9              <1> 	call hide_cursor
  6219                              <1> 
  6220 000025B0 09F6                <1> 	or si, si
  6221 000025B2 7422                <1> 	jz .no_next_win
  6222                              <1> 
  6223 000025B4 F60401              <1> 	test byte [si], WINFLAG_OPEN
  6224 000025B7 7413                <1> 	jz .no_body
  6225 000025B9 F60404              <1> 	test byte [si], WINFLAG_FRAMED
  6226 000025BC 7403                <1> 	jz .no_frame
  6227 000025BE E81700              <1> 	call window_draw_frame
  6228                              <1> .no_frame:
  6229 000025C1 8B5C18              <1> 	mov bx, [si + struc_window.draw_body_proc]
  6230 000025C4 09DB                <1> 	or bx, bx
  6231 000025C6 7404                <1> 	jz .no_body
  6232 000025C8 56                  <1>         push si
  6233 000025C9 FFD3                <1> 	call bx
  6234 000025CB 5E                  <1>         pop si
  6235                              <1> .no_body:
  6236 000025CC 8B740C              <1> 	mov si, [si + struc_window.next_win]
  6237 000025CF 09F6                <1> 	or si, si
  6238 000025D1 7403                <1> 	jz .no_next_win
  6239 000025D3 E8D6FF              <1> 	call window_draw_window		; draw top windows.
  6240                              <1> 
  6241                              <1> .no_next_win:
  6242 000025D6 61                  <1> 	popa
  6243 000025D7 C3                  <1> 	ret
  6244                              <1> 
  6245                              <1> ;=============================================================================
  6246                              <1> ; window_draw_frame ---- draw the window frame and clear the window body
  6247                              <1> ; input:
  6248                              <1> ;	ds:si -> pointer to struc_window
  6249                              <1> ; output:
  6250                              <1> ;	none
  6251                              <1> ;=============================================================================
  6252                              <1> window_draw_frame:
  6253 000025D8 60                  <1> 	pusha
  6254 000025D9 8B4C06              <1> 	mov cx, [si + struc_window.win_pos]	; window position
  6255 000025DC 8B5408              <1> 	mov dx, [si + struc_window.win_size]	;
  6256 000025DF 01CA                <1> 	add dx, cx				; calculate window bottom
  6257 000025E1 81EA0101            <1> 	sub dx, 0x0101				; right corner.
  6258                              <1> 
  6259 000025E5 8B5C04              <1> 	mov bx, [si + struc_window.win_attr]	; window attribute
  6260                              <1> 
  6261 000025E8 3B36[732C]          <1> 	cmp si, [ui_tmp.focus_win]
  6262 000025EC 7404                <1> 	je .focused
  6263                              <1> 
  6264 000025EE 8A3E[BB49]          <1> 	mov bh, [color.win_title_inactive]	; use another title attr for 
  6265                              <1> 						; inactive window.
  6266                              <1> .focused:
  6267 000025F2 8B7402              <1> 	mov si, [si + struc_window.title]	; get window title pointer
  6268 000025F5 09F6                <1> 	or si, si
  6269 000025F7 7402                <1> 	jz .no_title
  6270 000025F9 8B34                <1> 	mov si, [si]
  6271                              <1> .no_title:
  6272 000025FB E8D3F7              <1> 	call draw_window
  6273 000025FE 61                  <1> 	popa
  6274 000025FF C3                  <1> 	ret
  6275                              <1> 
  6276                              <1> ;=============================================================================
  6277                              <1> ; window_set_cursor
  6278                              <1> ; input:
  6279                              <1> ;	dx = cursor position
  6280                              <1> ;	ds:si -> window
  6281                              <1> ; output:
  6282                              <1> ;	none
  6283                              <1> ;=============================================================================
  6284                              <1> window_set_cursor:
  6285 00002600 52                  <1> 	push dx
  6286 00002601 F60401              <1> 	test byte [si], WINFLAG_OPEN
  6287 00002604 7406                <1> 	jz .no_cursor
  6288                              <1> 
  6289 00002606 035406              <1> 	add dx, [si + struc_window.win_pos]
  6290 00002609 E872F9              <1> 	call set_cursor
  6291                              <1> 
  6292                              <1> .no_cursor:
  6293 0000260C 5A                  <1> 	pop dx
  6294 0000260D C3                  <1> 	ret
  6295                              <1> 
  6296                              <1> ;=============================================================================
  6297                              <1> ; window_draw_char ---- Draw chars at special position in a window
  6298                              <1> ;input:
  6299                              <1> ;      bl = high 4 bit Background color and low 4 bit Foreground color
  6300                              <1> ;      dh = start row
  6301                              <1> ;      dl = start column
  6302                              <1> ;      al = the char to be displayed
  6303                              <1> ;      cx = repeat times
  6304                              <1> ;      ds:si -> the window
  6305                              <1> ;output:
  6306                              <1> ;      none
  6307                              <1> ;=============================================================================
  6308                              <1> window_draw_char:
  6309 0000260E 52                  <1> 	push dx
  6310 0000260F F60401              <1> 	test byte [si], WINFLAG_OPEN
  6311 00002612 7406                <1> 	jz .not_draw
  6312                              <1> 
  6313 00002614 035406              <1> 	add dx, [si + struc_window.win_pos]
  6314 00002617 E851F7              <1> 	call draw_char
  6315                              <1> 
  6316                              <1> .not_draw:
  6317 0000261A 5A                  <1> 	pop dx
  6318 0000261B C3                  <1> 	ret
  6319                              <1> 
  6320                              <1> ;=============================================================================
  6321                              <1> ;window_draw_string ---- Draw a zero ending string in a window 
  6322                              <1> ;                    at special position
  6323                              <1> ;input:
  6324                              <1> ;      bl = attribute for normal characters
  6325                              <1> ;           high 4 bit Background color and low 4 bit Foreground color
  6326                              <1> ;      bh = attribute for hightlight characters
  6327                              <1> ;      dh = start row
  6328                              <1> ;      dl = start column
  6329                              <1> ;      ds:si -> the string to be displayed
  6330                              <1> ;      ds:di -> the window
  6331                              <1> ;output:
  6332                              <1> ;      none
  6333                              <1> ;=============================================================================
  6334                              <1> window_draw_string:
  6335 0000261C 60                  <1> 	pusha
  6336 0000261D F60501              <1> 	test byte [di], WINFLAG_OPEN
  6337 00002620 7406                <1> 	jz .not_draw
  6338                              <1> 
  6339 00002622 035506              <1> 	add dx, [di + struc_window.win_pos]
  6340 00002625 E81CF7              <1> 	call draw_string
  6341                              <1> .not_draw:
  6342 00002628 61                  <1> 	popa
  6343 00002629 C3                  <1> 	ret
  6344                              <1> 
  6345                              <1> ;=============================================================================
  6346                              <1> ; window_draw_scrollbar ---- draw a scroll bar in a window
  6347                              <1> ; input:
  6348                              <1> ;	ds:si -> pointer to struc_window
  6349                              <1> ;	al    -> total amount
  6350                              <1> ;	ah    -> current value
  6351                              <1> ;	bl    -> attribute 
  6352                              <1> ;	ch    -> row of top of the scroll bar (relative to window position)
  6353                              <1> ;	cl    -> col of top of the scroll bar (relative to window position)
  6354                              <1> ;	dh    -> height of the scroll bar ( vertical bar, dl = 0 )
  6355                              <1> ;	dl    -> length of the scroll bar ( horizontal bar, dh = 0 )
  6356                              <1> ; output:
  6357                              <1> ;	none
  6358                              <1> ;=============================================================================
  6359                              <1> window_draw_scrollbar:
  6360 0000262A 60                  <1> 	pusha
  6361                              <1> 
  6362                              <1> ; ================== do some initialization. ==================
  6363 0000262B 51                  <1> 	push cx
  6364 0000262C 31C9                <1> 	xor cx, cx
  6365 0000262E 880E[CC26]          <1> 	mov [.bar_type], cl
  6366 00002632 FEC1                <1> 	inc cl
  6367                              <1> 
  6368 00002634 08F6                <1> 	or dh, dh
  6369 00002636 7406                <1> 	jz .horiz1
  6370 00002638 880E[CC26]          <1> 	mov [.bar_type], cl
  6371 0000263C 86D6                <1> 	xchg dl, dh
  6372                              <1> .horiz1:
  6373                              <1> 
  6374 0000263E 8816[CD26]          <1> 	mov [.bar_length], dl
  6375 00002642 5A                  <1> 	pop dx
  6376                              <1> 
  6377 00002643 50                  <1> 	push ax
  6378 00002644 52                  <1> 	push dx
  6379                              <1> 
  6380                              <1> ; ==================== draw blank bar =================
  6381 00002645 8A26[CD26]          <1> 	mov ah, [.bar_length]
  6382 00002649 B020                <1> 	mov al, ' '
  6383                              <1> 
  6384                              <1> .loop_draw_blank:
  6385 0000264B E8C0FF              <1> 	call window_draw_char
  6386 0000264E FECC                <1> 	dec ah
  6387                              <1> 
  6388 00002650 803E[CC26]00        <1> 	cmp byte [.bar_type], 0
  6389 00002655 7405                <1> 	jz .horiz2
  6390 00002657 FEC6                <1> 	inc dh
  6391 00002659 E90200              <1> 	jmp near .cont_draw_blank
  6392                              <1> .horiz2:
  6393 0000265C FEC2                <1> 	inc dl
  6394                              <1> 
  6395                              <1> .cont_draw_blank:
  6396 0000265E 08E4                <1> 	or ah, ah
  6397 00002660 75E9                <1> 	jnz .loop_draw_blank
  6398                              <1> 
  6399 00002662 803E[CC26]00        <1> 	cmp byte [.bar_type], 0
  6400 00002667 7406                <1> 	jz .horiz3
  6401 00002669 B81E1F              <1> 	mov ax, 0x1f1e
  6402 0000266C E90300              <1> 	jmp near .draw_arrow
  6403                              <1> .horiz3:
  6404 0000266F B83C3E              <1> 	mov ax, '<>'
  6405                              <1> 
  6406                              <1> .draw_arrow:
  6407 00002672 5A                  <1> 	pop dx
  6408 00002673 52                  <1> 	push dx
  6409                              <1> 
  6410 00002674 E897FF              <1> 	call window_draw_char
  6411 00002677 86C4                <1> 	xchg al, ah
  6412                              <1> 
  6413 00002679 803E[CC26]00        <1> 	cmp byte [.bar_type], 0
  6414 0000267E 7409                <1> 	jz .horiz4
  6415 00002680 0236[CD26]          <1> 	add dh, [.bar_length]
  6416 00002684 FECE                <1> 	dec dh
  6417 00002686 E90600              <1> 	jmp near .draw_end_arrow
  6418                              <1> .horiz4:
  6419 00002689 0216[CD26]          <1> 	add dl, [.bar_length]
  6420 0000268D FECA                <1> 	dec dl
  6421                              <1> .draw_end_arrow:
  6422                              <1> 
  6423 0000268F E87CFF              <1> 	call window_draw_char
  6424 00002692 5A                  <1> 	pop dx
  6425                              <1> 
  6426                              <1> ; ================= draw scroll block ===============
  6427 00002693 59                  <1> 	pop cx
  6428 00002694 380E[CD26]          <1> 	cmp [.bar_length], cl
  6429 00002698 7330                <1> 	jae .no_cursor
  6430 0000269A 803E[CD26]03        <1> 	cmp byte [.bar_length], 3
  6431 0000269F 7229                <1> 	jb .no_cursor
  6432                              <1> 
  6433 000026A1 0FB6C5              <1> 	movzx ax, ch			; block position =
  6434 000026A4 8A2E[CD26]          <1> 	mov ch, [.bar_length]		; cur value * bar length / value max
  6435 000026A8 80ED02              <1> 	sub ch, 2			; 
  6436 000026AB F6E5                <1> 	mul ch				;
  6437 000026AD F6F1                <1> 	div cl				;
  6438                              <1> 
  6439 000026AF 803E[CC26]00        <1> 	cmp byte [.bar_type], 0
  6440 000026B4 7407                <1> 	jz .horiz5
  6441 000026B6 00C6                <1> 	add dh, al
  6442 000026B8 FEC6                <1> 	inc dh
  6443 000026BA E90400              <1> 	jmp near .draw_scroll_block
  6444                              <1> .horiz5:
  6445 000026BD 00C2                <1> 	add dl, al
  6446 000026BF FEC2                <1> 	inc dl
  6447                              <1> 
  6448                              <1> .draw_scroll_block:
  6449 000026C1 B04F                <1> 	mov al, 'O'
  6450 000026C3 31C9                <1> 	xor cx, cx
  6451 000026C5 FEC1                <1> 	inc cl
  6452 000026C7 E844FF              <1> 	call window_draw_char
  6453                              <1> 
  6454                              <1> .no_cursor:
  6455 000026CA 61                  <1> 	popa
  6456 000026CB C3                  <1> 	ret
  6457                              <1> 
  6458 000026CC 00                  <1> .bar_type	db 0		; 1 = vertical, 0 =horizontal
  6459 000026CD 00                  <1> .bar_length	db 0
  6460                              <1> 
  6461                              <1> 
  6462                              <1> ;=============================================================================
  6463                              <1> ; window_initialize ---- initialize the window system.
  6464                              <1> ; input:
  6465                              <1> ;	none
  6466                              <1> ; output:
  6467                              <1> ;	none
  6468                              <1> ;=============================================================================
  6469                              <1> window_initialize:
  6470 000026CE 60                  <1> 	pusha
  6471 000026CF 30C0                <1> 	xor al, al
  6472 000026D1 BF[772C]            <1> 	mov di, ui_tmp.def_root_win
  6473 000026D4 B91A00              <1> 	mov cx, SIZE_OF_STRUC_WINDOW
  6474 000026D7 E82608              <1> 	call clear_memory
  6475 000026DA C60509              <1> 	mov byte [di], WINFLAG_OPEN | WINFLAG_NO_FOCUS
  6476 000026DD C74518[EE26]        <1> 	mov word [di + struc_window.draw_body_proc], window_clear_win_area
  6477 000026E2 A1[C329]            <1> 	mov ax, [ui_screen_size]
  6478 000026E5 894508              <1> 	mov [di + struc_window.win_size], ax
  6479                              <1> 
  6480 000026E8 893E[752C]          <1> 	mov [ui_tmp.root_win], di
  6481 000026EC 61                  <1> 	popa
  6482 000026ED C3                  <1> 	ret
  6483                              <1> 
  6484                              <1> 
  6485                              <1> ;=============================================================================
  6486                              <1> ; window_clear_win_area:
  6487                              <1> ; input:
  6488                              <1> ;	ds:si -> root win
  6489                              <1> ; output:
  6490                              <1> ;	none
  6491                              <1> ;=============================================================================
  6492                              <1> window_clear_win_area:
  6493 000026EE 60                  <1> 	pusha
  6494 000026EF 8B4C06              <1> 	mov cx, [si + struc_window.win_pos]
  6495 000026F2 8B5408              <1> 	mov dx, [si + struc_window.win_size]
  6496 000026F5 01CA                <1> 	add dx, cx
  6497 000026F7 81EA0101            <1> 	sub dx, 0x0101
  6498 000026FB 8A7C04              <1> 	mov bh, [si + struc_window.win_attr]
  6499 000026FE E888F6              <1> 	call clear_screen
  6500 00002701 61                  <1> 	popa
  6501 00002702 C3                  <1> 	ret
  6502                              <1> 
  6503                              <1> ;=============================================================================
  6504                              <1> ; window_execute ---- execute the  window system, no return.
  6505                              <1> ; input:
  6506                              <1> ;	ds:bx -> pointer to root window
  6507                              <1> ;	ds:si -> pointer to current window
  6508                              <1> ; output:
  6509                              <1> ;	none
  6510                              <1> ;=============================================================================
  6511                              <1> window_execute:
  6512 00002703 09DB                <1> 	or bx, bx
  6513 00002705 7503                <1> 	jnz .has_root
  6514 00002707 BB[772C]            <1> 	mov bx, ui_tmp.def_root_win
  6515                              <1> .has_root:
  6516 0000270A 09F6                <1> 	or si, si
  6517 0000270C 742E                <1> 	jz .end
  6518                              <1> 
  6519 0000270E 87F3                <1> 	xchg si, bx
  6520 00002710 E8B001              <1> 	call winlist_setroot
  6521 00002713 E896FE              <1> 	call window_draw_window
  6522 00002716 87F3                <1> 	xchg si, bx
  6523                              <1> 
  6524                              <1> .loop_exec:
  6525 00002718 F60408              <1> 	test byte [si], WINFLAG_NO_FOCUS
  6526 0000271B 7510                <1> 	jnz .find_focusable
  6527                              <1> 
  6528 0000271D E81D00              <1> 	call window_run
  6529 00002720 8B36[732C]          <1> 	mov si, [ui_tmp.focus_win]
  6530 00002724 09F6                <1> 	or si, si
  6531 00002726 7414                <1> 	jz .end
  6532                              <1> 
  6533 00002728 E84D02              <1> 	call winlist_findwin
  6534 0000272B 7208                <1> 	jc .reset_focus
  6535                              <1> 
  6536                              <1> .find_focusable:
  6537 0000272D E85E02              <1> 	call winlist_find_focusable
  6538 00002730 09F6                <1> 	or si, si
  6539 00002732 75E4                <1> 	jnz .loop_exec
  6540 00002734 C3                  <1> 	ret
  6541                              <1> 
  6542                              <1> .reset_focus:
  6543 00002735 E8FA01              <1> 	call winlist_findtop
  6544 00002738 89FE                <1> 	mov si, di
  6545 0000273A EBDC                <1> 	jmp short .loop_exec
  6546                              <1> .end:
  6547 0000273C C3                  <1> 	ret
  6548                              <1> 
  6549                              <1> ;=============================================================================
  6550                              <1> ; window_run ---- run a window, open it, and loop get key until the window
  6551                              <1> ;                 is closed (WINFLAG_OPEN is cleared). It passes the key to 
  6552                              <1> ;                 function window_event_handle. If window_event_handle failed
  6553                              <1> ;                 to handle this key, then the key will be passed to its 
  6554                              <1> ;                 parent window.
  6555                              <1> ; input:
  6556                              <1> ;	ds:si -> pointer to struc_window
  6557                              <1> ; output:
  6558                              <1> ;	none
  6559                              <1> ;=============================================================================
  6560                              <1> window_run:
  6561 0000273D E83802              <1> 	call winlist_findwin
  6562 00002740 720E                <1> 	jc .run_this_win
  6563                              <1> 
  6564 00002742 F6440101            <1> 	test byte [si + 1], WINFLAG_HI_RUNNING
  6565 00002746 7408                <1> 	jz .run_this_win
  6566                              <1> 
  6567 00002748 8936[732C]          <1> 	mov [ui_tmp.focus_win], si
  6568 0000274C E8F501              <1> 	call winlist_raise
  6569 0000274F C3                  <1> 	ret
  6570                              <1> 
  6571                              <1> .run_this_win:
  6572 00002750 60                  <1> 	pusha
  6573 00002751 804C0101            <1> 	or byte [si + 1], WINFLAG_HI_RUNNING
  6574                              <1> 
  6575 00002755 FF36[732C]          <1> 	push word [ui_tmp.focus_win]
  6576 00002759 E82D00              <1> 	call window_open
  6577                              <1> 
  6578                              <1> .loop_run:	
  6579 0000275C 3936[732C]          <1> 	cmp [ui_tmp.focus_win], si		; if current win is switched
  6580 00002760 7520                <1> 	jne .end_run				; just return.
  6581                              <1> 
  6582 00002762 E835F2              <1> 	call get_event
  6583 00002765 80FCF0              <1> 	cmp ah, EVTCODE_COMMAND
  6584 00002768 720A                <1> 	jb .keycode
  6585 0000276A F6C404              <1> 	test ah, EVTCODE_BROADCAST
  6586 0000276D 7405                <1> 	jz .keycode
  6587 0000276F E83002              <1> 	call winlist_broadcast_event
  6588 00002772 EB03                <1> 	jmp short .cont_run
  6589                              <1> .keycode:
  6590 00002774 E8E300              <1> 	call window_event_dispatcher
  6591                              <1> .cont_run:
  6592 00002777 F60401              <1> 	test byte [si], WINFLAG_OPEN
  6593 0000277A 75E0                <1> 	jnz .loop_run
  6594                              <1> 
  6595 0000277C 8F06[732C]          <1> 	pop word [ui_tmp.focus_win]		; if window is closed, restore
  6596 00002780 EB01                <1> 	jmp short .end				; focus_win and return.
  6597                              <1> 
  6598                              <1> .end_run:
  6599 00002782 58                  <1> 	pop ax
  6600                              <1> .end:
  6601 00002783 806401FE            <1> 	and byte [si + 1], ~ WINFLAG_HI_RUNNING
  6602 00002787 61                  <1> 	popa
  6603 00002788 C3                  <1> 	ret
  6604                              <1> 
  6605                              <1> 
  6606                              <1> ;=============================================================================
  6607                              <1> ; window_open ---- open a window, draw the window and set flag WINFLAG_OPEN, 
  6608                              <1> ;                  and insert it into the windows list.
  6609                              <1> ; input:
  6610                              <1> ;	ds:si -> pointer to struc_window
  6611                              <1> ; output:
  6612                              <1> ;	none
  6613                              <1> ;=============================================================================
  6614                              <1> window_open:
  6615 00002789 60                  <1> 	pusha
  6616 0000278A E8B701              <1> 	call winlist_raise
  6617 0000278D 800C01              <1> 	or byte [si], WINFLAG_OPEN
  6618 00002790 E8B801              <1> 	call winlist_set_focus_win
  6619 00002793 61                  <1> 	popa
  6620 00002794 C3                  <1> 	ret
  6621                              <1> 
  6622                              <1> ;=============================================================================
  6623                              <1> ; window_close ---- close a window, clear flag WINFLAG_OPEN, and remove it
  6624                              <1> ;                   from the windows list.
  6625                              <1> ; input:
  6626                              <1> ;	ds:si -> pointer to struc_window
  6627                              <1> ; output:
  6628                              <1> ;	none
  6629                              <1> ;=============================================================================
  6630                              <1> window_close:
  6631 00002795 60                  <1> 	pusha
  6632 00002796 E86901              <1> 	call winlist_remove
  6633 00002799 8024FE              <1> 	and byte [si], ~ WINFLAG_OPEN
  6634 0000279C E8D8FD              <1> 	call window_draw_all
  6635 0000279F 61                  <1> 	popa
  6636 000027A0 C3                  <1> 	ret
  6637                              <1> 
  6638                              <1> ;=============================================================================
  6639                              <1> ; window_move_up ---- move the window up one row
  6640                              <1> ; input:
  6641                              <1> ;	ds:si -> pointer to struc_window
  6642                              <1> ; output:
  6643                              <1> ;	none
  6644                              <1> ;=============================================================================
  6645                              <1> window_move_up:
  6646 000027A1 50                  <1> 	push ax
  6647 000027A2 8A4407              <1> 	mov al, [si + struc_window.win_pos + 1]
  6648 000027A5 08C0                <1> 	or al, al
  6649 000027A7 7405                <1> 	jz .no_move
  6650 000027A9 FEC8                <1> 	dec al
  6651 000027AB 884407              <1> 	mov [si + struc_window.win_pos + 1], al
  6652                              <1> .no_move:
  6653 000027AE 58                  <1> 	pop ax
  6654 000027AF C3                  <1> 	ret
  6655                              <1> 
  6656                              <1> ;=============================================================================
  6657                              <1> ; window_move_down ---- move the window down one row
  6658                              <1> ; input:
  6659                              <1> ;	ds:si -> pointer to struc_window
  6660                              <1> ; output:
  6661                              <1> ;	none
  6662                              <1> ;=============================================================================
  6663                              <1> window_move_down:
  6664 000027B0 50                  <1> 	push ax
  6665 000027B1 8A4407              <1> 	mov al, [si + struc_window.win_pos + 1]
  6666 000027B4 8A26[C429]          <1> 	mov ah, [ui_screen_height]
  6667 000027B8 FECC                <1> 	dec ah
  6668                              <1> 
  6669 000027BA 38E0                <1> 	cmp al, ah
  6670 000027BC 7305                <1> 	jae .no_move
  6671 000027BE FEC0                <1> 	inc al
  6672 000027C0 884407              <1> 	mov [si + struc_window.win_pos + 1], al
  6673                              <1> .no_move:
  6674 000027C3 58                  <1> 	pop ax
  6675 000027C4 C3                  <1> 	ret
  6676                              <1> 
  6677                              <1> 
  6678                              <1> ;=============================================================================
  6679                              <1> ; window_move_left ---- move the window left one column
  6680                              <1> ; input:
  6681                              <1> ;	ds:si -> pointer to struc_window
  6682                              <1> ; output:
  6683                              <1> ;	none
  6684                              <1> ;=============================================================================
  6685                              <1> window_move_left:
  6686 000027C5 50                  <1> 	push ax
  6687 000027C6 8A4406              <1> 	mov al, [si + struc_window.win_pos]
  6688 000027C9 08C0                <1> 	or al, al
  6689 000027CB 7405                <1> 	jz .no_move
  6690 000027CD FEC8                <1> 	dec al
  6691 000027CF 884406              <1> 	mov [si + struc_window.win_pos], al
  6692                              <1> .no_move:
  6693 000027D2 58                  <1> 	pop ax
  6694 000027D3 C3                  <1> 	ret
  6695                              <1> 
  6696                              <1> 
  6697                              <1> ;=============================================================================
  6698                              <1> ; window_move_right ---- move the window right one column
  6699                              <1> ; input:
  6700                              <1> ;	ds:si -> pointer to struc_window
  6701                              <1> ; output:
  6702                              <1> ;	none
  6703                              <1> ;=============================================================================
  6704                              <1> window_move_right:
  6705 000027D4 50                  <1> 	push ax
  6706 000027D5 8A4406              <1> 	mov al, [si + struc_window.win_pos]
  6707 000027D8 8A26[C329]          <1> 	mov ah, [ui_screen_width]
  6708 000027DC 2A6408              <1> 	sub ah, [si + struc_window.win_size]
  6709 000027DF 80EC02              <1> 	sub ah, 2
  6710                              <1> 
  6711 000027E2 38E0                <1> 	cmp al, ah
  6712 000027E4 7305                <1> 	jae .no_move
  6713 000027E6 FEC0                <1> 	inc al
  6714 000027E8 884406              <1> 	mov [si + struc_window.win_pos], al
  6715                              <1> .no_move:
  6716 000027EB 58                  <1> 	pop ax
  6717 000027EC C3                  <1> 	ret
  6718                              <1> 
  6719                              <1> 
  6720                              <1> ;=============================================================================
  6721                              <1> ; window_switch_window ---- switch to the next window
  6722                              <1> ; input:
  6723                              <1> ;	ds:si -> pointer to current window
  6724                              <1> ; output:
  6725                              <1> ;	none
  6726                              <1> ;=============================================================================
  6727                              <1> window_switch_window:
  6728 000027ED 60                  <1> 	pusha
  6729 000027EE F60402              <1> 	test byte [si], WINFLAG_MODAL
  6730 000027F1 7511                <1> 	jnz .no_switch
  6731 000027F3 E88201              <1> 	call winlist_findwin
  6732 000027F6 720C                <1> 	jc .no_switch
  6733 000027F8 8B36[752C]          <1> 	mov si, [ui_tmp.root_win]
  6734 000027FC 09F6                <1> 	or si, si
  6735 000027FE 7404                <1> 	jz .no_switch
  6736                              <1> 
  6737 00002800 8936[732C]          <1> 	mov [ui_tmp.focus_win], si
  6738                              <1> 
  6739                              <1> .no_switch:
  6740 00002804 61                  <1> 	popa
  6741 00002805 C3                  <1> 	ret
  6742                              <1> 
  6743                              <1> ;=============================================================================
  6744                              <1> ; move a window to center of the screen.
  6745                              <1> ;input:
  6746                              <1> ;	ds:si -> pointer to window
  6747                              <1> ;output:
  6748                              <1> ;	none
  6749                              <1> ;=============================================================================
  6750                              <1> window_center_window:
  6751 00002806 60                  <1> 	pusha
  6752 00002807 8B5408              <1> 	mov dx, [si + struc_window.win_size]
  6753 0000280A 8B0E[C329]          <1> 	mov cx, [ui_screen_size]                   ; calculate the coordinate
  6754                              <1> 
  6755 0000280E 28F5                <1> 	sub ch, dh                              ; of input box.
  6756 00002810 D0ED                <1> 	shr ch, 1                               ; cx = top left pos
  6757 00002812 28D1                <1> 	sub cl, dl                              ; 
  6758 00002814 D0E9                <1> 	shr cl, 1                               ;
  6759                              <1> 
  6760 00002816 894C06              <1> 	mov [si + struc_window.win_pos], cx
  6761 00002819 61                  <1> 	popa
  6762 0000281A C3                  <1> 	ret
  6763                              <1> 
  6764                              <1> 
  6765                              <1> ;=============================================================================
  6766                              <1> ; window_default_event_handle ---- default event handle for a normal window, it
  6767                              <1> ;                           handles some normal events, such as move window.
  6768                              <1> ; input:
  6769                              <1> ;	ax    -> keycode
  6770                              <1> ;	ds:si -> pointer to struc_window
  6771                              <1> ; output:
  6772                              <1> ;	cf = 0, success
  6773                              <1> ;	cf = 1, fail, no such action
  6774                              <1> ;=============================================================================
  6775                              <1> window_default_event_handle:
  6776 0000281B 60                  <1> 	pusha
  6777 0000281C B90E00              <1> 	mov cx, WINDOW_DEF_ACTION_NUM
  6778 0000281F BB[C929]            <1> 	mov bx, window_def_action_table
  6779 00002822 E81C00              <1> 	call window_generic_event_handle
  6780 00002825 61                  <1> 	popa
  6781 00002826 C3                  <1> 	ret
  6782                              <1> 
  6783                              <1> ;=============================================================================
  6784                              <1> ; window_event_handle ----  event handle for a normal window, it finds 
  6785                              <1> ;                           the corresponding action for a key event from
  6786                              <1> ;                           action_table then call window_do_action to run it.
  6787                              <1> ;                           If the event is not in action_table, then
  6788                              <1> ;                           .defkey_handle will be called to handle it.
  6789                              <1> ; input:
  6790                              <1> ;	ax    -> keycode
  6791                              <1> ;	ds:si -> pointer to struc_window
  6792                              <1> ; output:
  6793                              <1> ;	cf = 0, success
  6794                              <1> ;	cf = 1, fail, no such action
  6795                              <1> ;=============================================================================
  6796                              <1> window_event_handle:
  6797 00002827 60                  <1> 	pusha
  6798 00002828 8B5C12              <1> 	mov bx, [si + struc_window.act_table]
  6799 0000282B 8B4C10              <1> 	mov cx, [si + struc_window.act_num]
  6800 0000282E E81000              <1> 	call window_generic_event_handle
  6801 00002831 730C                <1> 	jnc .success
  6802 00002833 8B5C14              <1> 	mov bx, [si + struc_window.default_event_handle]
  6803 00002836 09DB                <1> 	or bx, bx
  6804 00002838 7404                <1> 	jz .failed
  6805 0000283A FFD3                <1> 	call bx
  6806 0000283C 7301                <1> 	jnc .success
  6807                              <1> .failed:
  6808 0000283E F9                  <1> 	stc
  6809                              <1> .success:
  6810 0000283F 61                  <1> 	popa
  6811 00002840 C3                  <1> 	ret
  6812                              <1> 
  6813                              <1> ;=============================================================================
  6814                              <1> ; window_generic_event_handle ---- generic event handle, it find a key from 
  6815                              <1> ;                                  an action list, then run it.
  6816                              <1> ; input:
  6817                              <1> ;	ax    -> keycode
  6818                              <1> ;	ds:si -> pointer to struc_window
  6819                              <1> ;	ds:bx -> action list
  6820                              <1> ;	cx    -> action number
  6821                              <1> ; output:
  6822                              <1> ;	cf = 0, success
  6823                              <1> ;	cf = 1, fail, no such action
  6824                              <1> ;=============================================================================
  6825                              <1> window_generic_event_handle:
  6826 00002841 09C9                <1> 	or cx, cx
  6827 00002843 7413                <1> 	jz .no_action
  6828 00002845 09DB                <1> 	or bx, bx
  6829 00002847 740F                <1> 	jz .no_action
  6830                              <1> 
  6831                              <1> .loop_find_act:
  6832 00002849 394701              <1> 	cmp [bx + struc_action.keycode], ax
  6833 0000284C 7505                <1> 	jne .cont_find
  6834 0000284E E82600              <1> 	call window_do_action
  6835 00002851 F8                  <1> 	clc
  6836 00002852 C3                  <1> 	ret
  6837                              <1> 
  6838                              <1> .cont_find:
  6839 00002853 83C305              <1> 	add bx, SIZE_OF_STRUC_ACTION
  6840 00002856 E2F1                <1> 	loop .loop_find_act
  6841                              <1> 
  6842                              <1> .no_action:
  6843 00002858 F9                  <1> 	stc
  6844 00002859 C3                  <1> 	ret
  6845                              <1> 
  6846                              <1> ;=============================================================================
  6847                              <1> ; window_event_dispatcher ---- dispatch event to event handle 
  6848                              <1> ; input:
  6849                              <1> ;	ax    -> keycode
  6850                              <1> ;	ds:si -> pointer to struc_window
  6851                              <1> ; output:
  6852                              <1> ;	cf = 0, success
  6853                              <1> ;	cf = 1, fail, no such action
  6854                              <1> ;=============================================================================
  6855                              <1> window_event_dispatcher:
  6856 0000285A 60                  <1> 	pusha
  6857 0000285B 8B5C16              <1> 	mov bx, [si + struc_window.event_handle]
  6858 0000285E 09DB                <1> 	or bx, bx
  6859 00002860 7406                <1> 	jz .no_event_handle
  6860                              <1> 
  6861 00002862 56                  <1> 	push si
  6862 00002863 FFD3                <1> 	call bx
  6863 00002865 5E                  <1> 	pop si
  6864                              <1> 
  6865 00002866 730D                <1> 	jnc .action_ok
  6866                              <1> 
  6867                              <1> .no_event_handle:
  6868 00002868 8B740A              <1> 	mov si, [si + struc_window.parent_win]
  6869 0000286B 09F6                <1> 	or si, si
  6870 0000286D 7405                <1> 	jz .no_parent
  6871 0000286F E8E8FF              <1> 	call window_event_dispatcher
  6872 00002872 7301                <1> 	jnc .action_ok
  6873                              <1> 
  6874                              <1> .no_parent:
  6875 00002874 F9                  <1> 	stc
  6876                              <1> 
  6877                              <1> .action_ok:
  6878 00002875 61                  <1> 	popa
  6879 00002876 C3                  <1> 	ret
  6880                              <1> 
  6881                              <1> ;=============================================================================
  6882                              <1> ; window_do_action ---- do a window action
  6883                              <1> ; input:
  6884                              <1> ;	ax    =  event code
  6885                              <1> ;	ds:si -> pointer to struc_window
  6886                              <1> ;	ds:bx -> pointer to struc_action
  6887                              <1> ; output:
  6888                              <1> ;	none
  6889                              <1> ;=============================================================================
  6890                              <1> window_do_action:
  6891 00002877 60                  <1> 	pusha
  6892                              <1> 
  6893 00002878 09F6                <1> 	or si, si
  6894 0000287A 7445                <1> 	jz .end
  6895 0000287C 09DB                <1> 	or bx, bx
  6896 0000287E 7441                <1> 	jz .end
  6897                              <1> 
  6898 00002880 8A17                <1> 	mov dl, [bx]
  6899                              <1> 
  6900 00002882 F6C2F0              <1> 	test dl, ACTFLAG_AUTHS		; check action flags
  6901 00002885 7409                <1> 	jz .no_auth
  6902                              <1> 
  6903 00002887 60                  <1> 	pusha
  6904 00002888 88D0                <1> 	mov al, dl
  6905 0000288A E859F1              <1> 	call main_auth_action		; check if the action is ready to do
  6906                              <1> 					; al = auth type
  6907 0000288D 61                  <1> 	popa
  6908 0000288E 720B                <1> 	jc .no_action
  6909                              <1> 
  6910                              <1> .no_auth:
  6911 00002890 8B5F03              <1> 	mov bx, [bx + struc_action.func]
  6912 00002893 09DB                <1> 	or bx, bx
  6913 00002895 7404                <1> 	jz .no_action
  6914                              <1> 
  6915 00002897 60                  <1> 	pusha
  6916 00002898 FFD3                <1> 	call bx				; do the action
  6917 0000289A 61                  <1> 	popa
  6918                              <1> 
  6919                              <1> .no_action:
  6920                              <1> 
  6921 0000289B F6C201              <1> 	test dl, ACTFLAG_CLOSE_WIN
  6922 0000289E 7405                <1> 	jz .no_close
  6923 000028A0 E8F2FE              <1> 	call window_close
  6924 000028A3 EB1C                <1> 	jmp short .end
  6925                              <1> .no_close:
  6926 000028A5 F6C202              <1> 	test dl, ACTFLAG_REDRAW_BODY
  6927 000028A8 7405                <1> 	jz .no_redraw_body
  6928 000028AA E8DEFC              <1> 	call window_draw_body
  6929 000028AD EB12                <1> 	jmp short .end
  6930                              <1> .no_redraw_body:
  6931 000028AF F6C204              <1> 	test dl, ACTFLAG_REDRAW_WIN
  6932 000028B2 7405                <1> 	jz .no_redraw_win
  6933 000028B4 E8F5FC              <1> 	call window_draw_window
  6934 000028B7 EB08                <1> 	jmp short .end
  6935                              <1> .no_redraw_win:
  6936 000028B9 F6C208              <1> 	test dl, ACTFLAG_REDRAW_SCR
  6937 000028BC 7403                <1> 	jz .end
  6938 000028BE E8B6FC              <1> 	call window_draw_all
  6939                              <1> .end:
  6940 000028C1 61                  <1> 	popa
  6941 000028C2 C3                  <1> 	ret
  6942                              <1> 
  6943                              <1> ;=============================================================================
  6944                              <1> ; winlist_setroot ---- set root window
  6945                              <1> ; input:
  6946                              <1> ;	ds:si -> pointer to root window
  6947                              <1> ; output:
  6948                              <1> ;	none
  6949                              <1> ;=============================================================================
  6950                              <1> winlist_setroot:
  6951 000028C3 53                  <1> 	push bx
  6952                              <1> 
  6953 000028C4 09F6                <1> 	or si, si
  6954 000028C6 741A                <1> 	jz .invalid_root
  6955                              <1> 
  6956 000028C8 8B1E[752C]          <1> 	mov bx, [ui_tmp.root_win]
  6957 000028CC 09DB                <1> 	or bx, bx
  6958 000028CE 7403                <1> 	jz .no_root
  6959 000028D0 8B5F0C              <1> 	mov bx, [bx + struc_window.next_win]
  6960                              <1> 
  6961                              <1> .no_root:
  6962 000028D3 8936[752C]          <1> 	mov [ui_tmp.root_win], si
  6963 000028D7 895C0C              <1> 	mov [si + struc_window.next_win], bx
  6964 000028DA 31DB                <1> 	xor bx, bx
  6965 000028DC 895C0E              <1> 	mov [si + struc_window.previous_win], bx
  6966 000028DF 895C0A              <1> 	mov [si + struc_window.parent_win], bx
  6967                              <1> 
  6968                              <1> .invalid_root:
  6969 000028E2 5B                  <1> 	pop bx
  6970 000028E3 C3                  <1> 	ret
  6971                              <1> 
  6972                              <1> ;=============================================================================
  6973                              <1> ; winlist_insert ---- insert a window
  6974                              <1> ; input:
  6975                              <1> ;	ds:si -> pointer to the window
  6976                              <1> ; output:
  6977                              <1> ;	none
  6978                              <1> ;=============================================================================
  6979                              <1> winlist_insert:
  6980 000028E4 57                  <1> 	push di
  6981 000028E5 09F6                <1> 	or si, si
  6982 000028E7 7417                <1> 	jz .invalid_win
  6983 000028E9 E88C00              <1> 	call winlist_findwin
  6984 000028EC 7312                <1> 	jnc .invalid_win
  6985                              <1> 
  6986 000028EE E84100              <1> 	call winlist_findtop
  6987 000028F1 09FF                <1> 	or di, di
  6988 000028F3 740B                <1> 	jz .invalid_win
  6989                              <1> 
  6990 000028F5 89750C              <1> 	mov [di + struc_window.next_win], si
  6991 000028F8 897C0E              <1> 	mov [si + struc_window.previous_win], di
  6992 000028FB 31FF                <1> 	xor di, di
  6993 000028FD 897C0C              <1> 	mov [si + struc_window.next_win], di
  6994                              <1> 
  6995                              <1> .invalid_win:
  6996 00002900 5F                  <1> 	pop di
  6997 00002901 C3                  <1> 	ret
  6998                              <1> 
  6999                              <1> ;=============================================================================
  7000                              <1> ; winlist_remove ---- remove a window
  7001                              <1> ; input:
  7002                              <1> ;	ds:si -> pointer to the window
  7003                              <1> ; output:
  7004                              <1> ;	none
  7005                              <1> ;=============================================================================
  7006                              <1> winlist_remove:
  7007 00002902 09F6                <1> 	or si, si
  7008 00002904 742B                <1> 	jz .invalid_win
  7009 00002906 3936[752C]          <1> 	cmp [ui_tmp.root_win], si
  7010 0000290A 7425                <1> 	je .invalid_win
  7011 0000290C E86900              <1> 	call winlist_findwin
  7012 0000290F 7220                <1> 	jc .invalid_win
  7013                              <1> 
  7014 00002911 53                  <1> 	push bx
  7015 00002912 56                  <1> 	push si
  7016 00002913 8B5C0C              <1> 	mov bx, [si + struc_window.next_win]
  7017 00002916 8B740E              <1> 	mov si ,[si + struc_window.previous_win]
  7018 00002919 09DB                <1> 	or bx, bx
  7019 0000291B 7403                <1> 	jz .no_next
  7020 0000291D 89770E              <1> 	mov [bx + struc_window.previous_win], si
  7021                              <1> .no_next:
  7022 00002920 09F6                <1> 	or si, si
  7023 00002922 7403                <1> 	jz .no_previous
  7024 00002924 895C0C              <1> 	mov [si + struc_window.next_win], bx
  7025                              <1> .no_previous:
  7026 00002927 5E                  <1> 	pop si
  7027 00002928 31DB                <1> 	xor bx, bx
  7028 0000292A 895C0C              <1> 	mov [si + struc_window.next_win], bx
  7029 0000292D 895C0E              <1> 	mov [si + struc_window.previous_win], bx
  7030 00002930 5B                  <1> 	pop bx
  7031                              <1> 
  7032                              <1> .invalid_win:
  7033 00002931 C3                  <1> 	ret
  7034                              <1> 
  7035                              <1> ;=============================================================================
  7036                              <1> ; winlist_findtop ---- find the top window
  7037                              <1> ; input:
  7038                              <1> ;	none
  7039                              <1> ; output:
  7040                              <1> ;	ds:di -> the top window
  7041                              <1> ;=============================================================================
  7042                              <1> winlist_findtop:
  7043 00002932 50                  <1> 	push ax
  7044 00002933 8B3E[752C]          <1> 	mov di, [ui_tmp.root_win]
  7045                              <1> 
  7046                              <1> .loop_find:
  7047 00002937 8B450C              <1> 	mov ax, [di + struc_window.next_win]
  7048 0000293A 09C0                <1> 	or ax, ax
  7049 0000293C 7404                <1> 	jz .find_it
  7050 0000293E 89C7                <1> 	mov di, ax
  7051 00002940 EBF5                <1> 	jmp short .loop_find
  7052                              <1> 
  7053                              <1> .find_it:
  7054 00002942 58                  <1> 	pop ax
  7055 00002943 C3                  <1> 	ret
  7056                              <1> 
  7057                              <1> ;=============================================================================
  7058                              <1> ; winlist_raise ---- raise a window to top
  7059                              <1> ; input:
  7060                              <1> ;	ds:si -> the window
  7061                              <1> ; output:
  7062                              <1> ;	none
  7063                              <1> ;=============================================================================
  7064                              <1> winlist_raise:
  7065 00002944 E8BBFF              <1> 	call winlist_remove
  7066 00002947 E89AFF              <1> 	call winlist_insert
  7067 0000294A C3                  <1> 	ret
  7068                              <1> 
  7069                              <1> ;=============================================================================
  7070                              <1> ; winlist_set_focus_win ---- set the focus window
  7071                              <1> ; input:
  7072                              <1> ;	ds:si -> the window
  7073                              <1> ; output:
  7074                              <1> ;	none
  7075                              <1> ;=============================================================================
  7076                              <1> winlist_set_focus_win:
  7077 0000294B 53                  <1> 	push bx
  7078 0000294C 56                  <1> 	push si
  7079 0000294D 8B36[732C]          <1> 	mov si, [ui_tmp.focus_win]
  7080 00002951 89F3                <1> 	mov bx, si
  7081 00002953 E82200              <1> 	call winlist_findwin
  7082 00002956 5E                  <1> 	pop si
  7083 00002957 720A                <1> 	jc .ok
  7084                              <1> 
  7085 00002959 F60402              <1> 	test byte [si], WINFLAG_MODAL
  7086 0000295C 7505                <1> 	jnz .ok
  7087 0000295E F60702              <1> 	test byte [bx], WINFLAG_MODAL
  7088 00002961 7509                <1> 	jnz .end
  7089                              <1> 
  7090                              <1> .ok:
  7091 00002963 E81200              <1> 	call winlist_findwin
  7092 00002966 7204                <1> 	jc .end
  7093 00002968 8936[732C]          <1> 	mov [ui_tmp.focus_win], si
  7094                              <1> .end:
  7095 0000296C 8B36[732C]          <1> 	mov si, [ui_tmp.focus_win]
  7096 00002970 E8D1FF              <1> 	call winlist_raise
  7097 00002973 E801FC              <1> 	call window_draw_all
  7098 00002976 5B                  <1> 	pop bx
  7099 00002977 C3                  <1> 	ret
  7100                              <1> 
  7101                              <1> ;=============================================================================
  7102                              <1> ; winlist_findwin ---- find a window in winlist
  7103                              <1> ; input:
  7104                              <1> ;	ds:si -> the window
  7105                              <1> ; output:
  7106                              <1> ;	cf = 0  found
  7107                              <1> ;	cf = 1  not found
  7108                              <1> ;=============================================================================
  7109                              <1> winlist_findwin:
  7110 00002978 53                  <1> 	push bx
  7111 00002979 8B1E[752C]          <1> 	mov bx, [ui_tmp.root_win]
  7112                              <1> .loop_find:
  7113 0000297D 39F3                <1> 	cmp bx, si
  7114 0000297F 740A                <1> 	je .found
  7115 00002981 8B5F0C              <1> 	mov bx, [bx + struc_window.next_win]
  7116 00002984 09DB                <1> 	or bx, bx
  7117 00002986 75F5                <1> 	jnz .loop_find
  7118 00002988 F9                  <1> 	stc
  7119 00002989 5B                  <1> 	pop bx
  7120 0000298A C3                  <1> 	ret
  7121                              <1> .found:
  7122 0000298B F8                  <1> 	clc
  7123 0000298C 5B                  <1> 	pop bx
  7124 0000298D C3                  <1> 	ret
  7125                              <1> 
  7126                              <1> ;=============================================================================
  7127                              <1> ; winlist_find_focusable ---- find a focusable window
  7128                              <1> ; input:
  7129                              <1> ;	ds:si -> the first win
  7130                              <1> ; output:
  7131                              <1> ;	ds:si -> the focusable win
  7132                              <1> ;=============================================================================
  7133                              <1> winlist_find_focusable:
  7134 0000298E E8E7FF              <1> 	call winlist_findwin
  7135 00002991 720C                <1> 	jc .failed
  7136                              <1> 
  7137                              <1> .loop_find:
  7138 00002993 F60408              <1> 	test byte [si], WINFLAG_NO_FOCUS
  7139 00002996 7409                <1> 	jz .found
  7140 00002998 8B740C              <1> 	mov si, [si + struc_window.next_win]
  7141 0000299B 09F6                <1> 	or si, si
  7142 0000299D 75F4                <1> 	jnz .loop_find
  7143                              <1> .failed:
  7144 0000299F 31F6                <1> 	xor si, si
  7145                              <1> .found:
  7146 000029A1 C3                  <1> 	ret
  7147                              <1> 
  7148                              <1> 
  7149                              <1> ;=============================================================================
  7150                              <1> ; winlist_broadcast_event ---- broadcast an event to all opened windows
  7151                              <1> ; input:
  7152                              <1> ;	ax = event code
  7153                              <1> ; output:
  7154                              <1> ;	none
  7155                              <1> ;=============================================================================
  7156                              <1> winlist_broadcast_event:
  7157 000029A2 60                  <1> 	pusha
  7158 000029A3 8B36[752C]          <1> 	mov si, [ui_tmp.root_win]
  7159                              <1> 
  7160                              <1> .loop_broadcast:
  7161 000029A7 E8B0FE              <1> 	call window_event_dispatcher
  7162 000029AA 7307                <1> 	jnc .end
  7163 000029AC 8B740C              <1> 	mov si, [si + struc_window.next_win]
  7164 000029AF 09F6                <1> 	or si, si
  7165 000029B1 75F4                <1> 	jnz .loop_broadcast
  7166                              <1> .end:
  7167 000029B3 61                  <1> 	popa
  7168 000029B4 C3                  <1> 	ret
  7169                              <1> 
  7170                              <1> 
  7171                              <1> %ifndef MAIN
  7172                              <1> get_event:
  7173                              <1> 
  7174                              <1> .loop_get_event:
  7175                              <1> 	call check_keyevent
  7176                              <1> 	or ax, ax
  7177                              <1> 	jz .loop_get_event
  7178                              <1> 	ret
  7179                              <1> 
  7180                              <1> 
  7181                              <1> ;=============================================================================
  7182                              <1> ; main_auth_action  ---- auth an action
  7183                              <1> ; input:
  7184                              <1> ;	al =  auth type
  7185                              <1> ; output:
  7186                              <1> ;	cf =  0 auth ok
  7187                              <1> ;	cf =  1 auth failed.
  7188                              <1> ;=============================================================================
  7189                              <1> main_auth_action:
  7190                              <1> 	clc
  7191                              <1> 	ret
  7192                              <1> %endif
  7193                              <1> 
  7194                              <1> 
  7195                              <1> ;=============================================================================
  7196                              <1> ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Private Data Area >>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  7197                              <1> ;=============================================================================
  7198 000029B5 006B0159025A038E04- <1> ui_VideoHorizParams dw 0x6B00,0x5901,0x5A02,0x8E03,0x5F04,0x8C05,0x2D13 ;8-wide
  7199 000029BE 5F058C132D          <1>
  7200                              <1> 
  7201                              <1> ui_screen_size:
  7202 000029C3 5A                  <1> ui_screen_width     db     90
  7203 000029C4 19                  <1> ui_screen_height    db     25
  7204                              <1> 
  7205 000029C5 00B8                <1> ui_screen_bufseg     dw     SCR_BUF_SEG0
  7206 000029C7 00                  <1> ui_screen_page       db     0
  7207 000029C8 00                  <1> ui_screen_lock       db     0
  7208                              <1> 
  7209                              <1> 
  7210                              <1> window_def_action_table:
  7211 000029C9 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7212 000029CA 008D                <1> 	dw	kbCtrlUp
  7213 000029CC [A127]              <1> 	dw	window_move_up
  7214                              <1> 
  7215 000029CE 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7216 000029CF E08D                <1> 	dw	kbEnhCtrlUp
  7217 000029D1 [A127]              <1> 	dw	window_move_up
  7218                              <1> 
  7219 000029D3 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7220 000029D4 E047                <1> 	dw	kbEnhHome
  7221 000029D6 [A127]              <1> 	dw	window_move_up
  7222                              <1> 
  7223 000029D8 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7224 000029D9 0091                <1> 	dw	kbCtrlDown
  7225 000029DB [B027]              <1> 	dw	window_move_down
  7226                              <1> 
  7227 000029DD 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7228 000029DE E091                <1> 	dw	kbEnhCtrlDown
  7229 000029E0 [B027]              <1> 	dw	window_move_down
  7230                              <1> 
  7231 000029E2 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7232 000029E3 E04F                <1> 	dw	kbEnhEnd
  7233 000029E5 [B027]              <1> 	dw	window_move_down
  7234                              <1> 
  7235 000029E7 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7236 000029E8 0073                <1> 	dw	kbCtrlLeft
  7237 000029EA [C527]              <1> 	dw	window_move_left
  7238                              <1> 
  7239 000029EC 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7240 000029ED E073                <1> 	dw	kbEnhCtrlLeft
  7241 000029EF [C527]              <1> 	dw	window_move_left
  7242                              <1> 
  7243 000029F1 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7244 000029F2 E053                <1> 	dw	kbEnhDel
  7245 000029F4 [C527]              <1> 	dw	window_move_left
  7246                              <1> 
  7247 000029F6 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7248 000029F7 0074                <1> 	dw	kbCtrlRight
  7249 000029F9 [D427]              <1> 	dw	window_move_right
  7250                              <1> 
  7251 000029FB 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7252 000029FC E074                <1> 	dw	kbEnhCtrlRight
  7253 000029FE [D427]              <1> 	dw	window_move_right
  7254                              <1> 
  7255 00002A00 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7256 00002A01 E051                <1> 	dw	kbEnhPgDn
  7257 00002A03 [D427]              <1> 	dw	window_move_right
  7258                              <1> 
  7259 00002A05 00                  <1> 	db	0
  7260 00002A06 0094                <1> 	dw	kbCtrlTab
  7261 00002A08 [ED27]              <1> 	dw	window_switch_window
  7262                              <1> 
  7263 00002A0A 00                  <1> 	db	0
  7264 00002A0B 00A5                <1> 	dw	kbAltTab
  7265 00002A0D [ED27]              <1> 	dw	window_switch_window
  7266                              <1> .end_of_table
  7267                              <1> 
  7268                              <1> inputbox_action_table:
  7269 00002A0F 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7270 00002A10 080E                <1> 	dw	kbBack
  7271 00002A12 [8921]              <1> 	dw	inputbox_backspace
  7272                              <1> 
  7273 00002A14 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7274 00002A15 0053                <1> 	dw	kbDel
  7275 00002A17 [A321]              <1> 	dw	inputbox_delete
  7276                              <1> 
  7277 00002A19 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7278 00002A1A E053                <1> 	dw	kbEnhDel
  7279 00002A1C [A321]              <1> 	dw	inputbox_delete
  7280                              <1> 
  7281 00002A1E 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7282 00002A1F 0047                <1> 	dw	kbHome
  7283 00002A21 [DA21]              <1> 	dw	inputbox_home_key
  7284                              <1> 
  7285 00002A23 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7286 00002A24 E047                <1> 	dw	kbEnhHome
  7287 00002A26 [DA21]              <1> 	dw	inputbox_home_key
  7288                              <1> 
  7289 00002A28 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7290 00002A29 004F                <1> 	dw	kbEnd
  7291 00002A2B [D021]              <1> 	dw	inputbox_end_key
  7292                              <1> 
  7293 00002A2D 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7294 00002A2E E04F                <1> 	dw	kbEnhEnd
  7295 00002A30 [D021]              <1> 	dw	inputbox_end_key
  7296                              <1> 
  7297 00002A32 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7298 00002A33 004B                <1> 	dw	kbLeft
  7299 00002A35 [C321]              <1> 	dw	inputbox_left_arrow
  7300                              <1> 
  7301 00002A37 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7302 00002A38 E04B                <1> 	dw	kbEnhLeft
  7303 00002A3A [C321]              <1> 	dw	inputbox_left_arrow
  7304                              <1> 
  7305 00002A3C 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7306 00002A3D 004D                <1> 	dw	kbRight
  7307 00002A3F [B421]              <1> 	dw	inputbox_right_arrow
  7308                              <1> 
  7309 00002A41 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7310 00002A42 E04D                <1> 	dw	kbEnhRight
  7311 00002A44 [B421]              <1> 	dw	inputbox_right_arrow
  7312                              <1> 
  7313 00002A46 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7314 00002A47 1B01                <1> 	dw	kbEsc
  7315 00002A49 [E221]              <1> 	dw	inputbox_cancel
  7316                              <1> 
  7317 00002A4B 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7318 00002A4C 0D1C                <1> 	dw	kbEnter
  7319 00002A4E [EA21]              <1> 	dw	inputbox_enter
  7320                              <1> 
  7321 00002A50 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7322 00002A51 0DE0                <1> 	dw	kbEnhEnter
  7323 00002A53 [EA21]              <1> 	dw	inputbox_enter
  7324                              <1> 
  7325                              <1> .end_of_table
  7326                              <1> 
  7327                              <1> listbox_action_table:
  7328 00002A55 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7329 00002A56 0D1C                <1> 	dw	kbEnter
  7330 00002A58 0000                <1> 	dw	0
  7331                              <1> 
  7332 00002A5A 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7333 00002A5B 0DE0                <1> 	dw	kbEnhEnter
  7334 00002A5D 0000                <1> 	dw	0
  7335                              <1> 
  7336 00002A5F 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7337 00002A60 1B01                <1> 	dw	kbEsc
  7338 00002A62 [7225]              <1> 	dw	listbox_cancel
  7339                              <1> .end_of_table
  7340                              <1> 
  7341                              <1> menubox_def_action_table:
  7342 00002A64 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7343 00002A65 0048                <1> 	dw	kbUp
  7344 00002A67 [9124]              <1> 	dw	menubox_focus_up
  7345                              <1> 
  7346 00002A69 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7347 00002A6A E048                <1> 	dw	kbEnhUp
  7348 00002A6C [9124]              <1> 	dw	menubox_focus_up
  7349                              <1> 
  7350 00002A6E 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7351 00002A6F 0050                <1> 	dw	kbDown
  7352 00002A71 [BD24]              <1> 	dw	menubox_focus_down
  7353                              <1> 
  7354 00002A73 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7355 00002A74 E050                <1> 	dw	kbEnhDown
  7356 00002A76 [BD24]              <1> 	dw	menubox_focus_down
  7357                              <1> 
  7358 00002A78 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7359 00002A79 0049                <1> 	dw	kbPgUp
  7360 00002A7B [A324]              <1> 	dw	menubox_focus_pageup
  7361                              <1> 
  7362 00002A7D 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7363 00002A7E 0051                <1> 	dw	kbPgDn
  7364 00002A80 [CF24]              <1> 	dw	menubox_focus_pagedown
  7365                              <1> 
  7366 00002A82 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7367 00002A83 0D1C                <1> 	dw	kbEnter
  7368 00002A85 [6524]              <1> 	dw	menubox_do_focus
  7369                              <1> 
  7370 00002A87 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7371 00002A88 0DE0                <1> 	dw	kbEnhEnter
  7372 00002A8A [6524]              <1> 	dw	menubox_do_focus
  7373                              <1> 
  7374 00002A8C 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7375 00002A8D 1B01                <1> 	dw	kbEsc
  7376 00002A8F 0000                <1> 	dw	0
  7377                              <1> 
  7378 00002A91 01                  <1>         db      ACTFLAG_CLOSE_WIN
  7379 00002A92 08F2                <1>         dw      EVENT_ALT_RELEASE
  7380 00002A94 0000                <1>         dw      0
  7381                              <1> .end_of_table
  7382                              <1> 
  7383                              <1> 
  7384                              <1> 
  7385                              <1> ; ===========================================================================
  7386                              <1> %ifndef MAIN
  7387                              <1> 
  7388                              <1> ; how to draw window frame
  7389                              <1> keyboard_type       db  0x10       ; keyboard type, 0x10 = enhanced keyboard
  7390                              <1> draw_frame_method   db  0          ; = 0 means draw all frame using frame attr.
  7391                              <1>                                    ; = 1 means draw top horizontal line using
  7392                              <1>                                    ;     title attr.
  7393                              <1>                                    ; = 2 means draw top corner and horizontal
  7394                              <1>                                    ;     line using title attr.
  7395                              <1> color:
  7396                              <1> .win_title_inactive db  0x70        ; title attribute for inactive window.
  7397                              <1> 
  7398                              <1> .list_box:
  7399                              <1> .list_box_frame      db  0x30
  7400                              <1> .list_box_title      db  0xBF
  7401                              <1> .list_box_header     db  0x30
  7402                              <1> .list_box_normal     dw  0x3C30
  7403                              <1> .list_box_focus      dw  0x0C0F
  7404                              <1> .list_box_scrollbar  db  0x3F
  7405                              <1> 
  7406                              <1> .input_box:
  7407                              <1> .input_box_frame        db  0xB0        ;
  7408                              <1> .input_box_title        db  0xF1        ; input box
  7409                              <1> .input_box_msg          db  0xB0        ;
  7410                              <1> 
  7411                              <1> .error_box:
  7412                              <1> .error_box_frame        db  0xCF        ;
  7413                              <1> .error_box_title        db  0xF1        ; error box
  7414                              <1> .error_box_msg          db  0xCF        ;
  7415                              <1> 
  7416                              <1> .info_box:
  7417                              <1> .info_box_frame         db  0xB0        ;
  7418                              <1> .info_box_title         db  0xF1        ; info box
  7419                              <1> .info_box_msg           db  0xB0        ;
  7420                              <1> 
  7421                              <1> 
  7422                              <1> 
  7423                              <1> frame_char:
  7424                              <1> .top             db     0x020
  7425                              <1> .bottom          db     0x0CD
  7426                              <1> .left            db     0x0BA
  7427                              <1> .right           db     0x0BA
  7428                              <1> .tl_corner       db     0x0C9               ; top left corner
  7429                              <1> .tr_corner       db     0x0BB               ; top right corner
  7430                              <1> .bl_corner       db     0x0C8               ; bottom left corner
  7431                              <1> .br_corner       db     0x0BC               ; bottom right corner
  7432                              <1> 
  7433                              <1> size:
  7434                              <1> .box_width       db  5
  7435                              <1> .box_height      db  4
  7436                              <1> 
  7437                              <1> str_idx:
  7438                              <1> .input          dw  string.input
  7439                              <1> 
  7440                              <1> string:
  7441                              <1> .input          db     'Input',0
  7442                              <1> 
  7443                              <1> 	section .bss
  7444                              <1> %include "tempdata.asm"
  7445                              <1> 
  7446                              <1> %endif
  7447                              <1> 
  7448                              <1> %endif	;End of HAVE_UI
  7449                              <1> 
  7450                              <1> ; vi:nowrap
  7451                                  %include "utils.asm"
  7452                              <1> ; asmsyntax=nasm
  7453                              <1> ;
  7454                              <1> ; utils.asm
  7455                              <1> ;
  7456                              <1> ; Some utility functions
  7457                              <1> ;
  7458                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
  7459                              <1> ;
  7460                              <1> 
  7461                              <1> %ifndef HAVE_UTILS
  7462                              <1> %define HAVE_UTILS
  7463                              <1> 
  7464                              <1> %ifndef MAIN
  7465                              <1> %include "evtcode.h"
  7466                              <1> %endif
  7467                              <1> 
  7468                              <1> ;=============================================================================
  7469                              <1> ;itoa ---- convert integer to ascii string (the string is zero ending)
  7470                              <1> ;input:
  7471                              <1> ;      ax = the integer to be converted
  7472                              <1> ;      cl = max length of the integer
  7473                              <1> ;      es:di -> buffer
  7474                              <1> ;output:
  7475                              <1> ;      none
  7476                              <1> ;=============================================================================
  7477                              <1> itoa:
  7478 00002A96 60                  <1>         pusha
  7479 00002A97 30ED                <1>         xor ch, ch
  7480 00002A99 01CF                <1>         add di, cx
  7481 00002A9B C60500              <1>         mov byte [di], 0
  7482 00002A9E BB0A00              <1>         mov bx, 10
  7483                              <1> .loop_itoa:
  7484 00002AA1 31D2                <1>         xor dx, dx
  7485 00002AA3 4F                  <1>         dec di
  7486 00002AA4 F7F3                <1>         div bx
  7487 00002AA6 80C230              <1>         add dl, '0'
  7488 00002AA9 8815                <1>         mov [di], dl
  7489 00002AAB 49                  <1>         dec cx
  7490 00002AAC 09C0                <1>         or ax, ax
  7491 00002AAE 7404                <1>         jz .end_itoa
  7492 00002AB0 09C9                <1>         or cx, cx
  7493 00002AB2 75ED                <1>         jnz .loop_itoa
  7494                              <1> .end_itoa:
  7495 00002AB4 09C9                <1>         or cx, cx
  7496 00002AB6 7406                <1>         jz .end
  7497                              <1> .loop_fillspace:
  7498 00002AB8 4F                  <1>         dec di
  7499 00002AB9 C60520              <1>         mov byte [di], ' '
  7500 00002ABC E2FA                <1>         loop .loop_fillspace
  7501                              <1> .end:
  7502 00002ABE 61                  <1>         popa
  7503 00002ABF C3                  <1>         ret
  7504                              <1> 
  7505                              <1> ;=============================================================================
  7506                              <1> ;atoi ---- convert ascii string to integer (the string is zero ending)
  7507                              <1> ;input:
  7508                              <1> ;      ds:si -> buffer
  7509                              <1> ;output:
  7510                              <1> ;      ax = convert result ( <= 65535 )
  7511                              <1> ;=============================================================================
  7512                              <1> atoi:
  7513 00002AC0 53                  <1> 	push bx
  7514 00002AC1 51                  <1> 	push cx
  7515                              <1> 
  7516 00002AC2 31DB                <1> 	xor bx, bx
  7517 00002AC4 31C0                <1> 	xor ax, ax
  7518                              <1> 
  7519                              <1> .loop_conv:
  7520 00002AC6 AC                  <1> 	lodsb
  7521 00002AC7 08C0                <1> 	or al, al
  7522 00002AC9 7413                <1> 	jz .end
  7523 00002ACB 2C30                <1> 	sub al, '0'
  7524 00002ACD 3C0A                <1> 	cmp al, 10
  7525 00002ACF 730D                <1> 	jae .end
  7526                              <1> 
  7527 00002AD1 89D9                <1> 	mov cx, bx
  7528 00002AD3 C1E303              <1>         shl bx, 3                   ; bx = bx * 10
  7529 00002AD6 D1E1                <1>         shl cx, 1                   ;
  7530 00002AD8 01CB                <1>         add bx, cx                  ;
  7531 00002ADA 01C3                <1> 	add bx, ax
  7532 00002ADC EBE8                <1> 	jmp short .loop_conv
  7533                              <1> 
  7534                              <1> .end:
  7535 00002ADE 89D8                <1> 	mov ax, bx
  7536 00002AE0 4E                  <1> 	dec si
  7537 00002AE1 59                  <1> 	pop cx
  7538 00002AE2 5B                  <1> 	pop bx
  7539 00002AE3 C3                  <1> 	ret
  7540                              <1> 
  7541                              <1> ;=============================================================================
  7542                              <1> ;strlen ---- Count Length of a zero ending string
  7543                              <1> ;input:
  7544                              <1> ;      ds:si -> string
  7545                              <1> ;output:
  7546                              <1> ;      cx = length (not include the ending zero)
  7547                              <1> ;=============================================================================
  7548                              <1> strlen:
  7549 00002AE4 50                  <1>         push ax
  7550 00002AE5 31C9                <1>         xor cx,cx
  7551                              <1> 
  7552 00002AE7 09F6                <1>         or si,si
  7553 00002AE9 740A                <1>         jz .end
  7554                              <1> 
  7555 00002AEB 56                  <1>         push si
  7556 00002AEC FC                  <1>         cld
  7557                              <1> .loop_count:
  7558 00002AED 41                  <1>         inc cx
  7559 00002AEE AC                  <1>         lodsb
  7560 00002AEF 08C0                <1>         or al, al
  7561 00002AF1 75FA                <1>         jnz .loop_count
  7562                              <1> 
  7563 00002AF3 49                  <1>         dec cx
  7564 00002AF4 5E                  <1>         pop si
  7565                              <1> 
  7566                              <1> .end:
  7567 00002AF5 58                  <1>         pop ax
  7568 00002AF6 C3                  <1>         ret
  7569                              <1> 
  7570                              <1> ;=============================================================================
  7571                              <1> ;strlen_hl ---- Count Length of a zero ending string (ignore ~ chars)
  7572                              <1> ;input:
  7573                              <1> ;      ds:si -> string
  7574                              <1> ;output:
  7575                              <1> ;      cx = length (not include the ending zero)
  7576                              <1> ;=============================================================================
  7577                              <1> strlen_hl:
  7578 00002AF7 50                  <1>         push ax
  7579 00002AF8 31C9                <1>         xor cx,cx
  7580                              <1> 
  7581 00002AFA 09F6                <1>         or si,si
  7582 00002AFC 740E                <1>         jz .end
  7583                              <1> 
  7584 00002AFE 56                  <1>         push si
  7585 00002AFF FC                  <1>         cld
  7586                              <1> .loop_count:
  7587 00002B00 41                  <1>         inc cx
  7588                              <1> 
  7589                              <1> .loop_nocount:
  7590 00002B01 AC                  <1>         lodsb
  7591 00002B02 3C7E                <1>         cmp al, '~'
  7592 00002B04 74FB                <1>         je .loop_nocount
  7593 00002B06 08C0                <1>         or al, al
  7594 00002B08 75F6                <1>         jnz .loop_count
  7595                              <1> 
  7596 00002B0A 49                  <1>         dec cx
  7597 00002B0B 5E                  <1>         pop si
  7598                              <1> 
  7599                              <1> .end:
  7600 00002B0C 58                  <1>         pop ax
  7601 00002B0D C3                  <1>         ret
  7602                              <1> 
  7603                              <1> ;=============================================================================
  7604                              <1> ;strchr ---- search a char in a string
  7605                              <1> ;input:
  7606                              <1> ;      al = the char to be searched
  7607                              <1> ;      cx = length of the string
  7608                              <1> ;      es:di -> string
  7609                              <1> ;output:
  7610                              <1> ;      cf = 0 the char was found
  7611                              <1> ;            cx = offset of the char
  7612                              <1> ;      cf = 1 the char was not found
  7613                              <1> ;            cx = length of the string
  7614                              <1> ;=============================================================================
  7615                              <1> strchr:
  7616 00002B0E 53                  <1>         push bx
  7617 00002B0F 57                  <1>         push di
  7618 00002B10 89CB                <1>         mov bx,cx
  7619 00002B12 FC                  <1>         cld
  7620 00002B13 F2AE                <1>         repnz scasb
  7621 00002B15 5F                  <1>         pop di
  7622 00002B16 87D9                <1>         xchg bx, cx
  7623 00002B18 7506                <1>         jnz .not_found
  7624 00002B1A 29D9                <1>         sub cx, bx
  7625 00002B1C 49                  <1>         dec cx
  7626 00002B1D 5B                  <1>         pop bx
  7627 00002B1E F8                  <1>         clc
  7628 00002B1F C3                  <1>         ret
  7629                              <1> .not_found:
  7630 00002B20 5B                  <1>         pop bx
  7631 00002B21 F9                  <1>         stc
  7632 00002B22 C3                  <1>         ret
  7633                              <1> 
  7634                              <1> ;=============================================================================
  7635                              <1> ;strncpy ---- copy strings
  7636                              <1> ;input:
  7637                              <1> ;      cx = max number of chars to be copied
  7638                              <1> ;      ds:si -> source string
  7639                              <1> ;      es:di -> dest string
  7640                              <1> ;output:
  7641                              <1> ;      cx = number of chars actually copied (not include the ending zero char)
  7642                              <1> ;      es:di -> point to next char of the end of dest string and set it to
  7643                              <1> ;               zero
  7644                              <1> ;=============================================================================
  7645                              <1> strncpy:
  7646 00002B23 56                  <1>         push si
  7647 00002B24 50                  <1>         push ax
  7648 00002B25 53                  <1>         push bx
  7649 00002B26 89CB                <1>         mov bx, cx
  7650 00002B28 FC                  <1>         cld
  7651                              <1> .loop_copy:
  7652 00002B29 AC                  <1>         lodsb
  7653 00002B2A AA                  <1>         stosb
  7654 00002B2B 08C0                <1>         or al, al
  7655 00002B2D 7405                <1>         jz .end
  7656 00002B2F E2F8                <1>         loop .loop_copy
  7657 00002B31 30C0                <1>         xor al, al
  7658 00002B33 AA                  <1>         stosb
  7659                              <1> .end:
  7660 00002B34 4F                  <1>         dec di
  7661 00002B35 87D9                <1>         xchg bx, cx
  7662 00002B37 29D9                <1>         sub cx, bx
  7663 00002B39 5B                  <1>         pop bx
  7664 00002B3A 58                  <1>         pop ax
  7665 00002B3B 5E                  <1>         pop si
  7666 00002B3C C3                  <1>         ret
  7667                              <1> 
  7668                              <1> ;=============================================================================
  7669                              <1> ;strcpy ---- copy strings
  7670                              <1> ;input:
  7671                              <1> ;      ds:si -> source string
  7672                              <1> ;      es:di -> dest string
  7673                              <1> ;output:
  7674                              <1> ;      es:di -> point to next char of the end of dest string and set it to
  7675                              <1> ;               zero
  7676                              <1> ;=============================================================================
  7677                              <1> strcpy:
  7678 00002B3D 56                  <1>         push si
  7679 00002B3E 50                  <1>         push ax
  7680                              <1> 
  7681 00002B3F FC                  <1>         cld
  7682                              <1> .loop_copy:
  7683 00002B40 AC                  <1>         lodsb
  7684 00002B41 AA                  <1>         stosb
  7685 00002B42 08C0                <1>         or al, al
  7686 00002B44 75FA                <1> 	jnz .loop_copy
  7687                              <1> 
  7688 00002B46 4F                  <1>         dec di
  7689 00002B47 58                  <1>         pop ax
  7690 00002B48 5E                  <1>         pop si
  7691 00002B49 C3                  <1>         ret
  7692                              <1> 
  7693                              <1> 
  7694                              <1> ;=============================================================================
  7695                              <1> ;calc_password ---- calculate the password
  7696                              <1> ;input:
  7697                              <1> ;      ds:si -> the pasword string (zero ending)
  7698                              <1> ;      cx = max length of the password
  7699                              <1> ;output:
  7700                              <1> ;      dx:ax = the encrypted password (32 bits)
  7701                              <1> ;=============================================================================
  7702                              <1> calc_password:
  7703 00002B4A 56                  <1>         push si
  7704 00002B4B 6631D2              <1>         xor edx, edx
  7705 00002B4E 6631C0              <1>         xor eax, eax
  7706 00002B51 FC                  <1>         cld
  7707                              <1> .loop_calc:
  7708 00002B52 AC                  <1>         lodsb
  7709 00002B53 08C0                <1>         or al, al
  7710 00002B55 740E                <1>         jz .end
  7711 00002B57 F6D0                <1>         not al
  7712 00002B59 C0C004              <1>         rol al, 4
  7713 00002B5C 6601C2              <1>         add edx, eax
  7714 00002B5F 66C1C202            <1>         rol edx, 2
  7715 00002B63 E2ED                <1>         loop .loop_calc
  7716                              <1> .end:
  7717 00002B65 89D0                <1>         mov ax, dx
  7718 00002B67 66C1CA10            <1>         ror edx, 16
  7719 00002B6B 5E                  <1>         pop si
  7720 00002B6C C3                  <1>         ret
  7721                              <1> 
  7722                              <1> ;=============================================================================
  7723                              <1> ;htoa ---- hex to ascii
  7724                              <1> ;input:
  7725                              <1> ;     ax = hex number
  7726                              <1> ;     cl = length of hex number (1 to 4)
  7727                              <1> ;     es:di -> buffer to store ascii string
  7728                              <1> ;output:
  7729                              <1> ;     es:di -> ascii string
  7730                              <1> ;=============================================================================
  7731                              <1> htoa:
  7732 00002B6D 60                  <1>         pusha
  7733 00002B6E 30ED                <1>         xor ch, ch
  7734 00002B70 01CF                <1>         add di, cx
  7735 00002B72 C60500              <1>         mov byte [di], 0
  7736                              <1> 
  7737                              <1> .loop_conv:
  7738 00002B75 50                  <1> 	push ax                 ;Save AX
  7739 00002B76 240F                <1> 	and al,0Fh              ;Keep 4 bits
  7740 00002B78 3C0A                <1> 	cmp al,0Ah              ;Compute the hex digit,
  7741 00002B7A 1C69                <1> 	sbb al,69h              ;using Improved Allison's Algorithm
  7742 00002B7C 2F                  <1> 	das
  7743 00002B7D 4F                  <1> 	dec di
  7744 00002B7E 8805                <1> 	mov [di], al
  7745 00002B80 58                  <1> 	pop ax                  ;Restore AX
  7746 00002B81 C1E804              <1> 	shr ax,4                ;Shift it over
  7747 00002B84 E2EF                <1>         loop .loop_conv
  7748                              <1> 
  7749 00002B86 61                  <1>         popa
  7750 00002B87 C3                  <1>         ret
  7751                              <1> 
  7752                              <1> ;=============================================================================
  7753                              <1> ;atoh ---- ascii to hex
  7754                              <1> ;input:
  7755                              <1> ;     ds:si -> buffer
  7756                              <1> ;output:
  7757                              <1> ;     ax = hex
  7758                              <1> ;     ds:si -> end of the hex number
  7759                              <1> ;=============================================================================
  7760                              <1> atoh:
  7761 00002B88 53                  <1> 	push bx
  7762                              <1> 
  7763 00002B89 31DB                <1> 	xor bx, bx
  7764 00002B8B 31C0                <1> 	xor ax, ax
  7765                              <1> .loop_conv:
  7766 00002B8D AC                  <1> 	lodsb
  7767 00002B8E 08C0                <1> 	or al, al
  7768 00002B90 7419                <1> 	jz .end
  7769                              <1> 
  7770 00002B92 2C30                <1> 	sub al, '0'
  7771 00002B94 3C0A                <1> 	cmp al, 10
  7772 00002B96 720C                <1> 	jb .ok
  7773 00002B98 2C07                <1> 	sub al, 'A'-'0'-10
  7774 00002B9A 3C10                <1> 	cmp al, 16
  7775 00002B9C 7206                <1> 	jb .ok
  7776 00002B9E 2C20                <1> 	sub al, 'a'-'A'
  7777 00002BA0 3C10                <1> 	cmp al, 16
  7778 00002BA2 7307                <1> 	jae .end
  7779                              <1> 
  7780                              <1> .ok:
  7781 00002BA4 C1E304              <1> 	shl bx, 4
  7782 00002BA7 01C3                <1> 	add bx, ax
  7783 00002BA9 EBE2                <1> 	jmp .loop_conv
  7784                              <1> 
  7785                              <1> .end:
  7786 00002BAB 4E                  <1> 	dec si
  7787 00002BAC 89D8                <1> 	mov ax, bx
  7788 00002BAE 5B                  <1>         pop bx
  7789 00002BAF C3                  <1>         ret
  7790                              <1> 
  7791                              <1> ;=============================================================================
  7792                              <1> ;count_lines ---- count how many lines in a string.
  7793                              <1> ;input:
  7794                              <1> ;      ds:si -> string
  7795                              <1> ;output:
  7796                              <1> ;      ch = number of lines
  7797                              <1> ;      cl = max line length
  7798                              <1> ;=============================================================================
  7799                              <1> count_lines:
  7800 00002BB0 56                  <1>         push si
  7801 00002BB1 53                  <1>         push bx
  7802 00002BB2 50                  <1>         push ax
  7803                              <1> 
  7804 00002BB3 FC                  <1>         cld
  7805                              <1> 
  7806 00002BB4 31C9                <1>         xor cx, cx
  7807 00002BB6 31DB                <1>         xor bx, bx
  7808                              <1> 
  7809 00002BB8 09F6                <1>         or si, si
  7810 00002BBA 7423                <1>         jz .end
  7811                              <1> 
  7812 00002BBC FEC5                <1>         inc ch
  7813                              <1> .loop_count:
  7814 00002BBE AC                  <1>         lodsb
  7815 00002BBF 08C0                <1>         or al, al
  7816 00002BC1 7416                <1>         jz .ending
  7817                              <1> 
  7818 00002BC3 3C0D                <1>         cmp al, 0x0d
  7819 00002BC5 7404                <1>         je .new_line
  7820                              <1> 
  7821 00002BC7 FEC3                <1>         inc bl
  7822 00002BC9 EBF3                <1>         jmp short .loop_count
  7823                              <1> 
  7824                              <1> .new_line:
  7825 00002BCB FEC5                <1>         inc ch
  7826                              <1> 
  7827 00002BCD 88DF                <1>         mov bh, bl
  7828 00002BCF 30DB                <1>         xor bl, bl
  7829 00002BD1 38CF                <1>         cmp bh, cl
  7830 00002BD3 76E9                <1>         jbe .loop_count
  7831 00002BD5 88F9                <1>         mov cl, bh
  7832 00002BD7 EBE5                <1>         jmp short .loop_count
  7833                              <1> 
  7834                              <1> .ending:
  7835 00002BD9 38CB                <1>         cmp bl, cl
  7836 00002BDB 7602                <1>         jbe .end
  7837 00002BDD 88D9                <1>         mov cl, bl
  7838                              <1> 
  7839                              <1> .end:
  7840 00002BDF 58                  <1>         pop ax
  7841 00002BE0 5B                  <1>         pop bx
  7842 00002BE1 5E                  <1>         pop si
  7843 00002BE2 C3                  <1>         ret
  7844                              <1> 
  7845                              <1> ;=============================================================================
  7846                              <1> ; power_off ---- turn the power off
  7847                              <1> ;input:
  7848                              <1> ;       none
  7849                              <1> ;output:
  7850                              <1> ;       never return if successful.
  7851                              <1> ;       cf = 1 on error.
  7852                              <1> ;=============================================================================
  7853                              <1> power_off:
  7854 00002BE3 60                  <1>         pusha
  7855 00002BE4 E82D00              <1> 	call check_apm_bios
  7856 00002BE7 7229                <1>         jc .end
  7857                              <1> 
  7858 00002BE9 B80153              <1>         mov ax, 0x5301
  7859 00002BEC 31DB                <1>         xor bx, bx
  7860 00002BEE CD15                <1>         int 0x15
  7861 00002BF0 7220                <1>         jc .end
  7862                              <1> 
  7863 00002BF2 B88053              <1>         mov ax, 0x5380
  7864 00002BF5 B78C                <1>         mov bh, 0x8c
  7865 00002BF7 CD15                <1>         int 0x15
  7866                              <1> 
  7867 00002BF9 B84000              <1>         mov ax, 0x40
  7868 00002BFC BBD800              <1>         mov bx, 0xd8
  7869 00002BFF 1E                  <1>         push ds
  7870 00002C00 8ED8                <1>         mov ds, ax
  7871 00002C02 3E800F10            <1>         or byte [ds:bx], 0x10
  7872 00002C06 1F                  <1>         pop ds
  7873                              <1> 
  7874 00002C07 B80753              <1>         mov ax, 0x5307
  7875 00002C0A BB0100              <1>         mov bx, 1
  7876 00002C0D B90300              <1>         mov cx, 3
  7877 00002C10 CD15                <1>         int 0x15
  7878                              <1> 
  7879                              <1> .end:
  7880 00002C12 61                  <1>         popa
  7881 00002C13 C3                  <1>         ret
  7882                              <1> 
  7883                              <1> 
  7884                              <1> ;=============================================================================
  7885                              <1> ; check_apm_bios ---- check if the apm bios present
  7886                              <1> ; output:
  7887                              <1> ;	cf = 1 error, cf = 0 ok
  7888                              <1> ;=============================================================================
  7889                              <1> check_apm_bios:
  7890 00002C14 60                  <1>         pusha
  7891 00002C15 B80053              <1>         mov ax, 0x5300
  7892 00002C18 31DB                <1>         xor bx, bx
  7893 00002C1A CD15                <1>         int 0x15                                 ; check if apm present
  7894 00002C1C 720D                <1> 	jc .end
  7895 00002C1E 81FB4D50            <1> 	cmp bx, 0x504D
  7896 00002C22 7506                <1> 	jnz .none
  7897 00002C24 F7C10100            <1> 	test cx, 1
  7898 00002C28 7501                <1> 	jnz .end
  7899                              <1> .none:
  7900 00002C2A F9                  <1> 	stc
  7901                              <1> .end:
  7902 00002C2B 61                  <1> 	popa
  7903 00002C2C C3                  <1> 	ret
  7904                              <1> 
  7905                              <1> ;=============================================================================
  7906                              <1> ; leap_year ---- check if a year is leap a year
  7907                              <1> ; input:
  7908                              <1> ;      ax = year
  7909                              <1> ; output:
  7910                              <1> ;      cf = 1, it's a leap year
  7911                              <1> ;      cf = 0, not a leap year
  7912                              <1> ;=============================================================================
  7913                              <1> leap_year:
  7914 00002C2D 60                  <1>        pusha
  7915 00002C2E B99001              <1>        mov cx, 400
  7916 00002C31 31D2                <1>        xor dx, dx 
  7917 00002C33 50                  <1>        push ax
  7918 00002C34 F7F1                <1>        div cx
  7919 00002C36 58                  <1>        pop ax
  7920 00002C37 09D2                <1>        or dx, dx
  7921 00002C39 741B                <1>        jz .isleap
  7922                              <1> 
  7923 00002C3B B96400              <1>        mov cx, 100
  7924 00002C3E 31D2                <1>        xor dx, dx
  7925 00002C40 50                  <1>        push ax
  7926 00002C41 F7F1                <1>        div cx
  7927 00002C43 58                  <1>        pop ax
  7928 00002C44 09D2                <1>        or dx, dx
  7929 00002C46 740B                <1>        jz .noleap
  7930                              <1> 
  7931 00002C48 31D2                <1>        xor dx, dx
  7932 00002C4A B90400              <1>        mov cx, 4
  7933 00002C4D F7F1                <1>        div cx
  7934 00002C4F 09D2                <1>        or dx, dx
  7935 00002C51 7403                <1>        jz .isleap
  7936                              <1> 
  7937                              <1> .noleap:
  7938 00002C53 F8                  <1>        clc
  7939 00002C54 61                  <1>        popa
  7940 00002C55 C3                  <1>        ret
  7941                              <1> 
  7942                              <1> .isleap:
  7943 00002C56 F9                  <1>        stc
  7944 00002C57 61                  <1>        popa
  7945 00002C58 C3                  <1>        ret
  7946                              <1> 
  7947                              <1> ;=============================================================================
  7948                              <1> ; day_in_week
  7949                              <1> ; input:
  7950                              <1> ;      ax = year
  7951                              <1> ;      dh = month
  7952                              <1> ;      dl = day
  7953                              <1> ; output:
  7954                              <1> ;      cx = day in week
  7955                              <1> ;=============================================================================
  7956                              <1> day_in_week:
  7957 00002C59 50                  <1> 	push ax
  7958 00002C5A 53                  <1> 	push bx
  7959 00002C5B 52                  <1> 	push dx
  7960                              <1> 
  7961 00002C5C 52                  <1> 	push dx
  7962                              <1> 
  7963 00002C5D 48                  <1> 	dec ax
  7964 00002C5E 89C1                <1> 	mov cx, ax
  7965 00002C60 31D2                <1> 	xor dx, dx
  7966 00002C62 50                  <1> 	push ax
  7967 00002C63 BB0400              <1> 	mov bx, 4
  7968 00002C66 F7F3                <1> 	div bx
  7969 00002C68 01C1                <1> 	add cx, ax
  7970 00002C6A 58                  <1> 	pop ax
  7971                              <1> 
  7972 00002C6B 31D2                <1> 	xor dx, dx
  7973 00002C6D 50                  <1> 	push ax
  7974 00002C6E BB6400              <1> 	mov bx, 100
  7975 00002C71 F7F3                <1> 	div bx
  7976 00002C73 29C1                <1> 	sub cx, ax
  7977 00002C75 58                  <1> 	pop ax
  7978                              <1> 
  7979 00002C76 31D2                <1> 	xor dx, dx
  7980 00002C78 50                  <1> 	push ax
  7981 00002C79 BB9001              <1> 	mov bx, 400
  7982 00002C7C F7F3                <1> 	div bx
  7983 00002C7E 01C1                <1> 	add cx, ax
  7984 00002C80 58                  <1> 	pop ax
  7985                              <1> 
  7986 00002C81 40                  <1> 	inc ax
  7987 00002C82 5A                  <1> 	pop dx
  7988                              <1> 
  7989 00002C83 0FB6DE              <1> 	movzx bx, dh
  7990 00002C86 8A9F[A92C]          <1> 	mov bl, [days_in_month_norm-1+bx]
  7991 00002C8A 01D9                <1> 	add cx, bx 
  7992                              <1> 
  7993 00002C8C E89EFF              <1> 	call leap_year
  7994 00002C8F 7306                <1> 	jnc .norm
  7995 00002C91 80FE03              <1> 	cmp dh, 3
  7996                              <1> 
  7997 00002C94 7201                <1> 	jb .norm
  7998 00002C96 41                  <1> 	inc cx
  7999                              <1> 
  8000                              <1> .norm:
  8001 00002C97 30F6                <1> 	xor dh, dh
  8002 00002C99 01D1                <1> 	add cx, dx
  8003                              <1> 
  8004 00002C9B 89C8                <1> 	mov ax, cx
  8005 00002C9D 31D2                <1> 	xor dx, dx
  8006 00002C9F B90700              <1> 	mov cx, 7
  8007 00002CA2 F7F1                <1> 	div cx
  8008 00002CA4 89D1                <1> 	mov cx, dx
  8009                              <1> 
  8010 00002CA6 5A                  <1> 	pop dx
  8011 00002CA7 5B                  <1> 	pop bx
  8012 00002CA8 58                  <1> 	pop ax
  8013 00002CA9 C3                  <1> 	ret
  8014                              <1> 
  8015 00002CAA 000303060104060205- <1> days_in_month_norm db  0, 3, 3, 6, 1, 4, 6, 2, 5, 0, 3, 5
  8016 00002CB3 000305              <1>
  8017                              <1> 
  8018                              <1> ;=============================================================================
  8019                              <1> ; bcd_to_bin ---- convert bcd to binary
  8020                              <1> ; input: ax = bcd number
  8021                              <1> ; output: ax = binary number
  8022                              <1> ;=============================================================================
  8023                              <1> bcd_to_bin:
  8024 00002CB6 53                  <1>        push bx
  8025 00002CB7 51                  <1>        push cx
  8026 00002CB8 52                  <1>        push dx
  8027 00002CB9 56                  <1>        push si
  8028                              <1> 
  8029 00002CBA 8D36[DC2C]          <1>        lea si, [.mul_num]
  8030 00002CBE B90400              <1>        mov cx, 4
  8031 00002CC1 31DB                <1>        xor bx, bx
  8032                              <1> 
  8033                              <1> .loop_conv:
  8034 00002CC3 50                  <1>        push ax
  8035 00002CC4 83E00F              <1>        and ax, 0x000f
  8036 00002CC7 8B14                <1>        mov dx, [si]
  8037 00002CC9 F7E2                <1>        mul dx
  8038 00002CCB 01C3                <1>        add bx, ax
  8039 00002CCD 58                  <1>        pop ax
  8040 00002CCE C1E804              <1>        shr ax, 4
  8041 00002CD1 46                  <1>        inc si
  8042 00002CD2 46                  <1>        inc si
  8043 00002CD3 E2EE                <1>        loop .loop_conv
  8044                              <1> 
  8045 00002CD5 89D8                <1>        mov ax, bx
  8046                              <1> 
  8047 00002CD7 5E                  <1>        pop si
  8048 00002CD8 5A                  <1>        pop dx
  8049 00002CD9 59                  <1>        pop cx
  8050 00002CDA 5B                  <1>        pop bx
  8051 00002CDB C3                  <1>        ret
  8052                              <1> 
  8053 00002CDC 01000A006400E803    <1> .mul_num  dw 1, 10, 100, 1000
  8054                              <1> 
  8055                              <1> ;=============================================================================
  8056                              <1> ; bcd_to_str ---- convert bcd to string
  8057                              <1> ; input: ax = bcd number
  8058                              <1> ;        cl = length (0 to 4)
  8059                              <1> ;        es:di -> buffer
  8060                              <1> ; output: none
  8061                              <1> ;=============================================================================
  8062                              <1> bcd_to_str:
  8063 00002CE4 60                  <1>        pusha
  8064 00002CE5 51                  <1>        push cx
  8065 00002CE6 89C3                <1>        mov bx, ax
  8066 00002CE8 B004                <1>        mov al, 4
  8067 00002CEA F6E1                <1>        mul cl
  8068 00002CEC 88C1                <1>        mov cl, al
  8069 00002CEE D3CB                <1>        ror bx, cl
  8070 00002CF0 59                  <1>        pop cx
  8071                              <1> 
  8072                              <1> .loop_conv:
  8073 00002CF1 08C9                <1>        or cl, cl
  8074 00002CF3 740E                <1>        jz .end
  8075 00002CF5 C1C304              <1>        rol bx, 4
  8076 00002CF8 89D8                <1>        mov ax, bx
  8077 00002CFA 240F                <1>        and al, 0x0f
  8078 00002CFC 0430                <1>        add al, '0'
  8079 00002CFE AA                  <1>        stosb
  8080 00002CFF FEC9                <1>        dec cl
  8081 00002D01 EBEE                <1>        jmp .loop_conv
  8082                              <1> 
  8083                              <1> .end:
  8084 00002D03 30C0                <1>        xor al, al
  8085 00002D05 AA                  <1>        stosb
  8086 00002D06 61                  <1>        popa
  8087 00002D07 C3                  <1>        ret
  8088                              <1> 
  8089                              <1> ;=============================================================================
  8090                              <1> ; reboot ---- reboot the computer
  8091                              <1> ; input:
  8092                              <1> ;	none
  8093                              <1> ;=============================================================================
  8094                              <1> reboot:
  8095 00002D08 BB4000              <1>        mov bx, 0x40
  8096 00002D0B 53                  <1>        push bx
  8097 00002D0C 1F                  <1>        pop ds
  8098 00002D0D B83412              <1>        mov ax, 0x1234
  8099 00002D10 A37200              <1>        mov [0x0072], ax
  8100 00002D13 EA0000FFFF          <1>        jmp 0xFFFF:0x0000
  8101                              <1> 
  8102                              <1> ;=============================================================================
  8103                              <1> ; bioskey ---- BIOS keyboard func
  8104                              <1> ;=============================================================================
  8105                              <1> bioskey:
  8106 00002D18 C606[052F]00        <1>        mov byte [utils_tmp.kbd_work], 0
  8107 00002D1D 08E4                <1>        or ah, ah
  8108 00002D1F 740F                <1>        je .post_trans
  8109 00002D21 80FC01              <1>        cmp ah, 0x01
  8110 00002D24 740A                <1>        je .post_trans
  8111 00002D26 80FC10              <1>        cmp ah, 0x10
  8112 00002D29 7405                <1>        je .post_trans
  8113 00002D2B 80FC11              <1>        cmp ah, 0x11
  8114 00002D2E 7504                <1>        jne .call_int16
  8115                              <1> 
  8116                              <1> .post_trans:
  8117 00002D30 FE06[052F]          <1>        inc byte [utils_tmp.kbd_work]
  8118                              <1> 
  8119                              <1> .call_int16:
  8120 00002D34 CD16                <1>        int 0x16
  8121 00002D36 9C                  <1>        pushf
  8122                              <1> 
  8123 00002D37 803E[052F]00        <1>        cmp byte [utils_tmp.kbd_work], 0
  8124 00002D3C 741E                <1>        jz .end
  8125                              <1> 
  8126 00002D3E 51                  <1>        push cx
  8127 00002D3F 56                  <1>        push si
  8128 00002D40 8B0E[024A]          <1>        mov cx, [keymap.number]
  8129 00002D44 8B36[044A]          <1>        mov si, [keymap.data]
  8130 00002D48 09C9                <1>        or cx, cx
  8131 00002D4A 740E                <1>        jz .end_trans
  8132                              <1> 
  8133                              <1> .loop_trans:
  8134 00002D4C 3B04                <1>        cmp ax, [si]
  8135 00002D4E 7505                <1>        jne .loop_next
  8136 00002D50 8B4402              <1>        mov ax, [si+2]
  8137 00002D53 EB05                <1>        jmp short .end_trans
  8138                              <1> .loop_next:
  8139 00002D55 83C604              <1>        add si, 4
  8140 00002D58 E2F2                <1>        loop .loop_trans
  8141                              <1> .end_trans:
  8142 00002D5A 5E                  <1>        pop si
  8143 00002D5B 59                  <1>        pop cx
  8144                              <1> .end:
  8145 00002D5C 9D                  <1>        popf       
  8146 00002D5D C3                  <1>        ret
  8147                              <1> 
  8148                              <1> ;=============================================================================
  8149                              <1> ; check_keyevent ---- check if keyboard is pressed
  8150                              <1> ; input:
  8151                              <1> ;	none
  8152                              <1> ; output:
  8153                              <1> ;	ax = keyevent (0 = no key)
  8154                              <1> ;=============================================================================
  8155                              <1> check_keyevent:
  8156 00002D5E 53                  <1> 	push bx
  8157                              <1> 
  8158 00002D5F 8A3E[062F]          <1> 	mov bh, [utils_tmp.kbd_last_shift]
  8159 00002D63 E85200              <1> 	call .check_stat_key
  8160 00002D66 88C3                <1> 	mov bl, al
  8161 00002D68 A2[062F]            <1> 	mov [utils_tmp.kbd_last_shift], al
  8162                              <1> 
  8163 00002D6B E85600              <1> 	call .check_norm_key
  8164 00002D6E 09C0                <1> 	or ax, ax
  8165 00002D70 7407                <1> 	jz .no_norm_key
  8166                              <1> 
  8167 00002D72 C606[072F]01        <1> 	mov byte [utils_tmp.kbd_bypass_next_shift], 1
  8168                              <1> .end:
  8169 00002D77 5B                  <1> 	pop bx
  8170 00002D78 C3                  <1> 	ret
  8171                              <1> 
  8172                              <1> .no_norm_key:
  8173 00002D79 31C0                <1> 	xor ax, ax
  8174 00002D7B 38FB                <1> 	cmp bl, bh
  8175 00002D7D 74F8                <1> 	je .end
  8176                              <1> 
  8177 00002D7F 51                  <1> 	push cx
  8178 00002D80 B90101              <1> 	mov cx, 0x0101
  8179                              <1> 
  8180                              <1> .loop_check_keys:
  8181 00002D83 53                  <1> 	push bx
  8182 00002D84 21CB                <1> 	and bx, cx
  8183 00002D86 38DF                <1> 	cmp bh, bl
  8184 00002D88 5B                  <1> 	pop bx
  8185                              <1> 
  8186 00002D89 740E                <1> 	je .no_this_key
  8187                              <1> 
  8188 00002D8B 84CB                <1> 	test bl, cl
  8189 00002D8D 7404                <1> 	jz .release
  8190 00002D8F B4F1                <1> 	mov ah, (EVTCODE_COMMAND | EVTCODE_KEYPRESS)
  8191 00002D91 EB02                <1> 	jmp short .key_ok
  8192                              <1> 
  8193                              <1> .release:
  8194 00002D93 B4F2                <1> 	mov ah, (EVTCODE_COMMAND | EVTCODE_KEYRELEASE)
  8195                              <1> 
  8196                              <1> .key_ok:
  8197 00002D95 88C8                <1> 	mov al, cl
  8198 00002D97 EB06                <1> 	jmp short .end_check_keys
  8199                              <1> 
  8200                              <1> .no_this_key:
  8201 00002D99 D1E1                <1> 	shl cx, 1
  8202 00002D9B 08C9                <1> 	or cl, cl
  8203 00002D9D 75E4                <1> 	jnz .loop_check_keys
  8204                              <1> 
  8205                              <1> .end_check_keys:
  8206 00002D9F 09C0                <1> 	or ax, ax
  8207 00002DA1 7412                <1> 	jz .end_stat
  8208                              <1> 
  8209 00002DA3 A8F0                <1> 	test al, kbStateKeysMask
  8210 00002DA5 7509                <1> 	jnz .dont_bypass
  8211                              <1> 
  8212 00002DA7 803E[072F]00        <1> 	cmp byte [utils_tmp.kbd_bypass_next_shift], 0
  8213 00002DAC 7407                <1> 	jz .end_stat
  8214                              <1> 
  8215 00002DAE 31C0                <1> 	xor ax, ax
  8216                              <1> 
  8217                              <1> .dont_bypass:
  8218 00002DB0 C606[072F]00        <1> 	mov byte [utils_tmp.kbd_bypass_next_shift], 0
  8219                              <1> 
  8220                              <1> .end_stat:
  8221 00002DB5 59                  <1> 	pop cx
  8222 00002DB6 5B                  <1> 	pop bx
  8223 00002DB7 C3                  <1> 	ret
  8224                              <1> 
  8225                              <1> .check_stat_key:
  8226 00002DB8 53                  <1> 	push bx
  8227 00002DB9 B402                <1> 	mov ah, 2
  8228 00002DBB 0A26[AA49]          <1> 	or ah, [keyboard_type]
  8229 00002DBF E856FF              <1> 	call bioskey
  8230 00002DC2 5B                  <1> 	pop bx
  8231 00002DC3 C3                  <1> 	ret
  8232                              <1> 
  8233                              <1> .check_norm_key:
  8234 00002DC4 53                  <1> 	push bx
  8235 00002DC5 B401                <1>         mov ah,1                                        ; if no key pressed
  8236 00002DC7 0A26[AA49]          <1>         or ah, [keyboard_type]
  8237 00002DCB E84AFF              <1>         call bioskey                                    ; go back to check
  8238 00002DCE 7409                <1> 	jz .no_key
  8239 00002DD0 8A26[AA49]          <1> 	mov ah, [keyboard_type]
  8240 00002DD4 E841FF              <1> 	call bioskey
  8241 00002DD7 5B                  <1> 	pop bx
  8242 00002DD8 C3                  <1> 	ret
  8243                              <1> 
  8244                              <1> .no_key:
  8245 00002DD9 31C0                <1> 	xor ax, ax
  8246 00002DDB 5B                  <1> 	pop bx
  8247 00002DDC C3                  <1> 	ret
  8248                              <1> 
  8249                              <1> ;=============================================================================
  8250                              <1> ;get_realtime ---- get the machine real time in minutes
  8251                              <1> ;input:
  8252                              <1> ;      none
  8253                              <1> ;output:
  8254                              <1> ;      cf = 0 success, ax = real time in minutes, dx = day (set a bit)
  8255                              <1> ;      cf = 1 failed
  8256                              <1> ;=============================================================================
  8257                              <1> get_realtime:
  8258 00002DDD 53                  <1>         push bx
  8259 00002DDE 51                  <1>         push cx
  8260                              <1> 
  8261 00002DDF B404                <1>         mov ah, 0x04
  8262 00002DE1 CD1A                <1>         int 0x1a
  8263 00002DE3 723C                <1>         jc .end
  8264                              <1> 
  8265 00002DE5 0FB6C6              <1>         movzx ax, dh
  8266 00002DE8 E8CBFE              <1>         call bcd_to_bin
  8267 00002DEB 88C6                <1>         mov dh, al
  8268 00002DED 88D0                <1>         mov al, dl
  8269 00002DEF E8C4FE              <1>         call bcd_to_bin
  8270 00002DF2 88C2                <1>         mov dl, al
  8271                              <1> 
  8272 00002DF4 89C8                <1>         mov ax, cx
  8273 00002DF6 E8BDFE              <1>         call bcd_to_bin
  8274                              <1> 
  8275 00002DF9 E85DFE              <1>         call day_in_week
  8276                              <1> 
  8277 00002DFC BA0100              <1>         mov dx, 1
  8278 00002DFF D3E2                <1>         shl dx, cl
  8279                              <1> 
  8280 00002E01 52                  <1>         push dx
  8281 00002E02 B402                <1>         mov ah, 0x02
  8282 00002E04 CD1A                <1>         int 0x1a
  8283 00002E06 5A                  <1>         pop dx
  8284 00002E07 7218                <1>         jc .end
  8285                              <1> 
  8286 00002E09 0FB6C5              <1>         movzx ax, ch
  8287 00002E0C E8A7FE              <1>         call bcd_to_bin
  8288 00002E0F 88C5                <1>         mov ch, al
  8289                              <1> 
  8290 00002E11 88C8                <1>         mov al, cl
  8291 00002E13 E8A0FE              <1>         call bcd_to_bin
  8292 00002E16 88C1                <1>         mov cl, al
  8293                              <1> 
  8294                              <1> ;convert hour and minute into minute
  8295 00002E18 B03C                <1>         mov al, 60
  8296 00002E1A F6E5                <1>         mul ch
  8297 00002E1C 30ED                <1>         xor ch, ch
  8298 00002E1E 01C8                <1>         add ax, cx
  8299                              <1> 
  8300 00002E20 F8                  <1>         clc
  8301                              <1> .end:
  8302 00002E21 59                  <1>         pop cx
  8303 00002E22 5B                  <1>         pop bx
  8304                              <1> 
  8305 00002E23 C3                  <1>         ret
  8306                              <1> 
  8307                              <1> 
  8308                              <1> ;=============================================================================
  8309                              <1> ; get_current_time_string ---- get current time string
  8310                              <1> ; input: al = show method, es:di -> buffer
  8311                              <1> ;=============================================================================
  8312                              <1> get_current_time_string:
  8313 00002E24 60                  <1>        pusha
  8314 00002E25 08C0                <1>        or al, al
  8315 00002E27 741D                <1>        jz .end
  8316                              <1> 
  8317 00002E29 B402                <1>        mov ah, 0x02
  8318 00002E2B CD1A                <1>        int 0x1a
  8319 00002E2D 7217                <1>        jc .end
  8320                              <1> 
  8321 00002E2F 89CB                <1>        mov bx, cx
  8322                              <1> 
  8323 00002E31 B90200              <1>        mov cx, 2
  8324                              <1> 
  8325 00002E34 0FB6C7              <1>        movzx ax, bh
  8326 00002E37 E8AAFE              <1>        call bcd_to_str
  8327 00002E3A 01CF                <1>        add di, cx
  8328 00002E3C B03A                <1>        mov al, ':'
  8329 00002E3E AA                  <1>        stosb
  8330                              <1> 
  8331 00002E3F 88D8                <1>        mov al, bl
  8332 00002E41 E8A0FE              <1>        call bcd_to_str
  8333 00002E44 01CF                <1>        add di, cx
  8334                              <1>        
  8335                              <1> .end:
  8336 00002E46 30C0                <1>        xor al, al
  8337 00002E48 AA                  <1>        stosb
  8338 00002E49 61                  <1>        popa
  8339 00002E4A C3                  <1>        ret      
  8340                              <1> 
  8341                              <1> 
  8342                              <1> ;=============================================================================
  8343                              <1> ; get_current_date_string ---- get current date string
  8344                              <1> ; input: al = show method, es:di -> buffer
  8345                              <1> ;        the method of show date:
  8346                              <1> ;           0 = don't show date
  8347                              <1> ;           1 = day mm-dd-yyyy
  8348                              <1> ;           2 = day yyyy-mm-dd
  8349                              <1> ;           3 = day dd-mm-yyyy
  8350                              <1> ; output: none
  8351                              <1> ;=============================================================================
  8352                              <1> get_current_date_string:
  8353 00002E4B 60                  <1>        pusha
  8354                              <1> 
  8355 00002E4C 08C0                <1>        or al, al
  8356 00002E4E 7443                <1>        jz .end
  8357                              <1> 
  8358 00002E50 50                  <1>        push ax
  8359 00002E51 B404                <1>        mov ah, 0x04
  8360 00002E53 CD1A                <1>        int 0x1a
  8361 00002E55 58                  <1>        pop ax
  8362 00002E56 723B                <1>        jc .end
  8363                              <1> 
  8364 00002E58 50                  <1>        push ax
  8365 00002E59 51                  <1>        push cx
  8366 00002E5A 52                  <1>        push dx
  8367                              <1> 
  8368 00002E5B 0FB6C6              <1>        movzx ax, dh
  8369 00002E5E E855FE              <1>        call bcd_to_bin
  8370 00002E61 88C6                <1>        mov dh, al
  8371 00002E63 88D0                <1>        mov al, dl
  8372 00002E65 E84EFE              <1>        call bcd_to_bin
  8373 00002E68 88C2                <1>        mov dl, al
  8374                              <1> 
  8375 00002E6A 89C8                <1>        mov ax, cx
  8376 00002E6C E847FE              <1>        call bcd_to_bin
  8377                              <1> 
  8378 00002E6F E8E7FD              <1>        call day_in_week
  8379                              <1> 
  8380 00002E72 89CB                <1>        mov bx, cx
  8381 00002E74 D1E3                <1>        shl bx, 1
  8382 00002E76 8BB7[E84A]          <1>        mov si, [str_idx.sunday+bx]
  8383                              <1> 
  8384 00002E7A E8C0FC              <1>        call strcpy
  8385 00002E7D B020                <1>        mov al, ' '
  8386 00002E7F AA                  <1>        stosb
  8387                              <1> 
  8388 00002E80 5A                  <1>        pop dx
  8389 00002E81 5B                  <1>        pop bx
  8390 00002E82 58                  <1>        pop ax
  8391                              <1> 
  8392 00002E83 31C9                <1>        xor cx, cx
  8393                              <1> 
  8394 00002E85 3C01                <1>        cmp al, 1
  8395 00002E87 740F                <1>        je .mmddyy
  8396 00002E89 3C02                <1>        cmp al, 2
  8397 00002E8B 741E                <1>        je .yymmdd
  8398 00002E8D 3C03                <1>        cmp al, 3
  8399 00002E8F 742D                <1>        je .ddmmyy
  8400 00002E91 EB00                <1>        jmp .end
  8401                              <1> 
  8402                              <1> .end:       
  8403 00002E93 30C0                <1>        xor al, al
  8404 00002E95 AA                  <1>        stosb
  8405 00002E96 61                  <1>        popa
  8406 00002E97 C3                  <1>        ret
  8407                              <1> 
  8408                              <1> .mmddyy:
  8409 00002E98 B02D                <1>        mov al, '-'
  8410 00002E9A 50                  <1>        push ax
  8411 00002E9B E83300              <1>        call .write_mm
  8412 00002E9E 58                  <1>        pop ax
  8413 00002E9F AA                  <1>        stosb
  8414 00002EA0 50                  <1>        push ax
  8415 00002EA1 E83800              <1>        call .write_dd
  8416 00002EA4 58                  <1>        pop ax
  8417 00002EA5 AA                  <1>        stosb
  8418 00002EA6 E83E00              <1>        call .write_yy
  8419                              <1> 
  8420 00002EA9 EBE8                <1>        jmp .end
  8421                              <1> 
  8422                              <1> .yymmdd:
  8423 00002EAB B02D                <1>        mov al, '-'
  8424 00002EAD 50                  <1>        push ax
  8425 00002EAE E83600              <1>        call .write_yy
  8426 00002EB1 58                  <1>        pop ax
  8427 00002EB2 AA                  <1>        stosb
  8428 00002EB3 50                  <1>        push ax
  8429 00002EB4 E81A00              <1>        call .write_mm
  8430 00002EB7 58                  <1>        pop ax
  8431 00002EB8 AA                  <1>        stosb
  8432 00002EB9 E82000              <1>        call .write_dd
  8433                              <1> 
  8434 00002EBC EBD5                <1>        jmp .end
  8435                              <1> 
  8436                              <1> .ddmmyy:
  8437 00002EBE B02D                <1>        mov al, '-'
  8438 00002EC0 50                  <1>        push ax
  8439 00002EC1 E81800              <1>        call .write_dd
  8440 00002EC4 58                  <1>        pop ax
  8441 00002EC5 AA                  <1>        stosb
  8442 00002EC6 50                  <1>        push ax
  8443 00002EC7 E80700              <1>        call .write_mm
  8444 00002ECA 58                  <1>        pop ax
  8445 00002ECB AA                  <1>        stosb
  8446 00002ECC E81800              <1>        call .write_yy
  8447                              <1> 
  8448 00002ECF EBC2                <1>        jmp .end
  8449                              <1> 
  8450                              <1> .write_mm:
  8451 00002ED1 0FB6C6              <1>        movzx ax, dh
  8452 00002ED4 B102                <1>        mov cl, 2
  8453 00002ED6 E80BFE              <1>        call bcd_to_str
  8454 00002ED9 01CF                <1>        add di, cx
  8455 00002EDB C3                  <1>        ret
  8456                              <1> 
  8457                              <1> .write_dd:
  8458 00002EDC 0FB6C2              <1>        movzx ax, dl
  8459 00002EDF B102                <1>        mov cl, 2
  8460 00002EE1 E800FE              <1>        call bcd_to_str
  8461 00002EE4 01CF                <1>        add di, cx
  8462 00002EE6 C3                  <1>        ret
  8463                              <1> 
  8464                              <1> .write_yy:
  8465 00002EE7 89D8                <1>        mov ax, bx
  8466 00002EE9 B104                <1>        mov cl, 4
  8467 00002EEB E8F6FD              <1>        call bcd_to_str
  8468 00002EEE 01CF                <1>        add di, cx
  8469 00002EF0 C3                  <1>        ret
  8470                              <1> 
  8471                              <1> ;=============================================================================
  8472                              <1> ;calc_checksum ---- calculate the checksum of a data block.
  8473                              <1> ;input:
  8474                              <1> ;      ds:si -> start of the checksum area
  8475                              <1> ;      cx = checksum size
  8476                              <1> ;output:
  8477                              <1> ;      bl = the checksum value.
  8478                              <1> ;=============================================================================
  8479                              <1> calc_checksum:
  8480 00002EF1 51                  <1>         push cx
  8481 00002EF2 50                  <1>         push ax
  8482 00002EF3 56                  <1>         push si
  8483 00002EF4 30DB                <1>         xor bl, bl
  8484 00002EF6 FC                  <1>         cld
  8485                              <1> .loop_calc:
  8486 00002EF7 AC                  <1>         lodsb
  8487 00002EF8 00C3                <1>         add bl, al
  8488 00002EFA E2FB                <1>         loop .loop_calc
  8489 00002EFC 5E                  <1>         pop si
  8490 00002EFD 58                  <1>         pop ax
  8491 00002EFE 59                  <1>         pop cx
  8492 00002EFF C3                  <1>         ret
  8493                              <1> 
  8494                              <1> ;=============================================================================
  8495                              <1> ; clear_memory ---- clear a memory block to zero
  8496                              <1> ; input:
  8497                              <1> ;	cx = size
  8498                              <1> ;	ds:di -> memory
  8499                              <1> ;=============================================================================
  8500                              <1> clear_memory:
  8501 00002F00 60                  <1> 	pusha
  8502 00002F01 06                  <1> 	push es
  8503 00002F02 1E                  <1> 	push ds
  8504 00002F03 07                  <1> 	pop es
  8505 00002F04 30C0                <1> 	xor al, al
  8506 00002F06 F3AA                <1> 	rep stosb
  8507 00002F08 07                  <1> 	pop es
  8508 00002F09 61                  <1> 	popa
  8509 00002F0A C3                  <1> 	ret 
  8510                              <1> 
  8511                              <1> %ifndef MAIN
  8512                              <1> keyboard_type       db 0x10
  8513                              <1> 
  8514                              <1> keymap:
  8515                              <1> .number             dw 0
  8516                              <1> .data               dw 0
  8517                              <1> 
  8518                              <1> str_idx:
  8519                              <1> .sunday             dw string.sunday
  8520                              <1> .monday             dw string.monday
  8521                              <1> .tuesday            dw string.tuesday
  8522                              <1> .wednesday          dw string.wednesday
  8523                              <1> .thursday           dw string.thursday
  8524                              <1> .friday             dw string.friday
  8525                              <1> .saturday           dw string.saturday
  8526                              <1> 
  8527                              <1> string:
  8528                              <1> .sunday              db 'Sun',0
  8529                              <1> .monday              db 'Mon',0
  8530                              <1> .tuesday             db 'Tue',0
  8531                              <1> .wednesday           db 'Wed',0
  8532                              <1> .thursday            db 'Thu',0
  8533                              <1> .friday              db 'Fri',0
  8534                              <1> .saturday            db 'Sat',0
  8535                              <1> 
  8536                              <1> 	section .bss
  8537                              <1> %include "tempdata.asm"
  8538                              <1> %endif
  8539                              <1> 
  8540                              <1> %endif	;End of HAVE_UTILS
  8541                                  %include "knl.asm"
  8542                              <1> ; asmsyntax=nasm
  8543                              <1> ;
  8544                              <1> ; knl.asm
  8545                              <1> ;
  8546                              <1> ; kernel functions for partition list
  8547                              <1> ;
  8548                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
  8549                              <1> ;
  8550                              <1> 
  8551                              <1> %ifndef HAVE_KNL
  8552                              <1> 
  8553                              <1> %ifndef MAIN
  8554                              <1> %include "knl.h"
  8555                              <1> %include "sbm.h"
  8556                              <1> %include "macros.h"
  8557                              <1> %include "hd_io.asm"
  8558                              <1> %include "myint13h.asm"
  8559                              <1> %include "utils.asm"
  8560                              <1> 	section .text
  8561                              <1> %endif
  8562                              <1> 
  8563                              <1> %define HAVE_KNL
  8564                              <1> %define LIMIT_FLOPPY_NUMBER
  8565                              <1> 
  8566                              <1> %define NUM_OF_ID       (part_type.str_tbl - part_type.id_tbl)
  8567                              <1> %define NUM_OF_LOG_DENY (part_type.auto_act_tbl - part_type.log_deny_tbl)
  8568                              <1> %define NUM_OF_PRI_DENY (part_type.auto_act_tbl - part_type.pri_deny_tbl)
  8569                              <1> %define NUM_OF_AUTO_ACT (part_type.hidden_tbl - part_type.auto_act_tbl)
  8570                              <1> %define NUM_OF_HIDDEN   (part_type.end_of_tbl - part_type.hidden_tbl)
  8571                              <1> %define NUM_OF_ALLOW_HIDE (part_type.hidden_tbl - part_type.allow_hide_tbl)
  8572                              <1> 
  8573                              <1> ;%define NUM_OF_EXT      (part_type.log_deny_tbl - part_type.ext_tbl)
  8574                              <1> 
  8575                              <1> %define MAX_FLOPPY_NUM  2
  8576                              <1> 
  8577                              <1> ;==============================================================================
  8578                              <1> ;fill_bootrecord ---- fill the boot record for a partition
  8579                              <1> ;input:
  8580                              <1> ;      ebx   =  father's abs LBA address
  8581                              <1> ;      dh    =  partition id
  8582                              <1> ;      dl    =  drive id
  8583                              <1> ;      ds:si -> source partition record
  8584                              <1> ;      es:di -> buffer to store the boot record
  8585                              <1> ;output:
  8586                              <1> ;      es:di -> filled with boot record
  8587                              <1> ;==============================================================================
  8588                              <1> fill_bootrecord:
  8589 00002F0B 6660                <1>         pushad
  8590 00002F0D FC                  <1>         cld
  8591                              <1> 
  8592 00002F0E 57                  <1>         push di                                  ; clear the boot record
  8593 00002F0F 30C0                <1>         xor al, al                               ;
  8594 00002F11 B94000              <1>         mov cx, SIZE_OF_BOOTRECORD               ;
  8595 00002F14 F3AA                <1>         rep stosb                                ;
  8596 00002F16 5F                  <1>         pop di                                   ;
  8597                              <1>         
  8598 00002F17 895502              <1>         mov [di + struc_bootrecord.drive_id], dx ; fill the drive_id and
  8599                              <1>                                                  ; part_id
  8600 00002F1A 6689D9              <1>         mov ecx, ebx
  8601 00002F1D 66894D06            <1>         mov [di + struc_bootrecord.father_abs_addr], ecx
  8602                              <1> 
  8603 00002F21 8A7C04              <1>         mov bh, [si + struc_partition.type]
  8604                              <1> 
  8605 00002F24 E8200B              <1>         call get_drive_flags
  8606                              <1> 
  8607 00002F27 83E015              <1>         and ax, DRVFLAG_MASK                     ; set flags
  8608                              <1>         
  8609 00002F2A 08F6                <1>         or dh, dh                                ; check if it's a driver record
  8610 00002F2C 7507                <1>         jnz .is_partition
  8611 00002F2E 0D8000              <1>         or ax, INFOFLAG_ISDRIVER
  8612 00002F31 30FF                <1>         xor bh, bh
  8613 00002F33 EB0F                <1>         jmp short .set_other_flags
  8614                              <1> 
  8615                              <1> .is_partition:
  8616 00002F35 6609C9              <1>         or ecx,ecx                               ;
  8617 00002F38 7403                <1>         jz .not_logical                          ;
  8618 00002F3A 0D0001              <1>         or ax, INFOFLAG_LOGICAL                  ;
  8619                              <1>         
  8620                              <1> .not_logical:
  8621 00002F3D 3A14                <1>         cmp dl, [si + struc_partition.state]     ; test if it's active
  8622                              <1>                                                  ; should changed to
  8623                              <1>                                                  ; cmp 0x80, [xxx] ? 
  8624 00002F3F 7503                <1>         jne .set_other_flags
  8625 00002F41 0D0008              <1>         or ax, INFOFLAG_ACTIVE
  8626                              <1> 
  8627                              <1> .set_other_flags:
  8628                              <1> 
  8629 00002F44 51                  <1>         push cx                                  ;
  8630 00002F45 57                  <1>         push di                                  ;
  8631                              <1> 
  8632 00002F46 A98000              <1>         test ax, INFOFLAG_ISDRIVER
  8633 00002F49 752E                <1>         jnz .not_hidden                          ;
  8634                              <1> 
  8635 00002F4B A90001              <1>         test ax, INFOFLAG_LOGICAL                ; ah = record flags
  8636 00002F4E 7513                <1>         jnz .not_auto_act                        ;
  8637                              <1> 
  8638 00002F50 50                  <1>         push ax                                  ; check if it should
  8639 00002F51 8D3E[3539]          <1>         lea di, [part_type.auto_act_tbl]         ; be marked as
  8640 00002F55 B90800              <1>         mov cx, NUM_OF_AUTO_ACT                  ; auto active.
  8641 00002F58 88F8                <1>         mov al, bh
  8642 00002F5A E8B1FB              <1>         call strchr                              ;
  8643 00002F5D 58                  <1>         pop ax                                   ;
  8644 00002F5E 7203                <1>         jc .not_auto_act                         ;
  8645                              <1> 
  8646 00002F60 0D0010              <1>         or ax, INFOFLAG_AUTOACTIVE
  8647                              <1>         
  8648                              <1> .not_auto_act:                                   ;
  8649 00002F63 50                  <1>         push ax                                  ; check if it's a
  8650 00002F64 8D3E[3D39]          <1>         lea di, [part_type.hidden_tbl]           ; hidden partition.
  8651 00002F68 B90700              <1>         mov cx, NUM_OF_HIDDEN                    ;
  8652 00002F6B 88F8                <1>         mov al, bh
  8653 00002F6D E89EFB              <1>         call strchr                              ;
  8654 00002F70 58                  <1>         pop ax                                   ;
  8655 00002F71 7206                <1>         jc .not_hidden                           ;
  8656                              <1> 
  8657 00002F73 0D0002              <1>         or ax, INFOFLAG_HIDDEN                   ; set the hidden flag
  8658 00002F76 80E70F              <1>         and bh, 0x0F                             ; clear the hidden signature
  8659                              <1>         
  8660                              <1> .not_hidden:
  8661 00002F79 5F                  <1>         pop di
  8662 00002F7A 59                  <1>         pop cx
  8663                              <1> 
  8664 00002F7B 8905                <1>         mov [di + struc_bootrecord.flags], ax    ; fill the flags and type
  8665 00002F7D 887D04              <1>         mov [di + struc_bootrecord.type], bh
  8666                              <1> 
  8667 00002F80 A98000              <1>         test ax, INFOFLAG_ISDRIVER
  8668 00002F83 7507                <1>         jnz .no_abs_addr                         ; if it's floppy, abs_addr = 0
  8669                              <1>         
  8670 00002F85 668B5C08            <1>         mov ebx, [si + struc_partition.relative_addr]    ;
  8671                              <1> 
  8672 00002F89 6601D9              <1>         add ecx, ebx                                     ; ecx = abs_address
  8673                              <1>         
  8674                              <1> .no_abs_addr:
  8675 00002F8C 66894D0A            <1>         mov [di + struc_bootrecord.abs_addr], ecx
  8676                              <1> 
  8677 00002F90 A98000              <1>         test ax, INFOFLAG_ISDRIVER
  8678 00002F93 7511                <1>         jnz .isdriver
  8679                              <1> 
  8680 00002F95 A90001              <1>         test ax, INFOFLAG_LOGICAL
  8681 00002F98 7406                <1>         jz .primary
  8682 00002F9A 8D36[E337]          <1>         lea si, [knl_strings.logical]               ; it's logical partition
  8683 00002F9E EB2B                <1>         jmp short .fill_name                              ;
  8684                              <1> .primary:
  8685 00002FA0 8D36[DB37]          <1>         lea si, [knl_strings.primary]               ; it's primary partition
  8686 00002FA4 EB25                <1>         jmp short .fill_name
  8687                              <1> 
  8688                              <1> .isdriver:
  8689 00002FA6 80FA80              <1>         cmp dl, MIN_HD_ID
  8690 00002FA9 721C                <1>         jb .floppy
  8691                              <1> 
  8692 00002FAB A90400              <1>         test ax, DRVFLAG_REMOVABLE
  8693 00002FAE 7411                <1>         jz .harddisk
  8694                              <1> 
  8695 00002FB0 A91000              <1> 	test ax, DRVFLAG_ISCDROM
  8696 00002FB3 7406                <1> 	jz .removable
  8697                              <1> 
  8698 00002FB5 8D36[FE37]          <1> 	lea si, [knl_strings.cdrom]
  8699 00002FB9 EB10                <1> 	jmp short .fill_name
  8700                              <1> 
  8701                              <1> .removable:
  8702 00002FBB 8D36[EB37]          <1>         lea si, [knl_strings.removable]
  8703 00002FBF EB0A                <1>         jmp short .fill_name
  8704                              <1> 
  8705                              <1> .harddisk:
  8706 00002FC1 8D36[F537]          <1>         lea si, [knl_strings.harddisk]              ; it's hard drive
  8707 00002FC5 EB04                <1>         jmp short .fill_name
  8708                              <1> 
  8709                              <1> .floppy:
  8710 00002FC7 8D36[D437]          <1>         lea si, [knl_strings.floppy]                ; it's floppy drive
  8711                              <1> 
  8712                              <1> .fill_name:
  8713 00002FCB 83C716              <1>         add di, struc_bootrecord.name
  8714 00002FCE B90F00              <1>         mov cx, 15
  8715 00002FD1 E84FFB              <1>         call strncpy
  8716                              <1> 
  8717 00002FD4 A98000              <1>         test ax, INFOFLAG_ISDRIVER
  8718 00002FD7 7509                <1>         jnz .end
  8719                              <1> 
  8720 00002FD9 88F0                <1>         mov al, dh                                  ; append partition id
  8721 00002FDB 30E4                <1>         xor ah, ah                                  ; at the end of the
  8722 00002FDD B103                <1>         mov cl, 3                                   ; name
  8723 00002FDF E8B4FA              <1>         call itoa                                   ;
  8724                              <1> 
  8725                              <1> .end:
  8726 00002FE2 6661                <1>         popad
  8727 00002FE4 C3                  <1>         ret
  8728                              <1> 
  8729                              <1> ;==============================================================================
  8730                              <1> ;fill_special_record ---- fill the boot record for a special command
  8731                              <1> ;input:
  8732                              <1> ;      al = command id
  8733                              <1> ;      es:di -> buffer to store the boot record
  8734                              <1> ;output:
  8735                              <1> ;      es:di -> filled with boot record
  8736                              <1> ;==============================================================================
  8737                              <1> fill_special_record:
  8738 00002FE5 60                  <1> 	pusha
  8739 00002FE6 FC                  <1>         cld
  8740                              <1> 
  8741 00002FE7 50                  <1> 	push ax
  8742 00002FE8 57                  <1>         push di                                  ; clear the boot record
  8743 00002FE9 30C0                <1>         xor al, al                               ;
  8744 00002FEB B94000              <1>         mov cx, SIZE_OF_BOOTRECORD               ;
  8745 00002FEE F3AA                <1>         rep stosb                                ;
  8746 00002FF0 5F                  <1>         pop di                                   ;
  8747 00002FF1 58                  <1> 	pop ax
  8748                              <1> 
  8749 00002FF2 830D08              <1> 	or word [di + struc_bootrecord.flags], INFOFLAG_ISSPECIAL
  8750 00002FF5 884504              <1> 	mov byte [di + struc_bootrecord.type], al
  8751 00002FF8 83C716              <1> 	add di, struc_bootrecord.name
  8752                              <1> 
  8753 00002FFB 31F6                <1> 	xor si, si
  8754                              <1> 
  8755 00002FFD 3C02                <1> 	cmp al, SPREC_POWEROFF
  8756 00002FFF 7503                <1> 	jne .not_poweroff
  8757 00003001 BE[0D38]            <1> 	mov si, knl_strings.poweroff
  8758                              <1> 
  8759                              <1> .not_poweroff:
  8760 00003004 3C03                <1> 	cmp al, SPREC_RESTART
  8761 00003006 7503                <1> 	jne .not_restart
  8762 00003008 BE[1738]            <1> 	mov si, knl_strings.restart
  8763                              <1> 
  8764                              <1> .not_restart:
  8765 0000300B 3C01                <1> 	cmp al, SPREC_QUIT
  8766 0000300D 7503                <1> 	jne .not_quit
  8767 0000300F BE[1E38]            <1> 	mov si, knl_strings.quit
  8768                              <1> 
  8769                              <1> .not_quit:
  8770 00003012 3C00                <1> 	cmp al, SPREC_BOOTPREV
  8771 00003014 7503                <1> 	jne .not_bootprev
  8772 00003016 BE[2B38]            <1> 	mov si, knl_strings.bootprev
  8773                              <1> 
  8774                              <1> .not_bootprev:
  8775 00003019 B90F00              <1> 	mov cx, 15
  8776 0000301C E804FB              <1> 	call strncpy
  8777 0000301F 61                  <1> 	popa
  8778 00003020 C3                  <1> 	ret
  8779                              <1> 
  8780                              <1> ;==============================================================================
  8781                              <1> ;get_parttype_str ---- get partition type string
  8782                              <1> ;input:
  8783                              <1> ;      al = partition type
  8784                              <1> ;output:
  8785                              <1> ;      ds:si -> partition type string
  8786                              <1> ;==============================================================================
  8787                              <1> get_parttype_str:
  8788 00003021 57                  <1>         push di
  8789 00003022 51                  <1>         push cx
  8790 00003023 8D3E[3F38]          <1>         lea di, [part_type.id_tbl]
  8791 00003027 B91A00              <1>         mov cx, NUM_OF_ID
  8792 0000302A E8E1FA              <1>         call strchr
  8793 0000302D C1E103              <1>         shl cx, 3                   ; cx = cx * 8
  8794 00003030 8D36[5938]          <1>         lea si, [part_type.str_tbl]
  8795 00003034 01CE                <1>         add si, cx
  8796 00003036 59                  <1>         pop cx
  8797 00003037 5F                  <1>         pop di
  8798 00003038 C3                  <1>         ret
  8799                              <1> 
  8800                              <1> ;==============================================================================
  8801                              <1> ;check_bootrecord ---- check if the boot record is ok
  8802                              <1> ;input:
  8803                              <1> ;      ds:si -> boot record
  8804                              <1> ;output:
  8805                              <1> ;      cf = 0 the boot record is ok
  8806                              <1> ;      cf = 1 the boot record cannot boot
  8807                              <1> ;==============================================================================
  8808                              <1> check_bootrecord:
  8809 00003039 6660                <1>         pushad                           ; save registers
  8810 0000303B 09F6                <1> 	or si, si
  8811 0000303D 0F84F800            <1> 	jmpz .bad_record
  8812                              <1> 
  8813 00003041 FC                  <1>         cld
  8814                              <1> 
  8815                              <1> ;============= check special record ===========
  8816 00003042 8B04                <1>         mov ax, [si + struc_bootrecord.flags]        ; get record flags
  8817 00003044 A90800              <1> 	test ax, INFOFLAG_ISSPECIAL
  8818 00003047 0F842400            <1> 	jmpz .normal_record
  8819                              <1> 
  8820 0000304B 8A5C04              <1> 	mov bl, [si + struc_bootrecord.type]
  8821 0000304E 80FB04              <1> 	cmp bl, NUM_OF_SPREC
  8822 00003051 0F83E400            <1> 	jmpnb .bad_record
  8823                              <1> 
  8824 00003055 80FB02              <1> 	cmp bl, SPREC_POWEROFF
  8825 00003058 0F850600            <1> 	jmpne .check_prev
  8826                              <1> 
  8827 0000305C E8B5FB              <1> 	call check_apm_bios
  8828 0000305F E9D800              <1> 	jmp .end
  8829                              <1> 
  8830                              <1> .check_prev:
  8831 00003062 80FB00              <1> 	cmp bl, SPREC_BOOTPREV
  8832 00003065 0F85CD00            <1> 	jmpne .good_record
  8833                              <1> 
  8834 00003069 E84D07              <1> 	call check_prev_mbr
  8835 0000306C E9CB00              <1> 	jmp .end
  8836                              <1> 
  8837                              <1> .normal_record:
  8838                              <1> ;============= check driver ===================
  8839 0000306F 8B5402              <1>         mov dx, [si + struc_bootrecord.drive_id]     ; get drive id and part id
  8840 00003072 8D3E[471C]          <1>         lea di, [hdio_tmp.driveinfo]
  8841 00003076 E8E808              <1>         call get_drive_info                          ; check if the drive ok
  8842 00003079 0F82BC00            <1>         jmpc .bad_record
  8843                              <1> 
  8844 0000307D 50                  <1>         push ax
  8845 0000307E 8A6501              <1>         mov ah, [di + struc_driveinfo.flags]         ;
  8846 00003081 251515              <1>         and ax, ( DRVFLAG_MASK << 8) | DRVFLAG_MASK  ; check if the flags was
  8847 00003084 38E0                <1>         cmp al, ah                                   ; changed
  8848 00003086 58                  <1>         pop ax                                       ;
  8849 00003087 0F85AE00            <1>         jmpne .bad_record
  8850                              <1> 
  8851 0000308B A98000              <1>         test ax, INFOFLAG_ISDRIVER                   ; if it's a driver then ok
  8852 0000308E 0F85A400            <1>         jmpnz .good_record
  8853                              <1> 
  8854                              <1> ;============ check partition =================
  8855                              <1> ; now we know it's a partiton!
  8856 00003092 8A5C04              <1>         mov bl, [si + struc_bootrecord.type]
  8857 00003095 08DB                <1>         or bl, bl                                    
  8858 00003097 0F849E00            <1>         jmpz .bad_record                               ; it's free, bad!
  8859                              <1> 
  8860                              <1> .not_free:
  8861 0000309B A90001              <1>         test ax, INFOFLAG_LOGICAL                    ; it's logical partition
  8862 0000309E 7509                <1>         jnz .logical_part                            ;
  8863                              <1> 
  8864 000030A0 B90400              <1>         mov cx, NUM_OF_PRI_DENY                      ;
  8865 000030A3 8D3E[3139]          <1>         lea di, [part_type.pri_deny_tbl]             ;
  8866 000030A7 EB07                <1>         jmp short .check_type                        ; check if the partition
  8867                              <1> 
  8868                              <1> .logical_part:                                       ; type is in the deny
  8869 000030A9 B90400              <1>         mov cx, NUM_OF_LOG_DENY                      ; table
  8870 000030AC 8D3E[3139]          <1>         lea di, [part_type.log_deny_tbl]             ;
  8871                              <1> 
  8872                              <1> .check_type:                                         ;
  8873 000030B0 50                  <1>         push ax
  8874 000030B1 88D8                <1>         mov al, bl                                   ; al = partition type
  8875 000030B3 E858FA              <1>         call strchr                                  ;
  8876 000030B6 58                  <1>         pop ax
  8877 000030B7 0F837E00            <1>         jmpnc .bad_record                              ; this type is denied!
  8878                              <1> 
  8879                              <1> ;================ check in father ===================        
  8880                              <1> ; read father's partition table into buffer and check it
  8881 000030BB 50                  <1>         push ax                                      ; save flags
  8882                              <1> 
  8883 000030BC 668B5C06            <1>         mov ebx, [si + struc_bootrecord.father_abs_addr]
  8884                              <1> 
  8885 000030C0 B80102              <1>         mov ax, (INT13H_READ << 8 ) | 0x01           ; read the first sector
  8886 000030C3 8D3E[6D1C]          <1>         lea di, [knl_tmp.disk_buf1]                           ; into buffer
  8887 000030C7 E83B0A              <1>         call disk_access                             ;
  8888 000030CA 58                  <1>         pop ax                                       ; load flags
  8889 000030CB 0F826A00            <1>         jmpc .bad_record
  8890                              <1> 
  8891 000030CF 81BDFE0155AA        <1>         cmp word [di + BR_FLAG_OFF], BR_GOOD_FLAG    ; check if the father is
  8892 000030D5 7562                <1>         jne .bad_record                              ; good
  8893                              <1> 
  8894 000030D7 668B4C0A            <1>         mov ecx, [si + struc_bootrecord.abs_addr]    ; get partition's abs addr
  8895 000030DB 6629D9              <1>         sub ecx, ebx                                 ; calculate relative address
  8896 000030DE 6689CB              <1> 	mov ebx, ecx
  8897                              <1> 
  8898 000030E1 81C7BE01            <1>         add di, PART_TBL_OFF                         ; point to father's partition
  8899                              <1>                                                      ; table
  8900 000030E5 B90400              <1>         mov cx, 4
  8901                              <1>         
  8902                              <1> .search_in_father:                                   ; find the record in
  8903 000030E8 807D0400            <1> 	cmp byte [di + struc_partition.type], 0      ;
  8904 000030EC 7406                <1> 	je .invalid_entry
  8905 000030EE 66395D08            <1>         cmp [di + struc_partition.relative_addr], ebx; father's partition
  8906 000030F2 7407                <1>         je .found_it     
  8907                              <1> .invalid_entry:                                      ; table
  8908 000030F4 83C710              <1>         add di, SIZE_OF_PARTITION                    ;
  8909 000030F7 E2EF                <1>         loop .search_in_father                       ;
  8910 000030F9 EB3E                <1>         jmp .bad_record                        ; not found! it's bad.
  8911                              <1>         
  8912                              <1> .found_it:
  8913                              <1> 
  8914                              <1> ;adjust some flags of the boot record.
  8915                              <1> ;there is no other place to suit these codes,
  8916                              <1> ;so I place them here :-(
  8917                              <1> 
  8918 000030FB 50                  <1>         push ax                                      ;
  8919 000030FC 57                  <1>         push di                                      ; hidden partition
  8920 000030FD 8A5D04              <1>         mov bl, [di + struc_partition.type]          ; check if it's a
  8921 00003100 88D8                <1>         mov al, bl                                   ;
  8922 00003102 8D3E[3D39]          <1>         lea di, [part_type.hidden_tbl]               ;
  8923 00003106 B90700              <1>         mov cx, NUM_OF_HIDDEN                        ;
  8924 00003109 E802FA              <1>         call strchr                                  ;
  8925 0000310C 5F                  <1>         pop di                                       ;
  8926 0000310D 58                  <1>         pop ax                                       ;
  8927 0000310E 7208                <1>         jc .not_hidden                               ;
  8928 00003110 80E30F              <1>         and bl, 0x0F
  8929 00003113 0D0002              <1>         or ax, INFOFLAG_HIDDEN                       ; set hidden flag.
  8930 00003116 EB03                <1>         jmp short .validate_type
  8931                              <1> 
  8932                              <1> .not_hidden:
  8933 00003118 25FFFD              <1>         and ax, ~ INFOFLAG_HIDDEN                    ; clear hidden flag.
  8934                              <1> 
  8935                              <1> .validate_type:
  8936                              <1> 
  8937                              <1> %ifdef STRICT_PART_CHECK
  8938                              <1>         cmp bl, [si + struc_bootrecord.type]         ; check the partition type
  8939                              <1>         jne .bad_record                              ; wrong type!
  8940                              <1> %else
  8941 0000311B 885C04              <1> 	mov [si + struc_bootrecord.type], bl         ; set partition type
  8942                              <1> %endif
  8943                              <1> 
  8944                              <1> .type_ok:
  8945 0000311E 52                  <1>         push dx
  8946 0000311F A90020              <1>         test ax, INFOFLAG_SWAPDRVID                  ; check if swap driver id
  8947 00003122 7403                <1>         jz .no_swapid
  8948 00003124 80E280              <1>         and dl, 0x80
  8949                              <1> 
  8950                              <1> .no_swapid:
  8951 00003127 3A15                <1>         cmp dl, [di + struc_partition.state]         ; check if the partition
  8952 00003129 5A                  <1>         pop dx
  8953 0000312A 7505                <1>         jne .not_active                              ; is active.
  8954 0000312C 0D0008              <1>         or ax, INFOFLAG_ACTIVE                       ; should change to
  8955 0000312F EB03                <1>         jmp short .adjust_flags                      ; cmp 0x80, byte [state] ?
  8956                              <1> 
  8957                              <1> .not_active:
  8958 00003131 25FFF7              <1>         and ax, ~ INFOFLAG_ACTIVE
  8959                              <1> 
  8960                              <1> .adjust_flags:
  8961 00003134 8904                <1>         mov [si + struc_bootrecord.flags], ax
  8962                              <1> 
  8963                              <1> ;==================  check partition itself ==============
  8964                              <1> .check_inside:                                       ; check partition itself
  8965                              <1> 
  8966                              <1> %ifdef STRICT_PART_CHECK
  8967                              <1>         mov ebx, [si + struc_bootrecord.abs_addr]
  8968                              <1> 
  8969                              <1>         lea di, [knl_tmp.disk_buf1]
  8970                              <1>         mov ax, (INT13H_READ << 8 ) | 0x01           ; read the first sector
  8971                              <1>         call disk_access                             ; into buffer
  8972                              <1>         jc .bad_record                               ; read error!
  8973                              <1>         
  8974                              <1>         cmp word [di + BR_FLAG_OFF], BR_GOOD_FLAG    ; check if the paritition
  8975                              <1>         jne .bad_record                              ; is good
  8976                              <1> %endif
  8977                              <1> 
  8978                              <1> .good_record:
  8979 00003136 F8                  <1>         clc
  8980 00003137 EB01                <1>         jmp short .end
  8981                              <1> 
  8982                              <1> .bad_record:
  8983 00003139 F9                  <1>         stc
  8984                              <1> .end:
  8985 0000313A 6661                <1>         popad
  8986 0000313C C3                  <1>         ret
  8987                              <1> 
  8988                              <1> ;==============================================================================
  8989                              <1> ;search_drv_records ---- search all driver records 
  8990                              <1> ;input:
  8991                              <1> ;      dl = beginning driver id.
  8992                              <1> ;      cl = max number of boot records could be searched
  8993                              <1> ;      es:di -> buffer to store boot records. 
  8994                              <1> ;output:
  8995                              <1> ;      ch = number of the valid boot records have searched
  8996                              <1> ;==============================================================================
  8997                              <1> search_drv_records:
  8998 0000313D 30ED                <1>        xor ch, ch
  8999 0000313F 882E[521C]          <1>        mov [knl_tmp.good_record_num], ch
  9000 00003143 880E[531C]          <1>        mov [knl_tmp.max_record_num], cl
  9001 00003147 882E[591C]          <1>        mov [knl_tmp.floppy_num], ch
  9002 0000314B 08C9                <1>        or cl, cl 
  9003 0000314D 7501                <1>        jnz .can_search_more
  9004 0000314F C3                  <1>        ret
  9005                              <1> 
  9006                              <1> .can_search_more:
  9007 00003150 60                  <1>        pusha
  9008 00003151 6631DB              <1>        xor ebx, ebx
  9009 00003154 30F6                <1>        xor dh, dh
  9010                              <1> 
  9011                              <1> .loop_search:
  9012 00003156 E8EE08              <1>        call get_drive_flags
  9013 00003159 722C                <1>        jc .search_next
  9014                              <1> 
  9015 0000315B A801                <1>        test al, DRVFLAG_DRIVEOK
  9016 0000315D 7228                <1>        jc .search_next
  9017                              <1> 
  9018                              <1> %ifdef LIMIT_FLOPPY_NUMBER
  9019 0000315F 80FA80              <1>        cmp dl, MIN_HD_ID
  9020 00003162 730F                <1>        jae .isharddisk
  9021 00003164 A804                <1>        test al, DRVFLAG_REMOVABLE
  9022 00003166 740B                <1>        jz .isharddisk
  9023                              <1> 
  9024 00003168 FE06[591C]          <1>        inc byte [knl_tmp.floppy_num]
  9025 0000316C 803E[591C]02        <1>        cmp byte [knl_tmp.floppy_num], MAX_FLOPPY_NUM
  9026 00003171 7714                <1>        ja .search_next
  9027                              <1> 
  9028                              <1> .isharddisk:
  9029                              <1> %endif
  9030                              <1> 
  9031 00003173 E895FD              <1>        call fill_bootrecord
  9032 00003176 FE06[521C]          <1>        inc byte [knl_tmp.good_record_num]
  9033 0000317A 8A26[521C]          <1>        mov ah, [knl_tmp.good_record_num]                ; check if there are any
  9034 0000317E 3A26[531C]          <1>        cmp ah, [knl_tmp.max_record_num]                 ; more space.
  9035 00003182 7309                <1>        jae .end
  9036                              <1> 
  9037 00003184 83C740              <1>        add di, SIZE_OF_BOOTRECORD
  9038                              <1> 
  9039                              <1> .search_next:
  9040 00003187 FEC2                <1>        inc dl
  9041 00003189 08D2                <1>        or dl, dl
  9042 0000318B 75C9                <1>        jnz .loop_search
  9043                              <1> 
  9044                              <1> .end:
  9045 0000318D 61                  <1>        popa
  9046 0000318E 8A2E[521C]          <1>        mov ch, [knl_tmp.good_record_num]
  9047 00003192 C3                  <1>        ret
  9048                              <1> 
  9049                              <1> 
  9050                              <1> ;==============================================================================
  9051                              <1> ;search_part_records ---- search all boot records in a drive
  9052                              <1> ;input:
  9053                              <1> ;      dl = drive id
  9054                              <1> ;      cl = max number of boot records could be searched
  9055                              <1> ;      es:di -> buffer to store boot records
  9056                              <1> ;output:
  9057                              <1> ;      ch = number of the valid boot records have searched
  9058                              <1> ;==============================================================================
  9059                              <1> search_part_records:
  9060 00003193 30ED                <1>         xor ch, ch
  9061 00003195 882E[521C]          <1>         mov [knl_tmp.good_record_num], ch
  9062 00003199 880E[531C]          <1>         mov [knl_tmp.max_record_num], cl
  9063 0000319D 08C9                <1>         or cl, cl
  9064 0000319F 7501                <1>         jnz .can_search_more                         ; check if there are any
  9065 000031A1 C3                  <1>         ret                                          ; space to search more.
  9066                              <1>         
  9067                              <1> .can_search_more:
  9068 000031A2 60                  <1>         pusha
  9069                              <1> 
  9070 000031A3 6631DB              <1>         xor ebx, ebx                                 ; clear some stuff
  9071 000031A6 30F6                <1>         xor dh, dh                                   ;
  9072                              <1> 
  9073 000031A8 E89C08              <1>         call get_drive_flags                         ; get the drive flags.
  9074 000031AB 0F82A400            <1>         jmpc .end
  9075                              <1>         
  9076 000031AF A804                <1>         test al, DRVFLAG_REMOVABLE                  ; check if it's a floppy
  9077 000031B1 0F859E00            <1>         jmpnz .end
  9078 000031B5 A810                <1> 	test al, DRVFLAG_ISCDROM
  9079 000031B7 0F859800            <1> 	jmpnz .end
  9080                              <1> 
  9081                              <1> ;search partitions
  9082                              <1> .search_partitions:
  9083 000031BB 57                  <1>         push di
  9084 000031BC 8D3E[6D24]          <1>         lea di, [knl_tmp.disk_buf2]
  9085 000031C0 89FE                <1>         mov si, di
  9086 000031C2 B80102              <1>         mov ax, (INT13H_READ << 8 ) | 0x01           ; read the first sector
  9087 000031C5 E83D09              <1>         call disk_access                             ; into buffer
  9088 000031C8 5F                  <1>         pop di
  9089 000031C9 0F828600            <1>         jmpc .end
  9090                              <1>         
  9091 000031CD 81BCFE0155AA        <1>         cmp word [si + BR_FLAG_OFF], BR_GOOD_FLAG    ; check if the partition
  9092 000031D3 0F857C00            <1>         jmpne .end                                   ; table is good
  9093                              <1>         
  9094 000031D7 81C6BE01            <1>         add si, PART_TBL_OFF                         ; point to partition table
  9095                              <1>         
  9096 000031DB 30C0                <1>         xor al, al
  9097                              <1> 
  9098                              <1> .loop_search_part:
  9099 000031DD FEC0                <1>         inc al
  9100                              <1> 
  9101 000031DF 6609DB              <1>         or ebx, ebx                                  ; check if it's primary
  9102 000031E2 7508                <1>         jnz .logical_part
  9103                              <1>         
  9104 000031E4 88C6                <1>         mov dh, al                                   ;
  9105 000031E6 8836[541C]          <1>         mov [knl_tmp.part_id], dh                        ;
  9106 000031EA EB04                <1>         jmp short .cont_fill_it                      ; get the partition id
  9107                              <1>                                                      ;
  9108                              <1> .logical_part:                                       ;
  9109 000031EC 8A36[541C]          <1>         mov dh, [knl_tmp.part_id]                        ;
  9110                              <1>         
  9111                              <1> .cont_fill_it:
  9112 000031F0 E818FD              <1>         call fill_bootrecord                         ; fill the boot record
  9113 000031F3 87F7                <1>         xchg si, di
  9114 000031F5 E841FE              <1>         call check_bootrecord                        ; check if it's valid
  9115 000031F8 87F7                <1>         xchg si, di
  9116 000031FA 7211                <1>         jc .cont_search_part
  9117                              <1> 
  9118                              <1> ; find a valid boot record!
  9119                              <1> 
  9120 000031FC FE06[521C]          <1>         inc byte [knl_tmp.good_record_num]
  9121 00003200 8A26[521C]          <1>         mov ah, [knl_tmp.good_record_num]                ; check if there are any
  9122 00003204 3A26[531C]          <1>         cmp ah, [knl_tmp.max_record_num]                 ; more space.
  9123 00003208 7349                <1>         jae .end
  9124                              <1> 
  9125 0000320A 83C740              <1>         add di, SIZE_OF_BOOTRECORD                   ; move the pointer to
  9126                              <1> 
  9127                              <1> .cont_search_part:
  9128 0000320D 83C610              <1>         add si, SIZE_OF_PARTITION
  9129 00003210 3C04                <1>         cmp al, 4
  9130 00003212 72C9                <1>         jb .loop_search_part
  9131                              <1>         
  9132 00003214 83EE40              <1>         sub si, SIZE_OF_PARTITION * 4
  9133                              <1>         
  9134                              <1> ;now go ahead to search logical partitons
  9135 00003217 30E4                <1>         xor ah, ah
  9136                              <1> 
  9137                              <1> .loop_search_ext:
  9138 00003219 FEC4                <1>         inc ah
  9139 0000321B 8A4404              <1>         mov al, [si + struc_partition.type]
  9140                              <1>         
  9141 0000321E 3C05                <1>         cmp al, 0x05                                 ; check if it's
  9142 00003220 7412                <1>         je .found_ext                                ; extended
  9143 00003222 3C0F                <1>         cmp al, 0x0F                                 ; partition
  9144 00003224 740E                <1>         je .found_ext                                ;
  9145 00003226 3C85                <1>         cmp al, 0x85                                 ;
  9146 00003228 740A                <1>         je .found_ext                                ;
  9147                              <1> 
  9148 0000322A 83C610              <1>         add si, SIZE_OF_PARTITION
  9149 0000322D 80FC04              <1>         cmp ah, 4
  9150 00003230 72E7                <1>         jb .loop_search_ext
  9151 00003232 EB1F                <1>         jmp short .end
  9152                              <1> 
  9153                              <1> ;there are some extended partitions, find inside it!
  9154                              <1> .found_ext:
  9155 00003234 FE06[541C]          <1>         inc byte [knl_tmp.part_id]                       ; increase the partition id.
  9156 00003238 668B4C08            <1> 	mov ecx, [si + struc_partition.relative_addr]
  9157                              <1> 
  9158 0000323C 6609DB              <1>         or ebx, ebx                                  ; all of the later logical
  9159 0000323F 7407                <1>         jz .first_ext                                ; extended partitions' relative
  9160 00003241 668B1E[551C]        <1>         mov ebx, [knl_tmp.logi_father]                   ; address are based on the
  9161 00003246 EB05                <1>         jmp short .calc_next_father                  ; first primary extended
  9162                              <1>                                                      ; partition
  9163                              <1> .first_ext:
  9164 00003248 66890E[551C]        <1>         mov [knl_tmp.logi_father], ecx
  9165                              <1> 
  9166                              <1> .calc_next_father:
  9167 0000324D 6601CB              <1>         add ebx, ecx                                 ; calculate the next
  9168                              <1>                                                      ; father's abs
  9169                              <1>                                                      ; address
  9170                              <1>         
  9171 00003250 E968FF              <1>         jmp .search_partitions                       ; continue search
  9172                              <1> 
  9173                              <1> .end:
  9174 00003253 61                  <1>         popa
  9175 00003254 8A2E[521C]          <1>         mov ch, [knl_tmp.good_record_num]
  9176 00003258 C3                  <1>         ret
  9177                              <1>         
  9178                              <1> ;==============================================================================
  9179                              <1> ;search_specials ---- search all special boot records
  9180                              <1> ;input:
  9181                              <1> ;      cl = max number of boot records could be searched
  9182                              <1> ;      es:di -> buffer to store boot records
  9183                              <1> ;output:
  9184                              <1> ;      ch = number of the valid boot records have searched
  9185                              <1> ;==============================================================================
  9186                              <1> search_specials:
  9187 00003259 50                  <1> 	push ax
  9188 0000325A 52                  <1> 	push dx
  9189 0000325B 56                  <1> 	push si
  9190                              <1> 
  9191 0000325C 88CC                <1> 	mov ah, cl
  9192 0000325E 80FC04              <1> 	cmp ah, NUM_OF_SPREC
  9193 00003261 7202                <1> 	jb .do_search
  9194 00003263 B404                <1> 	mov ah, NUM_OF_SPREC
  9195                              <1> 
  9196                              <1> .do_search:
  9197 00003265 30ED                <1> 	xor ch, ch
  9198 00003267 30C0                <1> 	xor al, al
  9199 00003269 08E4                <1> 	or ah, ah
  9200 0000326B 7415                <1> 	jz .end
  9201                              <1> 
  9202                              <1> .loop_search:
  9203 0000326D E875FD              <1> 	call fill_special_record
  9204 00003270 89FE                <1> 	mov si, di
  9205 00003272 E8C4FD              <1> 	call check_bootrecord
  9206 00003275 7205                <1> 	jc .search_next
  9207 00003277 83C740              <1> 	add di, SIZE_OF_BOOTRECORD
  9208 0000327A FEC5                <1> 	inc ch
  9209                              <1> .search_next:
  9210 0000327C FEC0                <1> 	inc al
  9211 0000327E 38E0                <1> 	cmp al, ah
  9212 00003280 72EB                <1> 	jb .loop_search
  9213                              <1> .end:
  9214 00003282 5E                  <1> 	pop si
  9215 00003283 5A                  <1> 	pop dx
  9216 00003284 58                  <1> 	pop ax
  9217 00003285 C3                  <1> 	ret
  9218                              <1> 
  9219                              <1> ;==============================================================================
  9220                              <1> ;search_records ---- search all boot records
  9221                              <1> ;input:
  9222                              <1> ;      al = 0 all records, al = 1 only partitions
  9223                              <1> ;      cl = max number of boot records could be searched
  9224                              <1> ;      es:di -> buffer to store boot records
  9225                              <1> ;output:
  9226                              <1> ;      ch = number of the valid boot records have searched
  9227                              <1> ;==============================================================================
  9228                              <1> search_records:
  9229 00003286 57                  <1> 	push di
  9230 00003287 52                  <1> 	push dx
  9231 00003288 53                  <1> 	push bx
  9232 00003289 50                  <1> 	push ax
  9233                              <1> 
  9234 0000328A 31D2                <1>         xor dx, dx
  9235                              <1> 
  9236 0000328C 08C0                <1> 	or al, al
  9237 0000328E 7516                <1> 	jnz .search_parts
  9238                              <1> 
  9239 00003290 E8C6FF              <1> 	call search_specials
  9240 00003293 28E9                <1> 	sub cl, ch
  9241 00003295 88EE                <1> 	mov dh, ch
  9242                              <1> 
  9243 00003297 B340                <1>         mov bl, SIZE_OF_BOOTRECORD
  9244                              <1> 
  9245 00003299 E8A1FE              <1>         call search_drv_records
  9246 0000329C 28E9                <1>         sub cl, ch
  9247 0000329E 88E8                <1>         mov al, ch
  9248 000032A0 00EE                <1> 	add dh, ch
  9249 000032A2 F6E3                <1>         mul bl
  9250 000032A4 01C7                <1>         add di, ax
  9251                              <1> 
  9252                              <1> .search_parts:
  9253 000032A6 E80700              <1> 	call search_all_partitions
  9254 000032A9 00F5                <1> 	add ch, dh
  9255 000032AB 58                  <1> 	pop ax
  9256 000032AC 5B                  <1> 	pop bx
  9257 000032AD 5A                  <1> 	pop dx
  9258 000032AE 5F                  <1> 	pop di
  9259 000032AF C3                  <1> 	ret
  9260                              <1> 
  9261                              <1> ;==============================================================================
  9262                              <1> ;search_all_partitions ---- search all partitions in all drives
  9263                              <1> ;input:
  9264                              <1> ;      cl = max number of boot records could be searched
  9265                              <1> ;      dl = lowest drive id to be searched
  9266                              <1> ;      es:di -> buffer to store boot records
  9267                              <1> ;output:
  9268                              <1> ;      ch = number of the valid boot records have searched
  9269                              <1> ;==============================================================================
  9270                              <1> search_all_partitions:
  9271 000032B0 50                  <1>         push ax
  9272 000032B1 52                  <1> 	push dx
  9273 000032B2 30F6                <1> 	xor dh, dh
  9274 000032B4 B340                <1>         mov bl, SIZE_OF_BOOTRECORD
  9275                              <1> 
  9276                              <1> .loop_search:
  9277 000032B6 E8DAFE              <1>         call search_part_records
  9278 000032B9 28E9                <1>         sub cl, ch
  9279 000032BB 00EE                <1>         add dh, ch                                   ; count the searched boot
  9280                              <1>                                                      ; records
  9281 000032BD 88E8                <1>         mov al, ch                                   ;
  9282 000032BF F6E3                <1>         mul bl                                       ; adjust the pointer (di)
  9283 000032C1 01C7                <1>         add di, ax                                   ;
  9284 000032C3 FEC2                <1>         inc dl
  9285 000032C5 08D2                <1>         or dl, dl
  9286 000032C7 75ED                <1>         jnz .loop_search
  9287 000032C9 88F5                <1>         mov ch, dh
  9288 000032CB 5A                  <1> 	pop dx
  9289 000032CC 58                  <1>         pop ax
  9290 000032CD C3                  <1>         ret
  9291                              <1> 
  9292                              <1> 
  9293                              <1> ;==============================================================================
  9294                              <1> ;get_record_typestr ---- get a record's type string
  9295                              <1> ;input:
  9296                              <1> ;      ds:si -> the record
  9297                              <1> ;      es:di -> the buffer to store the type string
  9298                              <1> ;output:
  9299                              <1> ;      none
  9300                              <1> ;==============================================================================
  9301                              <1> get_record_typestr:
  9302 000032CE 60                  <1>         pusha
  9303 000032CF 8B04                <1>         mov ax, [si + struc_bootrecord.flags]
  9304 000032D1 8A5C04              <1>         mov bl, [si + struc_bootrecord.type]
  9305 000032D4 8B5402              <1>         mov dx, [si + struc_bootrecord.drive_id]
  9306                              <1> 
  9307 000032D7 A90800              <1> 	test ax, INFOFLAG_ISSPECIAL
  9308 000032DA 751A                <1> 	jnz .special
  9309                              <1> 
  9310 000032DC A98000              <1>         test ax, INFOFLAG_ISDRIVER
  9311 000032DF 7430                <1>         jz .partition
  9312                              <1> 
  9313 000032E1 A90400              <1>         test ax, DRVFLAG_REMOVABLE
  9314 000032E4 741C                <1>         jz .harddisk
  9315                              <1> 
  9316 000032E6 F6C280              <1>         test dl, 0x80
  9317 000032E9 741D                <1>         jz .floppy
  9318                              <1> 
  9319 000032EB A91000              <1> 	test ax, DRVFLAG_ISCDROM
  9320 000032EE 740C                <1> 	jz .removable
  9321                              <1> 
  9322 000032F0 8D36[FE37]          <1> 	lea si, [knl_strings.cdrom]
  9323 000032F4 EB16                <1> 	jmp short .filldrv
  9324                              <1> 
  9325                              <1> .special:
  9326 000032F6 8D36[0538]          <1> 	lea si, [knl_strings.special]
  9327 000032FA EB10                <1> 	jmp short .filldrv
  9328                              <1> 
  9329                              <1> .removable:
  9330 000032FC 8D36[EB37]          <1>         lea si, [knl_strings.removable]
  9331 00003300 EB0A                <1>         jmp short .filldrv
  9332                              <1> 
  9333                              <1> .harddisk:
  9334 00003302 8D36[F537]          <1>         lea si, [knl_strings.harddisk]
  9335 00003306 EB04                <1>         jmp short .filldrv
  9336                              <1> 
  9337                              <1> .floppy:
  9338 00003308 8D36[D437]          <1>         lea si, [knl_strings.floppy]
  9339                              <1> 
  9340                              <1> .filldrv:
  9341 0000330C E82EF8              <1>         call strcpy
  9342 0000330F EB27                <1>         jmp short .end
  9343                              <1> 
  9344                              <1> .partition:
  9345 00003311 A90001              <1>         test ax, INFOFLAG_LOGICAL
  9346 00003314 7406                <1>         jz short .primary
  9347                              <1> 
  9348 00003316 8D36[E337]          <1>         lea si, [knl_strings.logical]
  9349 0000331A EB04                <1>         jmp short .fillpart
  9350                              <1> 
  9351                              <1> .primary:
  9352 0000331C 8D36[DB37]          <1>         lea si, [knl_strings.primary]
  9353                              <1> 
  9354                              <1> .fillpart:
  9355 00003320 E81AF8              <1>         call strcpy
  9356                              <1> 
  9357 00003323 C7052028            <1>         mov word [di], ' ('
  9358 00003327 47                  <1>         inc di
  9359 00003328 47                  <1>         inc di
  9360                              <1> 
  9361 00003329 88D8                <1>         mov al, bl
  9362 0000332B E8F3FC              <1>         call get_parttype_str
  9363 0000332E E80CF8              <1>         call strcpy
  9364 00003331 C60529              <1>         mov byte [di], ')'
  9365 00003334 47                  <1>         inc di
  9366 00003335 30C0                <1>         xor al, al
  9367 00003337 AA                  <1>         stosb
  9368                              <1> 
  9369                              <1> .end:
  9370 00003338 61                  <1>         popa
  9371 00003339 C3                  <1>         ret
  9372                              <1> 
  9373                              <1> ;==============================================================================
  9374                              <1> ;get_record_string ---- get a record's string
  9375                              <1> ;input:
  9376                              <1> ;      ds:si -> the record
  9377                              <1> ;      es:di -> buffer to store the string
  9378                              <1> ;      al =1    don't draw flags
  9379                              <1> ;      al =2    don't draw flags and number
  9380                              <1> ;      al =3    don't draw flags and type
  9381                              <1> ;
  9382                              <1> ;output:
  9383                              <1> ;      none
  9384                              <1> ;
  9385                              <1> ;notes:
  9386                              <1> ; the string layout is:
  9387                              <1> ; pSkXaAhHlD  128 01  (Type )  Partition Name.
  9388                              <1> ; where :
  9389                              <1> ; p  is password flag, means have password.
  9390                              <1> ; S  is schedule flag, means have boot schedule set.
  9391                              <1> ; k  is keystrokes flag, means have keystrokes set.
  9392                              <1> ; X  is swap driver id flag, means the driver id will be swap to the bootable
  9393                              <1> ;    id when boot this record.
  9394                              <1> ; aA is active flags, a means auto active, A means active
  9395                              <1> ; hH is hidden flags, h means auto hide, H means hidden
  9396                              <1> ; lD is other flags, L means it's Logical Partition, D means it's Disk Driver 
  9397                              <1> ; 128 is the drive id
  9398                              <1> ; 01 is the partition id
  9399                              <1> ; (Type ) is the type of this partition, 7 bytes
  9400                              <1> ; Partition Name is the name of this partition, 15 bytes
  9401                              <1> ;==============================================================================
  9402                              <1> get_record_string:
  9403 0000333A 60                  <1>         pusha
  9404 0000333B FC                  <1>         cld
  9405                              <1> 
  9406 0000333C 668B4C0E            <1>         mov ecx, [si + struc_bootrecord.password]
  9407 00003340 8B1C                <1>         mov bx, [si + struc_bootrecord.flags]
  9408                              <1> 
  9409 00003342 88C4                <1> 	mov ah, al
  9410                              <1> 
  9411 00003344 B020                <1> 	mov al, ' '
  9412 00003346 AA                  <1> 	stosb
  9413                              <1> 
  9414 00003347 08E4                <1>         or ah, ah
  9415 00003349 752C                <1>         jnz .no_flags
  9416 0000334B 50                  <1> 	push ax
  9417                              <1> 
  9418                              <1> ;show flags
  9419                              <1> 
  9420 0000334C B02D                <1>         mov al, '-'
  9421                              <1> 
  9422 0000334E 50                  <1>         push ax
  9423 0000334F 6609C9              <1>         or ecx, ecx                                 ; check if has password.
  9424 00003352 7402                <1>         jz .no_password
  9425 00003354 B070                <1>         mov al, 'p'                                 ; has password, draw a 'p'.
  9426                              <1> .no_password:
  9427 00003356 AA                  <1>         stosb
  9428 00003357 58                  <1>         pop ax
  9429                              <1> 
  9430 00003358 56                  <1>         push si
  9431 00003359 BA0080              <1>         mov dx, INFOFLAG_SCHEDULED
  9432 0000335C B90900              <1>         mov cx, NUM_OF_INFOFLAGS
  9433 0000335F 8D36[CA37]          <1>         lea si, [infoflag_chars]
  9434                              <1> 
  9435                              <1> .loop_show_flags:
  9436 00003363 50                  <1>         push ax
  9437 00003364 85D3                <1>         test bx, dx
  9438 00003366 7402                <1>         jz .no_thisflag
  9439 00003368 8A04                <1>         mov al, [si]
  9440                              <1> .no_thisflag:
  9441 0000336A AA                  <1>         stosb
  9442 0000336B 58                  <1>         pop ax
  9443 0000336C 46                  <1>         inc si
  9444 0000336D D1EA                <1>         shr dx, 1
  9445 0000336F E2F2                <1>         loop .loop_show_flags
  9446 00003371 5E                  <1>         pop si
  9447                              <1> 
  9448 00003372 B020                <1>         mov al, ' '
  9449 00003374 AA                  <1>         stosb
  9450 00003375 AA                  <1>         stosb
  9451                              <1> 
  9452 00003376 58                  <1> 	pop ax
  9453                              <1> 
  9454                              <1> .no_flags:
  9455 00003377 80FC01              <1> 	cmp ah, 1
  9456 0000337A 7728                <1> 	ja .no_number
  9457                              <1> 
  9458 0000337C 50                  <1> 	push ax
  9459                              <1> 
  9460 0000337D 8B5402              <1>         mov dx, [si + struc_bootrecord.drive_id]
  9461 00003380 F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  9462 00003384 740A                <1> 	jz .get_drvid
  9463                              <1> 
  9464 00003386 56                  <1> 	push si
  9465 00003387 BE[3838]            <1> 	mov si, knl_strings.invalid_id
  9466 0000338A E8B0F7              <1> 	call strcpy
  9467 0000338D 5E                  <1> 	pop si
  9468                              <1> 
  9469 0000338E EB0F                <1> 	jmp short .draw_type
  9470                              <1> 
  9471                              <1> .get_drvid:
  9472 00003390 E8BB07              <1> 	call get_drvid_str
  9473                              <1> 
  9474 00003393 88F0                <1>         mov al, dh                                  ; fill partition id
  9475 00003395 30E4                <1> 	xor ah, ah
  9476 00003397 B103                <1>         mov cl, 3                                   ;
  9477 00003399 E8FAF6              <1>         call itoa                                   ;
  9478                              <1> 
  9479 0000339C 83C703              <1>         add di, 3
  9480                              <1> 
  9481                              <1> .draw_type:
  9482 0000339F B020                <1>         mov al, ' '
  9483 000033A1 AA                  <1>         stosb
  9484 000033A2 AA                  <1>         stosb
  9485                              <1> 
  9486 000033A3 58                  <1> 	pop ax
  9487                              <1> 
  9488                              <1> .no_number:
  9489 000033A4 80FC02              <1> 	cmp ah, 2
  9490 000033A7 771A                <1> 	ja .no_type
  9491                              <1> 
  9492 000033A9 56                  <1>         push si                                     ; save the boot record pointer
  9493                              <1> 
  9494 000033AA 30C0                <1> 	xor al, al
  9495 000033AC F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  9496 000033B0 7503                <1> 	jnz .is_special
  9497 000033B2 8A4404              <1>         mov al, [si + struc_bootrecord.type]
  9498                              <1> .is_special:
  9499                              <1> 
  9500 000033B5 E869FC              <1>         call get_parttype_str
  9501 000033B8 B90800              <1>         mov  cx, 8
  9502 000033BB E865F7              <1>         call strncpy
  9503 000033BE 5E                  <1>         pop si
  9504                              <1>         
  9505 000033BF B020                <1>         mov al, ' '
  9506 000033C1 AA                  <1>         stosb
  9507 000033C2 AA                  <1>         stosb
  9508                              <1> 
  9509                              <1> .no_type:
  9510 000033C3 83C616              <1>         add si, struc_bootrecord.name
  9511 000033C6 B90F00              <1>         mov cx, 15
  9512 000033C9 51                  <1> 	push cx
  9513 000033CA E856F7              <1>         call strncpy                                ; fill record name
  9514 000033CD 89C8                <1> 	mov ax, cx
  9515 000033CF 59                  <1> 	pop cx
  9516 000033D0 29C1                <1> 	sub cx, ax
  9517 000033D2 B020                <1> 	mov al, ' '
  9518 000033D4 F3AA                <1> 	rep stosb
  9519 000033D6 30C0                <1> 	xor al, al
  9520 000033D8 AA                  <1> 	stosb
  9521 000033D9 61                  <1>         popa
  9522 000033DA C3                  <1>         ret
  9523                              <1> 
  9524                              <1> ;==============================================================================
  9525                              <1> ;mark_record_active ---- mark the boot record active.
  9526                              <1> ;input:
  9527                              <1> ;      ds:si -> the record
  9528                              <1> ;output:
  9529                              <1> ;      cf = 0 success
  9530                              <1> ;      cf = 1 failed, ax = 0 cannot mark active, otherwise disk error occured.
  9531                              <1> ;==============================================================================
  9532                              <1> mark_record_active:
  9533 000033DB 60                  <1>         pusha
  9534 000033DC E8C303              <1>         call check_allow_act
  9535 000033DF 725D                <1>         jc .cannot_active
  9536                              <1>         
  9537 000033E1 B80102              <1>         mov ax, (INT13H_READ << 8 ) | 0x01                  ; read father's
  9538 000033E4 668B5C06            <1>         mov ebx, [si + struc_bootrecord.father_abs_addr]    ; partition table.
  9539 000033E8 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]            ;
  9540                              <1>                                                             ;
  9541 000033EB 8D3E[6D1C]          <1>         lea di, [knl_tmp.disk_buf1]                                  ;
  9542 000033EF E81307              <1>         call disk_access                                    ;
  9543 000033F2 724F                <1>         jc .disk_error                                      ;
  9544                              <1> 
  9545 000033F4 52                  <1>         push dx
  9546 000033F5 6653                <1>         push ebx
  9547 000033F7 57                  <1>         push di
  9548                              <1>         
  9549 000033F8 81C7BE01            <1>         add di, PART_TBL_OFF
  9550                              <1> 
  9551 000033FC 668B4C0A            <1>         mov ecx, [si + struc_bootrecord.abs_addr]    ; abs addr -> ecx
  9552                              <1> 
  9553 00003400 6629D9              <1>         sub ecx, ebx                                 ; relative addr -> ebx
  9554 00003403 6689CB              <1> 	mov ebx, ecx
  9555 00003406 B90400              <1>         mov cx, 4
  9556                              <1> 
  9557 00003409 F7040020            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_SWAPDRVID  ; check if need swap id
  9558 0000340D 7403                <1>         jz .no_swapid
  9559                              <1> 
  9560 0000340F 80E2F0              <1>         and dl, 0xF0                                 ; use 0x80 as active flag if swap id is on.
  9561                              <1> .no_swapid:
  9562                              <1> 
  9563 00003412 30E4                <1>         xor ah, ah
  9564                              <1> .search_in_father:                                   ;
  9565 00003414 30C0                <1>         xor al, al                                   ;
  9566 00003416 66395D08            <1>         cmp [di + struc_partition.relative_addr], ebx; find the record in
  9567 0000341A 7504                <1>         jne .not_it                                  ; father's partition
  9568 0000341C 88D0                <1>         mov al, dl                                   ; table
  9569 0000341E FEC4                <1>         inc ah                                       ;
  9570                              <1> .not_it:                                             ;
  9571 00003420 8805                <1>         mov byte [di  + struc_partition.state], al   ;
  9572 00003422 83C710              <1>         add di, SIZE_OF_PARTITION                    ;
  9573 00003425 E2ED                <1>         loop .search_in_father                       ;
  9574                              <1> 
  9575 00003427 5F                  <1>         pop di                                       ;
  9576 00003428 665B                <1>         pop ebx                                       ;
  9577 0000342A 5A                  <1>         pop dx
  9578                              <1> 
  9579 0000342B 08E4                <1>         or ah, ah
  9580 0000342D 740F                <1>         jz .cannot_active                            ; can not found the partition record
  9581                              <1>         
  9582 0000342F B80103              <1>         mov ax , (INT13H_WRITE << 8 ) | 0x01         ; write the partition
  9583 00003432 E8D006              <1>         call disk_access                             ; table back.
  9584 00003435 720C                <1>         jc .disk_error
  9585                              <1> 
  9586 00003437 810C0008            <1>         or word [si + struc_bootrecord.flags], INFOFLAG_ACTIVE ; set active flag
  9587 0000343B 61                  <1>         popa
  9588 0000343C F8                  <1>         clc
  9589 0000343D C3                  <1>         ret
  9590                              <1>         
  9591                              <1> .cannot_active:
  9592 0000343E 61                  <1>         popa
  9593 0000343F 31C0                <1>         xor ax, ax
  9594 00003441 F9                  <1>         stc
  9595 00003442 C3                  <1>         ret
  9596                              <1> .disk_error:
  9597 00003443 61                  <1>         popa
  9598 00003444 C3                  <1>         ret
  9599                              <1> 
  9600                              <1> 
  9601                              <1> 
  9602                              <1> ;==============================================================================
  9603                              <1> ;toggle_record_hidden ---- toggle a boot record's hidden attribute
  9604                              <1> ;input:
  9605                              <1> ;      ds:si -> the record
  9606                              <1> ;output:
  9607                              <1> ;      cf = 0 success
  9608                              <1> ;      cf = 1 failed, ax = 0 cannot hide, otherwise disk error occured.
  9609                              <1> ;==============================================================================
  9610                              <1> toggle_record_hidden:
  9611 00003445 60                  <1>         pusha
  9612                              <1>         
  9613 00003446 E83603              <1>         call check_allow_hide
  9614 00003449 725F                <1>         jc .cannot_hide
  9615                              <1>         
  9616 0000344B B80102              <1>         mov ax, (INT13H_READ << 8 ) | 0x01                  ; read father's
  9617 0000344E 668B5C06            <1>         mov ebx, [si + struc_bootrecord.father_abs_addr]    ; partition table.
  9618 00003452 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]            ;
  9619                              <1>                                                             ;
  9620 00003455 8D3E[6D1C]          <1>         lea di, [knl_tmp.disk_buf1]                                  ;
  9621 00003459 E8A906              <1>         call disk_access                                    ;
  9622 0000345C 7251                <1>         jc .disk_error                                      ;
  9623                              <1> 
  9624 0000345E 6653                <1>         push ebx
  9625 00003460 57                  <1>         push di
  9626                              <1>         
  9627 00003461 81C7BE01            <1>         add di, PART_TBL_OFF
  9628                              <1> 
  9629 00003465 668B4C0A            <1>         mov ecx, [si + struc_bootrecord.abs_addr]    ; abs addr -> ebx
  9630                              <1> 
  9631 00003469 6629D9              <1>         sub ecx, ebx                                 ; relative addr -> ebx
  9632 0000346C 6689CB              <1> 	mov ebx, ecx
  9633                              <1> 
  9634 0000346F B90400              <1>         mov cx, 4
  9635                              <1> 
  9636 00003472 8B04                <1>         mov ax, [si + struc_bootrecord.flags]        ; get flags and type
  9637 00003474 8A7404              <1>         mov dh, [si + struc_bootrecord.type]
  9638 00003477 80E60F              <1>         and dh, 0x0F
  9639 0000347A A90002              <1>         test ax, INFOFLAG_HIDDEN
  9640 0000347D 7503                <1>         jnz .unhide_it
  9641 0000347F 80CE10              <1>         or dh, 0x10                                  ; hide the partition
  9642                              <1> 
  9643                              <1> .unhide_it:
  9644 00003482 30C0                <1>         xor al, al
  9645                              <1>         
  9646                              <1> .search_in_father:                                   ;
  9647 00003484 66395D08            <1>         cmp [di + struc_partition.relative_addr], ebx; find the record in
  9648 00003488 7505                <1>         jne .not_it                                  ; father's partition
  9649 0000348A FEC0                <1>         inc al
  9650 0000348C 887504              <1>         mov byte [di  + struc_partition.type], dh    ; set partition type.
  9651                              <1> .not_it:                                             ;
  9652 0000348F 83C710              <1>         add di, SIZE_OF_PARTITION                    ;
  9653 00003492 E2F0                <1>         loop .search_in_father                       ;
  9654                              <1> 
  9655 00003494 5F                  <1>         pop di                                       ;
  9656 00003495 665B                <1>         pop ebx                                      ;
  9657                              <1> 
  9658 00003497 08C0                <1>         or al, al
  9659 00003499 740F                <1>         jz .cannot_hide                              ; can not found the partition record
  9660                              <1>         
  9661 0000349B B80103              <1>         mov ax , (INT13H_WRITE << 8 ) | 0x01         ; write the partition
  9662 0000349E E86406              <1>         call disk_access                             ; table back.
  9663 000034A1 720C                <1>         jc .disk_error
  9664                              <1> 
  9665 000034A3 81340002            <1>         xor word [si + struc_bootrecord.flags], INFOFLAG_HIDDEN ; toggle hidden flag.
  9666 000034A7 61                  <1>         popa
  9667 000034A8 F8                  <1>         clc
  9668 000034A9 C3                  <1>         ret
  9669                              <1>         
  9670                              <1> .cannot_hide:
  9671 000034AA 61                  <1>         popa
  9672 000034AB 31C0                <1>         xor ax, ax
  9673 000034AD F9                  <1>         stc
  9674 000034AE C3                  <1>         ret
  9675                              <1> .disk_error:
  9676 000034AF 61                  <1>         popa
  9677 000034B0 C3                  <1>         ret
  9678                              <1> 
  9679                              <1> ;==============================================================================
  9680                              <1> ;set_record_schedule ---- set the record's schedule time
  9681                              <1> ;input:
  9682                              <1> ;      ds:si -> the record
  9683                              <1> ;      ax = begin time (in minutes)
  9684                              <1> ;      bx = end time (in minutes)
  9685                              <1> ;      dx = week info (bit 0 to bit 6 indicate Mon to Sun, zero means all days)
  9686                              <1> ;output:
  9687                              <1> ;      none
  9688                              <1> ;==============================================================================
  9689                              <1> set_record_schedule:
  9690 000034B1 60                  <1>        pusha
  9691 000034B2 09C0                <1>        or ax, ax
  9692 000034B4 750E                <1>        jnz .timeok
  9693 000034B6 09DB                <1>        or bx, bx
  9694 000034B8 750A                <1>        jnz .timeok
  9695 000034BA 09D2                <1>        or dx, dx
  9696 000034BC 7506                <1>        jnz .timeok
  9697                              <1> 
  9698 000034BE 8124FF7F            <1>        and word [si + struc_bootrecord.flags], ~ INFOFLAG_SCHEDULED
  9699 000034C2 61                  <1>        popa
  9700 000034C3 C3                  <1>        ret
  9701                              <1> 
  9702                              <1> .timeok:
  9703 000034C4 6681E3FF0F0000      <1>        and ebx, 0x00000fff
  9704 000034CB 6625FF0F0000        <1>        and eax, 0x00000fff
  9705 000034D1 66C1E30C            <1>        shl ebx, 12
  9706 000034D5 6609D8              <1>        or  eax, ebx
  9707 000034D8 6681E2FF000000      <1>        and edx, 0x000000ff
  9708 000034DF 66C1E218            <1>        shl edx, 24
  9709 000034E3 6609D0              <1>        or  eax, edx
  9710                              <1> 
  9711 000034E6 66894412            <1>        mov [si + struc_bootrecord.schedule_time], eax
  9712 000034EA 810C0080            <1>        or word [si + struc_bootrecord.flags], INFOFLAG_SCHEDULED
  9713                              <1> 
  9714 000034EE 61                  <1>        popa
  9715 000034EF C3                  <1>        ret
  9716                              <1> 
  9717                              <1> ;==============================================================================
  9718                              <1> ;get_record_schedule ---- set the record's schedule time
  9719                              <1> ;input:
  9720                              <1> ;      ds:si -> the record
  9721                              <1> ;output:
  9722                              <1> ;      ax = begin time (in minutes)
  9723                              <1> ;      bx = end time (in minutes)
  9724                              <1> ;      dx = week info (bit 0 to bit 6 indicate Mon to Sun, zero means all days)
  9725                              <1> ;==============================================================================
  9726                              <1> get_record_schedule:
  9727 000034F0 31C0                <1>        xor ax, ax
  9728 000034F2 31DB                <1>        xor bx, bx
  9729 000034F4 31D2                <1>        xor dx, dx
  9730                              <1> 
  9731 000034F6 F7040080            <1>        test word [si + struc_bootrecord.flags], INFOFLAG_SCHEDULED
  9732 000034FA 741D                <1>        jz .end
  9733                              <1> 
  9734 000034FC 668B4412            <1>        mov eax, [si + struc_bootrecord.schedule_time]
  9735 00003500 6689C3              <1>        mov ebx, eax
  9736 00003503 6689C2              <1>        mov edx, eax
  9737                              <1> 
  9738 00003506 25FF0F              <1>        and ax, 0x0fff
  9739 00003509 66C1EB0C            <1>        shr ebx, 12
  9740 0000350D 81E3FF0F            <1>        and bx, 0x0fff
  9741 00003511 66C1EA18            <1>        shr edx, 24
  9742 00003515 81E2FF00            <1>        and dx, 0x00ff
  9743                              <1> 
  9744                              <1> .end:
  9745 00003519 C3                  <1>        ret
  9746                              <1> 
  9747                              <1> ;=============================================================================
  9748                              <1> ;schedule_to_str ---- convert schedule time to string
  9749                              <1> ;input:
  9750                              <1> ;       ax = start time
  9751                              <1> ;       bx = stop time
  9752                              <1> ;       dx = days info
  9753                              <1> ;       es:di -> buffer
  9754                              <1> ;output:
  9755                              <1> ;       none
  9756                              <1> ;=============================================================================
  9757                              <1> schedule_to_str:
  9758 0000351A 60                  <1>         pusha
  9759 0000351B FC                  <1>         cld
  9760 0000351C E83700              <1>         call sch_time_to_str
  9761 0000351F 89FE                <1>         mov si, di
  9762 00003521 E8C0F5              <1>         call strlen
  9763 00003524 01CF                <1>         add di, cx
  9764 00003526 B02D                <1>         mov al, '-'
  9765 00003528 AA                  <1>         stosb
  9766 00003529 89D8                <1>         mov ax, bx
  9767 0000352B E82800              <1>         call sch_time_to_str
  9768 0000352E 89FE                <1>         mov si, di
  9769 00003530 E8B1F5              <1>         call strlen
  9770 00003533 01CF                <1>         add di, cx
  9771 00003535 B03B                <1>         mov al, ';'
  9772 00003537 AA                  <1>         stosb
  9773 00003538 E80200              <1>         call sch_days_to_str
  9774 0000353B 61                  <1>         popa
  9775 0000353C C3                  <1>         ret
  9776                              <1> 
  9777                              <1> ;=============================================================================
  9778                              <1> ;sch_days_to_str ---- convert days info string 0123456
  9779                              <1> ;input:
  9780                              <1> ;       dx = day bits
  9781                              <1> ;       es:di -> buffer
  9782                              <1> ;output:
  9783                              <1> ;       none
  9784                              <1> ;=============================================================================
  9785                              <1> sch_days_to_str:
  9786 0000353D 60                  <1>         pusha
  9787 0000353E B90700              <1>         mov cx, 7
  9788 00003541 B030                <1>         mov al, '0'
  9789 00003543 BB0100              <1>         mov bx, 1
  9790                              <1> 
  9791                              <1> .loop_chk:
  9792 00003546 85DA                <1>         test dx, bx
  9793 00003548 7401                <1>         jz .nothisday
  9794 0000354A AA                  <1>         stosb
  9795                              <1> .nothisday:
  9796 0000354B D1E3                <1>         shl bx, 1
  9797 0000354D FEC0                <1>         inc al
  9798 0000354F E2F5                <1>         loop .loop_chk
  9799                              <1> 
  9800 00003551 30C0                <1>         xor al, al
  9801 00003553 AA                  <1>         stosb
  9802                              <1> 
  9803 00003554 61                  <1>         popa
  9804 00003555 C3                  <1>         ret
  9805                              <1> 
  9806                              <1> ;=============================================================================
  9807                              <1> ;sch_time_to_str ---- convert time in minute info string hh:mm
  9808                              <1> ;input:
  9809                              <1> ;       ax = time
  9810                              <1> ;       es:di -> buffer
  9811                              <1> ;output:
  9812                              <1> ;       none
  9813                              <1> ;=============================================================================
  9814                              <1> sch_time_to_str:
  9815 00003556 60                  <1>         pusha
  9816                              <1> 
  9817 00003557 B23C                <1>         mov dl, 60
  9818 00003559 F6F2                <1>         div dl
  9819 0000355B 50                  <1>         push ax
  9820                              <1> 
  9821 0000355C 30E4                <1>         xor ah, ah
  9822 0000355E 3C0A                <1>         cmp al, 10
  9823 00003560 7205                <1>         jb .hlten
  9824 00003562 B90200              <1>         mov cx, 2
  9825 00003565 EB03                <1>         jmp short .showh
  9826                              <1> .hlten:
  9827 00003567 B90100              <1>         mov cx,1
  9828                              <1> .showh:
  9829 0000356A E829F5              <1>         call itoa
  9830                              <1> 
  9831 0000356D B03A                <1>         mov al,':'
  9832 0000356F 01CF                <1>         add di, cx
  9833 00003571 AA                  <1>         stosb
  9834                              <1> 
  9835 00003572 58                  <1>         pop ax
  9836 00003573 0FB6C4              <1>         movzx ax, ah
  9837 00003576 3C0A                <1>         cmp al, 10
  9838 00003578 7205                <1>         jb .mlten
  9839 0000357A B90200              <1>         mov cx, 2
  9840 0000357D EB03                <1>         jmp short .showm
  9841                              <1> .mlten:
  9842 0000357F B90100              <1>         mov cx,1
  9843                              <1> .showm:
  9844 00003582 E811F5              <1>         call itoa
  9845                              <1> 
  9846 00003585 61                  <1>         popa
  9847 00003586 C3                  <1>         ret
  9848                              <1> 
  9849                              <1> ;==============================================================================
  9850                              <1> ;boot_normal_record ---- boot a normal record
  9851                              <1> ;input:
  9852                              <1> ;      ds:si -> the record
  9853                              <1> ;output:
  9854                              <1> ;      will not return when successfully boot.
  9855                              <1> ;      if return then al != 0 disk error; al = 0 no operation system.
  9856                              <1> ;==============================================================================
  9857                              <1> boot_normal_record:
  9858 00003587 06                  <1>         push es
  9859                              <1> 
  9860 00003588 8B1C                <1>         mov bx, [si + struc_bootrecord.flags]
  9861 0000358A F7C30010            <1>         test bx, INFOFLAG_AUTOACTIVE
  9862 0000358E 7403                <1>         jz .no_need_act
  9863 00003590 E848FE              <1>         call mark_record_active             ; active the partition
  9864                              <1> 
  9865                              <1> .no_need_act:
  9866 00003593 F7C30002            <1>         test bx, INFOFLAG_HIDDEN
  9867 00003597 7403                <1>         jz .not_hidden
  9868 00003599 E8A9FE              <1>         call toggle_record_hidden           ; unhide the partition
  9869                              <1> 
  9870                              <1> .not_hidden:
  9871                              <1> 
  9872 0000359C 53                  <1>         push bx                             ; save the flags
  9873 0000359D 8D3E[6D1C]          <1>         lea di, [knl_tmp.disk_buf1]         ; load boot sector into knl_tmp.disk_buf1.
  9874 000035A1 B80102              <1>         mov ax, (INT13H_READ << 8 ) | 0x01
  9875 000035A4 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]
  9876 000035A7 668B5C0A            <1>         mov ebx, [si + struc_bootrecord.abs_addr]
  9877                              <1> 
  9878 000035AB E85705              <1>         call disk_access                    ; read the first sector of the
  9879                              <1>                                             ; partition / floppy into
  9880                              <1>                                             ; memory.
  9881 000035AE 5B                  <1>         pop bx
  9882 000035AF 0F829200            <1>         jmpc .disk_error
  9883                              <1> 
  9884 000035B3 81BDFE0155AA        <1>         cmp word [di + BR_FLAG_OFF], BR_GOOD_FLAG
  9885 000035B9 0F858600            <1>         jmpne .no_system
  9886                              <1> 
  9887 000035BD F7C38000            <1>         test bx, INFOFLAG_ISDRIVER          ; if it's driver, skip loading the
  9888                              <1>                                             ; partition table.
  9889 000035C1 7517                <1>         jnz .do_boot
  9890                              <1> 
  9891 000035C3 53                  <1>         push bx                             ; save the flags 
  9892 000035C4 8D3E[6D24]          <1>         lea di, [knl_tmp.disk_buf2]    ; load part table into knl_tmp.disk_buf2
  9893                              <1> 
  9894 000035C8 668B5C06            <1>         mov ebx, [si + struc_bootrecord.father_abs_addr]
  9895                              <1> 
  9896 000035CC E83605              <1>         call disk_access                    ; load part table into memory.
  9897 000035CF 5B                  <1>         pop bx
  9898 000035D0 7273                <1>         jc .disk_error
  9899                              <1> 
  9900 000035D2 81BDFE0155AA        <1>         cmp word [di + BR_FLAG_OFF], BR_GOOD_FLAG
  9901 000035D8 7569                <1>         jne .no_system                      ; bad partition table, treated as
  9902                              <1>                                             ; no operating system.
  9903                              <1> 
  9904                              <1> .do_boot:
  9905                              <1> %ifndef EMULATE_PROG
  9906                              <1> 
  9907 000035DA F7C30020            <1>         test bx, INFOFLAG_SWAPDRVID         ; check if need swap id
  9908 000035DE 7413                <1>         jz .no_swapid
  9909                              <1> 
  9910                              <1> ;================ swap the driver id ========================================
  9911 000035E0 88D6                <1>         mov dh, dl
  9912 000035E2 80E680              <1>         and dh, 0x80                        ; set driver id to the bootable id
  9913                              <1> 
  9914 000035E5 89D3                <1> 	mov bx, dx
  9915 000035E7 86F2                <1> 	xchg dh, dl
  9916 000035E9 89D1                <1> 	mov cx, dx
  9917                              <1> 
  9918 000035EB E8CF05              <1> 	call set_drive_map
  9919                              <1> 
  9920 000035EE 885402              <1>         mov [si + struc_bootrecord.drive_id], dl  ; write new driver id back
  9921 000035F1 EB03                <1> 	jmp short .swap_ok
  9922                              <1> 
  9923                              <1> .no_swapid:
  9924 000035F3 E8AB05              <1> 	call uninstall_myint13h
  9925                              <1> 
  9926                              <1> .swap_ok:
  9927 000035F6 E80901              <1>         call prepare_boot                   ; prepare to boot.
  9928 000035F9 7248                <1>         jc .no_system                       ; preparation failed.
  9929                              <1>         
  9930                              <1> %endif
  9931 000035FB E8E000              <1>         call preload_keystrokes     ; preload the keystrokes into key buffer.
  9932 000035FE E89CE9              <1>         call reset_video_mode
  9933                              <1> 
  9934                              <1> %ifndef EMULATE_PROG
  9935                              <1> 
  9936 00003601 56                  <1>         push si
  9937 00003602 FC                  <1>         cld
  9938                              <1> 
  9939 00003603 31C0                <1>         xor ax, ax
  9940 00003605 50                  <1>         push ax
  9941 00003606 07                  <1>         pop es
  9942 00003607 B90002              <1>         mov cx, SECTOR_SIZE
  9943                              <1> 
  9944 0000360A F7048000            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_ISDRIVER
  9945                              <1>                                             ; if it's driver, no partition
  9946 0000360E 750B                <1>         jnz .boot_driver                    ; table to load.
  9947                              <1>         
  9948 00003610 8D36[6D24]          <1>         lea si, [knl_tmp.disk_buf2]
  9949 00003614 BF0006              <1>         mov di, PART_OFF
  9950                              <1> 
  9951 00003617 51                  <1>         push cx
  9952 00003618 F3A4                <1>         rep movsb                           ; move mbr (partition table) to
  9953                              <1>                                             ; 0000:0600
  9954 0000361A 59                  <1>         pop cx
  9955                              <1>         
  9956                              <1> .boot_driver:
  9957 0000361B 8D36[6D1C]          <1>         lea si, [knl_tmp.disk_buf1]
  9958 0000361F BF007C              <1>         mov di, BOOT_OFF
  9959 00003622 F3A4                <1>         rep movsb                           ; move boot sector to 0000:7C00
  9960                              <1> 
  9961 00003624 5E                  <1>         pop si
  9962                              <1> 
  9963 00003625 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id] ; drive id -> dl
  9964 00003628 30F6                <1>         xor dh, dh
  9965                              <1> 
  9966                              <1> ; boot code from lilo :-)
  9967                              <1> 
  9968 0000362A 89DE                <1>         mov si, bx                          ; ds:si , es:di point to the
  9969 0000362C 81C6BE07            <1>         add si, PART_OFF + PART_TBL_OFF     ; partition record.
  9970 00003630 56                  <1>         push si                             ;
  9971 00003631 5F                  <1>         pop di                              ;
  9972                              <1> 
  9973 00003632 50                  <1>         push ax                             ; ds = 0 ( es already set to 0 ).
  9974 00003633 1F                  <1>         pop ds                              ;
  9975                              <1>         
  9976                              <1> %if 0
  9977                              <1>         xor bp, bp                          ; might help some boot problems
  9978                              <1>         mov ax, BR_GOOD_FLAG                ; boot signature (just in case ...)
  9979                              <1>         jmp 0:BOOT_OFF                      ; start boot sector
  9980                              <1> %else
  9981                              <1> ;boot code from the OS2 Boot Manager
  9982 00003634 BB007C              <1>         mov bx, BOOT_OFF
  9983                              <1>     
  9984 00003637 8ED0                <1>         mov ss,ax                           ; on all processors since the 186
  9985 00003639 89DC                <1>         mov sp,bx                           ; these instructions are locked
  9986                              <1>     
  9987 0000363B 89F5                <1>         mov bp, si
  9988 0000363D 50                  <1>         push    ax
  9989 0000363E 53                  <1>         push    bx
  9990 0000363F B855AA              <1>         mov ax, BR_GOOD_FLAG
  9991 00003642 CB                  <1>         retf                                ; start boot sector
  9992                              <1> %endif
  9993                              <1>         
  9994                              <1> %else
  9995                              <1> 	call uninstall_myint13h
  9996                              <1>         mov ax, 0x4c00                      ; return to dos.
  9997                              <1>         int 0x21                            ;
  9998                              <1> %endif
  9999                              <1> 
 10000                              <1> .no_system:
 10001 00003643 30C0                <1>         xor al, al
 10002                              <1> .disk_error:
 10003 00003645 07                  <1>         pop es
 10004 00003646 C3                  <1>         ret
 10005                              <1> 
 10006                              <1> %ifndef DISABLE_CDBOOT
 10007                              <1> ;==============================================================================
 10008                              <1> ; boot_cdrom ---- boot cdrom driver
 10009                              <1> ; input: ds:di -> boot catalog
 10010                              <1> ;        dl = cdrom drvid
 10011                              <1> ;==============================================================================
 10012                              <1> boot_cdrom:
 10013 00003647 8A4501              <1> 	mov al, [di+1]
 10014 0000364A 240F                <1> 	and al, 0x0f
 10015                              <1> 
 10016 0000364C BE[5A1C]            <1> 	mov si, knl_tmp.cdemu_spec
 10017 0000364F C60413              <1> 	mov byte [si], SIZE_OF_CDEMU_SPEC
 10018 00003652 884401              <1> 	mov [si + struc_cdemu_spec.media_type], al
 10019                              <1> 
 10020 00003655 30E4                <1> 	xor ah, ah
 10021 00003657 08C0                <1> 	or al, al
 10022 00003659 7502                <1> 	jnz .floppy_emu
 10023 0000365B 88D4                <1> 	mov ah, dl
 10024                              <1> .floppy_emu: 
 10025                              <1> 
 10026 0000365D 886402              <1> 	mov byte [si + struc_cdemu_spec.emu_drvid], ah
 10027 00003660 668B5D08            <1> 	mov ebx, [di+0x08]
 10028 00003664 66895C04            <1> 	mov [si + struc_cdemu_spec.image_lba], ebx
 10029 00003668 8B5D02              <1> 	mov bx, [di+0x02]
 10030 0000366B 895C0C              <1> 	mov [si + struc_cdemu_spec.load_seg], bx
 10031 0000366E 8B5D06              <1> 	mov bx, [di+0x06]
 10032 00003671 895C0E              <1> 	mov [si + struc_cdemu_spec.sect_count], bx
 10033 00003674 C6441050            <1> 	mov byte [si + struc_cdemu_spec.cylinders], 0x50
 10034 00003678 C6441202            <1> 	mov byte [si + struc_cdemu_spec.heads], 2
 10035                              <1> 
 10036 0000367C 88C3                <1> 	mov bl, al
 10037 0000367E 30FF                <1> 	xor bh, bh
 10038 00003680 8AA7[A236]          <1> 	mov ah, [.sect_nums + bx]
 10039                              <1> 
 10040 00003684 886411              <1> 	mov byte [si + struc_cdemu_spec.sectors], ah
 10041 00003687 31C0                <1> 	xor ax, ax
 10042 00003689 89440A              <1> 	mov [si + struc_cdemu_spec.user_bufseg], ax
 10043                              <1> 
 10044                              <1> ;Boot it!
 10045 0000368C B8004A              <1> 	mov ax, 0x4a00
 10046 0000368F CD13                <1> 	int 0x13
 10047 00003691 8826[511C]          <1> 	mov [hdio_tmp.disk_errno],ah
 10048 00003695 720A                <1> 	jc .end
 10049                              <1> 
 10050                              <1> ;If the cd-rom is accessed via BIOS, then uninstall my int13h.
 10051 00003697 E80705              <1> 	call uninstall_myint13h
 10052                              <1> 
 10053 0000369A B8004C              <1> 	mov ax, 0x4c00
 10054 0000369D CD13                <1> 	int 0x13
 10055 0000369F 31C0                <1> 	xor ax, ax
 10056                              <1> .end:
 10057 000036A1 C3                  <1> 	ret
 10058                              <1> 
 10059 000036A2 000F1224            <1> .sect_nums  db  0, 0x0f, 0x12, 0x24
 10060                              <1> 
 10061                              <1> 
 10062                              <1> ;==============================================================================
 10063                              <1> ;find_cdboot_catalog ---- find boot catalog entry from buffer
 10064                              <1> ;input: ds:si -> buffer  es:di -> entries buffer
 10065                              <1> ;return: cx = number of entries
 10066                              <1> ;==============================================================================
 10067                              <1> find_cdboot_catalog:
 10068 000036A6 56                  <1> 	push si
 10069 000036A7 57                  <1> 	push di
 10070 000036A8 50                  <1> 	push ax
 10071 000036A9 FC                  <1> 	cld
 10072                              <1> 
 10073 000036AA 31C9                <1> 	xor cx, cx
 10074                              <1> 
 10075 000036AC 833C01              <1> 	cmp word [si], 0x0001
 10076 000036AF 7529                <1> 	jne .end
 10077 000036B1 817C1E55AA          <1> 	cmp word [si+0x1e], 0xaa55
 10078 000036B6 7522                <1> 	jne .end
 10079                              <1> 
 10080                              <1> .loop_find:
 10081 000036B8 8A04                <1> 	mov al, [si + struc_boot_catalog.indicator]
 10082 000036BA 08C0                <1> 	or al, al
 10083 000036BC 741C                <1> 	jz .end
 10084                              <1> 
 10085 000036BE 3C88                <1> 	cmp al, 0x88
 10086 000036C0 7513                <1> 	jne .loop_next
 10087                              <1> 
 10088 000036C2 8A4401              <1> 	mov al, [si + struc_boot_catalog.media_type]
 10089 000036C5 240F                <1> 	and al, 0x0f
 10090 000036C7 3C04                <1> 	cmp al , 4
 10091 000036C9 730A                <1> 	jae .loop_next
 10092                              <1> 
 10093 000036CB 51                  <1> 	push cx
 10094 000036CC 56                  <1> 	push si
 10095 000036CD B92000              <1> 	mov cx, SIZE_OF_BOOT_CATALOG
 10096 000036D0 F3A4                <1> 	rep movsb
 10097 000036D2 5E                  <1> 	pop si
 10098 000036D3 59                  <1> 	pop cx
 10099 000036D4 41                  <1> 	inc cx
 10100                              <1> 
 10101                              <1> .loop_next:
 10102 000036D5 83C620              <1> 	add si, SIZE_OF_BOOT_CATALOG
 10103 000036D8 EBDE                <1> 	jmp short .loop_find
 10104                              <1> 
 10105                              <1> .end:
 10106 000036DA 58                  <1> 	pop ax
 10107 000036DB 5F                  <1> 	pop di
 10108 000036DC 5E                  <1> 	pop si
 10109 000036DD C3                  <1> 	ret
 10110                              <1> 
 10111                              <1> %endif
 10112                              <1> 
 10113                              <1> ;==============================================================================
 10114                              <1> ;preload_keystrokes ---- preload the keystrokes into key buffer.
 10115                              <1> ;input:
 10116                              <1> ;      ds:si -> boot record
 10117                              <1> ;output:
 10118                              <1> ;      none
 10119                              <1> ;==============================================================================
 10120                              <1> preload_keystrokes:
 10121 000036DE 60                  <1>         pusha
 10122 000036DF FC                  <1>         cld
 10123 000036E0 F7040040            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_HAVEKEYS
 10124 000036E4 741A                <1>         jz .end
 10125                              <1> 
 10126 000036E6 B90D00              <1>         mov cx, MAX_KEYSTROKES
 10127 000036E9 83C626              <1>         add si, struc_bootrecord.keystrokes
 10128                              <1> 
 10129                              <1> .loop_load:
 10130 000036EC AD                  <1>         lodsw
 10131 000036ED 09C0                <1>         or ax, ax
 10132 000036EF 740F                <1>         jz .end
 10133                              <1> 
 10134 000036F1 51                  <1>         push cx
 10135 000036F2 89C1                <1>         mov cx, ax
 10136 000036F4 B405                <1>         mov ah, 0x05
 10137 000036F6 E81FF6              <1>         call bioskey
 10138 000036F9 59                  <1>         pop cx
 10139 000036FA 08C0                <1>         or al, al
 10140 000036FC 7502                <1>         jnz .end
 10141 000036FE E2EC                <1>         loop .loop_load
 10142                              <1> .end:
 10143 00003700 61                  <1>         popa
 10144 00003701 C3                  <1>         ret
 10145                              <1> 
 10146                              <1> ;==============================================================================
 10147                              <1> ;prepare_boot ---- do some preparation before booting.
 10148                              <1> ;input:
 10149                              <1> ;      ds:si -> boot record
 10150                              <1> ;      knl_tmp.disk_buf1  -> boot sector
 10151                              <1> ;      knl_tmp.disk_buf2 -> father's first sector ( partition table ).
 10152                              <1> ;output:
 10153                              <1> ;      cf = 0 success
 10154                              <1> ;          bx = the partition record's offset in partition table.
 10155                              <1> ;      cf = 1 failed
 10156                              <1> ;==============================================================================
 10157                              <1> prepare_boot:
 10158 00003702 31C0                <1>         xor ax, ax
 10159 00003704 F7048000            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_ISDRIVER
 10160 00003708 0F856F00            <1>         jmpnz .end
 10161                              <1> 
 10162 0000370C 668B5C0A            <1>         mov ebx, [si + struc_bootrecord.abs_addr]         ;
 10163                              <1> 
 10164 00003710 668B4C06            <1>         mov ecx, [si + struc_bootrecord.father_abs_addr]  ;
 10165                              <1> 
 10166 00003714 6689D8              <1>         mov eax, ebx
 10167 00003717 6629C8              <1>         sub eax, ecx                                      ; relative addr -> eax
 10168                              <1> 
 10169 0000371A 8D3E[2B26]          <1>         lea di, [knl_tmp.disk_buf2 + PART_TBL_OFF]
 10170 0000371E 30C9                <1>         xor cl, cl
 10171                              <1>         
 10172                              <1> .search_in_father:
 10173 00003720 66394508            <1>         cmp [di + struc_partition.relative_addr], eax
 10174 00003724 740C                <1>         je .found
 10175 00003726 FEC1                <1>         inc cl
 10176 00003728 83C710              <1>         add di, SIZE_OF_PARTITION
 10177 0000372B 80F904              <1>         cmp cl, 4
 10178 0000372E 72F0                <1>         jb .search_in_father
 10179 00003730 EB49                <1>         jmp short .failed
 10180                              <1> 
 10181                              <1> .found:
 10182 00003732 B010                <1>         mov al, SIZE_OF_PARTITION                   ; ax = offset in partition
 10183 00003734 F6E1                <1>         mul cl                                      ; table.
 10184                              <1> 
 10185 00003736 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]
 10186 00003739 8815                <1>         mov [di + struc_partition.state], dl        ; store drive id into
 10187                              <1>                                                     ; partition record
 10188                              <1> 
 10189 0000373B 8D3E[6D1C]          <1>         lea di, [knl_tmp.disk_buf1]                          ; di -> boot record
 10190 0000373F 8A7404              <1>         mov dh, [si + struc_bootrecord.type]
 10191                              <1> 
 10192 00003742 80FE04              <1>         cmp dh, 0x04
 10193 00003745 7416                <1>         je .fat16
 10194 00003747 80FE06              <1>         cmp dh, 0x06
 10195 0000374A 7411                <1>         je .fat16
 10196 0000374C 80FE0E              <1>         cmp dh, 0x0e
 10197 0000374F 740C                <1>         je .fat16
 10198 00003751 80FE0B              <1>         cmp dh, 0x0b
 10199 00003754 7416                <1>         je .fat32
 10200 00003756 80FE0C              <1>         cmp dh, 0x0c
 10201 00003759 7411                <1>         je .fat32
 10202 0000375B EB1E                <1>         jmp short .end
 10203                              <1> .fat16:
 10204 0000375D 807D2629            <1>         cmp byte [di + FAT16_EXTBRID_OFF], EXTBRID
 10205 00003761 7518                <1>         jne .end
 10206                              <1>         
 10207 00003763 885524              <1>         mov [di + FAT16_DRVID_OFF], dl              ; update the drive id.
 10208 00003766 66895D1C            <1>         mov [di + FAT16_HIDSEC_OFF], ebx            ; update hidden sector
 10209                              <1>                                                     ; = abs_addr.
 10210 0000376A EB0F                <1>         jmp short .end
 10211                              <1> .fat32:
 10212 0000376C 807D4229            <1>         cmp byte [di + FAT32_EXTBRID_OFF], EXTBRID
 10213 00003770 7509                <1>         jne .end
 10214                              <1>         
 10215 00003772 885540              <1>         mov [di + FAT32_DRVID_OFF], dl              ; update the drive id.
 10216 00003775 66895D1C            <1>         mov [di + FAT32_HIDSEC_OFF], ebx            ; update hidden sector
 10217                              <1>                                                     ; = abs_addr.
 10218 00003779 EB00                <1>         jmp short .end
 10219                              <1>         
 10220                              <1> .failed:
 10221                              <1> ;        stc
 10222                              <1> ;        ret
 10223                              <1> .end:
 10224 0000377B 89C3                <1>         mov bx, ax          ; partition record's offset store to bx.
 10225 0000377D F8                  <1>         clc
 10226 0000377E C3                  <1>         ret
 10227                              <1> 
 10228                              <1> ;==============================================================================
 10229                              <1> ;check_allow_hide ---- check if the partition can be hidden.
 10230                              <1> ;input:
 10231                              <1> ;      ds:si -> the boot record
 10232                              <1> ;output:
 10233                              <1> ;      cf = 0 can be hidden
 10234                              <1> ;      cf = 1 cannot be hidden
 10235                              <1> ;==============================================================================
 10236                              <1> check_allow_hide:
 10237 0000377F 60                  <1>         pusha
 10238 00003780 09F6                <1> 	or si, si
 10239 00003782 741B                <1> 	jz .cannot_hide
 10240                              <1> 
 10241 00003784 8B04                <1>         mov ax, [si + struc_bootrecord.flags]
 10242 00003786 A90100              <1>         test ax, DRVFLAG_DRIVEOK
 10243 00003789 7414                <1>         jz .cannot_hide
 10244 0000378B A99800              <1>         test ax, INFOFLAG_ISDRIVER | DRVFLAG_ISCDROM | INFOFLAG_ISSPECIAL
 10245 0000378E 750F                <1>         jnz .cannot_hide
 10246                              <1> 
 10247 00003790 8A4404              <1>         mov al, [si + struc_bootrecord.type]
 10248 00003793 B90700              <1>         mov cx, NUM_OF_ALLOW_HIDE
 10249 00003796 8D3E[3639]          <1>         lea di, [part_type.allow_hide_tbl]
 10250 0000379A E871F3              <1>         call strchr
 10251 0000379D 61                  <1>         popa
 10252 0000379E C3                  <1>         ret
 10253                              <1>         
 10254                              <1> .cannot_hide:
 10255 0000379F 61                  <1>         popa
 10256 000037A0 F9                  <1>         stc
 10257 000037A1 C3                  <1>         ret
 10258                              <1> 
 10259                              <1> ;==============================================================================
 10260                              <1> ;check_allow_act ---- check if the partition can be actived.
 10261                              <1> ;input:
 10262                              <1> ;      ds:si -> the boot record
 10263                              <1> ;output:
 10264                              <1> ;      cf = 0 can be actived
 10265                              <1> ;      cf = 1 cannot be actived
 10266                              <1> ;==============================================================================
 10267                              <1> check_allow_act:
 10268 000037A2 60                  <1>         pusha
 10269 000037A3 09F6                <1> 	or si, si
 10270 000037A5 740F                <1> 	jz .cannot_act
 10271                              <1> 
 10272 000037A7 8B04                <1>         mov ax, [si + struc_bootrecord.flags]   ; get flags
 10273 000037A9 A90100              <1>         test ax, DRVFLAG_DRIVEOK
 10274 000037AC 7408                <1>         jz .cannot_act
 10275 000037AE A99801              <1>         test ax, INFOFLAG_ISDRIVER | INFOFLAG_LOGICAL | DRVFLAG_ISCDROM | INFOFLAG_ISSPECIAL
 10276 000037B1 7503                <1>         jnz .cannot_act
 10277 000037B3 61                  <1>         popa
 10278 000037B4 F8                  <1>         clc
 10279 000037B5 C3                  <1>         ret
 10280                              <1>         
 10281                              <1> .cannot_act:
 10282 000037B6 61                  <1>         popa
 10283 000037B7 F9                  <1>         stc
 10284 000037B8 C3                  <1>         ret
 10285                              <1> 
 10286                              <1> ;==============================================================================
 10287                              <1> ;check_prev_mbr ---- check if the previous mbr is avaiable.
 10288                              <1> ;input:
 10289                              <1> ;      none
 10290                              <1> ;output:
 10291                              <1> ;      cf = 0 present
 10292                              <1> ;      cf = 1 absent
 10293                              <1> ;==============================================================================
 10294                              <1> check_prev_mbr:
 10295 000037B9 60                  <1> 	pusha
 10296 000037BA 8A16[1000]          <1> 	mov dl, [ADDR_SBMK_DRVID]
 10297 000037BE E88602              <1> 	call get_drive_flags
 10298 000037C1 7205                <1> 	jc .end
 10299 000037C3 A804                <1> 	test al, DRVFLAG_REMOVABLE
 10300 000037C5 7401                <1> 	jz .end
 10301 000037C7 F9                  <1> 	stc
 10302                              <1> .end:
 10303 000037C8 61                  <1> 	popa
 10304 000037C9 C3                  <1> 	ret
 10305                              <1> 
 10306                              <1> ;==============================================================================
 10307                              <1> ;data area
 10308                              <1> ;==============================================================================
 10309                              <1> 
 10310                              <1> ; strings used in knl.asm
 10311 000037CA 536B58614168486C44- <1> infoflag_chars  db "SkXaAhHlD",0
 10312 000037D3 00                  <1>
 10313                              <1> 
 10314                              <1> knl_strings:
 10315 000037D4 466C6F70707900      <1> .floppy     db "Floppy",0
 10316 000037DB 5072696D61727900    <1> .primary    db "Primary",0
 10317 000037E3 4C6F676963616C00    <1> .logical    db "Logical",0
 10318 000037EB 52656D6F7661626C65- <1> .removable  db "Removable",0
 10319 000037F4 00                  <1>
 10320 000037F5 486172646469736B00  <1> .harddisk   db "Harddisk",0
 10321 000037FE 43442D524F4D00      <1> .cdrom      db "CD-ROM",0
 10322 00003805 5370656369616C00    <1> .special    db "Special",0
 10323 0000380D 506F776572204F6666- <1> .poweroff   db "Power Off",0
 10324 00003816 00                  <1>
 10325 00003817 5265626F6F7400      <1> .restart    db "Reboot",0
 10326 0000381E 5175697420746F2042- <1> .quit       db "Quit to BIOS",0
 10327 00003827 494F5300            <1>
 10328 0000382B 50726576696F757320- <1> .bootprev   db "Previous MBR",0
 10329 00003834 4D425200            <1>
 10330 00003838 2D2D2D202D2D00      <1> .invalid_id db "--- --",0
 10331                              <1> 
 10332                              <1> ; partition types and strings
 10333                              <1> part_type:
 10334                              <1> 
 10335                              <1> ; table of partition type ids
 10336                              <1> .id_tbl:
 10337 0000383F 00060708090A0B0C    <1>         db 0x00, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 
 10338 00003847 0E3C4D4E4F636581    <1> 	db 0x0E, 0x3C, 0x4D, 0x4E, 0x4F, 0x63, 0x65, 0x81, 
 10339 0000384F 82838E93A5A6A9B7    <1> 	db 0x82, 0x83, 0x8E, 0x93, 0xA5, 0xA6, 0xA9, 0xB7, 
 10340 00003857 BEEB                <1> 	db 0xBE, 0xEB
 10341                              <1> 
 10342                              <1> ; table of partition type strings
 10343                              <1> .str_tbl:
 10344 00003859 4E4F4E4520202000    <1>         db "NONE   ",0           ; No type
 10345 00003861 4641543136202000    <1>         db "FAT16  ",0           ; 0x06
 10346 00003869 48502F4E54465300    <1>         db "HP/NTFS",0           ; 0x07
 10347 00003871 4149582830382900    <1> 	db "AIX(08)",0           ; 0x08
 10348 00003879 4149582830392900    <1> 	db "AIX(09)",0           ; 0x09
 10349 00003881 4F532F3220424D00    <1> 	db "OS/2 BM",0           ; 0x0A
 10350 00003889 4641543332202000    <1>         db "FAT32  ",0           ; 0x0B
 10351 00003891 4641543332782000    <1>         db "FAT32x ",0           ; 0x0C
 10352 00003899 4641543136782000    <1>         db "FAT16x ",0           ; 0x0E
 10353 000038A1 50512D426F6F7400    <1>         db "PQ-Boot",0           ; 0x3C
 10354 000038A9 514E58342E782000    <1>         db "QNX4.x ",0           ; 0x4D
 10355 000038B1 514E5834782D3200    <1>         db "QNX4x-2",0           ; 0x4E
 10356 000038B9 514E5834782D3300    <1>         db "QNX4x-3",0           ; 0x4F
 10357 000038C1 4855524420202000    <1>         db "HURD   ",0           ; 0x63
 10358 000038C9 4E6F76656C6C2000    <1>         db "Novell ",0           ; 0x65
 10359 000038D1 4D696E6978202000    <1>         db "Minix  ",0           ; 0x81
 10360 000038D9 4C6E785377617000    <1>         db "LnxSwap",0           ; 0x82
 10361 000038E1 4C696E7578202000    <1>         db "Linux  ",0           ; 0x83
 10362 000038E9 4C6E78204C564D00    <1> 	db "Lnx LVM",0           ; 0x8E
 10363 000038F1 416D6F6562612000    <1> 	db "Amoeba ",0           ; 0x93
 10364 000038F9 4253442F33383600    <1>         db "BSD/386",0           ; 0xA5
 10365 00003901 4F70656E42534400    <1>         db "OpenBSD",0           ; 0xA6
 10366 00003909 4E65744253442000    <1>         db "NetBSD ",0           ; 0xA9
 10367 00003911 4253446920667300    <1>         db "BSDi fs",0           ; 0xB7
 10368 00003919 536F6C6172697300    <1>         db "Solaris",0           ; 0xBE
 10369 00003921 42654F5320202000    <1>         db "BeOS   ",0           ; 0xEB
 10370 00003929 556E6B6E6F776E00    <1>         db "Unknown",0           ; other
 10371                              <1> 
 10372                              <1> ; logical partition types which could not boot
 10373                              <1> ; include the following pri_deny_tbl
 10374                              <1> .log_deny_tbl:
 10375                              <1> %ifdef STRICT_PART_CHECK
 10376                              <1>         db 0x01, 0x0A, 0x07, 0x17
 10377                              <1> %endif
 10378                              <1> ; primary partition types which could not boot
 10379                              <1> .pri_deny_tbl:
 10380 00003931 050F85              <1>         db 0x05, 0x0F, 0x85
 10381                              <1> %ifdef STRIC_PART_CHECK
 10382                              <1>         db 0x82, 0xA0, 0xB8, 0xE1, 0xE3, 0xF2
 10383                              <1> %endif
 10384 00003934 00                  <1> 	db 0x00
 10385                              <1> 
 10386                              <1> ;the partition types which should be marked as auto active.
 10387                              <1> .auto_act_tbl:
 10388                              <1> ;the partition types which can be hidden.
 10389                              <1> ;the hide method is add 0x10 to the partition type.
 10390                              <1> ; ie. the type of hidden FAT16 = 0x16, etc.
 10391 00003935 BE                  <1>         db 0xBE
 10392                              <1> .allow_hide_tbl:
 10393 00003936 010406070B0C0E      <1>         db 0x01, 0x04, 0x06, 0x07, 0x0B, 0x0C, 0x0E
 10394                              <1> 
 10395                              <1> ; the types used to hide certain partitions.
 10396                              <1> .hidden_tbl:
 10397 0000393D 111416171B1C1E      <1>         db 0x11, 0x14, 0x16, 0x17, 0x1B, 0x1C, 0x1E
 10398                              <1>         
 10399                              <1> .end_of_tbl
 10400                              <1> 
 10401                              <1> 
 10402                              <1> %ifndef MAIN
 10403                              <1> reset_video_mode:
 10404                              <1> 	ret
 10405                              <1> 
 10406                              <1> sbmk_header:
 10407                              <1> .drvid	db 0
 10408                              <1> 
 10409                              <1> 	section .bss
 10410                              <1> %include "tempdata.asm"
 10411                              <1> %endif
 10412                              <1> 
 10413                              <1> %endif	;End of HAVE_KNL
 10414                                  %include "hd_io.asm"
 10415                              <1> ; asmsyntax=nasm
 10416                              <1> ; hd_io.asm
 10417                              <1> ;
 10418                              <1> ; Interface to BIOS int 0x13 functions
 10419                              <1> ;
 10420                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
 10421                              <1> ;
 10422                              <1> 
 10423                              <1> %ifndef HAVE_HD_IO
 10424                              <1> 
 10425                              <1> %ifndef MAIN
 10426                              <1> %include "macros.h"
 10427                              <1> %include "hd_io.h"
 10428                              <1> %include "utils.asm"
 10429                              <1> 	section .text
 10430                              <1> %endif
 10431                              <1> 
 10432                              <1> %define HAVE_HD_IO
 10433                              <1> 
 10434                              <1> %define RETRY_TIMES     3
 10435                              <1> 
 10436                              <1>         bits 16
 10437                              <1> ;==============================================================================
 10438                              <1> ;check_int13ext ---- Check if the extension of int13h is presents for a driver.
 10439                              <1> ;input:
 10440                              <1> ;      dl = driver id
 10441                              <1> ;output:
 10442                              <1> ;      cf = 0, int13ext is presents
 10443                              <1> ;          cl = interface support bitmap.
 10444                              <1> ;      cf = 1, int13ext is not presents
 10445                              <1> ;==============================================================================
 10446                              <1> check_int13ext:
 10447 00003944 803E[5C3B]00        <1>         cmp byte [use_int13_ext], 0
 10448 00003949 7414                <1>         jz .not_present
 10449                              <1> 
 10450 0000394B BBAA55              <1>         mov bx, 0x55aa
 10451 0000394E B441                <1>         mov ah, INT13H_EXT_INSTCHECK
 10452 00003950 CD13                <1>         int 0x13                        ; Check if int13h extension is presents
 10453                              <1> ;        jc .not_present
 10454 00003952 81FB55AA            <1>         cmp bx, 0xaa55
 10455 00003956 7507                <1>         jne .not_present
 10456 00003958 F6C105              <1>         test cl, EXT_SUBSET_FIXED | EXT_SUBSET_EDD
 10457                              <1> 					; Check if this drive supports extended
 10458 0000395B 7402                <1>         jz .not_present                 ; read/write
 10459 0000395D F8                  <1>         clc
 10460 0000395E C3                  <1>         ret
 10461                              <1> .not_present:
 10462 0000395F F9                  <1>         stc
 10463 00003960 C3                  <1>         ret
 10464                              <1> 
 10465                              <1> ;==============================================================================
 10466                              <1> ;get_drive_info ---- Get drive informations
 10467                              <1> ;input:
 10468                              <1> ;      dl = drive id
 10469                              <1> ;      es:di -> buffer for drive info (struc struc_driveinfo)
 10470                              <1> ;output:
 10471                              <1> ;      cf = 0 ok
 10472                              <1> ;      cf = 1 drive is not presents
 10473                              <1> ;==============================================================================
 10474                              <1> get_drive_info:
 10475 00003961 60                  <1>         pusha
 10476                              <1>         
 10477 00003962 8815                <1>         mov [di + struc_driveinfo.id], dl
 10478 00003964 C6450100            <1>         mov byte [di + struc_driveinfo.flags], 0 ; clear the flags
 10479                              <1> 
 10480 00003968 52                  <1>         push dx
 10481 00003969 E8D8FF              <1>         call check_int13ext
 10482 0000396C 5A                  <1>         pop dx
 10483 0000396D 7359                <1>         jnc .ext_present
 10484                              <1> 
 10485 0000396F B415                <1>         mov ah, INT13H_GETTYPE
 10486 00003971 52                  <1>         push dx
 10487 00003972 CD13                <1>         int 0x13
 10488 00003974 8826[511C]          <1>         mov [hdio_tmp.disk_errno], ah
 10489 00003978 5A                  <1>         pop dx
 10490 00003979 724A                <1>         jc .drive_not_present
 10491 0000397B 08E4                <1>         or ah, ah                           ; ah = drive type, = 0 no such drive
 10492 0000397D 7446                <1>         jz .drive_not_present
 10493                              <1>         
 10494 0000397F 06                  <1>         push es
 10495 00003980 57                  <1>         push di
 10496 00003981 50                  <1>         push ax                             ; save drive type
 10497 00003982 B408                <1>         mov ah, INT13H_GETINFO
 10498 00003984 CD13                <1>         int 0x13
 10499 00003986 8826[511C]          <1>         mov [hdio_tmp.disk_errno], ah
 10500 0000398A 58                  <1>         pop ax
 10501 0000398B 5F                  <1>         pop di
 10502 0000398C 07                  <1>         pop es
 10503 0000398D 7236                <1>         jc .drive_not_present
 10504                              <1> 
 10505 0000398F 50                  <1>         push ax                             ; drive type.
 10506 00003990 53                  <1>         push bx                             ; floppy type.
 10507                              <1>         
 10508 00003991 0FB6C1              <1>         movzx ax, cl                             ;
 10509 00003994 243F                <1>         and al, 0x3f                             ; get sectors per track
 10510 00003996 894506              <1>         mov [di + struc_driveinfo.sectors], ax   ;
 10511                              <1> 
 10512 00003999 86E5                <1>         xchg ah, ch                              ;
 10513 0000399B C1E102              <1>         shl cx, 2                                ;
 10514 0000399E 88E1                <1>         mov cl, ah                               ; get cylinders
 10515 000039A0 41                  <1>         inc cx                                   ;
 10516 000039A1 894D02              <1>         mov [di + struc_driveinfo.cylinders], cx ;
 10517                              <1> 
 10518 000039A4 0FB6C6              <1> 	movzx ax, dh                             ; get heads
 10519 000039A7 40                  <1>         inc ax                                   ;
 10520 000039A8 894504              <1>         mov [di + struc_driveinfo.heads], ax     ;
 10521                              <1> 
 10522 000039AB 5B                  <1>         pop bx
 10523 000039AC 58                  <1>         pop ax
 10524                              <1> 
 10525 000039AD B601                <1>         mov dh, DRVFLAG_DRIVEOK
 10526 000039AF 80FC03              <1>         cmp ah, DRV_TYPE_FIXED                  ; fixed drive.
 10527 000039B2 7403                <1>         je .fixed_drive
 10528 000039B4 80CE04              <1>         or dh, DRVFLAG_REMOVABLE
 10529                              <1>         
 10530                              <1> .fixed_drive:
 10531 000039B7 80CE02              <1>         or dh, DRVFLAG_CHSVALID
 10532 000039BA 887501              <1>         mov [di + struc_driveinfo.flags], dh
 10533 000039BD C745080002          <1> 	mov word [di + struc_driveinfo.sector_size], 0x200
 10534 000039C2 E97F00              <1>         jmp .endok
 10535                              <1> 
 10536                              <1> .drive_not_present:
 10537 000039C5 61                  <1>         popa
 10538 000039C6 F9                  <1>         stc
 10539 000039C7 C3                  <1>         ret
 10540                              <1> 
 10541                              <1> .ext_present:
 10542                              <1> ;Int13h ext is presents, use int13h ext to get drive info
 10543 000039C8 B448                <1>         mov ah, INT13H_EXT_GETINFO
 10544 000039CA 8D36[F51B]          <1>         lea si, [hdio_tmp.extparam]
 10545 000039CE C7044200            <1>         mov word [si + struc_extparam.pack_size], SIZE_OF_EXTPARAM
 10546 000039D2 52                  <1>         push dx
 10547 000039D3 CD13                <1>         int 0x13
 10548 000039D5 8826[511C]          <1>         mov [hdio_tmp.disk_errno], ah
 10549 000039D9 5A                  <1>         pop dx
 10550 000039DA 72E9                <1>         jc .drive_not_present
 10551                              <1>         
 10552 000039DC 8B4404              <1>         mov ax, [si + struc_extparam.cylinders]
 10553 000039DF 894502              <1>         mov [di + struc_driveinfo.cylinders], ax
 10554 000039E2 8B4408              <1>         mov ax, [si + struc_extparam.heads]
 10555 000039E5 894504              <1>         mov [di + struc_driveinfo.heads], ax
 10556 000039E8 8B440C              <1>         mov ax, [si + struc_extparam.sectors]
 10557 000039EB 894506              <1>         mov [di + struc_driveinfo.sectors], ax
 10558 000039EE 8B4418              <1> 	mov ax, [si + struc_extparam.bytes_per_sect]
 10559 000039F1 894508              <1> 	mov [di + struc_driveinfo.sector_size], ax
 10560                              <1> 
 10561 000039F4 8A4402              <1>         mov al, [si + struc_extparam.flags]              ;
 10562 000039F7 2406                <1>         and al, (DRVFLAG_CHSVALID + DRVFLAG_REMOVABLE)   ; fill in the
 10563 000039F9 0C09                <1>         or al, DRVFLAG_EXTOK + DRVFLAG_DRIVEOK           ; struc_driveinfo.flags
 10564                              <1> 
 10565                              <1> %ifndef DISABLE_CDBOOT
 10566 000039FB 803C42              <1> 	cmp byte [si + struc_extparam.pack_size], SIZE_OF_EXTPARAM
 10567 000039FE 721F                <1> 	jb .no_edd30
 10568 00003A00 817C1EDDBE          <1> 	cmp word [si + struc_extparam.dpi_key], 0xBEDD
 10569 00003A05 7518                <1> 	jne .no_edd30
 10570 00003A07 807C2024            <1> 	cmp byte [si + struc_extparam.dpi_length], 36
 10571 00003A0B 7512                <1> 	jne .no_edd30
 10572 00003A0D 66817C2841544150    <1> 	cmp dword [si + struc_extparam.interface_type], 'ATAP'
 10573 00003A15 752A                <1> 	jne .not_cdrom
 10574 00003A17 807C2C49            <1> 	cmp byte [si + struc_extparam.interface_type+4], 'I'
 10575 00003A1B 7524                <1> 	jne .not_cdrom
 10576 00003A1D 0C10                <1> 	or al, DRVFLAG_ISCDROM
 10577                              <1> 
 10578                              <1> .no_edd30:
 10579 00003A1F 803C1E              <1> 	cmp byte [si + struc_extparam.pack_size], 30
 10580 00003A22 721D                <1> 	jb .not_cdrom
 10581 00003A24 8B5C1C              <1> 	mov bx, [si + struc_extparam.dpte_addr+2]
 10582 00003A27 83FBFF              <1> 	cmp bx, 0xffff
 10583 00003A2A 7415                <1> 	je .not_cdrom
 10584 00003A2C 8B741A              <1> 	mov si, [si + struc_extparam.dpte_addr]
 10585 00003A2F 83FEFF              <1> 	cmp si, 0xffff
 10586 00003A32 740D                <1> 	je .not_cdrom
 10587 00003A34 1E                  <1> 	push ds
 10588 00003A35 8EDB                <1> 	mov ds, bx
 10589 00003A37 3EF6440A40          <1> 	test byte [ds:si + struc_dpte.bios_spec], 0x40  ; check if is atapi dev
 10590 00003A3C 1F                  <1> 	pop ds
 10591 00003A3D 7402                <1> 	jz .not_cdrom
 10592 00003A3F 0C10                <1> 	or al, DRVFLAG_ISCDROM
 10593                              <1> 
 10594                              <1> .not_cdrom:
 10595                              <1> %endif
 10596 00003A41 884501              <1>         mov [di + struc_driveinfo.flags], al
 10597                              <1> 
 10598                              <1> .endok:
 10599 00003A44 61                  <1>         popa
 10600 00003A45 F8                  <1>         clc
 10601 00003A46 C3                  <1>         ret
 10602                              <1>         
 10603                              <1> ;==============================================================================
 10604                              <1> ;get_drive_flags ---- get drive flags
 10605                              <1> ;input:
 10606                              <1> ;      dl = drive id
 10607                              <1> ;output:
 10608                              <1> ;      cf = 0 ok, al = drive flags
 10609                              <1> ;      cf = 1 error, al = 0
 10610                              <1> ;==============================================================================
 10611                              <1> get_drive_flags:
 10612 00003A47 57                  <1>         push di
 10613 00003A48 8D3E[471C]          <1>         lea di, [hdio_tmp.driveinfo]
 10614 00003A4C E812FF              <1>         call get_drive_info
 10615 00003A4F 8A4501              <1>         mov al, [di + struc_driveinfo.flags]
 10616 00003A52 5F                  <1>         pop di
 10617 00003A53 C3                  <1>         ret
 10618                              <1> 
 10619                              <1> ;;;;;;;;;;;;;;;;;;; perhaps these will be used in future ;;;;;;;;;;;;;;;;;;;
 10620                              <1> %if 0
 10621                              <1> ;==============================================================================
 10622                              <1> ;init_drives_info ---- get all drives info
 10623                              <1> ;input:
 10624                              <1> ;      es:di -> buffer to store the info of each drives
 10625                              <1> ;               should have enought space to store 255 drives' info
 10626                              <1> ;output:
 10627                              <1> ;      dh = the number of drives (include the floppy)
 10628                              <1> ;==============================================================================
 10629                              <1> init_drives_info:
 10630                              <1>         push es
 10631                              <1>         push di
 10632                              <1>         mov cx, 256
 10633                              <1>         xor dx, dx
 10634                              <1> .loop_query:
 10635                              <1>         push cx
 10636                              <1>         push dx
 10637                              <1>         call get_drive_info
 10638                              <1>         pop dx
 10639                              <1>         pop cx
 10640                              <1>         jc .bad_drive
 10641                              <1>         inc dh
 10642                              <1>         
 10643                              <1> .bad_drive:
 10644                              <1>         add di, SIZE_OF_DRIVEINFO
 10645                              <1>         inc dl
 10646                              <1>         loop .loop_query
 10647                              <1>         
 10648                              <1>         pop di
 10649                              <1>         pop es
 10650                              <1>         ret
 10651                              <1> 
 10652                              <1> %endif
 10653                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10654                              <1> 
 10655                              <1> ;==============================================================================
 10656                              <1> ;lba2chs ---- lba to chs translation
 10657                              <1> ;input:
 10658                              <1> ;      ebx = lba address 
 10659                              <1> ;      ds : si -> drive info struc
 10660                              <1> ;output:
 10661                              <1> ;      cf = 0 success
 10662                              <1> ;            ch = low eight bits of cylinder number
 10663                              <1> ;            cl = sector number 1-63 (bits 0-5)
 10664                              <1> ;                 high two bits of cylinder (bits 6-7, hard disk only)
 10665                              <1> ;            dh = head number
 10666                              <1> ;      cf = 1 error ( cylinder exceed )
 10667                              <1> ;==============================================================================
 10668                              <1> lba2chs:
 10669 00003A54 50                  <1>         push ax
 10670 00003A55 6689D8              <1> 	mov eax, ebx
 10671                              <1> 
 10672 00003A58 660FB74C06          <1>         movzx ecx, word [si + struc_driveinfo.sectors] ; calculate sector:
 10673                              <1> 
 10674 00003A5D 09C9                <1>         or cx, cx                              ; sectors per track cannot equal
 10675 00003A5F 7429                <1>         jz .convert_failed                     ; to zero.
 10676                              <1>         
 10677 00003A61 6631D2              <1>         xor edx, edx
 10678 00003A64 66F7F1              <1>         div ecx                                ; sector =  lba % sects_per_track + 1
 10679 00003A67 42                  <1>         inc dx                                 ; lba1 = lba / sects_per_track
 10680 00003A68 89D1                <1>         mov cx, dx                             ;
 10681                              <1> 
 10682                              <1>                                                ; calculate head and cylinder:
 10683                              <1>                                                ; head = lba1 % num_of_heads
 10684 00003A6A 660FB75C04          <1>         movzx ebx, word [si + struc_driveinfo.heads] 
 10685                              <1>                                                ; cylinder = lba1 / num_of_heads
 10686                              <1> 
 10687 00003A6F 08DB                <1>         or bl, bl                              ; heads cannot equal to zero.
 10688 00003A71 7417                <1>         jz .convert_failed                     ;
 10689                              <1>         
 10690 00003A73 6631D2              <1>         xor edx, edx
 10691 00003A76 66F7F3              <1>         div ebx                                ;
 10692                              <1>         
 10693 00003A79 88D6                <1>         mov dh, dl                             ; head = dl <= 255
 10694 00003A7B 3DFF03              <1>         cmp ax, MAX_CYLS                       ; cylinder = ax
 10695 00003A7E 770A                <1>         ja .convert_failed                     ; cylinder is too big.
 10696                              <1> 
 10697 00003A80 86C4                <1>         xchg al, ah                            ;
 10698 00003A82 C0E006              <1>         shl al, 6                              ; fill cylinder and sector into
 10699 00003A85 09C1                <1>         or cx, ax                              ; cx
 10700 00003A87 58                  <1>         pop ax
 10701 00003A88 F8                  <1>         clc
 10702 00003A89 C3                  <1>         ret
 10703                              <1>         
 10704                              <1> .convert_failed:
 10705 00003A8A C606[511C]FE        <1>         mov byte [hdio_tmp.disk_errno], 0xFE             ; invalid LBA address
 10706 00003A8F 58                  <1>         pop ax
 10707 00003A90 F9                  <1>         stc
 10708 00003A91 C3                  <1>         ret
 10709                              <1>         
 10710                              <1> ;==============================================================================
 10711                              <1> ;disk_access_low ---- read / write sectors on disk
 10712                              <1> ;input:
 10713                              <1> ;      ah      = function id, ( 02 = read, 03 = write )
 10714                              <1> ;      al      = number of sectors to be accessed
 10715                              <1> ;      ebx     = lba address
 10716                              <1> ;      ds : si -> drive info struc
 10717                              <1> ;      es : di -> buffer to get/store data
 10718                              <1> ;output:
 10719                              <1> ;      cf = 0 success
 10720                              <1> ;      cf = 1 error
 10721                              <1> ;==============================================================================
 10722                              <1> disk_access_low:
 10723 00003A92 60                  <1>         pusha
 10724                              <1>         
 10725 00003A93 8A7401              <1>         mov dh, [si + struc_driveinfo.flags]
 10726 00003A96 F6C601              <1>         test dh, DRVFLAG_DRIVEOK ; check if drive ok
 10727 00003A99 7467                <1>         jz .access_error
 10728                              <1>         
 10729 00003A9B F6C608              <1>         test dh, DRVFLAG_EXTOK
 10730 00003A9E 7440                <1>         jz .no_ext
 10731                              <1>         
 10732                              <1> ;int13h extension is present, use it
 10733                              <1>         
 10734 00003AA0 8A14                <1>         mov dl, [si + struc_driveinfo.id]    ; get drive id
 10735 00003AA2 80C440              <1>         add ah, 0x40                         ; ext read func id = 0x42
 10736 00003AA5 8D36[371C]          <1>         lea si, [hdio_tmp.int13ext]
 10737 00003AA9 6631C9              <1>         xor ecx, ecx
 10738 00003AAC C60410              <1>         mov byte [si + struc_int13ext.pack_size], 0x10 ;
 10739 00003AAF 66894C0C            <1>         mov [si + struc_int13ext.blk_num_high1], ecx ; clear and set
 10740 00003AB3 884C01              <1>         mov [si + struc_int13ext.reserved], cl       ; some stuff.
 10741 00003AB6 884C03              <1>         mov [si + struc_int13ext.reserved1], cl      ;
 10742                              <1> 
 10743 00003AB9 897C04              <1>         mov [si + struc_int13ext.buf_addr_off], di
 10744 00003ABC 8C4406              <1>         mov [si + struc_int13ext.buf_addr_seg], es
 10745 00003ABF 66895C08            <1>         mov [si + struc_int13ext.blk_num_low1], ebx
 10746                              <1> 
 10747                              <1> .retry_ext_read:
 10748 00003AC3 884402              <1>         mov [si + struc_int13ext.blk_count], al
 10749                              <1>         
 10750 00003AC6 50                  <1>         push ax
 10751 00003AC7 52                  <1>         push dx
 10752 00003AC8 56                  <1>         push si
 10753 00003AC9 CD13                <1>         int 0x13
 10754 00003ACB 8826[511C]          <1>         mov [hdio_tmp.disk_errno], ah
 10755 00003ACF 5E                  <1>         pop si
 10756 00003AD0 5A                  <1>         pop dx
 10757 00003AD1 58                  <1>         pop ax
 10758 00003AD2 732F                <1>         jnc .access_ok
 10759 00003AD4 E86C00              <1>         call reset_drive
 10760 00003AD7 FEC6                <1>         inc dh
 10761 00003AD9 80FE03              <1>         cmp dh, RETRY_TIMES                 ; retry 3 times
 10762 00003ADC 72E5                <1>         jb .retry_ext_read
 10763 00003ADE EB22                <1>         jmp short .access_error
 10764                              <1> 
 10765                              <1> ;int13h extension is not ok, use old int13h
 10766                              <1> .no_ext:
 10767 00003AE0 E871FF              <1>         call lba2chs
 10768 00003AE3 721D                <1>         jc .access_error
 10769 00003AE5 8A14                <1>         mov dl, [si + struc_driveinfo.id]   ; dl = drive id
 10770 00003AE7 89FB                <1>         mov bx, di                          ; es : bx -> buffer
 10771 00003AE9 31FF                <1>         xor di, di
 10772                              <1>         
 10773                              <1> .retry_read:
 10774 00003AEB 50                  <1>         push ax
 10775 00003AEC 52                  <1>         push dx
 10776 00003AED 53                  <1>         push bx
 10777 00003AEE CD13                <1>         int 0x13
 10778 00003AF0 8826[511C]          <1>         mov [hdio_tmp.disk_errno], ah
 10779 00003AF4 5B                  <1>         pop bx
 10780 00003AF5 5A                  <1>         pop dx
 10781 00003AF6 58                  <1>         pop ax
 10782 00003AF7 730A                <1>         jnc .access_ok
 10783 00003AF9 E84700              <1>         call reset_drive
 10784 00003AFC 47                  <1>         inc di
 10785 00003AFD 83FF03              <1>         cmp di, RETRY_TIMES                 ; retry 3 times
 10786 00003B00 72E9                <1>         jb .retry_read
 10787                              <1> 
 10788                              <1> .access_error:
 10789 00003B02 F9                  <1>         stc
 10790                              <1> .access_ok:
 10791 00003B03 61                  <1>         popa
 10792 00003B04 C3                  <1>         ret
 10793                              <1> 
 10794                              <1> ;==============================================================================
 10795                              <1> ;disk_access ---- read / write sectors on disk
 10796                              <1> ;input:
 10797                              <1> ;      ah = function id, ( 02 = read, 03 = write )
 10798                              <1> ;      al = number of sectors to be accessed
 10799                              <1> ;      ebx = lba address
 10800                              <1> ;      dl = drive id
 10801                              <1> ;      es : di -> buffer
 10802                              <1> ;output:
 10803                              <1> ;      cf = 0 success
 10804                              <1> ;      cf = 1 error
 10805                              <1> ;==============================================================================
 10806                              <1> disk_access:
 10807 00003B05 56                  <1>         push si
 10808 00003B06 57                  <1>         push di
 10809 00003B07 6653                <1> 	push ebx
 10810                              <1> 
 10811 00003B09 06                  <1>         push es
 10812 00003B0A 1E                  <1>         push ds                         ; ds -> es, hdio_tmp.driveinfo is in ds segment.
 10813 00003B0B 07                  <1>         pop es
 10814                              <1>         
 10815 00003B0C 8D3E[471C]          <1>         lea di, [hdio_tmp.driveinfo]
 10816 00003B10 E84EFE              <1>         call get_drive_info
 10817                              <1>         
 10818 00003B13 07                  <1>         pop es
 10819 00003B14 665B                <1> 	pop ebx
 10820 00003B16 5F                  <1>         pop di
 10821                              <1>         
 10822 00003B17 7207                <1>         jc .access_error
 10823 00003B19 8D36[471C]          <1>         lea si, [hdio_tmp.driveinfo]
 10824 00003B1D E872FF              <1>         call disk_access_low
 10825                              <1> .access_error:
 10826 00003B20 5E                  <1>         pop si
 10827 00003B21 C3                  <1>         ret
 10828                              <1> 
 10829                              <1> 
 10830                              <1> %if 0
 10831                              <1> ;==============================================================================
 10832                              <1> ;get_cdrom_devinfo ---- get the CDROM's device info, e.g. io port
 10833                              <1> ;input: dl = drive id
 10834                              <1> ;output: cf = 0 success, ax = base io port, bx = ctrl port,
 10835                              <1> ;        cx = device specification
 10836                              <1> ;==============================================================================
 10837                              <1> get_cdrom_devinfo:
 10838                              <1> 	push si
 10839                              <1> 	call get_drive_flags
 10840                              <1> 	test al, DRVFLAG_ISCDROM
 10841                              <1> 	jz .not_cdrom
 10842                              <1> 
 10843                              <1> 	mov si, hdio_tmp.extparam
 10844                              <1> 	mov word [si], SIZE_OF_EXTPARAM
 10845                              <1> 	mov ah, 0x48
 10846                              <1> 	int 0x13
 10847                              <1> 
 10848                              <1> 	jc .not_cdrom
 10849                              <1> 	cmp byte [si], 30
 10850                              <1> 	jb .not_cdrom
 10851                              <1> 	mov ax, [si + struc_extparam.dpte_addr + 2]
 10852                              <1> 	cmp ax, 0xffff
 10853                              <1> 	je .not_cdrom
 10854                              <1> 
 10855                              <1> 	push es
 10856                              <1> 	push di
 10857                              <1> 	mov es, ax
 10858                              <1> 	mov di, [si + struc_extparam.dpte_addr]
 10859                              <1> 	mov ax, [es:di + struc_dpte.base_io]
 10860                              <1> 	mov bx, [es:di + struc_dpte.ctrl_io]
 10861                              <1> 	pop di
 10862                              <1> 	pop es
 10863                              <1> 
 10864                              <1> 	cmp byte [si], SIZE_OF_EXTPARAM
 10865                              <1> 	jb .not_cdrom
 10866                              <1> 	mov cx, [si + struc_extparam.device_path]
 10867                              <1> 	clc
 10868                              <1> 	jmp short .ok
 10869                              <1> 
 10870                              <1> .not_cdrom:
 10871                              <1> 	stc
 10872                              <1> .ok:
 10873                              <1> 	pop si
 10874                              <1> 	ret
 10875                              <1> 
 10876                              <1> %endif
 10877                              <1> 
 10878                              <1> %ifndef DISABLE_CDBOOT
 10879                              <1> ;==============================================================================
 10880                              <1> ;get_cdrom_boot_catalog ---- get the CDROM's boot catalog
 10881                              <1> ;input:
 10882                              <1> ;	dl = drive id
 10883                              <1> ;	es:di -> buffer
 10884                              <1> ;output:
 10885                              <1> ;	cf =0 success
 10886                              <1> ;	cf =1 error
 10887                              <1> ;==============================================================================
 10888                              <1> get_cdrom_boot_catalog:
 10889 00003B22 60                  <1> 	pusha
 10890 00003B23 BE[ED1B]            <1> 	mov si, hdio_tmp.cdbc_cmd
 10891 00003B26 C60408              <1> 	mov byte [si], SIZE_OF_CDBC_CMD
 10892 00003B29 C6440101            <1> 	mov byte [si+struc_cdbc_cmd.sector_count], 1
 10893 00003B2D 897C02              <1> 	mov [si+struc_cdbc_cmd.buf_addr_off], di
 10894 00003B30 8C4404              <1> 	mov [si+struc_cdbc_cmd.buf_addr_seg], es
 10895 00003B33 31DB                <1> 	xor bx, bx
 10896 00003B35 895C06              <1> 	mov [si+struc_cdbc_cmd.begnning_sect], bx
 10897 00003B38 B8004D              <1> 	mov ax, 0x4d00
 10898 00003B3B CD13                <1> 	int 0x13
 10899 00003B3D 8826[511C]          <1> 	mov [hdio_tmp.disk_errno], ah
 10900 00003B41 61                  <1> 	popa
 10901 00003B42 C3                  <1> 	ret
 10902                              <1> %endif
 10903                              <1> 
 10904                              <1> ;==============================================================================
 10905                              <1> ;reset_drive ---- reset the drive
 10906                              <1> ;input:
 10907                              <1> ;      dl = drive id
 10908                              <1> ;output:
 10909                              <1> ;      cf = 0 success
 10910                              <1> ;      cf = 1 error
 10911                              <1> ;==============================================================================
 10912                              <1> reset_drive:
 10913 00003B43 60                  <1>         pusha
 10914 00003B44 31C0                <1>         xor ax, ax
 10915 00003B46 CD13                <1>         int 0x13
 10916 00003B48 61                  <1>         popa
 10917 00003B49 C3                  <1>         ret
 10918                              <1> 
 10919                              <1> ;==============================================================================
 10920                              <1> ; get_last_disk_errno ---- get the last disk error number
 10921                              <1> ; input:
 10922                              <1> ;	none
 10923                              <1> ; output:
 10924                              <1> ;	ax = errno
 10925                              <1> ;==============================================================================
 10926                              <1> get_last_disk_errno:
 10927 00003B4A A1[511C]            <1> 	mov ax, [hdio_tmp.disk_errno]
 10928 00003B4D C3                  <1> 	ret
 10929                              <1> 
 10930                              <1> ;==============================================================================
 10931                              <1> ;get_drvid_str ---- get driver id string
 10932                              <1> ;input:
 10933                              <1> ;	dl = drive id
 10934                              <1> ;	es:di -> buffer
 10935                              <1> ;output:
 10936                              <1> ;	es:di -> point to the end of the string
 10937                              <1> ;==============================================================================
 10938                              <1> get_drvid_str:
 10939 00003B4E 60                  <1> 	pusha
 10940                              <1> 
 10941                              <1> %ifdef SHOW_DRV_NAME
 10942                              <1> 	call get_drive_flags
 10943                              <1> 	cmp dl, MIN_HD_ID
 10944                              <1> 	jb .floppy
 10945                              <1> 	test al, DRVFLAG_REMOVABLE
 10946                              <1> 	jz .harddisk
 10947                              <1> 	test al, DRVFLAG_ISCDROM
 10948                              <1> 	jnz .cdrom
 10949                              <1> 	mov ax, 'RD'
 10950                              <1> 	jmp short .show_drv_name
 10951                              <1> .floppy:
 10952                              <1> 	mov ax, 'FD'
 10953                              <1> 	jmp short .show_drv_name
 10954                              <1> .harddisk:
 10955                              <1> 	mov ax, 'HD'
 10956                              <1> 	jmp short .show_drv_name
 10957                              <1> .cdrom:
 10958                              <1> 	mov ax, 'CD'
 10959                              <1> .show_drv_name:
 10960                              <1> 	stosb
 10961                              <1> 	mov al, ah
 10962                              <1> 	stosb
 10963                              <1> 
 10964                              <1> 	movzx ax, dl
 10965                              <1> 	and al, 0x0F
 10966                              <1> 	mov cl, 1
 10967                              <1> 	call htoa
 10968                              <1> %else
 10969 00003B4F 0FB6C2              <1>         movzx ax, dl                                ; fill drive id
 10970 00003B52 B103                <1>         mov cl, 3                                   ;
 10971 00003B54 E83FEF              <1>         call itoa                                   ;
 10972                              <1> %endif
 10973 00003B57 61                  <1> 	popa
 10974 00003B58 83C703              <1> 	add di, 3
 10975 00003B5B C3                  <1> 	ret
 10976                              <1> 
 10977 00003B5C 01                  <1> use_int13_ext  db 1
 10978                              <1> 
 10979                              <1> %ifndef MAIN
 10980                              <1> 	section .bss
 10981                              <1> %include "tempdata.asm"
 10982                              <1> %endif
 10983                              <1> 
 10984                              <1> %endif	;End of HAVE_HD_IO
 10985                                  %include "myint13h.asm"
 10986                              <1> ; asmsyntax=nasm
 10987                              <1> ;
 10988                              <1> ; myint13h.asm
 10989                              <1> ;
 10990                              <1> ; install / uninstall func for my int13h
 10991                              <1> ;
 10992                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
 10993                              <1> ;
 10994                              <1> %ifndef HAVE_MYINT13H
 10995                              <1> %define HAVE_MYINT13H
 10996                              <1> 
 10997                              <1> %ifndef DISABLE_CDBOOT
 10998                              <1>   %define SIZE_OF_EDD30	8	; my EDD3.0 and ATAPI driver need 6K mem
 10999                              <1> %else
 11000                              <1>   %define SIZE_OF_EDD30	1	; my SWAP Driver ID wrapper needs 1K mem
 11001                              <1> %endif
 11002                              <1> 
 11003                              <1> %ifndef DISABLE_CDBOOT
 11004                              <1>   %define EDD30_SIG1	'BM'
 11005                              <1>   %define EDD30_SIG2	'CB'
 11006                              <1> %else
 11007                              <1>   %define EDD30_SIG1	'BM'
 11008                              <1>   %define EDD30_SIG2	'SD'
 11009                              <1> %endif
 11010                              <1> 
 11011                              <1> %ifndef MAIN
 11012                              <1> 	section .text
 11013                              <1> %endif
 11014                              <1> 
 11015                              <1> ;=============================================================================
 11016                              <1> ;install_myint13h ---- install my int13h handler
 11017                              <1> ; bl = 0 init cdrom
 11018                              <1> ; bl = 1 don't init cdrom
 11019                              <1> ;=============================================================================
 11020                              <1> install_myint13h:
 11021 00003B5D 60                  <1> 	pusha
 11022 00003B5E 06                  <1> 	push es
 11023 00003B5F 31C0                <1> 	xor ax, ax
 11024 00003B61 8EC0                <1> 	mov es, ax
 11025                              <1> 
 11026 00003B63 E87300              <1> 	call check_myint13h
 11027 00003B66 7209                <1> 	jc .not_inst
 11028 00003B68 26A14E00            <1> 	mov ax, [es:0x13*4+2]
 11029 00003B6C A3[0939]            <1> 	mov [myint13h_tmp.edd30_seg], ax
 11030                              <1> 
 11031 00003B6F EB2D                <1> 	jmp .end
 11032                              <1> 	
 11033                              <1> .not_inst:
 11034                              <1> 
 11035                              <1> %ifndef DISABLE_CDBOOT
 11036 00003B71 53                  <1> 	push bx
 11037                              <1> %endif
 11038 00003B72 26832E130408        <1> 	sub word [es:0x413], SIZE_OF_EDD30 ; allocate memory for module edd30
 11039 00003B78 CD12                <1> 	int 0x12
 11040 00003B7A C1E006              <1> 	shl ax, 6
 11041 00003B7D 50                  <1> 	push ax
 11042 00003B7E 07                  <1> 	pop es
 11043 00003B7F 31FF                <1> 	xor di, di
 11044 00003B81 BE[F73B]            <1> 	mov si, module_edd30
 11045 00003B84 B9900B              <1> 	mov cx, end_of_mod_edd30 - module_edd30
 11046 00003B87 FC                  <1> 	cld
 11047 00003B88 F3A4                <1> 	rep movsb
 11048                              <1> 
 11049 00003B8A A3[0939]            <1> 	mov [myint13h_tmp.edd30_seg], ax
 11050                              <1> 
 11051                              <1> %ifndef DISABLE_CDBOOT
 11052 00003B8D 5B                  <1> 	pop bx
 11053 00003B8E 08DB                <1> 	or bl, bl
 11054 00003B90 7506                <1> 	jnz .go_inst_int13
 11055 00003B92 B402                <1> 	mov ah, 2
 11056 00003B94 FF1E[0739]          <1> 	call far [myint13h_tmp.edd30_off]	;initialize cdrom drivers
 11057                              <1> %endif
 11058                              <1> 
 11059                              <1> .go_inst_int13:
 11060 00003B98 31C0                <1> 	xor ax, ax
 11061 00003B9A FF1E[0739]          <1> 	call far [myint13h_tmp.edd30_off]	;install my int13h 
 11062                              <1> 
 11063                              <1> .end:
 11064 00003B9E 07                  <1> 	pop es
 11065 00003B9F 61                  <1> 	popa
 11066 00003BA0 C3                  <1> 	ret
 11067                              <1> 
 11068                              <1> ;=============================================================================
 11069                              <1> ;uninstall_myint13h ---- uninstall my int13h handler
 11070                              <1> ;=============================================================================
 11071                              <1> uninstall_myint13h:
 11072 00003BA1 60                  <1> 	pusha
 11073 00003BA2 E83400              <1> 	call check_myint13h
 11074 00003BA5 7214                <1> 	jc .not_inst
 11075                              <1> 
 11076 00003BA7 B401                <1> 	mov ah, 1
 11077 00003BA9 FF1E[0739]          <1> 	call far [myint13h_tmp.edd30_off]
 11078 00003BAD 720C                <1> 	jc .not_inst
 11079                              <1> 
 11080 00003BAF 06                  <1> 	push es
 11081 00003BB0 31C0                <1> 	xor ax, ax
 11082 00003BB2 8EC0                <1> 	mov es, ax
 11083 00003BB4 268306130408        <1> 	add word [es:0x413], SIZE_OF_EDD30 ; free memory
 11084 00003BBA 07                  <1> 	pop es
 11085                              <1> 
 11086                              <1> .not_inst:
 11087 00003BBB 61                  <1> 	popa
 11088 00003BBC C3                  <1> 	ret
 11089                              <1> 
 11090                              <1> ;=============================================================================
 11091                              <1> ;set_drive_map
 11092                              <1> ;input: bx, cx drive map
 11093                              <1> ;=============================================================================
 11094                              <1> set_drive_map:
 11095 00003BBD 60                  <1> 	pusha
 11096 00003BBE E81800              <1> 	call check_myint13h
 11097 00003BC1 7206                <1> 	jc .end
 11098 00003BC3 B403                <1> 	mov ah, 3
 11099                              <1> 
 11100 00003BC5 FF1E[0739]          <1> 	call far [myint13h_tmp.edd30_off]
 11101                              <1> .end:
 11102 00003BC9 61                  <1> 	popa
 11103 00003BCA C3                  <1> 	ret
 11104                              <1> 
 11105                              <1> ;=============================================================================
 11106                              <1> ;set_io_ports
 11107                              <1> ;input: bx, cx io ports
 11108                              <1> ;=============================================================================
 11109                              <1> set_io_ports:
 11110 00003BCB 60                  <1> 	pusha
 11111 00003BCC E80A00              <1> 	call check_myint13h
 11112 00003BCF 7206                <1> 	jc .end
 11113 00003BD1 B404                <1> 	mov ah, 4
 11114                              <1> 
 11115 00003BD3 FF1E[0739]          <1> 	call far [myint13h_tmp.edd30_off]
 11116                              <1> .end:
 11117 00003BD7 61                  <1> 	popa
 11118 00003BD8 C3                  <1> 	ret
 11119                              <1> 
 11120                              <1> ;=============================================================================
 11121                              <1> ;check_myint13h ---- check if myint13h is present
 11122                              <1> ;=============================================================================
 11123                              <1> check_myint13h:
 11124 00003BD9 60                  <1> 	pusha
 11125 00003BDA B86666              <1> 	mov ax, 0x6666
 11126 00003BDD BB424D              <1> 	mov bx, EDD30_SIG1
 11127 00003BE0 B94342              <1> 	mov cx, EDD30_SIG2
 11128 00003BE3 F8                  <1> 	clc
 11129 00003BE4 CD13                <1> 	int 0x13
 11130 00003BE6 720C                <1> 	jc .absent
 11131 00003BE8 81FB4342            <1> 	cmp bx, EDD30_SIG2
 11132 00003BEC 7506                <1> 	jne .absent
 11133 00003BEE 81F9424D            <1> 	cmp cx, EDD30_SIG1
 11134 00003BF2 7401                <1> 	je .end
 11135                              <1> .absent:
 11136 00003BF4 F9                  <1> 	stc
 11137                              <1> .end:
 11138 00003BF5 61                  <1> 	popa
 11139 00003BF6 C3                  <1> 	ret
 11140                              <1> 
 11141                              <1> module_edd30:
 11142 00003BF6 <incbin>            <1> incbin "edd30.bin"
 11143                              <1> end_of_mod_edd30:
 11144                              <1> 
 11145                              <1> %ifndef MAIN
 11146                              <1> 	section .bss
 11147                              <1> %include "tempdata.asm"
 11148                              <1> %endif
 11149                              <1> 
 11150                              <1> %endif
 11151                                  
 11152                                  ;=============================================================================
 11153                                  ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  DATA AREA  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 11154                                  ;=============================================================================
 11155                                  
 11156                                  %define ROOT_WINDOW_ACTION_NUMBER (main_action_table.end_of_root_window - main_action_table.root_window) / SIZE_OF_STRUC_ACTION
 11157                                  %define BOOT_MENU_ACTION_NUMBER (main_action_table.end_of_boot_menu - main_action_table.boot_menu) / SIZE_OF_STRUC_ACTION
 11158                                  %define MAIN_MENU_ACTION_NUMBER (main_action_table.end_of_main_menu - main_action_table.main_menu) / SIZE_OF_STRUC_ACTION
 11159                                  %define RECORD_MENU_ACTION_NUMBER (main_action_table.end_of_record_menu - main_action_table.record_menu) / SIZE_OF_STRUC_ACTION
 11160                                  %define SYS_MENU_ACTION_NUMBER (main_action_table.end_of_sys_menu - main_action_table.sys_menu) / SIZE_OF_STRUC_ACTION
 11161                                  
 11162                                  %define MAIN_MENU_ITEMS_NUMBER   11
 11163                                  %define RECORD_MENU_ITEMS_NUMBER 16
 11164                                  %define SYS_MENU_ITEMS_NUMBER    18
 11165                                  ;=============================================================================
 11166                                  ; Windows data
 11167                                  ;=============================================================================
 11168                                  main_windows_data:
 11169                                  .root_window    istruc struc_window
 11170 00004787 0900                    		at struc_window.flags,                  dw WINFLAG_OPEN | WINFLAG_NO_FOCUS
 11171 00004789 0000                    		at struc_window.title,                  dw 0
 11172 0000478B 0000                    		at struc_window.win_attr,               dw 0
 11173 0000478D 0000                    		at struc_window.win_pos,                dw 0
 11174 0000478F 0000                    		at struc_window.win_size,               dw 0
 11175 00004791 0000                    		at struc_window.parent_win,             dw 0
 11176 00004793 0000                    		at struc_window.next_win,               dw 0
 11177 00004795 0000                    		at struc_window.previous_win,           dw 0
 11178 00004797 2F00                    		at struc_window.act_num,                dw ROOT_WINDOW_ACTION_NUMBER
 11179 00004799 [4D48]                  		at struc_window.act_table,              dw main_action_table.root_window
 11180 0000479B [1B28]                  		at struc_window.default_event_handle,   dw window_default_event_handle
 11181 0000479D [2728]                  		at struc_window.event_handle,           dw window_event_handle
 11182 0000479F [A817]                  		at struc_window.draw_body_proc,         dw root_window_draw_body_proc
 11183                                  		iend
 11184                                  
 11185                                  .boot_menu      istruc struc_menu_box
 11186 000047A1 F400                    		at struc_window.flags,                  dw WINFLAG_FRAMED | MENUFLAG_SCROLLBAR | MENUFLAG_SINK_UPPER | MENUFLAG_SINK_WIDTH | MENUFLAG_SINK_BOTTOM
 11187 000047A3 [064A]                  		at struc_window.title,                  dw str_idx.boot_menu_title
 11188 000047A5 F13F                    		at struc_window.win_attr,               dw 0x3FF1
 11189 000047A7 0000                    		at struc_window.win_pos,                dw 0
 11190 000047A9 0000                    		at struc_window.win_size,               dw 0
 11191 000047AB [8747]                  		at struc_window.parent_win,             dw .root_window
 11192 000047AD 0000                    		at struc_window.next_win,               dw 0
 11193 000047AF 0000                    		at struc_window.previous_win,           dw 0
 11194 000047B1 1300                    		at struc_window.act_num,                dw BOOT_MENU_ACTION_NUMBER
 11195 000047B3 [3849]                  		at struc_window.act_table,              dw main_action_table.boot_menu
 11196 000047B5 [F124]                  		at struc_window.default_event_handle,   dw menubox_default_event_handle
 11197 000047B7 [2728]                  		at struc_window.event_handle,           dw window_event_handle
 11198 000047B9 [B423]                  		at struc_window.draw_body_proc,         dw menubox_draw_body_proc
 11199 000047BB [084A]                  		at struc_menu_box.menu_header,          dw str_idx.boot_menu_header
 11200 000047BD 1F                      		at struc_menu_box.menu_header_attr,     db 0x1F
 11201 000047BE 707C                    		at struc_menu_box.menu_norm_attr,       dw 0x7C70
 11202 000047C0 0F0C                    		at struc_menu_box.menu_focus_attr,      dw 0x0C0F
 11203 000047C2 0000                                    at struc_menu_box.menu_area_pos,        dw 0
 11204 000047C4 0000                                    at struc_menu_box.menu_area_size,       dw 0
 11205 000047C6 3F                      		at struc_menu_box.scrollbar_attr,       db 0x3F
 11206 000047C7 00                      		at struc_menu_box.items_num,            db 0
 11207 000047C8 00                      		at struc_menu_box.focus_item,           db 0
 11208 000047C9 00                      		at struc_menu_box.first_visible_item,   db 0
 11209 000047CA [2619]                  		at struc_menu_box.item_str_proc,        dw boot_menu_item_str_proc
 11210                                  		iend
 11211                                  
 11212                                  .main_menu      istruc struc_menu_box
 11213 000047CC 0400                    		at struc_window.flags,                  dw WINFLAG_FRAMED
 11214 000047CE [7E4A]                  		at struc_window.title,                  dw str_idx.main_menu_title
 11215 000047D0 F130                    		at struc_window.win_attr,               dw 0x30F1
 11216 000047D2 0101                    		at struc_window.win_pos,                dw 0x0101
 11217 000047D4 000D                    		at struc_window.win_size,               db 0, MAIN_MENU_ITEMS_NUMBER+2
 11218 000047D6 [A147]                  		at struc_window.parent_win,             dw .boot_menu
 11219 000047D8 0000                    		at struc_window.next_win,               dw 0
 11220 000047DA 0000                    		at struc_window.previous_win,           dw 0
 11221 000047DC 0B00                    		at struc_window.act_num,                dw MAIN_MENU_ACTION_NUMBER
 11222 000047DE [4D48]                  		at struc_window.act_table,              dw main_action_table.main_menu
 11223 000047E0 [F124]                  		at struc_window.default_event_handle,   dw menubox_default_event_handle
 11224 000047E2 [2728]                  		at struc_window.event_handle,           dw window_event_handle
 11225 000047E4 [B423]                  		at struc_window.draw_body_proc,	        dw menubox_draw_body_proc
 11226 000047E6 0000                    		at struc_menu_box.menu_header,          dw 0
 11227 000047E8 3F                      		at struc_menu_box.menu_header_attr,     db 0x3F
 11228 000047E9 303C                    		at struc_menu_box.menu_norm_attr,       dw 0x3C30
 11229 000047EB 070C                    		at struc_menu_box.menu_focus_attr,      dw 0x0C07
 11230 000047ED 0000                                    at struc_menu_box.menu_area_pos,        dw 0
 11231 000047EF 0000                                    at struc_menu_box.menu_area_size,       dw 0
 11232 000047F1 3F                      		at struc_menu_box.scrollbar_attr,       db 0x3F
 11233 000047F2 0B                      		at struc_menu_box.items_num,            db MAIN_MENU_ITEMS_NUMBER
 11234 000047F3 00                      		at struc_menu_box.focus_item,           db 0
 11235 000047F4 00                      		at struc_menu_box.first_visible_item,   db 0
 11236 000047F5 [4019]                  		at struc_menu_box.item_str_proc,        dw main_menu_item_str_proc
 11237                                  		iend
 11238                                  
 11239                                  .record_menu    istruc struc_menu_box
 11240 000047F7 0400                    		at struc_window.flags,                  dw WINFLAG_FRAMED
 11241 000047F9 [964A]                  		at struc_window.title,                  dw str_idx.record_menu_title
 11242 000047FB F130                    		at struc_window.win_attr,               dw 0x30F1
 11243 000047FD 0202                    		at struc_window.win_pos,                dw 0x0202
 11244 000047FF 0012                    		at struc_window.win_size,               db 0, RECORD_MENU_ITEMS_NUMBER+2
 11245 00004801 [A147]                  		at struc_window.parent_win,             dw .boot_menu
 11246 00004803 0000                    		at struc_window.next_win,               dw 0
 11247 00004805 0000                    		at struc_window.previous_win,           dw 0
 11248 00004807 1000                    		at struc_window.act_num,                dw RECORD_MENU_ACTION_NUMBER
 11249 00004809 [8448]                  		at struc_window.act_table,              dw main_action_table.record_menu
 11250 0000480B [F124]                  		at struc_window.default_event_handle,   dw menubox_default_event_handle
 11251 0000480D [2728]                  		at struc_window.event_handle,           dw window_event_handle
 11252 0000480F [B423]                  		at struc_window.draw_body_proc,	        dw menubox_draw_body_proc
 11253 00004811 0000                    		at struc_menu_box.menu_header,          dw 0
 11254 00004813 3F                      		at struc_menu_box.menu_header_attr,     db 0x3F
 11255 00004814 303C                    		at struc_menu_box.menu_norm_attr,       dw 0x3C30
 11256 00004816 070C                    		at struc_menu_box.menu_focus_attr,      dw 0x0C07
 11257 00004818 0000                                    at struc_menu_box.menu_area_pos,        dw 0
 11258 0000481A 0000                                    at struc_menu_box.menu_area_size,       dw 0
 11259 0000481C 3F                      		at struc_menu_box.scrollbar_attr,       db 0x3F
 11260 0000481D 10                      		at struc_menu_box.items_num,            db RECORD_MENU_ITEMS_NUMBER
 11261 0000481E 00                      		at struc_menu_box.focus_item,           db 0
 11262 0000481F 00                      		at struc_menu_box.first_visible_item,   db 0
 11263 00004820 [4519]                  		at struc_menu_box.item_str_proc,        dw record_menu_item_str_proc
 11264                                  		iend
 11265                                  
 11266                                  .sys_menu       istruc struc_menu_box
 11267 00004822 0400                    		at struc_window.flags,                  dw WINFLAG_FRAMED
 11268 00004824 [B84A]                  		at struc_window.title,                  dw str_idx.sys_menu_title
 11269 00004826 F130                    		at struc_window.win_attr,               dw 0x30F1
 11270 00004828 0303                    		at struc_window.win_pos,                dw 0x0303
 11271 0000482A 0014                    		at struc_window.win_size,               db 0, SYS_MENU_ITEMS_NUMBER+2
 11272 0000482C [A147]                  		at struc_window.parent_win,             dw .boot_menu
 11273 0000482E 0000                    		at struc_window.next_win,               dw 0
 11274 00004830 0000                    		at struc_window.previous_win,           dw 0
 11275 00004832 1200                    		at struc_window.act_num,                dw SYS_MENU_ACTION_NUMBER
 11276 00004834 [D448]                  		at struc_window.act_table,              dw main_action_table.sys_menu
 11277 00004836 [F124]                  		at struc_window.default_event_handle,   dw menubox_default_event_handle
 11278 00004838 [2728]                  		at struc_window.event_handle,           dw window_event_handle
 11279 0000483A [B423]                  		at struc_window.draw_body_proc,         dw menubox_draw_body_proc
 11280 0000483C 0000                    		at struc_menu_box.menu_header,          dw 0
 11281 0000483E 3F                      		at struc_menu_box.menu_header_attr,     db 0x3F
 11282 0000483F 303C                    		at struc_menu_box.menu_norm_attr,       dw 0x3C30
 11283 00004841 070C                    		at struc_menu_box.menu_focus_attr,      dw 0x0C07
 11284 00004843 0000                                    at struc_menu_box.menu_area_pos,        dw 0
 11285 00004845 0000                                    at struc_menu_box.menu_area_size,       dw 0
 11286 00004847 3F                      		at struc_menu_box.scrollbar_attr,       db 0x3F
 11287 00004848 12                      		at struc_menu_box.items_num,            db SYS_MENU_ITEMS_NUMBER
 11288 00004849 00                      		at struc_menu_box.focus_item,           db 0
 11289 0000484A 00                      		at struc_menu_box.first_visible_item,   db 0
 11290 0000484B [4A19]                  		at struc_menu_box.item_str_proc,        dw sys_menu_item_str_proc
 11291                                  		iend
 11292                                  
 11293                                  .end_of_windows_data:
 11294                                  
 11295                                  ;=============================================================================
 11296                                  ; Action table
 11297                                  ;=============================================================================
 11298                                  main_action_table:
 11299                                  
 11300                                  .root_window:
 11301                                  
 11302                                  .main_menu:
 11303 0000484D 08                              db  ACTFLAG_REDRAW_SCR
 11304 0000484E 003B                            dw  kbF1
 11305 00004850 [FE0C]                          dw  main_show_help
 11306                                  
 11307 00004852 08                              db  ACTFLAG_REDRAW_SCR
 11308 00004853 005E                            dw  kbCtrlF1
 11309 00004855 [140D]                          dw  main_show_about
 11310                                  
 11311 00004857 88                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_SECURITY
 11312 00004858 003C                            dw  kbF2
 11313 0000485A [5F0D]                          dw  main_save_changes
 11314                                  
 11315 0000485C 54                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_AUTH_RECORD | ACTFLAG_CHK_RECNUM
 11316 0000485D 0000                            dw  0
 11317 0000485F [E20F]                          dw  main_boot_it
 11318                                  
 11319 00004861 04                              db  ACTFLAG_REDRAW_WIN
 11320 00004862 0000                            dw  0
 11321 00004864 [AC13]                          dw  main_boot_prev_in_menu
 11322                                  
 11323 00004866 00                              db  0
 11324 00004867 0000                            dw  0
 11325 00004869 0000                            dw  0
 11326                                  
 11327 0000486B 08                              db  ACTFLAG_REDRAW_SCR
 11328 0000486C 0013                            dw  kbAltR
 11329 0000486E [310D]                          dw  main_show_record_menu
 11330                                  
 11331 00004870 08                              db  ACTFLAG_REDRAW_SCR
 11332 00004871 001F                            dw  kbAltS
 11333 00004873 [380D]                          dw  main_show_sys_menu
 11334                                  
 11335 00004875 00                              db  0
 11336 00004876 0000                            dw  0
 11337 00004878 0000                            dw  0
 11338                                  
 11339 0000487A 24                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_AUTH_ROOT
 11340 0000487B 1110                            dw  kbCtrlQ
 11341 0000487D [0D10]                          dw  main_return_to_bios
 11342                                  
 11343 0000487F 00                              db  0
 11344 00004880 008A                            dw  kbCtrlF12
 11345 00004882 [8913]                          dw  main_power_off
 11346                                  
 11347                                  .end_of_main_menu
 11348                                  
 11349                                  .record_menu:
 11350 00004884 04                              db  ACTFLAG_REDRAW_WIN
 11351 00004885 2F35                            dw  kbSlash
 11352 00004887 [9512]                          dw  main_show_record_info
 11353                                  
 11354 00004889 D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11355 0000488A 003D                            dw  kbF3
 11356 0000488C [750D]                          dw  main_change_name
 11357                                  
 11358 0000488E D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11359 0000488F 0043                            dw  kbF9
 11360 00004891 [FC0D]                          dw  main_change_record_password
 11361                                  
 11362 00004893 D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11363 00004894 131F                            dw  kbCtrlS
 11364 00004896 [DE10]                          dw  main_toggle_schedule
 11365                                  
 11366 00004898 D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11367 00004899 0B25                            dw  kbCtrlK
 11368 0000489B [AC11]                          dw  main_toggle_keystrokes
 11369                                  
 11370 0000489D 00                              db  0
 11371 0000489E 0000                            dw  0
 11372 000048A0 0000                            dw  0
 11373                                  
 11374 000048A2 08                              db  ACTFLAG_REDRAW_SCR 
 11375 000048A3 003E                            dw  kbF4
 11376 000048A5 [850E]                          dw  main_mark_active
 11377                                  
 11378 000048A7 08                              db  ACTFLAG_REDRAW_SCR
 11379 000048A8 003F                            dw  kbF5
 11380 000048AA [DD0E]                          dw  main_toggle_hidden
 11381                                  
 11382 000048AC 08                              db  ACTFLAG_REDRAW_SCR
 11383 000048AD 0040                            dw  kbF6
 11384 000048AF [590E]                          dw  main_toggle_auto_active
 11385                                  
 11386 000048B1 08                              db  ACTFLAG_REDRAW_SCR
 11387 000048B2 0041                            dw  kbF7
 11388 000048B4 [6F0E]                          dw  main_toggle_auto_hide
 11389                                  
 11390 000048B6 08                              db  ACTFLAG_REDRAW_SCR
 11391 000048B7 182D                            dw  kbCtrlX
 11392 000048B9 [C010]                          dw  main_toggle_swapid
 11393                                  
 11394 000048BB 00                              db  0
 11395 000048BC 0000                            dw  0
 11396 000048BE 0000                            dw  0
 11397                                  
 11398 000048C0 D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11399 000048C1 0420                            dw  kbCtrlD
 11400 000048C3 [050F]                          dw  main_delete_record
 11401                                  
 11402 000048C5 D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11403 000048C6 1019                            dw  kbCtrlP
 11404 000048C8 [1910]                          dw  main_dup_record
 11405                                  
 11406 000048CA 98                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY
 11407 000048CB 1516                            dw  kbCtrlU
 11408 000048CD [6E10]                          dw  main_move_record_up
 11409                                  
 11410 000048CF 98                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY
 11411 000048D0 0E31                            dw  kbCtrlN
 11412 000048D2 [3C10]                          dw  main_move_record_down
 11413                                  
 11414                                  
 11415                                  .end_of_record_menu
 11416                                  
 11417                                  .sys_menu:
 11418 000048D4 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11419 000048D5 0044                            dw  kbF10
 11420 000048D7 [AF0D]                          dw  main_change_root_password
 11421                                  
 11422 000048D9 A8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT | ACTFLAG_AUTH_SECURITY
 11423 000048DA 0067                            dw  kbCtrlF10
 11424 000048DC [990D]                          dw  main_login_as_root
 11425                                  
 11426 000048DE 88                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_SECURITY
 11427 000048DF 0071                            dw  kbAltF10
 11428 000048E1 [A50D]                          dw  main_change_security_mode
 11429                                  
 11430 000048E3 00                              db  0
 11431 000048E4 0000                            dw  0
 11432 000048E6 0000                            dw  0
 11433                                  
 11434 000048E8 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11435 000048E9 0042                            dw  kbF8
 11436 000048EB [3F0E]                          dw  main_set_default_record
 11437                                  
 11438 000048ED 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11439 000048EE 005B                            dw  kbShiftF8
 11440 000048F0 [4F0E]                          dw  main_unset_default_record
 11441                                  
 11442 000048F2 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11443 000048F3 1414                            dw  kbCtrlT
 11444 000048F5 [B20F]                          dw  main_set_delay_time
 11445                                  
 11446 000048F7 08                              db  ACTFLAG_REDRAW_SCR
 11447 000048F8 0621                            dw  kbCtrlF
 11448 000048FA [8C13]                          dw  main_change_bootmenu_style
 11449                                  
 11450 000048FC 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11451 000048FD 0C26                            dw  kbCtrlL
 11452 000048FF [A213]                          dw  main_toggle_rem_last
 11453                                  
 11454 00004901 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11455 00004902 0000                            dw  0
 11456 00004904 [2E15]                          dw  main_toggle_int13ext
 11457                                  
 11458 00004906 00                              db  0
 11459 00004907 0000                            dw  0
 11460 00004909 0000                            dw  0
 11461                                  
 11462 0000490B 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11463 0000490C 0917                            dw  kbCtrlI
 11464 0000490E [570F]                          dw  main_rescan_all_records
 11465                                  
 11466 00004910 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11467 00004911 0823                            dw  kbCtrlH
 11468 00004913 [5E0F]                          dw  main_rescan_all_partitions
 11469                                  
 11470 00004915 08                              db  ACTFLAG_REDRAW_SCR
 11471 00004916 0000                            dw  0
 11472 00004918 [4B15]                          dw  main_set_cdrom_ioports
 11473                                  
 11474 0000491A 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11475 0000491B 0000                            dw  0
 11476 0000491D [C115]                          dw  main_set_y2k_year
 11477                                  
 11478 0000491F 00                              db  0
 11479 00004920 0000                            dw  0
 11480 00004922 0000                            dw  0
 11481                                  
 11482 00004924 08                              db  ACTFLAG_REDRAW_SCR
 11483 00004925 0000                            dw  0
 11484 00004927 [BA13]                          dw  main_install_sbm
 11485                                  
 11486 00004929 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11487 0000492A 0000                            dw  0
 11488 0000492C [AB14]                          dw  main_uninstall_sbm
 11489                                  
 11490                                  .end_of_sys_menu
 11491                                  
 11492 0000492E 08                              db  ACTFLAG_REDRAW_SCR
 11493 0000492F 01F4                            dw  EVENT_REDRAW_ROOT
 11494 00004931 0000                            dw  0
 11495                                  
 11496 00004933 18                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM
 11497 00004934 02F4                            dw  EVENT_BOOT_DEFAULT
 11498 00004936 [FF1A]                          dw  main_boot_default
 11499                                  
 11500                                  .end_of_root_window
 11501                                          
 11502                                  .boot_menu:
 11503 00004938 08                              db  ACTFLAG_REDRAW_SCR
 11504 00004939 0098                            dw  kbEnhAltUp
 11505 0000493B [9124]                          dw  menubox_focus_up
 11506                                  
 11507 0000493D 08                              db  ACTFLAG_REDRAW_SCR
 11508 0000493E 00A0                            dw  kbEnhAltDown
 11509 00004940 [BD24]                          dw  menubox_focus_down
 11510                                  
 11511 00004942 04                              db  ACTFLAG_REDRAW_WIN
 11512 00004943 3F35                            dw  kbQuestion
 11513 00004945 [9512]                          dw  main_show_record_info
 11514                                  
 11515 00004947 D4                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11516 00004948 003D                            dw  kbF3
 11517 0000494A [750D]                          dw  main_change_name
 11518                                  
 11519 0000494C D4                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11520 0000494D 0043                            dw  kbF9
 11521 0000494F [FC0D]                          dw  main_change_record_password
 11522                                  
 11523 00004951 D4                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11524 00004952 131F                            dw  kbCtrlS
 11525 00004954 [DE10]                          dw  main_toggle_schedule
 11526                                  
 11527 00004956 D4                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11528 00004957 0B25                            dw  kbCtrlK
 11529 00004959 [AC11]                          dw  main_toggle_keystrokes
 11530                                  
 11531 0000495B D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11532 0000495C 003E                            dw  kbF4
 11533 0000495E [850E]                          dw  main_mark_active
 11534                                  
 11535 00004960 D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11536 00004961 003F                            dw  kbF5
 11537 00004963 [DD0E]                          dw  main_toggle_hidden
 11538                                  
 11539 00004965 D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11540 00004966 0040                            dw  kbF6
 11541 00004968 [590E]                          dw  main_toggle_auto_active
 11542                                  
 11543 0000496A D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11544 0000496B 0041                            dw  kbF7
 11545 0000496D [6F0E]                          dw  main_toggle_auto_hide
 11546                                  
 11547 0000496F D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11548 00004970 182D                            dw  kbCtrlX
 11549 00004972 [C010]                          dw  main_toggle_swapid
 11550                                  
 11551 00004974 D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11552 00004975 0420                            dw  kbCtrlD
 11553 00004977 [050F]                          dw  main_delete_record
 11554                                  
 11555 00004979 D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11556 0000497A 1019                            dw  kbCtrlP
 11557 0000497C [1910]                          dw  main_dup_record
 11558                                  
 11559 0000497E 02                              db  ACTFLAG_REDRAW_BODY
 11560 0000497F 1516                            dw  kbCtrlU
 11561 00004981 [6E10]                          dw  main_move_record_up
 11562                                  
 11563 00004983 02                              db  ACTFLAG_REDRAW_BODY
 11564 00004984 0E31                            dw  kbCtrlN
 11565 00004986 [3C10]                          dw  main_move_record_down
 11566                                  
 11567 00004988 54                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_AUTH_RECORD | ACTFLAG_CHK_RECNUM
 11568 00004989 0D1C                            dw  kbEnter
 11569 0000498B [E20F]                          dw  main_boot_it
 11570                                  
 11571 0000498D 14                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_CHK_RECNUM
 11572 0000498E 1B01                            dw  kbEsc
 11573 00004990 [FF1A]                          dw  main_boot_default
 11574                                  
 11575 00004992 08                              db  ACTFLAG_REDRAW_SCR
 11576 00004993 08F2                            dw  EVENT_ALT_RELEASE
 11577 00004995 [2A0D]                          dw  main_show_main_menu
 11578                                  .end_of_boot_menu
 11579                                  
 11580                                  ;END OF KERNEL
 11581 00004997 55AA                            dw BR_GOOD_FLAG
 11582                                  
 11583                                  end_of_kernel:
 11584                                  ;=============================================================================
 11585                                  ;theme data
 11586                                  ;=============================================================================
 11587                                  theme_start:
 11588                                  
 11589                                  
 11590                                  %ifdef THEME_ZH
 11591                                  %include "themes/theme-zh.asm"
 11592                                  %elifdef THEME_DE
 11593                                  %include "themes/theme-de.asm"
 11594                                  %elifdef THEME_HU
 11595                                  %include "themes/theme-hu.asm"
 11596                                  %elifdef THEME_RU
 11597                                  %include "themes/theme-ru.asm"
 11598                                  %elifdef THEME_CZ
 11599                                  %include "themes/theme-cz.asm"
 11600                                  %elifdef THEME_ES
 11601                                  %include "themes/theme-es.asm"
 11602                                  %elifdef THEME_FR
 11603                                  %include "themes/theme-fr.asm"
 11604                                  %elifdef THEME_PT
 11605                                  %include "themes/theme-pt.asm"
 11606                                  %else
 11607                                  %include "themes/theme-us.asm"
 11608                              <1> ; asmsyntax=nasm
 11609                              <1> ;
 11610                              <1> ; theme-us.asm
 11611                              <1> ;
 11612                              <1> ; English theme data for Smart Boot Manager
 11613                              <1> ;
 11614                              <1> ; Copyright (C) 2001, Suzhe. See file COPYING for details.
 11615                              <1> ;
 11616                              <1> 
 11617                              <1> ; some constant used in this theme.
 11618                              <1> 
 11619                              <1> ; PLEASE DO NOT CHANGE THESE, UNLESS YOU KNOW WHAT YOU ARE DOING!
 11620                              <1> %define SBMT_MAGIC      0x544D4253         ; magic number of
 11621                              <1>                                            ; Smart Boot Manager theme.
 11622                              <1> %define SBMT_VERSION    0x035A             ; version of theme ( 3.90 ).
 11623                              <1> 
 11624                              <1> start_font              equ     219
 11625                              <1> brand_char1             equ     start_font
 11626                              <1> brand_char2             equ     start_font+1
 11627                              <1> brand_char3             equ     start_font+2
 11628                              <1> brand_char4             equ     start_font+3
 11629                              <1> 
 11630                              <1>         bits 16
 11631                              <1> 
 11632                              <1> %ifndef MAIN
 11633                              <1>         org 0                       ; DO NOT REMOVE/MODIFY THIS LINE!!!
 11634                              <1> %endif
 11635                              <1> 
 11636                              <1> start_of_theme:
 11637                              <1> 
 11638                              <1> ;!!! PLEASE DON NOT CHANGE THE SIZE AND ORDER OF FOLLOWING DATA !!!
 11639                              <1> 
 11640                              <1> ;=============================================================================
 11641                              <1> ;the header of Smart Boot Manager theme ( 16 bytes )
 11642                              <1> ;=============================================================================
 11643 00004999 53424D54            <1> theme_magic             dd  SBMT_MAGIC ; magic number = 'SBMT', 4 bytes.
 11644                              <1>                                        ; it's abbr. of 'Smart Boot Manager Theme'
 11645 0000499D 0000                <1>                         dw  0          ;
 11646 0000499F 656E2D555300        <1> theme_lang              db  'en-US',0  ; language of this theme, 6 bytes.
 11647 000049A5 5A03                <1> theme_version           dw  SBMT_VERSION ; version, high byte is major version,
 11648                              <1>                                          ; low byte is minor version. should be
 11649                              <1>                                          ; equal to the version of Smart Boot Manager.
 11650 000049A7 AA0F                <1> theme_size              dw  (end_of_theme - start_of_theme)
 11651                              <1>                                          ; size of the theme (bytes).
 11652                              <1> 
 11653                              <1> ;=============================================================================
 11654                              <1> ; fix size data and index tables of variable size data
 11655                              <1> ;=============================================================================
 11656                              <1> 
 11657 000049A9 FF                  <1> video_mode              db  0xff        ; 0 = 90x25, 0xff = 80x25
 11658                              <1>                                         ; do not use other value!!!
 11659                              <1> 
 11660 000049AA 10                  <1> keyboard_type           db  0x10        ; = 0x10 means use enhanced keyboard
 11661                              <1>                                         ; = 0x00 means use normal keyboard
 11662                              <1>                                         ; CAUTION: cannot use other value!!!
 11663                              <1> 
 11664 000049AB 01                  <1> show_date_method        db  1           ; the method of show date:
 11665                              <1>                                         ; 0 = don't show date
 11666                              <1>                                         ; 1 = day mm-dd-yyyy
 11667                              <1>                                         ; 2 = day yyyy-mm-dd
 11668                              <1>                                         ; 3 = day dd-mm-yyyy
 11669                              <1> 
 11670 000049AC 01                  <1> show_time_method        db  1           ; the method of show time:
 11671                              <1>                                         ; 0 = don't show time
 11672                              <1>                                         ; 1 = hh:mm (24 hours)
 11673                              <1> 
 11674 000049AD 79                  <1> yes_key_lower	        db  'y'
 11675 000049AE 59                  <1> yes_key_upper	        db  'Y'
 11676                              <1>  
 11677                              <1> ; position of screen elements, low byte = column, high byte = row
 11678                              <1> position:
 11679 000049AF FF00                <1> .brand                  dw  0x00FF      ; start position of brand icon
 11680                              <1>                                         ; low = column, high = row
 11681                              <1>                                         ; if low = 255 then brand will be
 11682                              <1>                                         ; right justify in the screen.
 11683 000049B1 3700                <1> .date                   dw  0x0037
 11684                              <1> 
 11685 000049B3 4600                <1> .time                   dw  0x0046
 11686                              <1> 
 11687                              <1> ; size of screen elements
 11688                              <1> size:
 11689 000049B5 01                  <1> .copyright              db  1           ; number of rows used by copyright info
 11690 000049B6 01                  <1> .hint                   db  1           ; number of rows used by hint info
 11691 000049B7 05                  <1> .box_width              db  5           ; the minimal width of info/error/input box
 11692                              <1>                                         ; (when no info string)
 11693 000049B8 04                  <1> .box_height             db  4           ; the minimal height of info/error/input box
 11694                              <1>                                         ; (when no info string)
 11695 000049B9 0D                  <1> .boot_menu_win_height   db  13          ; the height of the boot menu window
 11696 000049BA 0A                  <1> .list_box_win_height    db  10          ; the height of the list box window
 11697                              <1> 
 11698                              <1> ;Black          = 0
 11699                              <1> ;Blue           = 1
 11700                              <1> ;Green          = 2
 11701                              <1> ;Cyan           = 3
 11702                              <1> ;Red            = 4
 11703                              <1> ;Violet         = 5
 11704                              <1> ;Yellow (brown) = 6
 11705                              <1> ;White          = 7
 11706                              <1> ;Black (gray)   = 8
 11707                              <1> ;Intense blue   = 9
 11708                              <1> ;Intense green  = a
 11709                              <1> ;Intense cyan   = b
 11710                              <1> ;Intense red    = c
 11711                              <1> ;Intense violet = d
 11712                              <1> ;Intense yellow = e
 11713                              <1> ;Intense white  = f
 11714                              <1> 
 11715                              <1> ; color of screen elements
 11716                              <1> ; high 4 bits is background color, low 4 bits is foreground color
 11717                              <1> 
 11718                              <1> color:
 11719 000049BB 70                  <1> .win_title_inactive     db  0x70        ; title attribute for inactive window.
 11720                              <1> 
 11721                              <1> .boot_menu:
 11722 000049BC 3F                  <1> .boot_menu_frame        db  0x3F        ; attributes of boot menu window
 11723 000049BD F1                  <1> .boot_menu_title        db  0xF1        ;
 11724 000049BE 1F                  <1> .boot_menu_header       db  0x1F        ;
 11725 000049BF 707C                <1> .boot_menu_normal       dw  0x7C70      ;
 11726 000049C1 0F0C                <1> .boot_menu_focus        dw  0x0C0F      ; 
 11727 000049C3 3F                  <1> .boot_menu_scrollbar    db  0x3F        ; scroll bar
 11728                              <1> 
 11729                              <1> .cmd_menu:
 11730 000049C4 30                  <1> .cmd_menu_frame         db  0x30        ;
 11731 000049C5 F1                  <1> .cmd_menu_title         db  0xF1        ; the colors used 
 11732 000049C6 3F                  <1> .cmd_menu_header        db  0x3F        ;
 11733 000049C7 303C                <1> .cmd_menu_normal        dw  0x3C30      ; in command menu
 11734 000049C9 070C                <1> .cmd_menu_focus         dw  0x0C07      ;
 11735 000049CB 3F                  <1> .cmd_menu_scrollbar     db  0x3F        ;
 11736                              <1> 
 11737                              <1> .list_box:
 11738 000049CC 30                  <1> .list_box_frame         db  0x30        ;
 11739 000049CD F1                  <1> .list_box_title         db  0xF1        ; list box
 11740 000049CE 1F                  <1> .list_box_header        db  0x1F        ;
 11741 000049CF 303C                <1> .list_box_normal        dw  0x3C30      ;
 11742 000049D1 070C                <1> .list_box_focus         dw  0x0C07      ;
 11743 000049D3 3F                  <1> .list_box_scrollbar     db  0x3F        ;
 11744                              <1> 
 11745                              <1> .input_box:
 11746 000049D4 B0                  <1> .input_box_frame        db  0xB0        ;
 11747 000049D5 F1                  <1> .input_box_title        db  0xF1        ; input box
 11748 000049D6 B0                  <1> .input_box_msg          db  0xB0        ;
 11749                              <1> 
 11750                              <1> .error_box:
 11751 000049D7 CF                  <1> .error_box_frame        db  0xCF        ;
 11752 000049D8 F1                  <1> .error_box_title        db  0xF1        ; error box
 11753 000049D9 CF                  <1> .error_box_msg          db  0xCF        ;
 11754                              <1> 
 11755                              <1> .info_box:
 11756 000049DA B0                  <1> .info_box_frame         db  0xB0        ;
 11757 000049DB F1                  <1> .info_box_title         db  0xF1        ; info box
 11758 000049DC B0                  <1> .info_box_msg           db  0xB0        ;
 11759                              <1> 
 11760                              <1> .help_win:
 11761 000049DD 3F                  <1> .help_win_frame         db  0x3F        ;
 11762 000049DE F1                  <1> .help_win_title         db  0xF1        ; help window
 11763 000049DF 30                  <1> .help_msg               db  0x30        ;
 11764                              <1> 
 11765                              <1> .about_win:
 11766 000049E0 3F                  <1> .about_win_frame        db  0x3F        ;
 11767 000049E1 F1                  <1> .about_win_title        db  0xF1        ; about window
 11768 000049E2 3E                  <1> .about_msg              db  0x3E        ;
 11769                              <1> 
 11770 000049E3 70                  <1> .delay_time             db  0x70        ; delay time
 11771 000049E4 00                  <1> .background             db  0x00        ; background (if no background icon)
 11772 000049E5 7074                <1> .copyright              dw  0x7470      ; copyright string
 11773 000049E7 7074                <1> .hint                   dw  0x7470      ; hint string
 11774 000049E9 7C                  <1> .knl_flags              db  0x7C        ; the color of kernal fags.
 11775 000049EA 70                  <1> .knl_drvid              db  0x70        ; the color of kernel drive id.
 11776 000049EB 70                  <1> .date                   db  0x70        ; color of date string
 11777 000049EC 70                  <1> .time                   db  0x70        ; color of time string
 11778                              <1> 
 11779                              <1> ; icon data
 11780                              <1> icon:
 11781 000049ED 0401                <1> .brand_size         dw  0x0104              ; the size of brand icon,
 11782                              <1>                                             ; high byte = row, low byte = col.
 11783 000049EF [F64A]              <1> .brand              dw  icon_data.brand     ; offset of brand icon data, set to
 11784                              <1>                                             ; zero if no brand icon.
 11785                              <1> 
 11786 000049F1 0401                <1> .background_size    dw  0x0104              ; the size of background icon,
 11787                              <1>                                             ; high byte = row, low byte = col.
 11788 000049F3 [FE4A]              <1> .background         dw  icon_data.background; offset of background icon data,
 11789                              <1>                                             ; set to zero if no background icon.
 11790                              <1> 
 11791                              <1> ; font data
 11792                              <1> font:
 11793 000049F5 0400                <1> .number             dw  (font_data.end-font_data)/17
 11794                              <1>                                             ; number of chars to be replaced,
 11795                              <1>                                             ; should <= (256 - start).
 11796 000049F7 [064B]              <1> .data               dw  font_data           ; offset of font set data, set to
 11797                              <1>                                             ; zero if no font to be replaced.
 11798                              <1> 
 11799                              <1> ; chars used by window frame
 11800                              <1> frame_char:
 11801 000049F9 20                  <1> .top                db     0x20            ; top horizontal
 11802 000049FA CD                  <1> .bottom             db     0xCD            ; bottom horiztontal
 11803 000049FB BA                  <1> .left               db     0xBA            ; left vertical
 11804 000049FC BA                  <1> .right              db     0xBA            ; right vertical
 11805 000049FD C9                  <1> .tl_corner          db     0xC9            ; top left corner
 11806 000049FE BB                  <1> .tr_corner          db     0xBB            ; top right corner
 11807 000049FF C8                  <1> .bl_corner          db     0xC8            ; bottom left corner
 11808 00004A00 BC                  <1> .br_corner          db     0xBC            ; bottom right corner
 11809                              <1> 
 11810                              <1> ; how to draw window frame
 11811 00004A01 01                  <1> draw_frame_method   db  1          ; = 0 means draw all frame using frame attr.
 11812                              <1>                                    ; = 1 means draw top horizontal line using
 11813                              <1>                                    ;     title attr.
 11814                              <1>                                    ; = 2 means draw top corner and horizontal
 11815                              <1>                                    ;     line using title attr.
 11816                              <1> 
 11817                              <1> ; keymap data
 11818                              <1> keymap:                                  ; entry of keymap
 11819 00004A02 0000                <1> .number             dw  (keymap_data.end-keymap_data)/4
 11820                              <1>                                            ; number of keymap entries
 11821 00004A04 [4A4B]              <1> .data               dw  keymap_data      ; pointer to keymap
 11822                              <1> 
 11823                              <1> ; index table of strings
 11824                              <1> str_idx:
 11825 00004A06 [4A4B]              <1> .boot_menu_title                dw  string.boot_menu_title
 11826 00004A08 [544B]              <1> .boot_menu_header               dw  string.boot_menu_header
 11827 00004A0A [604B]              <1> .boot_menu_header_noflags       dw  string.boot_menu_header_noflags
 11828 00004A0C [684B]              <1> .boot_menu_header_nonumber      dw  string.boot_menu_header_nonumber
 11829 00004A0E [714B]              <1> .boot_menu_header_notype        dw  string.boot_menu_header_notype
 11830                              <1> 
 11831 00004A10 [784B]              <1> .about              dw  string.about
 11832 00004A12 [7E4B]              <1> .error              dw  string.error
 11833 00004A14 [844B]              <1> .help               dw  string.help
 11834 00004A16 [894B]              <1> .info               dw  string.info
 11835 00004A18 [944B]              <1> .input              dw  string.input
 11836                              <1> 
 11837 00004A1A [9A4B]              <1> .delay_time         dw  string.delay_time
 11838 00004A1C [A74B]              <1> .name               dw  string.name
 11839 00004A1E [AE4B]              <1> .new_root_passwd    dw  string.new_root_passwd
 11840 00004A20 [B24B]              <1> .root_passwd        dw  string.root_passwd
 11841 00004A22 [C24B]              <1> .new_record_passwd  dw  string.new_record_passwd
 11842 00004A24 [C64B]              <1> .record_passwd      dw  string.record_passwd
 11843 00004A26 [D84B]              <1> .retype_passwd      dw  string.retype_passwd
 11844 00004A28 [EA4B]              <1> .input_schedule     dw  string.input_schedule
 11845 00004A2A [084C]              <1> .input_keystrokes   dw  string.input_keystrokes
 11846 00004A2C [544C]              <1> .key_count          dw  string.key_count
 11847 00004A2E [624C]              <1> .io_port            dw  string.io_port
 11848 00004A30 [7F4C]              <1> .year               dw  string.year
 11849                              <1> 
 11850 00004A32 [864C]              <1> .drive_id           dw  string.drive_id
 11851 00004A34 [944C]              <1> .part_id            dw  string.part_id
 11852 00004A36 [A14C]              <1> .record_type        dw  string.record_type
 11853 00004A38 [B04C]              <1> .record_name        dw  string.record_name
 11854 00004A3A [BF4C]              <1> .auto_active        dw  string.auto_active
 11855 00004A3C [CF4C]              <1> .active             dw  string.active
 11856 00004A3E [DC4C]              <1> .auto_hide          dw  string.auto_hide
 11857 00004A40 [EB4C]              <1> .hidden             dw  string.hidden
 11858 00004A42 [F84C]              <1> .swap_drv           dw  string.swap_drv
 11859 00004A44 [074D]              <1> .logical            dw  string.logical
 11860 00004A46 [144D]              <1> .key_strokes        dw  string.key_strokes
 11861 00004A48 [244D]              <1> .password           dw  string.password
 11862 00004A4A [314D]              <1> .schedule           dw  string.schedule
 11863 00004A4C [404D]              <1> .yes                dw  string.yes
 11864 00004A4E [444D]              <1> .no                 dw  string.no
 11865                              <1> 
 11866 00004A50 [484D]              <1> .copyright          dw  string.copyright
 11867 00004A52 [7E4D]              <1> .hint               dw  string.hint
 11868 00004A54 [C54D]              <1> .about_content      dw  string.about_content
 11869 00004A56 [CE4E]              <1> .help_content       dw  string.help_content
 11870                              <1> 
 11871 00004A58 [6052]              <1> .changes_saved      dw  string.changes_saved
 11872 00004A5A [6F52]              <1> .passwd_changed     dw  string.passwd_changed
 11873 00004A5C [8152]              <1> .ask_save_changes   dw  string.ask_save_changes
 11874                              <1> 
 11875 00004A5E [9952]              <1> .wrong_passwd       dw  string.wrong_passwd
 11876 00004A60 [A952]              <1> .disk_error         dw  string.disk_error
 11877 00004A62 [B852]              <1> .mark_act_failed    dw  string.mark_act_failed
 11878 00004A64 [CC52]              <1> .toggle_hid_failed  dw  string.toggle_hid_failed
 11879 00004A66 [E052]              <1> .no_system          dw  string.no_system
 11880 00004A68 [1353]              <1> .invalid_record     dw  string.invalid_record
 11881 00004A6A [2853]              <1> .invalid_schedule   dw  string.invalid_schedule
 11882 00004A6C [3F53]              <1> .inst_confirm       dw  string.inst_confirm
 11883 00004A6E [6E53]              <1> .inst_ok            dw  string.inst_ok
 11884 00004A70 [8A53]              <1> .inst_abort         dw  string.inst_abort
 11885 00004A72 [A253]              <1> .uninst_confirm     dw  string.uninst_confirm
 11886 00004A74 [C853]              <1> .uninst_ok          dw  string.uninst_ok
 11887 00004A76 [0254]              <1> .uninst_abort       dw  string.uninst_abort
 11888 00004A78 [1C54]              <1> .confirm            dw  string.confirm
 11889 00004A7A [4554]              <1> .no_sbml            dw  string.no_sbml
 11890 00004A7C [7D54]              <1> .invalid_ioports    dw  string.invalid_ioports
 11891                              <1> 
 11892                              <1> ; command menu str_idx
 11893                              <1> ; main menu
 11894 00004A7E [9054]              <1> .main_menu_title    dw string.main_menu_title
 11895                              <1> .main_menu_strings:
 11896 00004A80 [9A54]              <1>                     dw string.main_menu_help
 11897 00004A82 [B054]              <1>                     dw string.main_menu_about
 11898 00004A84 [3455]              <1>                     dw string.main_menu_save
 11899 00004A86 [C654]              <1>                     dw string.main_menu_bootit
 11900 00004A88 [CE54]              <1>                     dw string.main_menu_bootprev
 11901 00004A8A [4A55]              <1>                     dw string.main_menu_bar
 11902 00004A8C [0C55]              <1>                     dw string.main_menu_recordset
 11903 00004A8E [2055]              <1>                     dw string.main_menu_sysset
 11904 00004A90 [4A55]              <1>                     dw string.main_menu_bar
 11905 00004A92 [E054]              <1>                     dw string.main_menu_quit
 11906 00004A94 [F654]              <1>                     dw string.main_menu_poweroff
 11907                              <1> 
 11908                              <1> ; record settings menu
 11909 00004A96 [5E55]              <1> .record_menu_title  dw string.record_menu_title
 11910                              <1> .record_menu_strings:
 11911 00004A98 [6E55]              <1>                     dw string.record_menu_info
 11912 00004A9A [8755]              <1>                     dw string.record_menu_name
 11913 00004A9C [A055]              <1>                     dw string.record_menu_passwd
 11914 00004A9E [B955]              <1>                     dw string.record_menu_schedule
 11915 00004AA0 [D255]              <1>                     dw string.record_menu_keys
 11916 00004AA2 [CC56]              <1>                     dw string.record_menu_bar
 11917 00004AA4 [EB55]              <1>                     dw string.record_menu_act
 11918 00004AA6 [0456]              <1>                     dw string.record_menu_hide
 11919 00004AA8 [1D56]              <1>                     dw string.record_menu_autoact
 11920 00004AAA [3656]              <1>                     dw string.record_menu_autohide
 11921 00004AAC [4F56]              <1>                     dw string.record_menu_swapdrv
 11922 00004AAE [CC56]              <1>                     dw string.record_menu_bar
 11923 00004AB0 [6856]              <1>                     dw string.record_menu_del
 11924 00004AB2 [8156]              <1>                     dw string.record_menu_dup
 11925 00004AB4 [9A56]              <1>                     dw string.record_menu_moveup
 11926 00004AB6 [B356]              <1>                     dw string.record_menu_movedown
 11927                              <1> 
 11928                              <1> ; system setting menu
 11929 00004AB8 [E356]              <1> .sys_menu_title     dw string.sys_menu_title
 11930                              <1> .sys_menu_strings:
 11931 00004ABA [F356]              <1>                     dw string.sys_menu_rootpasswd
 11932 00004ABC [1457]              <1>                     dw string.sys_menu_admin
 11933 00004ABE [3557]              <1>                     dw string.sys_menu_security
 11934 00004AC0 [BC58]              <1>                     dw string.sys_menu_bar
 11935 00004AC2 [5657]              <1>                     dw string.sys_menu_setdef
 11936 00004AC4 [7757]              <1>                     dw string.sys_menu_unsetdef
 11937 00004AC6 [9857]              <1>                     dw string.sys_menu_delay
 11938 00004AC8 [B957]              <1>                     dw string.sys_menu_bmstyle
 11939 00004ACA [DA57]              <1>                     dw string.sys_menu_remlast
 11940 00004ACC [FB57]              <1>                     dw string.sys_menu_int13ext
 11941 00004ACE [BC58]              <1>                     dw string.sys_menu_bar
 11942 00004AD0 [1358]              <1>                     dw string.sys_menu_rescanall
 11943 00004AD2 [3458]              <1>                     dw string.sys_menu_rescanpart
 11944 00004AD4 [5558]              <1>                     dw string.sys_menu_set_ioports
 11945 00004AD6 [6A58]              <1>                     dw string.sys_menu_set_y2kfix
 11946 00004AD8 [BC58]              <1>                     dw string.sys_menu_bar
 11947 00004ADA [8658]              <1>                     dw string.sys_menu_inst
 11948 00004ADC [A058]              <1>                     dw string.sys_menu_uninst
 11949                              <1> 
 11950 00004ADE [DB58]              <1> .cdimg_menu_title   dw string.cdimg_menu_title
 11951 00004AE0 [ED58]              <1> .cdimg_menu_strings dw string.cdimg_menu_noemu
 11952 00004AE2 [FA58]              <1>                     dw string.cdimg_menu_120m
 11953 00004AE4 [0959]              <1>                     dw string.cdimg_menu_144m
 11954 00004AE6 [1859]              <1>                     dw string.cdimg_menu_288m
 11955                              <1> 
 11956 00004AE8 [2759]              <1> .sunday             dw string.sunday
 11957 00004AEA [2B59]              <1> .monday             dw string.monday
 11958 00004AEC [2F59]              <1> .tuesday            dw string.tuesday
 11959 00004AEE [3359]              <1> .wednesday          dw string.wednesday
 11960 00004AF0 [3759]              <1> .thursday           dw string.thursday
 11961 00004AF2 [3B59]              <1> .friday             dw string.friday
 11962 00004AF4 [3F59]              <1> .saturday           dw string.saturday
 11963                              <1> 
 11964                              <1> end_of_str_idx:
 11965                              <1> 
 11966                              <1> ;=============================================================================
 11967                              <1> ; variable size data
 11968                              <1> ;=============================================================================
 11969                              <1> 
 11970                              <1> ; icon data
 11971                              <1> 
 11972                              <1> ; two bytes corresponding to a char,
 11973                              <1> ; high byte is color, low byte is char code.
 11974                              <1> icon_data:
 11975                              <1> .brand:
 11976 00004AF6 DB7CDC7CDD7CDE7C    <1> db  brand_char1, 0x7C, brand_char2, 0x7C, brand_char3, 0x7C, brand_char4, 0x7C
 11977                              <1> 
 11978                              <1> .background:
 11979 00004AFE B071B071B071B071    <1> db  0xB0, 0x71, 0xB0, 0x71, 0xB0, 0x71, 0xB0, 0x71
 11980                              <1> 
 11981                              <1> ; font data
 11982                              <1> ; each char occupied 17 bytes
 11983                              <1> ; the first bytes is the ascii code used by this char
 11984                              <1> ; the following 16 bytes is font data
 11985                              <1> ;
 11986                              <1> ; NOTE:
 11987                              <1> ;   Do not replace ascii char 0 and 0x0d, 0x1e and 0x1f,
 11988                              <1> ;   these chars have special use.
 11989                              <1> ;
 11990                              <1> font_data:
 11991 00004B06 DB                  <1>   db  start_font
 11992 00004B07 00000000070C08080C- <1>   db  0x00,0x00,0x00,0x00,0x07,0x0c,0x08,0x08,0x0c,0x07,0x00,0x00,0x00,0x00,0xfe,0x00
 11993 00004B10 0700000000FE00      <1>
 11994 00004B17 DC                  <1>   db  start_font+1
 11995 00004B18 01010101FD011F1F03- <1>   db  0x01,0x01,0x01,0x01,0xfd,0x01,0x1f,0x1f,0x03,0xf7,0x0d,0x19,0x31,0x61,0xff,0xff
 11996 00004B21 F70D193161FFFF      <1>
 11997 00004B28 DD                  <1>   db  start_font+2
 11998 00004B29 80808080BF80F0F898- <1>   db  0x80,0x80,0x80,0x80,0xbf,0x80,0xf0,0xf8,0x98,0x9b,0x98,0x98,0x98,0x98,0x9e,0x9e
 11999 00004B32 9B989898989E9E      <1>
 12000 00004B39 DE                  <1>   db  start_font+3
 12001 00004B3A 00000000FF00000000- <1>   db  0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0xf0,0x18,0x08,0x08,0x18,0xf0,0x00
 12002 00004B43 F018080818F000      <1>
 12003                              <1> .end:
 12004                              <1> 
 12005                              <1> ; keymap
 12006                              <1> ; each entry has two words, the first is original keycode, 
 12007                              <1> ; the second is new keycode.
 12008                              <1> keymap_data:
 12009                              <1> %ifdef KEYMAP_AZERTY
 12010                              <1>   %include "azerty.kbd"
 12011                              <1> %elifdef KEYMAP_QWERTZ
 12012                              <1>   %include "qwertz.kbd"
 12013                              <1> %elifdef KEYMAP_DVORAK
 12014                              <1>   %include "dvorak.kbd"
 12015                              <1> %elifdef KEYMAP_DVORAK_ANSI
 12016                              <1>   %include "dvorak-ansi.kbd"
 12017                              <1> %endif
 12018                              <1> .end:
 12019                              <1> 
 12020                              <1> ; strings
 12021                              <1> ; all strings are zero ending,
 12022                              <1> ; use 0x0d to break string into multi-lines.
 12023                              <1> string:
 12024                              <1> ; used in main window and boot menu.
 12025 00004B4A 426F6F74204D656E75- <1> .boot_menu_title                db  'Boot Menu',0
 12026 00004B53 00                  <1>
 12027 00004B54 2020202020466C6167- <1> .boot_menu_header               db  '     Flags  '
 12028 00004B5D 732020              <1>
 12029 00004B60 20204E756D626572    <1> .boot_menu_header_noflags       db  '  Number'
 12030 00004B68 202054797065202020  <1> .boot_menu_header_nonumber      db  '  Type   '
 12031 00004B71 20204E616D6500      <1> .boot_menu_header_notype        db  '  Name',0
 12032                              <1> 
 12033                              <1> ; window titles.
 12034 00004B78 41626F757400        <1> .about                          db  'About',0
 12035 00004B7E 4572726F7200        <1> .error                          db  'Error',0
 12036 00004B84 48656C7000          <1> .help                           db  'Help',0
 12037 00004B89 496E666F6D6174696F- <1> .info                           db  'Infomation',0
 12038 00004B92 6E00                <1>
 12039 00004B94 496E70757400        <1> .input                          db  'Input',0
 12040                              <1> 
 12041                              <1> ; used in input boxes.
 12042 00004B9A 44656C61792074696D- <1> .delay_time                     db  'Delay time: ',0
 12043 00004BA3 653A2000            <1>
 12044 00004BA7 4E616D653A2000      <1> .name                           db  'Name: ',0
 12045 00004BAE 4E657720            <1> .new_root_passwd                db  'New '
 12046 00004BB2 526F6F742070617373- <1> .root_passwd                    db  'Root password: ',0
 12047 00004BBB 776F72643A2000      <1>
 12048 00004BC2 4E657720            <1> .new_record_passwd              db  'New '
 12049 00004BC6 5265636F7264207061- <1> .record_passwd                  db  'Record password: ',0
 12050 00004BCF 7373776F72643A2000  <1>
 12051 00004BD8 526574797065207061- <1> .retype_passwd                  db  'Retype password: ',0
 12052 00004BE1 7373776F72643A2000  <1>
 12053 00004BEA 5363686564756C6520- <1> .input_schedule                 db  'Schedule (hh:mm-hh:mm;days): ',0
 12054 00004BF3 2868683A6D6D2D6868- <1>
 12055 00004BFC 3A6D6D3B6461797329- <1>
 12056 00004C05 3A2000              <1>
 12057 00004C08 496E707574206B6579- <1> .input_keystrokes               db  'Input keystrokes (max 13 keys)',0x0d
 12058 00004C11 7374726F6B65732028- <1>
 12059 00004C1A 6D6178203133206B65- <1>
 12060 00004C23 7973290D            <1>
 12061 00004C27 5072657373203C5363- <1>                                 db  'Press <Scroll Lock> to finish,',0x0d
 12062 00004C30 726F6C6C204C6F636B- <1>
 12063 00004C39 3E20746F2066696E69- <1>
 12064 00004C42 73682C0D            <1>
 12065 00004C46 4B657920636F646520- <1>                                 db  'Key code = 0x',0
 12066 00004C4F 3D20307800          <1>
 12067 00004C54 0D4B657920636F756E- <1> .key_count                      db  0x0d,'Key count = ',0
 12068 00004C5D 74203D2000          <1>
 12069 00004C62 492F4F204261736520- <1> .io_port                        db  'I/O Base Ports (hex1,hex2): ',0
 12070 00004C6B 506F72747320286865- <1>
 12071 00004C74 78312C68657832293A- <1>
 12072 00004C7D 2000                <1>
 12073 00004C7F 596561723A2000      <1> .year                           db  'Year: ',0
 12074                              <1> 
 12075                              <1> ; used in record info box.
 12076 00004C86 202020447269766520- <1> .drive_id                       db       '   Drive ID: ',0
 12077 00004C8F 49443A2000          <1>
 12078 00004C94 202020506172742049- <1> .part_id                        db  '   Part ID: ',0
 12079 00004C9D 443A2000            <1>
 12080 00004CA1 0D5265636F72642054- <1> .record_type                    db  0x0d,'Record Type: ',0
 12081 00004CAA 7970653A2000        <1>
 12082 00004CB0 0D5265636F7264204E- <1> .record_name                    db  0x0d,'Record Name: ',0
 12083 00004CB9 616D653A2000        <1>
 12084                              <1> 
 12085 00004CBF 0D0D4175746F204163- <1> .auto_active                    db  0x0d,0x0d,'Auto Active: ',0
 12086 00004CC8 746976653A2000      <1>
 12087 00004CCF 202020204163746976- <1> .active                         db  '    Active: ',0
 12088 00004CD8 653A2000            <1>
 12089 00004CDC 0D20204175746F2048- <1> .auto_hide                      db  0x0d,'  Auto Hide: ',0
 12090 00004CE5 6964653A2000        <1>
 12091 00004CEB 202020204869646465- <1> .hidden                         db  '    Hidden: ',0
 12092 00004CF4 6E3A2000            <1>
 12093 00004CF8 0D5377617020647269- <1> .swap_drv                       db  0x0d,'Swap driver: ',0
 12094 00004D01 7665723A2000        <1>
 12095 00004D07 2020204C6F67696361- <1> .logical                        db  '   Logical: ',0
 12096 00004D10 6C3A2000            <1>
 12097 00004D14 0D0D4B657920537472- <1> .key_strokes                    db  0x0d,0x0d,'Key Strokes: ',0
 12098 00004D1D 6F6B65733A2000      <1>
 12099 00004D24 202050617373776F72- <1> .password                       db  '  Password: ',0
 12100 00004D2D 643A2000            <1>
 12101 00004D31 0D2020205363686564- <1> .schedule                       db  0x0d,'   Schedule: ',0
 12102 00004D3A 756C653A2000        <1>
 12103                              <1> 
 12104 00004D40 59657300            <1> .yes                            db  'Yes',0
 12105 00004D44 4E6F2000            <1> .no                             db  'No ',0
 12106                              <1> 
 12107                              <1> ; copyright infomation, displayed at the top of the screen.
 12108 00004D48 20536D61727420426F- <1> .copyright          db  ' Smart Boot Manager 3.90.1 | Copyright (C) 2001 Suzhe',0
 12109 00004D51 6F74204D616E616765- <1>
 12110 00004D5A 7220332E39302E3120- <1>
 12111 00004D63 7C20436F7079726967- <1>
 12112 00004D6C 687420284329203230- <1>
 12113 00004D75 30312053757A686500  <1>
 12114                              <1> 
 12115                              <1> ; hint message, displayed at the bottom of the screen.
 12116 00004D7E 207E46317E2D48656C- <1> .hint               db  ' ~F1~-Help  ~F2~-Save  ~F3~-Rename  ~F4~-Active  ~F5~-Hide  ~Tab~-Menu',0
 12117 00004D87 7020207E46327E2D53- <1>
 12118 00004D90 61766520207E46337E- <1>
 12119 00004D99 2D52656E616D652020- <1>
 12120 00004DA2 7E46347E2D41637469- <1>
 12121 00004DAB 766520207E46357E2D- <1>
 12122 00004DB4 4869646520207E5461- <1>
 12123 00004DBD 627E2D4D656E7500    <1>
 12124                              <1> 
 12125                              <1> ; about infomation.
 12126 00004DC5 202020202020202020- <1> .about_content      db  '           Smart Boot Manager 3.90.1',0x0d
 12127 00004DCE 2020536D6172742042- <1>
 12128 00004DD7 6F6F74204D616E6167- <1>
 12129 00004DE0 657220332E39302E31- <1>
 12130 00004DE9 0D                  <1>
 12131 00004DEA 2020436F7079726967- <1>                     db  '  Copyright (C) 2001 Suzhe <su_zhe@sina.com>',0x0d,0x0d
 12132 00004DF3 687420284329203230- <1>
 12133 00004DFC 30312053757A686520- <1>
 12134 00004E05 3C73755F7A68654073- <1>
 12135 00004E0E 696E612E636F6D3E0D- <1>
 12136 00004E17 0D                  <1>
 12137 00004E18 205468697320697320- <1>                     db  ' This is free software, you can redistribute',0x0d
 12138 00004E21 6672656520736F6674- <1>
 12139 00004E2A 776172652C20796F75- <1>
 12140 00004E33 2063616E2072656469- <1>
 12141 00004E3C 73747269627574650D  <1>
 12142 00004E45 2020697420616E642F- <1>                     db  '  it and/or modify it under the terms of the',0x0d
 12143 00004E4E 6F72206D6F64696679- <1>
 12144 00004E57 20697420756E646572- <1>
 12145 00004E60 20746865207465726D- <1>
 12146 00004E69 73206F66207468650D  <1>
 12147 00004E72 2020202020474E5520- <1>                     db  '     GNU General Public License version 2.',0x0d,0x0d
 12148 00004E7B 47656E6572616C2050- <1>
 12149 00004E84 75626C6963204C6963- <1>
 12150 00004E8D 656E73652076657273- <1>
 12151 00004E96 696F6E20322E0D0D    <1>
 12152 00004E9E 546869732070726F67- <1>                     db  'This program comes with ABSOLUTELY NO WARRANTY!',0
 12153 00004EA7 72616D20636F6D6573- <1>
 12154 00004EB0 207769746820414253- <1>
 12155 00004EB9 4F4C5554454C59204E- <1>
 12156 00004EC2 4F2057415252414E54- <1>
 12157 00004ECB 592100              <1>
 12158                              <1> 
 12159                              <1> ; help infomation.
 12160                              <1> .help_content:
 12161 00004ECE 202020202020463120- <1>         db '      F1 = Help                  Ctrl+F1 = About',0x0d
 12162 00004ED7 3D2048656C70202020- <1>
 12163 00004EE0 202020202020202020- <1>
 12164 00004EE9 202020202020437472- <1>
 12165 00004EF2 6C2B4631203D204162- <1>
 12166 00004EFB 6F75740D            <1>
 12167 00004EFF 202020202020463220- <1>         db '      F2 = Save                       F3 = Rename',0x0d
 12168 00004F08 3D2053617665202020- <1>
 12169 00004F11 202020202020202020- <1>
 12170 00004F1A 202020202020202020- <1>
 12171 00004F23 20204633203D205265- <1>
 12172 00004F2C 6E616D650D          <1>
 12173 00004F31 202020202020463420- <1>         db '      F4 = Mark active                F5 = Hide/unhide',0x0d
 12174 00004F3A 3D204D61726B206163- <1>
 12175 00004F43 746976652020202020- <1>
 12176 00004F4C 202020202020202020- <1>
 12177 00004F55 20204635203D204869- <1>
 12178 00004F5E 64652F756E68696465- <1>
 12179 00004F67 0D                  <1>
 12180 00004F68 202020202020463620- <1>         db '      F6 = Toggle auto active         F7 = Toggle auto hide',0x0d
 12181 00004F71 3D20546F67676C6520- <1>
 12182 00004F7A 6175746F2061637469- <1>
 12183 00004F83 766520202020202020- <1>
 12184 00004F8C 20204637203D20546F- <1>
 12185 00004F95 67676C65206175746F- <1>
 12186 00004F9E 20686964650D        <1>
 12187 00004FA4 202020202020463820- <1>         db '      F8 = Set default          Shift+F8 = Unset default',0x0d
 12188 00004FAD 3D2053657420646566- <1>
 12189 00004FB6 61756C742020202020- <1>
 12190 00004FBF 202020202053686966- <1>
 12191 00004FC8 742B4638203D20556E- <1>
 12192 00004FD1 736574206465666175- <1>
 12193 00004FDA 6C740D              <1>
 12194 00004FDD 20204374726C2B4420- <1>         db '  Ctrl+D = Delete                 Ctrl+P = Duplicate',0x0d
 12195 00004FE6 3D2044656C65746520- <1>
 12196 00004FEF 202020202020202020- <1>
 12197 00004FF8 202020202020204374- <1>
 12198 00005001 726C2B50203D204475- <1>
 12199 0000500A 706C69636174650D    <1>
 12200 00005012 20204374726C2B5520- <1>         db '  Ctrl+U = Move record up         Ctrl+N = Move record down',0x0d
 12201 0000501B 3D204D6F7665207265- <1>
 12202 00005024 636F72642075702020- <1>
 12203 0000502D 202020202020204374- <1>
 12204 00005036 726C2B4E203D204D6F- <1>
 12205 0000503F 7665207265636F7264- <1>
 12206 00005048 20646F776E0D        <1>
 12207 0000504E 20204374726C2B5320- <1>         db '  Ctrl+S = Set/unset schedule     Ctrl+T = Set delay time',0x0d
 12208 00005057 3D205365742F756E73- <1>
 12209 00005060 657420736368656475- <1>
 12210 00005069 6C6520202020204374- <1>
 12211 00005072 726C2B54203D205365- <1>
 12212 0000507B 742064656C61792074- <1>
 12213 00005084 696D650D            <1>
 12214 00005088 20204374726C2B4B20- <1>         db '  Ctrl+K = Set/unset keystrokes   / or ? = Show information',0x0d
 12215 00005091 3D205365742F756E73- <1>
 12216 0000509A 6574206B6579737472- <1>
 12217 000050A3 6F6B65732020202F20- <1>
 12218 000050AC 6F72203F203D205368- <1>
 12219 000050B5 6F7720696E666F726D- <1>
 12220 000050BE 6174696F6E0D        <1>
 12221 000050C4 20204374726C2B4920- <1>         db '  Ctrl+I = Rescan all records     Ctrl+H = Rescan all partitions',0x0d,
 12222 000050CD 3D2052657363616E20- <1>
 12223 000050D6 616C6C207265636F72- <1>
 12224 000050DF 647320202020204374- <1>
 12225 000050E8 726C2B48203D205265- <1>
 12226 000050F1 7363616E20616C6C20- <1>
 12227 000050FA 706172746974696F6E- <1>
 12228 00005103 730D                <1>
 12229 00005105 20204374726C2B5820- <1>         db '  Ctrl+X = Toggle swap driver id  Ctrl+F = Show/hide flags',0x0d
 12230 0000510E 3D20546F67676C6520- <1>
 12231 00005117 737761702064726976- <1>
 12232 00005120 657220696420204374- <1>
 12233 00005129 726C2B46203D205368- <1>
 12234 00005132 6F772F686964652066- <1>
 12235 0000513B 6C6167730D          <1>
 12236 00005140 20204374726C2B4C20- <1>         db '  Ctrl+L = Toggle remember the last booted record',0x0d
 12237 00005149 3D20546F67676C6520- <1>
 12238 00005152 72656D656D62657220- <1>
 12239 0000515B 746865206C61737420- <1>
 12240 00005164 626F6F746564207265- <1>
 12241 0000516D 636F72640D          <1>
 12242 00005172 202020202020463920- <1>         db '      F9 = Change boot record password',0x0d
 12243 0000517B 3D204368616E676520- <1>
 12244 00005184 626F6F74207265636F- <1>
 12245 0000518D 72642070617373776F- <1>
 12246 00005196 72640D              <1>
 12247 00005199 202020202046313020- <1>         db '     F10 = Change root password',0x0d
 12248 000051A2 3D204368616E676520- <1>
 12249 000051AB 726F6F742070617373- <1>
 12250 000051B4 776F72640D          <1>
 12251 000051B9 4374726C2B46313020- <1>         db 'Ctrl+F10 = Enter/leave Administrator mode',0x0d
 12252 000051C2 3D20456E7465722F6C- <1>
 12253 000051CB 656176652041646D69- <1>
 12254 000051D4 6E6973747261746F72- <1>
 12255 000051DD 206D6F64650D        <1>
 12256 000051E3 20416C742B46313020- <1>         db ' Alt+F10 = Enter/leave Security Lock mode',0x0d
 12257 000051EC 3D20456E7465722F6C- <1>
 12258 000051F5 656176652053656375- <1>
 12259 000051FE 72697479204C6F636B- <1>
 12260 00005207 206D6F64650D        <1>
 12261 0000520D 202020202054616220- <1>         db '     Tab = Popup command menu',0x0d
 12262 00005216 3D20506F7075702063- <1>
 12263 0000521F 6F6D6D616E64206D65- <1>
 12264 00005228 6E750D              <1>
 12265 0000522B 20204374726C2B5120- <1>         db '  Ctrl+Q = Quit to BIOS         Ctrl+F12 = Power off',0
 12266 00005234 3D205175697420746F- <1>
 12267 0000523D 2042494F5320202020- <1>
 12268 00005246 20202020204374726C- <1>
 12269 0000524F 2B463132203D20506F- <1>
 12270 00005258 776572206F666600    <1>
 12271                              <1> 
 12272                              <1> ; normal messages.
 12273 00005260 4368616E6765732073- <1> .changes_saved      db  'Changes saved.',0
 12274 00005269 617665642E00        <1>
 12275 0000526F 50617373776F726420- <1> .passwd_changed     db  'Password changed.',0
 12276 00005278 6368616E6765642E00  <1>
 12277 00005281 536176652074686520- <1> .ask_save_changes   db  'Save the changes (y/n)?',0
 12278 0000528A 6368616E6765732028- <1>
 12279 00005293 792F6E293F00        <1>
 12280                              <1> 
 12281                              <1> ; error messages.
 12282 00005299 57726F6E6720706173- <1> .wrong_passwd       db  'Wrong password!',0
 12283 000052A2 73776F72642100      <1>
 12284 000052A9 4469736B206572726F- <1> .disk_error         db  'Disk error! 0x',0
 12285 000052B2 722120307800        <1>
 12286 000052B8 4D61726B2061637469- <1> .mark_act_failed    db  'Mark active failed!',0
 12287 000052C1 7665206661696C6564- <1>
 12288 000052CA 2100                <1>
 12289 000052CC 486964652F756E6869- <1> .toggle_hid_failed  db  'Hide/unhide failed!',0
 12290 000052D5 6465206661696C6564- <1>
 12291 000052DE 2100                <1>
 12292 000052E0 4E6F204F7065726174- <1> .no_system          db  'No Operating System!',0x0d
 12293 000052E9 696E67205379737465- <1>
 12294 000052F2 6D210D              <1>
 12295 000052F5 5265706C6163652061- <1>                     db  'Replace a disk and try again.',0
 12296 000052FE 206469736B20616E64- <1>
 12297 00005307 207472792061676169- <1>
 12298 00005310 6E2E00              <1>
 12299 00005313 496E76616C69642062- <1> .invalid_record     db  'Invalid boot record!',0
 12300 0000531C 6F6F74207265636F72- <1>
 12301 00005325 642100              <1>
 12302 00005328 496E76616C69642073- <1> .invalid_schedule   db  'Invalid schedule time!',0
 12303 00005331 63686564756C652074- <1>
 12304 0000533A 696D652100          <1>
 12305 0000533F 5375726520746F2069- <1> .inst_confirm       db  'Sure to install Smart BootManager ',
 12306 00005348 6E7374616C6C20536D- <1>
 12307 00005351 61727420426F6F744D- <1>
 12308 0000535A 616E6167657220      <1>
 12309 00005361 696E746F2064726976- <1>                     db  'into driver ',0
 12310 0000536A 65722000            <1>
 12311 0000536E 496E7374616C6C6174- <1> .inst_ok            db  'Installation is successful!',0
 12312 00005377 696F6E206973207375- <1>
 12313 00005380 636365737366756C21- <1>
 12314 00005389 00                  <1>
 12315 0000538A 41626F727420746865- <1> .inst_abort         db  'Abort the installation.',0
 12316 00005393 20696E7374616C6C61- <1>
 12317 0000539C 74696F6E2E00        <1>
 12318 000053A2 5375726520746F2075- <1> .uninst_confirm     db  'Sure to uninstall Smart BootManager?',0x0d,0
 12319 000053AB 6E696E7374616C6C20- <1>
 12320 000053B4 536D61727420426F6F- <1>
 12321 000053BD 744D616E616765723F- <1>
 12322 000053C6 0D00                <1>
 12323 000053C8 556E696E7374616C6C- <1> .uninst_ok          db  'Uninstallation is successful!',0x0d
 12324 000053D1 6174696F6E20697320- <1>
 12325 000053DA 737563636573736675- <1>
 12326 000053E3 6C210D              <1>
 12327 000053E6 436F6D707574657220- <1>                     db  'Computer will be restarted.',0
 12328 000053EF 77696C6C2062652072- <1>
 12329 000053F8 65737461727465642E- <1>
 12330 00005401 00                  <1>
 12331 00005402 41626F727420746865- <1> .uninst_abort       db  'Abort the uninstallation.',0
 12332 0000540B 20756E696E7374616C- <1>
 12333 00005414 6C6174696F6E2E00    <1>
 12334 0000541C 507265737320592074- <1> .confirm            db  'Press Y to continue, other key to abort.',0
 12335 00005425 6F20636F6E74696E75- <1>
 12336 0000542E 652C206F7468657220- <1>
 12337 00005437 6B657920746F206162- <1>
 12338 00005440 6F72742E00          <1>
 12339 00005445 536D61727420426F6F- <1> .no_sbml            db  'Smart Boot Manager Loader missing ',0x0d
 12340 0000544E 74204D616E61676572- <1>
 12341 00005457 204C6F61646572206D- <1>
 12342 00005460 697373696E67200D    <1>
 12343 00005468 6F722076657273696F- <1>                     db  'or version mismatch!',0
 12344 00005471 6E206D69736D617463- <1>
 12345 0000547A 682100              <1>
 12346 0000547D 496E76616C69642049- <1> .invalid_ioports    db  'Invalid I/O Ports!',0
 12347 00005486 2F4F20506F72747321- <1>
 12348 0000548F 00                  <1>
 12349                              <1> 
 12350                              <1> ; command menu strings
 12351                              <1> ; main menu
 12352 00005490 4D61696E204D656E75- <1> .main_menu_title     db  'Main Menu',0
 12353 00005499 00                  <1>
 12354 0000549A 48656C702020202020- <1> .main_menu_help      db  'Help             ~F1~',0
 12355 000054A3 20202020202020207E- <1>
 12356 000054AC 46317E00            <1>
 12357 000054B0 41626F757420202020- <1> .main_menu_about     db  'About       ~Ctrl-F1~',0
 12358 000054B9 2020207E4374726C2D- <1>
 12359 000054C2 46317E00            <1>
 12360 000054C6 426F6F7420697400    <1> .main_menu_bootit    db  'Boot it',0
 12361 000054CE 426F6F742050726576- <1> .main_menu_bootprev  db  'Boot Previous MBR',0
 12362 000054D7 696F7573204D425200  <1>
 12363 000054E0 517569742020202020- <1> .main_menu_quit      db  'Quit         ~Ctrl-Q~',0
 12364 000054E9 202020207E4374726C- <1>
 12365 000054F2 2D517E00            <1>
 12366 000054F6 506F776572204F6666- <1> .main_menu_poweroff  db  'Power Off  ~Ctrl-F12~',0
 12367 000054FF 20207E4374726C2D46- <1>
 12368 00005508 31327E00            <1>
 12369 0000550C 5265636F7264205365- <1> .main_menu_recordset db  'Record Settings  ->',0
 12370 00005515 7474696E677320202D- <1>
 12371 0000551E 3E00                <1>
 12372 00005520 53797374656D205365- <1> .main_menu_sysset    db  'System Settings  ->',0
 12373 00005529 7474696E677320202D- <1>
 12374 00005532 3E00                <1>
 12375 00005534 53617665204368616E- <1> .main_menu_save      db  'Save Changes     ~F2~',0
 12376 0000553D 67657320202020207E- <1>
 12377 00005546 46327E00            <1>
 12378 0000554A 2D2D2D2D2D2D2D2D2D- <1> .main_menu_bar       db  '-------------------',0
 12379 00005553 2D2D2D2D2D2D2D2D2D- <1>
 12380 0000555C 2D00                <1>
 12381                              <1> 
 12382                              <1> ; record settings menu
 12383 0000555E 5265636F7264205365- <1> .record_menu_title    db  'Record Settings',0
 12384 00005567 7474696E677300      <1>
 12385 0000556E 496E666F726D617469- <1> .record_menu_info     db  'Information     ~/ or ?~',0
 12386 00005577 6F6E20202020207E2F- <1>
 12387 00005580 206F72203F7E00      <1>
 12388 00005587 4E616D652020202020- <1> .record_menu_name     db  'Name                ~F3~',0
 12389 00005590 202020202020202020- <1>
 12390 00005599 20207E46337E00      <1>
 12391 000055A0 50617373776F726420- <1> .record_menu_passwd   db  'Password            ~F9~',0
 12392 000055A9 202020202020202020- <1>
 12393 000055B2 20207E46397E00      <1>
 12394 000055B9 5363686564756C6520- <1> .record_menu_schedule db  'Schedule        ~Ctrl-S~',0
 12395 000055C2 202020202020207E43- <1>
 12396 000055CB 74726C2D537E00      <1>
 12397 000055D2 4B65797374726F6B65- <1> .record_menu_keys     db  'Keystrokes      ~Ctrl-K~',0
 12398 000055DB 732020202020207E43- <1>
 12399 000055E4 74726C2D4B7E00      <1>
 12400 000055EB 4D61726B2041637469- <1> .record_menu_act      db  'Mark Active         ~F4~',0
 12401 000055F4 766520202020202020- <1>
 12402 000055FD 20207E46347E00      <1>
 12403 00005604 486964652F756E6869- <1> .record_menu_hide     db  'Hide/unhide         ~F5~',0
 12404 0000560D 646520202020202020- <1>
 12405 00005616 20207E46357E00      <1>
 12406 0000561D 4175746F2041637469- <1> .record_menu_autoact  db  'Auto Active         ~F6~',0
 12407 00005626 766520202020202020- <1>
 12408 0000562F 20207E46367E00      <1>
 12409 00005636 4175746F2048696465- <1> .record_menu_autohide db  'Auto Hide           ~F7~',0
 12410 0000563F 202020202020202020- <1>
 12411 00005648 20207E46377E00      <1>
 12412 0000564F 537761702044726976- <1> .record_menu_swapdrv  db  'Swap Driver ID  ~Ctrl-X~',0
 12413 00005658 657220494420207E43- <1>
 12414 00005661 74726C2D587E00      <1>
 12415 00005668 44656C657465202020- <1> .record_menu_del      db  'Delete          ~Ctrl-D~',0
 12416 00005671 202020202020207E43- <1>
 12417 0000567A 74726C2D447E00      <1>
 12418 00005681 4475706C6963617465- <1> .record_menu_dup      db  'Duplicate       ~Ctrl-P~',0
 12419 0000568A 202020202020207E43- <1>
 12420 00005693 74726C2D507E00      <1>
 12421 0000569A 4D6F76652055702020- <1> .record_menu_moveup   db  'Move Up         ~Ctrl-U~',0
 12422 000056A3 202020202020207E43- <1>
 12423 000056AC 74726C2D557E00      <1>
 12424 000056B3 4D6F766520446F776E- <1> .record_menu_movedown db  'Move Down       ~Ctrl-N~',0
 12425 000056BC 202020202020207E43- <1>
 12426 000056C5 74726C2D4E7E00      <1>
 12427 000056CC 2D2D2D2D2D2D2D2D2D- <1> .record_menu_bar      db  '----------------------',0
 12428 000056D5 2D2D2D2D2D2D2D2D2D- <1>
 12429 000056DE 2D2D2D2D00          <1>
 12430                              <1> 
 12431                              <1> ; system setting menu
 12432 000056E3 53797374656D205365- <1> .sys_menu_title       db  'System Settings',0
 12433 000056EC 7474696E677300      <1>
 12434 000056F3 526F6F742050617373- <1> .sys_menu_rootpasswd  db  'Root Password              ~F10~',0
 12435 000056FC 776F72642020202020- <1>
 12436 00005705 202020202020202020- <1>
 12437 0000570E 7E4631307E00        <1>
 12438 00005714 546F67676C65204164- <1> .sys_menu_admin       db  'Toggle Admin Mode     ~Ctrl-F10~',0
 12439 0000571D 6D696E204D6F646520- <1>
 12440 00005726 202020207E4374726C- <1>
 12441 0000572F 2D4631307E00        <1>
 12442 00005735 546F67676C65205365- <1> .sys_menu_security    db  'Toggle Security Mode   ~Alt-F10~',0
 12443 0000573E 637572697479204D6F- <1>
 12444 00005747 64652020207E416C74- <1>
 12445 00005750 2D4631307E00        <1>
 12446 00005756 536574204465666175- <1> .sys_menu_setdef      db  'Set Default Record          ~F8~',0
 12447 0000575F 6C74205265636F7264- <1>
 12448 00005768 202020202020202020- <1>
 12449 00005771 207E46387E00        <1>
 12450 00005777 556E73657420446566- <1> .sys_menu_unsetdef    db  'Unset Default Record  ~Shift-F8~',0
 12451 00005780 61756C74205265636F- <1>
 12452 00005789 726420207E53686966- <1>
 12453 00005792 742D46387E00        <1>
 12454 00005798 5365742044656C6179- <1> .sys_menu_delay       db  'Set Delay Time          ~Ctrl-T~',0
 12455 000057A1 2054696D6520202020- <1>
 12456 000057AA 2020202020207E4374- <1>
 12457 000057B3 726C2D547E00        <1>
 12458 000057B9 4368616E676520426F- <1> .sys_menu_bmstyle     db  'Change Boot Menu Style  ~Ctrl-F~',0
 12459 000057C2 6F74204D656E752053- <1>
 12460 000057CB 74796C6520207E4374- <1>
 12461 000057D4 726C2D467E00        <1>
 12462 000057DA 546F67676C65205265- <1> .sys_menu_remlast     db  'Toggle Remember Last    ~Ctrl-L~',0
 12463 000057E3 6D656D626572204C61- <1>
 12464 000057EC 7374202020207E4374- <1>
 12465 000057F5 726C2D4C7E00        <1>
 12466 000057FB 546F67676C65204578- <1> .sys_menu_int13ext    db  'Toggle Extended Int 13H',0
 12467 00005804 74656E64656420496E- <1>
 12468 0000580D 742031334800        <1>
 12469 00005813 52657363616E20416C- <1> .sys_menu_rescanall   db  'Rescan All Boot Records ~Ctrl-I~',0
 12470 0000581C 6C20426F6F74205265- <1>
 12471 00005825 636F726473207E4374- <1>
 12472 0000582E 726C2D497E00        <1>
 12473 00005834 52657363616E20416C- <1> .sys_menu_rescanpart  db  'Rescan All Partitions   ~Ctrl-H~',0
 12474 0000583D 6C2050617274697469- <1>
 12475 00005846 6F6E732020207E4374- <1>
 12476 0000584F 726C2D487E00        <1>
 12477 00005855 5365742043442D524F- <1> .sys_menu_set_ioports db  'Set CD-ROM I/O Ports',0
 12478 0000585E 4D20492F4F20506F72- <1>
 12479 00005867 747300              <1>
 12480 0000586A 536574207965617220- <1> .sys_menu_set_y2kfix  db  'Set year (fix Y2K BIOS bug)',0
 12481 00005873 286669782059324B20- <1>
 12482 0000587C 42494F532062756729- <1>
 12483 00005885 00                  <1>
 12484 00005886 496E7374616C6C2053- <1> .sys_menu_inst        db  'Install Smart BootManager',0
 12485 0000588F 6D61727420426F6F74- <1>
 12486 00005898 4D616E6167657200    <1>
 12487 000058A0 556E696E7374616C6C- <1> .sys_menu_uninst      db  'Uninstall Smart BootManager',0
 12488 000058A9 20536D61727420426F- <1>
 12489 000058B2 6F744D616E61676572- <1>
 12490 000058BB 00                  <1>
 12491 000058BC 2D2D2D2D2D2D2D2D2D- <1> .sys_menu_bar         db  '------------------------------',0
 12492 000058C5 2D2D2D2D2D2D2D2D2D- <1>
 12493 000058CE 2D2D2D2D2D2D2D2D2D- <1>
 12494 000058D7 2D2D2D00            <1>
 12495                              <1> 
 12496 000058DB 43686F6F7365206120- <1> .cdimg_menu_title     db  'Choose a CD Image',0
 12497 000058E4 434420496D61676500  <1>
 12498 000058ED 4E6F20456D756C6174- <1> .cdimg_menu_noemu     db  'No Emulation',0
 12499 000058F6 696F6E00            <1>
 12500 000058FA 312E32204D20446973- <1> .cdimg_menu_120m      db  '1.2 M Diskette',0
 12501 00005903 6B6574746500        <1>
 12502 00005909 312E34344D20446973- <1> .cdimg_menu_144m      db  '1.44M Diskette',0
 12503 00005912 6B6574746500        <1>
 12504 00005918 322E38384D20446973- <1> .cdimg_menu_288m      db  '2.88M Diskette',0
 12505 00005921 6B6574746500        <1>
 12506                              <1> 
 12507 00005927 53756E00            <1> .sunday              db 'Sun',0
 12508 0000592B 4D6F6E00            <1> .monday              db 'Mon',0
 12509 0000592F 54756500            <1> .tuesday             db 'Tue',0
 12510 00005933 57656400            <1> .wednesday           db 'Wed',0
 12511 00005937 54687500            <1> .thursday            db 'Thu',0
 12512 0000593B 46726900            <1> .friday              db 'Fri',0
 12513 0000593F 53617400            <1> .saturday            db 'Sat',0
 12514                              <1> 
 12515                              <1> ; END OF THEME.
 12516                              <1> end_of_theme:
 12517                              <1> 
 12518                              <1> ; vi:ts=8:et:nowrap
 12519                                  %endif
 12520                                  
 12521                                  end_of_sbm:
 12522                                  SIZE_OF_SBMK equ ($-$$)
 12523                                  
 12524                                  %ifndef EMULATE_PROG
 12525                                  
 12526 00005943 00<rept>                  times 63*512-($-$$) db 0
 12527                                  
 12528                                  %endif
 12529                                  
 12530                                  
 12531                                  ;=============================================================================
 12532                                  ; temp data area
 12533                                  ;=============================================================================
 12534                                  	section .bss
 12535                                  
 12536                                  %ifndef EMULATE_PROG
 12537 00000000 <res 00001BED>                  resb MAX_SBM_SIZE - SIZE_OF_SBMK   ; skip enough space for theme.
 12538                                  %endif
 12539                                   
 12540                                  start_of_tmp_data:
 12541                                  %include "tempdata.asm"
 12542                              <1> ; tempdata.asm
 12543                              <1> ;
 12544                              <1> ; some temp data for Smart Boot Manager
 12545                              <1> ;
 12546                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
 12547                              <1> ;
 12548                              <1> 
 12549                              <1> ;==============================================================================
 12550                              <1> ;temp data area for hd_io.asm
 12551                              <1> ;==============================================================================
 12552                              <1> %ifdef HAVE_HD_IO
 12553                              <1> %ifndef HD_IO_TEMPDATA
 12554                              <1> %define HD_IO_TEMPDATA
 12555                              <1> 
 12556                              <1> hdio_tmp:
 12557 00001BED <res 00000008>      <1> .cdbc_cmd	resb SIZE_OF_CDBC_CMD
 12558 00001BF5 <res 00000042>      <1> .extparam	resb SIZE_OF_EXTPARAM
 12559 00001C37 <res 00000010>      <1> .int13ext	resb SIZE_OF_INT13EXT
 12560 00001C47 <res 0000000A>      <1> .driveinfo	resb SIZE_OF_DRIVEINFO
 12561 00001C51 <res 00000001>      <1> .disk_errno	resb 1
 12562                              <1> 
 12563                              <1> %endif
 12564                              <1> %endif
 12565                              <1> 
 12566                              <1> ;==============================================================================
 12567                              <1> ;temp data area for knl.asm
 12568                              <1> ;==============================================================================
 12569                              <1> %ifdef HAVE_KNL
 12570                              <1> %ifndef KNL_TEMPDATA
 12571                              <1> %define KNL_TEMPDATA
 12572                              <1> 
 12573                              <1> knl_tmp:
 12574 00001C52 <res 00000001>      <1> .good_record_num	resb 1
 12575 00001C53 <res 00000001>      <1> .max_record_num		resb 1
 12576 00001C54 <res 00000001>      <1> .part_id		resb 1
 12577 00001C55 <res 00000004>      <1> .logi_father		resd 1
 12578                              <1> 
 12579 00001C59 <res 00000001>      <1> .floppy_num		resb 1
 12580 00001C5A <res 00000013>      <1> .cdemu_spec		resb SIZE_OF_CDEMU_SPEC
 12581                              <1> 
 12582 00001C6D <res 00000800>      <1> .disk_buf1		resb 2048
 12583 0000246D <res 00000800>      <1> .disk_buf2		resb 2048
 12584                              <1> 
 12585                              <1> %endif
 12586                              <1> %endif
 12587                              <1> 
 12588                              <1> ;==============================================================================
 12589                              <1> ;temp data area for ui.asm
 12590                              <1> ;==============================================================================
 12591                              <1> %ifdef HAVE_UI
 12592                              <1> %ifndef UI_TEMPDATA
 12593                              <1> %define UI_TEMPDATA
 12594                              <1> 
 12595                              <1> ui_tmp:
 12596 00002C6D <res 00000001>      <1> .left_col	resb  1
 12597 00002C6E <res 00000001>      <1> .top_row	resb  1
 12598 00002C6F <res 00000001>      <1> .right_col	resb  1
 12599 00002C70 <res 00000001>      <1> .bottom_row	resb  1
 12600 00002C71 <res 00000001>      <1> .frame_attr	resb  1
 12601 00002C72 <res 00000001>      <1> .title_attr	resb  1
 12602 00002C73 <res 00000002>      <1> .focus_win	resw  1
 12603 00002C75 <res 00000002>      <1> .root_win	resw  1
 12604 00002C77 <res 0000001A>      <1> .def_root_win	resb SIZE_OF_STRUC_WINDOW
 12605 00002C91 <res 00000020>      <1> .tmp_msgbox	resb SIZE_OF_STRUC_MESSAGE_BOX
 12606 00002CB1 <res 00000029>      <1> .tmp_inputbox	resb SIZE_OF_STRUC_INPUT_BOX
 12607 00002CDA <res 0000002B>      <1> .tmp_menubox	resb SIZE_OF_STRUC_MENU_BOX
 12608 00002D05 <res 00000100>      <1> .tmp_buf	resb  256
 12609 00002E05 <res 00000100>      <1> .tmp_buf1	resb  256
 12610                              <1> 
 12611                              <1> %endif
 12612                              <1> %endif
 12613                              <1> 
 12614                              <1> ;==============================================================================
 12615                              <1> ;temp data area for utils.asm
 12616                              <1> ;==============================================================================
 12617                              <1> %ifdef HAVE_UTILS
 12618                              <1> %ifndef UTILS_TEMPDATA
 12619                              <1> %define UTILS_TEMPDATA
 12620                              <1> 
 12621                              <1> utils_tmp:
 12622 00002F05 <res 00000001>      <1> .kbd_work	       resb  1
 12623 00002F06 <res 00000001>      <1> .kbd_last_shift        resb  1
 12624 00002F07 <res 00000001>      <1> .kbd_bypass_next_shift resb 1
 12625                              <1> 
 12626                              <1> %endif
 12627                              <1> %endif
 12628                              <1> 
 12629                              <1> ;=============================================================================
 12630                              <1> ;temp data area for main.asm
 12631                              <1> ;=============================================================================
 12632                              <1> %ifdef HAVE_MAIN_PROG
 12633                              <1> %ifndef MAIN_TEMPDATA
 12634                              <1> %define MAIN_TEMPDATA
 12635                              <1> 
 12636                              <1> main_tmp:
 12637 00002F08 <res 00000020>      <1> .good_record_list    resb MAX_RECORD_NUM
 12638                              <1> 
 12639 00002F28 <res 00000001>      <1> .time_count         resb  1                       ;
 12640 00002F29 <res 00000002>      <1> .ticks_count        resw  1                       ; used in get_key func
 12641 00002F2B <res 00000001>      <1> .key_pressed        resb  1                       ;
 12642 00002F2C <res 00000002>      <1> .keycode            resw  1
 12643                              <1> 
 12644 00002F2E <res 00000001>      <1> .change_occured     resb  1                       ; if change occured.
 12645 00002F2F <res 00000001>      <1> .root_login         resb  1                       ; root login state.
 12646                              <1> 
 12647 00002F30 <res 00000002>      <1> .last_time          resw  1
 12648                              <1> 
 12649 00002F32 <res 00000002>      <1> .schedule_begin  resw  1
 12650 00002F34 <res 00000002>      <1> .schedule_end    resw  1
 12651 00002F36 <res 00000002>      <1> .schedule_day    resw  1
 12652                              <1> 
 12653 00002F38 <res 00000002>      <1> .keystroke_ptr   resw  1
 12654 00002F3A <res 00000001>      <1> .keystroke_num   resb  1
 12655 00002F3B <res 00000001>      <1> .keystroke_max   resb  1
 12656 00002F3C <res 0000002B>      <1> .ikbox           resb SIZE_OF_STRUC_MENU_BOX
 12657                              <1> 
 12658 00002F67 <res 00000800>      <1> .records_buf     resb MAX_RECORD_NUM * SIZE_OF_BOOTRECORD
 12659 00003767 <res 00000050>      <1> .record_string   resb 80
 12660 000037B7 <res 00000100>      <1> .dialog_buf      resb 256
 12661 000038B7 <res 00000050>      <1> .root_buf        resb 80
 12662                              <1> 
 12663                              <1> %endif
 12664                              <1> %endif
 12665                              <1> 
 12666                              <1> %ifdef HAVE_MYINT13H
 12667                              <1> %ifndef MYINT13H_TEMPDATA
 12668                              <1> %define MYINT13H_TEMPDATA
 12669                              <1> 
 12670                              <1> myint13h_tmp:
 12671 00003907 <res 00000002>      <1> .edd30_off  resw 1
 12672 00003909 <res 00000002>      <1> .edd30_seg  resw 1
 12673                              <1> 
 12674                              <1> %endif
 12675                              <1> %endif
 12676                              <1> 
 12677                                  end_of_tmp_data:
 12678                                  
 12679                                  ; vi:ts=8:et:nowrap
