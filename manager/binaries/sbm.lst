     1                                  ; 
     2                                  ; 
     3                                  ; Smart Boot Manager
     4                                  ; 
     5                                  ; 
     6                                  ;  developed by
     7                                  ;    
     8                                  ;       Peter Kleissner
     9                                  ;       Vienna Computer Products
    10                                  ;       Suzhe
    11                                  ;       Christopher Li
    12                                  ;       Risko Gergely
    13                                  ;       Victor O`Muerte
    14                                  ;       Dirk Knop
    15                                  ;       Lenart Janos
    16                                  ;       Frédéric Bonnaud
    17                                  ;       brz
    18                                  ;       Manuel Clos
    19                                  ;       Benoit Mortier
    20                                  ;       Bill Hults
    21                                  ;       Andr Maldonado
    22                                  ;       Santiago Garcia Mantinan
    23                                  ;       
    24                                  ;       Thank you all.
    25                                  ;       
    26                                  
    27                                  ; asmsyntax=nasm
    28                                  ;
    29                                  ; main.asm
    30                                  ;
    31                                  ; Main programs for Smart Boot Manager
    32                                  ;
    33                                  ; Copyright (C) 2000, Suzhe. See file COPYING for details.
    34                                  ; Copyright (C) 2001, Suzhe. See file COPYING for details.
    35                                  ;
    36                                  
    37                                  ; optional Assembly:
    38                                  ; 
    39                                  ;   EMULATE_PROG
    40                                  ;       if defined, creates DOS executable Test-vesions
    41                                  ; 
    42                                  ;   THEME_ZH, THEME_DE, THEME_HU, THEME_RU, THEME_CZ, THEME_ES, THEME_FR, THEME_PT, else US
    43                                  ;       language themes
    44                                  ;   
    45                                  ;   DISABLE_CDBOOT
    46                                  ;       disables CD Boot and initialization of it
    47                                  
    48                                  
    49                                  ; compile 16 bit code (Real Mode) and beware backward compatibility down to 386er
    50                                  [bits 16]
    51                                  CPU 386
    52                                  
    53                                  %include "macros.h"
    54                              <1> ; macros.h
    55                              <1> ;
    56                              <1> ; some nasm macros that simplify the coding.
    57                              <1> ;
    58                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
    59                              <1> ;
    60                              <1> 
    61                              <1> %ifndef DEFINE_MACROS
    62                              <1> %define DEFINE_MACROS
    63                              <1> 
    64                              <1> %macro retz 0
    65                              <1>        jnz %%skip
    66                              <1>        ret
    67                              <1> %%skip:
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> %define jmpz  jz near
    71                              <1> %define jmpnz jnz near
    72                              <1> %define jmpe  je near
    73                              <1> %define jmpne jne near
    74                              <1> %define jmpc  jc near
    75                              <1> %define jmpnc jnc near
    76                              <1> %define jmpa  ja near
    77                              <1> %define jmpna jna near
    78                              <1> %define jmpb  jb near
    79                              <1> %define jmpnb jnb near
    80                              <1> 
    81                              <1> 
    82                              <1> %if 0
    83                              <1> %macro jmpz 1
    84                              <1>        jnz %%skip
    85                              <1>        jmp %1
    86                              <1> %%skip:
    87                              <1> %endmacro
    88                              <1> 
    89                              <1> %macro jmpnz 1
    90                              <1>        jz %%skip
    91                              <1>        jmp %1
    92                              <1> %%skip:
    93                              <1> %endmacro
    94                              <1> 
    95                              <1> %macro jmpe 1
    96                              <1>        jne %%skip
    97                              <1>        jmp %1
    98                              <1> %%skip:
    99                              <1> %endmacro
   100                              <1> 
   101                              <1> %macro jmpne 1
   102                              <1>        je %%skip
   103                              <1>        jmp %1
   104                              <1> %%skip:
   105                              <1> %endmacro
   106                              <1> 
   107                              <1> %macro jmpc 1
   108                              <1>        jnc %%skip
   109                              <1>        jmp %1
   110                              <1> %%skip:
   111                              <1> %endmacro
   112                              <1> 
   113                              <1> %macro jmpnc 1
   114                              <1>        jc %%skip
   115                              <1>        jmp %1
   116                              <1> %%skip:
   117                              <1> %endmacro
   118                              <1> 
   119                              <1> %macro jmpb 1
   120                              <1>        jnb %%skip
   121                              <1>        jmp %1
   122                              <1> %%skip:
   123                              <1> %endmacro
   124                              <1> 
   125                              <1> %macro jmpnb 1
   126                              <1>        jb %%skip
   127                              <1>        jmp %1
   128                              <1> %%skip:
   129                              <1> %endmacro
   130                              <1> 
   131                              <1> %endif
   132                              <1> 
   133                              <1> %endif
   134                                  %include "ui.h"
   135                              <1> ;
   136                              <1> ; ui.h
   137                              <1> ;
   138                              <1> ; header file for ui.asm
   139                              <1> ;
   140                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   141                              <1> ;
   142                              <1> 
   143                              <1> ; following flags is used in struc_window.flags
   144                              <1> 
   145                              <1> %define WINFLAG_OPEN		0x01  ; set this flag when open the window
   146                              <1> %define WINFLAG_MODAL		0x02  ; Modal window
   147                              <1> %define WINFLAG_FRAMED		0x04  ; the window has frame.
   148                              <1> %define WINFLAG_NO_FOCUS	0x08  ; Cannot be focused.
   149                              <1> 
   150                              <1> %define MENUFLAG_SCROLLBAR	0x10  ; the menu has scroll bar
   151                              <1> %define MENUFLAG_SINK_WIDTH	0x20  ; reduce the width of menu area by two char
   152                              <1> %define MENUFLAG_SINK_UPPER	0x40  ; reduce the upper of menu area by one char
   153                              <1> %define MENUFLAG_SINK_BOTTOM	0x80  ; ..
   154                              <1> 
   155                              <1> %define WINFLAG_HI_RUNNING	0x01  ; unsed in hi-byte of struc_window.flags
   156                              <1> 
   157                              <1> ; following flags is used in struc_action.flags
   158                              <1> 
   159                              <1> %define ACTFLAG_CLOSE_WIN	0x01  ; close the window after doing the action
   160                              <1> %define ACTFLAG_REDRAW_BODY	0x02  ; redraw window body after doing it
   161                              <1> %define ACTFLAG_REDRAW_WIN	0x04  ; redraw entire window after doing it
   162                              <1> %define ACTFLAG_REDRAW_SCR	0x08  ; redraw entire screen after doint it
   163                              <1> 
   164                              <1> %define ACTFLAG_CHK_RECNUM	0x10  ; check good record number before do it
   165                              <1> %define ACTFLAG_AUTH_ROOT	0x20  ; confirm root password before do it
   166                              <1> %define ACTFLAG_AUTH_RECORD	0x40  ; confirm record password before do it
   167                              <1> %define ACTFLAG_AUTH_SECURITY	0x80  ; confirm password according to security
   168                              <1>                                       ; level
   169                              <1> %define ACTFLAG_AUTHS		0xF0
   170                              <1> 
   171                              <1> %define SIZE_OF_STRUC_WINDOW		struc_window.end_of_struc
   172                              <1> %define SIZE_OF_STRUC_MENU_BOX		struc_menu_box.end_of_struc
   173                              <1> %define SIZE_OF_STRUC_ACTION		struc_action.end_of_struc
   174                              <1> %define SIZE_OF_STRUC_MESSAGE_BOX	struc_message_box.end_of_struc
   175                              <1> %define SIZE_OF_STRUC_INPUT_BOX		struc_input_box.end_of_struc
   176                              <1> 
   177                              <1> struc struc_window
   178 00000000 <res 00000002>      <1> 	.flags			resw 1	; flags
   179 00000002 <res 00000002>      <1> 	.title			resw 1	; 2nd level pointer to window title
   180 00000004 <res 00000002>      <1> 	.win_attr		resw 1  ; window attribute, 
   181                              <1> 					; high = title, low = frame
   182 00000006 <res 00000002>      <1> 	.win_pos		resw 1	; window position, 
   183                              <1> 					; high = row, low = col
   184 00000008 <res 00000002>      <1> 	.win_size		resw 1	; window size,
   185                              <1> 					; high = height, low = width
   186 0000000A <res 00000002>      <1> 	.parent_win		resw 1	; pointer to parent window
   187 0000000C <res 00000002>      <1> 	.next_win		resw 1  ; pointer to next window
   188 0000000E <res 00000002>      <1> 	.previous_win		resw 1  ; pointer to previous window
   189                              <1> 
   190 00000010 <res 00000002>      <1> 	.act_num		resw 1  ; number of actions
   191 00000012 <res 00000002>      <1> 	.act_table		resw 1	; pointer to action table
   192                              <1> 
   193 00000014 <res 00000002>      <1> 	.default_event_handle	resw 1	; default key event handle
   194 00000016 <res 00000002>      <1> 	.event_handle		resw 1	; key event handle
   195 00000018 <res 00000002>      <1> 	.draw_body_proc		resw 1	; draw window body proc
   196                              <1> 	.end_of_struc
   197                              <1> endstruc
   198                              <1> 
   199                              <1> struc struc_action
   200 00000000 <res 00000001>      <1> 	.flags			resb 1	; flags
   201 00000001 <res 00000002>      <1> 	.keycode		resw 1	; keycode
   202 00000003 <res 00000002>      <1> 	.func			resw 1	; function entry
   203                              <1> 	.end_of_struc
   204                              <1> endstruc
   205                              <1> 
   206                              <1> 
   207                              <1> ; For menubox, the actions of menu items are stored in struc_window.act_table.
   208                              <1> ; First items_num actions in act_table are menu items'. Other actions are 
   209                              <1> ; hotkeys.
   210                              <1> 
   211                              <1> struc struc_menu_box
   212                              <1> ; first part is a struc_window data
   213 00000000 <res 0000001A>      <1> 	.window			resb SIZE_OF_STRUC_WINDOW
   214                              <1> 
   215                              <1> ; data member of menu box
   216 0000001A <res 00000002>      <1> 	.menu_header		resw 1	; 2nd level pointer to menu header string
   217 0000001C <res 00000001>      <1> 	.menu_header_attr	resb 1	; attribute of menu header (if have)
   218 0000001D <res 00000002>      <1> 	.menu_norm_attr		resw 1	; attribute of normal menu item, 
   219                              <1> 					; high = hotkey attr, low =normal attr
   220 0000001F <res 00000002>      <1> 	.menu_focus_attr	resw 1	; attribute of focused menu item
   221 00000021 <res 00000002>      <1> 	.menu_area_pos		resw 1	; position of menu area
   222 00000023 <res 00000002>      <1> 	.menu_area_size		resw 1	; size of menu area
   223 00000025 <res 00000001>      <1> 	.scrollbar_attr		resb 1	; attribute of scrollbar
   224                              <1> 
   225 00000026 <res 00000001>      <1> 	.items_num		resb 1	; number of menu items
   226 00000027 <res 00000001>      <1> 	.focus_item		resb 1	; focused item
   227 00000028 <res 00000001>      <1> 	.first_visible_item	resb 1	; first visible item
   228                              <1> 
   229 00000029 <res 00000002>      <1> 	.item_str_proc		resw 1	; proc of get a item's string
   230                              <1> 					; input cx = index, si -> menu
   231                              <1> 					; output si -> string
   232                              <1> 	.end_of_struc
   233                              <1> endstruc
   234                              <1> 
   235                              <1> struc struc_message_box
   236 00000000 <res 0000001A>      <1> 	.window			resb SIZE_OF_STRUC_WINDOW
   237 0000001A <res 00000002>      <1> 	.message		resw 1  ; pointer to the message
   238 0000001C <res 00000002>      <1> 	.message_attr		resw 1  ; attribute of the message
   239 0000001E <res 00000002>      <1> 	.pressed_key		resw 1  ; the key which user pressed
   240                              <1> 	.end_of_struc
   241                              <1> endstruc
   242                              <1> 
   243                              <1> struc struc_input_box
   244 00000000 <res 0000001A>      <1> 	.window			resb SIZE_OF_STRUC_WINDOW
   245 0000001A <res 00000002>      <1> 	.message		resw 1  ; pointer to the message
   246 0000001C <res 00000002>      <1> 	.message_attr		resw 1  ; attribute of the message
   247 0000001E <res 00000001>      <1> 	.input_attr		resb 1  ; attribute of input area
   248 0000001F <res 00000001>      <1> 	.input_type		resb 1	; input type, 0=normal, 1=passwd
   249 00000020 <res 00000002>      <1> 	.input_buf		resw 1	; pointer to input buffer
   250 00000022 <res 00000001>      <1> 	.input_buf_len		resb 1	; length of input buffer
   251 00000023 <res 00000001>      <1> 	.input_area_len		resb 1	; length of input area
   252 00000024 <res 00000002>      <1> 	.input_area_pos		resw 1	; position of input area (in window)
   253 00000026 <res 00000001>      <1> 	.input_startp		resb 1	; the first visible char in input buf
   254 00000027 <res 00000001>      <1> 	.input_curp		resb 1	; cursor position
   255 00000028 <res 00000001>      <1> 	.return_val		resb 1	; return val, 0 = success, 1 = cancel
   256                              <1> 	.end_of_struc
   257                              <1> endstruc
   258                              <1> 
   259                              <1> ; vi:nowrap
   260                                  %include "hd_io.h"
   261                              <1> ; hd_io.h
   262                              <1> ;
   263                              <1> ; header file for hd_io.asm
   264                              <1> ;
   265                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   266                              <1> ;
   267                              <1> 
   268                              <1> 
   269                              <1> %define DRVFLAG_DRIVEOK    0x0001       ;
   270                              <1> %define DRVFLAG_CHSVALID   0x0002       ; used in driveinfo structure
   271                              <1> %define DRVFLAG_REMOVABLE  0x0004       ; and bootrecord structure 
   272                              <1> %define DRVFLAG_EXTOK      0x0008       ;
   273                              <1> %define DRVFLAG_ISCDROM    0x0010       ; 0000,0000,0001,0000B
   274                              <1> 
   275                              <1> %define DRVFLAG_MASK       0x0015       ; 0000,0000,0001,0101B
   276                              <1> 
   277                              <1> %define INT13H_EXT_INSTCHECK 0x41
   278                              <1> %define INT13H_EXT_READ      0x42
   279                              <1> %define INT13H_EXT_WRITE     0x43
   280                              <1> %define INT13H_EXT_GETINFO   0x48
   281                              <1> %define INT13H_EXT_LOCK      0x45
   282                              <1> %define INT13H_RESET         0X00
   283                              <1> %define INT13H_READ          0X02
   284                              <1> %define INT13H_WRITE         0X03
   285                              <1> %define INT13H_GETINFO       0X08
   286                              <1> %define INT13H_GETTYPE       0x15
   287                              <1> 
   288                              <1> %define EXT_SUBSET_FIXED     0x01
   289                              <1> %define EXT_SUBSET_REMOVABLE 0x02
   290                              <1> %define EXT_SUBSET_EDD       0x04
   291                              <1> 
   292                              <1> %define DRV_TYPE_FIXED       0x03
   293                              <1> 
   294                              <1> %define MIN_HD_ID            0X80
   295                              <1> %define EXTPARAM_SIZE        0x42
   296                              <1> 
   297                              <1> %define MAX_CYLS             1023
   298                              <1> 
   299                              <1> ; Structure for calling int 13h ext Read / Write functions
   300                              <1> struc struc_int13ext
   301 00000000 <res 00000001>      <1>       .pack_size    : resb  1      ; ==16 size of struct Int13ExtData
   302 00000001 <res 00000001>      <1>       .reserved     : resb  1      ; ==0
   303 00000002 <res 00000001>      <1>       .blk_count    : resb  1      ; number of blocks to transfer <= 127
   304 00000003 <res 00000001>      <1>       .reserved1    : resb  1      ; ==0
   305 00000004 <res 00000002>      <1>       .buf_addr_off : resw  1      ; address of transfer buffer(segment:offset)
   306 00000006 <res 00000002>      <1>       .buf_addr_seg : resw  1
   307 00000008 <res 00000002>      <1>       .blk_num_low1 : resw  1      ; starting absolute block number
   308 0000000A <res 00000002>      <1>       .blk_num_low2 : resw  1
   309 0000000C <res 00000002>      <1>       .blk_num_high1: resw  1
   310 0000000E <res 00000002>      <1>       .blk_num_high2: resw  1
   311                              <1>       .end_of_struc
   312                              <1> endstruc
   313                              <1> 
   314                              <1> ; structure for calling int 13h ext get drive parameters functions (0x48)
   315                              <1> struc struc_extparam
   316 00000000 <res 00000002>      <1>       .pack_size         : resw  1
   317 00000002 <res 00000002>      <1>       .flags             : resw  1
   318 00000004 <res 00000004>      <1>       .cylinders         : resd  1
   319 00000008 <res 00000004>      <1>       .heads             : resd  1      ; <= 255
   320 0000000C <res 00000004>      <1>       .sectors           : resd  1      ; <= 63
   321 00000010 <res 00000008>      <1>       .total_sectors     : resd  2
   322 00000018 <res 00000002>      <1>       .bytes_per_sect    : resw  1
   323 0000001A <res 00000004>      <1>       .dpte_addr         : resd  1      ; device parameter table extension
   324 0000001E <res 00000002>      <1>       .dpi_key           : resw  1      ; 0xBEDD - Key, indicates presence
   325                              <1>                                         ; of Device Path Information
   326 00000020 <res 00000001>      <1>       .dpi_length        : resb  1      ; Length of Device Path Information 
   327                              <1>                                         ; including the key. = 36
   328 00000021 <res 00000001>      <1>       .reserved1         : resb  1
   329 00000022 <res 00000002>      <1>       .reserved2         : resw  1
   330 00000024 <res 00000004>      <1>       .host_bus_type     : resb  4      ; Host bus type, 4 bytes
   331                              <1>                                         ; PCI    PCI Local Bus
   332                              <1>                                         ; ISA    Legacy 16 bit fixed bus
   333 00000028 <res 00000008>      <1>       .interface_type    : resb  8      ; Interface type, 8 bytes
   334                              <1>                                         ; ATA   ATA/ATAPI-4 compliant device using ATA commands
   335                              <1>                                         ; ATAPI ATA/ATAPI-4 compliant device using ATAPI commands
   336                              <1>                                         ; SCSI  SCSI compliant device
   337                              <1>                                         ; USB   USB Mass Storage compliant device
   338                              <1>                                         ; 1394  1394 Mass Storage device
   339                              <1>                                         ; FIBRE Fibre Channel
   340 00000030 <res 00000008>      <1>       .interface_path    : resq  1
   341 00000038 <res 00000008>      <1>       .device_path       : resq  1
   342 00000040 <res 00000001>      <1>       .reserved3         : resb  1
   343 00000041 <res 00000001>      <1>       .checksum          : resb  1
   344                              <1>       .end_of_struc
   345                              <1> endstruc
   346                              <1> 
   347                              <1> ; Device parameter table extension
   348                              <1> %define SIZE_OF_DPTE struc_dpte.end_of_struc
   349                              <1> struc struc_dpte
   350 00000000 <res 00000002>      <1> 	.base_io	: resw 1
   351 00000002 <res 00000002>      <1> 	.ctrl_io	: resw 1
   352 00000004 <res 00000001>      <1> 	.flags		: resb 1
   353 00000005 <res 00000001>      <1> 	.vender_spec	: resb 1
   354 00000006 <res 00000001>      <1> 	.irq		: resb 1
   355 00000007 <res 00000001>      <1> 	.blk_count	: resb 1
   356 00000008 <res 00000001>      <1> 	.dma		: resb 1
   357 00000009 <res 00000001>      <1> 	.pio		: resb 1
   358 0000000A <res 00000002>      <1> 	.bios_spec	: resw 1
   359 0000000C <res 00000002>      <1> 	.reserved	: resw 1
   360 0000000E <res 00000001>      <1> 	.revision	: resb 1
   361 0000000F <res 00000001>      <1> 	.checksum	: resb 1
   362                              <1> 	.end_of_struc
   363                              <1> endstruc
   364                              <1> 
   365                              <1> ;Return cdrom boot catalog command packet
   366                              <1> %define SIZE_OF_CDBC_CMD struc_cdbc_cmd.end_of_struc
   367                              <1> struc struc_cdbc_cmd
   368 00000000 <res 00000001>      <1> 	.pack_size	: resb 1
   369 00000001 <res 00000001>      <1> 	.sector_count	: resb 1
   370 00000002 <res 00000002>      <1> 	.buf_addr_off	: resw 1
   371 00000004 <res 00000002>      <1> 	.buf_addr_seg	: resw 1
   372 00000006 <res 00000002>      <1> 	.begnning_sect	: resw 1
   373                              <1> 	.end_of_struc
   374                              <1> endstruc
   375                              <1> 
   376                              <1> ;CD Emulation Specification Packet
   377                              <1> %define SIZE_OF_CDEMU_SPEC struc_cdemu_spec.end_of_struc
   378                              <1> struc struc_cdemu_spec
   379 00000000 <res 00000001>      <1> 	.pack_size	: resb 1
   380 00000001 <res 00000001>      <1> 	.media_type	: resb 1
   381 00000002 <res 00000001>      <1> 	.emu_drvid	: resb 1
   382 00000003 <res 00000001>      <1> 	.controller_id	: resb 1
   383 00000004 <res 00000004>      <1> 	.image_lba	: resd 1
   384 00000008 <res 00000002>      <1> 	.device_spec	: resw 1
   385 0000000A <res 00000002>      <1> 	.user_bufseg	: resw 1
   386 0000000C <res 00000002>      <1> 	.load_seg	: resw 1
   387 0000000E <res 00000002>      <1> 	.sect_count	: resw 1
   388 00000010 <res 00000001>      <1> 	.cylinders	: resb 1
   389 00000011 <res 00000001>      <1> 	.sectors	: resb 1
   390 00000012 <res 00000001>      <1> 	.heads		: resb 1
   391                              <1> 	.end_of_struc
   392                              <1> endstruc
   393                              <1> 
   394                              <1> 
   395                              <1> ;Structure of boot catalog entry
   396                              <1> %define SIZE_OF_BOOT_CATALOG struc_boot_catalog.end_of_struc
   397                              <1> struc struc_boot_catalog
   398 00000000 <res 00000001>      <1> 	.indicator	: resb 1
   399 00000001 <res 00000001>      <1> 	.media_type	: resb 1
   400 00000002 <res 00000002>      <1> 	.load_seg	: resw 1
   401 00000004 <res 00000001>      <1> 	.sys_type	: resb 1
   402 00000005 <res 00000001>      <1> 	.reserved	: resb 1
   403 00000006 <res 00000002>      <1> 	.sect_count	: resw 1
   404 00000008 <res 00000004>      <1> 	.load_rba	: resd 1
   405 0000000C <res 00000014>      <1> 	.reserved1	: resb 20
   406                              <1> 	.end_of_struc
   407                              <1> endstruc
   408                              <1> 
   409                              <1> 
   410                              <1> ; structure for record drive informations
   411                              <1> struc struc_driveinfo
   412 00000000 <res 00000001>      <1>       .id                : resb  1
   413 00000001 <res 00000001>      <1>       .flags             : resb  1
   414 00000002 <res 00000002>      <1>       .cylinders         : resw  1
   415 00000004 <res 00000002>      <1>       .heads             : resw  1
   416 00000006 <res 00000002>      <1>       .sectors           : resw  1
   417 00000008 <res 00000002>      <1>       .sector_size       : resw  1
   418                              <1>       .end_of_struc
   419                              <1> endstruc
   420                              <1> 
   421                              <1> 
   422                              <1> 
   423                              <1> %define SIZE_OF_DRIVEINFO (struc_driveinfo.end_of_struc)
   424                              <1> %define SIZE_OF_EXTPARAM (struc_extparam.end_of_struc)
   425                              <1> %define SIZE_OF_INT13EXT (struc_int13ext.end_of_struc)
   426                              <1> 
   427                                  %include "knl.h"
   428                              <1> ; knl.h
   429                              <1> ;
   430                              <1> ; header file for knl.asm
   431                              <1> ;
   432                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   433                              <1> ;
   434                              <1> 
   435                              <1> %define MAX_NAME_LENGTH   15
   436                              <1> %define MAX_KEYSTROKES    13
   437                              <1> 
   438                              <1> %define FAT16_DRVID_OFF   0x24               ; drive id offset in fat16
   439                              <1> %define FAT16_HIDSEC_OFF  0x1C               ; hidden sector offset in fat16
   440                              <1> %define FAT16_EXTBRID_OFF 0x26               ; EXBRID offset in fat16
   441                              <1> 
   442                              <1> %define FAT32_DRVID_OFF   0x40
   443                              <1> %define FAT32_HIDSEC_OFF  0x1C
   444                              <1> %define FAT32_EXTBRID_OFF 0x42
   445                              <1> 
   446                              <1> %define EXTBRID           0x29               ; ext boot record id for fat
   447                              <1> 
   448                              <1> %define INFOFLAG_SCHEDULED  0x8000       ; 1000,0000,0000,0000B
   449                              <1> %define INFOFLAG_HAVEKEYS   0x4000       ; 0100,0000,0000,0000B
   450                              <1> %define INFOFLAG_SWAPDRVID  0x2000       ; 0010,0000,0000,0000B
   451                              <1> %define INFOFLAG_AUTOACTIVE 0x1000       ; 0001,0000,0000,0000B
   452                              <1> %define INFOFLAG_ACTIVE     0x0800       ; 0000,1000,0000,0000B
   453                              <1> %define INFOFLAG_AUTOHIDE   0x0400       ; 0000,0100,0000,0000B
   454                              <1> %define INFOFLAG_HIDDEN     0x0200       ; 0000,0010,0000,0000B
   455                              <1> %define INFOFLAG_LOGICAL    0x0100       ; 0000,0001,0000,0000B
   456                              <1> 
   457                              <1> %define INFOFLAG_ISDRIVER   0x0080       ; 0000,0000,1000,0000B
   458                              <1> %define INFOFLAG_ISSPECIAL  0X0008       ; 0000,0000,0000,1000B
   459                              <1> 
   460                              <1> %define SPREC_BOOTPREV      0
   461                              <1> %define SPREC_QUIT          1
   462                              <1> %define SPREC_POWEROFF      2
   463                              <1> %define SPREC_RESTART       3
   464                              <1> 
   465                              <1> %define NUM_OF_SPREC        4
   466                              <1> 
   467                              <1> %define NUM_OF_INFOFLAGS    9
   468                              <1> 
   469                              <1> ; structure for boot record, including removable drives and partitions
   470                              <1> struc struc_bootrecord
   471 00000000 <res 00000002>      <1>       .flags           : resw 1  ; type flags of this record, see INFOFLAG_x
   472 00000002 <res 00000001>      <1>       .drive_id        : resb 1  ; drive id = 0 to 255
   473                              <1>                                  ; partition id used in linux,
   474 00000003 <res 00000001>      <1>       .part_id         : resb 1  ; 1-4 for primary partitions,
   475                              <1>                                  ; > 5 for logical partitions,
   476                              <1>                                  ; 0 for driver or special bootrecord.
   477 00000004 <res 00000001>      <1>       .type            : resb 1  ; partition type, = 0 : not a partition
   478 00000005 <res 00000001>      <1>       .reserved        : resb 1  ;
   479 00000006 <res 00000004>      <1>       .father_abs_addr : resd 1  ; father's LBA address
   480 0000000A <res 00000004>      <1>       .abs_addr        : resd 1  ; partition's abs LBA address
   481 0000000E <res 00000004>      <1>       .password        : resd 1  ; password of this record
   482 00000012 <res 00000004>      <1>       .schedule_time   : resd 1  ; schedule time
   483 00000016 <res 00000010>      <1>       .name            : resb 16 ; name of this record, zero ending.
   484 00000026 <res 0000001A>      <1>       .keystrokes      : resw 13 ; keystrokes to be preloaded.
   485                              <1>       .end_of_struc
   486                              <1> endstruc
   487                              <1> 
   488                              <1> ; structure for partition record
   489                              <1> struc struc_partition
   490 00000000 <res 00000001>      <1>       .state           : resb 1  ; = 0 : inactive; = drive id : active
   491 00000001 <res 00000001>      <1>       .start_head      : resb 1  ; start chs address of the partition
   492 00000002 <res 00000002>      <1>       .start_cs        : resw 1  ;
   493 00000004 <res 00000001>      <1>       .type            : resb 1  ; equal to the same item in struc_bootrecord
   494 00000005 <res 00000001>      <1>       .end_head        : resb 1  ; end chs address of the partition
   495 00000006 <res 00000002>      <1>       .end_cs          : resw 1  ;
   496 00000008 <res 00000004>      <1>       .relative_addr   : resd 1  ; the relative address of this partition
   497 0000000C <res 00000004>      <1>       .sectors         : resd 1  ; the number of sectors of the partition
   498                              <1>       .end_of_struc
   499                              <1> endstruc
   500                              <1> 
   501                              <1> %define SIZE_OF_BOOTRECORD (struc_bootrecord.end_of_struc)
   502                              <1> %define SIZE_OF_PARTITION  (struc_partition.end_of_struc)
   503                              <1> 
   504                                  %include "sbm.h"
   505                              <1> ; sbm.h
   506                              <1> ;
   507                              <1> ; header file for main.asm and loader.asm
   508                              <1> ;
   509                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   510                              <1> ;
   511                              <1> 
   512                              <1> %define BR_GOOD_FLAG    0XAA55
   513                              <1> %define BR_FLAG_OFF     0x01FE
   514                              <1> %define PART_TBL_OFF    0x01BE
   515                              <1> 
   516                              <1> %define SECTOR_SIZE     0x200              ; size of a sector
   517                              <1> %define CDSECTOR_SIZE   0x800              ; size of a CD-ROM sector
   518                              <1> 
   519                              <1> %define MAX_SBM_SIZE    30000              ; the max size of Smart Boot Manager
   520                              <1> 
   521                              <1> %define SIZE_OF_MBR     446                ; the size of master boot record
   522                              <1> 
   523                              <1> %define MAX_RECORD_NUM      32
   524                              <1> %define MAX_FLOPPY_NUM      2
   525                              <1> %define MAX_PASSWORD_LENGTH 16
   526                              <1> 
   527                              <1> %define PART_OFF        0x0600             ; partition table offset
   528                              <1>                                            ; Smart Boot Manager kernel startup
   529                              <1> %define SBM_SAVE_NBLKS  5
   530                              <1> 
   531                              <1> %ifndef STRUC_SBMK_HEADER
   532                              <1> %define STRUC_SBMK_HEADER
   533                              <1> 
   534                              <1> struc struc_block_map
   535 00000000 <res 00000001>      <1>       .n_sects         resb 1
   536 00000001 <res 00000004>      <1>       .lba_addr        resd 1
   537                              <1>       .end_of_struc
   538                              <1> endstruc
   539                              <1> 
   540                              <1> %define SIZE_OF_STRUC_BLOCK_MAP struc_block_map.end_of_struc
   541                              <1> 
   542                              <1> struc struc_sbml_header
   543 00000000 <res 00000003>      <1>       .jmp_cmd     resb 3               ; cli and jmp command.
   544                              <1> 
   545                              <1> ;=================== For floppy FAT12 filesystem ======================
   546 00000003 <res 00000008>      <1>       .bsOEM       resb 8               ; OEM String
   547 0000000B <res 00000002>      <1>       .bsSectSize  resw 1               ; Bytes per sector
   548 0000000D <res 00000001>      <1>       .bsClustSize resb 1               ; Sectors per cluster
   549 0000000E <res 00000002>      <1>       .bsRessect   resw 1               ; # of reserved sectors
   550 00000010 <res 00000001>      <1>       .bsFatCnt    resb 1               ; # of fat copies
   551 00000011 <res 00000002>      <1>       .bsRootSize  resw 1               ; size of root directory
   552 00000013 <res 00000002>      <1>       .bsTotalSect resw 1               ; total # of sectors if < 32 meg
   553 00000015 <res 00000001>      <1>       .bsMedia     resb 1               ; Media Descriptor
   554 00000016 <res 00000002>      <1>       .bsFatSize   resw 1               ; Size of each FAT
   555 00000018 <res 00000002>      <1>       .bsTrackSect resw 1               ; Sectors per track
   556 0000001A <res 00000002>      <1>       .bsHeadCnt   resw 1               ; number of read-write heads
   557 0000001C <res 00000004>      <1>       .bsHidenSect resd 1               ; number of hidden sectors
   558 00000020 <res 00000004>      <1>       .bsHugeSect  resd 1               ; if bsTotalSect is 0 this value is
   559                              <1>                                         ; the number of sectors
   560 00000024 <res 00000001>      <1>       .bsBootDrv   resb 1               ; holds drive that the bs came from
   561 00000025 <res 00000001>      <1>       .bsReserv    resb 1               ; not used for anything
   562 00000026 <res 00000001>      <1>       .bsBootSign  resb 1               ; boot signature 29h
   563 00000027 <res 00000004>      <1>       .bsVolID     resd 1               ; Disk volume ID also used for temp
   564                              <1>                                         ; sector # / # sectors to load
   565 0000002B <res 0000000B>      <1>       .bsVoLabel   resb 11              ; Volume Label
   566 00000036 <res 00000008>      <1>       .bsFSType    resb 8               ; File System type
   567                              <1> 
   568 0000003E <res 00000002>      <1>       .reserved    resb 2
   569                              <1> ;====================================================================
   570                              <1> 
   571 00000040 <res 00000004>      <1>       .magic           resd 1           ; magic number.
   572 00000044 <res 00000002>      <1>       .version         resw 1           ; version.
   573                              <1> 
   574 00000046 <res 00000019>      <1>       .block_map       resb SIZE_OF_STRUC_BLOCK_MAP * 5
   575                              <1>                                         ; block map for SBMK, 5 blocks allowed
   576                              <1> endstruc
   577                              <1> 
   578                              <1> struc struc_sbmk_header
   579 00000000 <res 00000004>      <1>       .jmp_cmd         resd 1           ; jmp and nop command.
   580 00000004 <res 00000004>      <1>       .magic           resd 1           ; magic number.
   581 00000008 <res 00000002>      <1>       .version         resw 1           ; version.
   582 0000000A <res 00000002>      <1>       .total_size      resw 1           ; the size of kernel code.
   583 0000000C <res 00000002>      <1>       .compressed_addr resw 1           ; the address of compressed part
   584 0000000E <res 00000001>      <1>       .checksum        resb 1           ; checksum value.
   585 0000000F <res 00000001>      <1>       .sectors         resb 1           ;
   586 00000010 <res 00000001>      <1>       .drvid           resb 1           ;
   587 00000011 <res 00000019>      <1>       .block_map       resb SIZE_OF_STRUC_BLOCK_MAP * 5
   588                              <1>                                         ; block map for SBMK, 5 blocks allowed
   589 0000002A <res 00000002>      <1>       .reserved1       resw 1           ;
   590                              <1> 
   591 0000002C <res 00000001>      <1>       .flags           resb 1           ; kernel flags. 
   592 0000002D <res 00000001>      <1>       .delay_time      resb 1           ; delay time ( seconds )
   593 0000002E <res 00000001>      <1>       .direct_boot     resb 1           ; >= MAX_RECORD_NUM means no
   594                              <1>                                         ; direct boot.
   595 0000002F <res 00000001>      <1>       .default_boot    resb 1           ; the record number will
   596                              <1>                                         ; be booted after the
   597                              <1>                                         ; delay time is up or ESC
   598                              <1>                                         ; key is pressed.
   599 00000030 <res 00000004>      <1>       .root_password   resd 1           ; root password.
   600                              <1> 
   601 00000034 <res 00000002>      <1>       .bootmenu_style  resb 2
   602 00000036 <res 00000004>      <1>       .cdrom_ioports   resw 2
   603 0000003A <res 00000002>      <1>       .y2k_last_year   resw 1
   604 0000003C <res 00000001>      <1>       .y2k_last_month  resb 1
   605 0000003D <res 00000003>      <1>       .reserved2       resb 3
   606                              <1> endstruc
   607                              <1> 
   608                              <1> struc struc_sbmk_data
   609 00000000 <res 00000800>      <1>       .boot_records    resb MAX_RECORD_NUM * SIZE_OF_BOOTRECORD
   610 00000800 <res 000001BE>      <1>       .sbml_codes      resb SIZE_OF_MBR
   611 000009BE <res 00000200>      <1>       .previous_mbr    resb SECTOR_SIZE
   612                              <1> 
   613 00000BBE <res 00000002>      <1>       .boot_menu_pos   resw 1
   614 00000BC0 <res 00000002>      <1>       .main_menu_pos   resw 1
   615 00000BC2 <res 00000002>      <1>       .record_menu_pos resw 1
   616 00000BC4 <res 00000002>      <1>       .sys_menu_pos    resw 1
   617                              <1> endstruc
   618                              <1> 
   619                              <1> struc struc_sbmt_header
   620 00000000 <res 00000004>      <1>       .magic           resd 1           ; magic number.
   621 00000004 <res 00000002>      <1>       .reserved        resw 1           ;
   622 00000006 <res 00000006>      <1>       .lang            resb 6           ; language info.
   623 0000000C <res 00000002>      <1>       .version         resw 1           ; theme version.
   624 0000000E <res 00000002>      <1>       .size            resw 1           ; theme size.
   625                              <1> endstruc
   626                              <1> 
   627                              <1> 
   628                              <1> %endif
   629                              <1> 
   630                                  %include "main.h"
   631                              <1> ; main.h
   632                              <1> ;
   633                              <1> ; header file for main.asm main-cmds.asm main-utils.asm
   634                              <1> ;
   635                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   636                              <1> ;
   637                              <1> 
   638                              <1> ; some flags
   639                              <1> 
   640                              <1> %define KNLFLAG_FIRSTSCAN   0x01
   641                              <1> %define KNLFLAG_SECURITY    0x02
   642                              <1> %define KNLFLAG_NOINT13EXT  0x04
   643                              <1> %define KNLFLAG_NOCDROM     0x08
   644                              <1> 
   645                              <1> %define KNLFLAG_REMLAST     0x10
   646                              <1> %define KNLFLAG_ONLYPARTS   0X20
   647                              <1> %define KNLFLAG_COMPRESSED  0x80
   648                              <1> 
   649                              <1> %define BMSTYLE_FULL        0
   650                              <1> %define BMSTYLE_NOFLAGS     1
   651                              <1> %define BMSTYLE_NONUMBER    2
   652                              <1> %define BMSTYLE_NOTYPE      3
   653                              <1> 
   654                                  %include "evtcode.h"
   655                              <1> ;
   656                              <1> ; evtcode.h
   657                              <1> ;
   658                              <1> ; definiation of event codes
   659                              <1> ;
   660                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   661                              <1> ;
   662                              <1> 
   663                              <1> %define kbEsc                0x011B
   664                              <1> %define kbAltEsc             0x0100
   665                              <1> 
   666                              <1> %define kbF1                 0x3B00
   667                              <1> %define kbAltF1              0x6800
   668                              <1> %define kbCtrlF1             0x5E00
   669                              <1> %define kbShiftF1            0x5400
   670                              <1> 
   671                              <1> %define kbF2                 0x3C00
   672                              <1> %define kbAltF2              0x6900
   673                              <1> %define kbCtrlF2             0x5F00
   674                              <1> %define kbShiftF2            0x5500
   675                              <1> 
   676                              <1> %define kbF3                 0x3D00
   677                              <1> %define kbAltF3              0x6A00
   678                              <1> %define kbCtrlF3             0x6000
   679                              <1> %define kbShiftF3            0x5600
   680                              <1> 
   681                              <1> %define kbF4                 0x3E00
   682                              <1> %define kbAltF4              0x6B00
   683                              <1> %define kbCtrlF4             0x6100
   684                              <1> %define kbShiftF4            0x5700
   685                              <1> 
   686                              <1> %define kbF5                 0x3F00
   687                              <1> %define kbAltF5              0x6C00
   688                              <1> %define kbCtrlF5             0x6200
   689                              <1> %define kbShiftF5            0x5800
   690                              <1> 
   691                              <1> %define kbF6                 0x4000
   692                              <1> %define kbAltF6              0x6D00
   693                              <1> %define kbCtrlF6             0x6300
   694                              <1> %define kbShiftF6            0x5900
   695                              <1> 
   696                              <1> %define kbF7                 0x4100
   697                              <1> %define kbAltF7              0x6E00
   698                              <1> %define kbCtrlF7             0x6400
   699                              <1> %define kbShiftF7            0x5A00
   700                              <1> 
   701                              <1> %define kbF8                 0x4200
   702                              <1> %define kbAltF8              0x6F00
   703                              <1> %define kbCtrlF8             0x6500
   704                              <1> %define kbShiftF8            0x5B00
   705                              <1> 
   706                              <1> %define kbF9                 0x4300
   707                              <1> %define kbAltF9              0x7000
   708                              <1> %define kbCtrlF9             0x6600
   709                              <1> %define kbShiftF9            0x5C00
   710                              <1> 
   711                              <1> %define kbF10                0x4400
   712                              <1> %define kbAltF10             0x7100
   713                              <1> %define kbCtrlF10            0x6700
   714                              <1> %define kbShiftF10           0x5D00
   715                              <1> 
   716                              <1> %define kbF11                0x8500
   717                              <1> %define kbAltF11             0x8B00
   718                              <1> %define kbCtrlF11            0x8900
   719                              <1> %define kbShiftF11           0x8700
   720                              <1> 
   721                              <1> %define kbF12                0x8600
   722                              <1> %define kbAltF12             0x8C00
   723                              <1> %define kbCtrlF12            0x8A00
   724                              <1> %define kbShiftF12           0x8800
   725                              <1> 
   726                              <1> %define kbTab                0x0F09
   727                              <1> %define kbAltTab             0xA500
   728                              <1> %define kbCtrlTab            0x9400
   729                              <1> %define kbShiftTab           0x0F00
   730                              <1> 
   731                              <1> %define kbBack               0x0E08
   732                              <1> %define kbAltBack            0x0E00
   733                              <1> %define kbCtrlBack           0x0E7F
   734                              <1> 
   735                              <1> %define kbEnter              0x1C0D
   736                              <1> %define kbAltEnter           0x1C00
   737                              <1> %define kbCtrlEnter          0x1C0A
   738                              <1> %define kbEnhEnter           0xE00D
   739                              <1> %define kbEnhAltEnter        0xA600
   740                              <1> %define kbEnhCtrlEnter       0xE00A
   741                              <1> 
   742                              <1> %define kbSpace              0x3920
   743                              <1> 
   744                              <1> %define kbIns                0x5200
   745                              <1> %define kbEnhIns             0x52E0
   746                              <1> %define kbCtrlIns            0x9200
   747                              <1> %define kbEnhCtrlIns         0x92E0
   748                              <1> %define kbEnhAltIns          0xA200
   749                              <1> 
   750                              <1> %define kbHome               0x4700
   751                              <1> %define kbEnhHome            0x47E0
   752                              <1> %define kbCtrlHome           0x7700
   753                              <1> %define kbEnhCtrlHome        0x77E0
   754                              <1> %define kbEnhAltHome         0x9700
   755                              <1> 
   756                              <1> %define kbPgUp               0x4900
   757                              <1> %define kbEnhPgUp            0x49E0
   758                              <1> %define kbCtrlPgUp           0x8400
   759                              <1> %define kbEnhCtrlPgUp        0x84E0
   760                              <1> %define kbEnhAltPgUp         0x9900
   761                              <1> 
   762                              <1> %define kbEnd                0x4F00
   763                              <1> %define kbEnhEnd             0x4FE0
   764                              <1> %define kbCtrlEnd            0x7500
   765                              <1> %define kbEnhCtrlEnd         0x75E0
   766                              <1> %define kbEnhAltEnd          0x9F00
   767                              <1> 
   768                              <1> %define kbDel                0x5300
   769                              <1> %define kbEnhDel             0x53E0
   770                              <1> %define kbCtrlDel            0x9300
   771                              <1> %define kbEnhCtrlDel         0x93E0
   772                              <1> %define kbEnhAltDel          0xA300
   773                              <1> 
   774                              <1> %define kbPgDn               0x5100
   775                              <1> %define kbEnhPgDn            0x51E0
   776                              <1> %define kbCtrlPgDn           0x7600
   777                              <1> %define kbEnhCtrlPgDn        0x76E0
   778                              <1> %define kbEnhAltPgDn         0xA100
   779                              <1> 
   780                              <1> %define kbUp                 0x4800
   781                              <1> %define kbCtrlUp             0x8D00
   782                              <1> %define kbEnhUp              0x48E0
   783                              <1> %define kbEnhAltUp           0x9800
   784                              <1> %define kbEnhCtrlUp          0x8DE0
   785                              <1> 
   786                              <1> %define kbDown               0x5000
   787                              <1> %define kbCtrlDown           0x9100
   788                              <1> %define kbEnhDown            0x50E0
   789                              <1> %define kbEnhAltDown         0xA000
   790                              <1> %define kbEnhCtrlDown        0x91E0
   791                              <1> 
   792                              <1> %define kbLeft               0x4b00
   793                              <1> %define kbCtrlLeft           0x7300
   794                              <1> %define kbEnhLeft            0x4BE0
   795                              <1> %define kbEnhAltLeft         0x9B00
   796                              <1> %define kbEnhCtrlLeft        0x73E0
   797                              <1> 
   798                              <1> %define kbRight              0x4d00
   799                              <1> %define kbCtrlRight          0x7400
   800                              <1> %define kbEnhRight           0x4DE0
   801                              <1> %define kbEnhAltRight        0x9D00
   802                              <1> %define kbEnhCtrlRight       0x74E0
   803                              <1> 
   804                              <1> %define kbGraySlash          0xE02F
   805                              <1> %define kbGrayStar           0x372A
   806                              <1> %define kbGrayMinus          0x4A2D
   807                              <1> %define kbGrayPlus           0x4E2B
   808                              <1> 
   809                              <1> %define kbCtrlQ              0x1011
   810                              <1> %define kbCtrlW              0x1117
   811                              <1> %define kbCtrlE              0x1205
   812                              <1> %define kbCtrlR              0x1312
   813                              <1> %define kbCtrlT              0x1414
   814                              <1> %define kbCtrlY              0x1519
   815                              <1> %define kbCtrlU              0x1615
   816                              <1> %define kbCtrlI              0x1709
   817                              <1> %define kbCtrlO              0x180F
   818                              <1> %define kbCtrlP              0x1910
   819                              <1> %define kbCtrlA              0x1E01
   820                              <1> %define kbCtrlS              0x1f13
   821                              <1> %define kbCtrlD              0x2004
   822                              <1> %define kbCtrlF              0x2106
   823                              <1> %define kbCtrlG              0x2207
   824                              <1> %define kbCtrlH              0x2308
   825                              <1> %define kbCtrlJ              0x240A
   826                              <1> %define kbCtrlK              0x250b
   827                              <1> %define kbCtrlL              0x260C
   828                              <1> %define kbCtrlZ              0x2C1A
   829                              <1> %define kbCtrlX              0x2D18
   830                              <1> %define kbCtrlC              0x2E03
   831                              <1> %define kbCtrlV              0x2F16
   832                              <1> %define kbCtrlB              0x3002
   833                              <1> %define kbCtrlN              0x310E
   834                              <1> %define kbCtrlM              0x320D
   835                              <1> 
   836                              <1> %define kbLowerY             0x1579
   837                              <1> %define kbUpperY             0x1559
   838                              <1> 
   839                              <1> %define kbSlash              0x352F
   840                              <1> %define kbQuestion           0x353F
   841                              <1> 
   842                              <1> %define kbAltS               0x1F00
   843                              <1> %define kbAltR               0x1300
   844                              <1> 
   845                              <1> %define kbOne                0x0231
   846                              <1> 
   847                              <1> %define kbRightShiftMask     0x01
   848                              <1> %define kbLeftShiftMask      0x02
   849                              <1> %define kbShiftMask          0x03
   850                              <1> %define kbCtrlMask           0x04
   851                              <1> %define kbAltMask            0x08
   852                              <1> %define kbScrollMask         0x10
   853                              <1> %define kbNumLockMask        0x20
   854                              <1> %define kbCapsLockMask       0x40
   855                              <1> %define kbInsertMask         0x80
   856                              <1> 
   857                              <1> %define kbStateKeysMask   (kbScrollMask | kbNumLockMask | kbCapsLockMask | kbInsertMask)
   858                              <1> 
   859                              <1> %define EVTCODE_COMMAND		0xF0
   860                              <1> %define EVTCODE_KEYPRESS        0x01
   861                              <1> %define EVTCODE_KEYRELEASE      0x02
   862                              <1> %define EVTCODE_BROADCAST	0x04
   863                              <1> 
   864                              <1> ; Broadcast events
   865                              <1> %define EVENT_REDRAW_ROOT  ((EVTCODE_COMMAND | EVTCODE_BROADCAST) << 8 | 0x0001)
   866                              <1> %define EVENT_BOOT_DEFAULT ((EVTCODE_COMMAND | EVTCODE_BROADCAST) << 8 | 0x0002)
   867                              <1> 
   868                              <1> ; Normal events
   869                              <1> %define EVENT_TOGGLE_MENU  ((EVTCODE_COMMAND ) << 8 | 0x0001)
   870                              <1> 
   871                              <1> ; Key press event
   872                              <1> %define EVENT_RIGHTSHIFT_PRESS    ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbRightShiftMask)
   873                              <1> %define EVENT_LEFTSHIFT_PRESS     ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbLeftShiftMask)
   874                              <1> %define EVENT_SHIFT_PRESS         ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbShiftMask)
   875                              <1> %define EVENT_CTRL_PRESS          ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbCtrlMask)
   876                              <1> %define EVENT_ALT_PRESS           ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbAltMask)
   877                              <1> %define EVENT_SCROLL_ON           ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbScrollMask)
   878                              <1> %define EVENT_NUMLOCK_ON          ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbNumLockMask)
   879                              <1> %define EVENT_CAPSLOCK_ON         ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbCapsLockMask)
   880                              <1> %define EVENT_INSERT_ON           ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbInsertMask)
   881                              <1> 
   882                              <1> %define EVENT_RIGHTSHIFT_RELEASE  ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbRightShiftMask)
   883                              <1> %define EVENT_LEFTSHIFT_RELEASE   ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbLeftShiftMask)
   884                              <1> %define EVENT_SHIFT_RELEASE       ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbShiftMask)
   885                              <1> %define EVENT_CTRL_RELEASE        ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbCtrlMask)
   886                              <1> %define EVENT_ALT_RELEASE         ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbAltMask)
   887                              <1> %define EVENT_SCROLL_OFF          ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbScrollMask)
   888                              <1> %define EVENT_NUMLOCK_OFF         ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbNumLockMask)
   889                              <1> %define EVENT_CAPSLOCK_OFF        ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbCapsLockMask)
   890                              <1> %define EVENT_INSERT_OFF          ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbInsertMask)
   891                              <1> 
   892                              <1> 
   893                                  
   894                                  %define GOOD_RECORD_NUMBER    (main_windows_data.boot_menu + struc_menu_box.items_num)
   895                                  %define FOCUS_RECORD          (main_windows_data.boot_menu + struc_menu_box.focus_item)
   896                                  %define FIRST_VISIBLE_RECORD  (main_windows_data.boot_menu + struc_menu_box.first_visible_item)
   897                                  %define BOOT_MENU_AREA_HEIGHT (main_windows_data.boot_menu + struc_menu_box.menu_area_size + 1) 
   898                                  
   899                                  ; some data definitions
   900                                  
   901                                  %define disk_address_packet     7E00h
   902                                    %define dap                   disk_address_packet
   903                                  
   904                                    %define dap_Size      dap+00h
   905                                    %define dap_Reserved  dap+01h
   906                                    %define dap_Count     dap+02h
   907                                    %define dap_Buffer    dap+04h				; Segment:Offset value
   908                                    %define dap_LBA_low   dap+08h
   909                                    %define dap_LBA_high  dap+0Ch
   910                                  
   911                                  %define Boot_stuff              7E10h
   912                                    %define Boot_Drive            Boot_stuff+0
   913                                    %define Boot_Drive_Sector     Boot_stuff+4		; ToasterOS Standalone only
   914                                    %define Boot_Drive_Type       Boot_stuff+8		; ToasterOS Standalone only
   915                                    %define Boot_Drive_Buffer     Boot_stuff+12		; ToasterOS Standalone only
   916                                    %define Boot_File_Handle      Boot_stuff+51		; ToasterOS Standalone only
   917                                    %define Temp_RM               Boot_stuff+69		; ToasterOS Standalone Bootloader only
   918                                    %define Boot_Drive_Pointer    Boot_stuff+73		; ToasterOS Standalone only
   919                                    %define Debug_RM              Boot_stuff+77		; triple-byte
   920                                    %define Boot_Last_Boot_drive  Boot_stuff+78
   921                                  
   922                                  
   923                                  %ifdef EMULATE_PROG
   924                                  	org 0x100
   925                                  %else
   926                                  	org 0
   927                                  %endif
   928                                  
   929                                  	section .text
   930                                  
   931                                  
   932                                  %ifndef EMULATE_PROG
   933                                  
   934                                    ; include the load code for the low level Master Boot Record
   935                                    %include  'Bootloader.asm'
   936                              <1> ; ******************************************************
   937                              <1> 
   938                              <1> ;	Name: Bootloader
   939                              <1> ;	Autor: Peter Kleissner
   940                              <1> ;	Version: 1.02
   941                              <1> ;	Date: Wednesday, 12th April 2006
   942                              <1> ;	last Update: Monday, 17th April 2006
   943                              <1> 
   944                              <1> ;	For: ToasterOS BMS
   945                              <1> ;	         |
   946                              <1> ;                l-- MBR Version
   947                              <1> ;                l----- Standalone
   948                              <1> ;	            |         |
   949                              <1> ;                   |         l--- FAT16
   950                              <1> ;                   |         l--- FAT32
   951                              <1> ;                   l
   952                              <1> ;                   l-- ISO Version
   953                              <1> 
   954                              <1> ; ******************************************************
   955                              <1> 
   956                              <1> [bits 16]					; create a 16 Bit Code
   957                              <1> CPU 386						; Assemble instructions up to the 386 instruction set
   958                              <1> 
   959                              <1> 
   960                              <1> 
   961                              <1> ; disable Interrupts & clear the direction flag
   962 00000000 FA                  <1> cli
   963 00000001 FC                  <1> cld
   964                              <1> 
   965                              <1> 
   966                              <1> ; set the Stack to 0000h:Stack_Pointer
   967 00000002 6631DB              <1> xor ebx,ebx
   968 00000005 8ED3                <1> mov ss,bx
   969 00000007 BC007C              <1> mov sp,7C00h
   970                              <1> 
   971                              <1> ; set the Data Segments to 0000h (0000h:7C000h operating address)
   972 0000000A 31C0                <1> xor ax,ax
   973 0000000C 8ED8                <1> mov ds,ax
   974 0000000E 8EC0                <1> mov es,ax
   975 00000010 8EE0                <1> mov fs,ax
   976 00000012 8EE8                <1> mov gs,ax
   977                              <1> 
   978                              <1> 
   979                              <1> 
   980                              <1> ;(Table 00653)
   981                              <1> ;Values Bootstrap loader is called with (IBM BIOS):
   982                              <1> ;	CS:IP = 0000h:7C00h
   983                              <1> ;	DH = access
   984                              <1> ;	    bits 7-6,4-0: don't care
   985                              <1> ;	    bit 5: =0 device supported by INT 13
   986                              <1> ;	DL = boot drive
   987                              <1> ;	    00h first floppy
   988                              <1> ;	    80h first hard disk
   989                              <1> 
   990                              <1> 
   991                              <1> ; check if the drive is a floppy (since ToasterOS Server Business Edition pre deactivated)
   992 00000014 F6C280              <1> test dl,80h
   993 00000017 7446                <1> jz Drive_Error
   994                              <1> 
   995                              <1> ; check if the drive is not supported by Interrupt 13h
   996                              <1> ;test dh,00100000b
   997                              <1> ;jnz Drive_Error
   998                              <1> 
   999                              <1> ; store the boot drive
  1000 00000019 668916107E          <1> mov [Boot_Drive],edx
  1001                              <1> 
  1002                              <1> 
  1003                              <1> 
  1004                              <1> 
  1005                              <1> ; load the default for the disk address packet
  1006 0000001E C606007E10          <1> mov [dap_Size],byte 10h
  1007 00000023 881E017E            <1> mov [dap_Reserved],bl
  1008                              <1> 
  1009                              <1> ; [ds:si] = disk address packet
  1010 00000027 BE007E              <1> mov si,disk_address_packet
  1011                              <1> 
  1012                              <1> 
  1013                              <1> 
  1014                              <1> ; load the whole Master Boot Record into memory
  1015 0000002A C706027E3F00        <1> mov [dap_Count],word 63
  1016 00000030 66891E147E          <1> mov [Boot_Drive_Sector],ebx
  1017 00000035 66891E087E          <1> mov [dap_LBA_low],ebx
  1018 0000003A 66891E0C7E          <1> mov [dap_LBA_high],ebx
  1019 0000003F 66C706047E00800000  <1> mov [dap_Buffer],dword 00008000h
  1020                              <1> 
  1021                              <1> ; interrupt 13h, function 42h: Extended Read
  1022 00000048 B442                <1> mov ah,42h
  1023 0000004A CD13                <1> int 13h
  1024                              <1> 
  1025 0000004C 7216                <1> jc Read_Error
  1026                              <1> 
  1027                              <1> 
  1028                              <1> 
  1029                              <1> ; set the Data Segments to 8000h (0800h:0000h operating address)
  1030 0000004E B80008              <1> mov ax,0800h
  1031 00000051 8ED8                <1> mov ds,ax
  1032 00000053 8EC0                <1> mov es,ax
  1033                              <1> 
  1034                              <1> 
  1035                              <1> 
  1036                              <1> ; jump to the Smart Boot Manager Kernel
  1037 00000055 EA[320A]0008        <1> jmp 0800h:Smart_Boot_Manager_Kernel
  1038                              <1> 
  1039                              <1> 
  1040                              <1> 
  1041                              <1> 
  1042                              <1> 
  1043                              <1> 
  1044                              <1> Boot_Error:
  1045                              <1> 
  1046                              <1> ; if boot partition isn't found
  1047                              <1> 
  1048 0000005A BE[9E00]            <1> mov si,MSG_Boot_Error
  1049 0000005D EB08                <1> jmp Public_Error
  1050                              <1> 
  1051                              <1> 
  1052                              <1> 
  1053                              <1> Drive_Error:
  1054                              <1> 
  1055                              <1> ; if boot drive is a floppy
  1056                              <1> 
  1057 0000005F BE[8900]            <1> mov si,MSG_Drive_Error
  1058 00000062 EB03                <1> jmp Public_Error
  1059                              <1> 
  1060                              <1> 
  1061                              <1> 
  1062                              <1> Read_Error:
  1063                              <1> 
  1064                              <1> ; if there was an read error
  1065                              <1> 
  1066 00000064 BE[AB00]            <1> mov si,MSG_Read_Error
  1067                              <1> ;jmp Public_Error
  1068                              <1> 
  1069                              <1> 
  1070                              <1> 
  1071                              <1> 
  1072                              <1> ; the public error handler (esi = specific text)
  1073                              <1> Public_Error:
  1074 00000067 E80F00              <1> call Print_Text
  1075                              <1> 
  1076 0000006A BE[B800]            <1> mov si,MSG_Reboot
  1077 0000006D E80900              <1> call Print_Text
  1078                              <1> 
  1079                              <1> ; reboot after a key press
  1080 00000070 30E4                <1> xor ah,ah					; Function 00h: Get Keystroke
  1081 00000072 CD16                <1> int 16h
  1082                              <1> 
  1083                              <1> ; this code jumps to the BIOS reboot
  1084 00000074 EA                  <1> db 0EAh
  1085 00000075 0000                <1> dw 0000h
  1086 00000077 FFFF                <1> dw 0FFFFh
  1087                              <1> 
  1088                              <1> 
  1089                              <1> 
  1090                              <1> 
  1091                              <1> ; a function to write a text onto the screen (si = text)
  1092                              <1> Print_Text:
  1093                              <1> 
  1094                              <1> ;mov ax,cs
  1095                              <1> ;mov ds,ax					; ds = cs
  1096                              <1> 
  1097 00000079 BB0700              <1> mov bx,0007h					; Page Number = 0, Attribute = 07h
  1098 0000007C B40E                <1> mov ah,0Eh					; function 0Eh: Teletype Output
  1099                              <1> 
  1100 0000007E 2EAC                <1> cs lodsb					; load the first character
  1101                              <1> 
  1102                              <1> Next_Char:
  1103 00000080 CD10                <1> int 10h
  1104 00000082 2EAC                <1> cs lodsb					; al = next character
  1105 00000084 08C0                <1> or al,al					; last letter?
  1106 00000086 75F8                <1> jnz Next_Char					; if not print next letter
  1107                              <1> 
  1108 00000088 C3                  <1> ret
  1109                              <1> 
  1110                              <1> 
  1111                              <1> 
  1112                              <1> 
  1113                              <1> ; Error Messages
  1114 00000089 0A0D496E76616C6964- <1> MSG_Drive_Error		db	10, 13, "Invalid Boot-Drive", 0
  1115 00000092 20426F6F742D447269- <1>
  1116 0000009B 766500              <1>
  1117 0000009E 0A0D426F6F74204572- <1> MSG_Boot_Error		db	10, 13, "Boot Error", 0
  1118 000000A7 726F7200            <1>
  1119 000000AB 0A0D52656164204572- <1> MSG_Read_Error		db	10, 13, "Read Error", 0
  1120 000000B4 726F7200            <1>
  1121 000000B8 0A0D50726573732061- <1> MSG_Reboot		db	10, 13, "Press a key to restart", 0
  1122 000000C1 206B657920746F2072- <1>
  1123 000000CA 65737461727400      <1>
  1124                              <1> 
  1125 000000D1 51444F53            <1> Boot_Checksum	dd	"QDOS"
  1126                              <1> 
  1127                              <1> 
  1128                              <1> 
  1129                              <1> 
  1130                              <1> 
  1131                              <1> ; Error routines entry points
  1132                              <1> 
  1133 000000D5 00<rept>            <1> times 1AFh-($-$$) db 0
  1134                              <1> 
  1135 000001AF E9A8FE              <1> jmp Boot_Error
  1136 000001B2 E9AFFE              <1> jmp Read_Error
  1137                              <1> 
  1138                              <1> 
  1139                              <1> 
  1140                              <1> ; language descriptions [unused]
  1141                              <1> 
  1142                              <1> times 1B5h-($-$$) db 0
  1143                              <1> 
  1144 000001B5 00                  <1> Error_Message_1_length	db	0
  1145 000001B6 00                  <1> Error_Message_2_length	db	0
  1146 000001B7 00                  <1> Error_Message_3_length	db	0
  1147                              <1> 
  1148                              <1> 
  1149                              <1> 
  1150                              <1> ; Disk Signature
  1151                              <1> 
  1152                              <1> times 440-($-$$) db 0
  1153                              <1> 
  1154 000001B8 00000000            <1> disk_signature		dd	0
  1155 000001BC 0000                <1> 			dw	0
  1156                              <1> 
  1157                              <1> 
  1158                              <1> 
  1159                              <1> ; Partition Table
  1160                              <1> 
  1161                              <1> times 1BEh-($-$$) db 0
  1162                              <1> 
  1163                              <1> 
  1164                              <1> Partition_1
  1165 000001BE 80                  <1>     Partition_1_bootable	db	80h
  1166 000001BF 000101              <1>     Partition_1_Start_CHS	db	00h, 01h, 01h
  1167 000001C2 04                  <1>     Partition_1_Type		db	04h
  1168 000001C3 FFFEFF              <1>     Partition_1_End_CHS		db	0FFh, 0FEh, 0FFh
  1169 000001C6 3F000000            <1>     Partition_1_Start_LBA	dd	63
  1170 000001CA 814E0000            <1>     Partition_1_Sectors		dd	20160-63
  1171                              <1> Partition_2
  1172 000001CE 00                  <1>     Partition_2_bootable	db	0
  1173 000001CF 000000              <1>     Partition_2_Start_CHS	db	0, 0, 0
  1174 000001D2 07                  <1>     Partition_2_Type		db	7h
  1175 000001D3 000000              <1>     Partition_2_End_CHS		db	0, 0, 0
  1176 000001D6 C04E0000            <1>     Partition_2_Start_LBA	dd	20160
  1177 000001DA 00A00000            <1>     Partition_2_Sectors		dd	40960
  1178                              <1> Partition_3
  1179 000001DE 00                  <1>     Partition_3_bootable	db	0
  1180 000001DF 000000              <1>     Partition_3_Start_CHS	db	0, 0, 0
  1181 000001E2 00                  <1>     Partition_3_Type		db	0
  1182 000001E3 000000              <1>     Partition_3_End_CHS		db	0, 0, 0
  1183 000001E6 00000000            <1>     Partition_3_Start_LBA	dd	0
  1184 000001EA 00000000            <1>     Partition_3_Sectors		dd	0
  1185                              <1> Partition_4
  1186 000001EE 00                  <1>     Partition_4_bootable	db	0
  1187 000001EF 000000              <1>     Partition_4_Start_CHS	db	0, 0, 0
  1188 000001F2 00                  <1>     Partition_4_Type		db	0
  1189 000001F3 000000              <1>     Partition_4_End_CHS		db	0, 0, 0
  1190 000001F6 00000000            <1>     Partition_4_Start_LBA	dd	0
  1191 000001FA 00000000            <1>     Partition_4_Sectors		dd	0
  1192                              <1>     
  1193                              <1> 
  1194                              <1> times 510-($-$$) db 0
  1195                              <1> 
  1196 000001FE 55AA                <1> Boot_Signature	dw	0AA55h
  1197                                    
  1198                                  %else
  1199                                  
  1200                                    ; include DOS Source Code
  1201                                    
  1202                                  	; set Data Segments to CS / 0000h
  1203                                  	push cs
  1204                                  	pop ax
  1205                                  	mov ds,ax
  1206                                  	mov es,ax
  1207                                  	
  1208                                  	xor ax,ax
  1209                                  	mov fs,ax
  1210                                  	mov gs,ax
  1211                                  	
  1212                                  	jmp Smart_Boot_Manager_Kernel
  1213                                  
  1214                                  %endif
  1215                                  
  1216                                  
  1217                                  
  1218                                  ;=============================================================================
  1219                                  ;  data for the Smart Boot Manager
  1220                                  ;=============================================================================
  1221                                  
  1222 00000200 <res 00000019>            ADDR_SBMK_BLOCK_MAP              resb      SIZE_OF_STRUC_BLOCK_MAP * 5
  1223 00000219 01                        ADDR_SBMK_FLAGS                  db        KNLFLAG_FIRSTSCAN
  1224 0000021A 1E                        ADDR_SBMK_DELAY_TIME             db        30
  1225 0000021B FF                        ADDR_SBMK_DIRECT_BOOT            db        0FFh
  1226 0000021C FF                        ADDR_SBMK_DEFAULT_BOOT           db        0FFh
  1227 0000021D 00000000                  ADDR_SBMK_ROOT_PASSWORD          dd        0
  1228 00000221 0000                      ADDR_SBMK_BOOTMENU_STYLE         db        0, 0
  1229 00000223 00000000                  ADDR_SBMK_CDROM_IOPORTS          dw        0, 0
  1230 00000227 0000                      ADDR_SBMK_Y2K_LAST_YEAR          dw        0
  1231 00000229 00                        ADDR_SBMK_Y2K_LAST_MONTH         db        0
  1232 0000022A 0E06                      ADDR_SBMK_BOOT_MENU_POS          dw        0x060E
  1233 0000022C 0101                      ADDR_SBMK_MAIN_MENU_POS          dw        0x0101
  1234 0000022E 0202                      ADDR_SBMK_RECORD_MENU_POS        dw        0x0202
  1235 00000230 0303                      ADDR_SBMK_SYS_MENU_POS           dw        0x0303
  1236                                  
  1237                                  
  1238                                  ; some huge data
  1239                                  
  1240 00000232 <res 00000800>            ADDR_SBMK_BOOT_RECORDS           resb      MAX_RECORD_NUM * SIZE_OF_BOOTRECORD
  1241                                  
  1242                                  
  1243                                  
  1244                                  
  1245                                  
  1246                                  ;=============================================================================
  1247                                  ;  Smart Boot Manager Kernel
  1248                                  ;=============================================================================
  1249                                  
  1250                                  Smart_Boot_Manager_Kernel:
  1251                                  
  1252                                  
  1253                                  ; clear the temporary data area (overwrite it with zeros)
  1254 00000A32 6631C0                  xor eax,eax
  1255 00000A35 BF[871F]                mov di,Start_of_Temporary_Data_Area
  1256 00000A38 B94707                  mov cx,(End_of_Temporary_Data_Area - Start_of_Temporary_Data_Area) / 4
  1257                                  
  1258 00000A3B F366AB                  rep stosd
  1259                                  
  1260                                  
  1261                                    ; Install My Int 13H handle
  1262 00000A3E B301                      mov bl, 1
  1263 00000A40 E88A2D                    call install_myint13h
  1264                                  
  1265                                  ;Initializing the CD-ROMs..
  1266                                  %ifndef DISABLE_CDBOOT
  1267 00000A43 F606[1902]08            	test byte [ADDR_SBMK_FLAGS], KNLFLAG_NOCDROM
  1268 00000A48 750B                    	jnz .not_set_cdrom_ports
  1269 00000A4A 8B1E[2302]              	mov bx, [ADDR_SBMK_CDROM_IOPORTS]
  1270 00000A4E 8B0E[2502]              	mov cx, [ADDR_SBMK_CDROM_IOPORTS+2]
  1271 00000A52 E8E62D                  	call set_io_ports
  1272                                  .not_set_cdrom_ports:
  1273                                  %endif
  1274                                  
  1275                                  
  1276                                  %ifndef EMULATE_PROG
  1277                                  
  1278                                  ; Set "No Int 13h Extension" flag
  1279 00000A55 30C0                    	xor al, al
  1280 00000A57 F606[1902]04            	test byte [ADDR_SBMK_FLAGS], KNLFLAG_NOINT13EXT
  1281 00000A5C 7502                    	jnz .no_int13_ext
  1282 00000A5E FEC0                            inc al
  1283                                  .no_int13_ext:
  1284 00000A60 A2[CC37]                	mov [use_int13_ext], al
  1285                                  
  1286                                  ; Do some initialization
  1287 00000A63 E8F407                  	call main_init_theme		; initialize the theme
  1288 00000A66 E8D508                  	call main_init_video		; initialize the video mode.
  1289 00000A69 E8D218                          call window_initialize
  1290                                  
  1291                                  ; Check if needs scan boot records.
  1292 00000A6C F606[1902]01            	test byte [ADDR_SBMK_FLAGS], KNLFLAG_FIRSTSCAN
  1293 00000A71 740D                    	jz .no_first_scan
  1294                                  
  1295 00000A73 E80409                  	call main_init_boot_records	; if it's the first time
  1296                                  					; to run this program,
  1297                                  					; call the init_boot_records.
  1298 00000A76 E8D808                  	call main_init_good_record_list
  1299                                  
  1300 00000A79 8026[1902]FE            	and byte [ADDR_SBMK_FLAGS], ~ KNLFLAG_FIRSTSCAN
  1301 00000A7E EB3E                    	jmp short .show_menu
  1302                                  
  1303                                  .no_first_scan:
  1304                                  
  1305                                  %ifdef Y2K_BUGFIX
  1306                                  
  1307                                  ;Initialize the Y2K bug workaround stuff
  1308                                  
  1309                                  ;Y2K fix for some BIOS which don't boot with years after 1999, we need to set
  1310                                  ;the year based on the last time we booted the machine
  1311                                  	mov ah, 4
  1312                                  	int 0x1a				;(bcd) cx=year dh=month ...
  1313                                  	jc .y2k_donothing
  1314                                  	mov ax,[ADDR_SBMK_Y2K_LAST_YEAR]
  1315                                  	or ax,ax
  1316                                  	jz .y2k_donothing
  1317                                  	cmp [ADDR_SBMK_Y2K_LAST_MONTH],dh
  1318                                  	je .y2k_unbug
  1319                                  	jb .y2k_chmonth
  1320                                  	inc ax	;we enter here only if above wich means we don't have CF
  1321                                  	daa	;this is a must as daa uses CF and inc doesn't set it
  1322                                  	xchg ah,al
  1323                                  	adc al,0
  1324                                  	daa
  1325                                  	xchg ah,al
  1326                                  	mov [ADDR_SBMK_Y2K_LAST_YEAR],ax
  1327                                  .y2k_chmonth:
  1328                                  	mov [ADDR_SBMK_Y2K_LAST_MONTH],dh
  1329                                          inc byte [main_tmp.change_occured]
  1330                                  .y2k_unbug:
  1331                                  	mov cx,ax
  1332                                  	mov ah,5				; FIXME this can go one day
  1333                                  	int 0x1a				; back if the day ends
  1334                                  .y2k_donothing:
  1335                                  %endif
  1336                                  
  1337                                  ; go ahead!
  1338                                  
  1339                                  ; Initialize the good record list
  1340 00000A80 E8CE08                  	call main_init_good_record_list
  1341                                  
  1342                                  ; Initialize the keyboard shift var, and test if Ctrl is pressed down.
  1343 00000A83 B402                    	mov ah, 0x02			; test the keyboard status,
  1344 00000A85 E8001F                  	call bioskey			; if ctrl pressed then show
  1345 00000A88 A2[A032]                        mov [utils_tmp.kbd_last_shift], al ; Initialize the kbd stat reg.
  1346 00000A8B A804                    	test al, kbCtrlMask		; menu directly,
  1347 00000A8D 752F                    	jnz .show_menu			;
  1348                                  
  1349                                  ; Check direct boot, and schedule boot
  1350 00000A8F A0[1B02]                	mov al, [ADDR_SBMK_DIRECT_BOOT]	; check if need boot directly.
  1351 00000A92 3C20                    	cmp al, MAX_RECORD_NUM		;
  1352 00000A94 7213                    	jb .go_direct_boot
  1353                                  
  1354 00000A96 E8B20D                  	call main_do_schedule		; implement the schedule table.
  1355                                  
  1356 00000A99 803E[1A02]00            	cmp byte [ADDR_SBMK_DELAY_TIME], 0
  1357 00000A9E 751E                    	jnz .show_menu			; delay_time = 0, boot the
  1358                                  					; default record directly.
  1359 00000AA0 A0[1C02]                	mov al, [ADDR_SBMK_DEFAULT_BOOT]
  1360 00000AA3 3C20                    	cmp al, MAX_RECORD_NUM
  1361 00000AA5 720F                    	jb .go_def_boot
  1362 00000AA7 EB15                    	jmp short .show_menu
  1363                                          
  1364                                  .go_direct_boot:
  1365 00000AA9 C606[1B02]FF            	mov byte [ADDR_SBMK_DIRECT_BOOT], 0xff ; clear the direct boot sig.
  1366 00000AAE E8DC0D                  	call main_save_boot_manager
  1367 00000AB1 7208                    	jc .disk_error
  1368                                  
  1369 00000AB3 A2[1C02]                	mov [ADDR_SBMK_DEFAULT_BOOT], al
  1370                                  
  1371                                  .go_def_boot:
  1372 00000AB6 E8DE0C                  	call main_boot_default
  1373 00000AB9 EB03                    	jmp short .show_menu
  1374                                  
  1375                                  .disk_error:
  1376 00000ABB E8600C                  	call main_show_disk_error
  1377                                  
  1378                                  %else
  1379                                  ; For emulator program
  1380                                  	call main_init_video			; here is the code for
  1381                                  	call main_init_boot_records		; emulate program.
  1382                                          call main_init_good_record_list
  1383                                  	call main_do_schedule
  1384                                  %endif
  1385                                  
  1386                                  
  1387                                  .show_menu:
  1388 00000ABE E8EC07                  	call main_init_all_menus	; initialize the command menus
  1389                                  
  1390                                  ;Initialize  time count var
  1391 00000AC1 A0[1A02]                	mov al, [ADDR_SBMK_DELAY_TIME]
  1392 00000AC4 3CFF                    	cmp al, 255
  1393 00000AC6 7305                    	jae .not_count_time			; if delay_time = 255
  1394 00000AC8 A2[C232]                	mov [main_tmp.time_count], al		; then do not count time.
  1395 00000ACB 30C0                    	xor al, al
  1396                                  
  1397                                  .not_count_time:
  1398 00000ACD A2[C532]                	mov [main_tmp.key_pressed], al
  1399                                  
  1400                                  ; Set focus bar to the default record
  1401 00000AD0 8A1E[1C02]              	mov bl, [ADDR_SBMK_DEFAULT_BOOT]
  1402 00000AD4 8D36[A232]              	lea si, [main_tmp.good_record_list]
  1403 00000AD8 8A0E[3744]              	mov cl, [GOOD_RECORD_NUMBER]
  1404 00000ADC 30ED                    	xor ch, ch
  1405 00000ADE 30FF                    	xor bh, bh
  1406                                          
  1407                                  .loop_search_def:
  1408 00000AE0 AC                      	lodsb
  1409 00000AE1 38D8                    	cmp al, bl
  1410 00000AE3 7406                    	je .found_def
  1411 00000AE5 FEC7                    	inc bh
  1412 00000AE7 E2F7                    	loop .loop_search_def
  1413 00000AE9 EB14                    	jmp short .go_ahead
  1414                                  
  1415                                  .found_def:
  1416 00000AEB 883E[3844]              	mov [FOCUS_RECORD], bh
  1417 00000AEF 3A3E[3544]              	cmp bh, [BOOT_MENU_AREA_HEIGHT]
  1418 00000AF3 720A                    	jb .go_ahead
  1419 00000AF5 FEC7                    	inc bh
  1420 00000AF7 2A3E[3544]              	sub bh, [BOOT_MENU_AREA_HEIGHT]
  1421 00000AFB 883E[3944]              	mov [FIRST_VISIBLE_RECORD], bh
  1422                                  
  1423                                  ; Run the UI system
  1424                                  .go_ahead:
  1425 00000AFF BB[F743]                        mov bx, main_windows_data.root_window
  1426 00000B02 BE[1144]                        mov si, main_windows_data.boot_menu
  1427 00000B05 E86B18                          call window_execute
  1428                                  
  1429                                  .halt:
  1430 00000B08 EBFE                            jmp short .halt
  1431                                  
  1432                                  ;=============================================================================
  1433                                  ;include area
  1434                                  ;=============================================================================
  1435                                  
  1436                                  %include "main-cmds.asm"
  1437                              <1> ; asmsyntax=nasm
  1438                              <1> ;
  1439                              <1> ; main-cmds.asm
  1440                              <1> ;
  1441                              <1> ; command handles for main program
  1442                              <1> ;
  1443                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
  1444                              <1> ;
  1445                              <1> 
  1446                              <1> ;=============================================================================
  1447                              <1> ;main_show_help ---- show the help window
  1448                              <1> ;=============================================================================
  1449                              <1> main_show_help:
  1450 00000B0A 8B36[BC46]          <1>         mov si, [str_idx.help_content]
  1451 00000B0E 09F6                <1>         or si, si
  1452 00000B10 740D                <1>         jz .end
  1453                              <1>         
  1454 00000B12 A0[4546]            <1> 	mov al, [color.help_msg]
  1455 00000B15 8B1E[4346]          <1> 	mov bx, [color.help_win]
  1456 00000B19 BA[7A46]            <1>         mov dx, str_idx.help
  1457 00000B1C E80212              <1>         call message_box
  1458                              <1> .end:
  1459 00000B1F C3                  <1>         ret
  1460                              <1> 
  1461                              <1> ;=============================================================================
  1462                              <1> ;main_show_about ---- show the about window
  1463                              <1> ;=============================================================================
  1464                              <1> main_show_about:
  1465 00000B20 8B36[BA46]          <1>         mov si, [str_idx.about_content]
  1466 00000B24 09F6                <1>         or si, si
  1467 00000B26 740D                <1>         jz .end
  1468                              <1>         
  1469 00000B28 A0[4846]            <1>         mov al, [color.about_msg]
  1470 00000B2B 8B1E[4646]          <1>         mov bx, [color.about_win]
  1471 00000B2F BA[7646]            <1>         mov dx, str_idx.about
  1472 00000B32 E8EC11              <1>         call message_box
  1473                              <1> .end:
  1474 00000B35 C3                  <1>         ret
  1475                              <1> 
  1476                              <1> ;=============================================================================
  1477                              <1> ;main_show_main_menu ---- show the main command menu
  1478                              <1> ;=============================================================================
  1479                              <1> main_show_main_menu:
  1480 00000B36 BE[3C44]            <1> 	mov si, main_windows_data.main_menu
  1481 00000B39 E87118              <1> 	call window_run
  1482 00000B3C C3                  <1> 	ret
  1483                              <1> 
  1484                              <1> ;=============================================================================
  1485                              <1> ;main_show_record_menu ---- show the record command menu
  1486                              <1> ;=============================================================================
  1487                              <1> main_show_record_menu:
  1488 00000B3D BE[6744]            <1> 	mov si, main_windows_data.record_menu
  1489 00000B40 E86A18              <1> 	call window_run
  1490 00000B43 C3                  <1> 	ret
  1491                              <1> 
  1492                              <1> ;=============================================================================
  1493                              <1> ;main_show_sys_menu ---- show the sys command menu
  1494                              <1> ;=============================================================================
  1495                              <1> main_show_sys_menu:
  1496 00000B44 BE[9244]            <1> 	mov si, main_windows_data.sys_menu
  1497 00000B47 E86318              <1> 	call window_run
  1498 00000B4A C3                  <1> 	ret
  1499                              <1> 
  1500                              <1> ;=============================================================================
  1501                              <1> ;main_ask_save_changes ---- save boot manager to disk
  1502                              <1> ;=============================================================================
  1503                              <1> main_ask_save_changes:
  1504 00000B4B 803E[C832]00        <1>         cmp byte [main_tmp.change_occured], 0
  1505 00000B50 7418                <1>         je .no_changes
  1506                              <1>         
  1507 00000B52 8B36[C246]          <1>         mov si, [str_idx.ask_save_changes]
  1508 00000B56 E8F411              <1>         call info_box
  1509 00000B59 3D0D1C              <1>         cmp ax, kbEnter
  1510 00000B5C 740D                <1>         je main_save_changes
  1511 00000B5E 3A06[1346]          <1>         cmp al, [yes_key_lower]
  1512 00000B62 7407                <1>         je main_save_changes
  1513 00000B64 3A06[1446]          <1>         cmp al, [yes_key_upper]
  1514 00000B68 7401                <1>         je main_save_changes
  1515                              <1>         
  1516                              <1> .no_changes:
  1517 00000B6A C3                  <1>         ret
  1518                              <1> 
  1519                              <1> ;=============================================================================
  1520                              <1> ;main_save_changes ---- save boot manager to disk
  1521                              <1> ;=============================================================================
  1522                              <1> main_save_changes:
  1523                              <1> 
  1524                              <1> %ifndef EMULATE_PROG
  1525 00000B6B E81F0D              <1>         call main_save_boot_manager
  1526 00000B6E 720D                <1>         jc .disk_error
  1527                              <1> %endif
  1528                              <1> 
  1529 00000B70 C606[C832]00        <1>         mov byte [main_tmp.change_occured], 0       ; clear change signature.
  1530                              <1> 
  1531 00000B75 8B36[BE46]          <1>         mov si, [str_idx.changes_saved]
  1532 00000B79 E8D111              <1>         call info_box
  1533 00000B7C C3                  <1>         ret
  1534                              <1> 
  1535                              <1> .disk_error:
  1536 00000B7D E89E0B              <1>         call main_show_disk_error
  1537                              <1> .end:
  1538 00000B80 C3                  <1>         ret
  1539                              <1> 
  1540                              <1> %if 0
  1541                              <1> ;=============================================================================
  1542                              <1> ;main_change_video_mode ---- change the video mode
  1543                              <1> ;=============================================================================
  1544                              <1> main_change_video_mode:
  1545                              <1> 
  1546                              <1>         inc byte [change_occured]               ; some changes occured.
  1547                              <1> 
  1548                              <1>         mov al, [video_mode]
  1549                              <1>         not al
  1550                              <1>         mov [video_mode], al
  1551                              <1>         call init_video
  1552                              <1>         call draw_screen
  1553                              <1>         ret
  1554                              <1> %endif
  1555                              <1> 
  1556                              <1> ;=============================================================================
  1557                              <1> ;main_change_name ---- change the record name
  1558                              <1> ;=============================================================================
  1559                              <1> main_change_name:
  1560 00000B81 E8E80B              <1>         call main_get_focus_record_pointer
  1561                              <1> 
  1562 00000B84 89F7                <1> 	mov di, si
  1563 00000B86 83C716              <1> 	add di, struc_bootrecord.name
  1564                              <1> 
  1565 00000B89 0FB606[3C46]        <1>         movzx ax, byte [color.input_box_msg]
  1566 00000B8E 8B1E[3A46]          <1>         mov bx, [color.input_box]
  1567 00000B92 B90F0F              <1> 	mov cx, (MAX_NAME_LENGTH<<8)|MAX_NAME_LENGTH
  1568 00000B95 31D2                <1> 	xor dx, dx
  1569 00000B97 8B36[8246]          <1>         mov si, [str_idx.name]
  1570                              <1>         
  1571 00000B9B E87D13              <1>         call input_box
  1572 00000B9E 7204                <1>         jc .end
  1573 00000BA0 FE06[C832]          <1>         inc byte [main_tmp.change_occured]          ; some changes occured.
  1574                              <1> .end:
  1575 00000BA4 C3                  <1>         ret
  1576                              <1> 
  1577                              <1> 
  1578                              <1> ;=============================================================================
  1579                              <1> ;main_login_as_root ---- login as root
  1580                              <1> ;=============================================================================
  1581                              <1> main_login_as_root:
  1582 00000BA5 A0[C932]            <1> 	mov al, [main_tmp.root_login]
  1583 00000BA8 08C0                <1> 	or al, al
  1584 00000BAA 0F94C0              <1> 	setz al
  1585 00000BAD A2[C932]            <1> 	mov [main_tmp.root_login], al
  1586 00000BB0 C3                  <1>         ret
  1587                              <1> 
  1588                              <1> 
  1589                              <1> ;=============================================================================
  1590                              <1> ;main_change_security_mode ---- change the secure mode
  1591                              <1> ;=============================================================================
  1592                              <1> main_change_security_mode:
  1593 00000BB1 8036[1902]02        <1> 	xor byte [ADDR_SBMK_FLAGS], KNLFLAG_SECURITY
  1594 00000BB6 FE06[C832]          <1>         inc byte [main_tmp.change_occured]
  1595 00000BBA C3                  <1>         ret
  1596                              <1> 
  1597                              <1> ;=============================================================================
  1598                              <1> ;main_change_root_password ---- change the root password
  1599                              <1> ;=============================================================================
  1600                              <1> main_change_root_password:
  1601 00000BBB B110                <1> 	mov cl, MAX_PASSWORD_LENGTH
  1602 00000BBD 8B36[8446]          <1>         mov si, [str_idx.new_root_passwd]
  1603 00000BC1 E89A13              <1>         call input_password
  1604 00000BC4 7241                <1>         jc .end
  1605 00000BC6 89C3                <1>         mov bx, ax
  1606 00000BC8 89D1                <1>         mov cx, dx
  1607                              <1> 
  1608 00000BCA 53                  <1>         push bx
  1609 00000BCB 51                  <1>         push cx
  1610 00000BCC B110                <1> 	mov cl, MAX_PASSWORD_LENGTH
  1611 00000BCE 8B36[8C46]          <1>         mov si, [str_idx.retype_passwd]
  1612 00000BD2 E88913              <1>         call input_password
  1613 00000BD5 59                  <1>         pop cx
  1614 00000BD6 5B                  <1>         pop bx
  1615 00000BD7 722E                <1>         jc .end
  1616 00000BD9 39C3                <1>         cmp bx, ax
  1617 00000BDB 7523                <1>         jne .wrong
  1618 00000BDD 39D1                <1>         cmp cx, dx
  1619 00000BDF 751F                <1>         jne .wrong
  1620                              <1> 
  1621 00000BE1 891E[1D02]          <1>         mov [ADDR_SBMK_ROOT_PASSWORD], bx
  1622 00000BE5 890E[1F02]          <1>         mov [ADDR_SBMK_ROOT_PASSWORD+2], cx
  1623                              <1> 
  1624 00000BE9 C606[C932]00        <1>         mov byte [main_tmp.root_login], 0
  1625 00000BEE 8026[1902]FD        <1>         and byte [ADDR_SBMK_FLAGS], ~ KNLFLAG_SECURITY
  1626                              <1> 
  1627 00000BF3 8B36[C046]          <1>         mov si, [str_idx.passwd_changed]
  1628 00000BF7 E85311              <1>         call info_box
  1629                              <1> 
  1630 00000BFA FE06[C832]          <1>         inc byte [main_tmp.change_occured]         ; some changes occured.
  1631 00000BFE EB07                <1>         jmp short .end
  1632                              <1> .wrong:
  1633 00000C00 8B36[C446]          <1>         mov si, [str_idx.wrong_passwd]
  1634 00000C04 E83411              <1>         call error_box
  1635                              <1> .end:
  1636 00000C07 C3                  <1>         ret
  1637                              <1> 
  1638                              <1> ;=============================================================================
  1639                              <1> ;main_change_record_password ---- change the record password
  1640                              <1> ;=============================================================================
  1641                              <1> main_change_record_password:
  1642 00000C08 B110                <1> 	mov cl, MAX_PASSWORD_LENGTH
  1643 00000C0A 8B36[8846]          <1>         mov si, [str_idx.new_record_passwd]
  1644 00000C0E E84D13              <1>         call input_password
  1645 00000C11 7237                <1>         jc .end
  1646 00000C13 89C3                <1>         mov bx, ax
  1647 00000C15 89D1                <1>         mov cx, dx
  1648                              <1> 
  1649 00000C17 53                  <1>         push bx
  1650 00000C18 51                  <1>         push cx
  1651 00000C19 B110                <1> 	mov cl, MAX_PASSWORD_LENGTH
  1652 00000C1B 8B36[8C46]          <1>         mov si, [str_idx.retype_passwd]
  1653 00000C1F E83C13              <1>         call input_password
  1654 00000C22 59                  <1>         pop cx
  1655 00000C23 5B                  <1>         pop bx
  1656 00000C24 7224                <1>         jc .end
  1657 00000C26 39C3                <1>         cmp bx, ax
  1658 00000C28 7519                <1>         jne .wrong
  1659 00000C2A 39D1                <1>         cmp cx, dx
  1660 00000C2C 7515                <1>         jne .wrong
  1661                              <1> 
  1662 00000C2E E83B0B              <1>         call main_get_focus_record_pointer
  1663 00000C31 895C0E              <1>         mov [si+struc_bootrecord.password], bx
  1664 00000C34 894C10              <1>         mov [si+struc_bootrecord.password+2], cx
  1665                              <1>         
  1666 00000C37 8B36[C046]          <1>         mov si, [str_idx.passwd_changed]
  1667 00000C3B E80F11              <1>         call info_box
  1668                              <1> 
  1669 00000C3E FE06[C832]          <1>         inc byte [main_tmp.change_occured]         ; some changes occured.
  1670 00000C42 C3                  <1>         ret
  1671                              <1>         
  1672                              <1> .wrong:
  1673 00000C43 8B36[C446]          <1>         mov si, [str_idx.wrong_passwd]
  1674 00000C47 E8F110              <1>         call error_box
  1675                              <1> .end:
  1676 00000C4A C3                  <1>         ret
  1677                              <1> 
  1678                              <1> ;=============================================================================
  1679                              <1> ;main_set_default_record ---- set the default boot record
  1680                              <1> ;=============================================================================
  1681                              <1> main_set_default_record:
  1682 00000C4B 8A0E[3844]          <1> 	mov cl, [FOCUS_RECORD]
  1683 00000C4F E82D0B              <1> 	call main_get_record_pointer           ; get real record index
  1684                              <1> 
  1685 00000C52 880E[1C02]          <1>         mov [ADDR_SBMK_DEFAULT_BOOT], cl
  1686 00000C56 FE06[C832]          <1>         inc byte [main_tmp.change_occured]      ; some changes occured.
  1687 00000C5A C3                  <1>         ret
  1688                              <1> 
  1689                              <1> ;=============================================================================
  1690                              <1> ;main_unset_default_record ---- unset the default boot record
  1691                              <1> ;=============================================================================
  1692                              <1> main_unset_default_record:
  1693 00000C5B C606[1C02]FF        <1>         mov byte [ADDR_SBMK_DEFAULT_BOOT], 0xFF
  1694 00000C60 FE06[C832]          <1>         inc byte [main_tmp.change_occured]      ; some changes occured.
  1695 00000C64 C3                  <1>         ret
  1696                              <1>         
  1697                              <1> ;=============================================================================
  1698                              <1> ;main_toggle_auto_active ---- toggle the auto active switch
  1699                              <1> ;=============================================================================
  1700                              <1> main_toggle_auto_active:
  1701 00000C65 E8040B              <1>         call main_get_focus_record_pointer
  1702 00000C68 E8A727              <1>         call check_allow_act
  1703 00000C6B 720D                <1>         jc .end
  1704                              <1> 
  1705 00000C6D E80C0A              <1> 	call main_auth_record_action
  1706 00000C70 7208                <1> 	jc .end
  1707                              <1> 
  1708 00000C72 81340010            <1>         xor word [si + struc_bootrecord.flags], INFOFLAG_AUTOACTIVE
  1709 00000C76 FE06[C832]          <1>         inc byte [main_tmp.change_occured]        ; some changes occured.
  1710                              <1> .end:
  1711 00000C7A C3                  <1>         ret
  1712                              <1> 
  1713                              <1> ;=============================================================================
  1714                              <1> ;main_toggle_auto_hide ---- toggle the auto hide switch
  1715                              <1> ;=============================================================================
  1716                              <1> main_toggle_auto_hide:
  1717 00000C7B E8EE0A              <1>         call main_get_focus_record_pointer
  1718 00000C7E E86E27              <1>         call check_allow_hide
  1719 00000C81 720D                <1>         jc .end
  1720                              <1> 
  1721 00000C83 E8F609              <1> 	call main_auth_record_action
  1722 00000C86 7208                <1> 	jc .end
  1723                              <1>         
  1724 00000C88 81340004            <1>         xor word [si + struc_bootrecord.flags], INFOFLAG_AUTOHIDE
  1725 00000C8C FE06[C832]          <1>         inc byte [main_tmp.change_occured]        ; some changes occured.
  1726                              <1> 
  1727                              <1> .end:
  1728 00000C90 C3                  <1>         ret
  1729                              <1> 
  1730                              <1> ;=============================================================================
  1731                              <1> ;main_mark_active ---- mark the record active
  1732                              <1> ;=============================================================================
  1733                              <1> main_mark_active:
  1734 00000C91 E8D80A              <1>         call main_get_focus_record_pointer
  1735 00000C94 E87B27              <1>         call check_allow_act
  1736 00000C97 724F                <1>         jc .end
  1737                              <1> 
  1738 00000C99 E8E009              <1> 	call main_auth_record_action
  1739 00000C9C 724A                <1> 	jc .end
  1740                              <1> 
  1741 00000C9E 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]
  1742                              <1> 
  1743 00000CA1 56                  <1>         push si
  1744 00000CA2 8D36[A232]          <1>         lea si, [main_tmp.good_record_list]
  1745 00000CA6 8D3E[3202]          <1>         lea di, [ADDR_SBMK_BOOT_RECORDS]
  1746                              <1> 
  1747 00000CAA 0FB60E[3744]        <1>         movzx cx, byte [GOOD_RECORD_NUMBER]
  1748 00000CAF B640                <1>         mov dh, SIZE_OF_BOOTRECORD
  1749 00000CB1 6631DB              <1>         xor ebx, ebx
  1750 00000CB4 FC                  <1>         cld
  1751                              <1> .loop_clear_act:                                ; clear all active marks of
  1752 00000CB5 57                  <1>         push di                                 ; the boot records in same
  1753 00000CB6 AC                  <1>         lodsb                                   ; drive and father partition.
  1754 00000CB7 F6E6                <1>         mul dh
  1755 00000CB9 01C7                <1>         add di, ax
  1756 00000CBB 3A5502              <1>         cmp dl, [di + struc_bootrecord.drive_id]
  1757 00000CBE 750A                <1>         jne .do_nothing
  1758 00000CC0 66395D06            <1>         cmp [di + struc_bootrecord.father_abs_addr], ebx
  1759 00000CC4 7504                <1>         jne .do_nothing
  1760 00000CC6 8125FFF7            <1>         and word [di + struc_bootrecord.flags], ~ INFOFLAG_ACTIVE
  1761                              <1> .do_nothing:
  1762 00000CCA 5F                  <1>         pop di
  1763 00000CCB E2E8                <1>         loop .loop_clear_act
  1764                              <1> 
  1765 00000CCD 5E                  <1>         pop si
  1766                              <1>         
  1767 00000CCE E87A23              <1>         call mark_record_active
  1768 00000CD1 7206                <1>         jc .error                                ; mark active ok
  1769 00000CD3 E8600A              <1>         call main_recheck_same_records           ; recheck same records
  1770 00000CD6 7205                <1>         jc .disk_error
  1771 00000CD8 C3                  <1>         ret
  1772                              <1> 
  1773                              <1> .error:
  1774 00000CD9 09C0                <1>         or ax, ax
  1775 00000CDB 7404                <1>         jz .cannot_act
  1776                              <1> 
  1777                              <1> .disk_error:
  1778 00000CDD E83E0A              <1>         call main_show_disk_error
  1779 00000CE0 C3                  <1>         ret
  1780                              <1> 
  1781                              <1> .cannot_act:
  1782 00000CE1 8B36[C846]          <1>         mov si, [str_idx.mark_act_failed]
  1783 00000CE5 E85310              <1>         call error_box
  1784                              <1> .end:
  1785 00000CE8 C3                  <1>         ret
  1786                              <1> 
  1787                              <1> ;=============================================================================
  1788                              <1> ;main_toggle_hidden ---- toggle a record's hidden attribute
  1789                              <1> ;=============================================================================
  1790                              <1> main_toggle_hidden:
  1791 00000CE9 E8800A              <1>         call main_get_focus_record_pointer
  1792 00000CEC E80027              <1>         call check_allow_hide
  1793 00000CEF 721F                <1>         jc .end
  1794                              <1> 
  1795 00000CF1 E88809              <1> 	call main_auth_record_action
  1796 00000CF4 721A                <1> 	jc .end
  1797                              <1> 
  1798 00000CF6 E8BC23              <1>         call toggle_record_hidden
  1799 00000CF9 7206                <1>         jc .error                                 ; toggle hidden ok
  1800 00000CFB E8380A              <1>         call main_recheck_same_records            ; recheck same records
  1801 00000CFE 7205                <1>         jc .disk_error
  1802 00000D00 C3                  <1>         ret
  1803                              <1> 
  1804                              <1> .error:
  1805 00000D01 09C0                <1>         or ax, ax
  1806 00000D03 7404                <1>         jz .cannot_hide
  1807                              <1> 
  1808                              <1> .disk_error:
  1809 00000D05 E8160A              <1>         call main_show_disk_error
  1810 00000D08 C3                  <1>         ret
  1811                              <1> 
  1812                              <1> .cannot_hide:
  1813 00000D09 8B36[CA46]          <1>         mov si, [str_idx.toggle_hid_failed]
  1814 00000D0D E82B10              <1>         call error_box
  1815                              <1> .end:
  1816 00000D10 C3                  <1>         ret
  1817                              <1> 
  1818                              <1> ;=============================================================================
  1819                              <1> ;main_delete_record ---- delete a boot record
  1820                              <1> ;=============================================================================
  1821                              <1> main_delete_record:
  1822 00000D11 E8580A              <1>         call main_get_focus_record_pointer
  1823 00000D14 F7040002            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_HIDDEN
  1824 00000D18 7415                <1>         jz .del_it
  1825                              <1> 
  1826 00000D1A E89823              <1>         call toggle_record_hidden           ; unhide it first.
  1827 00000D1D 7310                <1>         jnc .del_it                         ; unhide ok, del it.
  1828                              <1> 
  1829 00000D1F 09C0                <1>         or ax, ax
  1830 00000D21 7404                <1>         jz .cannot_hide
  1831 00000D23 E8F809              <1>         call main_show_disk_error
  1832 00000D26 C3                  <1>         ret
  1833                              <1> 
  1834                              <1> .cannot_hide:
  1835 00000D27 8B36[CA46]          <1>         mov si, [str_idx.toggle_hid_failed]
  1836 00000D2B E80D10              <1>         call error_box
  1837 00000D2E C3                  <1>         ret
  1838                              <1> 
  1839                              <1> .del_it:
  1840 00000D2F 30C0                <1>         xor al, al
  1841 00000D31 89F7                <1>         mov di, si
  1842 00000D33 B94000              <1>         mov cx, SIZE_OF_BOOTRECORD
  1843 00000D36 FC                  <1>         cld
  1844 00000D37 F3AA                <1>         rep stosb
  1845                              <1> 
  1846 00000D39 FE06[C832]          <1>         inc byte [main_tmp.change_occured]               ; some changes occured.
  1847                              <1> 
  1848 00000D3D E81106              <1>         call main_init_good_record_list
  1849 00000D40 A0[3744]            <1>         mov al, [GOOD_RECORD_NUMBER]
  1850 00000D43 08C0                <1>         or al, al
  1851 00000D45 7415                <1>         jz .no_record
  1852                              <1>         
  1853 00000D47 FEC8                <1>         dec al
  1854 00000D49 3A06[3944]          <1>         cmp al, [FIRST_VISIBLE_RECORD]                  ; adjust the cursor
  1855 00000D4D 7303                <1>         jae .check_focus_pos                            ; and menu position.
  1856 00000D4F A2[3944]            <1>         mov [FIRST_VISIBLE_RECORD], al                  ;
  1857                              <1> .check_focus_pos:                                       ;
  1858 00000D52 3A06[3844]          <1>         cmp al, [FOCUS_RECORD]                          ;
  1859 00000D56 730A                <1>         jae .end                                        ;
  1860 00000D58 A2[3844]            <1>         mov [FOCUS_RECORD], al                          ;
  1861 00000D5B C3                  <1>         ret
  1862                              <1> 
  1863                              <1> .no_record:
  1864 00000D5C A2[3944]            <1>         mov [FIRST_VISIBLE_RECORD], al
  1865 00000D5F A2[3844]            <1>         mov [FOCUS_RECORD], al
  1866                              <1> .end:
  1867 00000D62 C3                  <1>         ret
  1868                              <1>         
  1869                              <1> 
  1870                              <1> ;=============================================================================
  1871                              <1> ;main_rescan_all_drives ---- research all drives for boot records
  1872                              <1> ;=============================================================================
  1873                              <1> main_rescan_all_records:
  1874 00000D63 8026[1902]DF        <1>         and byte [ADDR_SBMK_FLAGS], ~ KNLFLAG_ONLYPARTS
  1875 00000D68 EB05                <1>         jmp short main_rescan_records
  1876                              <1>         
  1877                              <1> ;=============================================================================
  1878                              <1> ;rescan_fixed_drives ---- research fixed drives for boot records
  1879                              <1> ;=============================================================================
  1880                              <1> main_rescan_all_partitions:
  1881 00000D6A 800E[1902]20        <1>         or byte [ADDR_SBMK_FLAGS], KNLFLAG_ONLYPARTS
  1882                              <1>         
  1883                              <1> ;=============================================================================
  1884                              <1> ;rescan_records ---- research all drives for boot records
  1885                              <1> ;=============================================================================
  1886                              <1> main_rescan_records:
  1887 00000D6F 0FB60E[3744]        <1>         movzx cx, byte [GOOD_RECORD_NUMBER]
  1888 00000D74 08C9                <1>         or cl, cl                               ; if no good record then go to
  1889 00000D76 7423                <1>         jz .init_it                             ; init directly.
  1890                              <1>         
  1891 00000D78 8D3E[A232]          <1>         lea di, [main_tmp.good_record_list]
  1892 00000D7C B240                <1>         mov dl, SIZE_OF_BOOTRECORD
  1893                              <1> 
  1894                              <1> ; unhide all hidden partition first.
  1895                              <1> .loop_unhide:
  1896 00000D7E 8A05                <1>         mov al, [di]
  1897 00000D80 47                  <1>         inc di
  1898 00000D81 F6E2                <1>         mul dl
  1899 00000D83 8D36[3202]          <1>         lea si, [ADDR_SBMK_BOOT_RECORDS]
  1900 00000D87 01C6                <1>         add si, ax
  1901 00000D89 F7040002            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_HIDDEN
  1902 00000D8D 740A                <1>         jz .not_hidden
  1903 00000D8F E82323              <1>         call toggle_record_hidden
  1904 00000D92 721A                <1>         jc .hidden_error
  1905 00000D94 E89F09              <1>         call main_recheck_same_records
  1906 00000D97 7219                <1>         jc .disk_error
  1907                              <1> 
  1908                              <1> .not_hidden:
  1909 00000D99 E2E3                <1>         loop .loop_unhide
  1910                              <1>         
  1911                              <1> .init_it:
  1912 00000D9B FE06[C832]          <1>         inc byte [main_tmp.change_occured]               ; some changes occured.
  1913                              <1> 
  1914 00000D9F E8D805              <1>         call main_init_boot_records
  1915 00000DA2 E8AC05              <1>         call main_init_good_record_list
  1916                              <1> 
  1917 00000DA5 30C0                <1>         xor al, al
  1918 00000DA7 A2[3844]            <1>         mov byte [FOCUS_RECORD], al
  1919 00000DAA A2[3944]            <1>         mov byte [FIRST_VISIBLE_RECORD], al
  1920 00000DAD C3                  <1> 	ret
  1921                              <1>         
  1922                              <1> .hidden_error:
  1923 00000DAE 09C0                <1>         or ax, ax
  1924 00000DB0 7404                <1>         jz .cannot_hide
  1925                              <1> 
  1926                              <1> .disk_error:
  1927 00000DB2 E86909              <1>         call main_show_disk_error
  1928 00000DB5 C3                  <1>         ret
  1929                              <1> 
  1930                              <1> .cannot_hide:
  1931 00000DB6 8B36[CA46]          <1>         mov si, [str_idx.toggle_hid_failed]
  1932 00000DBA E87E0F              <1>         call error_box
  1933                              <1> .end:
  1934 00000DBD C3                  <1>         ret
  1935                              <1> 
  1936                              <1> ;=============================================================================
  1937                              <1> ;main_set_delay_time ---- set the delay time
  1938                              <1> ;=============================================================================
  1939                              <1> main_set_delay_time:
  1940 00000DBE 0FB606[3C46]        <1>         movzx ax, [color.input_box_msg]
  1941 00000DC3 8B1E[3A46]          <1>         mov bx, [color.input_box]
  1942 00000DC7 B90303              <1>         mov cx, 0x0303
  1943 00000DCA 31D2                <1> 	xor dx, dx
  1944 00000DCC 8B36[8046]          <1>         mov si, [str_idx.delay_time]
  1945 00000DD0 BF[513B]            <1>         mov di, main_tmp.dialog_buf
  1946 00000DD3 8835                <1>         mov [di], dh
  1947 00000DD5 E84311              <1>         call input_box
  1948 00000DD8 7213                <1>         jc .end
  1949                              <1> 
  1950 00000DDA 89FE                <1>         mov si, di
  1951 00000DDC E85119              <1>         call atoi
  1952                              <1> 
  1953 00000DDF 3DFF00              <1>         cmp ax, 255
  1954 00000DE2 7602                <1>         jbe .set_time
  1955 00000DE4 B0FF                <1>         mov al, 255
  1956                              <1> .set_time:
  1957 00000DE6 A2[1A02]            <1>         mov [ADDR_SBMK_DELAY_TIME], al
  1958 00000DE9 FE06[C832]          <1>         inc byte [main_tmp.change_occured]         ; some changes occured.
  1959                              <1> .end:
  1960 00000DED C3                  <1>         ret
  1961                              <1> 
  1962                              <1> ;=============================================================================
  1963                              <1> ;main_boot_it ---- boot the selected record
  1964                              <1> ;=============================================================================
  1965                              <1> main_boot_it:
  1966 00000DEE 8A0E[3844]          <1> 	mov cl, [FOCUS_RECORD]
  1967 00000DF2 E88A09              <1> 	call main_get_record_pointer
  1968 00000DF5 88C8                <1> 	mov al, cl
  1969 00000DF7 50                  <1> 	push ax
  1970                              <1> 
  1971 00000DF8 F606[1902]10        <1>         test byte [ADDR_SBMK_FLAGS], KNLFLAG_REMLAST
  1972 00000DFD 740D                <1>         jz .no_remlast
  1973                              <1> 
  1974 00000DFF A2[1C02]            <1>         mov [ADDR_SBMK_DEFAULT_BOOT], al
  1975                              <1>        
  1976 00000E02 E8880A              <1>         call main_save_boot_manager
  1977 00000E05 7308                <1>         jnc .cont_boot
  1978                              <1> 
  1979 00000E07 E81409              <1>         call main_show_disk_error
  1980 00000E0A EB03                <1>         jmp short .cont_boot
  1981                              <1> 
  1982                              <1> .no_remlast:
  1983 00000E0C E83CFD              <1>         call main_ask_save_changes              ; ask if save the changes.
  1984                              <1> 
  1985                              <1> .cont_boot:
  1986 00000E0F E8CC0A              <1>         call main_hide_auto_hides
  1987 00000E12 58                  <1>         pop ax
  1988 00000E13 7203                <1>         jc .end
  1989                              <1>  
  1990 00000E15 E8A309              <1>         call main_do_boot_record
  1991                              <1> .end:
  1992 00000E18 C3                  <1>         ret
  1993                              <1> 
  1994                              <1> ;=============================================================================
  1995                              <1> ;main_return_to_bios ---- give control back to BIOS
  1996                              <1> ;=============================================================================
  1997                              <1> main_return_to_bios:
  1998 00000E19 E82FFD              <1>         call main_ask_save_changes              ; ask if save the changes.
  1999                              <1>         
  2000 00000E1C E8EE0D              <1>         call reset_video_mode
  2001                              <1>         
  2002 00000E1F E8EF29              <1> 	call uninstall_myint13h
  2003                              <1> %ifdef EMULATE_PROG
  2004                              <1>         mov ax, 0x4c00                          ; exit to dos
  2005                              <1>         int 0x21                                ;
  2006                              <1> %else
  2007 00000E22 CD18                <1>         int 0x18                                ; return to BIOS
  2008                              <1> %endif
  2009                              <1> 
  2010                              <1> .end:
  2011 00000E24 C3                  <1>         ret
  2012                              <1> 
  2013                              <1> 
  2014                              <1> ;=============================================================================
  2015                              <1> ; Duplicate the boot record
  2016                              <1> ;=============================================================================
  2017                              <1> main_dup_record:
  2018 00000E25 B84000              <1>         mov ax, SIZE_OF_BOOTRECORD
  2019 00000E28 B92000              <1>         mov cx, MAX_RECORD_NUM
  2020 00000E2B BF[3202]            <1>         mov di, ADDR_SBMK_BOOT_RECORDS
  2021                              <1> 
  2022                              <1> .search_empty_slot:
  2023 00000E2E F60509              <1>         test byte [di + struc_bootrecord.flags], DRVFLAG_DRIVEOK | INFOFLAG_ISSPECIAL
  2024 00000E31 7405                <1>         jz .found_empty
  2025 00000E33 01C7                <1>         add di, ax
  2026 00000E35 E2F7                <1>         loop .search_empty_slot
  2027 00000E37 C3                  <1> 	ret
  2028                              <1> 
  2029                              <1> .found_empty:
  2030                              <1> 
  2031 00000E38 FE06[C832]          <1>         inc byte [main_tmp.change_occured]
  2032                              <1> 
  2033 00000E3C E82D09              <1>         call main_get_focus_record_pointer
  2034 00000E3F 89C1                <1>         mov cx, ax
  2035 00000E41 FC                  <1>         cld
  2036 00000E42 F3A4                <1>         rep movsb
  2037 00000E44 E80A05              <1>         call main_init_good_record_list
  2038 00000E47 C3                  <1>         ret
  2039                              <1> 
  2040                              <1> 
  2041                              <1> 
  2042                              <1> ;=============================================================================
  2043                              <1> ; move the boot record down 
  2044                              <1> ;=============================================================================
  2045                              <1> main_move_record_down:
  2046 00000E48 0FB61E[3844]        <1>         movzx bx, byte [FOCUS_RECORD]
  2047 00000E4D 8A87[A232]          <1>         mov al, [main_tmp.good_record_list + bx]
  2048 00000E51 FEC3                <1>         inc bl
  2049 00000E53 8AA7[A232]          <1>         mov ah, [main_tmp.good_record_list + bx]
  2050 00000E57 3A1E[3744]          <1>         cmp bl, [GOOD_RECORD_NUMBER]
  2051 00000E5B 731C                <1>         jae .end
  2052                              <1> 
  2053 00000E5D 3A06[1C02]          <1>         cmp al, [ADDR_SBMK_DEFAULT_BOOT]
  2054 00000E61 7506                <1>         jne .chknext
  2055 00000E63 8826[1C02]          <1>         mov [ADDR_SBMK_DEFAULT_BOOT], ah
  2056 00000E67 EB09                <1>         jmp short .swap_record
  2057                              <1> .chknext:
  2058 00000E69 3A26[1C02]          <1>         cmp ah, [ADDR_SBMK_DEFAULT_BOOT]
  2059 00000E6D 7503                <1>         jne .swap_record
  2060 00000E6F A2[1C02]            <1>         mov [ADDR_SBMK_DEFAULT_BOOT], al
  2061                              <1> 
  2062                              <1> .swap_record:
  2063 00000E72 881E[3844]          <1>         mov [FOCUS_RECORD], bl
  2064 00000E76 E83100              <1>         call main_swap_records
  2065                              <1> .end:
  2066 00000E79 C3                  <1>         ret
  2067                              <1> 
  2068                              <1> ;=============================================================================
  2069                              <1> ; move the boot record up
  2070                              <1> ;=============================================================================
  2071                              <1> main_move_record_up:
  2072 00000E7A 0FB61E[3844]        <1>         movzx bx, byte [FOCUS_RECORD]
  2073 00000E7F 08DB                <1>         or bl, bl
  2074 00000E81 7426                <1>         jz .end
  2075 00000E83 8A87[A232]          <1>         mov al, [main_tmp.good_record_list + bx]
  2076 00000E87 FECB                <1>         dec bl
  2077 00000E89 8AA7[A232]          <1>         mov ah, [main_tmp.good_record_list + bx]
  2078                              <1> 
  2079 00000E8D 3A06[1C02]          <1>         cmp al, [ADDR_SBMK_DEFAULT_BOOT]
  2080 00000E91 7506                <1>         jne .chknext
  2081 00000E93 8826[1C02]          <1>         mov [ADDR_SBMK_DEFAULT_BOOT], ah
  2082 00000E97 EB09                <1>         jmp short .swap_record
  2083                              <1> .chknext:
  2084 00000E99 3A26[1C02]          <1>         cmp ah, [ADDR_SBMK_DEFAULT_BOOT]
  2085 00000E9D 7503                <1>         jne .swap_record
  2086 00000E9F A2[1C02]            <1>         mov [ADDR_SBMK_DEFAULT_BOOT], al
  2087                              <1> 
  2088                              <1> .swap_record:
  2089                              <1>   
  2090 00000EA2 E80500              <1>         call main_swap_records
  2091 00000EA5 881E[3844]          <1>         mov [FOCUS_RECORD],bl
  2092                              <1> .end:
  2093 00000EA9 C3                  <1>         ret
  2094                              <1> 
  2095                              <1> ;=============================================================================
  2096                              <1> ; swap current and previous boot record
  2097                              <1> ;=============================================================================
  2098                              <1> main_swap_records:
  2099 00000EAA 60                  <1> 	pusha
  2100 00000EAB FE0E[3844]          <1>         dec byte [FOCUS_RECORD]
  2101 00000EAF E8BA08              <1>         call main_get_focus_record_pointer
  2102 00000EB2 89F7                <1> 	mov di, si
  2103 00000EB4 FE06[3844]          <1> 	inc byte [FOCUS_RECORD]
  2104 00000EB8 E8B108              <1> 	call main_get_focus_record_pointer	; si -> current  di -> prev
  2105                              <1> 
  2106 00000EBB B94000              <1>         mov cx, SIZE_OF_BOOTRECORD
  2107                              <1> 
  2108                              <1> .loop_swap:
  2109 00000EBE 8A04                <1> 	mov al, [si]
  2110 00000EC0 8A1D                <1> 	mov bl, [di]
  2111 00000EC2 881C                <1> 	mov [si], bl
  2112 00000EC4 8805                <1> 	mov [di], al
  2113 00000EC6 46                  <1> 	inc si
  2114 00000EC7 47                  <1> 	inc di
  2115 00000EC8 E2F4                <1> 	loop .loop_swap
  2116 00000ECA 61                  <1> 	popa
  2117                              <1> 
  2118 00000ECB C3                  <1>         ret
  2119                              <1> 
  2120                              <1> ;=============================================================================
  2121                              <1> ;main_toggle_swapid ---- toggle the swap driver id flag 
  2122                              <1> ;=============================================================================
  2123                              <1> main_toggle_swapid:
  2124 00000ECC E89D08              <1> 	call main_get_focus_record_pointer
  2125 00000ECF 09F6                <1> 	or si, si
  2126 00000ED1 7416                <1> 	jz .end
  2127 00000ED3 F7041800            <1> 	test word [si + struc_bootrecord.flags], DRVFLAG_ISCDROM | INFOFLAG_ISSPECIAL
  2128 00000ED7 7510                <1> 	jnz .end
  2129                              <1> 
  2130 00000ED9 E8A007              <1> 	call main_auth_record_action
  2131 00000EDC 720B                <1> 	jc .end
  2132                              <1> 
  2133 00000EDE 81340020            <1>         xor word [si + struc_bootrecord.flags], INFOFLAG_SWAPDRVID
  2134 00000EE2 E8C41D              <1>         call check_bootrecord
  2135 00000EE5 FE06[C832]          <1>         inc byte [main_tmp.change_occured]
  2136                              <1> .end:
  2137 00000EE9 C3                  <1>         ret
  2138                              <1> 
  2139                              <1> ;=============================================================================
  2140                              <1> ;main_toggle_schedule ---- toggle the schedule of the bootrecord
  2141                              <1> ;=============================================================================
  2142                              <1> main_toggle_schedule:
  2143 00000EEA E87F08              <1>         call main_get_focus_record_pointer
  2144 00000EED F7040080            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_SCHEDULED
  2145 00000EF1 7512                <1>         jnz .clear_schedule
  2146                              <1> 
  2147 00000EF3 56                  <1>         push si
  2148 00000EF4 E81700              <1>         call main_input_schedule_time
  2149 00000EF7 5E                  <1>         pop si
  2150 00000EF8 7213                <1>         jc .end
  2151                              <1> 
  2152 00000EFA 09D2                <1>         or dx, dx
  2153 00000EFC 7502                <1>         jnz .set_schedule
  2154 00000EFE F7D2                <1>         not dx
  2155                              <1> 
  2156                              <1> .set_schedule:
  2157 00000F00 E81E22              <1>         call set_record_schedule
  2158 00000F03 EB04                <1>         jmp short .end_ok
  2159                              <1> 
  2160                              <1> .clear_schedule:
  2161 00000F05 8124FF7F            <1>         and word [si + struc_bootrecord.flags], ~INFOFLAG_SCHEDULED
  2162                              <1> 
  2163                              <1> .end_ok:
  2164 00000F09 FE06[C832]          <1>         inc byte [main_tmp.change_occured]
  2165                              <1> .end:
  2166 00000F0D C3                  <1>         ret
  2167                              <1> 
  2168                              <1> ;=============================================================================
  2169                              <1> ;main_input_schedule_time ---- input the schedule time
  2170                              <1> ;input:
  2171                              <1> ;      none
  2172                              <1> ;output:
  2173                              <1> ;      cf = 0 success, 
  2174                              <1> ;           ax = begin time (in minutes)
  2175                              <1> ;           bx = end time (in minutes)
  2176                              <1> ;           dx = days info (bit 0 to bit 7 indicate Mon to Sun)
  2177                              <1> ;      cf = 1 cancel
  2178                              <1> ;=============================================================================
  2179                              <1> main_input_schedule_time:
  2180 00000F0E 60                  <1>         pusha
  2181                              <1> 
  2182 00000F0F 31C0                <1>         xor ax, ax
  2183 00000F11 B90400              <1> 	mov cx, 4
  2184 00000F14 FC                  <1> 	cld
  2185 00000F15 BF[CC32]            <1> 	mov di, main_tmp.schedule_begin
  2186 00000F18 F3AB                <1> 	rep stosw
  2187                              <1> 
  2188 00000F1A A0[3C46]            <1>         mov al, [color.input_box_msg]
  2189 00000F1D 8B1E[3A46]          <1>         mov bx, [color.input_box_frame]
  2190 00000F21 B91313              <1>         mov cx, 0x1313
  2191 00000F24 31D2                <1> 	xor dx, dx
  2192 00000F26 8B36[8E46]          <1>         mov si, [str_idx.input_schedule]
  2193 00000F2A BF[513B]            <1>         mov di, main_tmp.dialog_buf
  2194 00000F2D C60500              <1> 	mov byte [di], 0 
  2195                              <1>         
  2196 00000F30 E8E80F              <1>         call input_box
  2197 00000F33 724C                <1>         jc .exit
  2198                              <1> 
  2199                              <1> ;convert begin time
  2200 00000F35 89FE                <1>         mov si, di
  2201 00000F37 E85400              <1> 	call main_str_to_schtime
  2202 00000F3A 723D                <1> 	jc .invalid_input
  2203 00000F3C A3[CC32]            <1>         mov [main_tmp.schedule_begin], ax
  2204                              <1> 
  2205                              <1> ;convert end time
  2206 00000F3F AC                  <1> 	lodsb
  2207 00000F40 3C2D                <1> 	cmp al,'-'
  2208 00000F42 7535                <1> 	jne .invalid_input
  2209                              <1> 
  2210 00000F44 E84700              <1> 	call main_str_to_schtime
  2211 00000F47 7230                <1> 	jc .invalid_input
  2212 00000F49 A3[CE32]            <1>         mov [main_tmp.schedule_end], ax
  2213                              <1> 
  2214                              <1> ;convert day info
  2215 00000F4C AC                  <1>         lodsb
  2216 00000F4D 08C0                <1>         or al, al
  2217 00000F4F 7425                <1>         jz .end
  2218                              <1> 
  2219 00000F51 3C3B                <1>         cmp al, ';'
  2220 00000F53 7524                <1>         jne .invalid_input
  2221                              <1> 
  2222 00000F55 B90700              <1>         mov cx, 7
  2223 00000F58 31D2                <1>         xor dx, dx
  2224                              <1> 
  2225                              <1> .loop_get_days:
  2226 00000F5A AC                  <1>         lodsb
  2227 00000F5B 08C0                <1>         or al, al
  2228 00000F5D 7413                <1>         jz .end_get_days
  2229 00000F5F 2C30                <1>         sub al, '0'
  2230 00000F61 3C07                <1>         cmp al, 7
  2231 00000F63 7314                <1>         jae .invalid_input
  2232 00000F65 BB0100              <1>         mov bx, 1
  2233 00000F68 51                  <1>         push cx
  2234 00000F69 88C1                <1>         mov cl, al
  2235 00000F6B D3E3                <1>         shl bx, cl
  2236 00000F6D 59                  <1>         pop cx
  2237 00000F6E 09DA                <1>         or dx, bx
  2238 00000F70 E2E8                <1>         loop .loop_get_days
  2239                              <1> 
  2240                              <1> .end_get_days:
  2241 00000F72 8916[D032]          <1>         mov [main_tmp.schedule_day], dx
  2242                              <1> 
  2243                              <1> .end:
  2244 00000F76 F8                  <1> 	clc
  2245 00000F77 EB08                <1> 	jmp short .exit
  2246                              <1> 
  2247                              <1> .invalid_input:
  2248 00000F79 8B36[D046]          <1>         mov si, [str_idx.invalid_schedule]
  2249 00000F7D E8BB0D              <1>         call error_box
  2250 00000F80 F9                  <1>         stc
  2251                              <1> .exit:
  2252 00000F81 61                  <1>         popa
  2253 00000F82 A1[CC32]            <1>         mov ax, [main_tmp.schedule_begin]
  2254 00000F85 8B1E[CE32]          <1>         mov bx, [main_tmp.schedule_end]
  2255 00000F89 8B16[D032]          <1>         mov dx, [main_tmp.schedule_day]
  2256 00000F8D C3                  <1>         ret
  2257                              <1> 
  2258                              <1> 
  2259                              <1> ;=============================================================================
  2260                              <1> ;input ds:si -> string
  2261                              <1> ;output cf =0 ok, ax = time in minutes
  2262                              <1> ;       cf =1 fail
  2263                              <1> ;=============================================================================
  2264                              <1> main_str_to_schtime:
  2265 00000F8E 31DB                <1> 	xor bx, bx
  2266 00000F90 31C9                <1> 	xor cx, cx
  2267                              <1> 
  2268 00000F92 E89B17              <1>         call atoi
  2269 00000F95 3C18                <1>         cmp al, 24                          ; hh must be less than 24
  2270 00000F97 771D                <1>         ja .fail
  2271                              <1> 
  2272 00000F99 88C3                <1>         mov bl, al
  2273 00000F9B AC                  <1> 	lodsb
  2274 00000F9C 3C3A                <1> 	cmp al, ':'
  2275 00000F9E 7516                <1> 	jne .fail
  2276                              <1> 
  2277 00000FA0 E88D17              <1>         call atoi
  2278 00000FA3 3C3C                <1>         cmp al, 60                          ; mm must be less than 60
  2279 00000FA5 730F                <1>         jae .fail
  2280 00000FA7 88C1                <1>         mov cl, al
  2281                              <1> 
  2282 00000FA9 B03C                <1>         mov al, 60
  2283 00000FAB F6E3                <1>         mul bl
  2284 00000FAD 01C8                <1>         add ax, cx
  2285 00000FAF 3DA005              <1>         cmp ax, 24*60                       ; begin time must be no more than
  2286 00000FB2 7702                <1>         ja .fail                            ; 24*60 minutes
  2287 00000FB4 F8                  <1> 	clc
  2288 00000FB5 C3                  <1> 	ret
  2289                              <1> .fail:
  2290 00000FB6 F9                  <1> 	stc
  2291 00000FB7 C3                  <1> 	ret
  2292                              <1> 
  2293                              <1> ;=============================================================================
  2294                              <1> ;main_toggle_keystrokes ---- toggle the keystrokes switch of the bootrecord
  2295                              <1> ;=============================================================================
  2296                              <1> main_toggle_keystrokes:
  2297                              <1> 
  2298 00000FB8 E8B107              <1>         call main_get_focus_record_pointer
  2299 00000FBB F7040040            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_HAVEKEYS
  2300 00000FBF 7406                <1>         jz .input_keys
  2301                              <1> 
  2302 00000FC1 8124FFBF            <1>         and word [si + struc_bootrecord.flags], ~INFOFLAG_HAVEKEYS
  2303 00000FC5 EB12                <1>         jmp short .end_ok
  2304                              <1> 
  2305                              <1> .input_keys:
  2306 00000FC7 8D7C26              <1>         lea di, [si + struc_bootrecord.keystrokes]
  2307 00000FCA B10D                <1>         mov cl, MAX_KEYSTROKES
  2308 00000FCC 56                  <1>         push si
  2309 00000FCD E89800              <1>         call main_input_keystrokes
  2310 00000FD0 5E                  <1>         pop si
  2311 00000FD1 08ED                <1>         or ch, ch
  2312 00000FD3 7408                <1>         jz .end
  2313                              <1> 
  2314 00000FD5 810C0040            <1>         or word [si + struc_bootrecord.flags], INFOFLAG_HAVEKEYS
  2315                              <1> 
  2316                              <1> .end_ok:
  2317 00000FD9 FE06[C832]          <1>         inc byte [main_tmp.change_occured]
  2318                              <1> .end:
  2319 00000FDD C3                  <1>         ret
  2320                              <1> 
  2321                              <1> ;=============================================================================
  2322                              <1> ; main_ikbox_event_handle ---- event handle for Input keystroke box
  2323                              <1> ;=============================================================================
  2324                              <1> main_ikbox_event_handle:
  2325 00000FDE 80FCF0              <1>         cmp ah, EVTCODE_COMMAND
  2326 00000FE1 720A                <1>         jb .normal_key
  2327                              <1> 
  2328 00000FE3 3D10F2              <1>         cmp ax, EVENT_SCROLL_OFF
  2329 00000FE6 7524                <1>         jne .end
  2330                              <1> 
  2331 00000FE8 E81A14              <1>         call window_close
  2332 00000FEB F8                  <1>         clc
  2333 00000FEC C3                  <1>         ret
  2334                              <1> 
  2335                              <1> .normal_key:
  2336 00000FED FC                  <1>         cld
  2337 00000FEE 8B3E[D232]          <1>         mov di, [main_tmp.keystroke_ptr]
  2338 00000FF2 0FB60E[D432]        <1>         movzx cx, [main_tmp.keystroke_num]
  2339 00000FF7 3A0E[D532]          <1>         cmp cl, [main_tmp.keystroke_max]
  2340 00000FFB 730F                <1>         jae .end
  2341                              <1> 
  2342 00000FFD D1E1                <1>         shl cx, 1
  2343 00000FFF 01CF                <1>         add di, cx
  2344 00001001 AB                  <1>         stosw
  2345                              <1> 
  2346 00001002 FE06[D432]          <1>         inc byte [main_tmp.keystroke_num]
  2347 00001006 E80500              <1>         call main_ikbox_prepare
  2348 00001009 E8EF11              <1>         call window_draw_body
  2349                              <1> .end:
  2350 0000100C F8                  <1>         clc
  2351 0000100D C3                  <1>         ret
  2352                              <1> 
  2353                              <1> ;=============================================================================
  2354                              <1> ;main_ikbox_prepare
  2355                              <1> ;input:
  2356                              <1> ;       ds:si -> the message_box struc
  2357                              <1> ;=============================================================================
  2358                              <1> main_ikbox_prepare:
  2359 0000100E C74416[DE0F]        <1>         mov word [si + struc_window.event_handle],main_ikbox_event_handle
  2360 00001013 31C0                <1> 	xor ax, ax
  2361                              <1> 
  2362 00001015 56                  <1>         push si
  2363 00001016 8B7C1A              <1>         mov di, [si + struc_message_box.message]
  2364 00001019 8B36[9046]          <1>         mov si, [str_idx.input_keystrokes]
  2365 0000101D 57                  <1>         push di
  2366                              <1> 
  2367 0000101E E88C17              <1>         call strcpy
  2368 00001021 57                  <1>         push di
  2369 00001022 0FB60E[D432]        <1>         movzx cx, byte [main_tmp.keystroke_num]
  2370                              <1> 
  2371 00001027 D1E1                <1>         shl cx,1
  2372 00001029 8B3E[D232]          <1>         mov di, [main_tmp.keystroke_ptr]
  2373 0000102D 01CF                <1>         add di, cx
  2374 0000102F 09C9                <1> 	or cx, cx
  2375 00001031 7403                <1> 	jz .first_prepare
  2376 00001033 83EF02              <1> 	sub di, 2
  2377                              <1> .first_prepare:
  2378 00001036 8B05                <1> 	mov ax, [di]
  2379                              <1> 
  2380 00001038 5F                  <1>         pop di
  2381 00001039 51                  <1>         push cx
  2382                              <1>         
  2383 0000103A B104                <1>         mov cl, 4
  2384 0000103C E89E17              <1>         call htoa                          ; fill in the key code string
  2385 0000103F 83C704              <1>         add di, 4
  2386                              <1> 
  2387 00001042 8B36[9246]          <1>         mov si, [str_idx.key_count]
  2388 00001046 E86417              <1>         call strcpy
  2389                              <1> 
  2390 00001049 59                  <1>         pop cx
  2391 0000104A D1E9                <1>         shr cx, 1
  2392 0000104C 0FB6C1              <1>         movzx ax, cl
  2393 0000104F B102                <1>         mov cl, 2
  2394 00001051 E8B216              <1>         call itoa                          ; fill in the key cound string
  2395                              <1> 
  2396 00001054 5E                  <1>         pop si
  2397                              <1> 
  2398 00001055 E8C817              <1> 	call count_lines
  2399                              <1> 
  2400 00001058 020E[1D46]          <1> 	add cl, [size.box_width]
  2401 0000105C 022E[1E46]          <1> 	add ch, [size.box_height]
  2402                              <1> 
  2403 00001060 5E                  <1>         pop si
  2404 00001061 894C08              <1> 	mov [si + struc_window.win_size], cx
  2405 00001064 E80F14              <1> 	call window_center_window
  2406 00001067 C3                  <1>         ret
  2407                              <1> 
  2408                              <1> 
  2409                              <1> ;=============================================================================
  2410                              <1> ;main_input_keystrokes ---- input a set of key strokes
  2411                              <1> ;input:
  2412                              <1> ;      cl = max key strokes number
  2413                              <1> ;      es:di -> the buffer
  2414                              <1> ;output:
  2415                              <1> ;      es:di -> the buffer filled by key strokes
  2416                              <1> ;      ch = number of key strokes that inputed
  2417                              <1> ;=============================================================================
  2418                              <1> main_input_keystrokes:
  2419 00001068 57                  <1>         push di
  2420                              <1> 
  2421 00001069 31C0                <1>         xor ax, ax
  2422 0000106B 893E[D232]          <1>         mov [main_tmp.keystroke_ptr], di
  2423 0000106F 880E[D532]          <1>         mov [main_tmp.keystroke_max], cl
  2424 00001073 A2[D432]            <1>         mov [main_tmp.keystroke_num], al
  2425 00001076 8905                <1>         mov [di], ax
  2426                              <1> 
  2427 00001078 A0[3C46]            <1>         mov al, [color.input_box_msg]
  2428 0000107B 8B1E[3A46]          <1>         mov bx, [color.input_box]
  2429 0000107F BA[7E46]            <1>         mov dx, str_idx.input
  2430 00001082 BE[513B]            <1>         mov si, main_tmp.dialog_buf
  2431 00001085 BF[D632]            <1>         mov di, main_tmp.ikbox
  2432                              <1> 
  2433 00001088 8824                <1>         mov [si], ah
  2434 0000108A E85A0C              <1>         call msgbox_prepare
  2435 0000108D 89FE                <1>         mov si, di
  2436 0000108F E87CFF              <1>         call main_ikbox_prepare
  2437                              <1> 
  2438 00001092 E8DB0B              <1>         call turnon_scrolllock
  2439 00001095 E81513              <1>         call window_run
  2440 00001098 E8E30B              <1>         call turnoff_scrolllock
  2441                              <1> 
  2442 0000109B 8A2E[D432]          <1>         mov ch, [main_tmp.keystroke_num]
  2443 0000109F 5F                  <1>         pop di
  2444 000010A0 C3                  <1>         ret
  2445                              <1> 
  2446                              <1> ;=============================================================================
  2447                              <1> ;main_show_record_info ---- show the information of the boot record
  2448                              <1> ;=============================================================================
  2449                              <1> main_show_record_info:
  2450 000010A1 E8C806              <1>         call main_get_focus_record_pointer
  2451 000010A4 BF[513B]            <1>         mov di, main_tmp.dialog_buf
  2452                              <1> 
  2453 000010A7 E8B620              <1>         call get_record_schedule
  2454 000010AA 52                  <1>         push dx
  2455 000010AB 53                  <1>         push bx
  2456 000010AC 50                  <1>         push ax
  2457                              <1> 
  2458 000010AD 66FF740E            <1>         push dword [si + struc_bootrecord.password]
  2459                              <1> 
  2460 000010B1 8B1C                <1>         mov bx, [si + struc_bootrecord.flags]
  2461 000010B3 8B4402              <1>         mov ax, [si + struc_bootrecord.drive_id]
  2462                              <1> 
  2463 000010B6 89F2                <1>         mov dx, si
  2464 000010B8 83C616              <1>         add si, struc_bootrecord.name
  2465 000010BB 56                  <1>         push si                               ; save record name pointer
  2466 000010BC 52                  <1>         push dx                               ; save record pointer
  2467 000010BD 50                  <1>         push ax                               ; save drive_id and part_id
  2468                              <1> 
  2469                              <1> ;write drive id
  2470 000010BE 8B36[9846]          <1>         mov si, [str_idx.drive_id]
  2471 000010C2 E8E816              <1>         call strcpy
  2472                              <1> 
  2473 000010C5 F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  2474 000010C9 7407                <1> 	jz .drvid_ok
  2475                              <1> 
  2476 000010CB B02D                <1> 	mov al, '-'
  2477 000010CD AA                  <1> 	stosb
  2478 000010CE AA                  <1> 	stosb
  2479 000010CF AA                  <1> 	stosb
  2480 000010D0 EB05                <1> 	jmp short .write_partid
  2481                              <1> 
  2482                              <1> .drvid_ok:
  2483 000010D2 88C2                <1> 	mov dl, al
  2484 000010D4 E8E726              <1> 	call get_drvid_str
  2485                              <1> 
  2486                              <1> .write_partid:
  2487                              <1> ;write part id
  2488 000010D7 8B36[9A46]          <1>         mov si, [str_idx.part_id]
  2489 000010DB E8CF16              <1>         call strcpy
  2490                              <1> 
  2491 000010DE 58                  <1>         pop ax                          ; ax = drive id, partition id
  2492 000010DF F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  2493 000010E3 7406                <1> 	jz .partid_ok
  2494 000010E5 B02D                <1> 	mov al, '-'
  2495 000010E7 AA                  <1> 	stosb
  2496 000010E8 AA                  <1> 	stosb
  2497 000010E9 EB0B                <1> 	jmp short .write_rectype
  2498                              <1> 
  2499                              <1> .partid_ok:
  2500 000010EB 0FB6C4              <1>         movzx ax, ah
  2501 000010EE B90200              <1>         mov cx, 2
  2502 000010F1 E81216              <1>         call itoa
  2503 000010F4 01CF                <1>         add di, cx
  2504                              <1> 
  2505                              <1> .write_rectype:
  2506                              <1> ;write record type
  2507 000010F6 8B36[9C46]          <1>         mov si, [str_idx.record_type]
  2508 000010FA E8B016              <1>         call strcpy
  2509                              <1> 
  2510 000010FD 89FE                <1>         mov si, di
  2511 000010FF E85216              <1>         call strlen
  2512                              <1> 
  2513 00001102 89C8                <1>         mov ax, cx
  2514 00001104 5E                  <1>         pop si                          ; si -> record pointer
  2515 00001105 E8361E              <1>         call get_record_typestr
  2516 00001108 89FE                <1>         mov si, di
  2517 0000110A E84716              <1>         call strlen
  2518 0000110D 29C1                <1>         sub cx, ax
  2519 0000110F 01CF                <1>         add di, cx
  2520                              <1> 
  2521                              <1> ;write record name 
  2522 00001111 8B36[9E46]          <1>         mov si, [str_idx.record_name]
  2523 00001115 E89516              <1>         call strcpy
  2524 00001118 5E                  <1>         pop si
  2525 00001119 E89116              <1>         call strcpy
  2526                              <1> 
  2527                              <1> ;write flags
  2528 0000111C B90700              <1> 	mov cx, 7
  2529 0000111F 89DA                <1> 	mov dx, bx
  2530 00001121 31DB                <1> 	xor bx, bx
  2531                              <1> .loop_copy_flags:
  2532 00001123 8BB7[A046]          <1> 	mov si, [str_idx.auto_active + bx]
  2533 00001127 8B87[8711]          <1> 	mov ax, [.flag_val + bx]
  2534 0000112B E84400              <1> 	call .copy_flag_stat
  2535 0000112E 43                  <1> 	inc bx
  2536 0000112F 43                  <1> 	inc bx
  2537 00001130 E2F1                <1> 	loop .loop_copy_flags
  2538                              <1> 
  2539                              <1> ;write password flag
  2540 00001132 8B36[AE46]          <1>         mov si, [str_idx.password]
  2541 00001136 E87416              <1>         call strcpy
  2542 00001139 6659                <1>         pop ecx
  2543 0000113B 6609C9              <1>         or ecx, ecx
  2544 0000113E 7406                <1>         jz .no_pswd
  2545 00001140 8B36[B246]          <1>         mov si, [str_idx.yes]
  2546 00001144 EB04                <1>         jmp short .pswd
  2547                              <1> .no_pswd:
  2548 00001146 8B36[B446]          <1>         mov si, [str_idx.no]
  2549                              <1> .pswd:
  2550 0000114A E86016              <1>         call strcpy
  2551                              <1> 
  2552                              <1> ;write schedule time
  2553 0000114D 8B36[B046]          <1>         mov si, [str_idx.schedule]
  2554 00001151 E85916              <1>         call strcpy
  2555 00001154 89D1                <1>         mov cx, dx
  2556                              <1> 
  2557 00001156 58                  <1>         pop ax
  2558 00001157 5B                  <1>         pop bx
  2559 00001158 5A                  <1>         pop dx
  2560                              <1> 
  2561 00001159 F7C10080            <1>         test cx, INFOFLAG_SCHEDULED
  2562 0000115D 7405                <1>         jz .no_sched
  2563 0000115F E82820              <1>         call schedule_to_str
  2564 00001162 EB07                <1>         jmp short .show_info
  2565                              <1> 
  2566                              <1> .no_sched:
  2567 00001164 8B36[B446]          <1>         mov si, [str_idx.no]
  2568 00001168 E84216              <1>         call strcpy
  2569                              <1> 
  2570                              <1> .show_info:
  2571 0000116B BE[513B]            <1>         mov si, main_tmp.dialog_buf
  2572 0000116E E8DC0B              <1>         call info_box
  2573                              <1> .end:
  2574 00001171 C3                  <1>         ret
  2575                              <1> 
  2576                              <1> ; si -> flag string
  2577                              <1> ; ax = flag
  2578                              <1> .copy_flag_stat:
  2579 00001172 E83816              <1> 	call strcpy
  2580 00001175 85C2                <1>         test dx, ax
  2581 00001177 7406                <1>         jz .no_this_flag
  2582 00001179 8B36[B246]          <1>         mov si, [str_idx.yes] 
  2583 0000117D EB04                <1>         jmp short .copy_flag
  2584                              <1> .no_this_flag:
  2585 0000117F 8B36[B446]          <1>         mov si, [str_idx.no]
  2586                              <1> .copy_flag:
  2587 00001183 E82716              <1>         call strcpy
  2588 00001186 C3                  <1> 	ret
  2589                              <1> 
  2590 00001187 001000080004000200- <1> .flag_val	dw INFOFLAG_AUTOACTIVE, INFOFLAG_ACTIVE, INFOFLAG_AUTOHIDE, INFOFLAG_HIDDEN, INFOFLAG_SWAPDRVID
  2591 00001190 20                  <1>
  2592 00001191 00010040            <1> 		dw INFOFLAG_LOGICAL, INFOFLAG_HAVEKEYS
  2593                              <1> 
  2594                              <1>        
  2595                              <1> ;=============================================================================
  2596                              <1> ;main_power_off ---- turn of the power
  2597                              <1> ;=============================================================================
  2598                              <1> main_power_off:
  2599 00001195 E9BB16              <1>         jmp power_off
  2600                              <1> 
  2601                              <1> 
  2602                              <1> ;=============================================================================
  2603                              <1> ;main_change_bootmenu_style ---- change the boot menu's draw style
  2604                              <1> ;=============================================================================
  2605                              <1> main_change_bootmenu_style:
  2606 00001198 A0[2102]            <1> 	mov al, [ADDR_SBMK_BOOTMENU_STYLE]
  2607 0000119B FEC0                <1> 	inc al
  2608 0000119D 3C04                <1> 	cmp al, 4
  2609 0000119F 7202                <1> 	jb .ok
  2610 000011A1 30C0                <1> 	xor al, al
  2611                              <1> 
  2612                              <1> .ok:
  2613 000011A3 A2[2102]            <1> 	mov [ADDR_SBMK_BOOTMENU_STYLE], al
  2614 000011A6 E85201              <1> 	call main_init_boot_menu
  2615                              <1> 
  2616 000011A9 FE06[C832]          <1>         inc byte [main_tmp.change_occured]
  2617 000011AD C3                  <1>         ret
  2618                              <1> 
  2619                              <1> ;=============================================================================
  2620                              <1> ;main_toggle_rem_last ---- toggle the remember last switch.
  2621                              <1> ;=============================================================================
  2622                              <1> main_toggle_rem_last:
  2623 000011AE 8036[1902]10        <1>         xor byte [ADDR_SBMK_FLAGS], KNLFLAG_REMLAST
  2624 000011B3 FE06[C832]          <1>         inc byte [main_tmp.change_occured]
  2625 000011B7 C3                  <1>         ret
  2626                              <1> 
  2627                              <1> 
  2628                              <1> ;=============================================================================
  2629                              <1> ;main_boot_prev_in_menu ---- boot previous MBR in command menu
  2630                              <1> ;=============================================================================
  2631                              <1> main_boot_prev_in_menu:
  2632 000011B8 E86E22              <1> 	call check_prev_mbr
  2633 000011BB 7208                <1> 	jc .end
  2634                              <1> 
  2635 000011BD E8F404              <1>         call main_confirm_root_passwd
  2636 000011C0 7203                <1>         jc .end
  2637                              <1> 
  2638 000011C2 E85F07              <1> 	call main_boot_prev_mbr
  2639                              <1> .end:
  2640 000011C5 C3                  <1> 	ret
  2641                              <1> 
  2642                              <1> 
  2643                              <1> ;=============================================================================
  2644                              <1> ; main_toggle_int13ext
  2645                              <1> ;=============================================================================
  2646                              <1> main_toggle_int13ext:
  2647 000011C6 A0[1902]            <1>         mov al, [ADDR_SBMK_FLAGS]
  2648 000011C9 3404                <1>         xor al, KNLFLAG_NOINT13EXT
  2649 000011CB A2[1902]            <1>         mov [ADDR_SBMK_FLAGS], al
  2650                              <1> 
  2651 000011CE A804                <1>         test al, KNLFLAG_NOINT13EXT
  2652 000011D0 7507                <1>         jnz .no_int13ext
  2653 000011D2 C606[CC37]01        <1>         mov byte [use_int13_ext], 1
  2654 000011D7 EB05                <1>         jmp short .endok
  2655                              <1> 
  2656                              <1> .no_int13ext:
  2657 000011D9 C606[CC37]00        <1>         mov byte [use_int13_ext], 0
  2658                              <1> .endok:
  2659 000011DE FE06[C832]          <1>         inc byte [main_tmp.change_occured]
  2660 000011E2 C3                  <1>         ret
  2661                              <1> 
  2662                              <1> ;=============================================================================
  2663                              <1> ; main_set_cdrom_ioports
  2664                              <1> ;=============================================================================
  2665                              <1> 
  2666                              <1> main_set_cdrom_ioports:
  2667                              <1> %ifndef DISABLE_CDBOOT
  2668 000011E3 F606[1902]08        <1> 	test byte [ADDR_SBMK_FLAGS], KNLFLAG_NOCDROM
  2669 000011E8 756E                <1> 	jnz .end
  2670                              <1> 
  2671 000011EA E8C704              <1>         call main_confirm_root_passwd
  2672 000011ED 7269                <1>         jc .end
  2673                              <1> 
  2674 000011EF 8D3E[513B]          <1>         lea di, [main_tmp.dialog_buf]
  2675 000011F3 57                  <1> 	push di
  2676 000011F4 C60500              <1> 	mov byte [di], 0 
  2677 000011F7 A1[2302]            <1> 	mov ax, [ADDR_SBMK_CDROM_IOPORTS]
  2678 000011FA 09C0                <1> 	or ax, ax
  2679 000011FC 7411                <1> 	jz .no_ports
  2680 000011FE B104                <1> 	mov cl, 4
  2681 00001200 E8DA15              <1> 	call htoa
  2682 00001203 83C704              <1> 	add di, 4
  2683 00001206 B02C                <1> 	mov al, ','
  2684 00001208 AA                  <1> 	stosb
  2685 00001209 A1[2502]            <1> 	mov ax, [ADDR_SBMK_CDROM_IOPORTS+2]
  2686 0000120C E8CE15              <1> 	call htoa
  2687                              <1> .no_ports:
  2688 0000120F 5F                  <1> 	pop di
  2689                              <1> 
  2690 00001210 0FB606[3C46]        <1>         movzx ax, [color.input_box_msg]
  2691 00001215 8B1E[3A46]          <1>         mov bx, [color.input_box]
  2692 00001219 B90909              <1>         mov cx, 0x0909
  2693 0000121C 31D2                <1>         xor dx, dx
  2694 0000121E 8B36[9446]          <1>         mov si, [str_idx.io_port]
  2695                              <1> 	
  2696 00001222 E8F60C              <1>         call input_box
  2697 00001225 7231                <1>         jc .end
  2698                              <1> 
  2699 00001227 89FE                <1>         mov si, di
  2700 00001229 E8CC15              <1> 	call atoh
  2701 0000122C 803C2C              <1> 	cmp byte [si], ','
  2702 0000122F 751E                <1> 	jne .invalid
  2703 00001231 89C3                <1> 	mov bx, ax
  2704 00001233 46                  <1> 	inc si
  2705 00001234 E8C115              <1> 	call atoh
  2706 00001237 803C00              <1> 	cmp byte [si], 0
  2707 0000123A 7513                <1> 	jne .invalid
  2708                              <1> 
  2709 0000123C 89C1                <1> 	mov cx, ax
  2710 0000123E 891E[2302]          <1> 	mov [ADDR_SBMK_CDROM_IOPORTS], bx
  2711 00001242 890E[2502]          <1> 	mov [ADDR_SBMK_CDROM_IOPORTS+2], cx
  2712                              <1> 
  2713 00001246 FE06[C832]          <1>         inc byte [main_tmp.change_occured]               ; some changes occured.
  2714 0000124A E8EE25              <1> 	call set_io_ports
  2715 0000124D EB09                <1> 	jmp short .end
  2716                              <1> 
  2717                              <1> .invalid:
  2718 0000124F 8B36[E246]          <1> 	mov si, [str_idx.invalid_ioports]
  2719 00001253 E8E50A              <1> 	call error_box
  2720 00001256 EB00                <1> 	jmp .end
  2721                              <1> .end:
  2722                              <1> %endif
  2723 00001258 C3                  <1>         ret
  2724                              <1> 
  2725                              <1> ;=============================================================================
  2726                              <1> ;main_set_y2k_year
  2727                              <1> ;=============================================================================
  2728                              <1> 
  2729                              <1> main_set_y2k_year:
  2730                              <1> %ifdef Y2K_BUGFIX
  2731                              <1>         lea di, [main_tmp.dialog_buf]
  2732                              <1> 	mov byte [di], 0 
  2733                              <1> 	mov cl,4
  2734                              <1> 	mov ax,[ADDR_SBMK_Y2K_LAST_YEAR]
  2735                              <1> 	or ax,ax
  2736                              <1> 	jz .nofix
  2737                              <1> 	call bcd_to_str
  2738                              <1> .nofix:
  2739                              <1>         movzx ax, [color.input_box_msg]
  2740                              <1>         mov bx, [color.input_box]
  2741                              <1>         mov si, [str_idx.year]
  2742                              <1>         mov ch, cl
  2743                              <1> 	xor dx, dx
  2744                              <1> 
  2745                              <1>         call input_box
  2746                              <1>         jc .end
  2747                              <1> 
  2748                              <1> 	xor bx,bx
  2749                              <1> 	or ch,ch
  2750                              <1> 	jz .set
  2751                              <1> 
  2752                              <1>         mov si,di
  2753                              <1> .loop:
  2754                              <1> 	shl bx,cl
  2755                              <1> 	lodsb
  2756                              <1> 	sub al,'0'
  2757                              <1> 	or bl,al
  2758                              <1> 	dec ch
  2759                              <1> 	jnz .loop
  2760                              <1> 
  2761                              <1> 	mov ah,4
  2762                              <1> 	int 0x1a
  2763                              <1> 	jc .end
  2764                              <1> 
  2765                              <1> 	mov cx,bx
  2766                              <1> 	mov ah,5
  2767                              <1> 	int 0x1a
  2768                              <1> .set:
  2769                              <1> 	mov [ADDR_SBMK_Y2K_LAST_YEAR],bx
  2770                              <1>         inc byte [main_tmp.change_occured]               ; some changes occured.
  2771                              <1> .end:
  2772                              <1> %endif
  2773 00001259 C3                  <1>         ret
  2774                              <1> 
  2775                                  %include "main-utils.asm"
  2776                              <1> ; asmsyntax=nasm
  2777                              <1> ;
  2778                              <1> ; main-utils.asm
  2779                              <1> ;
  2780                              <1> ; utility functions for main program
  2781                              <1> ;
  2782                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
  2783                              <1> ;
  2784                              <1> 
  2785                              <1> 
  2786                              <1> ;=============================================================================
  2787                              <1> ; >>>>>>>>>>>>>>>>>>>>>>>>> Initialization Functions <<<<<<<<<<<<<<<<<<<<<<<<<
  2788                              <1> ;=============================================================================
  2789                              <1> 
  2790                              <1> ;=============================================================================
  2791                              <1> ; main_init_theme ---- initialize the theme data.
  2792                              <1> ;=============================================================================
  2793                              <1> main_init_theme:
  2794 0000125A 8B1E[5546]          <1>         mov bx, [icon.brand]
  2795 0000125E 09DB                <1>         or bx, bx
  2796 00001260 7406                <1>         jz .adjust_bkgnd                            ; no brand icon
  2797 00001262 8106[5546][FF45]    <1>         add word [icon.brand], theme_start          ;
  2798                              <1> .adjust_bkgnd:
  2799 00001268 8B1E[5946]          <1>         mov bx, [icon.background]
  2800 0000126C 09DB                <1>         or bx, bx
  2801 0000126E 7406                <1>         jz .adjust_font                             ; no background icon
  2802 00001270 8106[5946][FF45]    <1>         add word [icon.background], theme_start
  2803                              <1> .adjust_font:
  2804 00001276 8B1E[5D46]          <1>         mov bx, [font.data]
  2805 0000127A 09DB                <1>         or bx, bx
  2806 0000127C 7406                <1>         jz .adjust_keymap
  2807 0000127E 8106[5D46][FF45]    <1>         add word [font.data], theme_start
  2808                              <1> .adjust_keymap:
  2809 00001284 8B1E[6A46]          <1>         mov bx, [keymap.data]
  2810 00001288 09DB                <1>         or bx, bx
  2811 0000128A 7406                <1>         jz .adjust_str
  2812 0000128C 8106[6A46][FF45]    <1>         add word [keymap.data], theme_start
  2813                              <1> 
  2814                              <1> .adjust_str:
  2815 00001292 8D36[6C46]          <1>         lea si, [str_idx]
  2816 00001296 B97800              <1>         mov cx, (end_of_str_idx - str_idx)/2
  2817                              <1>         
  2818                              <1> .loop_adjust:
  2819 00001299 8B1C                <1>         mov bx, [si]
  2820 0000129B 81C3[FF45]          <1>         add bx, theme_start
  2821 0000129F 891C                <1>         mov [si], bx
  2822 000012A1 83C602              <1>         add si, 2
  2823 000012A4 E2F3                <1>         loop .loop_adjust
  2824                              <1> 
  2825 000012A6 B010                <1>         mov al, 0x10
  2826 000012A8 2006[1046]          <1>         and [keyboard_type], al
  2827                              <1> 
  2828 000012AC C3                  <1>         ret
  2829                              <1>         
  2830                              <1> ;=============================================================================
  2831                              <1> ; main_init_all_menus ---- initialize the menus
  2832                              <1> ;=============================================================================
  2833                              <1> main_init_all_menus:
  2834 000012AD BE[2A46]            <1>         mov si, color.cmd_menu
  2835                              <1> ;initialize main menu
  2836 000012B0 BF[3C44]            <1>         mov di, main_windows_data.main_menu
  2837 000012B3 E82800              <1>         call main_init_menu
  2838 000012B6 A1[2C02]            <1> 	mov ax, [ADDR_SBMK_MAIN_MENU_POS]
  2839 000012B9 A3[4244]            <1> 	mov [main_windows_data.main_menu + struc_window.win_pos], ax
  2840                              <1> ;initialize record menu
  2841 000012BC BF[6744]            <1>         mov di, main_windows_data.record_menu
  2842 000012BF E81C00              <1>         call main_init_menu
  2843 000012C2 A1[2E02]            <1> 	mov ax, [ADDR_SBMK_RECORD_MENU_POS]
  2844 000012C5 A3[6D44]            <1> 	mov [main_windows_data.record_menu + struc_window.win_pos], ax
  2845                              <1> ;initialize system menu
  2846 000012C8 BF[9244]            <1>         mov di, main_windows_data.sys_menu
  2847 000012CB E81000              <1>         call main_init_menu
  2848 000012CE A1[3002]            <1> 	mov ax, [ADDR_SBMK_SYS_MENU_POS]
  2849 000012D1 A3[9844]            <1> 	mov [main_windows_data.sys_menu + struc_window.win_pos], ax
  2850                              <1> ;initialize boot menu
  2851 000012D4 A1[2A02]            <1> 	mov ax, [ADDR_SBMK_BOOT_MENU_POS]
  2852 000012D7 A3[1744]            <1> 	mov [main_windows_data.boot_menu + struc_window.win_pos], ax
  2853 000012DA E81E00              <1>         call main_init_boot_menu
  2854 000012DD C3                  <1>         ret
  2855                              <1> 
  2856                              <1> ;=============================================================================
  2857                              <1> ; main_init_menu
  2858                              <1> ;input:
  2859                              <1> ;       ds:si -> colors
  2860                              <1> ;       ds:di -> struc_menu_box
  2861                              <1> ;=============================================================================
  2862                              <1> main_init_menu:
  2863 000012DE 56                  <1>         push si
  2864 000012DF FC                  <1>         cld
  2865 000012E0 AD                  <1>         lodsw
  2866 000012E1 894504              <1>         mov [di + struc_window.win_attr], ax
  2867 000012E4 AC                  <1>         lodsb
  2868 000012E5 88451C              <1>         mov [di + struc_menu_box.menu_header_attr], al
  2869 000012E8 AD                  <1>         lodsw
  2870 000012E9 89451D              <1>         mov [di + struc_menu_box.menu_norm_attr], ax
  2871 000012EC AD                  <1>         lodsw
  2872 000012ED 89451F              <1>         mov [di + struc_menu_box.menu_focus_attr], ax
  2873 000012F0 AC                  <1>         lodsb
  2874 000012F1 884525              <1>         mov [di + struc_menu_box.scrollbar_attr], al
  2875 000012F4 89FE                <1>         mov si, di
  2876 000012F6 E88B0C              <1>         call menubox_adjust_geometry
  2877 000012F9 5E                  <1>         pop si
  2878 000012FA C3                  <1>         ret
  2879                              <1> 
  2880                              <1> ;=============================================================================
  2881                              <1> ; main_init_boot_menu
  2882                              <1> ;=============================================================================
  2883                              <1> main_init_boot_menu:
  2884 000012FB 60                  <1>         pusha
  2885                              <1> ;initialize boot menu
  2886 000012FC BF[1144]            <1>         mov di, main_windows_data.boot_menu
  2887 000012FF A0[1F46]            <1>         mov al, [size.boot_menu_win_height]
  2888 00001302 884509              <1>         mov [di + struc_window.win_size + 1], al        ; set boot menu height
  2889                              <1> 
  2890                              <1> ;set boot menu header
  2891 00001305 0FB606[2102]        <1>         movzx ax, byte [ADDR_SBMK_BOOTMENU_STYLE]
  2892 0000130A BB[6E46]            <1>         mov bx, str_idx.boot_menu_header
  2893 0000130D 3C03                <1>         cmp al, 3
  2894 0000130F 7602                <1>         jbe .bmstyle_ok
  2895 00001311 30C0                <1>         xor al, al
  2896                              <1> 
  2897                              <1> .bmstyle_ok:
  2898 00001313 D0E0                <1>         shl al, 1
  2899 00001315 01C3                <1>         add bx, ax
  2900 00001317 895D1A              <1>         mov [di + struc_menu_box.menu_header], bx
  2901                              <1> 
  2902                              <1> ;init the color and geometry of boot menu
  2903 0000131A BE[2246]            <1>         mov si, color.boot_menu
  2904 0000131D E8BEFF              <1>         call main_init_menu
  2905                              <1> 
  2906                              <1> ; set position of boot menu window 
  2907                              <1> 
  2908 00001320 8B4506              <1>         mov ax, [di + struc_window.win_pos]
  2909 00001323 88C3                <1>         mov bl, al
  2910                              <1> 
  2911 00001325 025D08              <1>         add bl, [di + struc_window.win_size]
  2912 00001328 80C302              <1>         add bl, 2
  2913 0000132B 3A1E[3326]          <1>         cmp bl, [ui_screen_width]
  2914 0000132F 7208                <1>         jb .bmpos_ok
  2915                              <1> 
  2916 00001331 A0[3326]            <1>         mov al, [ui_screen_width]
  2917 00001334 2A4508              <1>         sub al, [di + struc_window.win_size]
  2918 00001337 2C02                <1>         sub al, 2
  2919                              <1> 
  2920                              <1> .bmpos_ok:
  2921 00001339 894506              <1>         mov [di + struc_window.win_pos], ax
  2922 0000133C 61                  <1>         popa
  2923 0000133D C3                  <1>         ret
  2924                              <1> 
  2925                              <1> ;=============================================================================
  2926                              <1> ;main_init_video ---- init the video mode
  2927                              <1> ;input:
  2928                              <1> ;      none
  2929                              <1> ;output:
  2930                              <1> ;      none
  2931                              <1> ;=============================================================================
  2932                              <1> main_init_video:
  2933 0000133E 60                  <1> 	pusha
  2934 0000133F A0[0F46]            <1>         mov al, [video_mode]
  2935 00001342 B308                <1>         mov bl, 8
  2936 00001344 8B2E[5D46]          <1>         mov bp, [font.data]
  2937 00001348 8B0E[5B46]          <1>         mov cx, [font.number]
  2938                              <1>         
  2939 0000134C E80108              <1>         call set_video_mode
  2940 0000134F 61                  <1> 	popa
  2941 00001350 C3                  <1>         ret
  2942                              <1> 
  2943                              <1> ;=============================================================================
  2944                              <1> ;main_init_good_record_list ---- init the good boot record list
  2945                              <1> ;input:
  2946                              <1> ;      none
  2947                              <1> ;output:
  2948                              <1> ;      cf = 0 sucess
  2949                              <1> ;      cf = 1 failed, no good record
  2950                              <1> ;=============================================================================
  2951                              <1> main_init_good_record_list:
  2952 00001351 FC                  <1>         cld
  2953 00001352 60                  <1>         pusha
  2954 00001353 B92000              <1>         mov cx, MAX_RECORD_NUM
  2955 00001356 8D3E[A232]          <1>         lea di, [main_tmp.good_record_list]
  2956 0000135A 8D36[3202]          <1>         lea si, [ADDR_SBMK_BOOT_RECORDS]
  2957 0000135E 31C0                <1>         xor ax, ax
  2958                              <1> 
  2959                              <1> .loop_check:
  2960 00001360 E84619              <1>         call check_bootrecord                   ; check if it's valid
  2961 00001363 7203                <1>         jc .check_next
  2962 00001365 AA                  <1>         stosb                                   ; store it's index to buffer
  2963 00001366 FEC4                <1>         inc ah
  2964                              <1>         
  2965                              <1> .check_next:
  2966 00001368 FEC0                <1>         inc al
  2967 0000136A 83C640              <1>         add si, SIZE_OF_BOOTRECORD
  2968 0000136D E2F1                <1>         loop .loop_check
  2969                              <1> 
  2970 0000136F 8826[3744]          <1>         mov [GOOD_RECORD_NUMBER], ah
  2971 00001373 08E4                <1>         or ah, ah
  2972 00001375 7501                <1>         jnz .ok
  2973 00001377 F9                  <1>         stc
  2974                              <1> .ok:
  2975 00001378 61                  <1>         popa
  2976 00001379 C3                  <1>         ret
  2977                              <1> 
  2978                              <1> ;=============================================================================
  2979                              <1> ;init_boot_records ---- init the boot records list
  2980                              <1> ;input:
  2981                              <1> ;      none
  2982                              <1> ;output:
  2983                              <1> ;      none
  2984                              <1> ;=============================================================================
  2985                              <1> main_init_boot_records:
  2986 0000137A 60                  <1>         pusha
  2987 0000137B FE06[C832]          <1>         inc byte [main_tmp.change_occured]         ; some changes occured.
  2988                              <1> 
  2989 0000137F FC                  <1>         cld
  2990 00001380 BE[3202]            <1>         mov si, ADDR_SBMK_BOOT_RECORDS
  2991 00001383 BF[0133]            <1>         mov di, main_tmp.records_buf
  2992                              <1> 
  2993 00001386 B90008              <1> 	mov cx, MAX_RECORD_NUM * SIZE_OF_BOOTRECORD
  2994 00001389 E8E417              <1> 	call clear_memory
  2995                              <1> 
  2996 0000138C B84000              <1>         mov ax, SIZE_OF_BOOTRECORD        ; ax = size of bootrecord
  2997 0000138F B92000              <1>         mov cx, MAX_RECORD_NUM            ; cx = max record number
  2998                              <1> 
  2999 00001392 88CB                <1>         mov bl, cl
  3000                              <1> 
  3001 00001394 56                  <1>         push si
  3002 00001395 51                  <1>         push cx                           ; cx = MAX_RECORD_NUM
  3003                              <1> .bkp_good_records:
  3004 00001396 E81019              <1>         call check_bootrecord
  3005 00001399 720A                <1>         jc .bad_record
  3006                              <1> 
  3007 0000139B 56                  <1>         push si
  3008 0000139C 51                  <1>         push cx
  3009 0000139D 89C1                <1>         mov cx, ax
  3010 0000139F F3A4                <1>         rep movsb
  3011 000013A1 59                  <1>         pop cx
  3012 000013A2 5E                  <1>         pop si
  3013                              <1> 
  3014 000013A3 FECB                <1>         dec bl
  3015                              <1>         
  3016                              <1> .bad_record:
  3017 000013A5 01C6                <1>         add si, ax
  3018 000013A7 E2ED                <1>         loop .bkp_good_records
  3019                              <1> 
  3020 000013A9 59                  <1>         pop cx                           ; cx = MAX_RECORD_NUM
  3021 000013AA 5E                  <1>         pop si                           ; si -> boot_records
  3022 000013AB 87F7                <1>         xchg si, di                      ; di -> boot_records
  3023                              <1> 
  3024 000013AD 57                  <1>         push di
  3025 000013AE 50                  <1> 	push ax
  3026 000013AF 30D2                <1>         xor dl, dl
  3027 000013B1 F606[1902]20        <1>         test byte [ADDR_SBMK_FLAGS], KNLFLAG_ONLYPARTS
  3028 000013B6 0F95C0              <1> 	setnz al
  3029 000013B9 E83A1B              <1>         call search_records
  3030 000013BC 58                  <1> 	pop ax
  3031 000013BD 5F                  <1>         pop di
  3032                              <1> 
  3033                              <1> ;search finished, find out new records
  3034 000013BE B92000              <1>         mov cx, MAX_RECORD_NUM
  3035 000013C1 87F7                <1>         xchg si, di                      ; si -> boot_records
  3036                              <1> 
  3037 000013C3 56                  <1>         push si
  3038                              <1> 
  3039 000013C4 08DB                <1>         or bl, bl
  3040 000013C6 741C                <1>         jz .no_space
  3041                              <1> 
  3042                              <1> .search_news:
  3043 000013C8 57                  <1>         push di
  3044 000013C9 BF[0133]            <1>         mov di, main_tmp.records_buf
  3045 000013CC E82000              <1>         call main_find_record_in_buf
  3046 000013CF 5F                  <1>         pop di
  3047                              <1> 
  3048 000013D0 730A                <1>         jnc .found
  3049                              <1> 
  3050 000013D2 51                  <1>         push cx
  3051 000013D3 56                  <1>         push si
  3052 000013D4 89C1                <1>         mov cx, ax
  3053 000013D6 F3A4                <1>         rep movsb
  3054 000013D8 5E                  <1>         pop si
  3055 000013D9 59                  <1>         pop cx
  3056                              <1> 
  3057 000013DA FECB                <1>         dec bl
  3058                              <1> 
  3059                              <1> .found:
  3060 000013DC 08DB                <1>         or bl, bl
  3061 000013DE 7404                <1>         jz .no_space
  3062 000013E0 01C6                <1>         add si, ax
  3063 000013E2 E2E4                <1>         loop .search_news
  3064                              <1> 
  3065                              <1> .no_space:
  3066                              <1> 
  3067 000013E4 5F                  <1>         pop di
  3068 000013E5 BE[0133]            <1>         mov si, main_tmp.records_buf
  3069 000013E8 B90008              <1> 	mov cx, MAX_RECORD_NUM * SIZE_OF_BOOTRECORD
  3070 000013EB F3A4                <1>         rep movsb
  3071                              <1> 
  3072 000013ED 61                  <1>         popa
  3073 000013EE C3                  <1>         ret
  3074                              <1> 
  3075                              <1> ;=============================================================================
  3076                              <1> ; main_find_record_in_buf ---- find a record in a buffer
  3077                              <1> ; input:
  3078                              <1> ;      ds:si -> the record
  3079                              <1> ;      es:di -> the buffer
  3080                              <1> ; output:
  3081                              <1> ;      cf = 1 not found
  3082                              <1> ;=============================================================================
  3083                              <1> main_find_record_in_buf:
  3084 000013EF 60                  <1>         pusha
  3085 000013F0 8B1C                <1> 	mov bx, [si]				; flags
  3086 000013F2 F7C30900            <1>         test bx, DRVFLAG_DRIVEOK|INFOFLAG_ISSPECIAL
  3087                              <1> 
  3088 000013F6 7442                <1>         jz .not_found
  3089                              <1> 
  3090 000013F8 B92000              <1>         mov cx, MAX_RECORD_NUM
  3091                              <1> 
  3092                              <1> .compare_next:
  3093 000013FB F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  3094 000013FF 7408                <1> 	jz .normal_rec
  3095 00001401 F7050800            <1> 	test word [di], INFOFLAG_ISSPECIAL
  3096 00001405 7524                <1> 	jnz .special_rec
  3097 00001407 EB2C                <1> 	jmp short .not_same
  3098                              <1> 
  3099                              <1> .normal_rec:
  3100 00001409 F7050100            <1> 	test word [di], DRVFLAG_DRIVEOK
  3101 0000140D 7426                <1> 	jz .not_same
  3102 0000140F 8B4502              <1>         mov ax, [di + struc_bootrecord.drive_id]
  3103 00001412 394402              <1>         cmp [si + struc_bootrecord.drive_id], ax
  3104 00001415 751E                <1>         jne .not_same
  3105 00001417 668B4506            <1>         mov eax, [di + struc_bootrecord.father_abs_addr]
  3106 0000141B 66394406            <1>         cmp [si + struc_bootrecord.father_abs_addr], eax
  3107 0000141F 7514                <1>         jne .not_same
  3108 00001421 668B450A            <1>         mov eax, [di + struc_bootrecord.abs_addr]
  3109 00001425 6639440A            <1>         cmp [si + struc_bootrecord.abs_addr], eax
  3110 00001429 750A                <1>         jne .not_same
  3111                              <1> 
  3112                              <1> .special_rec:
  3113 0000142B 8A4504              <1>         mov al, [di + struc_bootrecord.type]
  3114 0000142E 384404              <1>         cmp [si + struc_bootrecord.type], al
  3115 00001431 7502                <1>         jne .not_same
  3116                              <1> 
  3117 00001433 EB08                <1>         jmp short .found_same
  3118                              <1> 
  3119                              <1> .not_same:
  3120 00001435 83C740              <1>         add di, SIZE_OF_BOOTRECORD
  3121 00001438 E2C1                <1>         loop .compare_next
  3122                              <1> 
  3123                              <1> .not_found:
  3124 0000143A F9                  <1>         stc
  3125 0000143B 61                  <1>         popa
  3126 0000143C C3                  <1>         ret
  3127                              <1> 
  3128                              <1> .found_same:
  3129 0000143D F8                  <1>         clc
  3130 0000143E 61                  <1>         popa
  3131 0000143F C3                  <1>         ret
  3132                              <1> 
  3133                              <1> 
  3134                              <1> ;=============================================================================
  3135                              <1> ; >>>>>>>>>>>>>>>>>>>>>>>>> User Interface Functions <<<<<<<<<<<<<<<<<<<<<<<<<
  3136                              <1> ;=============================================================================
  3137                              <1> 
  3138                              <1> ;=============================================================================
  3139                              <1> ;root_window_draw_body_proc ---- draw the root window
  3140                              <1> ;input:
  3141                              <1> ;      none
  3142                              <1> ;output:
  3143                              <1> ;      none
  3144                              <1> ;=============================================================================
  3145                              <1> root_window_draw_body_proc:
  3146 00001440 8A3E[4A46]          <1>         mov bh, [color.background]              ;
  3147 00001444 8B36[5946]          <1>         mov si, [icon.background]               ; draw background
  3148 00001448 8B0E[5746]          <1>         mov cx, [icon.background_size]          ;
  3149 0000144C E8F007              <1>         call draw_background                    ;
  3150                              <1> 
  3151 0000144F 31D2                <1>         xor dx, dx                              ;
  3152 00001451 8B1E[4B46]          <1>         mov bx, [color.copyright]               ;
  3153 00001455 A0[3326]            <1>         mov al, [ui_screen_width]               ; draw copyright message
  3154 00001458 50                  <1>         push ax                                 ; save screen width
  3155 00001459 8A0E[1B46]          <1>         mov cl, [size.copyright]
  3156 0000145D F6E1                <1>         mul cl
  3157 0000145F 89C1                <1>         mov cx, ax
  3158 00001461 B020                <1>         mov al, ' '                             ;
  3159 00001463 E87505              <1>         call draw_char                          ;
  3160 00001466 8B36[B646]          <1>         mov si, [str_idx.copyright]
  3161 0000146A E84705              <1>         call draw_string_hl
  3162                              <1>         
  3163 0000146D 8B1E[4D46]          <1>         mov bx, [color.hint]                    ;
  3164 00001471 8A36[3426]          <1>         mov dh, [ui_screen_height]              ;
  3165 00001475 8A0E[1C46]          <1>         mov cl, [size.hint]                     ;
  3166 00001479 28CE                <1>         sub dh, cl                              ; draw hint message
  3167 0000147B 58                  <1>         pop ax                                  ; get screen width
  3168 0000147C F6E1                <1>         mul cl                                  ;
  3169 0000147E 89C1                <1>         mov cx, ax                              ;
  3170 00001480 B020                <1>         mov al, ' '                             ;
  3171 00001482 E85605              <1>         call draw_char                          ;
  3172 00001485 8B36[B846]          <1>         mov si, [str_idx.hint]                  ;
  3173 00001489 E82805              <1>         call draw_string_hl                     ;
  3174                              <1> 
  3175 0000148C 8B16[1546]          <1>         mov dx, [position.brand]                ; draw brand icon
  3176 00001490 8B0E[5346]          <1>         mov cx, [icon.brand_size]               ;
  3177 00001494 80FAFF              <1>         cmp dl, 0xFF                            ;
  3178 00001497 7506                <1>         jne .not_justify                        ;
  3179 00001499 8A16[3326]          <1>         mov dl, [ui_screen_width]               ; right justify
  3180 0000149D 28CA                <1>         sub dl, cl                              ;
  3181                              <1> .not_justify:                                   ;
  3182 0000149F 8B36[5546]          <1>         mov si, [icon.brand]                    ;
  3183 000014A3 E87207              <1>         call draw_icon                          ;
  3184                              <1> 
  3185 000014A6 E80A00              <1>         call root_window_draw_date
  3186 000014A9 E82000              <1>         call root_window_draw_time
  3187 000014AC E8CD00              <1>         call root_window_draw_delay_time
  3188 000014AF E83300              <1>         call root_window_draw_knl_flags
  3189                              <1> 
  3190 000014B2 C3                  <1>         ret
  3191                              <1>         
  3192                              <1> ;=============================================================================
  3193                              <1> ;root_window_draw_date ---- draw the date string
  3194                              <1> ;input:
  3195                              <1> ;      none
  3196                              <1> ;output:
  3197                              <1> ;      none
  3198                              <1> ;=============================================================================
  3199                              <1> root_window_draw_date:
  3200 000014B3 60                  <1>         pusha
  3201 000014B4 BF[513C]            <1>         mov di, main_tmp.root_buf               ; draw date
  3202 000014B7 A0[1146]            <1>         mov al, [show_date_method]              ;
  3203 000014BA E8FE15              <1>         call get_current_date_string            ;
  3204 000014BD 89FE                <1>         mov si, di                              ;
  3205 000014BF 8A1E[5146]          <1>         mov bl, [color.date]                    ;
  3206 000014C3 8B16[1746]          <1>         mov dx, [position.date]                 ;
  3207 000014C7 E8EA04              <1>         call draw_string                        ;
  3208 000014CA 61                  <1>         popa
  3209 000014CB C3                  <1>         ret
  3210                              <1> 
  3211                              <1> ;=============================================================================
  3212                              <1> ;draw_time ---- draw the time string
  3213                              <1> ;input:
  3214                              <1> ;      none
  3215                              <1> ;output:
  3216                              <1> ;      none
  3217                              <1> ;=============================================================================
  3218                              <1> root_window_draw_time:
  3219 000014CC 60                  <1>         pusha
  3220 000014CD BF[513C]            <1>         mov di, main_tmp.root_buf               ; draw date
  3221 000014D0 A0[1246]            <1>         mov al, [show_time_method]              ;
  3222 000014D3 E8BE15              <1>         call get_current_time_string            ;
  3223 000014D6 89FE                <1>         mov si, di                              ;
  3224 000014D8 8A1E[5246]          <1>         mov bl, [color.time]                    ;
  3225 000014DC 8B16[1946]          <1>         mov dx, [position.time]                 ;
  3226 000014E0 E8D104              <1>         call draw_string                        ;
  3227 000014E3 61                  <1>         popa
  3228 000014E4 C3                  <1>         ret
  3229                              <1> 
  3230                              <1> ;=============================================================================
  3231                              <1> ;root_window_draw_knl_flags ---- draw root passwd, login, secure mode, 
  3232                              <1> ;                                remember last and int13 ext flags.
  3233                              <1> ;=============================================================================
  3234                              <1> root_window_draw_knl_flags:
  3235 000014E5 8B16[3326]          <1>         mov dx, [ui_screen_size]
  3236 000014E9 81EA1301            <1>         sub dx, 0x0113
  3237 000014ED B90100              <1>         mov cx, 1
  3238                              <1> 
  3239                              <1> ; draw seperators
  3240 000014F0 8A1E[4D46]          <1>         mov bl, [color.hint]
  3241 000014F4 B07C                <1>         mov al, '|'
  3242 000014F6 E8E204              <1>         call draw_char
  3243 000014F9 80C204              <1> 	add dl,4
  3244 000014FC E8DC04              <1> 	call draw_char
  3245 000014FF 80C206              <1> 	add dl,6
  3246 00001502 E8D604              <1> 	call draw_char
  3247 00001505 80EA09              <1> 	sub dl,9
  3248                              <1> 
  3249                              <1> ; draw driver id
  3250 00001508 BF[513C]            <1>         mov di, main_tmp.root_buf
  3251 0000150B 57                  <1> 	push di
  3252 0000150C 52                  <1> 	push dx
  3253 0000150D 8A16107E            <1> 	mov dl, [Boot_Drive]
  3254 00001511 E8AA22              <1> 	call get_drvid_str
  3255 00001514 5A                  <1> 	pop dx
  3256 00001515 5E                  <1> 	pop si
  3257                              <1> 
  3258 00001516 8A1E[5046]          <1>         mov bl, [color.knl_drvid]
  3259                              <1> 
  3260 0000151A E89704              <1>         call draw_string
  3261 0000151D 80C204              <1>         add dl, 4
  3262                              <1> 
  3263                              <1> ; draw flags
  3264 00001520 8A1E[4F46]          <1>         mov bl, [color.knl_flags]
  3265 00001524 66833E[1D02]00      <1>         cmp dword [ADDR_SBMK_ROOT_PASSWORD], 0
  3266 0000152A 7404                <1>         jz .no_root_password
  3267                              <1>         
  3268 0000152C B050                <1>         mov al, 'P'
  3269 0000152E EB02                <1>         jmp short .draw_pwd
  3270                              <1> .no_root_password:
  3271 00001530 B02D                <1>         mov al, '-'
  3272                              <1> .draw_pwd:
  3273 00001532 E8A604              <1>         call draw_char
  3274 00001535 FEC2                <1>         inc dl
  3275                              <1> 
  3276 00001537 8A26[1902]          <1> 	mov ah, [ADDR_SBMK_FLAGS]
  3277                              <1> 
  3278 0000153B F6C402              <1>         test ah, KNLFLAG_SECURITY
  3279 0000153E 7404                <1>         jz .no_security
  3280                              <1> 
  3281 00001540 B053                <1>         mov al, 'S'
  3282 00001542 EB02                <1>         jmp short .draw_security
  3283                              <1> .no_security:
  3284 00001544 B02D                <1>         mov al, '-'
  3285                              <1> .draw_security:
  3286 00001546 E89204              <1>         call draw_char
  3287 00001549 FEC2                <1>         inc dl
  3288                              <1> 
  3289 0000154B 803E[C932]00        <1>         cmp byte [main_tmp.root_login],0
  3290 00001550 7404                <1>         jz .no_root_login
  3291                              <1> 
  3292 00001552 B041                <1>         mov al, 'A'
  3293 00001554 EB02                <1>         jmp short .draw_login
  3294                              <1> .no_root_login:
  3295 00001556 B02D                <1>         mov al, '-'
  3296                              <1> .draw_login:
  3297 00001558 E88004              <1>         call draw_char
  3298                              <1> 
  3299 0000155B FEC2                <1>         inc dl
  3300                              <1> 
  3301 0000155D F6C410              <1>         test ah, KNLFLAG_REMLAST
  3302 00001560 7404                <1>         jz .no_remlast
  3303 00001562 B04C                <1>         mov al, 'L'
  3304 00001564 EB02                <1>         jmp short .draw_remlast
  3305                              <1> .no_remlast:
  3306 00001566 B02D                <1>         mov al, '-'
  3307                              <1> .draw_remlast:
  3308 00001568 E87004              <1>         call draw_char
  3309                              <1> 
  3310 0000156B FEC2                <1>         inc dl
  3311                              <1> 
  3312 0000156D F6C404              <1>         test ah, KNLFLAG_NOINT13EXT
  3313 00001570 7504                <1>         jnz .no_int13ext
  3314 00001572 B045                <1>         mov al, 'E'
  3315 00001574 EB02                <1>         jmp .draw_int13ext
  3316                              <1> .no_int13ext:
  3317 00001576 B02D                <1>         mov al, '-'
  3318                              <1> .draw_int13ext:
  3319 00001578 E86004              <1>         call draw_char
  3320 0000157B C3                  <1>         ret
  3321                              <1> 
  3322                              <1> ;=============================================================================
  3323                              <1> ;root_window_draw_delay_time ---- draw the delay_time and time_count
  3324                              <1> ;=============================================================================
  3325                              <1> root_window_draw_delay_time:
  3326 0000157C 0FB606[C232]        <1>         movzx ax, byte [main_tmp.time_count]
  3327 00001581 B90300              <1>         mov cx, 3
  3328 00001584 BF[513C]            <1>         mov di, main_tmp.root_buf
  3329 00001587 E87C11              <1>         call itoa
  3330                              <1>         
  3331 0000158A 8A1E[4946]          <1>         mov bl, [color.delay_time]
  3332 0000158E 8B16[3326]          <1>         mov dx, [ui_screen_size]
  3333 00001592 81EA0801            <1>         sub dx, 0x0108
  3334 00001596 89FE                <1>         mov si, di
  3335 00001598 E81904              <1>         call draw_string
  3336                              <1> 
  3337 0000159B 0FB606[1A02]        <1>         movzx ax, byte [ADDR_SBMK_DELAY_TIME]
  3338 000015A0 B90300              <1>         mov cx, 3
  3339 000015A3 E86011              <1>         call itoa
  3340                              <1> 
  3341 000015A6 B03A                <1>         mov al, ':'
  3342 000015A8 B101                <1>         mov cl, 1
  3343 000015AA 80C203              <1>         add dl, 3
  3344 000015AD E82B04              <1>         call draw_char
  3345 000015B0 FEC2                <1>         inc dl
  3346 000015B2 E8FF03              <1>         call draw_string
  3347 000015B5 B020                <1>         mov al, ' '
  3348 000015B7 80C203              <1>         add dl, 3
  3349 000015BA E81E04              <1>         call draw_char
  3350 000015BD C3                  <1>         ret
  3351                              <1> 
  3352                              <1> 
  3353                              <1> ;=============================================================================
  3354                              <1> ; boot_menu_item_str_proc ---- get item string of boot menu
  3355                              <1> ; input:
  3356                              <1> ;	cx = index
  3357                              <1> ; output:
  3358                              <1> ;	ds:si -> item string
  3359                              <1> ;=============================================================================
  3360                              <1> boot_menu_item_str_proc:
  3361 000015BE E8BE01              <1> 	call main_get_record_pointer
  3362                              <1> 
  3363 000015C1 FC                  <1> 	cld
  3364 000015C2 8D3E[013B]          <1>         lea di, [main_tmp.record_string]
  3365 000015C6 57                  <1> 	push di
  3366                              <1> 
  3367 000015C7 3A0E[1C02]          <1> 	cmp cl, [ADDR_SBMK_DEFAULT_BOOT]
  3368 000015CB 7502                <1> 	jne .not_def
  3369 000015CD B02A                <1> 	mov al, '*'
  3370                              <1> .not_def:
  3371 000015CF AA                  <1> 	stosb
  3372                              <1> 
  3373 000015D0 A0[2102]            <1>         mov al, [ADDR_SBMK_BOOTMENU_STYLE]
  3374 000015D3 E8D419              <1>         call get_record_string
  3375 000015D6 5E                  <1> 	pop si
  3376 000015D7 C3                  <1> 	ret
  3377                              <1> 
  3378                              <1> ;=============================================================================
  3379                              <1> ; main_menu_item_str_proc ---- get item string of main menu
  3380                              <1> ; input:
  3381                              <1> ;	cx = index
  3382                              <1> ; output:
  3383                              <1> ;	ds:si -> item string
  3384                              <1> ;=============================================================================
  3385                              <1> main_menu_item_str_proc:
  3386 000015D8 BE[E646]            <1> 	mov si, str_idx.main_menu_strings
  3387 000015DB EB0A                <1> 	jmp short main_get_cmd_menu_item_str
  3388                              <1> 
  3389                              <1> ;=============================================================================
  3390                              <1> ; record_menu_item_str_proc ---- get item string of record menu
  3391                              <1> ; input:
  3392                              <1> ;	cx = index
  3393                              <1> ; output:
  3394                              <1> ;	ds:si -> item string
  3395                              <1> ;=============================================================================
  3396                              <1> record_menu_item_str_proc:
  3397 000015DD BE[FE46]            <1> 	mov si, str_idx.record_menu_strings
  3398 000015E0 EB05                <1> 	jmp short main_get_cmd_menu_item_str
  3399                              <1> 
  3400                              <1> ;=============================================================================
  3401                              <1> ; sys_menu_item_str_proc ---- get item string of sys menu
  3402                              <1> ; input:
  3403                              <1> ;	cx = index
  3404                              <1> ; output:
  3405                              <1> ;	ds:si -> item string
  3406                              <1> ;=============================================================================
  3407                              <1> sys_menu_item_str_proc:
  3408 000015E2 BE[2047]            <1> 	mov si, str_idx.sys_menu_strings
  3409 000015E5 EB00                <1> 	jmp short main_get_cmd_menu_item_str
  3410                              <1> 
  3411                              <1> ;=============================================================================
  3412                              <1> ; main_get_cmd_menu_item_str ---- get item string of a command menu
  3413                              <1> ; input:
  3414                              <1> ;	cx = index
  3415                              <1> ;	ds:si -> str_idx
  3416                              <1> ; output:
  3417                              <1> ;	ds:si -> item string
  3418                              <1> ;=============================================================================
  3419                              <1> main_get_cmd_menu_item_str:
  3420 000015E7 D1E1                <1> 	shl cx,1
  3421 000015E9 01CE                <1> 	add si, cx
  3422 000015EB 8B34                <1> 	mov si, [si]
  3423 000015ED C3                  <1> 	ret
  3424                              <1> 
  3425                              <1> ;=============================================================================
  3426                              <1> ;main_check_update_time ---- check if the time message needs update.
  3427                              <1> ;output:
  3428                              <1> ;	cf = 0 not changed
  3429                              <1> ;	cf = 1 changed
  3430                              <1> ;=============================================================================
  3431                              <1> main_check_update_time:
  3432 000015EE 50                  <1> 	push ax
  3433 000015EF B402                <1>         mov ah, 0x02
  3434 000015F1 CD1A                <1>         int 0x1a
  3435                              <1> 
  3436 000015F3 390E[CA32]          <1>         cmp [main_tmp.last_time], cx
  3437 000015F7 7407                <1>         je .end
  3438                              <1> 
  3439 000015F9 890E[CA32]          <1>         mov [main_tmp.last_time], cx
  3440 000015FD F9                  <1> 	stc
  3441 000015FE 58                  <1> 	pop ax
  3442 000015FF C3                  <1> 	ret
  3443                              <1> .end:
  3444 00001600 F8                  <1> 	clc
  3445 00001601 58                  <1> 	pop ax
  3446 00001602 C3                  <1>         ret
  3447                              <1> 
  3448                              <1> 
  3449                              <1> ;=============================================================================
  3450                              <1> ;main_check_delay_time ---- check if the delay time is up
  3451                              <1> ; output:
  3452                              <1> ;	cf = 0 not zero
  3453                              <1> ;	cf = 1 zero
  3454                              <1> ;=============================================================================
  3455                              <1> main_check_delay_time:
  3456 00001603 30E4                <1>         xor ah, ah                                      ; get time ticks
  3457 00001605 CD1A                <1>         int 0x1a                                        ;
  3458                              <1> 
  3459 00001607 3B16[C332]          <1>         cmp dx, [main_tmp.ticks_count]
  3460 0000160B 7304                <1>         jae .next_time                                  ; dx must greater than
  3461 0000160D 8916[C332]          <1>         mov [main_tmp.ticks_count], dx                  ; ticks_count
  3462                              <1> .next_time:
  3463 00001611 31C0                <1> 	xor ax, ax
  3464 00001613 89D1                <1>         mov cx, dx                                      ; every 18 ticks approxmiately
  3465 00001615 2B0E[C332]          <1>         sub cx, [main_tmp.ticks_count]                  ; equal to 1 second,
  3466 00001619 83F912              <1>         cmp cx, 18                                      ; decrease time_count
  3467 0000161C 7609                <1>         jbe .not_add                                    ; until to zero.
  3468 0000161E 8916[C332]          <1>         mov [main_tmp.ticks_count], dx
  3469 00001622 FE0E[C232]          <1>         dec byte [main_tmp.time_count]
  3470 00001626 40                  <1> 	inc ax
  3471                              <1> .not_add:
  3472 00001627 803E[C232]00        <1>         cmp byte [main_tmp.time_count], 0               ; if time is up, then
  3473 0000162C 7502                <1>         jne .no_up                                      ; send ESC key.
  3474 0000162E F9                  <1> 	stc
  3475 0000162F C3                  <1> 	ret
  3476                              <1> 
  3477                              <1> .no_up:
  3478 00001630 F8                  <1> 	clc
  3479 00001631 C3                  <1> 	ret
  3480                              <1> 
  3481                              <1> ;=============================================================================
  3482                              <1> ;get_event ---- get a event, if no key is pressed then count down the 
  3483                              <1> ;               delay time until to zero and send an EVENT_BOOT_DEFAULT event
  3484                              <1> ;input:
  3485                              <1> ;      none
  3486                              <1> ;output:
  3487                              <1> ;      ax = the key code
  3488                              <1> ;=============================================================================
  3489                              <1> get_event:
  3490 00001632 60                  <1> 	pusha
  3491                              <1> 
  3492 00001633 31C0                <1> 	xor ax, ax
  3493                              <1> 
  3494                              <1> .loop_get_event:
  3495 00001635 E8B6FF              <1> 	call main_check_update_time
  3496 00001638 7305                <1> 	jnc .no_update_time
  3497                              <1> 
  3498 0000163A B801F4              <1> 	mov ax, EVENT_REDRAW_ROOT
  3499 0000163D EB31                <1> 	jmp short .cont_loop
  3500                              <1> 
  3501                              <1> .no_update_time:
  3502                              <1> 
  3503 0000163F 803E[1A02]00        <1> 	cmp byte [ADDR_SBMK_DELAY_TIME], 0
  3504 00001644 741E                <1> 	je .no_count
  3505 00001646 803E[C532]00        <1> 	cmp byte [main_tmp.key_pressed], 0
  3506 0000164B 7517                <1> 	jne .no_count
  3507                              <1> 
  3508 0000164D E8B3FF              <1> 	call main_check_delay_time
  3509 00001650 7309                <1> 	jnc .has_delay
  3510 00001652 B802F4              <1> 	mov ax, EVENT_BOOT_DEFAULT
  3511 00001655 FE06[C532]          <1> 	inc byte [main_tmp.key_pressed]
  3512 00001659 EB15                <1> 	jmp short .cont_loop
  3513                              <1> 
  3514                              <1> .has_delay
  3515 0000165B 09C0                <1> 	or ax, ax
  3516 0000165D 7405                <1> 	jz .no_count
  3517 0000165F B801F4              <1> 	mov ax, EVENT_REDRAW_ROOT
  3518 00001662 EB0C                <1> 	jmp short .cont_loop
  3519                              <1> 
  3520                              <1> .no_count:
  3521 00001664 E86713              <1> 	call check_keyevent
  3522 00001667 09C0                <1> 	or ax, ax
  3523 00001669 7405                <1> 	jz .cont_loop
  3524                              <1> 
  3525                              <1> .key_pressed:
  3526 0000166B C606[C532]01        <1> 	mov byte [main_tmp.key_pressed], 1
  3527                              <1> 
  3528                              <1> .cont_loop:
  3529 00001670 09C0                <1> 	or ax, ax
  3530 00001672 74C1                <1> 	jz .loop_get_event
  3531                              <1> 
  3532 00001674 A3[C632]            <1> 	mov [main_tmp.keycode], ax
  3533 00001677 61                  <1> 	popa
  3534 00001678 A1[C632]            <1> 	mov ax, [main_tmp.keycode]
  3535 0000167B C3                  <1> 	ret
  3536                              <1>         
  3537                              <1> 
  3538                              <1> ;=============================================================================
  3539                              <1> ; main_auth_record_action
  3540                              <1> ;=============================================================================
  3541                              <1> main_auth_record_action:
  3542 0000167C B0D0                <1> 	mov al, ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
  3543                              <1> 
  3544                              <1> ;=============================================================================
  3545                              <1> ; main_auth_action  ---- auth an action
  3546                              <1> ; input:
  3547                              <1> ;	al = auth type
  3548                              <1> ; output:
  3549                              <1> ;	cf = 0, success
  3550                              <1> ;	cf = 1, failed
  3551                              <1> ;=============================================================================
  3552                              <1> main_auth_action:
  3553 0000167E 60                  <1> 	pusha
  3554                              <1> 
  3555 0000167F A810                <1> 	test al, ACTFLAG_CHK_RECNUM
  3556 00001681 7407                <1> 	jz .test_security
  3557                              <1> 
  3558 00001683 803E[3744]00        <1> 	cmp byte [GOOD_RECORD_NUMBER], 0
  3559 00001688 7427                <1> 	jz .auth_failed
  3560                              <1> 
  3561                              <1> .test_security:
  3562 0000168A 803E[C932]00        <1>         cmp byte [main_tmp.root_login], 0
  3563 0000168F 7514                <1>         jnz .auth_ok
  3564                              <1> 
  3565 00001691 F606[1902]02        <1> 	test byte [ADDR_SBMK_FLAGS], KNLFLAG_SECURITY
  3566 00001696 7404                <1> 	jz .test_root
  3567                              <1> 
  3568 00001698 A880                <1> 	test al, ACTFLAG_AUTH_SECURITY
  3569 0000169A 7504                <1> 	jnz .auth_root
  3570                              <1> 
  3571                              <1> .test_root:
  3572 0000169C A820                <1> 	test al, ACTFLAG_AUTH_ROOT
  3573 0000169E 7408                <1> 	jz .test_record
  3574                              <1> 
  3575                              <1> .auth_root:
  3576 000016A0 E81100              <1> 	call main_confirm_root_passwd
  3577 000016A3 720C                <1> 	jc .auth_failed
  3578                              <1> 
  3579                              <1> .auth_ok:
  3580 000016A5 F8                  <1> 	clc
  3581 000016A6 61                  <1> 	popa
  3582 000016A7 C3                  <1> 	ret
  3583                              <1> 
  3584                              <1> .test_record:
  3585 000016A8 A840                <1> 	test al, ACTFLAG_AUTH_RECORD
  3586 000016AA 74F9                <1> 	jz .auth_ok
  3587 000016AC E82100              <1> 	call main_confirm_record_passwd
  3588 000016AF 73F4                <1> 	jnc .auth_ok
  3589                              <1> 
  3590                              <1> .auth_failed:
  3591 000016B1 F9                  <1> 	stc
  3592 000016B2 61                  <1> 	popa
  3593 000016B3 C3                  <1> 	ret
  3594                              <1> 
  3595                              <1> 	
  3596                              <1> ;=============================================================================
  3597                              <1> ;main_confirm_root_passwd ---- confirm the root password
  3598                              <1> ;input:
  3599                              <1> ;      none
  3600                              <1> ;output:
  3601                              <1> ;      cf = 0 success
  3602                              <1> ;      cf = 1 failed or cancel
  3603                              <1> ;=============================================================================
  3604                              <1> main_confirm_root_passwd:
  3605 000016B4 60                  <1>         pusha
  3606 000016B5 8B1E[1D02]          <1>         mov bx, [ADDR_SBMK_ROOT_PASSWORD]
  3607 000016B9 8B0E[1F02]          <1>         mov cx, [ADDR_SBMK_ROOT_PASSWORD+2]
  3608 000016BD 09DB                <1>         or bx, bx
  3609 000016BF 7506                <1>         jnz .have_password
  3610 000016C1 09C9                <1>         or cx, cx
  3611 000016C3 7502                <1>         jnz .have_password
  3612 000016C5 EB07                <1>         jmp short .auth_ok
  3613                              <1>         
  3614                              <1> .have_password:                                     
  3615 000016C7 8B36[8646]          <1>         mov si, [str_idx.root_passwd]               ; check root
  3616 000016CB E81F00              <1>         call main_confirm_passwd                    ; password
  3617                              <1> .auth_ok:
  3618 000016CE 61                  <1>         popa
  3619 000016CF C3                  <1>         ret
  3620                              <1> 
  3621                              <1> ;=============================================================================
  3622                              <1> ;main_confirm_record_passwd ---- confirm the record password
  3623                              <1> ;=============================================================================
  3624                              <1> main_confirm_record_passwd:
  3625 000016D0 60                  <1>         pusha
  3626 000016D1 E89800              <1>         call main_get_focus_record_pointer
  3627 000016D4 8B5C0E              <1>         mov bx, [si + struc_bootrecord.password]
  3628 000016D7 8B4C10              <1>         mov cx, [si + struc_bootrecord.password+2]
  3629 000016DA 09DB                <1>         or bx, bx
  3630 000016DC 7506                <1>         jnz .have_password
  3631 000016DE 09C9                <1>         or cx, cx
  3632 000016E0 7502                <1>         jnz .have_password
  3633 000016E2 EB07                <1>         jmp short .auth_ok
  3634                              <1>         
  3635                              <1> .have_password:
  3636 000016E4 8B36[8A46]          <1>         mov si, [str_idx.record_passwd]             ; check record
  3637 000016E8 E80200              <1>         call main_confirm_passwd                    ; password
  3638                              <1> .auth_ok:
  3639 000016EB 61                  <1>         popa
  3640 000016EC C3                  <1>         ret
  3641                              <1> 
  3642                              <1> ;=============================================================================
  3643                              <1> ;main_confirm_passwd ---- let user input a password and confirm it.
  3644                              <1> ;input:
  3645                              <1> ;      bx:cx = password
  3646                              <1> ;      ds:si -> message string
  3647                              <1> ;output:
  3648                              <1> ;      cf = 0 success
  3649                              <1> ;      cf = 1 failed or cancel
  3650                              <1> ;=============================================================================
  3651                              <1> main_confirm_passwd:
  3652 000016ED 803E[C932]00        <1>         cmp byte [main_tmp.root_login],0       ; check if root has logined
  3653 000016F2 751F                <1>         jnz .ok
  3654                              <1> 
  3655 000016F4 51                  <1> 	push cx
  3656 000016F5 B110                <1> 	mov cl, MAX_PASSWORD_LENGTH
  3657 000016F7 E86408              <1>         call input_password
  3658 000016FA 59                  <1> 	pop cx
  3659 000016FB 721F                <1>         jc .cancel
  3660                              <1> 
  3661 000016FD 39C3                <1>         cmp bx, ax
  3662 000016FF 7506                <1>         jne .cmp_root
  3663 00001701 39D1                <1>         cmp cx, dx
  3664 00001703 7502                <1>         jne .cmp_root
  3665 00001705 EB0C                <1>         jmp .ok
  3666                              <1>         
  3667                              <1> .cmp_root:
  3668 00001707 3906[1D02]          <1>         cmp [ADDR_SBMK_ROOT_PASSWORD], ax
  3669 0000170B 7508                <1>         jne .failed
  3670 0000170D 3916[1F02]          <1>         cmp [ADDR_SBMK_ROOT_PASSWORD+2], dx
  3671 00001711 7502                <1>         jne .failed
  3672                              <1> .ok:
  3673 00001713 F8                  <1>         clc
  3674 00001714 C3                  <1>         ret
  3675                              <1>         
  3676                              <1> .failed:
  3677 00001715 8B36[C446]          <1>         mov si, [str_idx.wrong_passwd]
  3678 00001719 E81F06              <1>         call error_box
  3679                              <1>         
  3680                              <1> .cancel:
  3681 0000171C F9                  <1>         stc
  3682 0000171D C3                  <1>         ret
  3683                              <1> 
  3684                              <1> ;=============================================================================
  3685                              <1> ; main_show_disk_error ---- show the disk error box.
  3686                              <1> ;=============================================================================
  3687                              <1> main_show_disk_error:
  3688 0000171E 8B36[C646]          <1>         mov si, [str_idx.disk_error]
  3689 00001722 BF[513B]            <1>         mov di, main_tmp.dialog_buf
  3690 00001725 57                  <1>         push di
  3691 00001726 E88410              <1>         call strcpy
  3692 00001729 E88E20              <1> 	call get_last_disk_errno
  3693 0000172C B102                <1>         mov cl, 2
  3694 0000172E E8AC10              <1>         call htoa
  3695 00001731 5E                  <1>         pop si
  3696 00001732 E80606              <1>         call error_box
  3697 00001735 C3                  <1>         ret
  3698                              <1> 
  3699                              <1> 
  3700                              <1> ;=============================================================================
  3701                              <1> ;>>>>>>>>>>>>>>>>>>>>>>>>>> Miscellaneous Functions <<<<<<<<<<<<<<<<<<<<<<<<<<
  3702                              <1> ;=============================================================================
  3703                              <1> 
  3704                              <1> ;=============================================================================
  3705                              <1> ;main_recheck_same_records ---- recheck all records that same as given record
  3706                              <1> ;input:
  3707                              <1> ;      ds:si -> record
  3708                              <1> ;output:
  3709                              <1> ;      cf = 0  success
  3710                              <1> ;      cf = 1  failed
  3711                              <1> ;=============================================================================
  3712                              <1> main_recheck_same_records:
  3713 00001736 60                  <1>         pusha
  3714 00001737 8B4402              <1>         mov ax, [si + struc_bootrecord.drive_id]
  3715 0000173A 668B5C06            <1>         mov ebx, [si + struc_bootrecord.father_abs_addr]
  3716 0000173E 668B540A            <1>         mov edx, [si + struc_bootrecord.abs_addr]
  3717                              <1> 
  3718 00001742 8D36[3202]          <1>         lea si, [ADDR_SBMK_BOOT_RECORDS]
  3719 00001746 B92000              <1>         mov cx, MAX_RECORD_NUM
  3720                              <1> 
  3721                              <1> .loop_check:
  3722 00001749 F60401              <1>         test byte [si + struc_bootrecord.flags], DRVFLAG_DRIVEOK
  3723 0000174C 7416                <1>         jz .check_next
  3724 0000174E 394402              <1>         cmp [si + struc_bootrecord.drive_id], ax
  3725 00001751 7511                <1>         jne .check_next
  3726 00001753 66395C06            <1>         cmp [si + struc_bootrecord.father_abs_addr], ebx
  3727 00001757 750B                <1>         jne .check_next
  3728 00001759 6639540A            <1>         cmp [si + struc_bootrecord.abs_addr], edx
  3729 0000175D 7505                <1>         jne .check_next
  3730                              <1> 
  3731 0000175F E84715              <1>         call check_bootrecord
  3732 00001762 7206                <1>         jc .end
  3733                              <1> 
  3734                              <1> .check_next:
  3735 00001764 83C640              <1>         add si, SIZE_OF_BOOTRECORD
  3736 00001767 E2E0                <1>         loop .loop_check
  3737 00001769 F8                  <1>         clc
  3738                              <1> .end:
  3739 0000176A 61                  <1>         popa
  3740 0000176B C3                  <1>         ret
  3741                              <1> 
  3742                              <1> ;=============================================================================
  3743                              <1> ;main_get_focus_record_pointer ---- get current boot record's pointer
  3744                              <1> ;input:
  3745                              <1> ;	none
  3746                              <1> ;output:
  3747                              <1> ;       ds:si -> record pointer
  3748                              <1> ;=============================================================================
  3749                              <1> main_get_focus_record_pointer:
  3750 0000176C 31F6                <1>         xor si, si
  3751 0000176E 803E[3744]00        <1>         cmp byte [GOOD_RECORD_NUMBER], 0
  3752 00001773 7409                <1>         jz .end
  3753 00001775 51                  <1> 	push cx
  3754 00001776 8A0E[3844]          <1> 	mov cl, [FOCUS_RECORD]
  3755 0000177A E80200              <1> 	call main_get_record_pointer
  3756 0000177D 59                  <1> 	pop cx
  3757                              <1> .end:
  3758 0000177E C3                  <1> 	ret
  3759                              <1> 
  3760                              <1> ;=============================================================================
  3761                              <1> ;main_get_record_pointer ---- get boot record's pointer
  3762                              <1> ;input:
  3763                              <1> ;      cl = record index in good record list
  3764                              <1> ;output:
  3765                              <1> ;      cl = real index in boot_records list
  3766                              <1> ;      ds:si -> record pointer
  3767                              <1> ;=============================================================================
  3768                              <1> main_get_record_pointer:
  3769 0000177F 50                  <1>         push ax
  3770 00001780 30ED                <1>         xor ch, ch
  3771 00001782 BE[A232]            <1>         mov si, main_tmp.good_record_list       ;
  3772 00001785 01CE                <1>         add si, cx                              ;
  3773 00001787 AC                  <1>         lodsb                                   ;
  3774 00001788 50                  <1> 	push ax
  3775                              <1> 
  3776 00001789 B140                <1>         mov cl, SIZE_OF_BOOTRECORD              ; get the pointer to
  3777 0000178B F6E1                <1>         mul cl                                  ; the record.
  3778 0000178D BE[3202]            <1>         mov si, ADDR_SBMK_BOOT_RECORDS          ;
  3779 00001790 01C6                <1>         add si, ax                              ;
  3780 00001792 59                  <1> 	pop cx
  3781 00001793 30ED                <1> 	xor ch, ch
  3782 00001795 58                  <1>         pop ax
  3783 00001796 C3                  <1>         ret
  3784                              <1> 
  3785                              <1> ;=============================================================================
  3786                              <1> ;main_boot_default ---- boot the default record
  3787                              <1> ;=============================================================================
  3788                              <1> main_boot_default:
  3789 00001797 8A26[1C02]          <1>         mov ah, [ADDR_SBMK_DEFAULT_BOOT]
  3790 0000179B BE[A232]            <1>         mov si, main_tmp.good_record_list
  3791 0000179E 0FB60E[3744]        <1>         movzx cx, [GOOD_RECORD_NUMBER]
  3792 000017A3 08C9                <1>         or cl, cl
  3793 000017A5 7408                <1>         jz .no_default
  3794 000017A7 FC                  <1>         cld
  3795                              <1> 
  3796                              <1> .loop_search:
  3797 000017A8 AC                  <1>         lodsb
  3798 000017A9 38E0                <1>         cmp al, ah
  3799 000017AB 7403                <1>         je .found_it
  3800 000017AD E2F9                <1>         loop .loop_search
  3801                              <1>         
  3802                              <1> .no_default:                                ; no default record, do nothing.
  3803 000017AF C3                  <1>         ret
  3804                              <1>         
  3805                              <1> .found_it:
  3806 000017B0 50                  <1> 	push ax
  3807 000017B1 E82A01              <1> 	call main_hide_auto_hides
  3808 000017B4 58                  <1> 	pop ax
  3809 000017B5 30E4                <1> 	xor ah, ah
  3810 000017B7 E80100              <1>         call main_do_boot_record
  3811 000017BA C3                  <1>         ret
  3812                              <1>         
  3813                              <1> ;=============================================================================
  3814                              <1> ;main_do_boot_record ---- really boot the given record.
  3815                              <1> ;input:
  3816                              <1> ;      ax =  the boot record number.
  3817                              <1> ;=============================================================================
  3818                              <1> main_do_boot_record:
  3819 000017BB B340                <1>         mov bl, SIZE_OF_BOOTRECORD
  3820 000017BD F6E3                <1>         mul bl
  3821                              <1> 
  3822 000017BF BE[3202]            <1>         mov si, ADDR_SBMK_BOOT_RECORDS
  3823 000017C2 01C6                <1>         add si, ax
  3824                              <1> 
  3825 000017C4 8B1C                <1> 	mov bx, [si + struc_bootrecord.flags]
  3826                              <1> 
  3827 000017C6 F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  3828 000017CA 7405                <1> 	jz .boot_drv_part
  3829                              <1> 
  3830 000017CC E85A00              <1> 	call main_do_special_record
  3831 000017CF EB57                <1> 	jmp short .end
  3832                              <1> 
  3833                              <1> .boot_drv_part:
  3834                              <1> %ifndef DISABLE_CDBOOT
  3835 000017D1 F7C31000            <1> 	test bx, DRVFLAG_ISCDROM
  3836 000017D5 743C                <1> 	jz .normal_boot
  3837                              <1> 
  3838 000017D7 8A5402              <1> 	mov dl, [si + struc_bootrecord.drive_id]
  3839 000017DA BF[0728]            <1> 	mov di, knl_tmp.disk_buf2
  3840 000017DD E8B21F              <1> 	call get_cdrom_boot_catalog
  3841 000017E0 723B                <1> 	jc .disk_error
  3842                              <1> 
  3843 000017E2 56                  <1> 	push si
  3844 000017E3 89FE                <1> 	mov si, di
  3845 000017E5 BF[0720]            <1> 	mov di, knl_tmp.disk_buf1
  3846 000017E8 E82B1B              <1> 	call find_cdboot_catalog
  3847 000017EB 5E                  <1> 	pop si
  3848                              <1> 
  3849 000017EC 09C9                <1> 	or cx, cx
  3850 000017EE 7431                <1> 	jz .no_system
  3851 000017F0 83F901              <1> 	cmp cx, 1
  3852 000017F3 740F                <1> 	je .go_boot_cdrom
  3853                              <1> 
  3854 000017F5 56                  <1> 	push si
  3855 000017F6 89FE                <1> 	mov si, di
  3856 000017F8 E86901              <1> 	call main_choose_cdimg
  3857 000017FB 5E                  <1> 	pop si
  3858 000017FC 722A                <1> 	jc .end
  3859                              <1> 
  3860 000017FE B120                <1> 	mov cl, SIZE_OF_BOOT_CATALOG
  3861 00001800 F6E1                <1> 	mul cl
  3862                              <1> 
  3863 00001802 01C7                <1> 	add di, ax
  3864                              <1> 
  3865                              <1> .go_boot_cdrom:
  3866 00001804 52                  <1> 	push dx
  3867 00001805 57                  <1> 	push di
  3868 00001806 E8451B              <1>         call preload_keystrokes     ; preload the keystrokes into key buffer.
  3869 00001809 E80104              <1>         call reset_video_mode
  3870 0000180C 5F                  <1> 	pop di
  3871 0000180D 5A                  <1> 	pop dx
  3872 0000180E E8A61A              <1> 	call boot_cdrom
  3873 00001811 EB03                <1> 	jmp short .boot_fail
  3874                              <1> 
  3875                              <1> %endif
  3876                              <1> 
  3877                              <1> .normal_boot:
  3878 00001813 E8E119              <1>         call boot_normal_record
  3879                              <1> 
  3880                              <1> .boot_fail:
  3881 00001816 E825FB              <1> 	call main_init_video
  3882                              <1> 
  3883 00001819 08C0                <1>         or al, al
  3884 0000181B 7404                <1>         jz .no_system
  3885                              <1> 
  3886                              <1> .disk_error:
  3887 0000181D E8FEFE              <1>         call main_show_disk_error
  3888 00001820 C3                  <1>         ret
  3889                              <1> 
  3890                              <1> .no_system:
  3891 00001821 8B36[CC46]          <1>         mov si, [str_idx.no_system]
  3892 00001825 E81305              <1>         call error_box
  3893                              <1> 
  3894                              <1> .end:
  3895 00001828 C3                  <1>         ret
  3896                              <1>         
  3897                              <1> 
  3898                              <1> ;=============================================================================
  3899                              <1> ;main_do_special_record ---- execute a special boot record.
  3900                              <1> ;input:
  3901                              <1> ;      si ->  the boot record.
  3902                              <1> ;=============================================================================
  3903                              <1> main_do_special_record:
  3904 00001829 E8E103              <1> 	call reset_video_mode
  3905 0000182C 8A4404              <1> 	mov al, [si + struc_bootrecord.type]
  3906                              <1> 
  3907 0000182F 3C02                <1> 	cmp al, SPREC_POWEROFF
  3908 00001831 7503                <1> 	jne .chk_rst
  3909 00001833 E81D10              <1> 	call power_off
  3910                              <1> 
  3911                              <1> .chk_rst:
  3912 00001836 3C03                <1> 	cmp al, SPREC_RESTART
  3913 00001838 7503                <1> 	jne .chk_quit
  3914 0000183A E83B11              <1> 	call reboot
  3915                              <1> 
  3916                              <1> .chk_quit:
  3917 0000183D 3C01                <1> 	cmp al, SPREC_QUIT
  3918 0000183F 7502                <1> 	jne .chk_bootprev
  3919                              <1> 
  3920                              <1> %ifdef EMULATE_PROG
  3921                              <1>         mov ax, 0x4c00                          ; exit to dos
  3922                              <1>         int 0x21                                ;
  3923                              <1> %else
  3924 00001841 CD18                <1>         int 0x18                                ; return to BIOS
  3925                              <1> %endif
  3926                              <1> 
  3927                              <1> .chk_bootprev:
  3928 00001843 3C00                <1> 	cmp al, SPREC_BOOTPREV
  3929 00001845 7503                <1> 	jne .end
  3930 00001847 E8DA00              <1> 	call main_boot_prev_mbr
  3931                              <1> 
  3932                              <1> .end:
  3933 0000184A C3                  <1> 	ret
  3934                              <1> 
  3935                              <1> ;=============================================================================
  3936                              <1> ;main_do_schedule ---- implement the schedule table
  3937                              <1> ;input:
  3938                              <1> ;      none
  3939                              <1> ;output:
  3940                              <1> ;      default_boot set to the scheduled record
  3941                              <1> ;=============================================================================
  3942                              <1> main_do_schedule:
  3943 0000184B 60                  <1>         pusha
  3944 0000184C E8FE11              <1>         call get_realtime
  3945 0000184F 723A                <1>         jc .end
  3946                              <1> 
  3947 00001851 A3[CC32]            <1>         mov [main_tmp.schedule_begin], ax
  3948 00001854 8916[D032]          <1>         mov [main_tmp.schedule_day], dx
  3949 00001858 31C9                <1>         xor cx, cx
  3950 0000185A BE[3202]            <1>         mov si, ADDR_SBMK_BOOT_RECORDS
  3951                              <1> 
  3952                              <1> .loop_check:
  3953 0000185D F7040080            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_SCHEDULED
  3954 00001861 741E                <1>         jz .check_next
  3955                              <1> 
  3956 00001863 E84314              <1>         call check_bootrecord
  3957 00001866 7219                <1>         jc .check_next
  3958                              <1> 
  3959 00001868 E8F518              <1>         call get_record_schedule
  3960                              <1> 
  3961 0000186B 3906[CC32]          <1>         cmp [main_tmp.schedule_begin], ax 
  3962 0000186F 7210                <1>         jb .check_next
  3963 00001871 391E[CC32]          <1>         cmp [main_tmp.schedule_begin], bx
  3964 00001875 770A                <1>         ja .check_next
  3965                              <1> 
  3966 00001877 8516[D032]          <1>         test dx, [main_tmp.schedule_day]
  3967 0000187B 7404                <1>         jz .check_next
  3968                              <1> 
  3969 0000187D 880E[1C02]          <1>         mov [ADDR_SBMK_DEFAULT_BOOT], cl
  3970                              <1> 
  3971                              <1> .check_next:
  3972 00001881 FEC1                <1>         inc cl
  3973 00001883 83C640              <1>         add si, SIZE_OF_BOOTRECORD
  3974 00001886 80F920              <1>         cmp cl, MAX_RECORD_NUM
  3975 00001889 72D2                <1>         jb .loop_check
  3976                              <1> 
  3977                              <1> .end:
  3978 0000188B 61                  <1>         popa
  3979 0000188C C3                  <1>         ret
  3980                              <1> 
  3981                              <1> ;=============================================================================
  3982                              <1> ;main_save_boot_manager ---- save boot manager to disk.
  3983                              <1> ;input:
  3984                              <1> ;      none
  3985                              <1> ;output:
  3986                              <1> ;      cf = 0 success
  3987                              <1> ;      cf = 1 failed
  3988                              <1> ;=============================================================================
  3989                              <1> main_save_boot_manager:
  3990 0000188D 60                  <1> 	pusha
  3991 0000188E 06                  <1> 	push es
  3992 0000188F 1E                  <1> 	push ds
  3993                              <1> 
  3994                              <1> ; Backup the menus' pos
  3995 00001890 A1[1744]            <1> 	mov ax, [main_windows_data.boot_menu + struc_window.win_pos]
  3996 00001893 A3[2A02]            <1> 	mov [ADDR_SBMK_BOOT_MENU_POS], ax
  3997 00001896 A1[4244]            <1> 	mov ax, [main_windows_data.main_menu + struc_window.win_pos]
  3998 00001899 A3[2C02]            <1> 	mov [ADDR_SBMK_MAIN_MENU_POS], ax
  3999 0000189C A1[6D44]            <1> 	mov ax, [main_windows_data.record_menu + struc_window.win_pos]
  4000 0000189F A3[2E02]            <1> 	mov [ADDR_SBMK_RECORD_MENU_POS], ax
  4001 000018A2 A1[9844]            <1> 	mov ax, [main_windows_data.sys_menu + struc_window.win_pos]
  4002 000018A5 A3[3002]            <1> 	mov [ADDR_SBMK_SYS_MENU_POS], ax
  4003                              <1> 
  4004                              <1> ; ;calculate checksum
  4005                              <1> ; 	push es
  4006                              <1> ; 	pop ds
  4007                              <1> ; 
  4008                              <1> ; 	xor si, si
  4009                              <1> ; 	mov cx, end_of_kernel - start_of_kernel
  4010                              <1> ; 	mov byte [ADDR_SBMK_CHECKSUM], 0
  4011                              <1> ; 	call calc_checksum                      ; calculate the checksum.
  4012                              <1> ; 	neg bl
  4013                              <1> ; 	mov [ADDR_SBMK_CHECKSUM], bl
  4014                              <1> 
  4015 000018A8 8A16107E            <1> 	mov dl, [Boot_Drive]
  4016 000018AC 8D36[0002]          <1> 	lea si, [ADDR_SBMK_BLOCK_MAP]
  4017 000018B0 B90500              <1> 	mov cx, SBM_SAVE_NBLKS
  4018 000018B3 31FF                <1> 	xor di, di
  4019                              <1> 
  4020 000018B5 1F                  <1> 	pop ds
  4021                              <1> 
  4022                              <1> .loop_save_blk:
  4023 000018B6 51                  <1> 	push cx
  4024                              <1> 
  4025 000018B7 AC                  <1> 	lodsb
  4026 000018B8 88C1                <1> 	mov cl, al			; number of sectors for this block
  4027 000018BA 66AD                <1> 	lodsd
  4028 000018BC 6689C3              <1> 	mov ebx,eax			; lba address for this block
  4029                              <1>         
  4030 000018BF B80103              <1> 	mov ax, ( INT13H_WRITE << 8 ) | 1 
  4031                              <1> 
  4032 000018C2 F8                  <1> 	clc
  4033 000018C3 09C9                <1> 	or cx, cx
  4034 000018C5 7413                <1> 	jz .write_end
  4035                              <1> 
  4036                              <1> .loop_write:
  4037 000018C7 E8AB1E              <1> 	call disk_access
  4038 000018CA 720E                <1> 	jc .write_end
  4039                              <1>         
  4040 000018CC 81C70002            <1> 	add di, SECTOR_SIZE
  4041 000018D0 6643                <1> 	inc ebx
  4042 000018D2 E2F3                <1> 	loop .loop_write
  4043                              <1> 
  4044 000018D4 59                  <1> 	pop cx
  4045 000018D5 E2DF                <1> 	loop .loop_save_blk
  4046                              <1> 
  4047 000018D7 F8                  <1> 	clc
  4048 000018D8 EB01                <1> 	jmp short .end
  4049                              <1> 
  4050                              <1> .write_end:
  4051 000018DA 59                  <1> 	pop cx
  4052                              <1> 
  4053                              <1> .end:
  4054 000018DB 07                  <1> 	pop es
  4055 000018DC 61                  <1> 	popa
  4056 000018DD C3                  <1> 	ret
  4057                              <1> 
  4058                              <1> 
  4059                              <1> ;=============================================================================
  4060                              <1> ;main_hide_auto_hides ---- hide all partitions that marked auto hide,
  4061                              <1> ;                          except the focus record.
  4062                              <1> ;input:
  4063                              <1> ;      none
  4064                              <1> ;output:
  4065                              <1> ;      cf = 0 success
  4066                              <1> ;      cf = 1 failed
  4067                              <1> ;=============================================================================
  4068                              <1> main_hide_auto_hides:
  4069 000018DE 0FB60E[3744]        <1>         movzx cx, byte [GOOD_RECORD_NUMBER]
  4070 000018E3 08C9                <1>         or cl, cl                               ; if no good record then go to
  4071 000018E5 7429                <1>         jz .end_ok                              ; init directly.
  4072                              <1> 
  4073 000018E7 86E9                <1> 	xchg ch, cl
  4074                              <1>         
  4075                              <1> ; hide all auto hide partitions.
  4076                              <1> .loop_hide:
  4077 000018E9 3A0E[3844]          <1>         cmp cl, [FOCUS_RECORD]                  ; do not hide the focus record.
  4078 000018ED 741B                <1>         je .not_hide
  4079                              <1> 
  4080 000018EF 51                  <1> 	push cx
  4081 000018F0 E88CFE              <1> 	call main_get_record_pointer
  4082 000018F3 59                  <1> 	pop cx
  4083                              <1> 
  4084 000018F4 8B04                <1>         mov ax, [si + struc_bootrecord.flags]
  4085 000018F6 A90004              <1>         test ax, INFOFLAG_AUTOHIDE
  4086 000018F9 740F                <1>         jz .not_hide
  4087 000018FB A90002              <1>         test ax, INFOFLAG_HIDDEN
  4088 000018FE 750A                <1>         jnz .not_hide
  4089                              <1> 
  4090 00001900 E8B217              <1>         call toggle_record_hidden
  4091 00001903 720D                <1>         jc .hidden_error
  4092                              <1> 
  4093 00001905 E82EFE              <1>         call main_recheck_same_records
  4094 00001908 720C                <1>         jc .disk_error
  4095                              <1> 
  4096                              <1> .not_hide:
  4097 0000190A FEC1                <1>         inc cl
  4098 0000190C 38E9                <1>         cmp cl, ch
  4099 0000190E 72D9                <1>         jb .loop_hide
  4100                              <1>         
  4101                              <1> .end_ok:
  4102 00001910 F8                  <1>         clc
  4103 00001911 C3                  <1>         ret
  4104                              <1>         
  4105                              <1> .hidden_error:
  4106 00001912 09C0                <1>         or ax, ax
  4107 00001914 7405                <1>         jz .cannot_hide
  4108                              <1> 
  4109                              <1> .disk_error:
  4110 00001916 E805FE              <1>         call main_show_disk_error
  4111 00001919 EB07                <1>         jmp short .end
  4112                              <1> 
  4113                              <1> .cannot_hide:
  4114 0000191B 8B36[CA46]          <1>         mov si, [str_idx.toggle_hid_failed]
  4115 0000191F E81904              <1>         call error_box
  4116                              <1> .end:
  4117 00001922 F9                  <1>         stc
  4118 00001923 C3                  <1>         ret
  4119                              <1> 
  4120                              <1> ;=============================================================================
  4121                              <1> ; main_boot_prev_mbr ---- boot previous MBR
  4122                              <1> ;=============================================================================
  4123                              <1> main_boot_prev_mbr:
  4124                              <1> ; read partition table
  4125 00001924 06                  <1>         push es
  4126 00001925 6631DB              <1>         xor ebx, ebx
  4127 00001928 8EC3                <1>         mov es, bx
  4128 0000192A 8A16107E            <1>         mov dl, [Boot_Drive]
  4129 0000192E BF007C              <1>         mov di, 7C00h
  4130 00001931 B80102              <1>         mov ax, (INT13H_READ << 8) | 0x01
  4131 00001934 E83E1E              <1>         call disk_access
  4132 00001937 07                  <1>         pop es
  4133 00001938 7226                <1>         jc .disk_failed
  4134                              <1> 
  4135 0000193A 52                  <1>         push dx
  4136 0000193B 57                  <1>         push di
  4137 0000193C E80CF2              <1>         call main_ask_save_changes
  4138 0000193F E89CFF              <1>         call main_hide_auto_hides
  4139 00001942 E8C802              <1>         call reset_video_mode
  4140 00001945 5F                  <1>         pop di
  4141 00001946 5A                  <1>         pop dx
  4142                              <1> 
  4143 00001947 E8C71E              <1> 	call uninstall_myint13h
  4144                              <1> 
  4145                              <1> ; copy previous mbr to Boot Offset 0x7c00
  4146 0000194A FC                  <1>         cld
  4147 0000194B B9BE01              <1>         mov cx, SIZE_OF_MBR
  4148                              <1> ;        lea si, [ADDR_SBMK_PREVIOUS_MBR]
  4149 0000194E 31C0                <1>         xor ax, ax
  4150 00001950 50                  <1>         push ax
  4151 00001951 07                  <1>         pop es
  4152 00001952 F3A4                <1>         rep movsb
  4153                              <1> 
  4154 00001954 50                  <1>         push ax
  4155 00001955 1F                  <1>         pop ds
  4156                              <1> 
  4157 00001956 31ED                <1>         xor bp, bp                          ; might help some boot problems
  4158 00001958 B855AA              <1>         mov ax, BR_GOOD_FLAG                ; boot signature (just in case ...)
  4159 0000195B EA007C0000          <1>         jmp 0:7C00h                         ; jump to the  boot sector
  4160                              <1> 
  4161                              <1> .disk_failed:
  4162 00001960 E8BBFD              <1>         call main_show_disk_error
  4163                              <1> .end:
  4164 00001963 C3                  <1>         ret
  4165                              <1> 
  4166                              <1> 
  4167                              <1> ;==============================================================================
  4168                              <1> ; CD-ROM Boot Stuff
  4169                              <1> ;==============================================================================
  4170                              <1> 
  4171                              <1> %ifndef DISABLE_CDBOOT
  4172                              <1> ;==============================================================================
  4173                              <1> ;main_choose_cdimg ---- let user choose a cdimg to boot
  4174                              <1> ;input ds:si -> buffer to store boot catalogs
  4175                              <1> ;      cl = number of entries
  4176                              <1> ;output cf =0 ok, al = user choice
  4177                              <1> ;       cf =1 cancel
  4178                              <1> ;==============================================================================
  4179                              <1> main_choose_cdimg:
  4180 00001964 53                  <1> 	push bx
  4181 00001965 51                  <1> 	push cx
  4182 00001966 52                  <1> 	push dx
  4183 00001967 56                  <1> 	push si
  4184                              <1> 
  4185 00001968 31D2                <1> 	xor dx, dx
  4186 0000196A 8936[B219]          <1> 	mov [.catalogs_buf], si
  4187 0000196E 8A2E[2046]          <1> 	mov ch, [size.list_box_win_height]
  4188 00001972 BB[4447]            <1> 	mov bx, str_idx.cdimg_menu_title
  4189                              <1> 
  4190 00001975 BE[8219]            <1> 	mov si, .item_str_proc
  4191 00001978 E84D08              <1> 	call list_box
  4192 0000197B 88C8                <1> 	mov al, cl
  4193                              <1> 
  4194 0000197D 5E                  <1> 	pop si
  4195 0000197E 5A                  <1> 	pop dx
  4196 0000197F 59                  <1> 	pop cx
  4197 00001980 5B                  <1> 	pop bx
  4198 00001981 C3                  <1> 	ret
  4199                              <1> 
  4200                              <1> .item_str_proc:
  4201 00001982 8B36[B219]          <1> 	mov si, [.catalogs_buf]
  4202 00001986 BF[513B]            <1> 	mov di, main_tmp.dialog_buf
  4203 00001989 57                  <1> 	push di
  4204 0000198A B82000              <1> 	mov ax, SIZE_OF_BOOT_CATALOG
  4205 0000198D F6E1                <1> 	mul cl
  4206 0000198F 01C6                <1> 	add si, ax
  4207                              <1> 
  4208 00001991 89C8                <1> 	mov ax, cx
  4209 00001993 B102                <1> 	mov cl, 2
  4210 00001995 E86E0D              <1> 	call itoa
  4211 00001998 83C702              <1> 	add di, 2
  4212 0000199B B82E20              <1> 	mov ax, '. '
  4213 0000199E FC                  <1> 	cld
  4214 0000199F AB                  <1> 	stosw
  4215                              <1> 
  4216 000019A0 0FB64401            <1> 	movzx ax, [si + struc_boot_catalog.media_type]
  4217                              <1> 
  4218 000019A4 D0E0                <1> 	shl al, 1
  4219                              <1> 
  4220 000019A6 BE[4647]            <1> 	mov si, str_idx.cdimg_menu_strings
  4221 000019A9 01C6                <1> 	add si, ax
  4222 000019AB 8B34                <1> 	mov si, [si]
  4223 000019AD E8FD0D              <1> 	call strcpy
  4224 000019B0 5E                  <1> 	pop si
  4225 000019B1 C3                  <1> 	ret
  4226                              <1> 
  4227 000019B2 0000                <1> .catalogs_buf dw 0
  4228                              <1> 
  4229                              <1> %endif
  4230                                  %include "ui.asm"
  4231                              <1> ; asmsyntax=nasm
  4232                              <1> ;
  4233                              <1> ; ui.asm
  4234                              <1> ;
  4235                              <1> ; Functions for User Interface
  4236                              <1> ;
  4237                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
  4238                              <1> ;
  4239                              <1> 
  4240                              <1> %define DIRECT_DRAW
  4241                              <1> 
  4242                              <1> %define SCR_BUF_SEG0    0xB800
  4243                              <1> %define SCR_BUF_SEG1    0xB900
  4244                              <1> %define SCR_BUF_SEG2    0xBA00
  4245                              <1> %define SCR_PAGE_SEGS   0x0100
  4246                              <1> 
  4247                              <1> %define SCR_BAK_SEG     0x0900
  4248                              <1> %define BIOS_DATA_SEG   0x0040
  4249                              <1> 
  4250                              <1> %define BIOS_KEYSTAT_OFF 0x0017
  4251                              <1> 
  4252                              <1> %define WINDOW_DEF_ACTION_NUM  (window_def_action_table.end_of_table - window_def_action_table) / SIZE_OF_STRUC_ACTION
  4253                              <1> %define MENUBOX_DEF_ACTION_NUM  (menubox_def_action_table.end_of_table - menubox_def_action_table) / SIZE_OF_STRUC_ACTION
  4254                              <1> %define LISTBOX_ACTION_NUM  (listbox_action_table.end_of_table - listbox_action_table) / SIZE_OF_STRUC_ACTION
  4255                              <1> %define INPUTBOX_ACTION_NUM  (inputbox_action_table.end_of_table - inputbox_action_table) / SIZE_OF_STRUC_ACTION
  4256                              <1>       bits 16
  4257                              <1> 
  4258                              <1> 
  4259                              <1> ;=============================================================================
  4260                              <1> ; <<<<<<<<<<<<<<<<<<< Basic Drawing and Screen functions >>>>>>>>>>>>>>>>>>>>>
  4261                              <1> ;=============================================================================
  4262                              <1> 
  4263                              <1> %if 1
  4264                              <1> ;=============================================================================
  4265                              <1> ;draw_string_hl ---- Draw a zero ending string with highlighted characters 
  4266                              <1> ;                    at special position
  4267                              <1> ;input:
  4268                              <1> ;      bl = attribute for normal characters
  4269                              <1> ;           high 4 bit Background color and low 4 bit Foreground color
  4270                              <1> ;      bh = attribute for hightlight characters
  4271                              <1> ;      dh = start row
  4272                              <1> ;      dl = start column
  4273                              <1> ;      ds:si -> the string to be displayed
  4274                              <1> ;output:
  4275                              <1> ;      none
  4276                              <1> ;=============================================================================
  4277                              <1> draw_string:
  4278                              <1> draw_string_hl:
  4279 000019B4 60                  <1>         pusha
  4280 000019B5 52                  <1>         push dx
  4281 000019B6 B90100              <1>         mov cx,1
  4282 000019B9 FC                  <1>         cld
  4283                              <1> .start:
  4284                              <1> 
  4285 000019BA AC                  <1>         lodsb
  4286 000019BB 08C0                <1>         or al,al
  4287 000019BD 7419                <1>         jz .end
  4288                              <1> 
  4289 000019BF 3C0D                <1>         cmp al,0x0d                ; if need Change row
  4290 000019C1 7506                <1>         jne .no_cr
  4291 000019C3 5A                  <1>         pop dx
  4292 000019C4 FEC6                <1>         inc dh
  4293 000019C6 52                  <1>         push dx
  4294 000019C7 EBF1                <1>         jmp short .start
  4295                              <1> 
  4296                              <1> .no_cr:
  4297 000019C9 3C7E                <1>         cmp al, '~'
  4298 000019CB 7504                <1>         jne .draw_it
  4299 000019CD 86FB                <1>         xchg bh, bl
  4300 000019CF EB05                <1>         jmp short .next_char
  4301                              <1> 
  4302                              <1> .draw_it:
  4303 000019D1 E80700              <1>         call draw_char
  4304                              <1> 
  4305 000019D4 FEC2                <1>         inc dl
  4306                              <1> .next_char:
  4307 000019D6 EBE2                <1>         jmp short .start
  4308                              <1> .end:
  4309 000019D8 5A                  <1>         pop dx
  4310 000019D9 61                  <1>         popa
  4311 000019DA C3                  <1>         ret
  4312                              <1> ;=============================================================================
  4313                              <1> %endif
  4314                              <1> 
  4315                              <1> %if 0
  4316                              <1> ;=============================================================================
  4317                              <1> ;draw_string ---- Draw a zero ending string at special position
  4318                              <1> ;input:
  4319                              <1> ;      bl = high 4 bit Background color and low 4 bit Foreground color
  4320                              <1> ;      dh = start row
  4321                              <1> ;      dl = start column
  4322                              <1> ;      ds:si -> the string to be displayed
  4323                              <1> ;output:
  4324                              <1> ;      none
  4325                              <1> ;=============================================================================
  4326                              <1> draw_string_hl:
  4327                              <1> draw_string:
  4328                              <1>         pusha
  4329                              <1>         push dx
  4330                              <1>         mov cx,1
  4331                              <1>         cld
  4332                              <1> .start:
  4333                              <1> 
  4334                              <1>         lodsb
  4335                              <1>         or al,al
  4336                              <1>         jz .end
  4337                              <1> 
  4338                              <1>         cmp al,0x0d                ; if need Change row
  4339                              <1>         jne .no_cr
  4340                              <1>         pop dx
  4341                              <1>         inc dh
  4342                              <1>         push dx
  4343                              <1>         jmp short .start
  4344                              <1> 
  4345                              <1> .no_cr:
  4346                              <1>         call draw_char
  4347                              <1> 
  4348                              <1>         inc dl
  4349                              <1>         jmp short .start
  4350                              <1> .end:
  4351                              <1>         pop dx
  4352                              <1>         popa
  4353                              <1>         ret
  4354                              <1> ;=============================================================================
  4355                              <1> %endif
  4356                              <1> 
  4357                              <1> ;=============================================================================
  4358                              <1> ;draw_char ---- Draw chars at special position
  4359                              <1> ;input:
  4360                              <1> ;      bl = high 4 bit Background color and low 4 bit Foreground color
  4361                              <1> ;      dh = start row
  4362                              <1> ;      dl = start column
  4363                              <1> ;      al = the char to be displayed
  4364                              <1> ;      cx = repeat times
  4365                              <1> ;output:
  4366                              <1> ;      none
  4367                              <1> ;=============================================================================
  4368                              <1> draw_char:
  4369                              <1> %ifdef DIRECT_DRAW                            ; directly write to video buffer
  4370 000019DB 60                  <1>         pusha
  4371 000019DC 06                  <1>         push es
  4372 000019DD FC                  <1> 	cld
  4373                              <1> 
  4374 000019DE 88DC                <1>         mov ah, bl
  4375 000019E0 50                  <1>         push ax
  4376                              <1> 
  4377 000019E1 FF36[3526]          <1> 	push word [ui_screen_bufseg]
  4378 000019E5 07                  <1> 	pop es
  4379                              <1> 
  4380 000019E6 A0[3326]            <1>         mov al, [ui_screen_width]
  4381 000019E9 F6E6                <1>         mul dh
  4382 000019EB 30F6                <1>         xor dh, dh
  4383 000019ED 01D0                <1>         add ax, dx
  4384 000019EF D1E0                <1>         shl ax, 1
  4385 000019F1 89C7                <1>         mov di, ax
  4386                              <1> 
  4387 000019F3 58                  <1>         pop ax
  4388 000019F4 F3AB                <1>         rep stosw
  4389 000019F6 07                  <1>         pop es
  4390 000019F7 61                  <1>         popa
  4391                              <1> %else
  4392                              <1>         push bx
  4393                              <1>         mov ah,2
  4394                              <1>         mov bh, [ui_screen_page]
  4395                              <1>         int 0x10
  4396                              <1>         mov ah,0x09
  4397                              <1>         int 0x10
  4398                              <1>         pop bx
  4399                              <1> %endif
  4400 000019F8 C3                  <1>         ret
  4401                              <1> ;=============================================================================
  4402                              <1> 
  4403                              <1> ;=============================================================================
  4404                              <1> ;clear_screen ---- clear a screen area
  4405                              <1> ;input:
  4406                              <1> ;      ch = row of top left corner
  4407                              <1> ;      cl = column of top left corner
  4408                              <1> ;      dh = row of bottom right corner
  4409                              <1> ;      dl = column of bottom right corner
  4410                              <1> ;      bh = attribute
  4411                              <1> ;output:
  4412                              <1> ;      none
  4413                              <1> ;=============================================================================
  4414                              <1> clear_screen:
  4415 000019F9 60                  <1>         pusha
  4416                              <1> %ifdef DIRECT_DRAW
  4417 000019FA 06                  <1>         push es
  4418 000019FB FC                  <1> 	cld
  4419                              <1> 
  4420 000019FC 88FC                <1>         mov ah, bh
  4421 000019FE B020                <1>         mov al, ' '
  4422                              <1> 
  4423 00001A00 FF36[3526]          <1> 	push word [ui_screen_bufseg]
  4424 00001A04 07                  <1> 	pop es
  4425                              <1> 
  4426 00001A05 28CA                <1>         sub dl, cl
  4427 00001A07 FEC2                <1>         inc dl
  4428                              <1> 
  4429                              <1> .loop_fill:
  4430 00001A09 51                  <1>         push cx
  4431 00001A0A 50                  <1>         push ax
  4432                              <1> 
  4433 00001A0B A0[3326]            <1>         mov al, [ui_screen_width]
  4434 00001A0E F6E5                <1>         mul ch
  4435 00001A10 30ED                <1>         xor ch, ch
  4436 00001A12 01C8                <1>         add ax, cx
  4437 00001A14 D1E0                <1>         shl ax, 1
  4438 00001A16 89C7                <1>         mov di, ax
  4439 00001A18 88D1                <1>         mov cl, dl
  4440                              <1> 
  4441 00001A1A 58                  <1>         pop ax
  4442 00001A1B F3AB                <1>         rep stosw
  4443 00001A1D 59                  <1>         pop cx
  4444 00001A1E FEC5                <1>         inc ch
  4445 00001A20 38F5                <1>         cmp ch, dh
  4446 00001A22 76E5                <1>         jbe .loop_fill
  4447                              <1> 
  4448 00001A24 07                  <1>         pop es
  4449                              <1> %else
  4450                              <1>         mov ax, 0x0600
  4451                              <1>         int 0x10
  4452                              <1> %endif
  4453 00001A25 61                  <1>         popa
  4454 00001A26 C3                  <1>         ret
  4455                              <1> 
  4456                              <1> ;=============================================================================
  4457                              <1> ;read_scrchar ---- read a char from the screen
  4458                              <1> ;input:
  4459                              <1> ;       dh = row
  4460                              <1> ;       dl = column
  4461                              <1> ;output:
  4462                              <1> ;       ax = char with attribute
  4463                              <1> ;=============================================================================
  4464                              <1> read_scrchar:
  4465                              <1> %ifdef DIRECT_DRAW
  4466 00001A27 1E                  <1>         push ds
  4467 00001A28 52                  <1>         push dx
  4468 00001A29 56                  <1>         push si
  4469                              <1> 
  4470 00001A2A A0[3326]            <1>         mov al, [ui_screen_width]
  4471 00001A2D F6E6                <1>         mul dh
  4472 00001A2F 30F6                <1>         xor dh, dh
  4473 00001A31 01D0                <1>         add ax, dx
  4474 00001A33 D1E0                <1>         shl ax, 1
  4475 00001A35 89C6                <1>         mov si, ax
  4476                              <1> 
  4477 00001A37 FF36[3526]          <1> 	push word [ui_screen_bufseg]
  4478 00001A3B 1F                  <1> 	pop ds
  4479                              <1> 
  4480 00001A3C AD                  <1>         lodsw
  4481 00001A3D 5E                  <1>         pop si
  4482 00001A3E 5A                  <1>         pop dx
  4483 00001A3F 1F                  <1>         pop ds
  4484                              <1> %else
  4485                              <1>         push bx
  4486                              <1>         mov bh, [ui_screen_page]
  4487                              <1>         mov ah,0x02
  4488                              <1>         int 0x10
  4489                              <1>         mov ah,0x08
  4490                              <1>         int 0x10
  4491                              <1>         pop bx
  4492                              <1> %endif
  4493 00001A40 C3                  <1>         ret
  4494                              <1> 
  4495                              <1> %if 0
  4496                              <1> ;=============================================================================
  4497                              <1> ;draw_string_tty ---- Draw a string ending by zero ( tty mode )
  4498                              <1> ;input:
  4499                              <1> ;      ds:si -> string
  4500                              <1> ;output:
  4501                              <1> ;      none
  4502                              <1> ;=============================================================================
  4503                              <1> draw_string_tty:
  4504                              <1>         pusha
  4505                              <1>         cld
  4506                              <1> .draw1:
  4507                              <1>         lodsb
  4508                              <1>         or al, al
  4509                              <1>         jz .end
  4510                              <1>         mov bx,7
  4511                              <1>         mov ah,0x0e
  4512                              <1>         int 0x10
  4513                              <1>         jmp short .draw1
  4514                              <1> .end:
  4515                              <1>         popa
  4516                              <1>         ret
  4517                              <1> ;=============================================================================
  4518                              <1> %endif
  4519                              <1> 
  4520                              <1> ;=============================================================================
  4521                              <1> ;draw_window ---- Draw a framed window
  4522                              <1> ;input:
  4523                              <1> ;      ch = row of top left corner
  4524                              <1> ;      cl = column of top left corner
  4525                              <1> ;      dh = row of bottom right corner
  4526                              <1> ;      dl = column of bottom right corner
  4527                              <1> ;      bl = high 4 bit Background color and low 4 bit Foreground color
  4528                              <1> ;      bh = title attribute (define same as bl)
  4529                              <1> ;      ds:si -> title
  4530                              <1> ;output:
  4531                              <1> ;      none
  4532                              <1> ;=============================================================================
  4533                              <1> draw_window:
  4534 00001A41 60                  <1>         pusha
  4535 00001A42 890E[0730]          <1>         mov [ui_tmp.left_col], cx          ;
  4536 00001A46 8916[0930]          <1>         mov [ui_tmp.right_col], dx         ; save window pos and attribute
  4537 00001A4A 891E[0B30]          <1>         mov [ui_tmp.frame_attr], bx        ;
  4538                              <1> 
  4539                              <1> ;Clear frame background
  4540 00001A4E 86FB                <1>         xchg bh,bl
  4541 00001A50 E8A6FF              <1>         call clear_screen
  4542                              <1> 
  4543 00001A53 87D1                <1>         xchg dx,cx
  4544 00001A55 B90100              <1>         mov cx,1
  4545                              <1> 
  4546                              <1> ;Draw four corners
  4547 00001A58 8A1E[0B30]          <1>         mov bl, [ui_tmp.frame_attr]
  4548 00001A5C 803E[6746]02        <1>         cmp byte [draw_frame_method], 2             ; check draw method.
  4549 00001A61 7204                <1>         jb .draw_top_corner
  4550 00001A63 8A1E[0C30]          <1>         mov bl, [ui_tmp.title_attr]
  4551                              <1> .draw_top_corner:
  4552 00001A67 A0[6346]            <1>         mov al, [frame_char.tl_corner]
  4553 00001A6A E86EFF              <1>         call draw_char
  4554                              <1> 
  4555 00001A6D 8A16[0930]          <1>         mov dl, [ui_tmp.right_col]
  4556 00001A71 A0[6446]            <1>         mov al, [frame_char.tr_corner]
  4557 00001A74 E864FF              <1>         call draw_char
  4558                              <1> 
  4559 00001A77 8A1E[0B30]          <1>         mov bl, [ui_tmp.frame_attr]
  4560 00001A7B 8A36[0A30]          <1>         mov dh, [ui_tmp.bottom_row]
  4561 00001A7F A0[6646]            <1>         mov al, [frame_char.br_corner]
  4562 00001A82 E856FF              <1>         call draw_char
  4563                              <1>   
  4564 00001A85 8A16[0730]          <1>         mov dl, [ui_tmp.left_col]
  4565 00001A89 A0[6546]            <1>         mov al, [frame_char.bl_corner]
  4566 00001A8C E84CFF              <1>         call draw_char
  4567                              <1> 
  4568                              <1> ;Draw bottom horizontal line
  4569 00001A8F FEC2                <1>         inc dl
  4570 00001A91 8A0E[0930]          <1>         mov cl, [ui_tmp.right_col]
  4571 00001A95 28D1                <1>         sub cl, dl
  4572 00001A97 A0[6046]            <1>         mov al, [frame_char.bottom]
  4573 00001A9A E83EFF              <1>         call draw_char
  4574                              <1> 
  4575                              <1> ;Draw top horizontal line
  4576 00001A9D 8A1E[0B30]          <1>         mov bl, [ui_tmp.frame_attr]
  4577 00001AA1 803E[6746]01        <1>         cmp byte [draw_frame_method], 1             ; check draw method.
  4578 00001AA6 7204                <1>         jb .draw_top_line
  4579 00001AA8 8A1E[0C30]          <1>         mov bl, [ui_tmp.title_attr]
  4580                              <1> .draw_top_line:
  4581 00001AAC 8A36[0830]          <1>         mov dh, [ui_tmp.top_row]
  4582 00001AB0 A0[5F46]            <1>         mov al, [frame_char.top]
  4583 00001AB3 E825FF              <1>         call draw_char
  4584                              <1> 
  4585                              <1> ;Draw title
  4586 00001AB6 E89B0C              <1>         call strlen
  4587 00001AB9 09C9                <1>         or cx,cx
  4588 00001ABB 741E                <1>         jz .no_title
  4589                              <1> 
  4590 00001ABD A0[0930]            <1>         mov al, [ui_tmp.right_col]
  4591 00001AC0 2A06[0730]          <1>         sub al, [ui_tmp.left_col]
  4592 00001AC4 28C8                <1>         sub al, cl
  4593 00001AC6 FEC0                <1>         inc al
  4594 00001AC8 D0E8                <1>         shr al,1
  4595 00001ACA 8A16[0730]          <1>         mov dl, [ui_tmp.left_col]
  4596 00001ACE 00C2                <1>         add dl,al
  4597 00001AD0 8A36[0830]          <1>         mov dh, [ui_tmp.top_row]
  4598                              <1> 
  4599 00001AD4 8A1E[0C30]          <1>         mov bl, [ui_tmp.title_attr]
  4600 00001AD8 E8D9FE              <1>         call draw_string
  4601                              <1> 
  4602                              <1> .no_title:
  4603                              <1> 
  4604                              <1> ;Draw vertical line
  4605 00001ADB 8A1E[0B30]          <1>         mov bl, [ui_tmp.frame_attr]
  4606 00001ADF 8A36[0830]          <1>         mov dh, [ui_tmp.top_row]
  4607 00001AE3 FEC6                <1>         inc dh
  4608                              <1> 
  4609 00001AE5 B90100              <1>         mov cx,1
  4610                              <1> 
  4611                              <1> .draw_vert_line:
  4612 00001AE8 A0[6146]            <1>         mov al, [frame_char.left]
  4613 00001AEB 8A16[0730]          <1>         mov dl, [ui_tmp.left_col]
  4614 00001AEF E8E9FE              <1>         call draw_char
  4615 00001AF2 A0[6246]            <1>         mov al, [frame_char.right]
  4616 00001AF5 8A16[0930]          <1>         mov dl, [ui_tmp.right_col]
  4617 00001AF9 E8DFFE              <1>         call draw_char
  4618                              <1> 
  4619 00001AFC FEC6                <1>         inc dh
  4620 00001AFE 3A36[0A30]          <1>         cmp dh, [ui_tmp.bottom_row]
  4621 00001B02 72E4                <1>         jb .draw_vert_line
  4622                              <1> 
  4623                              <1> ;Draw shadow
  4624 00001B04 B308                <1>         mov bl, 0x08
  4625 00001B06 8A2E[0A30]          <1>         mov ch, [ui_tmp.bottom_row]
  4626 00001B0A 8A0E[0730]          <1>         mov cl, [ui_tmp.left_col]
  4627 00001B0E FEC5                <1>         inc ch
  4628 00001B10 80C102              <1> 	add cl, 2
  4629 00001B13 8A36[0A30]          <1>         mov dh, [ui_tmp.bottom_row]
  4630 00001B17 8A16[0930]          <1>         mov dl, [ui_tmp.right_col]
  4631 00001B1B FEC6                <1>         inc dh
  4632 00001B1D E81400              <1>         call draw_shadow
  4633 00001B20 8A2E[0830]          <1>         mov ch, [ui_tmp.top_row]
  4634 00001B24 8A0E[0930]          <1>         mov cl, [ui_tmp.right_col]
  4635 00001B28 FEC5                <1>         inc ch
  4636 00001B2A FEC1                <1>         inc cl
  4637 00001B2C 80C202              <1> 	add dl, 2
  4638 00001B2F E80200              <1>         call draw_shadow
  4639                              <1> 
  4640 00001B32 61                  <1>         popa
  4641 00001B33 C3                  <1>         ret
  4642                              <1> ;=============================================================================
  4643                              <1> 
  4644                              <1> ;=============================================================================
  4645                              <1> ;draw_shadow ---- Draw shadow block
  4646                              <1> ;input:
  4647                              <1> ;      ch = row of top left corner
  4648                              <1> ;      cl = column of top left corner
  4649                              <1> ;      dh = row of bottom right corner
  4650                              <1> ;      dl = column of bottom right corner
  4651                              <1> ;      bl = high 4 bit Background color and low 4 bit Foreground color
  4652                              <1> ;output:
  4653                              <1> ;      none
  4654                              <1> ;=============================================================================
  4655                              <1> draw_shadow:
  4656 00001B34 60                  <1>         pusha
  4657                              <1> .loop_row:
  4658 00001B35 52                  <1>         push dx
  4659                              <1> .loop_col:
  4660 00001B36 51                  <1>         push cx
  4661 00001B37 B90100              <1>         mov cx,1
  4662 00001B3A E8EAFE              <1>         call read_scrchar
  4663 00001B3D E89BFE              <1>         call draw_char
  4664 00001B40 59                  <1>         pop cx
  4665 00001B41 FECA                <1>         dec dl
  4666 00001B43 38D1                <1>         cmp cl, dl
  4667 00001B45 76EF                <1>         jbe .loop_col
  4668 00001B47 5A                  <1>         pop dx
  4669 00001B48 FECE                <1>         dec dh
  4670 00001B4A 38F5                <1>         cmp ch, dh
  4671 00001B4C 76E7                <1>         jbe .loop_row
  4672                              <1> 
  4673 00001B4E 61                  <1>         popa
  4674 00001B4F C3                  <1>         ret
  4675                              <1> ;=============================================================================
  4676                              <1> 
  4677                              <1> 
  4678                              <1> ;=============================================================================
  4679                              <1> ;set_video_mode ---- Set the Alphabet Video Mode
  4680                              <1> ;input:
  4681                              <1> ;      al = 0 , set screen resolution to 90x25,
  4682                              <1> ;           otherwise set to 80x25
  4683                              <1> ;      bl = character bit size ( 8 or 9 )
  4684                              <1> ;      cx = fonts number
  4685                              <1> ;      es:bp -> fonts data
  4686                              <1> ;output:
  4687                              <1> ;      none
  4688                              <1> ;=============================================================================
  4689                              <1> BIOS_CRT_COLS        equ 0x4A
  4690                              <1> BIOS_ADDR_6845       equ 0x63
  4691                              <1> 
  4692                              <1> set_video_mode:
  4693 00001B50 06                  <1>         push es
  4694 00001B51 53                  <1>         push bx
  4695 00001B52 50                  <1>         push ax
  4696                              <1> 
  4697 00001B53 E8B700              <1>         call reset_video_mode
  4698                              <1> 
  4699                              <1> ;Establish CRTC vertical timing and cursor position in character matrix
  4700                              <1> ;and set user fonts table
  4701 00001B56 09C9                <1>         or cx, cx
  4702 00001B58 741D                <1>         jz .set_res                          ; no font data
  4703 00001B5A 09ED                <1>         or bp, bp
  4704 00001B5C 7419                <1>         jz .set_res                          ; no font data
  4705                              <1>         
  4706                              <1> .loop_set_fonts:                             ; set user defined chars
  4707 00001B5E 51                  <1>         push cx
  4708 00001B5F 31C9                <1>         xor cx,cx
  4709 00001B61 FEC1                <1>         inc cl
  4710 00001B63 260FB65600          <1>         movzx dx, byte [es:bp]
  4711 00001B68 45                  <1>         inc bp
  4712 00001B69 B80011              <1>         mov ax,0x1100
  4713 00001B6C BB0010              <1>         mov bx,0x1000
  4714 00001B6F CD10                <1>         int 0x10
  4715 00001B71 59                  <1>         pop cx
  4716 00001B72 83C510              <1>         add bp, 16
  4717 00001B75 E2E7                <1>         loop .loop_set_fonts
  4718                              <1> 
  4719                              <1> .set_res:
  4720 00001B77 C606[3326]50        <1>         mov byte [ui_screen_width], 80
  4721 00001B7C C606[3426]19        <1>         mov byte [ui_screen_height], 25
  4722                              <1> 
  4723 00001B81 B84000              <1>         mov ax,0x40
  4724 00001B84 8EC0                <1>         mov es,ax
  4725 00001B86 58                  <1>         pop ax
  4726                              <1> 
  4727 00001B87 08C0                <1>         or al,al
  4728 00001B89 7540                <1>         jnz .skip_res_set
  4729                              <1> 
  4730 00001B8B 268B166300          <1>         mov dx,[es:BIOS_ADDR_6845]                   ; CRTC I/O port
  4731                              <1> 
  4732                              <1> ;Enable I/O writes to CRTC registers
  4733 00001B90 B011                <1>         mov al,0x11
  4734 00001B92 EE                  <1>         out dx,al
  4735 00001B93 42                  <1>         inc dx
  4736 00001B94 EC                  <1>         in al,dx
  4737 00001B95 4A                  <1>         dec dx
  4738 00001B96 88C4                <1>         mov ah,al
  4739 00001B98 B011                <1>         mov al,0x11
  4740 00001B9A 50                  <1>         push ax
  4741 00001B9B 80E47F              <1>         and ah,01111111b
  4742 00001B9E EF                  <1>         out dx,ax
  4743                              <1> 
  4744                              <1> ;Establish CRTC horizontal timing
  4745 00001B9F 8D36[2526]          <1>         lea si, [ui_VideoHorizParams]
  4746                              <1> 
  4747 00001BA3 B90700              <1>         mov cx,7
  4748                              <1>         
  4749 00001BA6 FC                  <1>         cld
  4750                              <1> .set_CRTC:
  4751 00001BA7 AD                  <1>         lodsw
  4752 00001BA8 EF                  <1>         out dx,ax
  4753 00001BA9 E2FC                <1>         loop .set_CRTC
  4754                              <1> 
  4755                              <1> ;write-protect CRTC registers
  4756 00001BAB 58                  <1>         pop ax
  4757 00001BAC EF                  <1>         out dx,ax
  4758                              <1> 
  4759                              <1> ;Program the Sequencer and Attribute Controller for 9 dots per character
  4760                              <1>         
  4761 00001BAD BAC403              <1>         mov dx, 0x3c4
  4762 00001BB0 B80001              <1>         mov ax, 0x0100
  4763 00001BB3 FA                  <1>         cli
  4764 00001BB4 EF                  <1>         out dx,ax
  4765                              <1> 
  4766 00001BB5 B80101              <1>         mov ax,0x0101
  4767 00001BB8 EF                  <1>         out dx,ax
  4768 00001BB9 B80003              <1>         mov ax,0x0300
  4769 00001BBC EF                  <1>         out dx,ax
  4770 00001BBD FB                  <1>         sti
  4771                              <1> 
  4772 00001BBE BB1300              <1>         mov bx,0x0013
  4773 00001BC1 B80010              <1>         mov ax,0x1000
  4774 00001BC4 CD10                <1>         int 0x10
  4775                              <1> 
  4776 00001BC6 C606[3326]5A        <1>         mov byte [ui_screen_width], 90
  4777                              <1> .skip_res_set:
  4778                              <1> 
  4779                              <1> ;Program the Attribute Controller for 8- or 9-bit character codes
  4780 00001BCB B80010              <1>         mov ax,0x1000
  4781 00001BCE BB120F              <1>         mov bx,0x0f12
  4782 00001BD1 5A                  <1>         pop dx
  4783 00001BD2 80FA08              <1>         cmp dl,8
  4784 00001BD5 7402                <1>         je .svm01
  4785 00001BD7 B707                <1>         mov bh,7
  4786                              <1> .svm01:
  4787 00001BD9 CD10                <1>         int 0x10
  4788                              <1> 
  4789                              <1> ;Update video BIOS data area
  4790 00001BDB A0[3326]            <1>         mov al,[ui_screen_width]
  4791 00001BDE 26A24A00            <1>         mov [es:BIOS_CRT_COLS],al
  4792                              <1> 
  4793                              <1> ;Set background highlight attribute
  4794 00001BE2 07                  <1>         pop es
  4795 00001BE3 B80310              <1>         mov ax,0x1003
  4796 00001BE6 30DB                <1>         xor bl,bl
  4797 00001BE8 CD10                <1>         int 0x10
  4798 00001BEA E80C00              <1>         call hide_cursor
  4799                              <1> 
  4800 00001BED C3                  <1>         ret
  4801                              <1> ;=============================================================================
  4802                              <1> 
  4803                              <1> ;=============================================================================
  4804                              <1> ;set_cursor ---- move the cursor
  4805                              <1> ;input:
  4806                              <1> ;       dh = row
  4807                              <1> ;       dl = column
  4808                              <1> ;=============================================================================
  4809                              <1> set_cursor:
  4810 00001BEE 60                  <1> 	pusha
  4811 00001BEF 8A3E[3726]          <1>         mov bh, [ui_screen_page]
  4812 00001BF3 B402                <1>         mov ah, 0x02
  4813 00001BF5 CD10                <1>         int 0x10
  4814 00001BF7 61                  <1> 	popa
  4815 00001BF8 C3                  <1>         ret
  4816                              <1> 
  4817                              <1> ;=============================================================================
  4818                              <1> ;hide_cursor ---- Hide the cursor
  4819                              <1> ;input:
  4820                              <1> ;      none
  4821                              <1> ;output:
  4822                              <1> ;      none
  4823                              <1> ;=============================================================================
  4824                              <1> hide_cursor:
  4825 00001BF9 60                  <1>         pusha
  4826 00001BFA B401                <1>         mov ah,1
  4827 00001BFC B9006F              <1>         mov cx,0x6f00
  4828 00001BFF CD10                <1>         int 0x10
  4829 00001C01 61                  <1>         popa
  4830 00001C02 C3                  <1>         ret
  4831                              <1> ;=============================================================================
  4832                              <1> 
  4833                              <1> ;=============================================================================
  4834                              <1> ;show_cursor ---- Show the cursor
  4835                              <1> ;input:
  4836                              <1> ;      none
  4837                              <1> ;output:
  4838                              <1> ;      none
  4839                              <1> ;=============================================================================
  4840                              <1> show_cursor:
  4841 00001C03 60                  <1>         pusha
  4842 00001C04 B401                <1>         mov ah,1
  4843 00001C06 B90F0E              <1>         mov cx,0x0e0f
  4844 00001C09 CD10                <1>         int 0x10
  4845 00001C0B 61                  <1>         popa
  4846 00001C0C C3                  <1>         ret
  4847                              <1> ;=============================================================================
  4848                              <1> 
  4849                              <1> ;=============================================================================
  4850                              <1> ;reset_video_mode ---- Reset the VideoMode
  4851                              <1> ;input:
  4852                              <1> ;      none
  4853                              <1> ;output:
  4854                              <1> ;      none
  4855                              <1> ;=============================================================================
  4856                              <1> reset_video_mode
  4857 00001C0D 60                  <1>         pusha
  4858 00001C0E B80300              <1>         mov ax,3
  4859 00001C11 CD10                <1>         int 0x10
  4860 00001C13 E8EDFF              <1>         call show_cursor
  4861 00001C16 61                  <1>         popa
  4862 00001C17 C3                  <1>         ret
  4863                              <1> ;=============================================================================
  4864                              <1> 
  4865                              <1> 
  4866                              <1> ;=============================================================================
  4867                              <1> ;draw_icon ---- Draw a icon at special position
  4868                              <1> ;input:
  4869                              <1> ;      dh = start row
  4870                              <1> ;      dl = start column
  4871                              <1> ;      ch = number of row
  4872                              <1> ;      cl = number of column
  4873                              <1> ;      ds:si -> icon data , which is a two dim word array, each elements
  4874                              <1> ;               indicates a char. high byte is the attribute, low byte is
  4875                              <1> ;               is the char code.
  4876                              <1> ;output:
  4877                              <1> ;      none
  4878                              <1> ;=============================================================================
  4879                              <1> draw_icon:
  4880 00001C18 09F6                <1>         or si, si
  4881 00001C1A 7422                <1>         jz .end
  4882 00001C1C 09C9                <1>         or cx, cx
  4883 00001C1E 741E                <1>         jz .end
  4884                              <1>         
  4885 00001C20 60                  <1>         pusha
  4886 00001C21 FC                  <1>         cld
  4887                              <1> .loop_row:
  4888 00001C22 52                  <1>         push dx
  4889 00001C23 51                  <1>         push cx
  4890                              <1> .loop_col:
  4891 00001C24 51                  <1>         push cx
  4892 00001C25 B90100              <1>         mov cx,1
  4893 00001C28 AD                  <1>         lodsw
  4894 00001C29 86E3                <1>         xchg ah,bl
  4895 00001C2B E8ADFD              <1>         call draw_char
  4896                              <1>         
  4897 00001C2E 59                  <1>         pop cx
  4898 00001C2F FEC2                <1>         inc dl
  4899 00001C31 FEC9                <1>         dec cl
  4900 00001C33 75EF                <1>         jnz .loop_col
  4901                              <1>         
  4902 00001C35 59                  <1>         pop cx
  4903 00001C36 5A                  <1>         pop dx
  4904 00001C37 FEC6                <1>         inc dh
  4905 00001C39 FECD                <1>         dec ch
  4906 00001C3B 75E5                <1>         jnz .loop_row
  4907                              <1> 
  4908 00001C3D 61                  <1>         popa
  4909                              <1> .end:
  4910 00001C3E C3                  <1>         ret
  4911                              <1> ;=============================================================================
  4912                              <1> 
  4913                              <1> ;=============================================================================
  4914                              <1> ;draw_background ---- Draw the background using specified icon
  4915                              <1> ;input:
  4916                              <1> ;      bh = background color when no icon
  4917                              <1> ;      cx = icon size (ch = row, cl = col)
  4918                              <1> ;      ds:si -> icon data , which is a two dim word array, each elements
  4919                              <1> ;               indicates a char. high byte is the attribute, low byte is
  4920                              <1> ;               is the char code.
  4921                              <1> ;output:
  4922                              <1> ;      none
  4923                              <1> ;=============================================================================
  4924                              <1> draw_background:
  4925 00001C3F 60                  <1>         pusha
  4926 00001C40 09F6                <1>         or si,si
  4927 00001C42 7513                <1>         jnz .normal_bg
  4928                              <1> 
  4929                              <1> ;no icon. clear background.
  4930 00001C44 31C9                <1>         xor cx,cx
  4931 00001C46 8A36[3426]          <1>         mov dh,[ui_screen_height]
  4932 00001C4A 8A16[3326]          <1>         mov dl,[ui_screen_width]
  4933 00001C4E FECE                <1>         dec dh
  4934 00001C50 FECA                <1>         dec dl
  4935 00001C52 E8A4FD              <1>         call clear_screen
  4936 00001C55 61                  <1>         popa
  4937 00001C56 C3                  <1>         ret
  4938                              <1> 
  4939                              <1> .normal_bg:
  4940 00001C57 31D2                <1>         xor dx,dx
  4941                              <1> 
  4942                              <1> .loop_row:
  4943 00001C59 52                  <1>         push dx
  4944                              <1> .loop_col:
  4945 00001C5A E8BBFF              <1>         call draw_icon
  4946 00001C5D 00CA                <1>         add dl, cl
  4947 00001C5F 3A16[3326]          <1>         cmp dl, [ui_screen_width]
  4948 00001C63 72F5                <1>         jb .loop_col
  4949 00001C65 5A                  <1>         pop dx
  4950 00001C66 00EE                <1>         add dh, ch
  4951 00001C68 3A36[3426]          <1>         cmp dh, [ui_screen_height]
  4952 00001C6C 72EB                <1>         jb .loop_row
  4953 00001C6E 61                  <1>         popa
  4954 00001C6F C3                  <1>         ret
  4955                              <1> ;=============================================================================
  4956                              <1> 
  4957                              <1> ;=============================================================================
  4958                              <1> ;turnon_scrolllock ---- turn on the scroll lock key
  4959                              <1> ;input: none
  4960                              <1> ;output: none
  4961                              <1> ;=============================================================================
  4962                              <1> turnon_scrolllock:
  4963 00001C70 60                  <1>         pusha
  4964 00001C71 06                  <1>         push es
  4965 00001C72 6A40                <1>         push word BIOS_DATA_SEG
  4966 00001C74 07                  <1> 	pop es
  4967 00001C75 26800E170010        <1>         or byte [es: BIOS_KEYSTAT_OFF], kbScrollMask
  4968 00001C7B 07                  <1>         pop es
  4969 00001C7C 61                  <1>         popa
  4970 00001C7D C3                  <1>         ret
  4971                              <1> 
  4972                              <1> ;=============================================================================
  4973                              <1> ;turnoff_scrolllock ---- turn off the scroll lock key
  4974                              <1> ;input: none
  4975                              <1> ;output: none
  4976                              <1> ;=============================================================================
  4977                              <1> turnoff_scrolllock:
  4978 00001C7E 60                  <1>         pusha
  4979 00001C7F 06                  <1>         push es
  4980 00001C80 6A40                <1>         push word BIOS_DATA_SEG
  4981 00001C82 07                  <1> 	pop es
  4982 00001C83 2680261700EF        <1>         and byte [es: BIOS_KEYSTAT_OFF], ~ kbScrollMask
  4983 00001C89 07                  <1>         pop es
  4984 00001C8A 61                  <1>         popa
  4985 00001C8B C3                  <1>         ret
  4986                              <1> 
  4987                              <1> ;=============================================================================
  4988                              <1> ;lock_screen ---- lock the screen, any output will be stored in SCR_BAK_SEG
  4989                              <1> ;=============================================================================
  4990                              <1> lock_screen:
  4991 00001C8C 60                  <1> 	pusha 
  4992 00001C8D 803E[3826]00        <1> 	cmp byte [ui_screen_lock], 0
  4993 00001C92 7518                <1> 	jnz .no_swap_page
  4994                              <1> 
  4995 00001C94 A0[3726]            <1>         mov al, [ui_screen_page]
  4996 00001C97 3402                <1>         xor al, 0x02
  4997 00001C99 C706[3526]00B8      <1>         mov word [ui_screen_bufseg], SCR_BUF_SEG0
  4998 00001C9F 08C0                <1>         or al, al
  4999 00001CA1 7406                <1>         jz .set_seg0
  5000 00001CA3 C706[3526]00BA      <1>         mov word [ui_screen_bufseg], SCR_BUF_SEG2
  5001                              <1> .set_seg0:
  5002 00001CA9 A2[3726]            <1>         mov [ui_screen_page], al
  5003                              <1> 
  5004                              <1> .no_swap_page:
  5005 00001CAC FE06[3826]          <1> 	inc byte [ui_screen_lock]
  5006 00001CB0 61                  <1> 	popa
  5007 00001CB1 C3                  <1>         ret
  5008                              <1> 
  5009                              <1> ;=============================================================================
  5010                              <1> ;unlock_screen ---- unlock the screen, copy SCR_BAK_SEG to SCR_BUF_SEG
  5011                              <1> ;=============================================================================
  5012                              <1> unlock_screen:
  5013 00001CB2 60                  <1> 	pusha
  5014 00001CB3 FE0E[3826]          <1> 	dec byte [ui_screen_lock]
  5015 00001CB7 7507                <1> 	jnz .no_swap_page
  5016                              <1> 
  5017 00001CB9 B405                <1>         mov ah, 0x05
  5018 00001CBB A0[3726]            <1>         mov al, [ui_screen_page]
  5019 00001CBE CD10                <1>         int 0x10
  5020                              <1> .no_swap_page:
  5021 00001CC0 61                  <1> 	popa
  5022 00001CC1 C3                  <1>         ret
  5023                              <1> 
  5024                              <1> 
  5025                              <1> ;=============================================================================
  5026                              <1> ;<<<<<<<<<<<<<<<<<<<<<<<<< Standard Dialog functions >>>>>>>>>>>>>>>>>>>>>>>>>
  5027                              <1> ;=============================================================================
  5028                              <1> 
  5029                              <1> ;=============================================================================
  5030                              <1> ; msgbox_draw_body_proc ---- draw body proc of message box
  5031                              <1> ; input:
  5032                              <1> ;	ds:si -> the window
  5033                              <1> ; output:
  5034                              <1> ;	none
  5035                              <1> ;=============================================================================
  5036                              <1> msgbox_draw_body_proc:
  5037 00001CC2 60                  <1> 	pusha
  5038 00001CC3 89F7                <1> 	mov di, si
  5039 00001CC5 8B5C1C              <1> 	mov bx, [si + struc_message_box.message_attr]
  5040 00001CC8 BA0302              <1> 	mov dx, 0x0203
  5041 00001CCB 8B741A              <1> 	mov si, [si + struc_message_box.message]
  5042 00001CCE E8BB05              <1> 	call window_draw_string
  5043 00001CD1 61                  <1> 	popa
  5044 00001CD2 C3                  <1> 	ret
  5045                              <1> 
  5046                              <1> ;=============================================================================
  5047                              <1> ; msgbox_default_event_handle ---- default event handle for message box
  5048                              <1> ; input:
  5049                              <1> ;	ax    -> event
  5050                              <1> ;	ds:si -> the window
  5051                              <1> ; output:
  5052                              <1> ;	none
  5053                              <1> ;=============================================================================
  5054                              <1> msgbox_default_event_handle:
  5055 00001CD3 E8B507              <1> 	call window_default_event_handle
  5056 00001CD6 730D                <1> 	jnc .end
  5057                              <1> 
  5058 00001CD8 80FCF0              <1> 	cmp ah, EVTCODE_COMMAND
  5059 00001CDB 7202                <1> 	jb .exit
  5060                              <1> 
  5061 00001CDD F9                  <1> 	stc
  5062 00001CDE C3                  <1> 	ret
  5063                              <1> 
  5064                              <1> .exit:
  5065 00001CDF 89441E              <1> 	mov [si + struc_message_box.pressed_key], ax
  5066 00001CE2 E82007              <1> 	call window_close
  5067                              <1> .end:
  5068 00001CE5 F8                  <1> 	clc
  5069 00001CE6 C3                  <1> 	ret
  5070                              <1> 
  5071                              <1> ;=============================================================================
  5072                              <1> ; msgbox_prepare ---- prepare a message box
  5073                              <1> ; input:
  5074                              <1> ;	al    =  message attribute
  5075                              <1> ;	bx    =  window attribute
  5076                              <1> ;	ds:dx -> 2nd level pointer to title
  5077                              <1> ;	ds:si -> message
  5078                              <1> ;	ds:di -> pointer to the struc_message_box
  5079                              <1> ; output:
  5080                              <1> ;	none
  5081                              <1> ;=============================================================================
  5082                              <1> msgbox_prepare:
  5083 00001CE7 60                  <1> 	pusha
  5084 00001CE8 B92000              <1> 	mov cx, SIZE_OF_STRUC_MESSAGE_BOX
  5085 00001CEB E8820E              <1> 	call clear_memory
  5086                              <1> 
  5087 00001CEE 89751A              <1> 	mov [di + struc_message_box.message], si
  5088 00001CF1 89451C              <1> 	mov [di + struc_message_box.message_attr], ax
  5089 00001CF4 895D04              <1> 	mov [di + struc_window.win_attr], bx
  5090 00001CF7 895502              <1> 	mov [di + struc_window.title], dx
  5091                              <1> 
  5092 00001CFA E8230B              <1> 	call count_lines
  5093                              <1> 
  5094 00001CFD 020E[1D46]          <1> 	add cl, [size.box_width]
  5095 00001D01 022E[1E46]          <1> 	add ch, [size.box_height]
  5096 00001D05 894D08              <1> 	mov [di + struc_window.win_size], cx
  5097 00001D08 87F7                <1> 	xchg si, di
  5098 00001D0A E86907              <1> 	call window_center_window
  5099                              <1> 
  5100 00001D0D C60406              <1> 	mov byte [si], WINFLAG_FRAMED | WINFLAG_MODAL
  5101                              <1> 
  5102 00001D10 C74414[D31C]        <1> 	mov word [si + struc_window.default_event_handle], msgbox_default_event_handle
  5103 00001D15 C74416[9724]        <1> 	mov word [si + struc_window.event_handle], window_event_handle
  5104 00001D1A C74418[C21C]        <1> 	mov word [si + struc_window.draw_body_proc], msgbox_draw_body_proc
  5105 00001D1F 61                  <1> 	popa
  5106 00001D20 C3                  <1> 	ret
  5107                              <1> 
  5108                              <1> 
  5109                              <1> ;=============================================================================
  5110                              <1> ;message_box ---- Show a message box
  5111                              <1> ;input:
  5112                              <1> ;	al = message attribute
  5113                              <1> ;	bx = window attribute
  5114                              <1> ;	ds:dx -> 2nd level pointer to title
  5115                              <1> ;	ds:si -> message
  5116                              <1> ;output:
  5117                              <1> ;	ax = user pressed key
  5118                              <1> ;=============================================================================
  5119                              <1> message_box:
  5120 00001D21 56                  <1> 	push si
  5121 00001D22 57                  <1> 	push di
  5122 00001D23 BF[2B30]            <1> 	mov di, ui_tmp.tmp_msgbox
  5123 00001D26 87F7                <1> 	xchg si, di
  5124 00001D28 E84708              <1> 	call winlist_remove
  5125 00001D2B 87F7                <1> 	xchg si, di
  5126 00001D2D E8B7FF              <1> 	call msgbox_prepare
  5127 00001D30 87F7                <1> 	xchg si, di
  5128 00001D32 E87806              <1> 	call window_run
  5129 00001D35 8B441E              <1> 	mov ax, [si + struc_message_box.pressed_key]
  5130 00001D38 5F                  <1> 	pop di
  5131 00001D39 5E                  <1> 	pop si
  5132 00001D3A C3                  <1>         ret
  5133                              <1> ;=============================================================================
  5134                              <1> 
  5135                              <1> ;=============================================================================
  5136                              <1> ;error_box ---- draw error message box.
  5137                              <1> ;input:
  5138                              <1> ;      ds:si -> error message
  5139                              <1> ;output:
  5140                              <1> ;      ax = return keycode
  5141                              <1> ;=============================================================================
  5142                              <1> error_box:
  5143 00001D3B 53                  <1>         push bx
  5144 00001D3C 52                  <1>         push dx
  5145 00001D3D A0[3F46]            <1>         mov al, [color.error_box_msg]
  5146 00001D40 8B1E[3D46]          <1>         mov bx, [color.error_box_frame]
  5147 00001D44 BA[7846]            <1>         mov dx, str_idx.error
  5148 00001D47 E8D7FF              <1>         call message_box
  5149 00001D4A 5A                  <1>         pop dx
  5150 00001D4B 5B                  <1>         pop bx
  5151 00001D4C C3                  <1>         ret
  5152                              <1> 
  5153                              <1> ;=============================================================================
  5154                              <1> ;info_box ---- draw infomation message box.
  5155                              <1> ;input:
  5156                              <1> ;      ds:si -> infomation message
  5157                              <1> ;output:
  5158                              <1> ;      ax = return keycode
  5159                              <1> ;=============================================================================
  5160                              <1> info_box:
  5161 00001D4D 53                  <1>         push bx
  5162 00001D4E 52                  <1>         push dx
  5163 00001D4F A0[4246]            <1>         mov al, [color.info_box_msg]
  5164 00001D52 8B1E[4046]          <1>         mov bx, [color.info_box_frame]
  5165 00001D56 BA[7C46]            <1>         mov dx, str_idx.info
  5166 00001D59 E8C5FF              <1>         call message_box
  5167 00001D5C 5A                  <1>         pop dx
  5168 00001D5D 5B                  <1>         pop bx
  5169 00001D5E C3                  <1>         ret
  5170                              <1> 
  5171                              <1> ;=============================================================================
  5172                              <1> ; inputbox_set_cursor
  5173                              <1> ; input:
  5174                              <1> ;	ds:si -> input box
  5175                              <1> ; output:
  5176                              <1> ;	none
  5177                              <1> ;=============================================================================
  5178                              <1> inputbox_set_cursor:
  5179 00001D5F 8B5424              <1> 	mov dx, [si + struc_input_box.input_area_pos]
  5180 00001D62 025427              <1> 	add dl, [si + struc_input_box.input_curp]
  5181 00001D65 2A5426              <1> 	sub dl, [si + struc_input_box.input_startp]
  5182 00001D68 E80505              <1> 	call window_set_cursor
  5183 00001D6B E895FE              <1> 	call show_cursor
  5184 00001D6E C3                  <1> 	ret
  5185                              <1> 	
  5186                              <1> ;=============================================================================
  5187                              <1> ; inputbox_draw_body_proc ---- draw_body_proc of input box
  5188                              <1> ; input:
  5189                              <1> ;	ds:si -> pointer to struc_input_box
  5190                              <1> ; output:
  5191                              <1> ;	none
  5192                              <1> ;=============================================================================
  5193                              <1> inputbox_draw_body_proc:
  5194 00001D6F 60                  <1> 	pusha
  5195 00001D70 89F7                <1> 	mov di, si
  5196 00001D72 8B5C1C              <1> 	mov bx, [si + struc_input_box.message_attr]
  5197 00001D75 BA0202              <1> 	mov dx, 0x0202
  5198 00001D78 8B741A              <1> 	mov si, [si + struc_input_box.message]
  5199 00001D7B E80E05              <1> 	call window_draw_string
  5200 00001D7E 61                  <1> 	popa
  5201 00001D7F E80400              <1> 	call inputbox_draw_input_area
  5202 00001D82 E8DAFF              <1> 	call inputbox_set_cursor
  5203 00001D85 C3                  <1> 	ret
  5204                              <1> 
  5205                              <1> ;=============================================================================
  5206                              <1> ; inputbox_draw_input_area ---- draw the input area of a input box
  5207                              <1> ; input:
  5208                              <1> ;	ds:si -> pointer to struc_input_box
  5209                              <1> ; output:
  5210                              <1> ;	none
  5211                              <1> ;=============================================================================
  5212                              <1> inputbox_draw_input_area:
  5213 00001D86 60                  <1> 	pusha
  5214 00001D87 0FB64C23            <1> 	movzx cx, byte [si + struc_input_box.input_area_len]
  5215 00001D8B 8B5424              <1> 	mov dx, [si + struc_input_box.input_area_pos]
  5216 00001D8E B020                <1> 	mov al, 0x20
  5217 00001D90 8A5C1E              <1> 	mov bl, [si + struc_input_box.input_attr]
  5218 00001D93 E8E804              <1> 	call window_draw_char
  5219                              <1> 
  5220 00001D96 0FB64426            <1> 	movzx ax, byte [si + struc_input_box.input_startp]
  5221 00001D9A 8B7C20              <1> 	mov di, [si + struc_input_box.input_buf]
  5222 00001D9D 01C7                <1> 	add di, ax
  5223 00001D9F 8A7C1F              <1> 	mov bh, [si + struc_input_box.input_type]
  5224                              <1> 
  5225                              <1> .loop_draw:
  5226 00001DA2 8A05                <1> 	mov al, [di]
  5227 00001DA4 08C0                <1> 	or al, al
  5228 00001DA6 7412                <1> 	jz .end_draw
  5229 00001DA8 08FF                <1> 	or bh, bh
  5230 00001DAA 7402                <1> 	jz .draw_normal
  5231 00001DAC B02A                <1> 	mov al, '*'
  5232                              <1> .draw_normal:
  5233 00001DAE 51                  <1> 	push cx
  5234 00001DAF B101                <1> 	mov cl, 1
  5235 00001DB1 E8CA04              <1> 	call window_draw_char
  5236 00001DB4 59                  <1> 	pop cx
  5237 00001DB5 FEC2                <1> 	inc dl
  5238 00001DB7 47                  <1> 	inc di
  5239 00001DB8 E2E8                <1> 	loop .loop_draw
  5240                              <1> 
  5241                              <1> .end_draw:
  5242 00001DBA 61                  <1> 	popa
  5243 00001DBB C3                  <1> 	ret
  5244                              <1> 
  5245                              <1> 
  5246                              <1> ;=============================================================================
  5247                              <1> ; inputbox_get_strlen 
  5248                              <1> ; input:
  5249                              <1> ;	ds:si -> input box
  5250                              <1> ; output:
  5251                              <1> ;	cx = input buf strlen
  5252                              <1> ;=============================================================================
  5253                              <1> inputbox_get_strlen:
  5254 00001DBC 56                  <1> 	push si
  5255 00001DBD 8B7420              <1> 	mov si, [si + struc_input_box.input_buf]
  5256 00001DC0 E89109              <1> 	call strlen
  5257 00001DC3 5E                  <1> 	pop si
  5258 00001DC4 C3                  <1> 	ret
  5259                              <1> 
  5260                              <1> ;=============================================================================
  5261                              <1> ; inputbox_delete_char
  5262                              <1> ; input:
  5263                              <1> ;	ds:si -> input box
  5264                              <1> ;	cl = position to be deleted
  5265                              <1> ; output:
  5266                              <1> ;	none
  5267                              <1> ;=============================================================================
  5268                              <1> inputbox_delete_char:
  5269 00001DC5 60                  <1> 	pusha
  5270 00001DC6 30ED                <1> 	xor ch, ch
  5271 00001DC8 8B7C20              <1> 	mov di, [si + struc_input_box.input_buf]
  5272 00001DCB 01CF                <1> 	add di, cx
  5273 00001DCD 89FE                <1> 	mov si, di
  5274 00001DCF 803C00              <1> 	cmp byte [si], 0
  5275 00001DD2 7406                <1> 	jz .end
  5276 00001DD4 46                  <1> 	inc si
  5277 00001DD5 B1FF                <1> 	mov cl, 255
  5278 00001DD7 E8B909              <1> 	call strncpy
  5279                              <1> .end:
  5280 00001DDA 61                  <1> 	popa
  5281 00001DDB C3                  <1> 	ret
  5282                              <1> 
  5283                              <1> ;=============================================================================
  5284                              <1> ; inputbox_post_input
  5285                              <1> ;=============================================================================
  5286                              <1> inputbox_post_input:
  5287 00001DDC 8A4427              <1> 	mov al, [si + struc_input_box.input_curp]
  5288 00001DDF 8A4C26              <1> 	mov cl, [si + struc_input_box.input_startp]
  5289 00001DE2 38C1                <1> 	cmp cl, al
  5290 00001DE4 7205                <1> 	jb .below_cur
  5291 00001DE6 884426              <1> 	mov [si + struc_input_box.input_startp], al
  5292 00001DE9 EB0D                <1> 	jmp short .end
  5293                              <1> 
  5294                              <1> .below_cur:
  5295 00001DEB 28C8                <1> 	sub al, cl
  5296 00001DED 3A4423              <1> 	cmp al, [si + struc_input_box.input_area_len]
  5297 00001DF0 7606                <1> 	jbe .end
  5298 00001DF2 2A4423              <1> 	sub al, [si + struc_input_box.input_area_len]
  5299 00001DF5 004426              <1> 	add [si + struc_input_box.input_startp], al
  5300                              <1> .end:
  5301 00001DF8 C3                  <1> 	ret
  5302                              <1> 
  5303                              <1> ;=============================================================================
  5304                              <1> ; inputbox_backspace 
  5305                              <1> ;=============================================================================
  5306                              <1> inputbox_backspace:
  5307 00001DF9 E8C0FF              <1> 	call inputbox_get_strlen
  5308 00001DFC 09C9                <1> 	or cx, cx
  5309 00001DFE 7412                <1> 	jz .end
  5310 00001E00 8A4C27              <1> 	mov cl, [si + struc_input_box.input_curp]
  5311 00001E03 08C9                <1> 	or cl, cl
  5312 00001E05 740B                <1> 	jz .end
  5313 00001E07 FEC9                <1> 	dec cl
  5314 00001E09 884C27              <1> 	mov [si + struc_input_box.input_curp], cl
  5315 00001E0C E8B6FF              <1> 	call inputbox_delete_char
  5316 00001E0F E8CAFF              <1> 	call inputbox_post_input
  5317                              <1> .end:
  5318 00001E12 C3                  <1> 	ret
  5319                              <1> 
  5320                              <1> ;=============================================================================
  5321                              <1> ; inputbox_delete
  5322                              <1> ;=============================================================================
  5323                              <1> inputbox_delete:
  5324 00001E13 E8A6FF              <1> 	call inputbox_get_strlen
  5325 00001E16 09C9                <1> 	or cx, cx
  5326 00001E18 7409                <1> 	jz .end
  5327 00001E1A 8A4C27              <1> 	mov cl, [si + struc_input_box.input_curp]
  5328 00001E1D E8A5FF              <1> 	call inputbox_delete_char
  5329 00001E20 E8B9FF              <1> 	call inputbox_post_input
  5330                              <1> .end:
  5331 00001E23 C3                  <1> 	ret
  5332                              <1> 
  5333                              <1> ;=============================================================================
  5334                              <1> ; inputbox_right_arrow
  5335                              <1> ;=============================================================================
  5336                              <1> inputbox_right_arrow:
  5337 00001E24 E895FF              <1> 	call inputbox_get_strlen
  5338 00001E27 3A4C27              <1> 	cmp cl, [si + struc_input_box.input_curp]
  5339 00001E2A 7606                <1> 	jbe .end
  5340                              <1> 
  5341 00001E2C FE4427              <1> 	inc byte [si + struc_input_box.input_curp]
  5342 00001E2F E8AAFF              <1> 	call inputbox_post_input
  5343                              <1> .end:
  5344 00001E32 C3                  <1> 	ret
  5345                              <1> 
  5346                              <1> ;=============================================================================
  5347                              <1> ; inputbox_left_arrow
  5348                              <1> ;=============================================================================
  5349                              <1> inputbox_left_arrow:
  5350 00001E33 807C2700            <1> 	cmp byte [si + struc_input_box.input_curp], 0
  5351 00001E37 7406                <1> 	jz .end
  5352                              <1> 
  5353 00001E39 FE4C27              <1> 	dec byte [si + struc_input_box.input_curp]
  5354 00001E3C E89DFF              <1> 	call inputbox_post_input
  5355                              <1> .end:
  5356 00001E3F C3                  <1> 	ret
  5357                              <1> 
  5358                              <1> ;=============================================================================
  5359                              <1> ; inputbox_end_key
  5360                              <1> ;=============================================================================
  5361                              <1> inputbox_end_key:
  5362 00001E40 E879FF              <1> 	call inputbox_get_strlen
  5363 00001E43 884C27              <1> 	mov [si + struc_input_box.input_curp], cl
  5364 00001E46 E893FF              <1> 	call inputbox_post_input
  5365 00001E49 C3                  <1> 	ret
  5366                              <1> 
  5367                              <1> ;=============================================================================
  5368                              <1> ; inputbox_home_key
  5369                              <1> ;=============================================================================
  5370                              <1> inputbox_home_key:
  5371 00001E4A C6442700            <1> 	mov byte [si + struc_input_box.input_curp], 0
  5372 00001E4E E88BFF              <1> 	call inputbox_post_input
  5373 00001E51 C3                  <1> 	ret
  5374                              <1> 
  5375                              <1> 
  5376                              <1> ;=============================================================================
  5377                              <1> ; inputbox_cancel
  5378                              <1> ;=============================================================================
  5379                              <1> inputbox_cancel:
  5380 00001E52 C6442801            <1> 	mov byte [si + struc_input_box.return_val], 1
  5381 00001E56 E8A0FD              <1> 	call hide_cursor
  5382 00001E59 C3                  <1> 	ret
  5383                              <1> 
  5384                              <1> ;=============================================================================
  5385                              <1> ; inputbox_enter
  5386                              <1> ;=============================================================================
  5387                              <1> inputbox_enter:
  5388 00001E5A C6442800            <1> 	mov byte [si + struc_input_box.return_val], 0
  5389 00001E5E E898FD              <1> 	call hide_cursor
  5390 00001E61 C3                  <1> 	ret
  5391                              <1> 
  5392                              <1> ;=============================================================================
  5393                              <1> ; inputbox_insert_char
  5394                              <1> ; input:
  5395                              <1> ;	al = char
  5396                              <1> ;	cl = position
  5397                              <1> ;	ds:si -> input box
  5398                              <1> ;=============================================================================
  5399                              <1> inputbox_insert_char:
  5400 00001E62 60                  <1> 	pusha
  5401 00001E63 30ED                <1> 	xor ch, ch
  5402 00001E65 51                  <1> 	push cx
  5403 00001E66 E853FF              <1> 	call inputbox_get_strlen
  5404 00001E69 8B7420              <1> 	mov si, [si + struc_input_box.input_buf]
  5405 00001E6C 01CE                <1> 	add si, cx
  5406 00001E6E 5A                  <1> 	pop dx
  5407 00001E6F 29D1                <1> 	sub cx, dx
  5408 00001E71 09C9                <1> 	or cx, cx
  5409 00001E73 7408                <1> 	jz .no_move
  5410                              <1> 
  5411                              <1> .loop_move:
  5412 00001E75 8A24                <1> 	mov ah, [si]
  5413 00001E77 886401              <1> 	mov [si + 1], ah
  5414 00001E7A 4E                  <1> 	dec si
  5415 00001E7B E2F8                <1> 	loop .loop_move
  5416                              <1> 
  5417                              <1> .no_move:
  5418 00001E7D 8A24                <1> 	mov ah, [si]
  5419 00001E7F 8904                <1> 	mov [si], ax
  5420 00001E81 61                  <1> 	popa
  5421 00001E82 C3                  <1> 	ret
  5422                              <1> 	
  5423                              <1> ;=============================================================================
  5424                              <1> ; inputbox_default_event_handle
  5425                              <1> ; input:
  5426                              <1> ;	ax = event code
  5427                              <1> ;	ds:si -> input box
  5428                              <1> ; output:
  5429                              <1> ;	none
  5430                              <1> ;=============================================================================
  5431                              <1> inputbox_default_event_handle:
  5432 00001E83 E80506              <1> 	call window_default_event_handle
  5433 00001E86 732C                <1> 	jnc .end
  5434 00001E88 08C0                <1> 	or al, al
  5435 00001E8A 7427                <1> 	jz .no_action
  5436 00001E8C 80FCF0              <1> 	cmp ah, EVTCODE_COMMAND
  5437 00001E8F 7322                <1> 	jae .no_action
  5438 00001E91 3C20                <1> 	cmp al, 0x20
  5439 00001E93 721E                <1> 	jb .no_action
  5440 00001E95 3CE0                <1> 	cmp al, 0xE0
  5441 00001E97 741A                <1> 	je .no_action
  5442                              <1> 
  5443 00001E99 E820FF              <1> 	call inputbox_get_strlen
  5444 00001E9C 2A4C22              <1> 	sub cl, [si + struc_input_box.input_buf_len]
  5445 00001E9F 08C9                <1> 	or cl, cl
  5446 00001EA1 7411                <1> 	jz .end
  5447                              <1> 
  5448 00001EA3 8A4C27              <1> 	mov cl, [si + struc_input_box.input_curp]
  5449 00001EA6 E8B9FF              <1> 	call inputbox_insert_char
  5450 00001EA9 FE4427              <1> 	inc byte [si + struc_input_box.input_curp]
  5451 00001EAC E82DFF              <1> 	call inputbox_post_input
  5452 00001EAF E84903              <1> 	call window_draw_body
  5453 00001EB2 C3                  <1> 	ret
  5454                              <1> 
  5455                              <1> .no_action:
  5456 00001EB3 F9                  <1> 	stc
  5457                              <1> .end:
  5458 00001EB4 C3                  <1> 	ret
  5459                              <1> 
  5460                              <1> ;=============================================================================
  5461                              <1> ; inputbox_prepare
  5462                              <1> ; input:
  5463                              <1> ;	ah = input method ( 0 = normal, 1 = security )
  5464                              <1> ;	al = message attribute
  5465                              <1> ;	bh = title attribute
  5466                              <1> ;	bl = frame attribute
  5467                              <1> ;	ch = input area length
  5468                              <1> ;	cl = max input length
  5469                              <1> ;	ds:si -> message ( no more than one line )
  5470                              <1> ;	ds:di -> pointer to struc_input_box
  5471                              <1> ;	ds:dx -> buffer to store input string
  5472                              <1> ;=============================================================================
  5473                              <1> inputbox_prepare:
  5474 00001EB5 60                  <1> 	pusha
  5475 00001EB6 08ED                <1> 	or ch, ch
  5476 00001EB8 7502                <1> 	jnz .go_prepare
  5477 00001EBA 88CD                <1> 	mov ch, cl
  5478                              <1> .go_prepare:
  5479                              <1> 
  5480 00001EBC 51                  <1> 	push cx
  5481 00001EBD B92900              <1> 	mov cx, SIZE_OF_STRUC_INPUT_BOX
  5482 00001EC0 E8AD0C              <1> 	call clear_memory
  5483 00001EC3 59                  <1> 	pop cx
  5484                              <1> 
  5485 00001EC4 C60506              <1> 	mov byte [di], WINFLAG_FRAMED | WINFLAG_MODAL		; win flag
  5486 00001EC7 C74502[7E46]        <1> 	mov word [di + struc_window.title], str_idx.input	; win title
  5487 00001ECC 895D04              <1> 	mov [di + struc_window.win_attr], bx			; win attr
  5488 00001ECF 89751A              <1> 	mov [di + struc_input_box.message], si
  5489 00001ED2 88451C              <1> 	mov [di + struc_input_box.message_attr], al
  5490 00001ED5 B00F                <1> 	mov al, 0x0F
  5491 00001ED7 89451E              <1> 	mov [di + struc_input_box.input_attr], ax
  5492 00001EDA 895520              <1> 	mov [di + struc_input_box.input_buf], dx
  5493 00001EDD 894D22              <1> 	mov [di + struc_input_box.input_buf_len], cx		; input buf 
  5494                              <1> 								; and area len
  5495                              <1> 
  5496 00001EE0 8B1E[1D46]          <1> 	mov bx, [size.box_width]
  5497 00001EE4 FEC7                <1> 	inc bh
  5498 00001EE6 00EB                <1> 	add bl, ch
  5499                              <1> 
  5500 00001EE8 E86908              <1> 	call strlen
  5501 00001EEB 00CB                <1> 	add bl, cl
  5502 00001EED 895D08              <1> 	mov [di + struc_window.win_size], bx			; win size
  5503 00001EF0 894D24              <1> 	mov [di + struc_input_box.input_area_pos],cx		; input area pos
  5504 00001EF3 8145240202          <1> 	add word [di + struc_input_box.input_area_pos], 0x0202
  5505                              <1> 
  5506 00001EF8 C745100E00          <1> 	mov word [di + struc_window.act_num], INPUTBOX_ACTION_NUM
  5507 00001EFD C74512[7F26]        <1> 	mov word [di + struc_window.act_table], inputbox_action_table
  5508 00001F02 C74514[831E]        <1> 	mov word [di + struc_window.default_event_handle], inputbox_default_event_handle
  5509 00001F07 C74516[9724]        <1> 	mov word [di + struc_window.event_handle], window_event_handle
  5510 00001F0C C74518[6F1D]        <1> 	mov word [di + struc_window.draw_body_proc], inputbox_draw_body_proc
  5511                              <1> 
  5512 00001F11 FE4528              <1> 	inc byte [di + struc_input_box.return_val]
  5513                              <1> 
  5514 00001F14 89FE                <1> 	mov si, di
  5515 00001F16 E85D05              <1> 	call window_center_window
  5516 00001F19 61                  <1> 	popa
  5517 00001F1A C3                  <1> 	ret
  5518                              <1> 
  5519                              <1> ;=============================================================================
  5520                              <1> ;input_box ---- draw a input box and input a string
  5521                              <1> ;input:
  5522                              <1> ;      ah = input method ( 0 = normal, 1 = security )
  5523                              <1> ;      al = message attribute
  5524                              <1> ;      bh = title attribute
  5525                              <1> ;      bl = frame attribute
  5526                              <1> ;      ch = input area length
  5527                              <1> ;      cl = max input length
  5528                              <1> ;      ds:si -> message ( no more than one line )
  5529                              <1> ;      ds:di -> buffer to store input text
  5530                              <1> ;      ds:dx -> parent window
  5531                              <1> ;output:
  5532                              <1> ;      cf = 0 , ah = 0 ok, ch = number of inputed character
  5533                              <1> ;      cf = 1 , ah != 0 cancel, ch = 0
  5534                              <1> ;=============================================================================
  5535                              <1> input_box:
  5536 00001F1B 56                  <1> 	push si
  5537 00001F1C 57                  <1> 	push di
  5538 00001F1D 57                  <1> 	push di
  5539 00001F1E 52                  <1> 	push dx
  5540                              <1> 
  5541 00001F1F BA[9F30]            <1> 	mov dx, ui_tmp.tmp_buf
  5542 00001F22 BF[4B30]            <1> 	mov di, ui_tmp.tmp_inputbox
  5543 00001F25 87F7                <1> 	xchg si, di
  5544 00001F27 E84806              <1> 	call winlist_remove
  5545 00001F2A 87F7                <1> 	xchg si, di
  5546 00001F2C E886FF              <1> 	call inputbox_prepare
  5547                              <1> 
  5548 00001F2F 8F450A              <1> 	pop word [di + struc_window.parent_win]
  5549 00001F32 87FA                <1> 	xchg di, dx
  5550 00001F34 5E                  <1> 	pop si
  5551                              <1> 
  5552 00001F35 06                  <1> 	push es
  5553 00001F36 1E                  <1> 	push ds
  5554 00001F37 07                  <1> 	pop es
  5555                              <1> 
  5556 00001F38 56                  <1> 	push si
  5557 00001F39 57                  <1> 	push di
  5558                              <1> 
  5559 00001F3A E87008              <1> 	call strcpy
  5560                              <1> 	
  5561 00001F3D 89D6                <1> 	mov si, dx
  5562 00001F3F E86B04              <1> 	call window_run
  5563 00001F42 8A6428              <1> 	mov ah, [si + struc_input_box.return_val]
  5564 00001F45 E874FE              <1> 	call inputbox_get_strlen
  5565 00001F48 88CD                <1> 	mov ch, cl
  5566 00001F4A 8A4C22              <1> 	mov cl, [si + struc_input_box.input_buf_len]
  5567 00001F4D 08E4                <1> 	or ah, ah
  5568                              <1> 
  5569 00001F4F 5E                  <1> 	pop si
  5570 00001F50 5F                  <1> 	pop di
  5571 00001F51 7403                <1> 	jz .ok
  5572 00001F53 F9                  <1> 	stc
  5573 00001F54 EB04                <1> 	jmp short .end
  5574                              <1> .ok:
  5575 00001F56 E85408              <1> 	call strcpy
  5576 00001F59 F8                  <1> 	clc
  5577                              <1> .end:
  5578 00001F5A 07                  <1> 	pop es
  5579 00001F5B 5F                  <1> 	pop di
  5580 00001F5C 5E                  <1> 	pop si
  5581 00001F5D C3                  <1> 	ret
  5582                              <1> 
  5583                              <1> ;=============================================================================
  5584                              <1> ;input_password ---- input a password
  5585                              <1> ;input:
  5586                              <1> ;      cl = max password length
  5587                              <1> ;      ds:si -> message string
  5588                              <1> ;output:
  5589                              <1> ;      cf = 0 success, ax:dx = password
  5590                              <1> ;      cf = 1 cancel
  5591                              <1> ;=============================================================================
  5592                              <1> input_password:
  5593 00001F5E 53                  <1>         push bx
  5594 00001F5F 51                  <1>         push cx
  5595                              <1>         
  5596 00001F60 B401                <1>         mov ah, 1
  5597 00001F62 A0[3C46]            <1>         mov al, [color.input_box_msg]
  5598 00001F65 8B1E[3A46]          <1>         mov bx, [color.input_box_frame]
  5599 00001F69 88CD                <1>         mov ch, cl
  5600 00001F6B 31D2                <1>         xor dx, dx
  5601 00001F6D BF[9F31]            <1>         mov di, ui_tmp.tmp_buf1
  5602                              <1> 
  5603 00001F70 C60500              <1>         mov byte [di], 0
  5604                              <1> 
  5605 00001F73 E8A5FF              <1>         call input_box
  5606 00001F76 7209                <1>         jc .cancel_input
  5607                              <1> 
  5608 00001F78 89FE                <1>         mov si, di
  5609 00001F7A 0FB6CD              <1>         movzx cx, ch
  5610 00001F7D E83A08              <1>         call calc_password
  5611 00001F80 F8                  <1>         clc
  5612                              <1> 
  5613                              <1> .cancel_input:
  5614 00001F81 59                  <1>         pop cx
  5615 00001F82 5B                  <1>         pop bx
  5616 00001F83 C3                  <1>         ret
  5617                              <1> ;=============================================================================
  5618                              <1> 
  5619                              <1> ;=============================================================================
  5620                              <1> ; menubox_adjust_geometry ---- adjust the size and position of the menu box
  5621                              <1> ; input:
  5622                              <1> ;	ds:si -> pointer to struc_menu_box
  5623                              <1> ; output:
  5624                              <1> ;	none
  5625                              <1> ;=============================================================================
  5626                              <1> menubox_adjust_geometry:
  5627 00001F84 E80400              <1> 	call menubox_adjust_menu_area
  5628 00001F87 E86E00              <1> 	call menubox_adjust_win_width
  5629 00001F8A C3                  <1> 	ret
  5630                              <1> 
  5631                              <1> ;=============================================================================
  5632                              <1> ; menubox_adjust_menu_area ---- adjust the size and position of the menu area
  5633                              <1> ; input:
  5634                              <1> ;	ds:si -> pointer to struc_menu_box
  5635                              <1> ; output:
  5636                              <1> ;	none
  5637                              <1> ;=============================================================================
  5638                              <1> menubox_adjust_menu_area:
  5639 00001F8B 60                  <1> 	pusha
  5640                              <1> 
  5641                              <1> ;adjust menu area position
  5642 00001F8C B90101              <1> 	mov cx, 0x0101
  5643 00001F8F 8A04                <1> 	mov al, [si]
  5644 00001F91 A840                <1> 	test al, MENUFLAG_SINK_UPPER
  5645 00001F93 7402                <1> 	jz .no_sink_upper
  5646 00001F95 FEC5                <1> 	inc ch
  5647                              <1> .no_sink_upper:
  5648 00001F97 837C1A00            <1> 	cmp word [si + struc_menu_box.menu_header], 0
  5649 00001F9B 7402                <1> 	jz .no_header
  5650 00001F9D FEC5                <1> 	inc ch
  5651                              <1> .no_header:
  5652 00001F9F A820                <1> 	test al, MENUFLAG_SINK_WIDTH
  5653 00001FA1 7402                <1> 	jz .no_sink_width
  5654 00001FA3 FEC1                <1> 	inc cl
  5655                              <1> .no_sink_width:
  5656 00001FA5 894C21              <1> 	mov [si + struc_menu_box.menu_area_pos], cx
  5657                              <1> 
  5658                              <1> ;adjust menu area size
  5659 00001FA8 8B5408              <1> 	mov dx, [si + struc_window.win_size]
  5660 00001FAB 28EE                <1> 	sub dh, ch
  5661 00001FAD FECE                <1> 	dec dh
  5662 00001FAF A880                <1> 	test al, MENUFLAG_SINK_BOTTOM
  5663 00001FB1 7402                <1> 	jz .no_sink_bottom
  5664 00001FB3 FECE                <1> 	dec dh
  5665                              <1> .no_sink_bottom:
  5666                              <1> 
  5667 00001FB5 30D2                <1> 	xor dl, dl
  5668 00001FB7 0FB64C26            <1> 	movzx cx, byte [si + struc_menu_box.items_num]
  5669 00001FBB 09C9                <1> 	or cx, cx
  5670 00001FBD 741D                <1> 	jz .end_calc
  5671 00001FBF 8B5C29              <1> 	mov bx, [si + struc_menu_box.item_str_proc]
  5672 00001FC2 09DB                <1> 	or bx, bx
  5673 00001FC4 7416                <1> 	jz .end_calc
  5674                              <1> 
  5675                              <1> .loop_calc_item_width:
  5676 00001FC6 56                  <1> 	push si
  5677 00001FC7 53                  <1> 	push bx
  5678 00001FC8 51                  <1> 	push cx
  5679 00001FC9 49                  <1> 	dec cx
  5680                              <1> 
  5681 00001FCA 52                  <1> 	push dx
  5682 00001FCB FFD3                <1> 	call bx
  5683 00001FCD 5A                  <1> 	pop dx
  5684                              <1> 
  5685 00001FCE E89607              <1> 	call strlen_hl
  5686 00001FD1 38CA                <1> 	cmp dl, cl
  5687 00001FD3 7302                <1> 	jae .cont_calc
  5688 00001FD5 88CA                <1> 	mov dl, cl
  5689                              <1> .cont_calc:
  5690 00001FD7 59                  <1> 	pop cx
  5691 00001FD8 5B                  <1> 	pop bx
  5692 00001FD9 5E                  <1> 	pop si
  5693 00001FDA E2EA                <1> 	loop .loop_calc_item_width
  5694                              <1> 
  5695                              <1> .end_calc:
  5696                              <1> 
  5697 00001FDC 56                  <1> 	push si
  5698 00001FDD 8B741A              <1> 	mov si, [si + struc_menu_box.menu_header]
  5699 00001FE0 09F6                <1> 	or si, si
  5700 00001FE2 740B                <1> 	jz .no_header_len
  5701 00001FE4 8B34                <1> 	mov si, [si]
  5702 00001FE6 E87E07              <1> 	call strlen_hl
  5703 00001FE9 38CA                <1> 	cmp dl, cl
  5704 00001FEB 7302                <1> 	jae .header_short
  5705 00001FED 88CA                <1> 	mov dl, cl
  5706                              <1> .header_short:
  5707                              <1> .no_header_len:
  5708 00001FEF 80C202              <1> 	add dl, 2
  5709 00001FF2 5E                  <1> 	pop si
  5710 00001FF3 895423              <1> 	mov [si + struc_menu_box.menu_area_size], dx
  5711                              <1> 
  5712 00001FF6 61                  <1> 	popa
  5713 00001FF7 C3                  <1> 	ret
  5714                              <1> 
  5715                              <1> 
  5716                              <1> ;=============================================================================
  5717                              <1> ; menubox_adjust_win_width ---- adjust the width the menu window. 
  5718                              <1> ; input:
  5719                              <1> ;	ds:si -> pointer to struc_menu_box
  5720                              <1> ; output:
  5721                              <1> ;	none
  5722                              <1> ;=============================================================================
  5723                              <1> menubox_adjust_win_width:
  5724 00001FF8 60                  <1> 	pusha
  5725 00001FF9 8A04                <1> 	mov al, [si]
  5726 00001FFB 8B5C23              <1> 	mov bx, [si + struc_menu_box.menu_area_size]
  5727                              <1> 
  5728                              <1> ; calculate window width
  5729 00001FFE 80C302              <1> 	add bl, 2
  5730                              <1> 
  5731 00002001 A820                <1> 	test al, MENUFLAG_SINK_WIDTH
  5732 00002003 7403                <1> 	jz .no_sink_width
  5733 00002005 80C302              <1> 	add bl, 2
  5734                              <1> .no_sink_width:
  5735 00002008 A810                <1> 	test al, MENUFLAG_SCROLLBAR
  5736 0000200A 7402                <1> 	jz .no_scrollbar
  5737 0000200C FEC3                <1> 	inc bl
  5738                              <1> .no_scrollbar:
  5739 0000200E 885C08              <1> 	mov [si + struc_window.win_size], bl
  5740 00002011 8A0E[3326]          <1> 	mov cl, [ui_screen_width]
  5741 00002015 28D9                <1> 	sub cl, bl
  5742 00002017 80E902              <1> 	sub cl, 2
  5743                              <1> 
  5744 0000201A 384C06              <1> 	cmp [si + struc_window.win_pos], cl
  5745 0000201D 7603                <1> 	jbe .no_adjust_pos
  5746 0000201F 884C06              <1> 	mov [si + struc_window.win_pos], cl
  5747                              <1> .no_adjust_pos:
  5748 00002022 61                  <1> 	popa
  5749 00002023 C3                  <1> 	ret
  5750                              <1> 
  5751                              <1> ;=============================================================================
  5752                              <1> ; menubox_draw_body_proc ---- draw the window body of a menu box
  5753                              <1> ; input:
  5754                              <1> ;	ds:si -> pointer to struc_menu_box
  5755                              <1> ; output:
  5756                              <1> ;	none
  5757                              <1> ;=============================================================================
  5758                              <1> menubox_draw_body_proc:
  5759 00002024 60                  <1> 	pusha
  5760 00002025 E82700              <1> 	call menubox_draw_menu
  5761 00002028 837C1A00            <1> 	cmp word [si + struc_menu_box.menu_header], 0
  5762 0000202C 7403                <1> 	jz .no_header
  5763 0000202E E87D00              <1> 	call menubox_draw_header
  5764                              <1> .no_header:
  5765 00002031 F60410              <1> 	test byte [si], MENUFLAG_SCROLLBAR
  5766 00002034 7403                <1> 	jz .no_scrollbar
  5767 00002036 E80200              <1> 	call menubox_draw_scrollbar
  5768                              <1> .no_scrollbar:
  5769 00002039 61                  <1> 	popa
  5770 0000203A C3                  <1> 	ret
  5771                              <1> 
  5772                              <1> 
  5773                              <1> ;=============================================================================
  5774                              <1> ; menubox_draw_scrollbar ---- draw the scrollbar
  5775                              <1> ; input:
  5776                              <1> ;	ds:si -> pointer to struc_menu_box
  5777                              <1> ; output:
  5778                              <1> ;	none
  5779                              <1> ;=============================================================================
  5780                              <1> menubox_draw_scrollbar:
  5781 0000203B 8B4426              <1> 	mov ax, [si + struc_menu_box.items_num]
  5782 0000203E 8A5C25              <1> 	mov bl, [si + struc_menu_box.scrollbar_attr]
  5783 00002041 8B4C21              <1> 	mov cx, [si + struc_menu_box.menu_area_pos]
  5784 00002044 8B5423              <1> 	mov dx, [si + struc_menu_box.menu_area_size]
  5785 00002047 00D1                <1> 	add cl, dl
  5786 00002049 30D2                <1> 	xor dl, dl
  5787 0000204B E84C02              <1> 	call window_draw_scrollbar
  5788 0000204E C3                  <1> 	ret
  5789                              <1> 
  5790                              <1> ;=============================================================================
  5791                              <1> ; menubox_draw_menu ---- draw the menu area
  5792                              <1> ; input:
  5793                              <1> ;	ds:si -> pointer to struc_menu_box
  5794                              <1> ; output:
  5795                              <1> ;	none
  5796                              <1> ;=============================================================================
  5797                              <1> menubox_draw_menu:
  5798 0000204F 60                  <1> 	pusha
  5799 00002050 8B4C21              <1> 	mov cx, [si + struc_menu_box.menu_area_pos]
  5800 00002053 8B5423              <1> 	mov dx, [si + struc_menu_box.menu_area_size]
  5801 00002056 52                  <1> 	push dx
  5802 00002057 51                  <1> 	push cx
  5803 00002058 034C06              <1> 	add cx, [si + struc_window.win_pos]
  5804 0000205B 01CA                <1> 	add dx, cx
  5805                              <1> 
  5806 0000205D 81EA0101            <1> 	sub dx, 0x0101
  5807 00002061 8A7C1D              <1> 	mov bh, [si + struc_menu_box.menu_norm_attr]
  5808 00002064 E892F9              <1> 	call clear_screen
  5809                              <1> 
  5810 00002067 5A                  <1> 	pop dx
  5811 00002068 58                  <1> 	pop ax
  5812                              <1> 
  5813 00002069 0FB64C28            <1> 	movzx cx, [si + struc_menu_box.first_visible_item]
  5814 0000206D 807C2600            <1> 	cmp byte [si + struc_menu_box.items_num], 0
  5815 00002071 7439                <1> 	je .end
  5816                              <1> 
  5817 00002073 89F7                <1> 	mov di, si
  5818                              <1> 
  5819                              <1> .loop_draw_item:
  5820 00002075 3A4C27              <1> 	cmp cl, [si + struc_menu_box.focus_item]
  5821 00002078 7405                <1> 	je .focused
  5822 0000207A 8B5C1D              <1> 	mov bx, [si + struc_menu_box.menu_norm_attr]
  5823 0000207D EB03                <1> 	jmp short .draw_item
  5824                              <1> .focused:
  5825 0000207F 8B5C1F              <1> 	mov bx, [si + struc_menu_box.menu_focus_attr]
  5826                              <1> .draw_item:
  5827 00002082 60                  <1> 	pusha
  5828 00002083 51                  <1> 	push cx
  5829 00002084 88C1                <1> 	mov cl, al
  5830 00002086 B020                <1> 	mov al, ' '
  5831 00002088 E8F301              <1> 	call window_draw_char
  5832 0000208B 59                  <1> 	pop cx
  5833 0000208C FEC2                <1> 	inc dl
  5834 0000208E 53                  <1> 	push bx
  5835 0000208F 52                  <1> 	push dx
  5836 00002090 57                  <1> 	push di
  5837 00002091 FF5429              <1> 	call word [si + struc_menu_box.item_str_proc]
  5838 00002094 5F                  <1> 	pop di
  5839 00002095 5A                  <1> 	pop dx
  5840 00002096 5B                  <1> 	pop bx
  5841 00002097 E8F201              <1> 	call window_draw_string
  5842 0000209A 61                  <1> 	popa
  5843 0000209B FEC6                <1> 	inc dh
  5844 0000209D FEC1                <1> 	inc cl
  5845 0000209F FECC                <1> 	dec ah
  5846 000020A1 3A4C26              <1> 	cmp cl, [si + struc_menu_box.items_num]
  5847 000020A4 7306                <1> 	jae .end
  5848 000020A6 08E4                <1> 	or ah, ah
  5849 000020A8 7402                <1> 	jz .end
  5850 000020AA EBC9                <1> 	jmp short .loop_draw_item
  5851                              <1> .end:
  5852 000020AC 61                  <1> 	popa
  5853 000020AD C3                  <1> 	ret
  5854                              <1> 
  5855                              <1> ;=============================================================================
  5856                              <1> ; menubox_draw_header ---- draw the menu header
  5857                              <1> ; input:
  5858                              <1> ;	ds:si -> pointer to struc_menu_box
  5859                              <1> ; output:
  5860                              <1> ;	none
  5861                              <1> ;=============================================================================
  5862                              <1> menubox_draw_header:
  5863 000020AE 60                  <1> 	pusha
  5864 000020AF 8B5C1C              <1> 	mov bx, [si + struc_menu_box.menu_header_attr]
  5865 000020B2 8B5421              <1> 	mov dx, [si + struc_menu_box.menu_area_pos]
  5866 000020B5 FECE                <1> 	dec dh
  5867 000020B7 0FB64C23            <1> 	movzx cx, byte [si + struc_menu_box.menu_area_size]
  5868 000020BB B020                <1> 	mov al, ' '
  5869 000020BD F60410              <1> 	test byte [si], MENUFLAG_SCROLLBAR
  5870 000020C0 7402                <1> 	jz .no_scrollbar
  5871 000020C2 FEC1                <1> 	inc cl
  5872                              <1> .no_scrollbar:
  5873 000020C4 E8B701              <1> 	call window_draw_char
  5874 000020C7 89F7                <1> 	mov di, si
  5875 000020C9 8B741A              <1> 	mov si, [si + struc_menu_box.menu_header]
  5876 000020CC 8B34                <1> 	mov si, [si]
  5877 000020CE FEC2                <1> 	inc dl
  5878 000020D0 E8B901              <1> 	call window_draw_string
  5879 000020D3 61                  <1> 	popa
  5880 000020D4 C3                  <1> 	ret
  5881                              <1> 
  5882                              <1> ;=============================================================================
  5883                              <1> ; menubox_do_focus ---- do the focused menu item, get the pointer of item action
  5884                              <1> ;                    from action_table, then call window_do_action to do it.
  5885                              <1> ; input:
  5886                              <1> ;	ds:si -> pointer to struc_menu_box
  5887                              <1> ; output:
  5888                              <1> ;	none
  5889                              <1> ;=============================================================================
  5890                              <1> menubox_do_focus:
  5891 000020D5 8B5C12              <1> 	mov bx, [si + struc_window.act_table]
  5892 000020D8 B005                <1> 	mov al, SIZE_OF_STRUC_ACTION
  5893 000020DA 8A4C27              <1> 	mov cl, [si + struc_menu_box.focus_item]
  5894 000020DD F6E1                <1> 	mul cl
  5895 000020DF 01C3                <1> 	add bx, ax
  5896 000020E1 8B4701              <1> 	mov ax, [bx + struc_action.keycode]
  5897 000020E4 E80004              <1> 	call window_do_action
  5898 000020E7 C3                  <1> 	ret
  5899                              <1> 	
  5900                              <1> 
  5901                              <1> ;=============================================================================
  5902                              <1> ; menubox_adjust_visible_boundary
  5903                              <1> ;input:
  5904                              <1> ;	ds:si -> pointer to struc_menu_box
  5905                              <1> ;=============================================================================
  5906                              <1> menubox_adjust_visible_boundary:
  5907 000020E8 8B4427              <1> 	mov ax, [si + struc_menu_box.focus_item] ; al = focus_item, ah = first_visible_item
  5908                              <1> 
  5909                              <1> .check_upper:
  5910 000020EB 38E0                <1> 	cmp al, ah
  5911 000020ED 7303                <1> 	jae .check_bottom
  5912 000020EF 884428              <1> 	mov [si + struc_menu_box.first_visible_item], al
  5913                              <1> .check_bottom:
  5914 000020F2 026424              <1> 	add ah, [si + struc_menu_box.menu_area_size + 1]
  5915 000020F5 38E0                <1> 	cmp al, ah
  5916 000020F7 7207                <1> 	jb .end
  5917 000020F9 28E0                <1> 	sub al, ah
  5918 000020FB FEC0                <1> 	inc al
  5919 000020FD 004428              <1> 	add [si + struc_menu_box.first_visible_item], al
  5920                              <1> .end:	
  5921 00002100 C3                  <1> 	ret
  5922                              <1> 
  5923                              <1> ;=============================================================================
  5924                              <1> ; menubox_focus_up ---- move the focus bar up one line
  5925                              <1> ; input:
  5926                              <1> ;	ds:si -> pointer to struc_menu_box
  5927                              <1> ; output:
  5928                              <1> ;	none
  5929                              <1> ;=============================================================================
  5930                              <1> menubox_focus_up:
  5931 00002101 8B4426              <1> 	mov ax, [si + struc_menu_box.items_num]	;al = items_num, ah = focus_item
  5932 00002104 08E4                <1> 	or ah, ah
  5933 00002106 7502                <1> 	jnz .up
  5934 00002108 88C4                <1> 	mov ah, al
  5935                              <1> .up:
  5936 0000210A FECC                <1> 	dec ah
  5937 0000210C 886427              <1> 	mov [si + struc_menu_box.focus_item], ah
  5938 0000210F E8D6FF              <1> 	call menubox_adjust_visible_boundary
  5939 00002112 C3                  <1> 	ret
  5940                              <1> 
  5941                              <1> ;=============================================================================
  5942                              <1> ; menu_focus_pageup ---- move the focus bar up one page
  5943                              <1> ; input:
  5944                              <1> ;	ds:si -> pointer to struc_menu_box
  5945                              <1> ; output:
  5946                              <1> ;	none
  5947                              <1> ;=============================================================================
  5948                              <1> menubox_focus_pageup:
  5949 00002113 8A4427              <1> 	mov al, [si + struc_menu_box.focus_item]
  5950 00002116 8A4C24              <1> 	mov cl, byte [si + struc_menu_box.menu_area_size+1]
  5951 00002119 FEC9                <1> 	dec cl
  5952 0000211B 38C1                <1> 	cmp cl, al
  5953 0000211D 7206                <1> 	jb .loop_up
  5954                              <1> 
  5955 0000211F 88C1                <1> 	mov cl, al
  5956 00002121 08C9                <1> 	or cl, cl
  5957 00002123 7407                <1> 	jz .end
  5958                              <1> 
  5959                              <1> .loop_up:
  5960 00002125 30ED                <1> 	xor ch, ch
  5961 00002127 E8D7FF              <1> 	call menubox_focus_up
  5962 0000212A E2F9                <1> 	loop .loop_up
  5963                              <1> .end:
  5964 0000212C C3                  <1> 	ret
  5965                              <1> 
  5966                              <1> ;=============================================================================
  5967                              <1> ; menu_focus_down ---- move the focus bar down one line
  5968                              <1> ; input:
  5969                              <1> ;	ds:si -> pointer to struc_menu_box
  5970                              <1> ; output:
  5971                              <1> ;	none
  5972                              <1> ;=============================================================================
  5973                              <1> menubox_focus_down:
  5974 0000212D 8B4426              <1> 	mov ax, [si + struc_menu_box.items_num]	;al = items_num, ah = focus_item
  5975 00002130 FEC4                <1> 	inc ah
  5976 00002132 38C4                <1> 	cmp ah, al
  5977 00002134 7202                <1> 	jb .down
  5978 00002136 30E4                <1> 	xor ah, ah
  5979                              <1> .down:
  5980 00002138 886427              <1> 	mov [si + struc_menu_box.focus_item], ah
  5981 0000213B E8AAFF              <1> 	call menubox_adjust_visible_boundary
  5982 0000213E C3                  <1> 	ret
  5983                              <1> 
  5984                              <1> ;=============================================================================
  5985                              <1> ; menu_focus_pagedown ---- move the focus bar down one page
  5986                              <1> ; input:
  5987                              <1> ;	ds:si -> pointer to struc_menu_box
  5988                              <1> ; output:
  5989                              <1> ;	none
  5990                              <1> ;=============================================================================
  5991                              <1> menubox_focus_pagedown:
  5992 0000213F 8B4426              <1> 	mov ax, [si + struc_menu_box.items_num]
  5993 00002142 08C0                <1> 	or al, al
  5994 00002144 741A                <1> 	jz .end
  5995                              <1> 
  5996 00002146 28E0                <1> 	sub al, ah
  5997 00002148 FEC8                <1> 	dec al
  5998                              <1> 
  5999 0000214A 8A4C24              <1> 	mov cl, byte [si + struc_menu_box.menu_area_size+1]
  6000 0000214D FEC9                <1> 	dec cl
  6001                              <1> 
  6002 0000214F 38C1                <1> 	cmp cl, al
  6003 00002151 7206                <1> 	jb .loop_down
  6004 00002153 88C1                <1> 	mov cl, al
  6005 00002155 08C9                <1> 	or cl, cl
  6006 00002157 7407                <1> 	jz .end
  6007                              <1> 
  6008                              <1> .loop_down:
  6009 00002159 30ED                <1> 	xor ch, ch
  6010 0000215B E8CFFF              <1> 	call menubox_focus_down
  6011 0000215E E2F9                <1> 	loop .loop_down
  6012                              <1> .end:
  6013 00002160 C3                  <1> 	ret
  6014                              <1> 
  6015                              <1> ;=============================================================================
  6016                              <1> ;menubox_default_event_handle
  6017                              <1> ;=============================================================================
  6018                              <1> menubox_default_event_handle:
  6019 00002161 60                  <1> 	pusha
  6020 00002162 B90A00              <1> 	mov cx, MENUBOX_DEF_ACTION_NUM
  6021 00002165 BB[D426]            <1> 	mov bx, menubox_def_action_table
  6022 00002168 E84603              <1> 	call window_generic_event_handle
  6023 0000216B 7303                <1> 	jnc .end
  6024 0000216D E81B03              <1> 	call window_default_event_handle
  6025                              <1> .end:
  6026 00002170 61                  <1> 	popa
  6027 00002171 C3                  <1> 	ret
  6028                              <1> ;=============================================================================
  6029                              <1> 
  6030                              <1> ;=============================================================================
  6031                              <1> ; listbox_prepare ---- prepare a list box
  6032                              <1> ; input:
  6033                              <1> ;	cl = number of items
  6034                              <1> ;	ch = height of list box
  6035                              <1> ;	ds:bx -> 2nd level pointer to title
  6036                              <1> ;	ds:dx -> 2nd level pointer to header
  6037                              <1> ;	ds:si -> items string proc
  6038                              <1> ;	ds:di -> struc_menu_box
  6039                              <1> ;=============================================================================
  6040                              <1> listbox_prepare:
  6041 00002172 60                  <1> 	pusha
  6042 00002173 51                  <1> 	push cx
  6043 00002174 B92B00              <1> 	mov cx, SIZE_OF_STRUC_MENU_BOX
  6044 00002177 E8F609              <1> 	call clear_memory
  6045 0000217A 59                  <1> 	pop cx
  6046                              <1> 
  6047 0000217B C60516              <1> 	mov byte [di], WINFLAG_FRAMED | WINFLAG_MODAL | MENUFLAG_SCROLLBAR
  6048 0000217E 895D02              <1> 	mov [di + struc_window.title], bx
  6049 00002181 89551A              <1> 	mov [di + struc_menu_box.menu_header], dx
  6050 00002184 897529              <1> 	mov [di + struc_menu_box.item_str_proc], si
  6051                              <1> 
  6052 00002187 BE[3246]            <1> 	mov si, color.list_box
  6053 0000218A FC                  <1> 	cld
  6054 0000218B AD                  <1> 	lodsw
  6055 0000218C 894504              <1> 	mov word [di + struc_window.win_attr], ax
  6056 0000218F AC                  <1> 	lodsb
  6057 00002190 88451C              <1> 	mov byte [di + struc_menu_box.menu_header_attr], al
  6058 00002193 AD                  <1> 	lodsw
  6059 00002194 89451D              <1> 	mov word [di + struc_menu_box.menu_norm_attr], ax
  6060 00002197 AD                  <1> 	lodsw
  6061 00002198 89451F              <1> 	mov word [di + struc_menu_box.menu_focus_attr], ax
  6062 0000219B AC                  <1> 	lodsb
  6063 0000219C 884525              <1> 	mov byte [di + struc_menu_box.scrollbar_attr], al
  6064                              <1> 
  6065 0000219F 884D26              <1> 	mov [di + struc_menu_box.items_num], cl
  6066 000021A2 886D09              <1> 	mov [di + struc_window.win_size + 1], ch
  6067 000021A5 C745100300          <1> 	mov word [di + struc_window.act_num], LISTBOX_ACTION_NUM
  6068 000021AA C74512[C526]        <1> 	mov word [di + struc_window.act_table], listbox_action_table
  6069 000021AF C74514[6121]        <1> 	mov word [di + struc_window.default_event_handle], menubox_default_event_handle
  6070 000021B4 C74516[9724]        <1> 	mov word [di + struc_window.event_handle], window_event_handle
  6071 000021B9 C74518[2420]        <1> 	mov word [di + struc_window.draw_body_proc], menubox_draw_body_proc
  6072                              <1> 
  6073 000021BE 89FE                <1> 	mov si, di
  6074 000021C0 E8C1FD              <1> 	call menubox_adjust_geometry
  6075 000021C3 E8B002              <1> 	call window_center_window
  6076 000021C6 61                  <1> 	popa
  6077 000021C7 C3                  <1> 	ret
  6078                              <1> 	
  6079                              <1> ;=============================================================================
  6080                              <1> ; list_box ---- run a list box
  6081                              <1> ; input:
  6082                              <1> ;	cl = number of items
  6083                              <1> ;	ch = height of list box
  6084                              <1> ;	ds:bx -> 2nd level pointer to title
  6085                              <1> ;	ds:dx -> 2nd level pointer to header
  6086                              <1> ;	ds:si -> items string proc
  6087                              <1> ; output:
  6088                              <1> ;	cl = selected item, 0xff means canceled
  6089                              <1> ;	cf = 0 success, cf = 1 canceled
  6090                              <1> ;=============================================================================
  6091                              <1> list_box:
  6092 000021C8 60                  <1> 	pusha
  6093 000021C9 BF[7430]            <1> 	mov di, ui_tmp.tmp_menubox
  6094 000021CC E8A3FF              <1> 	call listbox_prepare
  6095 000021CF 89FE                <1> 	mov si, di
  6096 000021D1 E8D901              <1> 	call window_run
  6097 000021D4 61                  <1> 	popa
  6098 000021D5 8A0E[9B30]          <1> 	mov cl, [ui_tmp.tmp_menubox + struc_menu_box.focus_item]
  6099 000021D9 80F9FF              <1> 	cmp cl, 0xFF
  6100 000021DC 7402                <1> 	je .cancel
  6101 000021DE F8                  <1> 	clc
  6102 000021DF C3                  <1> 	ret
  6103                              <1> .cancel:
  6104 000021E0 F9                  <1> 	stc
  6105 000021E1 C3                  <1> 	ret
  6106                              <1> 
  6107                              <1> ;=============================================================================
  6108                              <1> ; listbox_cancel
  6109                              <1> ;=============================================================================
  6110                              <1> listbox_cancel:
  6111 000021E2 C64427FF            <1> 	mov byte [si + struc_menu_box.focus_item], 0xFF
  6112 000021E6 C3                  <1> 	ret
  6113                              <1> ;=============================================================================
  6114                              <1> 
  6115                              <1> 
  6116                              <1> 
  6117                              <1> ;=============================================================================
  6118                              <1> ;<<<<<<<<<<<<<<<<<<<<<<<<<< Window System functions >>>>>>>>>>>>>>>>>>>>>>>>>>
  6119                              <1> ;=============================================================================
  6120                              <1> 
  6121                              <1> ;=============================================================================
  6122                              <1> ; window_draw_all ---- draw all windows
  6123                              <1> ; input:
  6124                              <1> ;	none
  6125                              <1> ; output:
  6126                              <1> ;	none
  6127                              <1> ;=============================================================================
  6128                              <1> window_draw_all:
  6129 000021E7 60                  <1> 	pusha
  6130 000021E8 8B36[0F30]          <1> 	mov si, [ui_tmp.root_win]
  6131 000021EC 09F6                <1> 	or si, si
  6132 000021EE 7409                <1> 	jz .end
  6133 000021F0 E899FA              <1> 	call lock_screen
  6134 000021F3 E82600              <1> 	call window_draw_window
  6135 000021F6 E8B9FA              <1> 	call unlock_screen
  6136                              <1> .end:
  6137 000021F9 61                  <1> 	popa
  6138 000021FA C3                  <1> 	ret
  6139                              <1> 
  6140                              <1> ;=============================================================================
  6141                              <1> ; window_draw_body ---- draw the window body
  6142                              <1> ; input:
  6143                              <1> ;	ds:si -> pointer to struc_window
  6144                              <1> ; output:
  6145                              <1> ;	none
  6146                              <1> ;=============================================================================
  6147                              <1> window_draw_body:
  6148 000021FB 60                  <1> 	pusha
  6149 000021FC 09F6                <1> 	or si, si
  6150 000021FE 741A                <1> 	jz .no_win
  6151                              <1> 
  6152 00002200 F60401              <1> 	test byte [si], WINFLAG_OPEN
  6153 00002203 7415                <1> 	jz .no_win
  6154                              <1> 
  6155 00002205 8B5C18              <1> 	mov bx, [si + struc_window.draw_body_proc]
  6156 00002208 09DB                <1> 	or bx, bx
  6157 0000220A 740E                <1> 	jz .no_win
  6158                              <1> 
  6159 0000220C 56                  <1> 	push si
  6160 0000220D FFD3                <1> 	call bx
  6161 0000220F 5E                  <1> 	pop si
  6162                              <1> 
  6163 00002210 8B740C              <1> 	mov si, [si + struc_window.next_win]
  6164 00002213 09F6                <1> 	or si, si
  6165 00002215 7403                <1> 	jz .no_win
  6166 00002217 E80200              <1> 	call window_draw_window		; draw top windows.
  6167                              <1> 
  6168                              <1> .no_win:
  6169 0000221A 61                  <1> 	popa
  6170 0000221B C3                  <1> 	ret
  6171                              <1> ;=============================================================================
  6172                              <1> ; window_draw_window ---- draw the window and window body
  6173                              <1> ; input:
  6174                              <1> ;	ds:si -> pointer to struc_window
  6175                              <1> ; output:
  6176                              <1> ;	none
  6177                              <1> ;=============================================================================
  6178                              <1> window_draw_window:
  6179 0000221C 60                  <1> 	pusha
  6180                              <1> 
  6181 0000221D E8D9F9              <1> 	call hide_cursor
  6182                              <1> 
  6183 00002220 09F6                <1> 	or si, si
  6184 00002222 7422                <1> 	jz .no_next_win
  6185                              <1> 
  6186 00002224 F60401              <1> 	test byte [si], WINFLAG_OPEN
  6187 00002227 7413                <1> 	jz .no_body
  6188 00002229 F60404              <1> 	test byte [si], WINFLAG_FRAMED
  6189 0000222C 7403                <1> 	jz .no_frame
  6190 0000222E E81700              <1> 	call window_draw_frame
  6191                              <1> .no_frame:
  6192 00002231 8B5C18              <1> 	mov bx, [si + struc_window.draw_body_proc]
  6193 00002234 09DB                <1> 	or bx, bx
  6194 00002236 7404                <1> 	jz .no_body
  6195 00002238 56                  <1>         push si
  6196 00002239 FFD3                <1> 	call bx
  6197 0000223B 5E                  <1>         pop si
  6198                              <1> .no_body:
  6199 0000223C 8B740C              <1> 	mov si, [si + struc_window.next_win]
  6200 0000223F 09F6                <1> 	or si, si
  6201 00002241 7403                <1> 	jz .no_next_win
  6202 00002243 E8D6FF              <1> 	call window_draw_window		; draw top windows.
  6203                              <1> 
  6204                              <1> .no_next_win:
  6205 00002246 61                  <1> 	popa
  6206 00002247 C3                  <1> 	ret
  6207                              <1> 
  6208                              <1> ;=============================================================================
  6209                              <1> ; window_draw_frame ---- draw the window frame and clear the window body
  6210                              <1> ; input:
  6211                              <1> ;	ds:si -> pointer to struc_window
  6212                              <1> ; output:
  6213                              <1> ;	none
  6214                              <1> ;=============================================================================
  6215                              <1> window_draw_frame:
  6216 00002248 60                  <1> 	pusha
  6217 00002249 8B4C06              <1> 	mov cx, [si + struc_window.win_pos]	; window position
  6218 0000224C 8B5408              <1> 	mov dx, [si + struc_window.win_size]	;
  6219 0000224F 01CA                <1> 	add dx, cx				; calculate window bottom
  6220 00002251 81EA0101            <1> 	sub dx, 0x0101				; right corner.
  6221                              <1> 
  6222 00002255 8B5C04              <1> 	mov bx, [si + struc_window.win_attr]	; window attribute
  6223                              <1> 
  6224 00002258 3B36[0D30]          <1> 	cmp si, [ui_tmp.focus_win]
  6225 0000225C 7404                <1> 	je .focused
  6226                              <1> 
  6227 0000225E 8A3E[2146]          <1> 	mov bh, [color.win_title_inactive]	; use another title attr for 
  6228                              <1> 						; inactive window.
  6229                              <1> .focused:
  6230 00002262 8B7402              <1> 	mov si, [si + struc_window.title]	; get window title pointer
  6231 00002265 09F6                <1> 	or si, si
  6232 00002267 7402                <1> 	jz .no_title
  6233 00002269 8B34                <1> 	mov si, [si]
  6234                              <1> .no_title:
  6235 0000226B E8D3F7              <1> 	call draw_window
  6236 0000226E 61                  <1> 	popa
  6237 0000226F C3                  <1> 	ret
  6238                              <1> 
  6239                              <1> ;=============================================================================
  6240                              <1> ; window_set_cursor
  6241                              <1> ; input:
  6242                              <1> ;	dx = cursor position
  6243                              <1> ;	ds:si -> window
  6244                              <1> ; output:
  6245                              <1> ;	none
  6246                              <1> ;=============================================================================
  6247                              <1> window_set_cursor:
  6248 00002270 52                  <1> 	push dx
  6249 00002271 F60401              <1> 	test byte [si], WINFLAG_OPEN
  6250 00002274 7406                <1> 	jz .no_cursor
  6251                              <1> 
  6252 00002276 035406              <1> 	add dx, [si + struc_window.win_pos]
  6253 00002279 E872F9              <1> 	call set_cursor
  6254                              <1> 
  6255                              <1> .no_cursor:
  6256 0000227C 5A                  <1> 	pop dx
  6257 0000227D C3                  <1> 	ret
  6258                              <1> 
  6259                              <1> ;=============================================================================
  6260                              <1> ; window_draw_char ---- Draw chars at special position in a window
  6261                              <1> ;input:
  6262                              <1> ;      bl = high 4 bit Background color and low 4 bit Foreground color
  6263                              <1> ;      dh = start row
  6264                              <1> ;      dl = start column
  6265                              <1> ;      al = the char to be displayed
  6266                              <1> ;      cx = repeat times
  6267                              <1> ;      ds:si -> the window
  6268                              <1> ;output:
  6269                              <1> ;      none
  6270                              <1> ;=============================================================================
  6271                              <1> window_draw_char:
  6272 0000227E 52                  <1> 	push dx
  6273 0000227F F60401              <1> 	test byte [si], WINFLAG_OPEN
  6274 00002282 7406                <1> 	jz .not_draw
  6275                              <1> 
  6276 00002284 035406              <1> 	add dx, [si + struc_window.win_pos]
  6277 00002287 E851F7              <1> 	call draw_char
  6278                              <1> 
  6279                              <1> .not_draw:
  6280 0000228A 5A                  <1> 	pop dx
  6281 0000228B C3                  <1> 	ret
  6282                              <1> 
  6283                              <1> ;=============================================================================
  6284                              <1> ;window_draw_string ---- Draw a zero ending string in a window 
  6285                              <1> ;                    at special position
  6286                              <1> ;input:
  6287                              <1> ;      bl = attribute for normal characters
  6288                              <1> ;           high 4 bit Background color and low 4 bit Foreground color
  6289                              <1> ;      bh = attribute for hightlight characters
  6290                              <1> ;      dh = start row
  6291                              <1> ;      dl = start column
  6292                              <1> ;      ds:si -> the string to be displayed
  6293                              <1> ;      ds:di -> the window
  6294                              <1> ;output:
  6295                              <1> ;      none
  6296                              <1> ;=============================================================================
  6297                              <1> window_draw_string:
  6298 0000228C 60                  <1> 	pusha
  6299 0000228D F60501              <1> 	test byte [di], WINFLAG_OPEN
  6300 00002290 7406                <1> 	jz .not_draw
  6301                              <1> 
  6302 00002292 035506              <1> 	add dx, [di + struc_window.win_pos]
  6303 00002295 E81CF7              <1> 	call draw_string
  6304                              <1> .not_draw:
  6305 00002298 61                  <1> 	popa
  6306 00002299 C3                  <1> 	ret
  6307                              <1> 
  6308                              <1> ;=============================================================================
  6309                              <1> ; window_draw_scrollbar ---- draw a scroll bar in a window
  6310                              <1> ; input:
  6311                              <1> ;	ds:si -> pointer to struc_window
  6312                              <1> ;	al    -> total amount
  6313                              <1> ;	ah    -> current value
  6314                              <1> ;	bl    -> attribute 
  6315                              <1> ;	ch    -> row of top of the scroll bar (relative to window position)
  6316                              <1> ;	cl    -> col of top of the scroll bar (relative to window position)
  6317                              <1> ;	dh    -> height of the scroll bar ( vertical bar, dl = 0 )
  6318                              <1> ;	dl    -> length of the scroll bar ( horizontal bar, dh = 0 )
  6319                              <1> ; output:
  6320                              <1> ;	none
  6321                              <1> ;=============================================================================
  6322                              <1> window_draw_scrollbar:
  6323 0000229A 60                  <1> 	pusha
  6324                              <1> 
  6325                              <1> ; ================== do some initialization. ==================
  6326 0000229B 51                  <1> 	push cx
  6327 0000229C 31C9                <1> 	xor cx, cx
  6328 0000229E 880E[3C23]          <1> 	mov [.bar_type], cl
  6329 000022A2 FEC1                <1> 	inc cl
  6330                              <1> 
  6331 000022A4 08F6                <1> 	or dh, dh
  6332 000022A6 7406                <1> 	jz .horiz1
  6333 000022A8 880E[3C23]          <1> 	mov [.bar_type], cl
  6334 000022AC 86D6                <1> 	xchg dl, dh
  6335                              <1> .horiz1:
  6336                              <1> 
  6337 000022AE 8816[3D23]          <1> 	mov [.bar_length], dl
  6338 000022B2 5A                  <1> 	pop dx
  6339                              <1> 
  6340 000022B3 50                  <1> 	push ax
  6341 000022B4 52                  <1> 	push dx
  6342                              <1> 
  6343                              <1> ; ==================== draw blank bar =================
  6344 000022B5 8A26[3D23]          <1> 	mov ah, [.bar_length]
  6345 000022B9 B020                <1> 	mov al, ' '
  6346                              <1> 
  6347                              <1> .loop_draw_blank:
  6348 000022BB E8C0FF              <1> 	call window_draw_char
  6349 000022BE FECC                <1> 	dec ah
  6350                              <1> 
  6351 000022C0 803E[3C23]00        <1> 	cmp byte [.bar_type], 0
  6352 000022C5 7405                <1> 	jz .horiz2
  6353 000022C7 FEC6                <1> 	inc dh
  6354 000022C9 E90200              <1> 	jmp near .cont_draw_blank
  6355                              <1> .horiz2:
  6356 000022CC FEC2                <1> 	inc dl
  6357                              <1> 
  6358                              <1> .cont_draw_blank:
  6359 000022CE 08E4                <1> 	or ah, ah
  6360 000022D0 75E9                <1> 	jnz .loop_draw_blank
  6361                              <1> 
  6362 000022D2 803E[3C23]00        <1> 	cmp byte [.bar_type], 0
  6363 000022D7 7406                <1> 	jz .horiz3
  6364 000022D9 B81E1F              <1> 	mov ax, 0x1f1e
  6365 000022DC E90300              <1> 	jmp near .draw_arrow
  6366                              <1> .horiz3:
  6367 000022DF B83C3E              <1> 	mov ax, '<>'
  6368                              <1> 
  6369                              <1> .draw_arrow:
  6370 000022E2 5A                  <1> 	pop dx
  6371 000022E3 52                  <1> 	push dx
  6372                              <1> 
  6373 000022E4 E897FF              <1> 	call window_draw_char
  6374 000022E7 86C4                <1> 	xchg al, ah
  6375                              <1> 
  6376 000022E9 803E[3C23]00        <1> 	cmp byte [.bar_type], 0
  6377 000022EE 7409                <1> 	jz .horiz4
  6378 000022F0 0236[3D23]          <1> 	add dh, [.bar_length]
  6379 000022F4 FECE                <1> 	dec dh
  6380 000022F6 E90600              <1> 	jmp near .draw_end_arrow
  6381                              <1> .horiz4:
  6382 000022F9 0216[3D23]          <1> 	add dl, [.bar_length]
  6383 000022FD FECA                <1> 	dec dl
  6384                              <1> .draw_end_arrow:
  6385                              <1> 
  6386 000022FF E87CFF              <1> 	call window_draw_char
  6387 00002302 5A                  <1> 	pop dx
  6388                              <1> 
  6389                              <1> ; ================= draw scroll block ===============
  6390 00002303 59                  <1> 	pop cx
  6391 00002304 380E[3D23]          <1> 	cmp [.bar_length], cl
  6392 00002308 7330                <1> 	jae .no_cursor
  6393 0000230A 803E[3D23]03        <1> 	cmp byte [.bar_length], 3
  6394 0000230F 7229                <1> 	jb .no_cursor
  6395                              <1> 
  6396 00002311 0FB6C5              <1> 	movzx ax, ch			; block position =
  6397 00002314 8A2E[3D23]          <1> 	mov ch, [.bar_length]		; cur value * bar length / value max
  6398 00002318 80ED02              <1> 	sub ch, 2			; 
  6399 0000231B F6E5                <1> 	mul ch				;
  6400 0000231D F6F1                <1> 	div cl				;
  6401                              <1> 
  6402 0000231F 803E[3C23]00        <1> 	cmp byte [.bar_type], 0
  6403 00002324 7407                <1> 	jz .horiz5
  6404 00002326 00C6                <1> 	add dh, al
  6405 00002328 FEC6                <1> 	inc dh
  6406 0000232A E90400              <1> 	jmp near .draw_scroll_block
  6407                              <1> .horiz5:
  6408 0000232D 00C2                <1> 	add dl, al
  6409 0000232F FEC2                <1> 	inc dl
  6410                              <1> 
  6411                              <1> .draw_scroll_block:
  6412 00002331 B04F                <1> 	mov al, 'O'
  6413 00002333 31C9                <1> 	xor cx, cx
  6414 00002335 FEC1                <1> 	inc cl
  6415 00002337 E844FF              <1> 	call window_draw_char
  6416                              <1> 
  6417                              <1> .no_cursor:
  6418 0000233A 61                  <1> 	popa
  6419 0000233B C3                  <1> 	ret
  6420                              <1> 
  6421 0000233C 00                  <1> .bar_type	db 0		; 1 = vertical, 0 =horizontal
  6422 0000233D 00                  <1> .bar_length	db 0
  6423                              <1> 
  6424                              <1> 
  6425                              <1> ;=============================================================================
  6426                              <1> ; window_initialize ---- initialize the window system.
  6427                              <1> ; input:
  6428                              <1> ;	none
  6429                              <1> ; output:
  6430                              <1> ;	none
  6431                              <1> ;=============================================================================
  6432                              <1> window_initialize:
  6433 0000233E 60                  <1> 	pusha
  6434 0000233F 30C0                <1> 	xor al, al
  6435 00002341 BF[1130]            <1> 	mov di, ui_tmp.def_root_win
  6436 00002344 B91A00              <1> 	mov cx, SIZE_OF_STRUC_WINDOW
  6437 00002347 E82608              <1> 	call clear_memory
  6438 0000234A C60509              <1> 	mov byte [di], WINFLAG_OPEN | WINFLAG_NO_FOCUS
  6439 0000234D C74518[5E23]        <1> 	mov word [di + struc_window.draw_body_proc], window_clear_win_area
  6440 00002352 A1[3326]            <1> 	mov ax, [ui_screen_size]
  6441 00002355 894508              <1> 	mov [di + struc_window.win_size], ax
  6442                              <1> 
  6443 00002358 893E[0F30]          <1> 	mov [ui_tmp.root_win], di
  6444 0000235C 61                  <1> 	popa
  6445 0000235D C3                  <1> 	ret
  6446                              <1> 
  6447                              <1> 
  6448                              <1> ;=============================================================================
  6449                              <1> ; window_clear_win_area:
  6450                              <1> ; input:
  6451                              <1> ;	ds:si -> root win
  6452                              <1> ; output:
  6453                              <1> ;	none
  6454                              <1> ;=============================================================================
  6455                              <1> window_clear_win_area:
  6456 0000235E 60                  <1> 	pusha
  6457 0000235F 8B4C06              <1> 	mov cx, [si + struc_window.win_pos]
  6458 00002362 8B5408              <1> 	mov dx, [si + struc_window.win_size]
  6459 00002365 01CA                <1> 	add dx, cx
  6460 00002367 81EA0101            <1> 	sub dx, 0x0101
  6461 0000236B 8A7C04              <1> 	mov bh, [si + struc_window.win_attr]
  6462 0000236E E888F6              <1> 	call clear_screen
  6463 00002371 61                  <1> 	popa
  6464 00002372 C3                  <1> 	ret
  6465                              <1> 
  6466                              <1> ;=============================================================================
  6467                              <1> ; window_execute ---- execute the  window system, no return.
  6468                              <1> ; input:
  6469                              <1> ;	ds:bx -> pointer to root window
  6470                              <1> ;	ds:si -> pointer to current window
  6471                              <1> ; output:
  6472                              <1> ;	none
  6473                              <1> ;=============================================================================
  6474                              <1> window_execute:
  6475 00002373 09DB                <1> 	or bx, bx
  6476 00002375 7503                <1> 	jnz .has_root
  6477 00002377 BB[1130]            <1> 	mov bx, ui_tmp.def_root_win
  6478                              <1> .has_root:
  6479 0000237A 09F6                <1> 	or si, si
  6480 0000237C 742E                <1> 	jz .end
  6481                              <1> 
  6482 0000237E 87F3                <1> 	xchg si, bx
  6483 00002380 E8B001              <1> 	call winlist_setroot
  6484 00002383 E896FE              <1> 	call window_draw_window
  6485 00002386 87F3                <1> 	xchg si, bx
  6486                              <1> 
  6487                              <1> .loop_exec:
  6488 00002388 F60408              <1> 	test byte [si], WINFLAG_NO_FOCUS
  6489 0000238B 7510                <1> 	jnz .find_focusable
  6490                              <1> 
  6491 0000238D E81D00              <1> 	call window_run
  6492 00002390 8B36[0D30]          <1> 	mov si, [ui_tmp.focus_win]
  6493 00002394 09F6                <1> 	or si, si
  6494 00002396 7414                <1> 	jz .end
  6495                              <1> 
  6496 00002398 E84D02              <1> 	call winlist_findwin
  6497 0000239B 7208                <1> 	jc .reset_focus
  6498                              <1> 
  6499                              <1> .find_focusable:
  6500 0000239D E85E02              <1> 	call winlist_find_focusable
  6501 000023A0 09F6                <1> 	or si, si
  6502 000023A2 75E4                <1> 	jnz .loop_exec
  6503 000023A4 C3                  <1> 	ret
  6504                              <1> 
  6505                              <1> .reset_focus:
  6506 000023A5 E8FA01              <1> 	call winlist_findtop
  6507 000023A8 89FE                <1> 	mov si, di
  6508 000023AA EBDC                <1> 	jmp short .loop_exec
  6509                              <1> .end:
  6510 000023AC C3                  <1> 	ret
  6511                              <1> 
  6512                              <1> ;=============================================================================
  6513                              <1> ; window_run ---- run a window, open it, and loop get key until the window
  6514                              <1> ;                 is closed (WINFLAG_OPEN is cleared). It passes the key to 
  6515                              <1> ;                 function window_event_handle. If window_event_handle failed
  6516                              <1> ;                 to handle this key, then the key will be passed to its 
  6517                              <1> ;                 parent window.
  6518                              <1> ; input:
  6519                              <1> ;	ds:si -> pointer to struc_window
  6520                              <1> ; output:
  6521                              <1> ;	none
  6522                              <1> ;=============================================================================
  6523                              <1> window_run:
  6524 000023AD E83802              <1> 	call winlist_findwin
  6525 000023B0 720E                <1> 	jc .run_this_win
  6526                              <1> 
  6527 000023B2 F6440101            <1> 	test byte [si + 1], WINFLAG_HI_RUNNING
  6528 000023B6 7408                <1> 	jz .run_this_win
  6529                              <1> 
  6530 000023B8 8936[0D30]          <1> 	mov [ui_tmp.focus_win], si
  6531 000023BC E8F501              <1> 	call winlist_raise
  6532 000023BF C3                  <1> 	ret
  6533                              <1> 
  6534                              <1> .run_this_win:
  6535 000023C0 60                  <1> 	pusha
  6536 000023C1 804C0101            <1> 	or byte [si + 1], WINFLAG_HI_RUNNING
  6537                              <1> 
  6538 000023C5 FF36[0D30]          <1> 	push word [ui_tmp.focus_win]
  6539 000023C9 E82D00              <1> 	call window_open
  6540                              <1> 
  6541                              <1> .loop_run:	
  6542 000023CC 3936[0D30]          <1> 	cmp [ui_tmp.focus_win], si		; if current win is switched
  6543 000023D0 7520                <1> 	jne .end_run				; just return.
  6544                              <1> 
  6545 000023D2 E85DF2              <1> 	call get_event
  6546 000023D5 80FCF0              <1> 	cmp ah, EVTCODE_COMMAND
  6547 000023D8 720A                <1> 	jb .keycode
  6548 000023DA F6C404              <1> 	test ah, EVTCODE_BROADCAST
  6549 000023DD 7405                <1> 	jz .keycode
  6550 000023DF E83002              <1> 	call winlist_broadcast_event
  6551 000023E2 EB03                <1> 	jmp short .cont_run
  6552                              <1> .keycode:
  6553 000023E4 E8E300              <1> 	call window_event_dispatcher
  6554                              <1> .cont_run:
  6555 000023E7 F60401              <1> 	test byte [si], WINFLAG_OPEN
  6556 000023EA 75E0                <1> 	jnz .loop_run
  6557                              <1> 
  6558 000023EC 8F06[0D30]          <1> 	pop word [ui_tmp.focus_win]		; if window is closed, restore
  6559 000023F0 EB01                <1> 	jmp short .end				; focus_win and return.
  6560                              <1> 
  6561                              <1> .end_run:
  6562 000023F2 58                  <1> 	pop ax
  6563                              <1> .end:
  6564 000023F3 806401FE            <1> 	and byte [si + 1], ~ WINFLAG_HI_RUNNING
  6565 000023F7 61                  <1> 	popa
  6566 000023F8 C3                  <1> 	ret
  6567                              <1> 
  6568                              <1> 
  6569                              <1> ;=============================================================================
  6570                              <1> ; window_open ---- open a window, draw the window and set flag WINFLAG_OPEN, 
  6571                              <1> ;                  and insert it into the windows list.
  6572                              <1> ; input:
  6573                              <1> ;	ds:si -> pointer to struc_window
  6574                              <1> ; output:
  6575                              <1> ;	none
  6576                              <1> ;=============================================================================
  6577                              <1> window_open:
  6578 000023F9 60                  <1> 	pusha
  6579 000023FA E8B701              <1> 	call winlist_raise
  6580 000023FD 800C01              <1> 	or byte [si], WINFLAG_OPEN
  6581 00002400 E8B801              <1> 	call winlist_set_focus_win
  6582 00002403 61                  <1> 	popa
  6583 00002404 C3                  <1> 	ret
  6584                              <1> 
  6585                              <1> ;=============================================================================
  6586                              <1> ; window_close ---- close a window, clear flag WINFLAG_OPEN, and remove it
  6587                              <1> ;                   from the windows list.
  6588                              <1> ; input:
  6589                              <1> ;	ds:si -> pointer to struc_window
  6590                              <1> ; output:
  6591                              <1> ;	none
  6592                              <1> ;=============================================================================
  6593                              <1> window_close:
  6594 00002405 60                  <1> 	pusha
  6595 00002406 E86901              <1> 	call winlist_remove
  6596 00002409 8024FE              <1> 	and byte [si], ~ WINFLAG_OPEN
  6597 0000240C E8D8FD              <1> 	call window_draw_all
  6598 0000240F 61                  <1> 	popa
  6599 00002410 C3                  <1> 	ret
  6600                              <1> 
  6601                              <1> ;=============================================================================
  6602                              <1> ; window_move_up ---- move the window up one row
  6603                              <1> ; input:
  6604                              <1> ;	ds:si -> pointer to struc_window
  6605                              <1> ; output:
  6606                              <1> ;	none
  6607                              <1> ;=============================================================================
  6608                              <1> window_move_up:
  6609 00002411 50                  <1> 	push ax
  6610 00002412 8A4407              <1> 	mov al, [si + struc_window.win_pos + 1]
  6611 00002415 08C0                <1> 	or al, al
  6612 00002417 7405                <1> 	jz .no_move
  6613 00002419 FEC8                <1> 	dec al
  6614 0000241B 884407              <1> 	mov [si + struc_window.win_pos + 1], al
  6615                              <1> .no_move:
  6616 0000241E 58                  <1> 	pop ax
  6617 0000241F C3                  <1> 	ret
  6618                              <1> 
  6619                              <1> ;=============================================================================
  6620                              <1> ; window_move_down ---- move the window down one row
  6621                              <1> ; input:
  6622                              <1> ;	ds:si -> pointer to struc_window
  6623                              <1> ; output:
  6624                              <1> ;	none
  6625                              <1> ;=============================================================================
  6626                              <1> window_move_down:
  6627 00002420 50                  <1> 	push ax
  6628 00002421 8A4407              <1> 	mov al, [si + struc_window.win_pos + 1]
  6629 00002424 8A26[3426]          <1> 	mov ah, [ui_screen_height]
  6630 00002428 FECC                <1> 	dec ah
  6631                              <1> 
  6632 0000242A 38E0                <1> 	cmp al, ah
  6633 0000242C 7305                <1> 	jae .no_move
  6634 0000242E FEC0                <1> 	inc al
  6635 00002430 884407              <1> 	mov [si + struc_window.win_pos + 1], al
  6636                              <1> .no_move:
  6637 00002433 58                  <1> 	pop ax
  6638 00002434 C3                  <1> 	ret
  6639                              <1> 
  6640                              <1> 
  6641                              <1> ;=============================================================================
  6642                              <1> ; window_move_left ---- move the window left one column
  6643                              <1> ; input:
  6644                              <1> ;	ds:si -> pointer to struc_window
  6645                              <1> ; output:
  6646                              <1> ;	none
  6647                              <1> ;=============================================================================
  6648                              <1> window_move_left:
  6649 00002435 50                  <1> 	push ax
  6650 00002436 8A4406              <1> 	mov al, [si + struc_window.win_pos]
  6651 00002439 08C0                <1> 	or al, al
  6652 0000243B 7405                <1> 	jz .no_move
  6653 0000243D FEC8                <1> 	dec al
  6654 0000243F 884406              <1> 	mov [si + struc_window.win_pos], al
  6655                              <1> .no_move:
  6656 00002442 58                  <1> 	pop ax
  6657 00002443 C3                  <1> 	ret
  6658                              <1> 
  6659                              <1> 
  6660                              <1> ;=============================================================================
  6661                              <1> ; window_move_right ---- move the window right one column
  6662                              <1> ; input:
  6663                              <1> ;	ds:si -> pointer to struc_window
  6664                              <1> ; output:
  6665                              <1> ;	none
  6666                              <1> ;=============================================================================
  6667                              <1> window_move_right:
  6668 00002444 50                  <1> 	push ax
  6669 00002445 8A4406              <1> 	mov al, [si + struc_window.win_pos]
  6670 00002448 8A26[3326]          <1> 	mov ah, [ui_screen_width]
  6671 0000244C 2A6408              <1> 	sub ah, [si + struc_window.win_size]
  6672 0000244F 80EC02              <1> 	sub ah, 2
  6673                              <1> 
  6674 00002452 38E0                <1> 	cmp al, ah
  6675 00002454 7305                <1> 	jae .no_move
  6676 00002456 FEC0                <1> 	inc al
  6677 00002458 884406              <1> 	mov [si + struc_window.win_pos], al
  6678                              <1> .no_move:
  6679 0000245B 58                  <1> 	pop ax
  6680 0000245C C3                  <1> 	ret
  6681                              <1> 
  6682                              <1> 
  6683                              <1> ;=============================================================================
  6684                              <1> ; window_switch_window ---- switch to the next window
  6685                              <1> ; input:
  6686                              <1> ;	ds:si -> pointer to current window
  6687                              <1> ; output:
  6688                              <1> ;	none
  6689                              <1> ;=============================================================================
  6690                              <1> window_switch_window:
  6691 0000245D 60                  <1> 	pusha
  6692 0000245E F60402              <1> 	test byte [si], WINFLAG_MODAL
  6693 00002461 7511                <1> 	jnz .no_switch
  6694 00002463 E88201              <1> 	call winlist_findwin
  6695 00002466 720C                <1> 	jc .no_switch
  6696 00002468 8B36[0F30]          <1> 	mov si, [ui_tmp.root_win]
  6697 0000246C 09F6                <1> 	or si, si
  6698 0000246E 7404                <1> 	jz .no_switch
  6699                              <1> 
  6700 00002470 8936[0D30]          <1> 	mov [ui_tmp.focus_win], si
  6701                              <1> 
  6702                              <1> .no_switch:
  6703 00002474 61                  <1> 	popa
  6704 00002475 C3                  <1> 	ret
  6705                              <1> 
  6706                              <1> ;=============================================================================
  6707                              <1> ; move a window to center of the screen.
  6708                              <1> ;input:
  6709                              <1> ;	ds:si -> pointer to window
  6710                              <1> ;output:
  6711                              <1> ;	none
  6712                              <1> ;=============================================================================
  6713                              <1> window_center_window:
  6714 00002476 60                  <1> 	pusha
  6715 00002477 8B5408              <1> 	mov dx, [si + struc_window.win_size]
  6716 0000247A 8B0E[3326]          <1> 	mov cx, [ui_screen_size]                   ; calculate the coordinate
  6717                              <1> 
  6718 0000247E 28F5                <1> 	sub ch, dh                              ; of input box.
  6719 00002480 D0ED                <1> 	shr ch, 1                               ; cx = top left pos
  6720 00002482 28D1                <1> 	sub cl, dl                              ; 
  6721 00002484 D0E9                <1> 	shr cl, 1                               ;
  6722                              <1> 
  6723 00002486 894C06              <1> 	mov [si + struc_window.win_pos], cx
  6724 00002489 61                  <1> 	popa
  6725 0000248A C3                  <1> 	ret
  6726                              <1> 
  6727                              <1> 
  6728                              <1> ;=============================================================================
  6729                              <1> ; window_default_event_handle ---- default event handle for a normal window, it
  6730                              <1> ;                           handles some normal events, such as move window.
  6731                              <1> ; input:
  6732                              <1> ;	ax    -> keycode
  6733                              <1> ;	ds:si -> pointer to struc_window
  6734                              <1> ; output:
  6735                              <1> ;	cf = 0, success
  6736                              <1> ;	cf = 1, fail, no such action
  6737                              <1> ;=============================================================================
  6738                              <1> window_default_event_handle:
  6739 0000248B 60                  <1> 	pusha
  6740 0000248C B90E00              <1> 	mov cx, WINDOW_DEF_ACTION_NUM
  6741 0000248F BB[3926]            <1> 	mov bx, window_def_action_table
  6742 00002492 E81C00              <1> 	call window_generic_event_handle
  6743 00002495 61                  <1> 	popa
  6744 00002496 C3                  <1> 	ret
  6745                              <1> 
  6746                              <1> ;=============================================================================
  6747                              <1> ; window_event_handle ----  event handle for a normal window, it finds 
  6748                              <1> ;                           the corresponding action for a key event from
  6749                              <1> ;                           action_table then call window_do_action to run it.
  6750                              <1> ;                           If the event is not in action_table, then
  6751                              <1> ;                           .defkey_handle will be called to handle it.
  6752                              <1> ; input:
  6753                              <1> ;	ax    -> keycode
  6754                              <1> ;	ds:si -> pointer to struc_window
  6755                              <1> ; output:
  6756                              <1> ;	cf = 0, success
  6757                              <1> ;	cf = 1, fail, no such action
  6758                              <1> ;=============================================================================
  6759                              <1> window_event_handle:
  6760 00002497 60                  <1> 	pusha
  6761 00002498 8B5C12              <1> 	mov bx, [si + struc_window.act_table]
  6762 0000249B 8B4C10              <1> 	mov cx, [si + struc_window.act_num]
  6763 0000249E E81000              <1> 	call window_generic_event_handle
  6764 000024A1 730C                <1> 	jnc .success
  6765 000024A3 8B5C14              <1> 	mov bx, [si + struc_window.default_event_handle]
  6766 000024A6 09DB                <1> 	or bx, bx
  6767 000024A8 7404                <1> 	jz .failed
  6768 000024AA FFD3                <1> 	call bx
  6769 000024AC 7301                <1> 	jnc .success
  6770                              <1> .failed:
  6771 000024AE F9                  <1> 	stc
  6772                              <1> .success:
  6773 000024AF 61                  <1> 	popa
  6774 000024B0 C3                  <1> 	ret
  6775                              <1> 
  6776                              <1> ;=============================================================================
  6777                              <1> ; window_generic_event_handle ---- generic event handle, it find a key from 
  6778                              <1> ;                                  an action list, then run it.
  6779                              <1> ; input:
  6780                              <1> ;	ax    -> keycode
  6781                              <1> ;	ds:si -> pointer to struc_window
  6782                              <1> ;	ds:bx -> action list
  6783                              <1> ;	cx    -> action number
  6784                              <1> ; output:
  6785                              <1> ;	cf = 0, success
  6786                              <1> ;	cf = 1, fail, no such action
  6787                              <1> ;=============================================================================
  6788                              <1> window_generic_event_handle:
  6789 000024B1 09C9                <1> 	or cx, cx
  6790 000024B3 7413                <1> 	jz .no_action
  6791 000024B5 09DB                <1> 	or bx, bx
  6792 000024B7 740F                <1> 	jz .no_action
  6793                              <1> 
  6794                              <1> .loop_find_act:
  6795 000024B9 394701              <1> 	cmp [bx + struc_action.keycode], ax
  6796 000024BC 7505                <1> 	jne .cont_find
  6797 000024BE E82600              <1> 	call window_do_action
  6798 000024C1 F8                  <1> 	clc
  6799 000024C2 C3                  <1> 	ret
  6800                              <1> 
  6801                              <1> .cont_find:
  6802 000024C3 83C305              <1> 	add bx, SIZE_OF_STRUC_ACTION
  6803 000024C6 E2F1                <1> 	loop .loop_find_act
  6804                              <1> 
  6805                              <1> .no_action:
  6806 000024C8 F9                  <1> 	stc
  6807 000024C9 C3                  <1> 	ret
  6808                              <1> 
  6809                              <1> ;=============================================================================
  6810                              <1> ; window_event_dispatcher ---- dispatch event to event handle 
  6811                              <1> ; input:
  6812                              <1> ;	ax    -> keycode
  6813                              <1> ;	ds:si -> pointer to struc_window
  6814                              <1> ; output:
  6815                              <1> ;	cf = 0, success
  6816                              <1> ;	cf = 1, fail, no such action
  6817                              <1> ;=============================================================================
  6818                              <1> window_event_dispatcher:
  6819 000024CA 60                  <1> 	pusha
  6820 000024CB 8B5C16              <1> 	mov bx, [si + struc_window.event_handle]
  6821 000024CE 09DB                <1> 	or bx, bx
  6822 000024D0 7406                <1> 	jz .no_event_handle
  6823                              <1> 
  6824 000024D2 56                  <1> 	push si
  6825 000024D3 FFD3                <1> 	call bx
  6826 000024D5 5E                  <1> 	pop si
  6827                              <1> 
  6828 000024D6 730D                <1> 	jnc .action_ok
  6829                              <1> 
  6830                              <1> .no_event_handle:
  6831 000024D8 8B740A              <1> 	mov si, [si + struc_window.parent_win]
  6832 000024DB 09F6                <1> 	or si, si
  6833 000024DD 7405                <1> 	jz .no_parent
  6834 000024DF E8E8FF              <1> 	call window_event_dispatcher
  6835 000024E2 7301                <1> 	jnc .action_ok
  6836                              <1> 
  6837                              <1> .no_parent:
  6838 000024E4 F9                  <1> 	stc
  6839                              <1> 
  6840                              <1> .action_ok:
  6841 000024E5 61                  <1> 	popa
  6842 000024E6 C3                  <1> 	ret
  6843                              <1> 
  6844                              <1> ;=============================================================================
  6845                              <1> ; window_do_action ---- do a window action
  6846                              <1> ; input:
  6847                              <1> ;	ax    =  event code
  6848                              <1> ;	ds:si -> pointer to struc_window
  6849                              <1> ;	ds:bx -> pointer to struc_action
  6850                              <1> ; output:
  6851                              <1> ;	none
  6852                              <1> ;=============================================================================
  6853                              <1> window_do_action:
  6854 000024E7 60                  <1> 	pusha
  6855                              <1> 
  6856 000024E8 09F6                <1> 	or si, si
  6857 000024EA 7445                <1> 	jz .end
  6858 000024EC 09DB                <1> 	or bx, bx
  6859 000024EE 7441                <1> 	jz .end
  6860                              <1> 
  6861 000024F0 8A17                <1> 	mov dl, [bx]
  6862                              <1> 
  6863 000024F2 F6C2F0              <1> 	test dl, ACTFLAG_AUTHS		; check action flags
  6864 000024F5 7409                <1> 	jz .no_auth
  6865                              <1> 
  6866 000024F7 60                  <1> 	pusha
  6867 000024F8 88D0                <1> 	mov al, dl
  6868 000024FA E881F1              <1> 	call main_auth_action		; check if the action is ready to do
  6869                              <1> 					; al = auth type
  6870 000024FD 61                  <1> 	popa
  6871 000024FE 720B                <1> 	jc .no_action
  6872                              <1> 
  6873                              <1> .no_auth:
  6874 00002500 8B5F03              <1> 	mov bx, [bx + struc_action.func]
  6875 00002503 09DB                <1> 	or bx, bx
  6876 00002505 7404                <1> 	jz .no_action
  6877                              <1> 
  6878 00002507 60                  <1> 	pusha
  6879 00002508 FFD3                <1> 	call bx				; do the action
  6880 0000250A 61                  <1> 	popa
  6881                              <1> 
  6882                              <1> .no_action:
  6883                              <1> 
  6884 0000250B F6C201              <1> 	test dl, ACTFLAG_CLOSE_WIN
  6885 0000250E 7405                <1> 	jz .no_close
  6886 00002510 E8F2FE              <1> 	call window_close
  6887 00002513 EB1C                <1> 	jmp short .end
  6888                              <1> .no_close:
  6889 00002515 F6C202              <1> 	test dl, ACTFLAG_REDRAW_BODY
  6890 00002518 7405                <1> 	jz .no_redraw_body
  6891 0000251A E8DEFC              <1> 	call window_draw_body
  6892 0000251D EB12                <1> 	jmp short .end
  6893                              <1> .no_redraw_body:
  6894 0000251F F6C204              <1> 	test dl, ACTFLAG_REDRAW_WIN
  6895 00002522 7405                <1> 	jz .no_redraw_win
  6896 00002524 E8F5FC              <1> 	call window_draw_window
  6897 00002527 EB08                <1> 	jmp short .end
  6898                              <1> .no_redraw_win:
  6899 00002529 F6C208              <1> 	test dl, ACTFLAG_REDRAW_SCR
  6900 0000252C 7403                <1> 	jz .end
  6901 0000252E E8B6FC              <1> 	call window_draw_all
  6902                              <1> .end:
  6903 00002531 61                  <1> 	popa
  6904 00002532 C3                  <1> 	ret
  6905                              <1> 
  6906                              <1> ;=============================================================================
  6907                              <1> ; winlist_setroot ---- set root window
  6908                              <1> ; input:
  6909                              <1> ;	ds:si -> pointer to root window
  6910                              <1> ; output:
  6911                              <1> ;	none
  6912                              <1> ;=============================================================================
  6913                              <1> winlist_setroot:
  6914 00002533 53                  <1> 	push bx
  6915                              <1> 
  6916 00002534 09F6                <1> 	or si, si
  6917 00002536 741A                <1> 	jz .invalid_root
  6918                              <1> 
  6919 00002538 8B1E[0F30]          <1> 	mov bx, [ui_tmp.root_win]
  6920 0000253C 09DB                <1> 	or bx, bx
  6921 0000253E 7403                <1> 	jz .no_root
  6922 00002540 8B5F0C              <1> 	mov bx, [bx + struc_window.next_win]
  6923                              <1> 
  6924                              <1> .no_root:
  6925 00002543 8936[0F30]          <1> 	mov [ui_tmp.root_win], si
  6926 00002547 895C0C              <1> 	mov [si + struc_window.next_win], bx
  6927 0000254A 31DB                <1> 	xor bx, bx
  6928 0000254C 895C0E              <1> 	mov [si + struc_window.previous_win], bx
  6929 0000254F 895C0A              <1> 	mov [si + struc_window.parent_win], bx
  6930                              <1> 
  6931                              <1> .invalid_root:
  6932 00002552 5B                  <1> 	pop bx
  6933 00002553 C3                  <1> 	ret
  6934                              <1> 
  6935                              <1> ;=============================================================================
  6936                              <1> ; winlist_insert ---- insert a window
  6937                              <1> ; input:
  6938                              <1> ;	ds:si -> pointer to the window
  6939                              <1> ; output:
  6940                              <1> ;	none
  6941                              <1> ;=============================================================================
  6942                              <1> winlist_insert:
  6943 00002554 57                  <1> 	push di
  6944 00002555 09F6                <1> 	or si, si
  6945 00002557 7417                <1> 	jz .invalid_win
  6946 00002559 E88C00              <1> 	call winlist_findwin
  6947 0000255C 7312                <1> 	jnc .invalid_win
  6948                              <1> 
  6949 0000255E E84100              <1> 	call winlist_findtop
  6950 00002561 09FF                <1> 	or di, di
  6951 00002563 740B                <1> 	jz .invalid_win
  6952                              <1> 
  6953 00002565 89750C              <1> 	mov [di + struc_window.next_win], si
  6954 00002568 897C0E              <1> 	mov [si + struc_window.previous_win], di
  6955 0000256B 31FF                <1> 	xor di, di
  6956 0000256D 897C0C              <1> 	mov [si + struc_window.next_win], di
  6957                              <1> 
  6958                              <1> .invalid_win:
  6959 00002570 5F                  <1> 	pop di
  6960 00002571 C3                  <1> 	ret
  6961                              <1> 
  6962                              <1> ;=============================================================================
  6963                              <1> ; winlist_remove ---- remove a window
  6964                              <1> ; input:
  6965                              <1> ;	ds:si -> pointer to the window
  6966                              <1> ; output:
  6967                              <1> ;	none
  6968                              <1> ;=============================================================================
  6969                              <1> winlist_remove:
  6970 00002572 09F6                <1> 	or si, si
  6971 00002574 742B                <1> 	jz .invalid_win
  6972 00002576 3936[0F30]          <1> 	cmp [ui_tmp.root_win], si
  6973 0000257A 7425                <1> 	je .invalid_win
  6974 0000257C E86900              <1> 	call winlist_findwin
  6975 0000257F 7220                <1> 	jc .invalid_win
  6976                              <1> 
  6977 00002581 53                  <1> 	push bx
  6978 00002582 56                  <1> 	push si
  6979 00002583 8B5C0C              <1> 	mov bx, [si + struc_window.next_win]
  6980 00002586 8B740E              <1> 	mov si ,[si + struc_window.previous_win]
  6981 00002589 09DB                <1> 	or bx, bx
  6982 0000258B 7403                <1> 	jz .no_next
  6983 0000258D 89770E              <1> 	mov [bx + struc_window.previous_win], si
  6984                              <1> .no_next:
  6985 00002590 09F6                <1> 	or si, si
  6986 00002592 7403                <1> 	jz .no_previous
  6987 00002594 895C0C              <1> 	mov [si + struc_window.next_win], bx
  6988                              <1> .no_previous:
  6989 00002597 5E                  <1> 	pop si
  6990 00002598 31DB                <1> 	xor bx, bx
  6991 0000259A 895C0C              <1> 	mov [si + struc_window.next_win], bx
  6992 0000259D 895C0E              <1> 	mov [si + struc_window.previous_win], bx
  6993 000025A0 5B                  <1> 	pop bx
  6994                              <1> 
  6995                              <1> .invalid_win:
  6996 000025A1 C3                  <1> 	ret
  6997                              <1> 
  6998                              <1> ;=============================================================================
  6999                              <1> ; winlist_findtop ---- find the top window
  7000                              <1> ; input:
  7001                              <1> ;	none
  7002                              <1> ; output:
  7003                              <1> ;	ds:di -> the top window
  7004                              <1> ;=============================================================================
  7005                              <1> winlist_findtop:
  7006 000025A2 50                  <1> 	push ax
  7007 000025A3 8B3E[0F30]          <1> 	mov di, [ui_tmp.root_win]
  7008                              <1> 
  7009                              <1> .loop_find:
  7010 000025A7 8B450C              <1> 	mov ax, [di + struc_window.next_win]
  7011 000025AA 09C0                <1> 	or ax, ax
  7012 000025AC 7404                <1> 	jz .find_it
  7013 000025AE 89C7                <1> 	mov di, ax
  7014 000025B0 EBF5                <1> 	jmp short .loop_find
  7015                              <1> 
  7016                              <1> .find_it:
  7017 000025B2 58                  <1> 	pop ax
  7018 000025B3 C3                  <1> 	ret
  7019                              <1> 
  7020                              <1> ;=============================================================================
  7021                              <1> ; winlist_raise ---- raise a window to top
  7022                              <1> ; input:
  7023                              <1> ;	ds:si -> the window
  7024                              <1> ; output:
  7025                              <1> ;	none
  7026                              <1> ;=============================================================================
  7027                              <1> winlist_raise:
  7028 000025B4 E8BBFF              <1> 	call winlist_remove
  7029 000025B7 E89AFF              <1> 	call winlist_insert
  7030 000025BA C3                  <1> 	ret
  7031                              <1> 
  7032                              <1> ;=============================================================================
  7033                              <1> ; winlist_set_focus_win ---- set the focus window
  7034                              <1> ; input:
  7035                              <1> ;	ds:si -> the window
  7036                              <1> ; output:
  7037                              <1> ;	none
  7038                              <1> ;=============================================================================
  7039                              <1> winlist_set_focus_win:
  7040 000025BB 53                  <1> 	push bx
  7041 000025BC 56                  <1> 	push si
  7042 000025BD 8B36[0D30]          <1> 	mov si, [ui_tmp.focus_win]
  7043 000025C1 89F3                <1> 	mov bx, si
  7044 000025C3 E82200              <1> 	call winlist_findwin
  7045 000025C6 5E                  <1> 	pop si
  7046 000025C7 720A                <1> 	jc .ok
  7047                              <1> 
  7048 000025C9 F60402              <1> 	test byte [si], WINFLAG_MODAL
  7049 000025CC 7505                <1> 	jnz .ok
  7050 000025CE F60702              <1> 	test byte [bx], WINFLAG_MODAL
  7051 000025D1 7509                <1> 	jnz .end
  7052                              <1> 
  7053                              <1> .ok:
  7054 000025D3 E81200              <1> 	call winlist_findwin
  7055 000025D6 7204                <1> 	jc .end
  7056 000025D8 8936[0D30]          <1> 	mov [ui_tmp.focus_win], si
  7057                              <1> .end:
  7058 000025DC 8B36[0D30]          <1> 	mov si, [ui_tmp.focus_win]
  7059 000025E0 E8D1FF              <1> 	call winlist_raise
  7060 000025E3 E801FC              <1> 	call window_draw_all
  7061 000025E6 5B                  <1> 	pop bx
  7062 000025E7 C3                  <1> 	ret
  7063                              <1> 
  7064                              <1> ;=============================================================================
  7065                              <1> ; winlist_findwin ---- find a window in winlist
  7066                              <1> ; input:
  7067                              <1> ;	ds:si -> the window
  7068                              <1> ; output:
  7069                              <1> ;	cf = 0  found
  7070                              <1> ;	cf = 1  not found
  7071                              <1> ;=============================================================================
  7072                              <1> winlist_findwin:
  7073 000025E8 53                  <1> 	push bx
  7074 000025E9 8B1E[0F30]          <1> 	mov bx, [ui_tmp.root_win]
  7075                              <1> .loop_find:
  7076 000025ED 39F3                <1> 	cmp bx, si
  7077 000025EF 740A                <1> 	je .found
  7078 000025F1 8B5F0C              <1> 	mov bx, [bx + struc_window.next_win]
  7079 000025F4 09DB                <1> 	or bx, bx
  7080 000025F6 75F5                <1> 	jnz .loop_find
  7081 000025F8 F9                  <1> 	stc
  7082 000025F9 5B                  <1> 	pop bx
  7083 000025FA C3                  <1> 	ret
  7084                              <1> .found:
  7085 000025FB F8                  <1> 	clc
  7086 000025FC 5B                  <1> 	pop bx
  7087 000025FD C3                  <1> 	ret
  7088                              <1> 
  7089                              <1> ;=============================================================================
  7090                              <1> ; winlist_find_focusable ---- find a focusable window
  7091                              <1> ; input:
  7092                              <1> ;	ds:si -> the first win
  7093                              <1> ; output:
  7094                              <1> ;	ds:si -> the focusable win
  7095                              <1> ;=============================================================================
  7096                              <1> winlist_find_focusable:
  7097 000025FE E8E7FF              <1> 	call winlist_findwin
  7098 00002601 720C                <1> 	jc .failed
  7099                              <1> 
  7100                              <1> .loop_find:
  7101 00002603 F60408              <1> 	test byte [si], WINFLAG_NO_FOCUS
  7102 00002606 7409                <1> 	jz .found
  7103 00002608 8B740C              <1> 	mov si, [si + struc_window.next_win]
  7104 0000260B 09F6                <1> 	or si, si
  7105 0000260D 75F4                <1> 	jnz .loop_find
  7106                              <1> .failed:
  7107 0000260F 31F6                <1> 	xor si, si
  7108                              <1> .found:
  7109 00002611 C3                  <1> 	ret
  7110                              <1> 
  7111                              <1> 
  7112                              <1> ;=============================================================================
  7113                              <1> ; winlist_broadcast_event ---- broadcast an event to all opened windows
  7114                              <1> ; input:
  7115                              <1> ;	ax = event code
  7116                              <1> ; output:
  7117                              <1> ;	none
  7118                              <1> ;=============================================================================
  7119                              <1> winlist_broadcast_event:
  7120 00002612 60                  <1> 	pusha
  7121 00002613 8B36[0F30]          <1> 	mov si, [ui_tmp.root_win]
  7122                              <1> 
  7123                              <1> .loop_broadcast:
  7124 00002617 E8B0FE              <1> 	call window_event_dispatcher
  7125 0000261A 7307                <1> 	jnc .end
  7126 0000261C 8B740C              <1> 	mov si, [si + struc_window.next_win]
  7127 0000261F 09F6                <1> 	or si, si
  7128 00002621 75F4                <1> 	jnz .loop_broadcast
  7129                              <1> .end:
  7130 00002623 61                  <1> 	popa
  7131 00002624 C3                  <1> 	ret
  7132                              <1> 
  7133                              <1> 
  7134                              <1> 
  7135                              <1> 
  7136                              <1> ;=============================================================================
  7137                              <1> ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Private Data Area >>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  7138                              <1> ;=============================================================================
  7139 00002625 006B0159025A038E04- <1> ui_VideoHorizParams dw 0x6B00,0x5901,0x5A02,0x8E03,0x5F04,0x8C05,0x2D13 ;8-wide
  7140 0000262E 5F058C132D          <1>
  7141                              <1> 
  7142                              <1> ui_screen_size:
  7143 00002633 5A                  <1> ui_screen_width     db     90
  7144 00002634 19                  <1> ui_screen_height    db     25
  7145                              <1> 
  7146 00002635 00B8                <1> ui_screen_bufseg     dw     SCR_BUF_SEG0
  7147 00002637 00                  <1> ui_screen_page       db     0
  7148 00002638 00                  <1> ui_screen_lock       db     0
  7149                              <1> 
  7150                              <1> 
  7151                              <1> window_def_action_table:
  7152 00002639 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7153 0000263A 008D                <1> 	dw	kbCtrlUp
  7154 0000263C [1124]              <1> 	dw	window_move_up
  7155                              <1> 
  7156 0000263E 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7157 0000263F E08D                <1> 	dw	kbEnhCtrlUp
  7158 00002641 [1124]              <1> 	dw	window_move_up
  7159                              <1> 
  7160 00002643 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7161 00002644 E047                <1> 	dw	kbEnhHome
  7162 00002646 [1124]              <1> 	dw	window_move_up
  7163                              <1> 
  7164 00002648 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7165 00002649 0091                <1> 	dw	kbCtrlDown
  7166 0000264B [2024]              <1> 	dw	window_move_down
  7167                              <1> 
  7168 0000264D 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7169 0000264E E091                <1> 	dw	kbEnhCtrlDown
  7170 00002650 [2024]              <1> 	dw	window_move_down
  7171                              <1> 
  7172 00002652 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7173 00002653 E04F                <1> 	dw	kbEnhEnd
  7174 00002655 [2024]              <1> 	dw	window_move_down
  7175                              <1> 
  7176 00002657 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7177 00002658 0073                <1> 	dw	kbCtrlLeft
  7178 0000265A [3524]              <1> 	dw	window_move_left
  7179                              <1> 
  7180 0000265C 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7181 0000265D E073                <1> 	dw	kbEnhCtrlLeft
  7182 0000265F [3524]              <1> 	dw	window_move_left
  7183                              <1> 
  7184 00002661 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7185 00002662 E053                <1> 	dw	kbEnhDel
  7186 00002664 [3524]              <1> 	dw	window_move_left
  7187                              <1> 
  7188 00002666 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7189 00002667 0074                <1> 	dw	kbCtrlRight
  7190 00002669 [4424]              <1> 	dw	window_move_right
  7191                              <1> 
  7192 0000266B 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7193 0000266C E074                <1> 	dw	kbEnhCtrlRight
  7194 0000266E [4424]              <1> 	dw	window_move_right
  7195                              <1> 
  7196 00002670 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7197 00002671 E051                <1> 	dw	kbEnhPgDn
  7198 00002673 [4424]              <1> 	dw	window_move_right
  7199                              <1> 
  7200 00002675 00                  <1> 	db	0
  7201 00002676 0094                <1> 	dw	kbCtrlTab
  7202 00002678 [5D24]              <1> 	dw	window_switch_window
  7203                              <1> 
  7204 0000267A 00                  <1> 	db	0
  7205 0000267B 00A5                <1> 	dw	kbAltTab
  7206 0000267D [5D24]              <1> 	dw	window_switch_window
  7207                              <1> .end_of_table
  7208                              <1> 
  7209                              <1> inputbox_action_table:
  7210 0000267F 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7211 00002680 080E                <1> 	dw	kbBack
  7212 00002682 [F91D]              <1> 	dw	inputbox_backspace
  7213                              <1> 
  7214 00002684 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7215 00002685 0053                <1> 	dw	kbDel
  7216 00002687 [131E]              <1> 	dw	inputbox_delete
  7217                              <1> 
  7218 00002689 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7219 0000268A E053                <1> 	dw	kbEnhDel
  7220 0000268C [131E]              <1> 	dw	inputbox_delete
  7221                              <1> 
  7222 0000268E 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7223 0000268F 0047                <1> 	dw	kbHome
  7224 00002691 [4A1E]              <1> 	dw	inputbox_home_key
  7225                              <1> 
  7226 00002693 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7227 00002694 E047                <1> 	dw	kbEnhHome
  7228 00002696 [4A1E]              <1> 	dw	inputbox_home_key
  7229                              <1> 
  7230 00002698 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7231 00002699 004F                <1> 	dw	kbEnd
  7232 0000269B [401E]              <1> 	dw	inputbox_end_key
  7233                              <1> 
  7234 0000269D 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7235 0000269E E04F                <1> 	dw	kbEnhEnd
  7236 000026A0 [401E]              <1> 	dw	inputbox_end_key
  7237                              <1> 
  7238 000026A2 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7239 000026A3 004B                <1> 	dw	kbLeft
  7240 000026A5 [331E]              <1> 	dw	inputbox_left_arrow
  7241                              <1> 
  7242 000026A7 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7243 000026A8 E04B                <1> 	dw	kbEnhLeft
  7244 000026AA [331E]              <1> 	dw	inputbox_left_arrow
  7245                              <1> 
  7246 000026AC 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7247 000026AD 004D                <1> 	dw	kbRight
  7248 000026AF [241E]              <1> 	dw	inputbox_right_arrow
  7249                              <1> 
  7250 000026B1 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7251 000026B2 E04D                <1> 	dw	kbEnhRight
  7252 000026B4 [241E]              <1> 	dw	inputbox_right_arrow
  7253                              <1> 
  7254 000026B6 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7255 000026B7 1B01                <1> 	dw	kbEsc
  7256 000026B9 [521E]              <1> 	dw	inputbox_cancel
  7257                              <1> 
  7258 000026BB 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7259 000026BC 0D1C                <1> 	dw	kbEnter
  7260 000026BE [5A1E]              <1> 	dw	inputbox_enter
  7261                              <1> 
  7262 000026C0 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7263 000026C1 0DE0                <1> 	dw	kbEnhEnter
  7264 000026C3 [5A1E]              <1> 	dw	inputbox_enter
  7265                              <1> 
  7266                              <1> .end_of_table
  7267                              <1> 
  7268                              <1> listbox_action_table:
  7269 000026C5 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7270 000026C6 0D1C                <1> 	dw	kbEnter
  7271 000026C8 0000                <1> 	dw	0
  7272                              <1> 
  7273 000026CA 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7274 000026CB 0DE0                <1> 	dw	kbEnhEnter
  7275 000026CD 0000                <1> 	dw	0
  7276                              <1> 
  7277 000026CF 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7278 000026D0 1B01                <1> 	dw	kbEsc
  7279 000026D2 [E221]              <1> 	dw	listbox_cancel
  7280                              <1> .end_of_table
  7281                              <1> 
  7282                              <1> menubox_def_action_table:
  7283 000026D4 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7284 000026D5 0048                <1> 	dw	kbUp
  7285 000026D7 [0121]              <1> 	dw	menubox_focus_up
  7286                              <1> 
  7287 000026D9 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7288 000026DA E048                <1> 	dw	kbEnhUp
  7289 000026DC [0121]              <1> 	dw	menubox_focus_up
  7290                              <1> 
  7291 000026DE 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7292 000026DF 0050                <1> 	dw	kbDown
  7293 000026E1 [2D21]              <1> 	dw	menubox_focus_down
  7294                              <1> 
  7295 000026E3 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7296 000026E4 E050                <1> 	dw	kbEnhDown
  7297 000026E6 [2D21]              <1> 	dw	menubox_focus_down
  7298                              <1> 
  7299 000026E8 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7300 000026E9 0049                <1> 	dw	kbPgUp
  7301 000026EB [1321]              <1> 	dw	menubox_focus_pageup
  7302                              <1> 
  7303 000026ED 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7304 000026EE 0051                <1> 	dw	kbPgDn
  7305 000026F0 [3F21]              <1> 	dw	menubox_focus_pagedown
  7306                              <1> 
  7307 000026F2 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7308 000026F3 0D1C                <1> 	dw	kbEnter
  7309 000026F5 [D520]              <1> 	dw	menubox_do_focus
  7310                              <1> 
  7311 000026F7 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7312 000026F8 0DE0                <1> 	dw	kbEnhEnter
  7313 000026FA [D520]              <1> 	dw	menubox_do_focus
  7314                              <1> 
  7315 000026FC 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7316 000026FD 1B01                <1> 	dw	kbEsc
  7317 000026FF 0000                <1> 	dw	0
  7318                              <1> 
  7319 00002701 01                  <1>         db      ACTFLAG_CLOSE_WIN
  7320 00002702 08F2                <1>         dw      EVENT_ALT_RELEASE
  7321 00002704 0000                <1>         dw      0
  7322                              <1> .end_of_table
  7323                              <1> 
  7324                              <1> 
  7325                              <1> 
  7326                              <1> ; ===========================================================================
  7327                              <1> 
  7328                              <1> ; vi:nowrap
  7329                                  %include "utils.asm"
  7330                              <1> ; asmsyntax=nasm
  7331                              <1> ;
  7332                              <1> ; utils.asm
  7333                              <1> ;
  7334                              <1> ; Some utility functions
  7335                              <1> ;
  7336                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
  7337                              <1> ;
  7338                              <1> 
  7339                              <1> ;=============================================================================
  7340                              <1> ;itoa ---- convert integer to ascii string (the string is zero ending)
  7341                              <1> ;input:
  7342                              <1> ;      ax = the integer to be converted
  7343                              <1> ;      cl = max length of the integer
  7344                              <1> ;      es:di -> buffer
  7345                              <1> ;output:
  7346                              <1> ;      none
  7347                              <1> ;=============================================================================
  7348                              <1> itoa:
  7349 00002706 60                  <1>         pusha
  7350 00002707 30ED                <1>         xor ch, ch
  7351 00002709 01CF                <1>         add di, cx
  7352 0000270B C60500              <1>         mov byte [di], 0
  7353 0000270E BB0A00              <1>         mov bx, 10
  7354                              <1> .loop_itoa:
  7355 00002711 31D2                <1>         xor dx, dx
  7356 00002713 4F                  <1>         dec di
  7357 00002714 F7F3                <1>         div bx
  7358 00002716 80C230              <1>         add dl, '0'
  7359 00002719 8815                <1>         mov [di], dl
  7360 0000271B 49                  <1>         dec cx
  7361 0000271C 09C0                <1>         or ax, ax
  7362 0000271E 7404                <1>         jz .end_itoa
  7363 00002720 09C9                <1>         or cx, cx
  7364 00002722 75ED                <1>         jnz .loop_itoa
  7365                              <1> .end_itoa:
  7366 00002724 09C9                <1>         or cx, cx
  7367 00002726 7406                <1>         jz .end
  7368                              <1> .loop_fillspace:
  7369 00002728 4F                  <1>         dec di
  7370 00002729 C60520              <1>         mov byte [di], ' '
  7371 0000272C E2FA                <1>         loop .loop_fillspace
  7372                              <1> .end:
  7373 0000272E 61                  <1>         popa
  7374 0000272F C3                  <1>         ret
  7375                              <1> 
  7376                              <1> ;=============================================================================
  7377                              <1> ;atoi ---- convert ascii string to integer (the string is zero ending)
  7378                              <1> ;input:
  7379                              <1> ;      ds:si -> buffer
  7380                              <1> ;output:
  7381                              <1> ;      ax = convert result ( <= 65535 )
  7382                              <1> ;=============================================================================
  7383                              <1> atoi:
  7384 00002730 53                  <1> 	push bx
  7385 00002731 51                  <1> 	push cx
  7386                              <1> 
  7387 00002732 31DB                <1> 	xor bx, bx
  7388 00002734 31C0                <1> 	xor ax, ax
  7389                              <1> 
  7390                              <1> .loop_conv:
  7391 00002736 AC                  <1> 	lodsb
  7392 00002737 08C0                <1> 	or al, al
  7393 00002739 7413                <1> 	jz .end
  7394 0000273B 2C30                <1> 	sub al, '0'
  7395 0000273D 3C0A                <1> 	cmp al, 10
  7396 0000273F 730D                <1> 	jae .end
  7397                              <1> 
  7398 00002741 89D9                <1> 	mov cx, bx
  7399 00002743 C1E303              <1>         shl bx, 3                   ; bx = bx * 10
  7400 00002746 D1E1                <1>         shl cx, 1                   ;
  7401 00002748 01CB                <1>         add bx, cx                  ;
  7402 0000274A 01C3                <1> 	add bx, ax
  7403 0000274C EBE8                <1> 	jmp short .loop_conv
  7404                              <1> 
  7405                              <1> .end:
  7406 0000274E 89D8                <1> 	mov ax, bx
  7407 00002750 4E                  <1> 	dec si
  7408 00002751 59                  <1> 	pop cx
  7409 00002752 5B                  <1> 	pop bx
  7410 00002753 C3                  <1> 	ret
  7411                              <1> 
  7412                              <1> ;=============================================================================
  7413                              <1> ;strlen ---- Count Length of a zero ending string
  7414                              <1> ;input:
  7415                              <1> ;      ds:si -> string
  7416                              <1> ;output:
  7417                              <1> ;      cx = length (not include the ending zero)
  7418                              <1> ;=============================================================================
  7419                              <1> strlen:
  7420 00002754 50                  <1>         push ax
  7421 00002755 31C9                <1>         xor cx,cx
  7422                              <1> 
  7423 00002757 09F6                <1>         or si,si
  7424 00002759 740A                <1>         jz .end
  7425                              <1> 
  7426 0000275B 56                  <1>         push si
  7427 0000275C FC                  <1>         cld
  7428                              <1> .loop_count:
  7429 0000275D 41                  <1>         inc cx
  7430 0000275E AC                  <1>         lodsb
  7431 0000275F 08C0                <1>         or al, al
  7432 00002761 75FA                <1>         jnz .loop_count
  7433                              <1> 
  7434 00002763 49                  <1>         dec cx
  7435 00002764 5E                  <1>         pop si
  7436                              <1> 
  7437                              <1> .end:
  7438 00002765 58                  <1>         pop ax
  7439 00002766 C3                  <1>         ret
  7440                              <1> 
  7441                              <1> ;=============================================================================
  7442                              <1> ;strlen_hl ---- Count Length of a zero ending string (ignore ~ chars)
  7443                              <1> ;input:
  7444                              <1> ;      ds:si -> string
  7445                              <1> ;output:
  7446                              <1> ;      cx = length (not include the ending zero)
  7447                              <1> ;=============================================================================
  7448                              <1> strlen_hl:
  7449 00002767 50                  <1>         push ax
  7450 00002768 31C9                <1>         xor cx,cx
  7451                              <1> 
  7452 0000276A 09F6                <1>         or si,si
  7453 0000276C 740E                <1>         jz .end
  7454                              <1> 
  7455 0000276E 56                  <1>         push si
  7456 0000276F FC                  <1>         cld
  7457                              <1> .loop_count:
  7458 00002770 41                  <1>         inc cx
  7459                              <1> 
  7460                              <1> .loop_nocount:
  7461 00002771 AC                  <1>         lodsb
  7462 00002772 3C7E                <1>         cmp al, '~'
  7463 00002774 74FB                <1>         je .loop_nocount
  7464 00002776 08C0                <1>         or al, al
  7465 00002778 75F6                <1>         jnz .loop_count
  7466                              <1> 
  7467 0000277A 49                  <1>         dec cx
  7468 0000277B 5E                  <1>         pop si
  7469                              <1> 
  7470                              <1> .end:
  7471 0000277C 58                  <1>         pop ax
  7472 0000277D C3                  <1>         ret
  7473                              <1> 
  7474                              <1> ;=============================================================================
  7475                              <1> ;strchr ---- search a char in a string
  7476                              <1> ;input:
  7477                              <1> ;      al = the char to be searched
  7478                              <1> ;      cx = length of the string
  7479                              <1> ;      es:di -> string
  7480                              <1> ;output:
  7481                              <1> ;      cf = 0 the char was found
  7482                              <1> ;            cx = offset of the char
  7483                              <1> ;      cf = 1 the char was not found
  7484                              <1> ;            cx = length of the string
  7485                              <1> ;=============================================================================
  7486                              <1> strchr:
  7487 0000277E 53                  <1>         push bx
  7488 0000277F 57                  <1>         push di
  7489 00002780 89CB                <1>         mov bx,cx
  7490 00002782 FC                  <1>         cld
  7491 00002783 F2AE                <1>         repnz scasb
  7492 00002785 5F                  <1>         pop di
  7493 00002786 87D9                <1>         xchg bx, cx
  7494 00002788 7506                <1>         jnz .not_found
  7495 0000278A 29D9                <1>         sub cx, bx
  7496 0000278C 49                  <1>         dec cx
  7497 0000278D 5B                  <1>         pop bx
  7498 0000278E F8                  <1>         clc
  7499 0000278F C3                  <1>         ret
  7500                              <1> .not_found:
  7501 00002790 5B                  <1>         pop bx
  7502 00002791 F9                  <1>         stc
  7503 00002792 C3                  <1>         ret
  7504                              <1> 
  7505                              <1> ;=============================================================================
  7506                              <1> ;strncpy ---- copy strings
  7507                              <1> ;input:
  7508                              <1> ;      cx = max number of chars to be copied
  7509                              <1> ;      ds:si -> source string
  7510                              <1> ;      es:di -> dest string
  7511                              <1> ;output:
  7512                              <1> ;      cx = number of chars actually copied (not include the ending zero char)
  7513                              <1> ;      es:di -> point to next char of the end of dest string and set it to
  7514                              <1> ;               zero
  7515                              <1> ;=============================================================================
  7516                              <1> strncpy:
  7517 00002793 56                  <1>         push si
  7518 00002794 50                  <1>         push ax
  7519 00002795 53                  <1>         push bx
  7520 00002796 89CB                <1>         mov bx, cx
  7521 00002798 FC                  <1>         cld
  7522                              <1> .loop_copy:
  7523 00002799 AC                  <1>         lodsb
  7524 0000279A AA                  <1>         stosb
  7525 0000279B 08C0                <1>         or al, al
  7526 0000279D 7405                <1>         jz .end
  7527 0000279F E2F8                <1>         loop .loop_copy
  7528 000027A1 30C0                <1>         xor al, al
  7529 000027A3 AA                  <1>         stosb
  7530                              <1> .end:
  7531 000027A4 4F                  <1>         dec di
  7532 000027A5 87D9                <1>         xchg bx, cx
  7533 000027A7 29D9                <1>         sub cx, bx
  7534 000027A9 5B                  <1>         pop bx
  7535 000027AA 58                  <1>         pop ax
  7536 000027AB 5E                  <1>         pop si
  7537 000027AC C3                  <1>         ret
  7538                              <1> 
  7539                              <1> ;=============================================================================
  7540                              <1> ;strcpy ---- copy strings
  7541                              <1> ;input:
  7542                              <1> ;      ds:si -> source string
  7543                              <1> ;      es:di -> dest string
  7544                              <1> ;output:
  7545                              <1> ;      es:di -> point to next char of the end of dest string and set it to
  7546                              <1> ;               zero
  7547                              <1> ;=============================================================================
  7548                              <1> strcpy:
  7549 000027AD 56                  <1>         push si
  7550 000027AE 50                  <1>         push ax
  7551                              <1> 
  7552 000027AF FC                  <1>         cld
  7553                              <1> .loop_copy:
  7554 000027B0 AC                  <1>         lodsb
  7555 000027B1 AA                  <1>         stosb
  7556 000027B2 08C0                <1>         or al, al
  7557 000027B4 75FA                <1> 	jnz .loop_copy
  7558                              <1> 
  7559 000027B6 4F                  <1>         dec di
  7560 000027B7 58                  <1>         pop ax
  7561 000027B8 5E                  <1>         pop si
  7562 000027B9 C3                  <1>         ret
  7563                              <1> 
  7564                              <1> 
  7565                              <1> ;=============================================================================
  7566                              <1> ;calc_password ---- calculate the password
  7567                              <1> ;input:
  7568                              <1> ;      ds:si -> the pasword string (zero ending)
  7569                              <1> ;      cx = max length of the password
  7570                              <1> ;output:
  7571                              <1> ;      dx:ax = the encrypted password (32 bits)
  7572                              <1> ;=============================================================================
  7573                              <1> calc_password:
  7574 000027BA 56                  <1>         push si
  7575 000027BB 6631D2              <1>         xor edx, edx
  7576 000027BE 6631C0              <1>         xor eax, eax
  7577 000027C1 FC                  <1>         cld
  7578                              <1> .loop_calc:
  7579 000027C2 AC                  <1>         lodsb
  7580 000027C3 08C0                <1>         or al, al
  7581 000027C5 740E                <1>         jz .end
  7582 000027C7 F6D0                <1>         not al
  7583 000027C9 C0C004              <1>         rol al, 4
  7584 000027CC 6601C2              <1>         add edx, eax
  7585 000027CF 66C1C202            <1>         rol edx, 2
  7586 000027D3 E2ED                <1>         loop .loop_calc
  7587                              <1> .end:
  7588 000027D5 89D0                <1>         mov ax, dx
  7589 000027D7 66C1CA10            <1>         ror edx, 16
  7590 000027DB 5E                  <1>         pop si
  7591 000027DC C3                  <1>         ret
  7592                              <1> 
  7593                              <1> ;=============================================================================
  7594                              <1> ;htoa ---- hex to ascii
  7595                              <1> ;input:
  7596                              <1> ;     ax = hex number
  7597                              <1> ;     cl = length of hex number (1 to 4)
  7598                              <1> ;     es:di -> buffer to store ascii string
  7599                              <1> ;output:
  7600                              <1> ;     es:di -> ascii string
  7601                              <1> ;=============================================================================
  7602                              <1> htoa:
  7603 000027DD 60                  <1>         pusha
  7604 000027DE 30ED                <1>         xor ch, ch
  7605 000027E0 01CF                <1>         add di, cx
  7606 000027E2 C60500              <1>         mov byte [di], 0
  7607                              <1> 
  7608                              <1> .loop_conv:
  7609 000027E5 50                  <1> 	push ax                 ;Save AX
  7610 000027E6 240F                <1> 	and al,0Fh              ;Keep 4 bits
  7611 000027E8 3C0A                <1> 	cmp al,0Ah              ;Compute the hex digit,
  7612 000027EA 1C69                <1> 	sbb al,69h              ;using Improved Allison's Algorithm
  7613 000027EC 2F                  <1> 	das
  7614 000027ED 4F                  <1> 	dec di
  7615 000027EE 8805                <1> 	mov [di], al
  7616 000027F0 58                  <1> 	pop ax                  ;Restore AX
  7617 000027F1 C1E804              <1> 	shr ax,4                ;Shift it over
  7618 000027F4 E2EF                <1>         loop .loop_conv
  7619                              <1> 
  7620 000027F6 61                  <1>         popa
  7621 000027F7 C3                  <1>         ret
  7622                              <1> 
  7623                              <1> ;=============================================================================
  7624                              <1> ;atoh ---- ascii to hex
  7625                              <1> ;input:
  7626                              <1> ;     ds:si -> buffer
  7627                              <1> ;output:
  7628                              <1> ;     ax = hex
  7629                              <1> ;     ds:si -> end of the hex number
  7630                              <1> ;=============================================================================
  7631                              <1> atoh:
  7632 000027F8 53                  <1> 	push bx
  7633                              <1> 
  7634 000027F9 31DB                <1> 	xor bx, bx
  7635 000027FB 31C0                <1> 	xor ax, ax
  7636                              <1> .loop_conv:
  7637 000027FD AC                  <1> 	lodsb
  7638 000027FE 08C0                <1> 	or al, al
  7639 00002800 7419                <1> 	jz .end
  7640                              <1> 
  7641 00002802 2C30                <1> 	sub al, '0'
  7642 00002804 3C0A                <1> 	cmp al, 10
  7643 00002806 720C                <1> 	jb .ok
  7644 00002808 2C07                <1> 	sub al, 'A'-'0'-10
  7645 0000280A 3C10                <1> 	cmp al, 16
  7646 0000280C 7206                <1> 	jb .ok
  7647 0000280E 2C20                <1> 	sub al, 'a'-'A'
  7648 00002810 3C10                <1> 	cmp al, 16
  7649 00002812 7307                <1> 	jae .end
  7650                              <1> 
  7651                              <1> .ok:
  7652 00002814 C1E304              <1> 	shl bx, 4
  7653 00002817 01C3                <1> 	add bx, ax
  7654 00002819 EBE2                <1> 	jmp .loop_conv
  7655                              <1> 
  7656                              <1> .end:
  7657 0000281B 4E                  <1> 	dec si
  7658 0000281C 89D8                <1> 	mov ax, bx
  7659 0000281E 5B                  <1>         pop bx
  7660 0000281F C3                  <1>         ret
  7661                              <1> 
  7662                              <1> ;=============================================================================
  7663                              <1> ;count_lines ---- count how many lines in a string.
  7664                              <1> ;input:
  7665                              <1> ;      ds:si -> string
  7666                              <1> ;output:
  7667                              <1> ;      ch = number of lines
  7668                              <1> ;      cl = max line length
  7669                              <1> ;=============================================================================
  7670                              <1> count_lines:
  7671 00002820 56                  <1>         push si
  7672 00002821 53                  <1>         push bx
  7673 00002822 50                  <1>         push ax
  7674                              <1> 
  7675 00002823 FC                  <1>         cld
  7676                              <1> 
  7677 00002824 31C9                <1>         xor cx, cx
  7678 00002826 31DB                <1>         xor bx, bx
  7679                              <1> 
  7680 00002828 09F6                <1>         or si, si
  7681 0000282A 7423                <1>         jz .end
  7682                              <1> 
  7683 0000282C FEC5                <1>         inc ch
  7684                              <1> .loop_count:
  7685 0000282E AC                  <1>         lodsb
  7686 0000282F 08C0                <1>         or al, al
  7687 00002831 7416                <1>         jz .ending
  7688                              <1> 
  7689 00002833 3C0D                <1>         cmp al, 0x0d
  7690 00002835 7404                <1>         je .new_line
  7691                              <1> 
  7692 00002837 FEC3                <1>         inc bl
  7693 00002839 EBF3                <1>         jmp short .loop_count
  7694                              <1> 
  7695                              <1> .new_line:
  7696 0000283B FEC5                <1>         inc ch
  7697                              <1> 
  7698 0000283D 88DF                <1>         mov bh, bl
  7699 0000283F 30DB                <1>         xor bl, bl
  7700 00002841 38CF                <1>         cmp bh, cl
  7701 00002843 76E9                <1>         jbe .loop_count
  7702 00002845 88F9                <1>         mov cl, bh
  7703 00002847 EBE5                <1>         jmp short .loop_count
  7704                              <1> 
  7705                              <1> .ending:
  7706 00002849 38CB                <1>         cmp bl, cl
  7707 0000284B 7602                <1>         jbe .end
  7708 0000284D 88D9                <1>         mov cl, bl
  7709                              <1> 
  7710                              <1> .end:
  7711 0000284F 58                  <1>         pop ax
  7712 00002850 5B                  <1>         pop bx
  7713 00002851 5E                  <1>         pop si
  7714 00002852 C3                  <1>         ret
  7715                              <1> 
  7716                              <1> ;=============================================================================
  7717                              <1> ; power_off ---- turn the power off
  7718                              <1> ;input:
  7719                              <1> ;       none
  7720                              <1> ;output:
  7721                              <1> ;       never return if successful.
  7722                              <1> ;       cf = 1 on error.
  7723                              <1> ;=============================================================================
  7724                              <1> power_off:
  7725 00002853 60                  <1>         pusha
  7726 00002854 E82D00              <1> 	call check_apm_bios
  7727 00002857 7229                <1>         jc .end
  7728                              <1> 
  7729 00002859 B80153              <1>         mov ax, 0x5301
  7730 0000285C 31DB                <1>         xor bx, bx
  7731 0000285E CD15                <1>         int 0x15
  7732 00002860 7220                <1>         jc .end
  7733                              <1> 
  7734 00002862 B88053              <1>         mov ax, 0x5380
  7735 00002865 B78C                <1>         mov bh, 0x8c
  7736 00002867 CD15                <1>         int 0x15
  7737                              <1> 
  7738 00002869 B84000              <1>         mov ax, 0x40
  7739 0000286C BBD800              <1>         mov bx, 0xd8
  7740 0000286F 1E                  <1>         push ds
  7741 00002870 8ED8                <1>         mov ds, ax
  7742 00002872 3E800F10            <1>         or byte [ds:bx], 0x10
  7743 00002876 1F                  <1>         pop ds
  7744                              <1> 
  7745 00002877 B80753              <1>         mov ax, 0x5307
  7746 0000287A BB0100              <1>         mov bx, 1
  7747 0000287D B90300              <1>         mov cx, 3
  7748 00002880 CD15                <1>         int 0x15
  7749                              <1> 
  7750                              <1> .end:
  7751 00002882 61                  <1>         popa
  7752 00002883 C3                  <1>         ret
  7753                              <1> 
  7754                              <1> 
  7755                              <1> ;=============================================================================
  7756                              <1> ; check_apm_bios ---- check if the apm bios present
  7757                              <1> ; output:
  7758                              <1> ;	cf = 1 error, cf = 0 ok
  7759                              <1> ;=============================================================================
  7760                              <1> check_apm_bios:
  7761 00002884 60                  <1>         pusha
  7762 00002885 B80053              <1>         mov ax, 0x5300
  7763 00002888 31DB                <1>         xor bx, bx
  7764 0000288A CD15                <1>         int 0x15                                 ; check if apm present
  7765 0000288C 720D                <1> 	jc .end
  7766 0000288E 81FB4D50            <1> 	cmp bx, 0x504D
  7767 00002892 7506                <1> 	jnz .none
  7768 00002894 F7C10100            <1> 	test cx, 1
  7769 00002898 7501                <1> 	jnz .end
  7770                              <1> .none:
  7771 0000289A F9                  <1> 	stc
  7772                              <1> .end:
  7773 0000289B 61                  <1> 	popa
  7774 0000289C C3                  <1> 	ret
  7775                              <1> 
  7776                              <1> ;=============================================================================
  7777                              <1> ; leap_year ---- check if a year is leap a year
  7778                              <1> ; input:
  7779                              <1> ;      ax = year
  7780                              <1> ; output:
  7781                              <1> ;      cf = 1, it's a leap year
  7782                              <1> ;      cf = 0, not a leap year
  7783                              <1> ;=============================================================================
  7784                              <1> leap_year:
  7785 0000289D 60                  <1>        pusha
  7786 0000289E B99001              <1>        mov cx, 400
  7787 000028A1 31D2                <1>        xor dx, dx 
  7788 000028A3 50                  <1>        push ax
  7789 000028A4 F7F1                <1>        div cx
  7790 000028A6 58                  <1>        pop ax
  7791 000028A7 09D2                <1>        or dx, dx
  7792 000028A9 741B                <1>        jz .isleap
  7793                              <1> 
  7794 000028AB B96400              <1>        mov cx, 100
  7795 000028AE 31D2                <1>        xor dx, dx
  7796 000028B0 50                  <1>        push ax
  7797 000028B1 F7F1                <1>        div cx
  7798 000028B3 58                  <1>        pop ax
  7799 000028B4 09D2                <1>        or dx, dx
  7800 000028B6 740B                <1>        jz .noleap
  7801                              <1> 
  7802 000028B8 31D2                <1>        xor dx, dx
  7803 000028BA B90400              <1>        mov cx, 4
  7804 000028BD F7F1                <1>        div cx
  7805 000028BF 09D2                <1>        or dx, dx
  7806 000028C1 7403                <1>        jz .isleap
  7807                              <1> 
  7808                              <1> .noleap:
  7809 000028C3 F8                  <1>        clc
  7810 000028C4 61                  <1>        popa
  7811 000028C5 C3                  <1>        ret
  7812                              <1> 
  7813                              <1> .isleap:
  7814 000028C6 F9                  <1>        stc
  7815 000028C7 61                  <1>        popa
  7816 000028C8 C3                  <1>        ret
  7817                              <1> 
  7818                              <1> ;=============================================================================
  7819                              <1> ; day_in_week
  7820                              <1> ; input:
  7821                              <1> ;      ax = year
  7822                              <1> ;      dh = month
  7823                              <1> ;      dl = day
  7824                              <1> ; output:
  7825                              <1> ;      cx = day in week
  7826                              <1> ;=============================================================================
  7827                              <1> day_in_week:
  7828 000028C9 50                  <1> 	push ax
  7829 000028CA 53                  <1> 	push bx
  7830 000028CB 52                  <1> 	push dx
  7831                              <1> 
  7832 000028CC 52                  <1> 	push dx
  7833                              <1> 
  7834 000028CD 48                  <1> 	dec ax
  7835 000028CE 89C1                <1> 	mov cx, ax
  7836 000028D0 31D2                <1> 	xor dx, dx
  7837 000028D2 50                  <1> 	push ax
  7838 000028D3 BB0400              <1> 	mov bx, 4
  7839 000028D6 F7F3                <1> 	div bx
  7840 000028D8 01C1                <1> 	add cx, ax
  7841 000028DA 58                  <1> 	pop ax
  7842                              <1> 
  7843 000028DB 31D2                <1> 	xor dx, dx
  7844 000028DD 50                  <1> 	push ax
  7845 000028DE BB6400              <1> 	mov bx, 100
  7846 000028E1 F7F3                <1> 	div bx
  7847 000028E3 29C1                <1> 	sub cx, ax
  7848 000028E5 58                  <1> 	pop ax
  7849                              <1> 
  7850 000028E6 31D2                <1> 	xor dx, dx
  7851 000028E8 50                  <1> 	push ax
  7852 000028E9 BB9001              <1> 	mov bx, 400
  7853 000028EC F7F3                <1> 	div bx
  7854 000028EE 01C1                <1> 	add cx, ax
  7855 000028F0 58                  <1> 	pop ax
  7856                              <1> 
  7857 000028F1 40                  <1> 	inc ax
  7858 000028F2 5A                  <1> 	pop dx
  7859                              <1> 
  7860 000028F3 0FB6DE              <1> 	movzx bx, dh
  7861 000028F6 8A9F[1929]          <1> 	mov bl, [days_in_month_norm-1+bx]
  7862 000028FA 01D9                <1> 	add cx, bx 
  7863                              <1> 
  7864 000028FC E89EFF              <1> 	call leap_year
  7865 000028FF 7306                <1> 	jnc .norm
  7866 00002901 80FE03              <1> 	cmp dh, 3
  7867                              <1> 
  7868 00002904 7201                <1> 	jb .norm
  7869 00002906 41                  <1> 	inc cx
  7870                              <1> 
  7871                              <1> .norm:
  7872 00002907 30F6                <1> 	xor dh, dh
  7873 00002909 01D1                <1> 	add cx, dx
  7874                              <1> 
  7875 0000290B 89C8                <1> 	mov ax, cx
  7876 0000290D 31D2                <1> 	xor dx, dx
  7877 0000290F B90700              <1> 	mov cx, 7
  7878 00002912 F7F1                <1> 	div cx
  7879 00002914 89D1                <1> 	mov cx, dx
  7880                              <1> 
  7881 00002916 5A                  <1> 	pop dx
  7882 00002917 5B                  <1> 	pop bx
  7883 00002918 58                  <1> 	pop ax
  7884 00002919 C3                  <1> 	ret
  7885                              <1> 
  7886 0000291A 000303060104060205- <1> days_in_month_norm db  0, 3, 3, 6, 1, 4, 6, 2, 5, 0, 3, 5
  7887 00002923 000305              <1>
  7888                              <1> 
  7889                              <1> ;=============================================================================
  7890                              <1> ; bcd_to_bin ---- convert bcd to binary
  7891                              <1> ; input: ax = bcd number
  7892                              <1> ; output: ax = binary number
  7893                              <1> ;=============================================================================
  7894                              <1> bcd_to_bin:
  7895 00002926 53                  <1>        push bx
  7896 00002927 51                  <1>        push cx
  7897 00002928 52                  <1>        push dx
  7898 00002929 56                  <1>        push si
  7899                              <1> 
  7900 0000292A 8D36[4C29]          <1>        lea si, [.mul_num]
  7901 0000292E B90400              <1>        mov cx, 4
  7902 00002931 31DB                <1>        xor bx, bx
  7903                              <1> 
  7904                              <1> .loop_conv:
  7905 00002933 50                  <1>        push ax
  7906 00002934 83E00F              <1>        and ax, 0x000f
  7907 00002937 8B14                <1>        mov dx, [si]
  7908 00002939 F7E2                <1>        mul dx
  7909 0000293B 01C3                <1>        add bx, ax
  7910 0000293D 58                  <1>        pop ax
  7911 0000293E C1E804              <1>        shr ax, 4
  7912 00002941 46                  <1>        inc si
  7913 00002942 46                  <1>        inc si
  7914 00002943 E2EE                <1>        loop .loop_conv
  7915                              <1> 
  7916 00002945 89D8                <1>        mov ax, bx
  7917                              <1> 
  7918 00002947 5E                  <1>        pop si
  7919 00002948 5A                  <1>        pop dx
  7920 00002949 59                  <1>        pop cx
  7921 0000294A 5B                  <1>        pop bx
  7922 0000294B C3                  <1>        ret
  7923                              <1> 
  7924 0000294C 01000A006400E803    <1> .mul_num  dw 1, 10, 100, 1000
  7925                              <1> 
  7926                              <1> ;=============================================================================
  7927                              <1> ; bcd_to_str ---- convert bcd to string
  7928                              <1> ; input: ax = bcd number
  7929                              <1> ;        cl = length (0 to 4)
  7930                              <1> ;        es:di -> buffer
  7931                              <1> ; output: none
  7932                              <1> ;=============================================================================
  7933                              <1> bcd_to_str:
  7934 00002954 60                  <1>        pusha
  7935 00002955 51                  <1>        push cx
  7936 00002956 89C3                <1>        mov bx, ax
  7937 00002958 B004                <1>        mov al, 4
  7938 0000295A F6E1                <1>        mul cl
  7939 0000295C 88C1                <1>        mov cl, al
  7940 0000295E D3CB                <1>        ror bx, cl
  7941 00002960 59                  <1>        pop cx
  7942                              <1> 
  7943                              <1> .loop_conv:
  7944 00002961 08C9                <1>        or cl, cl
  7945 00002963 740E                <1>        jz .end
  7946 00002965 C1C304              <1>        rol bx, 4
  7947 00002968 89D8                <1>        mov ax, bx
  7948 0000296A 240F                <1>        and al, 0x0f
  7949 0000296C 0430                <1>        add al, '0'
  7950 0000296E AA                  <1>        stosb
  7951 0000296F FEC9                <1>        dec cl
  7952 00002971 EBEE                <1>        jmp .loop_conv
  7953                              <1> 
  7954                              <1> .end:
  7955 00002973 30C0                <1>        xor al, al
  7956 00002975 AA                  <1>        stosb
  7957 00002976 61                  <1>        popa
  7958 00002977 C3                  <1>        ret
  7959                              <1> 
  7960                              <1> ;=============================================================================
  7961                              <1> ; reboot ---- reboot the computer
  7962                              <1> ; input:
  7963                              <1> ;	none
  7964                              <1> ;=============================================================================
  7965                              <1> reboot:
  7966 00002978 BB4000              <1>        mov bx, 0x40
  7967 0000297B 53                  <1>        push bx
  7968 0000297C 1F                  <1>        pop ds
  7969 0000297D B83412              <1>        mov ax, 0x1234
  7970 00002980 A37200              <1>        mov [0x0072], ax
  7971 00002983 EA0000FFFF          <1>        jmp 0xFFFF:0x0000
  7972                              <1> 
  7973                              <1> ;=============================================================================
  7974                              <1> ; bioskey ---- BIOS keyboard func
  7975                              <1> ;=============================================================================
  7976                              <1> bioskey:
  7977 00002988 C606[9F32]00        <1>        mov byte [utils_tmp.kbd_work], 0
  7978 0000298D 08E4                <1>        or ah, ah
  7979 0000298F 740F                <1>        je .post_trans
  7980 00002991 80FC01              <1>        cmp ah, 0x01
  7981 00002994 740A                <1>        je .post_trans
  7982 00002996 80FC10              <1>        cmp ah, 0x10
  7983 00002999 7405                <1>        je .post_trans
  7984 0000299B 80FC11              <1>        cmp ah, 0x11
  7985 0000299E 7504                <1>        jne .call_int16
  7986                              <1> 
  7987                              <1> .post_trans:
  7988 000029A0 FE06[9F32]          <1>        inc byte [utils_tmp.kbd_work]
  7989                              <1> 
  7990                              <1> .call_int16:
  7991 000029A4 CD16                <1>        int 0x16
  7992 000029A6 9C                  <1>        pushf
  7993                              <1> 
  7994 000029A7 803E[9F32]00        <1>        cmp byte [utils_tmp.kbd_work], 0
  7995 000029AC 741E                <1>        jz .end
  7996                              <1> 
  7997 000029AE 51                  <1>        push cx
  7998 000029AF 56                  <1>        push si
  7999 000029B0 8B0E[6846]          <1>        mov cx, [keymap.number]
  8000 000029B4 8B36[6A46]          <1>        mov si, [keymap.data]
  8001 000029B8 09C9                <1>        or cx, cx
  8002 000029BA 740E                <1>        jz .end_trans
  8003                              <1> 
  8004                              <1> .loop_trans:
  8005 000029BC 3B04                <1>        cmp ax, [si]
  8006 000029BE 7505                <1>        jne .loop_next
  8007 000029C0 8B4402              <1>        mov ax, [si+2]
  8008 000029C3 EB05                <1>        jmp short .end_trans
  8009                              <1> .loop_next:
  8010 000029C5 83C604              <1>        add si, 4
  8011 000029C8 E2F2                <1>        loop .loop_trans
  8012                              <1> .end_trans:
  8013 000029CA 5E                  <1>        pop si
  8014 000029CB 59                  <1>        pop cx
  8015                              <1> .end:
  8016 000029CC 9D                  <1>        popf       
  8017 000029CD C3                  <1>        ret
  8018                              <1> 
  8019                              <1> ;=============================================================================
  8020                              <1> ; check_keyevent ---- check if keyboard is pressed
  8021                              <1> ; input:
  8022                              <1> ;	none
  8023                              <1> ; output:
  8024                              <1> ;	ax = keyevent (0 = no key)
  8025                              <1> ;=============================================================================
  8026                              <1> check_keyevent:
  8027 000029CE 53                  <1> 	push bx
  8028                              <1> 
  8029 000029CF 8A3E[A032]          <1> 	mov bh, [utils_tmp.kbd_last_shift]
  8030 000029D3 E85200              <1> 	call .check_stat_key
  8031 000029D6 88C3                <1> 	mov bl, al
  8032 000029D8 A2[A032]            <1> 	mov [utils_tmp.kbd_last_shift], al
  8033                              <1> 
  8034 000029DB E85600              <1> 	call .check_norm_key
  8035 000029DE 09C0                <1> 	or ax, ax
  8036 000029E0 7407                <1> 	jz .no_norm_key
  8037                              <1> 
  8038 000029E2 C606[A132]01        <1> 	mov byte [utils_tmp.kbd_bypass_next_shift], 1
  8039                              <1> .end:
  8040 000029E7 5B                  <1> 	pop bx
  8041 000029E8 C3                  <1> 	ret
  8042                              <1> 
  8043                              <1> .no_norm_key:
  8044 000029E9 31C0                <1> 	xor ax, ax
  8045 000029EB 38FB                <1> 	cmp bl, bh
  8046 000029ED 74F8                <1> 	je .end
  8047                              <1> 
  8048 000029EF 51                  <1> 	push cx
  8049 000029F0 B90101              <1> 	mov cx, 0x0101
  8050                              <1> 
  8051                              <1> .loop_check_keys:
  8052 000029F3 53                  <1> 	push bx
  8053 000029F4 21CB                <1> 	and bx, cx
  8054 000029F6 38DF                <1> 	cmp bh, bl
  8055 000029F8 5B                  <1> 	pop bx
  8056                              <1> 
  8057 000029F9 740E                <1> 	je .no_this_key
  8058                              <1> 
  8059 000029FB 84CB                <1> 	test bl, cl
  8060 000029FD 7404                <1> 	jz .release
  8061 000029FF B4F1                <1> 	mov ah, (EVTCODE_COMMAND | EVTCODE_KEYPRESS)
  8062 00002A01 EB02                <1> 	jmp short .key_ok
  8063                              <1> 
  8064                              <1> .release:
  8065 00002A03 B4F2                <1> 	mov ah, (EVTCODE_COMMAND | EVTCODE_KEYRELEASE)
  8066                              <1> 
  8067                              <1> .key_ok:
  8068 00002A05 88C8                <1> 	mov al, cl
  8069 00002A07 EB06                <1> 	jmp short .end_check_keys
  8070                              <1> 
  8071                              <1> .no_this_key:
  8072 00002A09 D1E1                <1> 	shl cx, 1
  8073 00002A0B 08C9                <1> 	or cl, cl
  8074 00002A0D 75E4                <1> 	jnz .loop_check_keys
  8075                              <1> 
  8076                              <1> .end_check_keys:
  8077 00002A0F 09C0                <1> 	or ax, ax
  8078 00002A11 7412                <1> 	jz .end_stat
  8079                              <1> 
  8080 00002A13 A8F0                <1> 	test al, kbStateKeysMask
  8081 00002A15 7509                <1> 	jnz .dont_bypass
  8082                              <1> 
  8083 00002A17 803E[A132]00        <1> 	cmp byte [utils_tmp.kbd_bypass_next_shift], 0
  8084 00002A1C 7407                <1> 	jz .end_stat
  8085                              <1> 
  8086 00002A1E 31C0                <1> 	xor ax, ax
  8087                              <1> 
  8088                              <1> .dont_bypass:
  8089 00002A20 C606[A132]00        <1> 	mov byte [utils_tmp.kbd_bypass_next_shift], 0
  8090                              <1> 
  8091                              <1> .end_stat:
  8092 00002A25 59                  <1> 	pop cx
  8093 00002A26 5B                  <1> 	pop bx
  8094 00002A27 C3                  <1> 	ret
  8095                              <1> 
  8096                              <1> .check_stat_key:
  8097 00002A28 53                  <1> 	push bx
  8098 00002A29 B402                <1> 	mov ah, 2
  8099 00002A2B 0A26[1046]          <1> 	or ah, [keyboard_type]
  8100 00002A2F E856FF              <1> 	call bioskey
  8101 00002A32 5B                  <1> 	pop bx
  8102 00002A33 C3                  <1> 	ret
  8103                              <1> 
  8104                              <1> .check_norm_key:
  8105 00002A34 53                  <1> 	push bx
  8106 00002A35 B401                <1>         mov ah,1                                        ; if no key pressed
  8107 00002A37 0A26[1046]          <1>         or ah, [keyboard_type]
  8108 00002A3B E84AFF              <1>         call bioskey                                    ; go back to check
  8109 00002A3E 7409                <1> 	jz .no_key
  8110 00002A40 8A26[1046]          <1> 	mov ah, [keyboard_type]
  8111 00002A44 E841FF              <1> 	call bioskey
  8112 00002A47 5B                  <1> 	pop bx
  8113 00002A48 C3                  <1> 	ret
  8114                              <1> 
  8115                              <1> .no_key:
  8116 00002A49 31C0                <1> 	xor ax, ax
  8117 00002A4B 5B                  <1> 	pop bx
  8118 00002A4C C3                  <1> 	ret
  8119                              <1> 
  8120                              <1> ;=============================================================================
  8121                              <1> ;get_realtime ---- get the machine real time in minutes
  8122                              <1> ;input:
  8123                              <1> ;      none
  8124                              <1> ;output:
  8125                              <1> ;      cf = 0 success, ax = real time in minutes, dx = day (set a bit)
  8126                              <1> ;      cf = 1 failed
  8127                              <1> ;=============================================================================
  8128                              <1> get_realtime:
  8129 00002A4D 53                  <1>         push bx
  8130 00002A4E 51                  <1>         push cx
  8131                              <1> 
  8132 00002A4F B404                <1>         mov ah, 0x04
  8133 00002A51 CD1A                <1>         int 0x1a
  8134 00002A53 723C                <1>         jc .end
  8135                              <1> 
  8136 00002A55 0FB6C6              <1>         movzx ax, dh
  8137 00002A58 E8CBFE              <1>         call bcd_to_bin
  8138 00002A5B 88C6                <1>         mov dh, al
  8139 00002A5D 88D0                <1>         mov al, dl
  8140 00002A5F E8C4FE              <1>         call bcd_to_bin
  8141 00002A62 88C2                <1>         mov dl, al
  8142                              <1> 
  8143 00002A64 89C8                <1>         mov ax, cx
  8144 00002A66 E8BDFE              <1>         call bcd_to_bin
  8145                              <1> 
  8146 00002A69 E85DFE              <1>         call day_in_week
  8147                              <1> 
  8148 00002A6C BA0100              <1>         mov dx, 1
  8149 00002A6F D3E2                <1>         shl dx, cl
  8150                              <1> 
  8151 00002A71 52                  <1>         push dx
  8152 00002A72 B402                <1>         mov ah, 0x02
  8153 00002A74 CD1A                <1>         int 0x1a
  8154 00002A76 5A                  <1>         pop dx
  8155 00002A77 7218                <1>         jc .end
  8156                              <1> 
  8157 00002A79 0FB6C5              <1>         movzx ax, ch
  8158 00002A7C E8A7FE              <1>         call bcd_to_bin
  8159 00002A7F 88C5                <1>         mov ch, al
  8160                              <1> 
  8161 00002A81 88C8                <1>         mov al, cl
  8162 00002A83 E8A0FE              <1>         call bcd_to_bin
  8163 00002A86 88C1                <1>         mov cl, al
  8164                              <1> 
  8165                              <1> ;convert hour and minute into minute
  8166 00002A88 B03C                <1>         mov al, 60
  8167 00002A8A F6E5                <1>         mul ch
  8168 00002A8C 30ED                <1>         xor ch, ch
  8169 00002A8E 01C8                <1>         add ax, cx
  8170                              <1> 
  8171 00002A90 F8                  <1>         clc
  8172                              <1> .end:
  8173 00002A91 59                  <1>         pop cx
  8174 00002A92 5B                  <1>         pop bx
  8175                              <1> 
  8176 00002A93 C3                  <1>         ret
  8177                              <1> 
  8178                              <1> 
  8179                              <1> ;=============================================================================
  8180                              <1> ; get_current_time_string ---- get current time string
  8181                              <1> ; input: al = show method, es:di -> buffer
  8182                              <1> ;=============================================================================
  8183                              <1> get_current_time_string:
  8184 00002A94 60                  <1>        pusha
  8185 00002A95 08C0                <1>        or al, al
  8186 00002A97 741D                <1>        jz .end
  8187                              <1> 
  8188 00002A99 B402                <1>        mov ah, 0x02
  8189 00002A9B CD1A                <1>        int 0x1a
  8190 00002A9D 7217                <1>        jc .end
  8191                              <1> 
  8192 00002A9F 89CB                <1>        mov bx, cx
  8193                              <1> 
  8194 00002AA1 B90200              <1>        mov cx, 2
  8195                              <1> 
  8196 00002AA4 0FB6C7              <1>        movzx ax, bh
  8197 00002AA7 E8AAFE              <1>        call bcd_to_str
  8198 00002AAA 01CF                <1>        add di, cx
  8199 00002AAC B03A                <1>        mov al, ':'
  8200 00002AAE AA                  <1>        stosb
  8201                              <1> 
  8202 00002AAF 88D8                <1>        mov al, bl
  8203 00002AB1 E8A0FE              <1>        call bcd_to_str
  8204 00002AB4 01CF                <1>        add di, cx
  8205                              <1>        
  8206                              <1> .end:
  8207 00002AB6 30C0                <1>        xor al, al
  8208 00002AB8 AA                  <1>        stosb
  8209 00002AB9 61                  <1>        popa
  8210 00002ABA C3                  <1>        ret      
  8211                              <1> 
  8212                              <1> 
  8213                              <1> ;=============================================================================
  8214                              <1> ; get_current_date_string ---- get current date string
  8215                              <1> ; input: al = show method, es:di -> buffer
  8216                              <1> ;        the method of show date:
  8217                              <1> ;           0 = don't show date
  8218                              <1> ;           1 = day mm-dd-yyyy
  8219                              <1> ;           2 = day yyyy-mm-dd
  8220                              <1> ;           3 = day dd-mm-yyyy
  8221                              <1> ; output: none
  8222                              <1> ;=============================================================================
  8223                              <1> get_current_date_string:
  8224 00002ABB 60                  <1>        pusha
  8225                              <1> 
  8226 00002ABC 08C0                <1>        or al, al
  8227 00002ABE 7443                <1>        jz .end
  8228                              <1> 
  8229 00002AC0 50                  <1>        push ax
  8230 00002AC1 B404                <1>        mov ah, 0x04
  8231 00002AC3 CD1A                <1>        int 0x1a
  8232 00002AC5 58                  <1>        pop ax
  8233 00002AC6 723B                <1>        jc .end
  8234                              <1> 
  8235 00002AC8 50                  <1>        push ax
  8236 00002AC9 51                  <1>        push cx
  8237 00002ACA 52                  <1>        push dx
  8238                              <1> 
  8239 00002ACB 0FB6C6              <1>        movzx ax, dh
  8240 00002ACE E855FE              <1>        call bcd_to_bin
  8241 00002AD1 88C6                <1>        mov dh, al
  8242 00002AD3 88D0                <1>        mov al, dl
  8243 00002AD5 E84EFE              <1>        call bcd_to_bin
  8244 00002AD8 88C2                <1>        mov dl, al
  8245                              <1> 
  8246 00002ADA 89C8                <1>        mov ax, cx
  8247 00002ADC E847FE              <1>        call bcd_to_bin
  8248                              <1> 
  8249 00002ADF E8E7FD              <1>        call day_in_week
  8250                              <1> 
  8251 00002AE2 89CB                <1>        mov bx, cx
  8252 00002AE4 D1E3                <1>        shl bx, 1
  8253 00002AE6 8BB7[4E47]          <1>        mov si, [str_idx.sunday+bx]
  8254                              <1> 
  8255 00002AEA E8C0FC              <1>        call strcpy
  8256 00002AED B020                <1>        mov al, ' '
  8257 00002AEF AA                  <1>        stosb
  8258                              <1> 
  8259 00002AF0 5A                  <1>        pop dx
  8260 00002AF1 5B                  <1>        pop bx
  8261 00002AF2 58                  <1>        pop ax
  8262                              <1> 
  8263 00002AF3 31C9                <1>        xor cx, cx
  8264                              <1> 
  8265 00002AF5 3C01                <1>        cmp al, 1
  8266 00002AF7 740F                <1>        je .mmddyy
  8267 00002AF9 3C02                <1>        cmp al, 2
  8268 00002AFB 741E                <1>        je .yymmdd
  8269 00002AFD 3C03                <1>        cmp al, 3
  8270 00002AFF 742D                <1>        je .ddmmyy
  8271 00002B01 EB00                <1>        jmp .end
  8272                              <1> 
  8273                              <1> .end:       
  8274 00002B03 30C0                <1>        xor al, al
  8275 00002B05 AA                  <1>        stosb
  8276 00002B06 61                  <1>        popa
  8277 00002B07 C3                  <1>        ret
  8278                              <1> 
  8279                              <1> .mmddyy:
  8280 00002B08 B02D                <1>        mov al, '-'
  8281 00002B0A 50                  <1>        push ax
  8282 00002B0B E83300              <1>        call .write_mm
  8283 00002B0E 58                  <1>        pop ax
  8284 00002B0F AA                  <1>        stosb
  8285 00002B10 50                  <1>        push ax
  8286 00002B11 E83800              <1>        call .write_dd
  8287 00002B14 58                  <1>        pop ax
  8288 00002B15 AA                  <1>        stosb
  8289 00002B16 E83E00              <1>        call .write_yy
  8290                              <1> 
  8291 00002B19 EBE8                <1>        jmp .end
  8292                              <1> 
  8293                              <1> .yymmdd:
  8294 00002B1B B02D                <1>        mov al, '-'
  8295 00002B1D 50                  <1>        push ax
  8296 00002B1E E83600              <1>        call .write_yy
  8297 00002B21 58                  <1>        pop ax
  8298 00002B22 AA                  <1>        stosb
  8299 00002B23 50                  <1>        push ax
  8300 00002B24 E81A00              <1>        call .write_mm
  8301 00002B27 58                  <1>        pop ax
  8302 00002B28 AA                  <1>        stosb
  8303 00002B29 E82000              <1>        call .write_dd
  8304                              <1> 
  8305 00002B2C EBD5                <1>        jmp .end
  8306                              <1> 
  8307                              <1> .ddmmyy:
  8308 00002B2E B02D                <1>        mov al, '-'
  8309 00002B30 50                  <1>        push ax
  8310 00002B31 E81800              <1>        call .write_dd
  8311 00002B34 58                  <1>        pop ax
  8312 00002B35 AA                  <1>        stosb
  8313 00002B36 50                  <1>        push ax
  8314 00002B37 E80700              <1>        call .write_mm
  8315 00002B3A 58                  <1>        pop ax
  8316 00002B3B AA                  <1>        stosb
  8317 00002B3C E81800              <1>        call .write_yy
  8318                              <1> 
  8319 00002B3F EBC2                <1>        jmp .end
  8320                              <1> 
  8321                              <1> .write_mm:
  8322 00002B41 0FB6C6              <1>        movzx ax, dh
  8323 00002B44 B102                <1>        mov cl, 2
  8324 00002B46 E80BFE              <1>        call bcd_to_str
  8325 00002B49 01CF                <1>        add di, cx
  8326 00002B4B C3                  <1>        ret
  8327                              <1> 
  8328                              <1> .write_dd:
  8329 00002B4C 0FB6C2              <1>        movzx ax, dl
  8330 00002B4F B102                <1>        mov cl, 2
  8331 00002B51 E800FE              <1>        call bcd_to_str
  8332 00002B54 01CF                <1>        add di, cx
  8333 00002B56 C3                  <1>        ret
  8334                              <1> 
  8335                              <1> .write_yy:
  8336 00002B57 89D8                <1>        mov ax, bx
  8337 00002B59 B104                <1>        mov cl, 4
  8338 00002B5B E8F6FD              <1>        call bcd_to_str
  8339 00002B5E 01CF                <1>        add di, cx
  8340 00002B60 C3                  <1>        ret
  8341                              <1> 
  8342                              <1> ;=============================================================================
  8343                              <1> ;calc_checksum ---- calculate the checksum of a data block.
  8344                              <1> ;input:
  8345                              <1> ;      ds:si -> start of the checksum area
  8346                              <1> ;      cx = checksum size
  8347                              <1> ;output:
  8348                              <1> ;      bl = the checksum value.
  8349                              <1> ;=============================================================================
  8350                              <1> calc_checksum:
  8351 00002B61 51                  <1>         push cx
  8352 00002B62 50                  <1>         push ax
  8353 00002B63 56                  <1>         push si
  8354 00002B64 30DB                <1>         xor bl, bl
  8355 00002B66 FC                  <1>         cld
  8356                              <1> .loop_calc:
  8357 00002B67 AC                  <1>         lodsb
  8358 00002B68 00C3                <1>         add bl, al
  8359 00002B6A E2FB                <1>         loop .loop_calc
  8360 00002B6C 5E                  <1>         pop si
  8361 00002B6D 58                  <1>         pop ax
  8362 00002B6E 59                  <1>         pop cx
  8363 00002B6F C3                  <1>         ret
  8364                              <1> 
  8365                              <1> ;=============================================================================
  8366                              <1> ; clear_memory ---- clear a memory block to zero
  8367                              <1> ; input:
  8368                              <1> ;	cx = size
  8369                              <1> ;	ds:di -> memory
  8370                              <1> ;=============================================================================
  8371                              <1> clear_memory:
  8372 00002B70 60                  <1> 	pusha
  8373 00002B71 06                  <1> 	push es
  8374 00002B72 1E                  <1> 	push ds
  8375 00002B73 07                  <1> 	pop es
  8376 00002B74 30C0                <1> 	xor al, al
  8377 00002B76 F3AA                <1> 	rep stosb
  8378 00002B78 07                  <1> 	pop es
  8379 00002B79 61                  <1> 	popa
  8380 00002B7A C3                  <1> 	ret 
  8381                              <1> 
  8382                                  %include "knl.asm"
  8383                              <1> ; asmsyntax=nasm
  8384                              <1> ;
  8385                              <1> ; knl.asm
  8386                              <1> ;
  8387                              <1> ; kernel functions for partition list
  8388                              <1> ;
  8389                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
  8390                              <1> ;
  8391                              <1> 
  8392                              <1> %define LIMIT_FLOPPY_NUMBER
  8393                              <1> 
  8394                              <1> %define NUM_OF_ID       (part_type.str_tbl - part_type.id_tbl)
  8395                              <1> %define NUM_OF_LOG_DENY (part_type.auto_act_tbl - part_type.log_deny_tbl)
  8396                              <1> %define NUM_OF_PRI_DENY (part_type.auto_act_tbl - part_type.pri_deny_tbl)
  8397                              <1> %define NUM_OF_AUTO_ACT (part_type.hidden_tbl - part_type.auto_act_tbl)
  8398                              <1> %define NUM_OF_HIDDEN   (part_type.end_of_tbl - part_type.hidden_tbl)
  8399                              <1> %define NUM_OF_ALLOW_HIDE (part_type.hidden_tbl - part_type.allow_hide_tbl)
  8400                              <1> 
  8401                              <1> ;%define NUM_OF_EXT      (part_type.log_deny_tbl - part_type.ext_tbl)
  8402                              <1> 
  8403                              <1> %define MAX_FLOPPY_NUM  2
  8404                              <1> 
  8405                              <1> ;==============================================================================
  8406                              <1> ;fill_bootrecord ---- fill the boot record for a partition
  8407                              <1> ;input:
  8408                              <1> ;      ebx   =  father's abs LBA address
  8409                              <1> ;      dh    =  partition id
  8410                              <1> ;      dl    =  drive id
  8411                              <1> ;      ds:si -> source partition record
  8412                              <1> ;      es:di -> buffer to store the boot record
  8413                              <1> ;output:
  8414                              <1> ;      es:di -> filled with boot record
  8415                              <1> ;==============================================================================
  8416                              <1> fill_bootrecord:
  8417 00002B7B 6660                <1>         pushad
  8418 00002B7D FC                  <1>         cld
  8419                              <1> 
  8420 00002B7E 57                  <1>         push di                                  ; clear the boot record
  8421 00002B7F 30C0                <1>         xor al, al                               ;
  8422 00002B81 B94000              <1>         mov cx, SIZE_OF_BOOTRECORD               ;
  8423 00002B84 F3AA                <1>         rep stosb                                ;
  8424 00002B86 5F                  <1>         pop di                                   ;
  8425                              <1>         
  8426 00002B87 895502              <1>         mov [di + struc_bootrecord.drive_id], dx ; fill the drive_id and
  8427                              <1>                                                  ; part_id
  8428 00002B8A 6689D9              <1>         mov ecx, ebx
  8429 00002B8D 66894D06            <1>         mov [di + struc_bootrecord.father_abs_addr], ecx
  8430                              <1> 
  8431 00002B91 8A7C04              <1>         mov bh, [si + struc_partition.type]
  8432                              <1> 
  8433 00002B94 E8200B              <1>         call get_drive_flags
  8434                              <1> 
  8435 00002B97 83E015              <1>         and ax, DRVFLAG_MASK                     ; set flags
  8436                              <1>         
  8437 00002B9A 08F6                <1>         or dh, dh                                ; check if it's a driver record
  8438 00002B9C 7507                <1>         jnz .is_partition
  8439 00002B9E 0D8000              <1>         or ax, INFOFLAG_ISDRIVER
  8440 00002BA1 30FF                <1>         xor bh, bh
  8441 00002BA3 EB0F                <1>         jmp short .set_other_flags
  8442                              <1> 
  8443                              <1> .is_partition:
  8444 00002BA5 6609C9              <1>         or ecx,ecx                               ;
  8445 00002BA8 7403                <1>         jz .not_logical                          ;
  8446 00002BAA 0D0001              <1>         or ax, INFOFLAG_LOGICAL                  ;
  8447                              <1>         
  8448                              <1> .not_logical:
  8449 00002BAD 3A14                <1>         cmp dl, [si + struc_partition.state]     ; test if it's active
  8450                              <1>                                                  ; should changed to
  8451                              <1>                                                  ; cmp 0x80, [xxx] ? 
  8452 00002BAF 7503                <1>         jne .set_other_flags
  8453 00002BB1 0D0008              <1>         or ax, INFOFLAG_ACTIVE
  8454                              <1> 
  8455                              <1> .set_other_flags:
  8456                              <1> 
  8457 00002BB4 51                  <1>         push cx                                  ;
  8458 00002BB5 57                  <1>         push di                                  ;
  8459                              <1> 
  8460 00002BB6 A98000              <1>         test ax, INFOFLAG_ISDRIVER
  8461 00002BB9 752E                <1>         jnz .not_hidden                          ;
  8462                              <1> 
  8463 00002BBB A90001              <1>         test ax, INFOFLAG_LOGICAL                ; ah = record flags
  8464 00002BBE 7513                <1>         jnz .not_auto_act                        ;
  8465                              <1> 
  8466 00002BC0 50                  <1>         push ax                                  ; check if it should
  8467 00002BC1 8D3E[A535]          <1>         lea di, [part_type.auto_act_tbl]         ; be marked as
  8468 00002BC5 B90800              <1>         mov cx, NUM_OF_AUTO_ACT                  ; auto active.
  8469 00002BC8 88F8                <1>         mov al, bh
  8470 00002BCA E8B1FB              <1>         call strchr                              ;
  8471 00002BCD 58                  <1>         pop ax                                   ;
  8472 00002BCE 7203                <1>         jc .not_auto_act                         ;
  8473                              <1> 
  8474 00002BD0 0D0010              <1>         or ax, INFOFLAG_AUTOACTIVE
  8475                              <1>         
  8476                              <1> .not_auto_act:                                   ;
  8477 00002BD3 50                  <1>         push ax                                  ; check if it's a
  8478 00002BD4 8D3E[AD35]          <1>         lea di, [part_type.hidden_tbl]           ; hidden partition.
  8479 00002BD8 B90700              <1>         mov cx, NUM_OF_HIDDEN                    ;
  8480 00002BDB 88F8                <1>         mov al, bh
  8481 00002BDD E89EFB              <1>         call strchr                              ;
  8482 00002BE0 58                  <1>         pop ax                                   ;
  8483 00002BE1 7206                <1>         jc .not_hidden                           ;
  8484                              <1> 
  8485 00002BE3 0D0002              <1>         or ax, INFOFLAG_HIDDEN                   ; set the hidden flag
  8486 00002BE6 80E70F              <1>         and bh, 0x0F                             ; clear the hidden signature
  8487                              <1>         
  8488                              <1> .not_hidden:
  8489 00002BE9 5F                  <1>         pop di
  8490 00002BEA 59                  <1>         pop cx
  8491                              <1> 
  8492 00002BEB 8905                <1>         mov [di + struc_bootrecord.flags], ax    ; fill the flags and type
  8493 00002BED 887D04              <1>         mov [di + struc_bootrecord.type], bh
  8494                              <1> 
  8495 00002BF0 A98000              <1>         test ax, INFOFLAG_ISDRIVER
  8496 00002BF3 7507                <1>         jnz .no_abs_addr                         ; if it's floppy, abs_addr = 0
  8497                              <1>         
  8498 00002BF5 668B5C08            <1>         mov ebx, [si + struc_partition.relative_addr]    ;
  8499                              <1> 
  8500 00002BF9 6601D9              <1>         add ecx, ebx                                     ; ecx = abs_address
  8501                              <1>         
  8502                              <1> .no_abs_addr:
  8503 00002BFC 66894D0A            <1>         mov [di + struc_bootrecord.abs_addr], ecx
  8504                              <1> 
  8505 00002C00 A98000              <1>         test ax, INFOFLAG_ISDRIVER
  8506 00002C03 7511                <1>         jnz .isdriver
  8507                              <1> 
  8508 00002C05 A90001              <1>         test ax, INFOFLAG_LOGICAL
  8509 00002C08 7406                <1>         jz .primary
  8510 00002C0A 8D36[5334]          <1>         lea si, [knl_strings.logical]               ; it's logical partition
  8511 00002C0E EB2B                <1>         jmp short .fill_name                              ;
  8512                              <1> .primary:
  8513 00002C10 8D36[4B34]          <1>         lea si, [knl_strings.primary]               ; it's primary partition
  8514 00002C14 EB25                <1>         jmp short .fill_name
  8515                              <1> 
  8516                              <1> .isdriver:
  8517 00002C16 80FA80              <1>         cmp dl, MIN_HD_ID
  8518 00002C19 721C                <1>         jb .floppy
  8519                              <1> 
  8520 00002C1B A90400              <1>         test ax, DRVFLAG_REMOVABLE
  8521 00002C1E 7411                <1>         jz .harddisk
  8522                              <1> 
  8523 00002C20 A91000              <1> 	test ax, DRVFLAG_ISCDROM
  8524 00002C23 7406                <1> 	jz .removable
  8525                              <1> 
  8526 00002C25 8D36[6E34]          <1> 	lea si, [knl_strings.cdrom]
  8527 00002C29 EB10                <1> 	jmp short .fill_name
  8528                              <1> 
  8529                              <1> .removable:
  8530 00002C2B 8D36[5B34]          <1>         lea si, [knl_strings.removable]
  8531 00002C2F EB0A                <1>         jmp short .fill_name
  8532                              <1> 
  8533                              <1> .harddisk:
  8534 00002C31 8D36[6534]          <1>         lea si, [knl_strings.harddisk]              ; it's hard drive
  8535 00002C35 EB04                <1>         jmp short .fill_name
  8536                              <1> 
  8537                              <1> .floppy:
  8538 00002C37 8D36[4434]          <1>         lea si, [knl_strings.floppy]                ; it's floppy drive
  8539                              <1> 
  8540                              <1> .fill_name:
  8541 00002C3B 83C716              <1>         add di, struc_bootrecord.name
  8542 00002C3E B90F00              <1>         mov cx, 15
  8543 00002C41 E84FFB              <1>         call strncpy
  8544                              <1> 
  8545 00002C44 A98000              <1>         test ax, INFOFLAG_ISDRIVER
  8546 00002C47 7509                <1>         jnz .end
  8547                              <1> 
  8548 00002C49 88F0                <1>         mov al, dh                                  ; append partition id
  8549 00002C4B 30E4                <1>         xor ah, ah                                  ; at the end of the
  8550 00002C4D B103                <1>         mov cl, 3                                   ; name
  8551 00002C4F E8B4FA              <1>         call itoa                                   ;
  8552                              <1> 
  8553                              <1> .end:
  8554 00002C52 6661                <1>         popad
  8555 00002C54 C3                  <1>         ret
  8556                              <1> 
  8557                              <1> ;==============================================================================
  8558                              <1> ;fill_special_record ---- fill the boot record for a special command
  8559                              <1> ;input:
  8560                              <1> ;      al = command id
  8561                              <1> ;      es:di -> buffer to store the boot record
  8562                              <1> ;output:
  8563                              <1> ;      es:di -> filled with boot record
  8564                              <1> ;==============================================================================
  8565                              <1> fill_special_record:
  8566 00002C55 60                  <1> 	pusha
  8567 00002C56 FC                  <1>         cld
  8568                              <1> 
  8569 00002C57 50                  <1> 	push ax
  8570 00002C58 57                  <1>         push di                                  ; clear the boot record
  8571 00002C59 30C0                <1>         xor al, al                               ;
  8572 00002C5B B94000              <1>         mov cx, SIZE_OF_BOOTRECORD               ;
  8573 00002C5E F3AA                <1>         rep stosb                                ;
  8574 00002C60 5F                  <1>         pop di                                   ;
  8575 00002C61 58                  <1> 	pop ax
  8576                              <1> 
  8577 00002C62 830D08              <1> 	or word [di + struc_bootrecord.flags], INFOFLAG_ISSPECIAL
  8578 00002C65 884504              <1> 	mov byte [di + struc_bootrecord.type], al
  8579 00002C68 83C716              <1> 	add di, struc_bootrecord.name
  8580                              <1> 
  8581 00002C6B 31F6                <1> 	xor si, si
  8582                              <1> 
  8583 00002C6D 3C02                <1> 	cmp al, SPREC_POWEROFF
  8584 00002C6F 7503                <1> 	jne .not_poweroff
  8585 00002C71 BE[7D34]            <1> 	mov si, knl_strings.poweroff
  8586                              <1> 
  8587                              <1> .not_poweroff:
  8588 00002C74 3C03                <1> 	cmp al, SPREC_RESTART
  8589 00002C76 7503                <1> 	jne .not_restart
  8590 00002C78 BE[8734]            <1> 	mov si, knl_strings.restart
  8591                              <1> 
  8592                              <1> .not_restart:
  8593 00002C7B 3C01                <1> 	cmp al, SPREC_QUIT
  8594 00002C7D 7503                <1> 	jne .not_quit
  8595 00002C7F BE[8E34]            <1> 	mov si, knl_strings.quit
  8596                              <1> 
  8597                              <1> .not_quit:
  8598 00002C82 3C00                <1> 	cmp al, SPREC_BOOTPREV
  8599 00002C84 7503                <1> 	jne .not_bootprev
  8600 00002C86 BE[9B34]            <1> 	mov si, knl_strings.bootprev
  8601                              <1> 
  8602                              <1> .not_bootprev:
  8603 00002C89 B90F00              <1> 	mov cx, 15
  8604 00002C8C E804FB              <1> 	call strncpy
  8605 00002C8F 61                  <1> 	popa
  8606 00002C90 C3                  <1> 	ret
  8607                              <1> 
  8608                              <1> ;==============================================================================
  8609                              <1> ;get_parttype_str ---- get partition type string
  8610                              <1> ;input:
  8611                              <1> ;      al = partition type
  8612                              <1> ;output:
  8613                              <1> ;      ds:si -> partition type string
  8614                              <1> ;==============================================================================
  8615                              <1> get_parttype_str:
  8616 00002C91 57                  <1>         push di
  8617 00002C92 51                  <1>         push cx
  8618 00002C93 8D3E[AF34]          <1>         lea di, [part_type.id_tbl]
  8619 00002C97 B91A00              <1>         mov cx, NUM_OF_ID
  8620 00002C9A E8E1FA              <1>         call strchr
  8621 00002C9D C1E103              <1>         shl cx, 3                   ; cx = cx * 8
  8622 00002CA0 8D36[C934]          <1>         lea si, [part_type.str_tbl]
  8623 00002CA4 01CE                <1>         add si, cx
  8624 00002CA6 59                  <1>         pop cx
  8625 00002CA7 5F                  <1>         pop di
  8626 00002CA8 C3                  <1>         ret
  8627                              <1> 
  8628                              <1> ;==============================================================================
  8629                              <1> ;check_bootrecord ---- check if the boot record is ok
  8630                              <1> ;input:
  8631                              <1> ;      ds:si -> boot record
  8632                              <1> ;output:
  8633                              <1> ;      cf = 0 the boot record is ok
  8634                              <1> ;      cf = 1 the boot record cannot boot
  8635                              <1> ;==============================================================================
  8636                              <1> check_bootrecord:
  8637 00002CA9 6660                <1>         pushad                           ; save registers
  8638 00002CAB 09F6                <1> 	or si, si
  8639 00002CAD 0F84F800            <1> 	jmpz .bad_record
  8640                              <1> 
  8641 00002CB1 FC                  <1>         cld
  8642                              <1> 
  8643                              <1> ;============= check special record ===========
  8644 00002CB2 8B04                <1>         mov ax, [si + struc_bootrecord.flags]        ; get record flags
  8645 00002CB4 A90800              <1> 	test ax, INFOFLAG_ISSPECIAL
  8646 00002CB7 0F842400            <1> 	jmpz .normal_record
  8647                              <1> 
  8648 00002CBB 8A5C04              <1> 	mov bl, [si + struc_bootrecord.type]
  8649 00002CBE 80FB04              <1> 	cmp bl, NUM_OF_SPREC
  8650 00002CC1 0F83E400            <1> 	jmpnb .bad_record
  8651                              <1> 
  8652 00002CC5 80FB02              <1> 	cmp bl, SPREC_POWEROFF
  8653 00002CC8 0F850600            <1> 	jmpne .check_prev
  8654                              <1> 
  8655 00002CCC E8B5FB              <1> 	call check_apm_bios
  8656 00002CCF E9D800              <1> 	jmp .end
  8657                              <1> 
  8658                              <1> .check_prev:
  8659 00002CD2 80FB00              <1> 	cmp bl, SPREC_BOOTPREV
  8660 00002CD5 0F85CD00            <1> 	jmpne .good_record
  8661                              <1> 
  8662 00002CD9 E84D07              <1> 	call check_prev_mbr
  8663 00002CDC E9CB00              <1> 	jmp .end
  8664                              <1> 
  8665                              <1> .normal_record:
  8666                              <1> ;============= check driver ===================
  8667 00002CDF 8B5402              <1>         mov dx, [si + struc_bootrecord.drive_id]     ; get drive id and part id
  8668 00002CE2 8D3E[E11F]          <1>         lea di, [hdio_tmp.driveinfo]
  8669 00002CE6 E8E808              <1>         call get_drive_info                          ; check if the drive ok
  8670 00002CE9 0F82BC00            <1>         jmpc .bad_record
  8671                              <1> 
  8672 00002CED 50                  <1>         push ax
  8673 00002CEE 8A6501              <1>         mov ah, [di + struc_driveinfo.flags]         ;
  8674 00002CF1 251515              <1>         and ax, ( DRVFLAG_MASK << 8) | DRVFLAG_MASK  ; check if the flags was
  8675 00002CF4 38E0                <1>         cmp al, ah                                   ; changed
  8676 00002CF6 58                  <1>         pop ax                                       ;
  8677 00002CF7 0F85AE00            <1>         jmpne .bad_record
  8678                              <1> 
  8679 00002CFB A98000              <1>         test ax, INFOFLAG_ISDRIVER                   ; if it's a driver then ok
  8680 00002CFE 0F85A400            <1>         jmpnz .good_record
  8681                              <1> 
  8682                              <1> ;============ check partition =================
  8683                              <1> ; now we know it's a partiton!
  8684 00002D02 8A5C04              <1>         mov bl, [si + struc_bootrecord.type]
  8685 00002D05 08DB                <1>         or bl, bl                                    
  8686 00002D07 0F849E00            <1>         jmpz .bad_record                               ; it's free, bad!
  8687                              <1> 
  8688                              <1> .not_free:
  8689 00002D0B A90001              <1>         test ax, INFOFLAG_LOGICAL                    ; it's logical partition
  8690 00002D0E 7509                <1>         jnz .logical_part                            ;
  8691                              <1> 
  8692 00002D10 B90400              <1>         mov cx, NUM_OF_PRI_DENY                      ;
  8693 00002D13 8D3E[A135]          <1>         lea di, [part_type.pri_deny_tbl]             ;
  8694 00002D17 EB07                <1>         jmp short .check_type                        ; check if the partition
  8695                              <1> 
  8696                              <1> .logical_part:                                       ; type is in the deny
  8697 00002D19 B90400              <1>         mov cx, NUM_OF_LOG_DENY                      ; table
  8698 00002D1C 8D3E[A135]          <1>         lea di, [part_type.log_deny_tbl]             ;
  8699                              <1> 
  8700                              <1> .check_type:                                         ;
  8701 00002D20 50                  <1>         push ax
  8702 00002D21 88D8                <1>         mov al, bl                                   ; al = partition type
  8703 00002D23 E858FA              <1>         call strchr                                  ;
  8704 00002D26 58                  <1>         pop ax
  8705 00002D27 0F837E00            <1>         jmpnc .bad_record                              ; this type is denied!
  8706                              <1> 
  8707                              <1> ;================ check in father ===================        
  8708                              <1> ; read father's partition table into buffer and check it
  8709 00002D2B 50                  <1>         push ax                                      ; save flags
  8710                              <1> 
  8711 00002D2C 668B5C06            <1>         mov ebx, [si + struc_bootrecord.father_abs_addr]
  8712                              <1> 
  8713 00002D30 B80102              <1>         mov ax, (INT13H_READ << 8 ) | 0x01           ; read the first sector
  8714 00002D33 8D3E[0720]          <1>         lea di, [knl_tmp.disk_buf1]                           ; into buffer
  8715 00002D37 E83B0A              <1>         call disk_access                             ;
  8716 00002D3A 58                  <1>         pop ax                                       ; load flags
  8717 00002D3B 0F826A00            <1>         jmpc .bad_record
  8718                              <1> 
  8719 00002D3F 81BDFE0155AA        <1>         cmp word [di + BR_FLAG_OFF], BR_GOOD_FLAG    ; check if the father is
  8720 00002D45 7562                <1>         jne .bad_record                              ; good
  8721                              <1> 
  8722 00002D47 668B4C0A            <1>         mov ecx, [si + struc_bootrecord.abs_addr]    ; get partition's abs addr
  8723 00002D4B 6629D9              <1>         sub ecx, ebx                                 ; calculate relative address
  8724 00002D4E 6689CB              <1> 	mov ebx, ecx
  8725                              <1> 
  8726 00002D51 81C7BE01            <1>         add di, PART_TBL_OFF                         ; point to father's partition
  8727                              <1>                                                      ; table
  8728 00002D55 B90400              <1>         mov cx, 4
  8729                              <1>         
  8730                              <1> .search_in_father:                                   ; find the record in
  8731 00002D58 807D0400            <1> 	cmp byte [di + struc_partition.type], 0      ;
  8732 00002D5C 7406                <1> 	je .invalid_entry
  8733 00002D5E 66395D08            <1>         cmp [di + struc_partition.relative_addr], ebx; father's partition
  8734 00002D62 7407                <1>         je .found_it     
  8735                              <1> .invalid_entry:                                      ; table
  8736 00002D64 83C710              <1>         add di, SIZE_OF_PARTITION                    ;
  8737 00002D67 E2EF                <1>         loop .search_in_father                       ;
  8738 00002D69 EB3E                <1>         jmp .bad_record                        ; not found! it's bad.
  8739                              <1>         
  8740                              <1> .found_it:
  8741                              <1> 
  8742                              <1> ;adjust some flags of the boot record.
  8743                              <1> ;there is no other place to suit these codes,
  8744                              <1> ;so I place them here :-(
  8745                              <1> 
  8746 00002D6B 50                  <1>         push ax                                      ;
  8747 00002D6C 57                  <1>         push di                                      ; hidden partition
  8748 00002D6D 8A5D04              <1>         mov bl, [di + struc_partition.type]          ; check if it's a
  8749 00002D70 88D8                <1>         mov al, bl                                   ;
  8750 00002D72 8D3E[AD35]          <1>         lea di, [part_type.hidden_tbl]               ;
  8751 00002D76 B90700              <1>         mov cx, NUM_OF_HIDDEN                        ;
  8752 00002D79 E802FA              <1>         call strchr                                  ;
  8753 00002D7C 5F                  <1>         pop di                                       ;
  8754 00002D7D 58                  <1>         pop ax                                       ;
  8755 00002D7E 7208                <1>         jc .not_hidden                               ;
  8756 00002D80 80E30F              <1>         and bl, 0x0F
  8757 00002D83 0D0002              <1>         or ax, INFOFLAG_HIDDEN                       ; set hidden flag.
  8758 00002D86 EB03                <1>         jmp short .validate_type
  8759                              <1> 
  8760                              <1> .not_hidden:
  8761 00002D88 25FFFD              <1>         and ax, ~ INFOFLAG_HIDDEN                    ; clear hidden flag.
  8762                              <1> 
  8763                              <1> .validate_type:
  8764                              <1> 
  8765                              <1> %ifdef STRICT_PART_CHECK
  8766                              <1>         cmp bl, [si + struc_bootrecord.type]         ; check the partition type
  8767                              <1>         jne .bad_record                              ; wrong type!
  8768                              <1> %else
  8769 00002D8B 885C04              <1> 	mov [si + struc_bootrecord.type], bl         ; set partition type
  8770                              <1> %endif
  8771                              <1> 
  8772                              <1> .type_ok:
  8773 00002D8E 52                  <1>         push dx
  8774 00002D8F A90020              <1>         test ax, INFOFLAG_SWAPDRVID                  ; check if swap driver id
  8775 00002D92 7403                <1>         jz .no_swapid
  8776 00002D94 80E280              <1>         and dl, 0x80
  8777                              <1> 
  8778                              <1> .no_swapid:
  8779 00002D97 3A15                <1>         cmp dl, [di + struc_partition.state]         ; check if the partition
  8780 00002D99 5A                  <1>         pop dx
  8781 00002D9A 7505                <1>         jne .not_active                              ; is active.
  8782 00002D9C 0D0008              <1>         or ax, INFOFLAG_ACTIVE                       ; should change to
  8783 00002D9F EB03                <1>         jmp short .adjust_flags                      ; cmp 0x80, byte [state] ?
  8784                              <1> 
  8785                              <1> .not_active:
  8786 00002DA1 25FFF7              <1>         and ax, ~ INFOFLAG_ACTIVE
  8787                              <1> 
  8788                              <1> .adjust_flags:
  8789 00002DA4 8904                <1>         mov [si + struc_bootrecord.flags], ax
  8790                              <1> 
  8791                              <1> ;==================  check partition itself ==============
  8792                              <1> .check_inside:                                       ; check partition itself
  8793                              <1> 
  8794                              <1> %ifdef STRICT_PART_CHECK
  8795                              <1>         mov ebx, [si + struc_bootrecord.abs_addr]
  8796                              <1> 
  8797                              <1>         lea di, [knl_tmp.disk_buf1]
  8798                              <1>         mov ax, (INT13H_READ << 8 ) | 0x01           ; read the first sector
  8799                              <1>         call disk_access                             ; into buffer
  8800                              <1>         jc .bad_record                               ; read error!
  8801                              <1>         
  8802                              <1>         cmp word [di + BR_FLAG_OFF], BR_GOOD_FLAG    ; check if the paritition
  8803                              <1>         jne .bad_record                              ; is good
  8804                              <1> %endif
  8805                              <1> 
  8806                              <1> .good_record:
  8807 00002DA6 F8                  <1>         clc
  8808 00002DA7 EB01                <1>         jmp short .end
  8809                              <1> 
  8810                              <1> .bad_record:
  8811 00002DA9 F9                  <1>         stc
  8812                              <1> .end:
  8813 00002DAA 6661                <1>         popad
  8814 00002DAC C3                  <1>         ret
  8815                              <1> 
  8816                              <1> ;==============================================================================
  8817                              <1> ;search_drv_records ---- search all driver records 
  8818                              <1> ;input:
  8819                              <1> ;      dl = beginning driver id.
  8820                              <1> ;      cl = max number of boot records could be searched
  8821                              <1> ;      es:di -> buffer to store boot records. 
  8822                              <1> ;output:
  8823                              <1> ;      ch = number of the valid boot records have searched
  8824                              <1> ;==============================================================================
  8825                              <1> search_drv_records:
  8826 00002DAD 30ED                <1>        xor ch, ch
  8827 00002DAF 882E[EC1F]          <1>        mov [knl_tmp.good_record_num], ch
  8828 00002DB3 880E[ED1F]          <1>        mov [knl_tmp.max_record_num], cl
  8829 00002DB7 882E[F31F]          <1>        mov [knl_tmp.floppy_num], ch
  8830 00002DBB 08C9                <1>        or cl, cl 
  8831 00002DBD 7501                <1>        jnz .can_search_more
  8832 00002DBF C3                  <1>        ret
  8833                              <1> 
  8834                              <1> .can_search_more:
  8835 00002DC0 60                  <1>        pusha
  8836 00002DC1 6631DB              <1>        xor ebx, ebx
  8837 00002DC4 30F6                <1>        xor dh, dh
  8838                              <1> 
  8839                              <1> .loop_search:
  8840 00002DC6 E8EE08              <1>        call get_drive_flags
  8841 00002DC9 722C                <1>        jc .search_next
  8842                              <1> 
  8843 00002DCB A801                <1>        test al, DRVFLAG_DRIVEOK
  8844 00002DCD 7228                <1>        jc .search_next
  8845                              <1> 
  8846                              <1> %ifdef LIMIT_FLOPPY_NUMBER
  8847 00002DCF 80FA80              <1>        cmp dl, MIN_HD_ID
  8848 00002DD2 730F                <1>        jae .isharddisk
  8849 00002DD4 A804                <1>        test al, DRVFLAG_REMOVABLE
  8850 00002DD6 740B                <1>        jz .isharddisk
  8851                              <1> 
  8852 00002DD8 FE06[F31F]          <1>        inc byte [knl_tmp.floppy_num]
  8853 00002DDC 803E[F31F]02        <1>        cmp byte [knl_tmp.floppy_num], MAX_FLOPPY_NUM
  8854 00002DE1 7714                <1>        ja .search_next
  8855                              <1> 
  8856                              <1> .isharddisk:
  8857                              <1> %endif
  8858                              <1> 
  8859 00002DE3 E895FD              <1>        call fill_bootrecord
  8860 00002DE6 FE06[EC1F]          <1>        inc byte [knl_tmp.good_record_num]
  8861 00002DEA 8A26[EC1F]          <1>        mov ah, [knl_tmp.good_record_num]                ; check if there are any
  8862 00002DEE 3A26[ED1F]          <1>        cmp ah, [knl_tmp.max_record_num]                 ; more space.
  8863 00002DF2 7309                <1>        jae .end
  8864                              <1> 
  8865 00002DF4 83C740              <1>        add di, SIZE_OF_BOOTRECORD
  8866                              <1> 
  8867                              <1> .search_next:
  8868 00002DF7 FEC2                <1>        inc dl
  8869 00002DF9 08D2                <1>        or dl, dl
  8870 00002DFB 75C9                <1>        jnz .loop_search
  8871                              <1> 
  8872                              <1> .end:
  8873 00002DFD 61                  <1>        popa
  8874 00002DFE 8A2E[EC1F]          <1>        mov ch, [knl_tmp.good_record_num]
  8875 00002E02 C3                  <1>        ret
  8876                              <1> 
  8877                              <1> 
  8878                              <1> ;==============================================================================
  8879                              <1> ;search_part_records ---- search all boot records in a drive
  8880                              <1> ;input:
  8881                              <1> ;      dl = drive id
  8882                              <1> ;      cl = max number of boot records could be searched
  8883                              <1> ;      es:di -> buffer to store boot records
  8884                              <1> ;output:
  8885                              <1> ;      ch = number of the valid boot records have searched
  8886                              <1> ;==============================================================================
  8887                              <1> search_part_records:
  8888 00002E03 30ED                <1>         xor ch, ch
  8889 00002E05 882E[EC1F]          <1>         mov [knl_tmp.good_record_num], ch
  8890 00002E09 880E[ED1F]          <1>         mov [knl_tmp.max_record_num], cl
  8891 00002E0D 08C9                <1>         or cl, cl
  8892 00002E0F 7501                <1>         jnz .can_search_more                         ; check if there are any
  8893 00002E11 C3                  <1>         ret                                          ; space to search more.
  8894                              <1>         
  8895                              <1> .can_search_more:
  8896 00002E12 60                  <1>         pusha
  8897                              <1> 
  8898 00002E13 6631DB              <1>         xor ebx, ebx                                 ; clear some stuff
  8899 00002E16 30F6                <1>         xor dh, dh                                   ;
  8900                              <1> 
  8901 00002E18 E89C08              <1>         call get_drive_flags                         ; get the drive flags.
  8902 00002E1B 0F82A400            <1>         jmpc .end
  8903                              <1>         
  8904 00002E1F A804                <1>         test al, DRVFLAG_REMOVABLE                  ; check if it's a floppy
  8905 00002E21 0F859E00            <1>         jmpnz .end
  8906 00002E25 A810                <1> 	test al, DRVFLAG_ISCDROM
  8907 00002E27 0F859800            <1> 	jmpnz .end
  8908                              <1> 
  8909                              <1> ;search partitions
  8910                              <1> .search_partitions:
  8911 00002E2B 57                  <1>         push di
  8912 00002E2C 8D3E[0728]          <1>         lea di, [knl_tmp.disk_buf2]
  8913 00002E30 89FE                <1>         mov si, di
  8914 00002E32 B80102              <1>         mov ax, (INT13H_READ << 8 ) | 0x01           ; read the first sector
  8915 00002E35 E83D09              <1>         call disk_access                             ; into buffer
  8916 00002E38 5F                  <1>         pop di
  8917 00002E39 0F828600            <1>         jmpc .end
  8918                              <1>         
  8919 00002E3D 81BCFE0155AA        <1>         cmp word [si + BR_FLAG_OFF], BR_GOOD_FLAG    ; check if the partition
  8920 00002E43 0F857C00            <1>         jmpne .end                                   ; table is good
  8921                              <1>         
  8922 00002E47 81C6BE01            <1>         add si, PART_TBL_OFF                         ; point to partition table
  8923                              <1>         
  8924 00002E4B 30C0                <1>         xor al, al
  8925                              <1> 
  8926                              <1> .loop_search_part:
  8927 00002E4D FEC0                <1>         inc al
  8928                              <1> 
  8929 00002E4F 6609DB              <1>         or ebx, ebx                                  ; check if it's primary
  8930 00002E52 7508                <1>         jnz .logical_part
  8931                              <1>         
  8932 00002E54 88C6                <1>         mov dh, al                                   ;
  8933 00002E56 8836[EE1F]          <1>         mov [knl_tmp.part_id], dh                        ;
  8934 00002E5A EB04                <1>         jmp short .cont_fill_it                      ; get the partition id
  8935                              <1>                                                      ;
  8936                              <1> .logical_part:                                       ;
  8937 00002E5C 8A36[EE1F]          <1>         mov dh, [knl_tmp.part_id]                        ;
  8938                              <1>         
  8939                              <1> .cont_fill_it:
  8940 00002E60 E818FD              <1>         call fill_bootrecord                         ; fill the boot record
  8941 00002E63 87F7                <1>         xchg si, di
  8942 00002E65 E841FE              <1>         call check_bootrecord                        ; check if it's valid
  8943 00002E68 87F7                <1>         xchg si, di
  8944 00002E6A 7211                <1>         jc .cont_search_part
  8945                              <1> 
  8946                              <1> ; find a valid boot record!
  8947                              <1> 
  8948 00002E6C FE06[EC1F]          <1>         inc byte [knl_tmp.good_record_num]
  8949 00002E70 8A26[EC1F]          <1>         mov ah, [knl_tmp.good_record_num]                ; check if there are any
  8950 00002E74 3A26[ED1F]          <1>         cmp ah, [knl_tmp.max_record_num]                 ; more space.
  8951 00002E78 7349                <1>         jae .end
  8952                              <1> 
  8953 00002E7A 83C740              <1>         add di, SIZE_OF_BOOTRECORD                   ; move the pointer to
  8954                              <1> 
  8955                              <1> .cont_search_part:
  8956 00002E7D 83C610              <1>         add si, SIZE_OF_PARTITION
  8957 00002E80 3C04                <1>         cmp al, 4
  8958 00002E82 72C9                <1>         jb .loop_search_part
  8959                              <1>         
  8960 00002E84 83EE40              <1>         sub si, SIZE_OF_PARTITION * 4
  8961                              <1>         
  8962                              <1> ;now go ahead to search logical partitons
  8963 00002E87 30E4                <1>         xor ah, ah
  8964                              <1> 
  8965                              <1> .loop_search_ext:
  8966 00002E89 FEC4                <1>         inc ah
  8967 00002E8B 8A4404              <1>         mov al, [si + struc_partition.type]
  8968                              <1>         
  8969 00002E8E 3C05                <1>         cmp al, 0x05                                 ; check if it's
  8970 00002E90 7412                <1>         je .found_ext                                ; extended
  8971 00002E92 3C0F                <1>         cmp al, 0x0F                                 ; partition
  8972 00002E94 740E                <1>         je .found_ext                                ;
  8973 00002E96 3C85                <1>         cmp al, 0x85                                 ;
  8974 00002E98 740A                <1>         je .found_ext                                ;
  8975                              <1> 
  8976 00002E9A 83C610              <1>         add si, SIZE_OF_PARTITION
  8977 00002E9D 80FC04              <1>         cmp ah, 4
  8978 00002EA0 72E7                <1>         jb .loop_search_ext
  8979 00002EA2 EB1F                <1>         jmp short .end
  8980                              <1> 
  8981                              <1> ;there are some extended partitions, find inside it!
  8982                              <1> .found_ext:
  8983 00002EA4 FE06[EE1F]          <1>         inc byte [knl_tmp.part_id]                       ; increase the partition id.
  8984 00002EA8 668B4C08            <1> 	mov ecx, [si + struc_partition.relative_addr]
  8985                              <1> 
  8986 00002EAC 6609DB              <1>         or ebx, ebx                                  ; all of the later logical
  8987 00002EAF 7407                <1>         jz .first_ext                                ; extended partitions' relative
  8988 00002EB1 668B1E[EF1F]        <1>         mov ebx, [knl_tmp.logi_father]                   ; address are based on the
  8989 00002EB6 EB05                <1>         jmp short .calc_next_father                  ; first primary extended
  8990                              <1>                                                      ; partition
  8991                              <1> .first_ext:
  8992 00002EB8 66890E[EF1F]        <1>         mov [knl_tmp.logi_father], ecx
  8993                              <1> 
  8994                              <1> .calc_next_father:
  8995 00002EBD 6601CB              <1>         add ebx, ecx                                 ; calculate the next
  8996                              <1>                                                      ; father's abs
  8997                              <1>                                                      ; address
  8998                              <1>         
  8999 00002EC0 E968FF              <1>         jmp .search_partitions                       ; continue search
  9000                              <1> 
  9001                              <1> .end:
  9002 00002EC3 61                  <1>         popa
  9003 00002EC4 8A2E[EC1F]          <1>         mov ch, [knl_tmp.good_record_num]
  9004 00002EC8 C3                  <1>         ret
  9005                              <1>         
  9006                              <1> ;==============================================================================
  9007                              <1> ;search_specials ---- search all special boot records
  9008                              <1> ;input:
  9009                              <1> ;      cl = max number of boot records could be searched
  9010                              <1> ;      es:di -> buffer to store boot records
  9011                              <1> ;output:
  9012                              <1> ;      ch = number of the valid boot records have searched
  9013                              <1> ;==============================================================================
  9014                              <1> search_specials:
  9015 00002EC9 50                  <1> 	push ax
  9016 00002ECA 52                  <1> 	push dx
  9017 00002ECB 56                  <1> 	push si
  9018                              <1> 
  9019 00002ECC 88CC                <1> 	mov ah, cl
  9020 00002ECE 80FC04              <1> 	cmp ah, NUM_OF_SPREC
  9021 00002ED1 7202                <1> 	jb .do_search
  9022 00002ED3 B404                <1> 	mov ah, NUM_OF_SPREC
  9023                              <1> 
  9024                              <1> .do_search:
  9025 00002ED5 30ED                <1> 	xor ch, ch
  9026 00002ED7 30C0                <1> 	xor al, al
  9027 00002ED9 08E4                <1> 	or ah, ah
  9028 00002EDB 7415                <1> 	jz .end
  9029                              <1> 
  9030                              <1> .loop_search:
  9031 00002EDD E875FD              <1> 	call fill_special_record
  9032 00002EE0 89FE                <1> 	mov si, di
  9033 00002EE2 E8C4FD              <1> 	call check_bootrecord
  9034 00002EE5 7205                <1> 	jc .search_next
  9035 00002EE7 83C740              <1> 	add di, SIZE_OF_BOOTRECORD
  9036 00002EEA FEC5                <1> 	inc ch
  9037                              <1> .search_next:
  9038 00002EEC FEC0                <1> 	inc al
  9039 00002EEE 38E0                <1> 	cmp al, ah
  9040 00002EF0 72EB                <1> 	jb .loop_search
  9041                              <1> .end:
  9042 00002EF2 5E                  <1> 	pop si
  9043 00002EF3 5A                  <1> 	pop dx
  9044 00002EF4 58                  <1> 	pop ax
  9045 00002EF5 C3                  <1> 	ret
  9046                              <1> 
  9047                              <1> ;==============================================================================
  9048                              <1> ;search_records ---- search all boot records
  9049                              <1> ;input:
  9050                              <1> ;      al = 0 all records, al = 1 only partitions
  9051                              <1> ;      cl = max number of boot records could be searched
  9052                              <1> ;      es:di -> buffer to store boot records
  9053                              <1> ;output:
  9054                              <1> ;      ch = number of the valid boot records have searched
  9055                              <1> ;==============================================================================
  9056                              <1> search_records:
  9057 00002EF6 57                  <1> 	push di
  9058 00002EF7 52                  <1> 	push dx
  9059 00002EF8 53                  <1> 	push bx
  9060 00002EF9 50                  <1> 	push ax
  9061                              <1> 
  9062 00002EFA 31D2                <1>         xor dx, dx
  9063                              <1> 
  9064 00002EFC 08C0                <1> 	or al, al
  9065 00002EFE 7516                <1> 	jnz .search_parts
  9066                              <1> 
  9067 00002F00 E8C6FF              <1> 	call search_specials
  9068 00002F03 28E9                <1> 	sub cl, ch
  9069 00002F05 88EE                <1> 	mov dh, ch
  9070                              <1> 
  9071 00002F07 B340                <1>         mov bl, SIZE_OF_BOOTRECORD
  9072                              <1> 
  9073 00002F09 E8A1FE              <1>         call search_drv_records
  9074 00002F0C 28E9                <1>         sub cl, ch
  9075 00002F0E 88E8                <1>         mov al, ch
  9076 00002F10 00EE                <1> 	add dh, ch
  9077 00002F12 F6E3                <1>         mul bl
  9078 00002F14 01C7                <1>         add di, ax
  9079                              <1> 
  9080                              <1> .search_parts:
  9081 00002F16 E80700              <1> 	call search_all_partitions
  9082 00002F19 00F5                <1> 	add ch, dh
  9083 00002F1B 58                  <1> 	pop ax
  9084 00002F1C 5B                  <1> 	pop bx
  9085 00002F1D 5A                  <1> 	pop dx
  9086 00002F1E 5F                  <1> 	pop di
  9087 00002F1F C3                  <1> 	ret
  9088                              <1> 
  9089                              <1> ;==============================================================================
  9090                              <1> ;search_all_partitions ---- search all partitions in all drives
  9091                              <1> ;input:
  9092                              <1> ;      cl = max number of boot records could be searched
  9093                              <1> ;      dl = lowest drive id to be searched
  9094                              <1> ;      es:di -> buffer to store boot records
  9095                              <1> ;output:
  9096                              <1> ;      ch = number of the valid boot records have searched
  9097                              <1> ;==============================================================================
  9098                              <1> search_all_partitions:
  9099 00002F20 50                  <1>         push ax
  9100 00002F21 52                  <1> 	push dx
  9101 00002F22 30F6                <1> 	xor dh, dh
  9102 00002F24 B340                <1>         mov bl, SIZE_OF_BOOTRECORD
  9103                              <1> 
  9104                              <1> .loop_search:
  9105 00002F26 E8DAFE              <1>         call search_part_records
  9106 00002F29 28E9                <1>         sub cl, ch
  9107 00002F2B 00EE                <1>         add dh, ch                                   ; count the searched boot
  9108                              <1>                                                      ; records
  9109 00002F2D 88E8                <1>         mov al, ch                                   ;
  9110 00002F2F F6E3                <1>         mul bl                                       ; adjust the pointer (di)
  9111 00002F31 01C7                <1>         add di, ax                                   ;
  9112 00002F33 FEC2                <1>         inc dl
  9113 00002F35 08D2                <1>         or dl, dl
  9114 00002F37 75ED                <1>         jnz .loop_search
  9115 00002F39 88F5                <1>         mov ch, dh
  9116 00002F3B 5A                  <1> 	pop dx
  9117 00002F3C 58                  <1>         pop ax
  9118 00002F3D C3                  <1>         ret
  9119                              <1> 
  9120                              <1> 
  9121                              <1> ;==============================================================================
  9122                              <1> ;get_record_typestr ---- get a record's type string
  9123                              <1> ;input:
  9124                              <1> ;      ds:si -> the record
  9125                              <1> ;      es:di -> the buffer to store the type string
  9126                              <1> ;output:
  9127                              <1> ;      none
  9128                              <1> ;==============================================================================
  9129                              <1> get_record_typestr:
  9130 00002F3E 60                  <1>         pusha
  9131 00002F3F 8B04                <1>         mov ax, [si + struc_bootrecord.flags]
  9132 00002F41 8A5C04              <1>         mov bl, [si + struc_bootrecord.type]
  9133 00002F44 8B5402              <1>         mov dx, [si + struc_bootrecord.drive_id]
  9134                              <1> 
  9135 00002F47 A90800              <1> 	test ax, INFOFLAG_ISSPECIAL
  9136 00002F4A 751A                <1> 	jnz .special
  9137                              <1> 
  9138 00002F4C A98000              <1>         test ax, INFOFLAG_ISDRIVER
  9139 00002F4F 7430                <1>         jz .partition
  9140                              <1> 
  9141 00002F51 A90400              <1>         test ax, DRVFLAG_REMOVABLE
  9142 00002F54 741C                <1>         jz .harddisk
  9143                              <1> 
  9144 00002F56 F6C280              <1>         test dl, 0x80
  9145 00002F59 741D                <1>         jz .floppy
  9146                              <1> 
  9147 00002F5B A91000              <1> 	test ax, DRVFLAG_ISCDROM
  9148 00002F5E 740C                <1> 	jz .removable
  9149                              <1> 
  9150 00002F60 8D36[6E34]          <1> 	lea si, [knl_strings.cdrom]
  9151 00002F64 EB16                <1> 	jmp short .filldrv
  9152                              <1> 
  9153                              <1> .special:
  9154 00002F66 8D36[7534]          <1> 	lea si, [knl_strings.special]
  9155 00002F6A EB10                <1> 	jmp short .filldrv
  9156                              <1> 
  9157                              <1> .removable:
  9158 00002F6C 8D36[5B34]          <1>         lea si, [knl_strings.removable]
  9159 00002F70 EB0A                <1>         jmp short .filldrv
  9160                              <1> 
  9161                              <1> .harddisk:
  9162 00002F72 8D36[6534]          <1>         lea si, [knl_strings.harddisk]
  9163 00002F76 EB04                <1>         jmp short .filldrv
  9164                              <1> 
  9165                              <1> .floppy:
  9166 00002F78 8D36[4434]          <1>         lea si, [knl_strings.floppy]
  9167                              <1> 
  9168                              <1> .filldrv:
  9169 00002F7C E82EF8              <1>         call strcpy
  9170 00002F7F EB27                <1>         jmp short .end
  9171                              <1> 
  9172                              <1> .partition:
  9173 00002F81 A90001              <1>         test ax, INFOFLAG_LOGICAL
  9174 00002F84 7406                <1>         jz short .primary
  9175                              <1> 
  9176 00002F86 8D36[5334]          <1>         lea si, [knl_strings.logical]
  9177 00002F8A EB04                <1>         jmp short .fillpart
  9178                              <1> 
  9179                              <1> .primary:
  9180 00002F8C 8D36[4B34]          <1>         lea si, [knl_strings.primary]
  9181                              <1> 
  9182                              <1> .fillpart:
  9183 00002F90 E81AF8              <1>         call strcpy
  9184                              <1> 
  9185 00002F93 C7052028            <1>         mov word [di], ' ('
  9186 00002F97 47                  <1>         inc di
  9187 00002F98 47                  <1>         inc di
  9188                              <1> 
  9189 00002F99 88D8                <1>         mov al, bl
  9190 00002F9B E8F3FC              <1>         call get_parttype_str
  9191 00002F9E E80CF8              <1>         call strcpy
  9192 00002FA1 C60529              <1>         mov byte [di], ')'
  9193 00002FA4 47                  <1>         inc di
  9194 00002FA5 30C0                <1>         xor al, al
  9195 00002FA7 AA                  <1>         stosb
  9196                              <1> 
  9197                              <1> .end:
  9198 00002FA8 61                  <1>         popa
  9199 00002FA9 C3                  <1>         ret
  9200                              <1> 
  9201                              <1> ;==============================================================================
  9202                              <1> ;get_record_string ---- get a record's string
  9203                              <1> ;input:
  9204                              <1> ;      ds:si -> the record
  9205                              <1> ;      es:di -> buffer to store the string
  9206                              <1> ;      al =1    don't draw flags
  9207                              <1> ;      al =2    don't draw flags and number
  9208                              <1> ;      al =3    don't draw flags and type
  9209                              <1> ;
  9210                              <1> ;output:
  9211                              <1> ;      none
  9212                              <1> ;
  9213                              <1> ;notes:
  9214                              <1> ; the string layout is:
  9215                              <1> ; pSkXaAhHlD  128 01  (Type )  Partition Name.
  9216                              <1> ; where :
  9217                              <1> ; p  is password flag, means have password.
  9218                              <1> ; S  is schedule flag, means have boot schedule set.
  9219                              <1> ; k  is keystrokes flag, means have keystrokes set.
  9220                              <1> ; X  is swap driver id flag, means the driver id will be swap to the bootable
  9221                              <1> ;    id when boot this record.
  9222                              <1> ; aA is active flags, a means auto active, A means active
  9223                              <1> ; hH is hidden flags, h means auto hide, H means hidden
  9224                              <1> ; lD is other flags, L means it's Logical Partition, D means it's Disk Driver 
  9225                              <1> ; 128 is the drive id
  9226                              <1> ; 01 is the partition id
  9227                              <1> ; (Type ) is the type of this partition, 7 bytes
  9228                              <1> ; Partition Name is the name of this partition, 15 bytes
  9229                              <1> ;==============================================================================
  9230                              <1> get_record_string:
  9231 00002FAA 60                  <1>         pusha
  9232 00002FAB FC                  <1>         cld
  9233                              <1> 
  9234 00002FAC 668B4C0E            <1>         mov ecx, [si + struc_bootrecord.password]
  9235 00002FB0 8B1C                <1>         mov bx, [si + struc_bootrecord.flags]
  9236                              <1> 
  9237 00002FB2 88C4                <1> 	mov ah, al
  9238                              <1> 
  9239 00002FB4 B020                <1> 	mov al, ' '
  9240 00002FB6 AA                  <1> 	stosb
  9241                              <1> 
  9242 00002FB7 08E4                <1>         or ah, ah
  9243 00002FB9 752C                <1>         jnz .no_flags
  9244 00002FBB 50                  <1> 	push ax
  9245                              <1> 
  9246                              <1> ;show flags
  9247                              <1> 
  9248 00002FBC B02D                <1>         mov al, '-'
  9249                              <1> 
  9250 00002FBE 50                  <1>         push ax
  9251 00002FBF 6609C9              <1>         or ecx, ecx                                 ; check if has password.
  9252 00002FC2 7402                <1>         jz .no_password
  9253 00002FC4 B070                <1>         mov al, 'p'                                 ; has password, draw a 'p'.
  9254                              <1> .no_password:
  9255 00002FC6 AA                  <1>         stosb
  9256 00002FC7 58                  <1>         pop ax
  9257                              <1> 
  9258 00002FC8 56                  <1>         push si
  9259 00002FC9 BA0080              <1>         mov dx, INFOFLAG_SCHEDULED
  9260 00002FCC B90900              <1>         mov cx, NUM_OF_INFOFLAGS
  9261 00002FCF 8D36[3A34]          <1>         lea si, [infoflag_chars]
  9262                              <1> 
  9263                              <1> .loop_show_flags:
  9264 00002FD3 50                  <1>         push ax
  9265 00002FD4 85D3                <1>         test bx, dx
  9266 00002FD6 7402                <1>         jz .no_thisflag
  9267 00002FD8 8A04                <1>         mov al, [si]
  9268                              <1> .no_thisflag:
  9269 00002FDA AA                  <1>         stosb
  9270 00002FDB 58                  <1>         pop ax
  9271 00002FDC 46                  <1>         inc si
  9272 00002FDD D1EA                <1>         shr dx, 1
  9273 00002FDF E2F2                <1>         loop .loop_show_flags
  9274 00002FE1 5E                  <1>         pop si
  9275                              <1> 
  9276 00002FE2 B020                <1>         mov al, ' '
  9277 00002FE4 AA                  <1>         stosb
  9278 00002FE5 AA                  <1>         stosb
  9279                              <1> 
  9280 00002FE6 58                  <1> 	pop ax
  9281                              <1> 
  9282                              <1> .no_flags:
  9283 00002FE7 80FC01              <1> 	cmp ah, 1
  9284 00002FEA 7728                <1> 	ja .no_number
  9285                              <1> 
  9286 00002FEC 50                  <1> 	push ax
  9287                              <1> 
  9288 00002FED 8B5402              <1>         mov dx, [si + struc_bootrecord.drive_id]
  9289 00002FF0 F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  9290 00002FF4 740A                <1> 	jz .get_drvid
  9291                              <1> 
  9292 00002FF6 56                  <1> 	push si
  9293 00002FF7 BE[A834]            <1> 	mov si, knl_strings.invalid_id
  9294 00002FFA E8B0F7              <1> 	call strcpy
  9295 00002FFD 5E                  <1> 	pop si
  9296                              <1> 
  9297 00002FFE EB0F                <1> 	jmp short .draw_type
  9298                              <1> 
  9299                              <1> .get_drvid:
  9300 00003000 E8BB07              <1> 	call get_drvid_str
  9301                              <1> 
  9302 00003003 88F0                <1>         mov al, dh                                  ; fill partition id
  9303 00003005 30E4                <1> 	xor ah, ah
  9304 00003007 B103                <1>         mov cl, 3                                   ;
  9305 00003009 E8FAF6              <1>         call itoa                                   ;
  9306                              <1> 
  9307 0000300C 83C703              <1>         add di, 3
  9308                              <1> 
  9309                              <1> .draw_type:
  9310 0000300F B020                <1>         mov al, ' '
  9311 00003011 AA                  <1>         stosb
  9312 00003012 AA                  <1>         stosb
  9313                              <1> 
  9314 00003013 58                  <1> 	pop ax
  9315                              <1> 
  9316                              <1> .no_number:
  9317 00003014 80FC02              <1> 	cmp ah, 2
  9318 00003017 771A                <1> 	ja .no_type
  9319                              <1> 
  9320 00003019 56                  <1>         push si                                     ; save the boot record pointer
  9321                              <1> 
  9322 0000301A 30C0                <1> 	xor al, al
  9323 0000301C F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  9324 00003020 7503                <1> 	jnz .is_special
  9325 00003022 8A4404              <1>         mov al, [si + struc_bootrecord.type]
  9326                              <1> .is_special:
  9327                              <1> 
  9328 00003025 E869FC              <1>         call get_parttype_str
  9329 00003028 B90800              <1>         mov  cx, 8
  9330 0000302B E865F7              <1>         call strncpy
  9331 0000302E 5E                  <1>         pop si
  9332                              <1>         
  9333 0000302F B020                <1>         mov al, ' '
  9334 00003031 AA                  <1>         stosb
  9335 00003032 AA                  <1>         stosb
  9336                              <1> 
  9337                              <1> .no_type:
  9338 00003033 83C616              <1>         add si, struc_bootrecord.name
  9339 00003036 B90F00              <1>         mov cx, 15
  9340 00003039 51                  <1> 	push cx
  9341 0000303A E856F7              <1>         call strncpy                                ; fill record name
  9342 0000303D 89C8                <1> 	mov ax, cx
  9343 0000303F 59                  <1> 	pop cx
  9344 00003040 29C1                <1> 	sub cx, ax
  9345 00003042 B020                <1> 	mov al, ' '
  9346 00003044 F3AA                <1> 	rep stosb
  9347 00003046 30C0                <1> 	xor al, al
  9348 00003048 AA                  <1> 	stosb
  9349 00003049 61                  <1>         popa
  9350 0000304A C3                  <1>         ret
  9351                              <1> 
  9352                              <1> ;==============================================================================
  9353                              <1> ;mark_record_active ---- mark the boot record active.
  9354                              <1> ;input:
  9355                              <1> ;      ds:si -> the record
  9356                              <1> ;output:
  9357                              <1> ;      cf = 0 success
  9358                              <1> ;      cf = 1 failed, ax = 0 cannot mark active, otherwise disk error occured.
  9359                              <1> ;==============================================================================
  9360                              <1> mark_record_active:
  9361 0000304B 60                  <1>         pusha
  9362 0000304C E8C303              <1>         call check_allow_act
  9363 0000304F 725D                <1>         jc .cannot_active
  9364                              <1>         
  9365 00003051 B80102              <1>         mov ax, (INT13H_READ << 8 ) | 0x01                  ; read father's
  9366 00003054 668B5C06            <1>         mov ebx, [si + struc_bootrecord.father_abs_addr]    ; partition table.
  9367 00003058 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]            ;
  9368                              <1>                                                             ;
  9369 0000305B 8D3E[0720]          <1>         lea di, [knl_tmp.disk_buf1]                                  ;
  9370 0000305F E81307              <1>         call disk_access                                    ;
  9371 00003062 724F                <1>         jc .disk_error                                      ;
  9372                              <1> 
  9373 00003064 52                  <1>         push dx
  9374 00003065 6653                <1>         push ebx
  9375 00003067 57                  <1>         push di
  9376                              <1>         
  9377 00003068 81C7BE01            <1>         add di, PART_TBL_OFF
  9378                              <1> 
  9379 0000306C 668B4C0A            <1>         mov ecx, [si + struc_bootrecord.abs_addr]    ; abs addr -> ecx
  9380                              <1> 
  9381 00003070 6629D9              <1>         sub ecx, ebx                                 ; relative addr -> ebx
  9382 00003073 6689CB              <1> 	mov ebx, ecx
  9383 00003076 B90400              <1>         mov cx, 4
  9384                              <1> 
  9385 00003079 F7040020            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_SWAPDRVID  ; check if need swap id
  9386 0000307D 7403                <1>         jz .no_swapid
  9387                              <1> 
  9388 0000307F 80E2F0              <1>         and dl, 0xF0                                 ; use 0x80 as active flag if swap id is on.
  9389                              <1> .no_swapid:
  9390                              <1> 
  9391 00003082 30E4                <1>         xor ah, ah
  9392                              <1> .search_in_father:                                   ;
  9393 00003084 30C0                <1>         xor al, al                                   ;
  9394 00003086 66395D08            <1>         cmp [di + struc_partition.relative_addr], ebx; find the record in
  9395 0000308A 7504                <1>         jne .not_it                                  ; father's partition
  9396 0000308C 88D0                <1>         mov al, dl                                   ; table
  9397 0000308E FEC4                <1>         inc ah                                       ;
  9398                              <1> .not_it:                                             ;
  9399 00003090 8805                <1>         mov byte [di  + struc_partition.state], al   ;
  9400 00003092 83C710              <1>         add di, SIZE_OF_PARTITION                    ;
  9401 00003095 E2ED                <1>         loop .search_in_father                       ;
  9402                              <1> 
  9403 00003097 5F                  <1>         pop di                                       ;
  9404 00003098 665B                <1>         pop ebx                                       ;
  9405 0000309A 5A                  <1>         pop dx
  9406                              <1> 
  9407 0000309B 08E4                <1>         or ah, ah
  9408 0000309D 740F                <1>         jz .cannot_active                            ; can not found the partition record
  9409                              <1>         
  9410 0000309F B80103              <1>         mov ax , (INT13H_WRITE << 8 ) | 0x01         ; write the partition
  9411 000030A2 E8D006              <1>         call disk_access                             ; table back.
  9412 000030A5 720C                <1>         jc .disk_error
  9413                              <1> 
  9414 000030A7 810C0008            <1>         or word [si + struc_bootrecord.flags], INFOFLAG_ACTIVE ; set active flag
  9415 000030AB 61                  <1>         popa
  9416 000030AC F8                  <1>         clc
  9417 000030AD C3                  <1>         ret
  9418                              <1>         
  9419                              <1> .cannot_active:
  9420 000030AE 61                  <1>         popa
  9421 000030AF 31C0                <1>         xor ax, ax
  9422 000030B1 F9                  <1>         stc
  9423 000030B2 C3                  <1>         ret
  9424                              <1> .disk_error:
  9425 000030B3 61                  <1>         popa
  9426 000030B4 C3                  <1>         ret
  9427                              <1> 
  9428                              <1> 
  9429                              <1> 
  9430                              <1> ;==============================================================================
  9431                              <1> ;toggle_record_hidden ---- toggle a boot record's hidden attribute
  9432                              <1> ;input:
  9433                              <1> ;      ds:si -> the record
  9434                              <1> ;output:
  9435                              <1> ;      cf = 0 success
  9436                              <1> ;      cf = 1 failed, ax = 0 cannot hide, otherwise disk error occured.
  9437                              <1> ;==============================================================================
  9438                              <1> toggle_record_hidden:
  9439 000030B5 60                  <1>         pusha
  9440                              <1>         
  9441 000030B6 E83603              <1>         call check_allow_hide
  9442 000030B9 725F                <1>         jc .cannot_hide
  9443                              <1>         
  9444 000030BB B80102              <1>         mov ax, (INT13H_READ << 8 ) | 0x01                  ; read father's
  9445 000030BE 668B5C06            <1>         mov ebx, [si + struc_bootrecord.father_abs_addr]    ; partition table.
  9446 000030C2 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]            ;
  9447                              <1>                                                             ;
  9448 000030C5 8D3E[0720]          <1>         lea di, [knl_tmp.disk_buf1]                                  ;
  9449 000030C9 E8A906              <1>         call disk_access                                    ;
  9450 000030CC 7251                <1>         jc .disk_error                                      ;
  9451                              <1> 
  9452 000030CE 6653                <1>         push ebx
  9453 000030D0 57                  <1>         push di
  9454                              <1>         
  9455 000030D1 81C7BE01            <1>         add di, PART_TBL_OFF
  9456                              <1> 
  9457 000030D5 668B4C0A            <1>         mov ecx, [si + struc_bootrecord.abs_addr]    ; abs addr -> ebx
  9458                              <1> 
  9459 000030D9 6629D9              <1>         sub ecx, ebx                                 ; relative addr -> ebx
  9460 000030DC 6689CB              <1> 	mov ebx, ecx
  9461                              <1> 
  9462 000030DF B90400              <1>         mov cx, 4
  9463                              <1> 
  9464 000030E2 8B04                <1>         mov ax, [si + struc_bootrecord.flags]        ; get flags and type
  9465 000030E4 8A7404              <1>         mov dh, [si + struc_bootrecord.type]
  9466 000030E7 80E60F              <1>         and dh, 0x0F
  9467 000030EA A90002              <1>         test ax, INFOFLAG_HIDDEN
  9468 000030ED 7503                <1>         jnz .unhide_it
  9469 000030EF 80CE10              <1>         or dh, 0x10                                  ; hide the partition
  9470                              <1> 
  9471                              <1> .unhide_it:
  9472 000030F2 30C0                <1>         xor al, al
  9473                              <1>         
  9474                              <1> .search_in_father:                                   ;
  9475 000030F4 66395D08            <1>         cmp [di + struc_partition.relative_addr], ebx; find the record in
  9476 000030F8 7505                <1>         jne .not_it                                  ; father's partition
  9477 000030FA FEC0                <1>         inc al
  9478 000030FC 887504              <1>         mov byte [di  + struc_partition.type], dh    ; set partition type.
  9479                              <1> .not_it:                                             ;
  9480 000030FF 83C710              <1>         add di, SIZE_OF_PARTITION                    ;
  9481 00003102 E2F0                <1>         loop .search_in_father                       ;
  9482                              <1> 
  9483 00003104 5F                  <1>         pop di                                       ;
  9484 00003105 665B                <1>         pop ebx                                      ;
  9485                              <1> 
  9486 00003107 08C0                <1>         or al, al
  9487 00003109 740F                <1>         jz .cannot_hide                              ; can not found the partition record
  9488                              <1>         
  9489 0000310B B80103              <1>         mov ax , (INT13H_WRITE << 8 ) | 0x01         ; write the partition
  9490 0000310E E86406              <1>         call disk_access                             ; table back.
  9491 00003111 720C                <1>         jc .disk_error
  9492                              <1> 
  9493 00003113 81340002            <1>         xor word [si + struc_bootrecord.flags], INFOFLAG_HIDDEN ; toggle hidden flag.
  9494 00003117 61                  <1>         popa
  9495 00003118 F8                  <1>         clc
  9496 00003119 C3                  <1>         ret
  9497                              <1>         
  9498                              <1> .cannot_hide:
  9499 0000311A 61                  <1>         popa
  9500 0000311B 31C0                <1>         xor ax, ax
  9501 0000311D F9                  <1>         stc
  9502 0000311E C3                  <1>         ret
  9503                              <1> .disk_error:
  9504 0000311F 61                  <1>         popa
  9505 00003120 C3                  <1>         ret
  9506                              <1> 
  9507                              <1> ;==============================================================================
  9508                              <1> ;set_record_schedule ---- set the record's schedule time
  9509                              <1> ;input:
  9510                              <1> ;      ds:si -> the record
  9511                              <1> ;      ax = begin time (in minutes)
  9512                              <1> ;      bx = end time (in minutes)
  9513                              <1> ;      dx = week info (bit 0 to bit 6 indicate Mon to Sun, zero means all days)
  9514                              <1> ;output:
  9515                              <1> ;      none
  9516                              <1> ;==============================================================================
  9517                              <1> set_record_schedule:
  9518 00003121 60                  <1>        pusha
  9519 00003122 09C0                <1>        or ax, ax
  9520 00003124 750E                <1>        jnz .timeok
  9521 00003126 09DB                <1>        or bx, bx
  9522 00003128 750A                <1>        jnz .timeok
  9523 0000312A 09D2                <1>        or dx, dx
  9524 0000312C 7506                <1>        jnz .timeok
  9525                              <1> 
  9526 0000312E 8124FF7F            <1>        and word [si + struc_bootrecord.flags], ~ INFOFLAG_SCHEDULED
  9527 00003132 61                  <1>        popa
  9528 00003133 C3                  <1>        ret
  9529                              <1> 
  9530                              <1> .timeok:
  9531 00003134 6681E3FF0F0000      <1>        and ebx, 0x00000fff
  9532 0000313B 6625FF0F0000        <1>        and eax, 0x00000fff
  9533 00003141 66C1E30C            <1>        shl ebx, 12
  9534 00003145 6609D8              <1>        or  eax, ebx
  9535 00003148 6681E2FF000000      <1>        and edx, 0x000000ff
  9536 0000314F 66C1E218            <1>        shl edx, 24
  9537 00003153 6609D0              <1>        or  eax, edx
  9538                              <1> 
  9539 00003156 66894412            <1>        mov [si + struc_bootrecord.schedule_time], eax
  9540 0000315A 810C0080            <1>        or word [si + struc_bootrecord.flags], INFOFLAG_SCHEDULED
  9541                              <1> 
  9542 0000315E 61                  <1>        popa
  9543 0000315F C3                  <1>        ret
  9544                              <1> 
  9545                              <1> ;==============================================================================
  9546                              <1> ;get_record_schedule ---- set the record's schedule time
  9547                              <1> ;input:
  9548                              <1> ;      ds:si -> the record
  9549                              <1> ;output:
  9550                              <1> ;      ax = begin time (in minutes)
  9551                              <1> ;      bx = end time (in minutes)
  9552                              <1> ;      dx = week info (bit 0 to bit 6 indicate Mon to Sun, zero means all days)
  9553                              <1> ;==============================================================================
  9554                              <1> get_record_schedule:
  9555 00003160 31C0                <1>        xor ax, ax
  9556 00003162 31DB                <1>        xor bx, bx
  9557 00003164 31D2                <1>        xor dx, dx
  9558                              <1> 
  9559 00003166 F7040080            <1>        test word [si + struc_bootrecord.flags], INFOFLAG_SCHEDULED
  9560 0000316A 741D                <1>        jz .end
  9561                              <1> 
  9562 0000316C 668B4412            <1>        mov eax, [si + struc_bootrecord.schedule_time]
  9563 00003170 6689C3              <1>        mov ebx, eax
  9564 00003173 6689C2              <1>        mov edx, eax
  9565                              <1> 
  9566 00003176 25FF0F              <1>        and ax, 0x0fff
  9567 00003179 66C1EB0C            <1>        shr ebx, 12
  9568 0000317D 81E3FF0F            <1>        and bx, 0x0fff
  9569 00003181 66C1EA18            <1>        shr edx, 24
  9570 00003185 81E2FF00            <1>        and dx, 0x00ff
  9571                              <1> 
  9572                              <1> .end:
  9573 00003189 C3                  <1>        ret
  9574                              <1> 
  9575                              <1> ;=============================================================================
  9576                              <1> ;schedule_to_str ---- convert schedule time to string
  9577                              <1> ;input:
  9578                              <1> ;       ax = start time
  9579                              <1> ;       bx = stop time
  9580                              <1> ;       dx = days info
  9581                              <1> ;       es:di -> buffer
  9582                              <1> ;output:
  9583                              <1> ;       none
  9584                              <1> ;=============================================================================
  9585                              <1> schedule_to_str:
  9586 0000318A 60                  <1>         pusha
  9587 0000318B FC                  <1>         cld
  9588 0000318C E83700              <1>         call sch_time_to_str
  9589 0000318F 89FE                <1>         mov si, di
  9590 00003191 E8C0F5              <1>         call strlen
  9591 00003194 01CF                <1>         add di, cx
  9592 00003196 B02D                <1>         mov al, '-'
  9593 00003198 AA                  <1>         stosb
  9594 00003199 89D8                <1>         mov ax, bx
  9595 0000319B E82800              <1>         call sch_time_to_str
  9596 0000319E 89FE                <1>         mov si, di
  9597 000031A0 E8B1F5              <1>         call strlen
  9598 000031A3 01CF                <1>         add di, cx
  9599 000031A5 B03B                <1>         mov al, ';'
  9600 000031A7 AA                  <1>         stosb
  9601 000031A8 E80200              <1>         call sch_days_to_str
  9602 000031AB 61                  <1>         popa
  9603 000031AC C3                  <1>         ret
  9604                              <1> 
  9605                              <1> ;=============================================================================
  9606                              <1> ;sch_days_to_str ---- convert days info string 0123456
  9607                              <1> ;input:
  9608                              <1> ;       dx = day bits
  9609                              <1> ;       es:di -> buffer
  9610                              <1> ;output:
  9611                              <1> ;       none
  9612                              <1> ;=============================================================================
  9613                              <1> sch_days_to_str:
  9614 000031AD 60                  <1>         pusha
  9615 000031AE B90700              <1>         mov cx, 7
  9616 000031B1 B030                <1>         mov al, '0'
  9617 000031B3 BB0100              <1>         mov bx, 1
  9618                              <1> 
  9619                              <1> .loop_chk:
  9620 000031B6 85DA                <1>         test dx, bx
  9621 000031B8 7401                <1>         jz .nothisday
  9622 000031BA AA                  <1>         stosb
  9623                              <1> .nothisday:
  9624 000031BB D1E3                <1>         shl bx, 1
  9625 000031BD FEC0                <1>         inc al
  9626 000031BF E2F5                <1>         loop .loop_chk
  9627                              <1> 
  9628 000031C1 30C0                <1>         xor al, al
  9629 000031C3 AA                  <1>         stosb
  9630                              <1> 
  9631 000031C4 61                  <1>         popa
  9632 000031C5 C3                  <1>         ret
  9633                              <1> 
  9634                              <1> ;=============================================================================
  9635                              <1> ;sch_time_to_str ---- convert time in minute info string hh:mm
  9636                              <1> ;input:
  9637                              <1> ;       ax = time
  9638                              <1> ;       es:di -> buffer
  9639                              <1> ;output:
  9640                              <1> ;       none
  9641                              <1> ;=============================================================================
  9642                              <1> sch_time_to_str:
  9643 000031C6 60                  <1>         pusha
  9644                              <1> 
  9645 000031C7 B23C                <1>         mov dl, 60
  9646 000031C9 F6F2                <1>         div dl
  9647 000031CB 50                  <1>         push ax
  9648                              <1> 
  9649 000031CC 30E4                <1>         xor ah, ah
  9650 000031CE 3C0A                <1>         cmp al, 10
  9651 000031D0 7205                <1>         jb .hlten
  9652 000031D2 B90200              <1>         mov cx, 2
  9653 000031D5 EB03                <1>         jmp short .showh
  9654                              <1> .hlten:
  9655 000031D7 B90100              <1>         mov cx,1
  9656                              <1> .showh:
  9657 000031DA E829F5              <1>         call itoa
  9658                              <1> 
  9659 000031DD B03A                <1>         mov al,':'
  9660 000031DF 01CF                <1>         add di, cx
  9661 000031E1 AA                  <1>         stosb
  9662                              <1> 
  9663 000031E2 58                  <1>         pop ax
  9664 000031E3 0FB6C4              <1>         movzx ax, ah
  9665 000031E6 3C0A                <1>         cmp al, 10
  9666 000031E8 7205                <1>         jb .mlten
  9667 000031EA B90200              <1>         mov cx, 2
  9668 000031ED EB03                <1>         jmp short .showm
  9669                              <1> .mlten:
  9670 000031EF B90100              <1>         mov cx,1
  9671                              <1> .showm:
  9672 000031F2 E811F5              <1>         call itoa
  9673                              <1> 
  9674 000031F5 61                  <1>         popa
  9675 000031F6 C3                  <1>         ret
  9676                              <1> 
  9677                              <1> ;==============================================================================
  9678                              <1> ;boot_normal_record ---- boot a normal record
  9679                              <1> ;input:
  9680                              <1> ;      ds:si -> the record
  9681                              <1> ;output:
  9682                              <1> ;      will not return when successfully boot.
  9683                              <1> ;      if return then al != 0 disk error; al = 0 no operation system.
  9684                              <1> ;==============================================================================
  9685                              <1> boot_normal_record:
  9686 000031F7 06                  <1>         push es
  9687                              <1> 
  9688 000031F8 8B1C                <1>         mov bx, [si + struc_bootrecord.flags]
  9689 000031FA F7C30010            <1>         test bx, INFOFLAG_AUTOACTIVE
  9690 000031FE 7403                <1>         jz .no_need_act
  9691 00003200 E848FE              <1>         call mark_record_active             ; active the partition
  9692                              <1> 
  9693                              <1> .no_need_act:
  9694 00003203 F7C30002            <1>         test bx, INFOFLAG_HIDDEN
  9695 00003207 7403                <1>         jz .not_hidden
  9696 00003209 E8A9FE              <1>         call toggle_record_hidden           ; unhide the partition
  9697                              <1> 
  9698                              <1> .not_hidden:
  9699                              <1> 
  9700 0000320C 53                  <1>         push bx                             ; save the flags
  9701 0000320D 8D3E[0720]          <1>         lea di, [knl_tmp.disk_buf1]         ; load boot sector into knl_tmp.disk_buf1.
  9702 00003211 B80102              <1>         mov ax, (INT13H_READ << 8 ) | 0x01
  9703 00003214 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]
  9704 00003217 668B5C0A            <1>         mov ebx, [si + struc_bootrecord.abs_addr]
  9705                              <1> 
  9706 0000321B E85705              <1>         call disk_access                    ; read the first sector of the
  9707                              <1>                                             ; partition / floppy into
  9708                              <1>                                             ; memory.
  9709 0000321E 5B                  <1>         pop bx
  9710 0000321F 0F829200            <1>         jmpc .disk_error
  9711                              <1> 
  9712 00003223 81BDFE0155AA        <1>         cmp word [di + BR_FLAG_OFF], BR_GOOD_FLAG
  9713 00003229 0F858600            <1>         jmpne .no_system
  9714                              <1> 
  9715 0000322D F7C38000            <1>         test bx, INFOFLAG_ISDRIVER          ; if it's driver, skip loading the
  9716                              <1>                                             ; partition table.
  9717 00003231 7517                <1>         jnz .do_boot
  9718                              <1> 
  9719 00003233 53                  <1>         push bx                             ; save the flags 
  9720 00003234 8D3E[0728]          <1>         lea di, [knl_tmp.disk_buf2]    ; load part table into knl_tmp.disk_buf2
  9721                              <1> 
  9722 00003238 668B5C06            <1>         mov ebx, [si + struc_bootrecord.father_abs_addr]
  9723                              <1> 
  9724 0000323C E83605              <1>         call disk_access                    ; load part table into memory.
  9725 0000323F 5B                  <1>         pop bx
  9726 00003240 7273                <1>         jc .disk_error
  9727                              <1> 
  9728 00003242 81BDFE0155AA        <1>         cmp word [di + BR_FLAG_OFF], BR_GOOD_FLAG
  9729 00003248 7569                <1>         jne .no_system                      ; bad partition table, treated as
  9730                              <1>                                             ; no operating system.
  9731                              <1> 
  9732                              <1> .do_boot:
  9733                              <1> %ifndef EMULATE_PROG
  9734                              <1> 
  9735 0000324A F7C30020            <1>         test bx, INFOFLAG_SWAPDRVID         ; check if need swap id
  9736 0000324E 7413                <1>         jz .no_swapid
  9737                              <1> 
  9738                              <1> ;================ swap the driver id ========================================
  9739 00003250 88D6                <1>         mov dh, dl
  9740 00003252 80E680              <1>         and dh, 0x80                        ; set driver id to the bootable id
  9741                              <1> 
  9742 00003255 89D3                <1> 	mov bx, dx
  9743 00003257 86F2                <1> 	xchg dh, dl
  9744 00003259 89D1                <1> 	mov cx, dx
  9745                              <1> 
  9746 0000325B E8CF05              <1> 	call set_drive_map
  9747                              <1> 
  9748 0000325E 885402              <1>         mov [si + struc_bootrecord.drive_id], dl  ; write new driver id back
  9749 00003261 EB03                <1> 	jmp short .swap_ok
  9750                              <1> 
  9751                              <1> .no_swapid:
  9752 00003263 E8AB05              <1> 	call uninstall_myint13h
  9753                              <1> 
  9754                              <1> .swap_ok:
  9755 00003266 E80901              <1>         call prepare_boot                   ; prepare to boot.
  9756 00003269 7248                <1>         jc .no_system                       ; preparation failed.
  9757                              <1>         
  9758                              <1> %endif
  9759 0000326B E8E000              <1>         call preload_keystrokes     ; preload the keystrokes into key buffer.
  9760 0000326E E89CE9              <1>         call reset_video_mode
  9761                              <1> 
  9762                              <1> %ifndef EMULATE_PROG
  9763                              <1> 
  9764 00003271 56                  <1>         push si
  9765 00003272 FC                  <1>         cld
  9766                              <1> 
  9767 00003273 31C0                <1>         xor ax, ax
  9768 00003275 50                  <1>         push ax
  9769 00003276 07                  <1>         pop es
  9770 00003277 B90002              <1>         mov cx, SECTOR_SIZE
  9771                              <1> 
  9772 0000327A F7048000            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_ISDRIVER
  9773                              <1>                                             ; if it's driver, no partition
  9774 0000327E 750B                <1>         jnz .boot_driver                    ; table to load.
  9775                              <1>         
  9776 00003280 8D36[0728]          <1>         lea si, [knl_tmp.disk_buf2]
  9777 00003284 BF0006              <1>         mov di, PART_OFF
  9778                              <1> 
  9779 00003287 51                  <1>         push cx
  9780 00003288 F3A4                <1>         rep movsb                           ; move mbr (partition table) to
  9781                              <1>                                             ; 0000:0600
  9782 0000328A 59                  <1>         pop cx
  9783                              <1>         
  9784                              <1> .boot_driver:
  9785 0000328B 8D36[0720]          <1>         lea si, [knl_tmp.disk_buf1]
  9786 0000328F BF007C              <1>         mov di, 7C00h
  9787 00003292 F3A4                <1>         rep movsb                           ; move boot sector to 0000:7C00
  9788                              <1> 
  9789 00003294 5E                  <1>         pop si
  9790                              <1> 
  9791 00003295 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id] ; drive id -> dl
  9792 00003298 30F6                <1>         xor dh, dh
  9793                              <1> 
  9794                              <1> ; boot code from lilo :-)
  9795                              <1> 
  9796 0000329A 89DE                <1>         mov si, bx                          ; ds:si , es:di point to the
  9797 0000329C 81C6BE07            <1>         add si, PART_OFF + PART_TBL_OFF     ; partition record.
  9798 000032A0 56                  <1>         push si                             ;
  9799 000032A1 5F                  <1>         pop di                              ;
  9800                              <1> 
  9801 000032A2 50                  <1>         push ax                             ; ds = 0 ( es already set to 0 ).
  9802 000032A3 1F                  <1>         pop ds                              ;
  9803                              <1>         
  9804                              <1> %if 0
  9805                              <1>         xor bp, bp                          ; might help some boot problems
  9806                              <1>         mov ax, BR_GOOD_FLAG                ; boot signature (just in case ...)
  9807                              <1>         jmp 0:7C00h                         ; start boot sector
  9808                              <1> %else
  9809                              <1> ;boot code from the OS2 Boot Manager
  9810 000032A4 BB007C              <1>         mov bx, 7C00h
  9811                              <1>     
  9812 000032A7 8ED0                <1>         mov ss,ax                           ; on all processors since the 186
  9813 000032A9 89DC                <1>         mov sp,bx                           ; these instructions are locked
  9814                              <1>     
  9815 000032AB 89F5                <1>         mov bp, si
  9816 000032AD 50                  <1>         push    ax
  9817 000032AE 53                  <1>         push    bx
  9818 000032AF B855AA              <1>         mov ax, BR_GOOD_FLAG
  9819 000032B2 CB                  <1>         retf                                ; start boot sector
  9820                              <1> %endif
  9821                              <1>         
  9822                              <1> %else
  9823                              <1> 	call uninstall_myint13h
  9824                              <1>         mov ax, 0x4c00                      ; return to dos.
  9825                              <1>         int 0x21                            ;
  9826                              <1> %endif
  9827                              <1> 
  9828                              <1> .no_system:
  9829 000032B3 30C0                <1>         xor al, al
  9830                              <1> .disk_error:
  9831 000032B5 07                  <1>         pop es
  9832 000032B6 C3                  <1>         ret
  9833                              <1> 
  9834                              <1> %ifndef DISABLE_CDBOOT
  9835                              <1> ;==============================================================================
  9836                              <1> ; boot_cdrom ---- boot cdrom driver
  9837                              <1> ; input: ds:di -> boot catalog
  9838                              <1> ;        dl = cdrom drvid
  9839                              <1> ;==============================================================================
  9840                              <1> boot_cdrom:
  9841 000032B7 8A4501              <1> 	mov al, [di+1]
  9842 000032BA 240F                <1> 	and al, 0x0f
  9843                              <1> 
  9844 000032BC BE[F41F]            <1> 	mov si, knl_tmp.cdemu_spec
  9845 000032BF C60413              <1> 	mov byte [si], SIZE_OF_CDEMU_SPEC
  9846 000032C2 884401              <1> 	mov [si + struc_cdemu_spec.media_type], al
  9847                              <1> 
  9848 000032C5 30E4                <1> 	xor ah, ah
  9849 000032C7 08C0                <1> 	or al, al
  9850 000032C9 7502                <1> 	jnz .floppy_emu
  9851 000032CB 88D4                <1> 	mov ah, dl
  9852                              <1> .floppy_emu: 
  9853                              <1> 
  9854 000032CD 886402              <1> 	mov byte [si + struc_cdemu_spec.emu_drvid], ah
  9855 000032D0 668B5D08            <1> 	mov ebx, [di+0x08]
  9856 000032D4 66895C04            <1> 	mov [si + struc_cdemu_spec.image_lba], ebx
  9857 000032D8 8B5D02              <1> 	mov bx, [di+0x02]
  9858 000032DB 895C0C              <1> 	mov [si + struc_cdemu_spec.load_seg], bx
  9859 000032DE 8B5D06              <1> 	mov bx, [di+0x06]
  9860 000032E1 895C0E              <1> 	mov [si + struc_cdemu_spec.sect_count], bx
  9861 000032E4 C6441050            <1> 	mov byte [si + struc_cdemu_spec.cylinders], 0x50
  9862 000032E8 C6441202            <1> 	mov byte [si + struc_cdemu_spec.heads], 2
  9863                              <1> 
  9864 000032EC 88C3                <1> 	mov bl, al
  9865 000032EE 30FF                <1> 	xor bh, bh
  9866 000032F0 8AA7[1233]          <1> 	mov ah, [.sect_nums + bx]
  9867                              <1> 
  9868 000032F4 886411              <1> 	mov byte [si + struc_cdemu_spec.sectors], ah
  9869 000032F7 31C0                <1> 	xor ax, ax
  9870 000032F9 89440A              <1> 	mov [si + struc_cdemu_spec.user_bufseg], ax
  9871                              <1> 
  9872                              <1> ;Boot it!
  9873 000032FC B8004A              <1> 	mov ax, 0x4a00
  9874 000032FF CD13                <1> 	int 0x13
  9875 00003301 8826[EB1F]          <1> 	mov [hdio_tmp.disk_errno],ah
  9876 00003305 720A                <1> 	jc .end
  9877                              <1> 
  9878                              <1> ;If the cd-rom is accessed via BIOS, then uninstall my int13h.
  9879 00003307 E80705              <1> 	call uninstall_myint13h
  9880                              <1> 
  9881 0000330A B8004C              <1> 	mov ax, 0x4c00
  9882 0000330D CD13                <1> 	int 0x13
  9883 0000330F 31C0                <1> 	xor ax, ax
  9884                              <1> .end:
  9885 00003311 C3                  <1> 	ret
  9886                              <1> 
  9887 00003312 000F1224            <1> .sect_nums  db  0, 0x0f, 0x12, 0x24
  9888                              <1> 
  9889                              <1> 
  9890                              <1> ;==============================================================================
  9891                              <1> ;find_cdboot_catalog ---- find boot catalog entry from buffer
  9892                              <1> ;input: ds:si -> buffer  es:di -> entries buffer
  9893                              <1> ;return: cx = number of entries
  9894                              <1> ;==============================================================================
  9895                              <1> find_cdboot_catalog:
  9896 00003316 56                  <1> 	push si
  9897 00003317 57                  <1> 	push di
  9898 00003318 50                  <1> 	push ax
  9899 00003319 FC                  <1> 	cld
  9900                              <1> 
  9901 0000331A 31C9                <1> 	xor cx, cx
  9902                              <1> 
  9903 0000331C 833C01              <1> 	cmp word [si], 0x0001
  9904 0000331F 7529                <1> 	jne .end
  9905 00003321 817C1E55AA          <1> 	cmp word [si+0x1e], 0xaa55
  9906 00003326 7522                <1> 	jne .end
  9907                              <1> 
  9908                              <1> .loop_find:
  9909 00003328 8A04                <1> 	mov al, [si + struc_boot_catalog.indicator]
  9910 0000332A 08C0                <1> 	or al, al
  9911 0000332C 741C                <1> 	jz .end
  9912                              <1> 
  9913 0000332E 3C88                <1> 	cmp al, 0x88
  9914 00003330 7513                <1> 	jne .loop_next
  9915                              <1> 
  9916 00003332 8A4401              <1> 	mov al, [si + struc_boot_catalog.media_type]
  9917 00003335 240F                <1> 	and al, 0x0f
  9918 00003337 3C04                <1> 	cmp al , 4
  9919 00003339 730A                <1> 	jae .loop_next
  9920                              <1> 
  9921 0000333B 51                  <1> 	push cx
  9922 0000333C 56                  <1> 	push si
  9923 0000333D B92000              <1> 	mov cx, SIZE_OF_BOOT_CATALOG
  9924 00003340 F3A4                <1> 	rep movsb
  9925 00003342 5E                  <1> 	pop si
  9926 00003343 59                  <1> 	pop cx
  9927 00003344 41                  <1> 	inc cx
  9928                              <1> 
  9929                              <1> .loop_next:
  9930 00003345 83C620              <1> 	add si, SIZE_OF_BOOT_CATALOG
  9931 00003348 EBDE                <1> 	jmp short .loop_find
  9932                              <1> 
  9933                              <1> .end:
  9934 0000334A 58                  <1> 	pop ax
  9935 0000334B 5F                  <1> 	pop di
  9936 0000334C 5E                  <1> 	pop si
  9937 0000334D C3                  <1> 	ret
  9938                              <1> 
  9939                              <1> %endif
  9940                              <1> 
  9941                              <1> ;==============================================================================
  9942                              <1> ;preload_keystrokes ---- preload the keystrokes into key buffer.
  9943                              <1> ;input:
  9944                              <1> ;      ds:si -> boot record
  9945                              <1> ;output:
  9946                              <1> ;      none
  9947                              <1> ;==============================================================================
  9948                              <1> preload_keystrokes:
  9949 0000334E 60                  <1>         pusha
  9950 0000334F FC                  <1>         cld
  9951 00003350 F7040040            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_HAVEKEYS
  9952 00003354 741A                <1>         jz .end
  9953                              <1> 
  9954 00003356 B90D00              <1>         mov cx, MAX_KEYSTROKES
  9955 00003359 83C626              <1>         add si, struc_bootrecord.keystrokes
  9956                              <1> 
  9957                              <1> .loop_load:
  9958 0000335C AD                  <1>         lodsw
  9959 0000335D 09C0                <1>         or ax, ax
  9960 0000335F 740F                <1>         jz .end
  9961                              <1> 
  9962 00003361 51                  <1>         push cx
  9963 00003362 89C1                <1>         mov cx, ax
  9964 00003364 B405                <1>         mov ah, 0x05
  9965 00003366 E81FF6              <1>         call bioskey
  9966 00003369 59                  <1>         pop cx
  9967 0000336A 08C0                <1>         or al, al
  9968 0000336C 7502                <1>         jnz .end
  9969 0000336E E2EC                <1>         loop .loop_load
  9970                              <1> .end:
  9971 00003370 61                  <1>         popa
  9972 00003371 C3                  <1>         ret
  9973                              <1> 
  9974                              <1> ;==============================================================================
  9975                              <1> ;prepare_boot ---- do some preparation before booting.
  9976                              <1> ;input:
  9977                              <1> ;      ds:si -> boot record
  9978                              <1> ;      knl_tmp.disk_buf1  -> boot sector
  9979                              <1> ;      knl_tmp.disk_buf2 -> father's first sector ( partition table ).
  9980                              <1> ;output:
  9981                              <1> ;      cf = 0 success
  9982                              <1> ;          bx = the partition record's offset in partition table.
  9983                              <1> ;      cf = 1 failed
  9984                              <1> ;==============================================================================
  9985                              <1> prepare_boot:
  9986 00003372 31C0                <1>         xor ax, ax
  9987 00003374 F7048000            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_ISDRIVER
  9988 00003378 0F856F00            <1>         jmpnz .end
  9989                              <1> 
  9990 0000337C 668B5C0A            <1>         mov ebx, [si + struc_bootrecord.abs_addr]         ;
  9991                              <1> 
  9992 00003380 668B4C06            <1>         mov ecx, [si + struc_bootrecord.father_abs_addr]  ;
  9993                              <1> 
  9994 00003384 6689D8              <1>         mov eax, ebx
  9995 00003387 6629C8              <1>         sub eax, ecx                                      ; relative addr -> eax
  9996                              <1> 
  9997 0000338A 8D3E[C529]          <1>         lea di, [knl_tmp.disk_buf2 + PART_TBL_OFF]
  9998 0000338E 30C9                <1>         xor cl, cl
  9999                              <1>         
 10000                              <1> .search_in_father:
 10001 00003390 66394508            <1>         cmp [di + struc_partition.relative_addr], eax
 10002 00003394 740C                <1>         je .found
 10003 00003396 FEC1                <1>         inc cl
 10004 00003398 83C710              <1>         add di, SIZE_OF_PARTITION
 10005 0000339B 80F904              <1>         cmp cl, 4
 10006 0000339E 72F0                <1>         jb .search_in_father
 10007 000033A0 EB49                <1>         jmp short .failed
 10008                              <1> 
 10009                              <1> .found:
 10010 000033A2 B010                <1>         mov al, SIZE_OF_PARTITION                   ; ax = offset in partition
 10011 000033A4 F6E1                <1>         mul cl                                      ; table.
 10012                              <1> 
 10013 000033A6 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]
 10014 000033A9 8815                <1>         mov [di + struc_partition.state], dl        ; store drive id into
 10015                              <1>                                                     ; partition record
 10016                              <1> 
 10017 000033AB 8D3E[0720]          <1>         lea di, [knl_tmp.disk_buf1]                          ; di -> boot record
 10018 000033AF 8A7404              <1>         mov dh, [si + struc_bootrecord.type]
 10019                              <1> 
 10020 000033B2 80FE04              <1>         cmp dh, 0x04
 10021 000033B5 7416                <1>         je .fat16
 10022 000033B7 80FE06              <1>         cmp dh, 0x06
 10023 000033BA 7411                <1>         je .fat16
 10024 000033BC 80FE0E              <1>         cmp dh, 0x0e
 10025 000033BF 740C                <1>         je .fat16
 10026 000033C1 80FE0B              <1>         cmp dh, 0x0b
 10027 000033C4 7416                <1>         je .fat32
 10028 000033C6 80FE0C              <1>         cmp dh, 0x0c
 10029 000033C9 7411                <1>         je .fat32
 10030 000033CB EB1E                <1>         jmp short .end
 10031                              <1> .fat16:
 10032 000033CD 807D2629            <1>         cmp byte [di + FAT16_EXTBRID_OFF], EXTBRID
 10033 000033D1 7518                <1>         jne .end
 10034                              <1>         
 10035 000033D3 885524              <1>         mov [di + FAT16_DRVID_OFF], dl              ; update the drive id.
 10036 000033D6 66895D1C            <1>         mov [di + FAT16_HIDSEC_OFF], ebx            ; update hidden sector
 10037                              <1>                                                     ; = abs_addr.
 10038 000033DA EB0F                <1>         jmp short .end
 10039                              <1> .fat32:
 10040 000033DC 807D4229            <1>         cmp byte [di + FAT32_EXTBRID_OFF], EXTBRID
 10041 000033E0 7509                <1>         jne .end
 10042                              <1>         
 10043 000033E2 885540              <1>         mov [di + FAT32_DRVID_OFF], dl              ; update the drive id.
 10044 000033E5 66895D1C            <1>         mov [di + FAT32_HIDSEC_OFF], ebx            ; update hidden sector
 10045                              <1>                                                     ; = abs_addr.
 10046 000033E9 EB00                <1>         jmp short .end
 10047                              <1>         
 10048                              <1> .failed:
 10049                              <1> ;        stc
 10050                              <1> ;        ret
 10051                              <1> .end:
 10052 000033EB 89C3                <1>         mov bx, ax          ; partition record's offset store to bx.
 10053 000033ED F8                  <1>         clc
 10054 000033EE C3                  <1>         ret
 10055                              <1> 
 10056                              <1> ;==============================================================================
 10057                              <1> ;check_allow_hide ---- check if the partition can be hidden.
 10058                              <1> ;input:
 10059                              <1> ;      ds:si -> the boot record
 10060                              <1> ;output:
 10061                              <1> ;      cf = 0 can be hidden
 10062                              <1> ;      cf = 1 cannot be hidden
 10063                              <1> ;==============================================================================
 10064                              <1> check_allow_hide:
 10065 000033EF 60                  <1>         pusha
 10066 000033F0 09F6                <1> 	or si, si
 10067 000033F2 741B                <1> 	jz .cannot_hide
 10068                              <1> 
 10069 000033F4 8B04                <1>         mov ax, [si + struc_bootrecord.flags]
 10070 000033F6 A90100              <1>         test ax, DRVFLAG_DRIVEOK
 10071 000033F9 7414                <1>         jz .cannot_hide
 10072 000033FB A99800              <1>         test ax, INFOFLAG_ISDRIVER | DRVFLAG_ISCDROM | INFOFLAG_ISSPECIAL
 10073 000033FE 750F                <1>         jnz .cannot_hide
 10074                              <1> 
 10075 00003400 8A4404              <1>         mov al, [si + struc_bootrecord.type]
 10076 00003403 B90700              <1>         mov cx, NUM_OF_ALLOW_HIDE
 10077 00003406 8D3E[A635]          <1>         lea di, [part_type.allow_hide_tbl]
 10078 0000340A E871F3              <1>         call strchr
 10079 0000340D 61                  <1>         popa
 10080 0000340E C3                  <1>         ret
 10081                              <1>         
 10082                              <1> .cannot_hide:
 10083 0000340F 61                  <1>         popa
 10084 00003410 F9                  <1>         stc
 10085 00003411 C3                  <1>         ret
 10086                              <1> 
 10087                              <1> ;==============================================================================
 10088                              <1> ;check_allow_act ---- check if the partition can be actived.
 10089                              <1> ;input:
 10090                              <1> ;      ds:si -> the boot record
 10091                              <1> ;output:
 10092                              <1> ;      cf = 0 can be actived
 10093                              <1> ;      cf = 1 cannot be actived
 10094                              <1> ;==============================================================================
 10095                              <1> check_allow_act:
 10096 00003412 60                  <1>         pusha
 10097 00003413 09F6                <1> 	or si, si
 10098 00003415 740F                <1> 	jz .cannot_act
 10099                              <1> 
 10100 00003417 8B04                <1>         mov ax, [si + struc_bootrecord.flags]   ; get flags
 10101 00003419 A90100              <1>         test ax, DRVFLAG_DRIVEOK
 10102 0000341C 7408                <1>         jz .cannot_act
 10103 0000341E A99801              <1>         test ax, INFOFLAG_ISDRIVER | INFOFLAG_LOGICAL | DRVFLAG_ISCDROM | INFOFLAG_ISSPECIAL
 10104 00003421 7503                <1>         jnz .cannot_act
 10105 00003423 61                  <1>         popa
 10106 00003424 F8                  <1>         clc
 10107 00003425 C3                  <1>         ret
 10108                              <1>         
 10109                              <1> .cannot_act:
 10110 00003426 61                  <1>         popa
 10111 00003427 F9                  <1>         stc
 10112 00003428 C3                  <1>         ret
 10113                              <1> 
 10114                              <1> ;==============================================================================
 10115                              <1> ;check_prev_mbr ---- check if the previous mbr is avaiable.
 10116                              <1> ;input:
 10117                              <1> ;      none
 10118                              <1> ;output:
 10119                              <1> ;      cf = 0 present
 10120                              <1> ;      cf = 1 absent
 10121                              <1> ;==============================================================================
 10122                              <1> check_prev_mbr:
 10123 00003429 60                  <1> 	pusha
 10124 0000342A 8A16107E            <1> 	mov dl, [Boot_Drive]
 10125 0000342E E88602              <1> 	call get_drive_flags
 10126 00003431 7205                <1> 	jc .end
 10127 00003433 A804                <1> 	test al, DRVFLAG_REMOVABLE
 10128 00003435 7401                <1> 	jz .end
 10129 00003437 F9                  <1> 	stc
 10130                              <1> .end:
 10131 00003438 61                  <1> 	popa
 10132 00003439 C3                  <1> 	ret
 10133                              <1> 
 10134                              <1> ;==============================================================================
 10135                              <1> ;data area
 10136                              <1> ;==============================================================================
 10137                              <1> 
 10138                              <1> ; strings used in knl.asm
 10139 0000343A 536B58614168486C44- <1> infoflag_chars  db "SkXaAhHlD",0
 10140 00003443 00                  <1>
 10141                              <1> 
 10142                              <1> knl_strings:
 10143 00003444 466C6F70707900      <1> .floppy     db "Floppy",0
 10144 0000344B 5072696D61727900    <1> .primary    db "Primary",0
 10145 00003453 4C6F676963616C00    <1> .logical    db "Logical",0
 10146 0000345B 52656D6F7661626C65- <1> .removable  db "Removable",0
 10147 00003464 00                  <1>
 10148 00003465 486172646469736B00  <1> .harddisk   db "Harddisk",0
 10149 0000346E 43442D524F4D00      <1> .cdrom      db "CD-ROM",0
 10150 00003475 5370656369616C00    <1> .special    db "Special",0
 10151 0000347D 506F776572204F6666- <1> .poweroff   db "Power Off",0
 10152 00003486 00                  <1>
 10153 00003487 5265626F6F7400      <1> .restart    db "Reboot",0
 10154 0000348E 5175697420746F2042- <1> .quit       db "Quit to BIOS",0
 10155 00003497 494F5300            <1>
 10156 0000349B 50726576696F757320- <1> .bootprev   db "Previous MBR",0
 10157 000034A4 4D425200            <1>
 10158 000034A8 2D2D2D202D2D00      <1> .invalid_id db "--- --",0
 10159                              <1> 
 10160                              <1> ; partition types and strings
 10161                              <1> part_type:
 10162                              <1> 
 10163                              <1> ; table of partition type ids
 10164                              <1> .id_tbl:
 10165 000034AF 00060708090A0B0C    <1>         db 0x00, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 
 10166 000034B7 0E3C4D4E4F636581    <1> 	db 0x0E, 0x3C, 0x4D, 0x4E, 0x4F, 0x63, 0x65, 0x81, 
 10167 000034BF 82838E93A5A6A9B7    <1> 	db 0x82, 0x83, 0x8E, 0x93, 0xA5, 0xA6, 0xA9, 0xB7, 
 10168 000034C7 BEEB                <1> 	db 0xBE, 0xEB
 10169                              <1> 
 10170                              <1> ; table of partition type strings
 10171                              <1> .str_tbl:
 10172 000034C9 4E4F4E4520202000    <1>         db "NONE   ",0           ; No type
 10173 000034D1 4641543136202000    <1>         db "FAT16  ",0           ; 0x06
 10174 000034D9 48502F4E54465300    <1>         db "HP/NTFS",0           ; 0x07
 10175 000034E1 4149582830382900    <1> 	db "AIX(08)",0           ; 0x08
 10176 000034E9 4149582830392900    <1> 	db "AIX(09)",0           ; 0x09
 10177 000034F1 4F532F3220424D00    <1> 	db "OS/2 BM",0           ; 0x0A
 10178 000034F9 4641543332202000    <1>         db "FAT32  ",0           ; 0x0B
 10179 00003501 4641543332782000    <1>         db "FAT32x ",0           ; 0x0C
 10180 00003509 4641543136782000    <1>         db "FAT16x ",0           ; 0x0E
 10181 00003511 50512D426F6F7400    <1>         db "PQ-Boot",0           ; 0x3C
 10182 00003519 514E58342E782000    <1>         db "QNX4.x ",0           ; 0x4D
 10183 00003521 514E5834782D3200    <1>         db "QNX4x-2",0           ; 0x4E
 10184 00003529 514E5834782D3300    <1>         db "QNX4x-3",0           ; 0x4F
 10185 00003531 4855524420202000    <1>         db "HURD   ",0           ; 0x63
 10186 00003539 4E6F76656C6C2000    <1>         db "Novell ",0           ; 0x65
 10187 00003541 4D696E6978202000    <1>         db "Minix  ",0           ; 0x81
 10188 00003549 4C6E785377617000    <1>         db "LnxSwap",0           ; 0x82
 10189 00003551 4C696E7578202000    <1>         db "Linux  ",0           ; 0x83
 10190 00003559 4C6E78204C564D00    <1> 	db "Lnx LVM",0           ; 0x8E
 10191 00003561 416D6F6562612000    <1> 	db "Amoeba ",0           ; 0x93
 10192 00003569 4253442F33383600    <1>         db "BSD/386",0           ; 0xA5
 10193 00003571 4F70656E42534400    <1>         db "OpenBSD",0           ; 0xA6
 10194 00003579 4E65744253442000    <1>         db "NetBSD ",0           ; 0xA9
 10195 00003581 4253446920667300    <1>         db "BSDi fs",0           ; 0xB7
 10196 00003589 536F6C6172697300    <1>         db "Solaris",0           ; 0xBE
 10197 00003591 42654F5320202000    <1>         db "BeOS   ",0           ; 0xEB
 10198 00003599 556E6B6E6F776E00    <1>         db "Unknown",0           ; other
 10199                              <1> 
 10200                              <1> ; logical partition types which could not boot
 10201                              <1> ; include the following pri_deny_tbl
 10202                              <1> .log_deny_tbl:
 10203                              <1> %ifdef STRICT_PART_CHECK
 10204                              <1>         db 0x01, 0x0A, 0x07, 0x17
 10205                              <1> %endif
 10206                              <1> ; primary partition types which could not boot
 10207                              <1> .pri_deny_tbl:
 10208 000035A1 050F85              <1>         db 0x05, 0x0F, 0x85
 10209                              <1> %ifdef STRIC_PART_CHECK
 10210                              <1>         db 0x82, 0xA0, 0xB8, 0xE1, 0xE3, 0xF2
 10211                              <1> %endif
 10212 000035A4 00                  <1> 	db 0x00
 10213                              <1> 
 10214                              <1> ;the partition types which should be marked as auto active.
 10215                              <1> .auto_act_tbl:
 10216                              <1> ;the partition types which can be hidden.
 10217                              <1> ;the hide method is add 0x10 to the partition type.
 10218                              <1> ; ie. the type of hidden FAT16 = 0x16, etc.
 10219 000035A5 BE                  <1>         db 0xBE
 10220                              <1> .allow_hide_tbl:
 10221 000035A6 010406070B0C0E      <1>         db 0x01, 0x04, 0x06, 0x07, 0x0B, 0x0C, 0x0E
 10222                              <1> 
 10223                              <1> ; the types used to hide certain partitions.
 10224                              <1> .hidden_tbl:
 10225 000035AD 111416171B1C1E      <1>         db 0x11, 0x14, 0x16, 0x17, 0x1B, 0x1C, 0x1E
 10226                              <1>         
 10227                              <1> .end_of_tbl
 10228                              <1> 
 10229                                  %include "hd_io.asm"
 10230                              <1> ; asmsyntax=nasm
 10231                              <1> ; hd_io.asm
 10232                              <1> ;
 10233                              <1> ; Interface to BIOS int 0x13 functions
 10234                              <1> ;
 10235                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
 10236                              <1> ;
 10237                              <1> 
 10238                              <1> %define RETRY_TIMES     3
 10239                              <1> 
 10240                              <1>         bits 16
 10241                              <1> ;==============================================================================
 10242                              <1> ;check_int13ext ---- Check if the extension of int13h is presents for a driver.
 10243                              <1> ;input:
 10244                              <1> ;      dl = driver id
 10245                              <1> ;output:
 10246                              <1> ;      cf = 0, int13ext is presents
 10247                              <1> ;          cl = interface support bitmap.
 10248                              <1> ;      cf = 1, int13ext is not presents
 10249                              <1> ;==============================================================================
 10250                              <1> check_int13ext:
 10251 000035B4 803E[CC37]00        <1>         cmp byte [use_int13_ext], 0
 10252 000035B9 7414                <1>         jz .not_present
 10253                              <1> 
 10254 000035BB BBAA55              <1>         mov bx, 0x55aa
 10255 000035BE B441                <1>         mov ah, INT13H_EXT_INSTCHECK
 10256 000035C0 CD13                <1>         int 0x13                        ; Check if int13h extension is presents
 10257                              <1> ;        jc .not_present
 10258 000035C2 81FB55AA            <1>         cmp bx, 0xaa55
 10259 000035C6 7507                <1>         jne .not_present
 10260 000035C8 F6C105              <1>         test cl, EXT_SUBSET_FIXED | EXT_SUBSET_EDD
 10261                              <1> 					; Check if this drive supports extended
 10262 000035CB 7402                <1>         jz .not_present                 ; read/write
 10263 000035CD F8                  <1>         clc
 10264 000035CE C3                  <1>         ret
 10265                              <1> .not_present:
 10266 000035CF F9                  <1>         stc
 10267 000035D0 C3                  <1>         ret
 10268                              <1> 
 10269                              <1> ;==============================================================================
 10270                              <1> ;get_drive_info ---- Get drive informations
 10271                              <1> ;input:
 10272                              <1> ;      dl = drive id
 10273                              <1> ;      es:di -> buffer for drive info (struc struc_driveinfo)
 10274                              <1> ;output:
 10275                              <1> ;      cf = 0 ok
 10276                              <1> ;      cf = 1 drive is not presents
 10277                              <1> ;==============================================================================
 10278                              <1> get_drive_info:
 10279 000035D1 60                  <1>         pusha
 10280                              <1>         
 10281 000035D2 8815                <1>         mov [di + struc_driveinfo.id], dl
 10282 000035D4 C6450100            <1>         mov byte [di + struc_driveinfo.flags], 0 ; clear the flags
 10283                              <1> 
 10284 000035D8 52                  <1>         push dx
 10285 000035D9 E8D8FF              <1>         call check_int13ext
 10286 000035DC 5A                  <1>         pop dx
 10287 000035DD 7359                <1>         jnc .ext_present
 10288                              <1> 
 10289 000035DF B415                <1>         mov ah, INT13H_GETTYPE
 10290 000035E1 52                  <1>         push dx
 10291 000035E2 CD13                <1>         int 0x13
 10292 000035E4 8826[EB1F]          <1>         mov [hdio_tmp.disk_errno], ah
 10293 000035E8 5A                  <1>         pop dx
 10294 000035E9 724A                <1>         jc .drive_not_present
 10295 000035EB 08E4                <1>         or ah, ah                           ; ah = drive type, = 0 no such drive
 10296 000035ED 7446                <1>         jz .drive_not_present
 10297                              <1>         
 10298 000035EF 06                  <1>         push es
 10299 000035F0 57                  <1>         push di
 10300 000035F1 50                  <1>         push ax                             ; save drive type
 10301 000035F2 B408                <1>         mov ah, INT13H_GETINFO
 10302 000035F4 CD13                <1>         int 0x13
 10303 000035F6 8826[EB1F]          <1>         mov [hdio_tmp.disk_errno], ah
 10304 000035FA 58                  <1>         pop ax
 10305 000035FB 5F                  <1>         pop di
 10306 000035FC 07                  <1>         pop es
 10307 000035FD 7236                <1>         jc .drive_not_present
 10308                              <1> 
 10309 000035FF 50                  <1>         push ax                             ; drive type.
 10310 00003600 53                  <1>         push bx                             ; floppy type.
 10311                              <1>         
 10312 00003601 0FB6C1              <1>         movzx ax, cl                             ;
 10313 00003604 243F                <1>         and al, 0x3f                             ; get sectors per track
 10314 00003606 894506              <1>         mov [di + struc_driveinfo.sectors], ax   ;
 10315                              <1> 
 10316 00003609 86E5                <1>         xchg ah, ch                              ;
 10317 0000360B C1E102              <1>         shl cx, 2                                ;
 10318 0000360E 88E1                <1>         mov cl, ah                               ; get cylinders
 10319 00003610 41                  <1>         inc cx                                   ;
 10320 00003611 894D02              <1>         mov [di + struc_driveinfo.cylinders], cx ;
 10321                              <1> 
 10322 00003614 0FB6C6              <1> 	movzx ax, dh                             ; get heads
 10323 00003617 40                  <1>         inc ax                                   ;
 10324 00003618 894504              <1>         mov [di + struc_driveinfo.heads], ax     ;
 10325                              <1> 
 10326 0000361B 5B                  <1>         pop bx
 10327 0000361C 58                  <1>         pop ax
 10328                              <1> 
 10329 0000361D B601                <1>         mov dh, DRVFLAG_DRIVEOK
 10330 0000361F 80FC03              <1>         cmp ah, DRV_TYPE_FIXED                  ; fixed drive.
 10331 00003622 7403                <1>         je .fixed_drive
 10332 00003624 80CE04              <1>         or dh, DRVFLAG_REMOVABLE
 10333                              <1>         
 10334                              <1> .fixed_drive:
 10335 00003627 80CE02              <1>         or dh, DRVFLAG_CHSVALID
 10336 0000362A 887501              <1>         mov [di + struc_driveinfo.flags], dh
 10337 0000362D C745080002          <1> 	mov word [di + struc_driveinfo.sector_size], 0x200
 10338 00003632 E97F00              <1>         jmp .endok
 10339                              <1> 
 10340                              <1> .drive_not_present:
 10341 00003635 61                  <1>         popa
 10342 00003636 F9                  <1>         stc
 10343 00003637 C3                  <1>         ret
 10344                              <1> 
 10345                              <1> .ext_present:
 10346                              <1> ;Int13h ext is presents, use int13h ext to get drive info
 10347 00003638 B448                <1>         mov ah, INT13H_EXT_GETINFO
 10348 0000363A 8D36[8F1F]          <1>         lea si, [hdio_tmp.extparam]
 10349 0000363E C7044200            <1>         mov word [si + struc_extparam.pack_size], SIZE_OF_EXTPARAM
 10350 00003642 52                  <1>         push dx
 10351 00003643 CD13                <1>         int 0x13
 10352 00003645 8826[EB1F]          <1>         mov [hdio_tmp.disk_errno], ah
 10353 00003649 5A                  <1>         pop dx
 10354 0000364A 72E9                <1>         jc .drive_not_present
 10355                              <1>         
 10356 0000364C 8B4404              <1>         mov ax, [si + struc_extparam.cylinders]
 10357 0000364F 894502              <1>         mov [di + struc_driveinfo.cylinders], ax
 10358 00003652 8B4408              <1>         mov ax, [si + struc_extparam.heads]
 10359 00003655 894504              <1>         mov [di + struc_driveinfo.heads], ax
 10360 00003658 8B440C              <1>         mov ax, [si + struc_extparam.sectors]
 10361 0000365B 894506              <1>         mov [di + struc_driveinfo.sectors], ax
 10362 0000365E 8B4418              <1> 	mov ax, [si + struc_extparam.bytes_per_sect]
 10363 00003661 894508              <1> 	mov [di + struc_driveinfo.sector_size], ax
 10364                              <1> 
 10365 00003664 8A4402              <1>         mov al, [si + struc_extparam.flags]              ;
 10366 00003667 2406                <1>         and al, (DRVFLAG_CHSVALID + DRVFLAG_REMOVABLE)   ; fill in the
 10367 00003669 0C09                <1>         or al, DRVFLAG_EXTOK + DRVFLAG_DRIVEOK           ; struc_driveinfo.flags
 10368                              <1> 
 10369                              <1> %ifndef DISABLE_CDBOOT
 10370 0000366B 803C42              <1> 	cmp byte [si + struc_extparam.pack_size], SIZE_OF_EXTPARAM
 10371 0000366E 721F                <1> 	jb .no_edd30
 10372 00003670 817C1EDDBE          <1> 	cmp word [si + struc_extparam.dpi_key], 0xBEDD
 10373 00003675 7518                <1> 	jne .no_edd30
 10374 00003677 807C2024            <1> 	cmp byte [si + struc_extparam.dpi_length], 36
 10375 0000367B 7512                <1> 	jne .no_edd30
 10376 0000367D 66817C2841544150    <1> 	cmp dword [si + struc_extparam.interface_type], 'ATAP'
 10377 00003685 752A                <1> 	jne .not_cdrom
 10378 00003687 807C2C49            <1> 	cmp byte [si + struc_extparam.interface_type+4], 'I'
 10379 0000368B 7524                <1> 	jne .not_cdrom
 10380 0000368D 0C10                <1> 	or al, DRVFLAG_ISCDROM
 10381                              <1> 
 10382                              <1> .no_edd30:
 10383 0000368F 803C1E              <1> 	cmp byte [si + struc_extparam.pack_size], 30
 10384 00003692 721D                <1> 	jb .not_cdrom
 10385 00003694 8B5C1C              <1> 	mov bx, [si + struc_extparam.dpte_addr+2]
 10386 00003697 83FBFF              <1> 	cmp bx, 0xffff
 10387 0000369A 7415                <1> 	je .not_cdrom
 10388 0000369C 8B741A              <1> 	mov si, [si + struc_extparam.dpte_addr]
 10389 0000369F 83FEFF              <1> 	cmp si, 0xffff
 10390 000036A2 740D                <1> 	je .not_cdrom
 10391 000036A4 1E                  <1> 	push ds
 10392 000036A5 8EDB                <1> 	mov ds, bx
 10393 000036A7 3EF6440A40          <1> 	test byte [ds:si + struc_dpte.bios_spec], 0x40  ; check if is atapi dev
 10394 000036AC 1F                  <1> 	pop ds
 10395 000036AD 7402                <1> 	jz .not_cdrom
 10396 000036AF 0C10                <1> 	or al, DRVFLAG_ISCDROM
 10397                              <1> 
 10398                              <1> .not_cdrom:
 10399                              <1> %endif
 10400 000036B1 884501              <1>         mov [di + struc_driveinfo.flags], al
 10401                              <1> 
 10402                              <1> .endok:
 10403 000036B4 61                  <1>         popa
 10404 000036B5 F8                  <1>         clc
 10405 000036B6 C3                  <1>         ret
 10406                              <1>         
 10407                              <1> ;==============================================================================
 10408                              <1> ;get_drive_flags ---- get drive flags
 10409                              <1> ;input:
 10410                              <1> ;      dl = drive id
 10411                              <1> ;output:
 10412                              <1> ;      cf = 0 ok, al = drive flags
 10413                              <1> ;      cf = 1 error, al = 0
 10414                              <1> ;==============================================================================
 10415                              <1> get_drive_flags:
 10416 000036B7 57                  <1>         push di
 10417 000036B8 8D3E[E11F]          <1>         lea di, [hdio_tmp.driveinfo]
 10418 000036BC E812FF              <1>         call get_drive_info
 10419 000036BF 8A4501              <1>         mov al, [di + struc_driveinfo.flags]
 10420 000036C2 5F                  <1>         pop di
 10421 000036C3 C3                  <1>         ret
 10422                              <1> 
 10423                              <1> ;;;;;;;;;;;;;;;;;;; perhaps these will be used in future ;;;;;;;;;;;;;;;;;;;
 10424                              <1> %if 0
 10425                              <1> ;==============================================================================
 10426                              <1> ;init_drives_info ---- get all drives info
 10427                              <1> ;input:
 10428                              <1> ;      es:di -> buffer to store the info of each drives
 10429                              <1> ;               should have enought space to store 255 drives' info
 10430                              <1> ;output:
 10431                              <1> ;      dh = the number of drives (include the floppy)
 10432                              <1> ;==============================================================================
 10433                              <1> init_drives_info:
 10434                              <1>         push es
 10435                              <1>         push di
 10436                              <1>         mov cx, 256
 10437                              <1>         xor dx, dx
 10438                              <1> .loop_query:
 10439                              <1>         push cx
 10440                              <1>         push dx
 10441                              <1>         call get_drive_info
 10442                              <1>         pop dx
 10443                              <1>         pop cx
 10444                              <1>         jc .bad_drive
 10445                              <1>         inc dh
 10446                              <1>         
 10447                              <1> .bad_drive:
 10448                              <1>         add di, SIZE_OF_DRIVEINFO
 10449                              <1>         inc dl
 10450                              <1>         loop .loop_query
 10451                              <1>         
 10452                              <1>         pop di
 10453                              <1>         pop es
 10454                              <1>         ret
 10455                              <1> 
 10456                              <1> %endif
 10457                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10458                              <1> 
 10459                              <1> ;==============================================================================
 10460                              <1> ;lba2chs ---- lba to chs translation
 10461                              <1> ;input:
 10462                              <1> ;      ebx = lba address 
 10463                              <1> ;      ds : si -> drive info struc
 10464                              <1> ;output:
 10465                              <1> ;      cf = 0 success
 10466                              <1> ;            ch = low eight bits of cylinder number
 10467                              <1> ;            cl = sector number 1-63 (bits 0-5)
 10468                              <1> ;                 high two bits of cylinder (bits 6-7, hard disk only)
 10469                              <1> ;            dh = head number
 10470                              <1> ;      cf = 1 error ( cylinder exceed )
 10471                              <1> ;==============================================================================
 10472                              <1> lba2chs:
 10473 000036C4 50                  <1>         push ax
 10474 000036C5 6689D8              <1> 	mov eax, ebx
 10475                              <1> 
 10476 000036C8 660FB74C06          <1>         movzx ecx, word [si + struc_driveinfo.sectors] ; calculate sector:
 10477                              <1> 
 10478 000036CD 09C9                <1>         or cx, cx                              ; sectors per track cannot equal
 10479 000036CF 7429                <1>         jz .convert_failed                     ; to zero.
 10480                              <1>         
 10481 000036D1 6631D2              <1>         xor edx, edx
 10482 000036D4 66F7F1              <1>         div ecx                                ; sector =  lba % sects_per_track + 1
 10483 000036D7 42                  <1>         inc dx                                 ; lba1 = lba / sects_per_track
 10484 000036D8 89D1                <1>         mov cx, dx                             ;
 10485                              <1> 
 10486                              <1>                                                ; calculate head and cylinder:
 10487                              <1>                                                ; head = lba1 % num_of_heads
 10488 000036DA 660FB75C04          <1>         movzx ebx, word [si + struc_driveinfo.heads] 
 10489                              <1>                                                ; cylinder = lba1 / num_of_heads
 10490                              <1> 
 10491 000036DF 08DB                <1>         or bl, bl                              ; heads cannot equal to zero.
 10492 000036E1 7417                <1>         jz .convert_failed                     ;
 10493                              <1>         
 10494 000036E3 6631D2              <1>         xor edx, edx
 10495 000036E6 66F7F3              <1>         div ebx                                ;
 10496                              <1>         
 10497 000036E9 88D6                <1>         mov dh, dl                             ; head = dl <= 255
 10498 000036EB 3DFF03              <1>         cmp ax, MAX_CYLS                       ; cylinder = ax
 10499 000036EE 770A                <1>         ja .convert_failed                     ; cylinder is too big.
 10500                              <1> 
 10501 000036F0 86C4                <1>         xchg al, ah                            ;
 10502 000036F2 C0E006              <1>         shl al, 6                              ; fill cylinder and sector into
 10503 000036F5 09C1                <1>         or cx, ax                              ; cx
 10504 000036F7 58                  <1>         pop ax
 10505 000036F8 F8                  <1>         clc
 10506 000036F9 C3                  <1>         ret
 10507                              <1>         
 10508                              <1> .convert_failed:
 10509 000036FA C606[EB1F]FE        <1>         mov byte [hdio_tmp.disk_errno], 0xFE             ; invalid LBA address
 10510 000036FF 58                  <1>         pop ax
 10511 00003700 F9                  <1>         stc
 10512 00003701 C3                  <1>         ret
 10513                              <1>         
 10514                              <1> ;==============================================================================
 10515                              <1> ;disk_access_low ---- read / write sectors on disk
 10516                              <1> ;input:
 10517                              <1> ;      ah      = function id, ( 02 = read, 03 = write )
 10518                              <1> ;      al      = number of sectors to be accessed
 10519                              <1> ;      ebx     = lba address
 10520                              <1> ;      ds : si -> drive info struc
 10521                              <1> ;      es : di -> buffer to get/store data
 10522                              <1> ;output:
 10523                              <1> ;      cf = 0 success
 10524                              <1> ;      cf = 1 error
 10525                              <1> ;==============================================================================
 10526                              <1> disk_access_low:
 10527 00003702 60                  <1>         pusha
 10528                              <1>         
 10529 00003703 8A7401              <1>         mov dh, [si + struc_driveinfo.flags]
 10530 00003706 F6C601              <1>         test dh, DRVFLAG_DRIVEOK ; check if drive ok
 10531 00003709 7467                <1>         jz .access_error
 10532                              <1>         
 10533 0000370B F6C608              <1>         test dh, DRVFLAG_EXTOK
 10534 0000370E 7440                <1>         jz .no_ext
 10535                              <1>         
 10536                              <1> ;int13h extension is present, use it
 10537                              <1>         
 10538 00003710 8A14                <1>         mov dl, [si + struc_driveinfo.id]    ; get drive id
 10539 00003712 80C440              <1>         add ah, 0x40                         ; ext read func id = 0x42
 10540 00003715 8D36[D11F]          <1>         lea si, [hdio_tmp.int13ext]
 10541 00003719 6631C9              <1>         xor ecx, ecx
 10542 0000371C C60410              <1>         mov byte [si + struc_int13ext.pack_size], 0x10 ;
 10543 0000371F 66894C0C            <1>         mov [si + struc_int13ext.blk_num_high1], ecx ; clear and set
 10544 00003723 884C01              <1>         mov [si + struc_int13ext.reserved], cl       ; some stuff.
 10545 00003726 884C03              <1>         mov [si + struc_int13ext.reserved1], cl      ;
 10546                              <1> 
 10547 00003729 897C04              <1>         mov [si + struc_int13ext.buf_addr_off], di
 10548 0000372C 8C4406              <1>         mov [si + struc_int13ext.buf_addr_seg], es
 10549 0000372F 66895C08            <1>         mov [si + struc_int13ext.blk_num_low1], ebx
 10550                              <1> 
 10551                              <1> .retry_ext_read:
 10552 00003733 884402              <1>         mov [si + struc_int13ext.blk_count], al
 10553                              <1>         
 10554 00003736 50                  <1>         push ax
 10555 00003737 52                  <1>         push dx
 10556 00003738 56                  <1>         push si
 10557 00003739 CD13                <1>         int 0x13
 10558 0000373B 8826[EB1F]          <1>         mov [hdio_tmp.disk_errno], ah
 10559 0000373F 5E                  <1>         pop si
 10560 00003740 5A                  <1>         pop dx
 10561 00003741 58                  <1>         pop ax
 10562 00003742 732F                <1>         jnc .access_ok
 10563 00003744 E86C00              <1>         call reset_drive
 10564 00003747 FEC6                <1>         inc dh
 10565 00003749 80FE03              <1>         cmp dh, RETRY_TIMES                 ; retry 3 times
 10566 0000374C 72E5                <1>         jb .retry_ext_read
 10567 0000374E EB22                <1>         jmp short .access_error
 10568                              <1> 
 10569                              <1> ;int13h extension is not ok, use old int13h
 10570                              <1> .no_ext:
 10571 00003750 E871FF              <1>         call lba2chs
 10572 00003753 721D                <1>         jc .access_error
 10573 00003755 8A14                <1>         mov dl, [si + struc_driveinfo.id]   ; dl = drive id
 10574 00003757 89FB                <1>         mov bx, di                          ; es : bx -> buffer
 10575 00003759 31FF                <1>         xor di, di
 10576                              <1>         
 10577                              <1> .retry_read:
 10578 0000375B 50                  <1>         push ax
 10579 0000375C 52                  <1>         push dx
 10580 0000375D 53                  <1>         push bx
 10581 0000375E CD13                <1>         int 0x13
 10582 00003760 8826[EB1F]          <1>         mov [hdio_tmp.disk_errno], ah
 10583 00003764 5B                  <1>         pop bx
 10584 00003765 5A                  <1>         pop dx
 10585 00003766 58                  <1>         pop ax
 10586 00003767 730A                <1>         jnc .access_ok
 10587 00003769 E84700              <1>         call reset_drive
 10588 0000376C 47                  <1>         inc di
 10589 0000376D 83FF03              <1>         cmp di, RETRY_TIMES                 ; retry 3 times
 10590 00003770 72E9                <1>         jb .retry_read
 10591                              <1> 
 10592                              <1> .access_error:
 10593 00003772 F9                  <1>         stc
 10594                              <1> .access_ok:
 10595 00003773 61                  <1>         popa
 10596 00003774 C3                  <1>         ret
 10597                              <1> 
 10598                              <1> ;==============================================================================
 10599                              <1> ;disk_access ---- read / write sectors on disk
 10600                              <1> ;input:
 10601                              <1> ;      ah = function id, ( 02 = read, 03 = write )
 10602                              <1> ;      al = number of sectors to be accessed
 10603                              <1> ;      ebx = lba address
 10604                              <1> ;      dl = drive id
 10605                              <1> ;      es : di -> buffer
 10606                              <1> ;output:
 10607                              <1> ;      cf = 0 success
 10608                              <1> ;      cf = 1 error
 10609                              <1> ;==============================================================================
 10610                              <1> disk_access:
 10611 00003775 56                  <1>         push si
 10612 00003776 57                  <1>         push di
 10613 00003777 6653                <1> 	push ebx
 10614                              <1> 
 10615 00003779 06                  <1>         push es
 10616 0000377A 1E                  <1>         push ds                         ; ds -> es, hdio_tmp.driveinfo is in ds segment.
 10617 0000377B 07                  <1>         pop es
 10618                              <1>         
 10619 0000377C 8D3E[E11F]          <1>         lea di, [hdio_tmp.driveinfo]
 10620 00003780 E84EFE              <1>         call get_drive_info
 10621                              <1>         
 10622 00003783 07                  <1>         pop es
 10623 00003784 665B                <1> 	pop ebx
 10624 00003786 5F                  <1>         pop di
 10625                              <1>         
 10626 00003787 7207                <1>         jc .access_error
 10627 00003789 8D36[E11F]          <1>         lea si, [hdio_tmp.driveinfo]
 10628 0000378D E872FF              <1>         call disk_access_low
 10629                              <1> .access_error:
 10630 00003790 5E                  <1>         pop si
 10631 00003791 C3                  <1>         ret
 10632                              <1> 
 10633                              <1> 
 10634                              <1> %if 0
 10635                              <1> ;==============================================================================
 10636                              <1> ;get_cdrom_devinfo ---- get the CDROM's device info, e.g. io port
 10637                              <1> ;input: dl = drive id
 10638                              <1> ;output: cf = 0 success, ax = base io port, bx = ctrl port,
 10639                              <1> ;        cx = device specification
 10640                              <1> ;==============================================================================
 10641                              <1> get_cdrom_devinfo:
 10642                              <1> 	push si
 10643                              <1> 	call get_drive_flags
 10644                              <1> 	test al, DRVFLAG_ISCDROM
 10645                              <1> 	jz .not_cdrom
 10646                              <1> 
 10647                              <1> 	mov si, hdio_tmp.extparam
 10648                              <1> 	mov word [si], SIZE_OF_EXTPARAM
 10649                              <1> 	mov ah, 0x48
 10650                              <1> 	int 0x13
 10651                              <1> 
 10652                              <1> 	jc .not_cdrom
 10653                              <1> 	cmp byte [si], 30
 10654                              <1> 	jb .not_cdrom
 10655                              <1> 	mov ax, [si + struc_extparam.dpte_addr + 2]
 10656                              <1> 	cmp ax, 0xffff
 10657                              <1> 	je .not_cdrom
 10658                              <1> 
 10659                              <1> 	push es
 10660                              <1> 	push di
 10661                              <1> 	mov es, ax
 10662                              <1> 	mov di, [si + struc_extparam.dpte_addr]
 10663                              <1> 	mov ax, [es:di + struc_dpte.base_io]
 10664                              <1> 	mov bx, [es:di + struc_dpte.ctrl_io]
 10665                              <1> 	pop di
 10666                              <1> 	pop es
 10667                              <1> 
 10668                              <1> 	cmp byte [si], SIZE_OF_EXTPARAM
 10669                              <1> 	jb .not_cdrom
 10670                              <1> 	mov cx, [si + struc_extparam.device_path]
 10671                              <1> 	clc
 10672                              <1> 	jmp short .ok
 10673                              <1> 
 10674                              <1> .not_cdrom:
 10675                              <1> 	stc
 10676                              <1> .ok:
 10677                              <1> 	pop si
 10678                              <1> 	ret
 10679                              <1> 
 10680                              <1> %endif
 10681                              <1> 
 10682                              <1> %ifndef DISABLE_CDBOOT
 10683                              <1> ;==============================================================================
 10684                              <1> ;get_cdrom_boot_catalog ---- get the CDROM's boot catalog
 10685                              <1> ;input:
 10686                              <1> ;	dl = drive id
 10687                              <1> ;	es:di -> buffer
 10688                              <1> ;output:
 10689                              <1> ;	cf =0 success
 10690                              <1> ;	cf =1 error
 10691                              <1> ;==============================================================================
 10692                              <1> get_cdrom_boot_catalog:
 10693 00003792 60                  <1> 	pusha
 10694 00003793 BE[871F]            <1> 	mov si, hdio_tmp.cdbc_cmd
 10695 00003796 C60408              <1> 	mov byte [si], SIZE_OF_CDBC_CMD
 10696 00003799 C6440101            <1> 	mov byte [si+struc_cdbc_cmd.sector_count], 1
 10697 0000379D 897C02              <1> 	mov [si+struc_cdbc_cmd.buf_addr_off], di
 10698 000037A0 8C4404              <1> 	mov [si+struc_cdbc_cmd.buf_addr_seg], es
 10699 000037A3 31DB                <1> 	xor bx, bx
 10700 000037A5 895C06              <1> 	mov [si+struc_cdbc_cmd.begnning_sect], bx
 10701 000037A8 B8004D              <1> 	mov ax, 0x4d00
 10702 000037AB CD13                <1> 	int 0x13
 10703 000037AD 8826[EB1F]          <1> 	mov [hdio_tmp.disk_errno], ah
 10704 000037B1 61                  <1> 	popa
 10705 000037B2 C3                  <1> 	ret
 10706                              <1> %endif
 10707                              <1> 
 10708                              <1> ;==============================================================================
 10709                              <1> ;reset_drive ---- reset the drive
 10710                              <1> ;input:
 10711                              <1> ;      dl = drive id
 10712                              <1> ;output:
 10713                              <1> ;      cf = 0 success
 10714                              <1> ;      cf = 1 error
 10715                              <1> ;==============================================================================
 10716                              <1> reset_drive:
 10717 000037B3 60                  <1>         pusha
 10718 000037B4 31C0                <1>         xor ax, ax
 10719 000037B6 CD13                <1>         int 0x13
 10720 000037B8 61                  <1>         popa
 10721 000037B9 C3                  <1>         ret
 10722                              <1> 
 10723                              <1> ;==============================================================================
 10724                              <1> ; get_last_disk_errno ---- get the last disk error number
 10725                              <1> ; input:
 10726                              <1> ;	none
 10727                              <1> ; output:
 10728                              <1> ;	ax = errno
 10729                              <1> ;==============================================================================
 10730                              <1> get_last_disk_errno:
 10731 000037BA A1[EB1F]            <1> 	mov ax, [hdio_tmp.disk_errno]
 10732 000037BD C3                  <1> 	ret
 10733                              <1> 
 10734                              <1> ;==============================================================================
 10735                              <1> ;get_drvid_str ---- get driver id string
 10736                              <1> ;input:
 10737                              <1> ;	dl = drive id
 10738                              <1> ;	es:di -> buffer
 10739                              <1> ;output:
 10740                              <1> ;	es:di -> point to the end of the string
 10741                              <1> ;==============================================================================
 10742                              <1> get_drvid_str:
 10743 000037BE 60                  <1> 	pusha
 10744                              <1> 
 10745                              <1> %ifdef SHOW_DRV_NAME
 10746                              <1> 	call get_drive_flags
 10747                              <1> 	cmp dl, MIN_HD_ID
 10748                              <1> 	jb .floppy
 10749                              <1> 	test al, DRVFLAG_REMOVABLE
 10750                              <1> 	jz .harddisk
 10751                              <1> 	test al, DRVFLAG_ISCDROM
 10752                              <1> 	jnz .cdrom
 10753                              <1> 	mov ax, 'RD'
 10754                              <1> 	jmp short .show_drv_name
 10755                              <1> .floppy:
 10756                              <1> 	mov ax, 'FD'
 10757                              <1> 	jmp short .show_drv_name
 10758                              <1> .harddisk:
 10759                              <1> 	mov ax, 'HD'
 10760                              <1> 	jmp short .show_drv_name
 10761                              <1> .cdrom:
 10762                              <1> 	mov ax, 'CD'
 10763                              <1> .show_drv_name:
 10764                              <1> 	stosb
 10765                              <1> 	mov al, ah
 10766                              <1> 	stosb
 10767                              <1> 
 10768                              <1> 	movzx ax, dl
 10769                              <1> 	and al, 0x0F
 10770                              <1> 	mov cl, 1
 10771                              <1> 	call htoa
 10772                              <1> %else
 10773 000037BF 0FB6C2              <1>         movzx ax, dl                                ; fill drive id
 10774 000037C2 B103                <1>         mov cl, 3                                   ;
 10775 000037C4 E83FEF              <1>         call itoa                                   ;
 10776                              <1> %endif
 10777 000037C7 61                  <1> 	popa
 10778 000037C8 83C703              <1> 	add di, 3
 10779 000037CB C3                  <1> 	ret
 10780                              <1> 
 10781 000037CC 01                  <1> use_int13_ext  db 1
 10782                                  %include "myint13h.asm"
 10783                              <1> ; asmsyntax=nasm
 10784                              <1> ;
 10785                              <1> ; myint13h.asm
 10786                              <1> ;
 10787                              <1> ; install / uninstall func for my int13h
 10788                              <1> ;
 10789                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
 10790                              <1> ;
 10791                              <1> %ifndef DISABLE_CDBOOT
 10792                              <1>   %define SIZE_OF_EDD30	8	; my EDD3.0 and ATAPI driver need 6K mem
 10793                              <1> %else
 10794                              <1>   %define SIZE_OF_EDD30	1	; my SWAP Driver ID wrapper needs 1K mem
 10795                              <1> %endif
 10796                              <1> 
 10797                              <1> %ifndef DISABLE_CDBOOT
 10798                              <1>   %define EDD30_SIG1	'BM'
 10799                              <1>   %define EDD30_SIG2	'CB'
 10800                              <1> %else
 10801                              <1>   %define EDD30_SIG1	'BM'
 10802                              <1>   %define EDD30_SIG2	'SD'
 10803                              <1> %endif
 10804                              <1> 
 10805                              <1> ;=============================================================================
 10806                              <1> ;install_myint13h ---- install my int13h handler
 10807                              <1> ; bl = 0 init cdrom
 10808                              <1> ; bl = 1 don't init cdrom
 10809                              <1> ;=============================================================================
 10810                              <1> install_myint13h:
 10811 000037CD 60                  <1> 	pusha
 10812 000037CE 06                  <1> 	push es
 10813 000037CF 31C0                <1> 	xor ax, ax
 10814 000037D1 8EC0                <1> 	mov es, ax
 10815                              <1> 
 10816 000037D3 E87300              <1> 	call check_myint13h
 10817 000037D6 7209                <1> 	jc .not_inst
 10818 000037D8 26A14E00            <1> 	mov ax, [es:0x13*4+2]
 10819 000037DC A3[A33C]            <1> 	mov [myint13h_tmp.edd30_seg], ax
 10820                              <1> 
 10821 000037DF EB2D                <1> 	jmp .end
 10822                              <1> 	
 10823                              <1> .not_inst:
 10824                              <1> 
 10825                              <1> %ifndef DISABLE_CDBOOT
 10826 000037E1 53                  <1> 	push bx
 10827                              <1> %endif
 10828 000037E2 26832E130408        <1> 	sub word [es:0x413], SIZE_OF_EDD30 ; allocate memory for module edd30
 10829 000037E8 CD12                <1> 	int 0x12
 10830 000037EA C1E006              <1> 	shl ax, 6
 10831 000037ED 50                  <1> 	push ax
 10832 000037EE 07                  <1> 	pop es
 10833 000037EF 31FF                <1> 	xor di, di
 10834 000037F1 BE[6738]            <1> 	mov si, module_edd30
 10835 000037F4 B9900B              <1> 	mov cx, end_of_mod_edd30 - module_edd30
 10836 000037F7 FC                  <1> 	cld
 10837 000037F8 F3A4                <1> 	rep movsb
 10838                              <1> 
 10839 000037FA A3[A33C]            <1> 	mov [myint13h_tmp.edd30_seg], ax
 10840                              <1> 
 10841                              <1> %ifndef DISABLE_CDBOOT
 10842 000037FD 5B                  <1> 	pop bx
 10843 000037FE 08DB                <1> 	or bl, bl
 10844 00003800 7506                <1> 	jnz .go_inst_int13
 10845 00003802 B402                <1> 	mov ah, 2
 10846 00003804 FF1E[A13C]          <1> 	call far [myint13h_tmp.edd30_off]	;initialize cdrom drivers
 10847                              <1> %endif
 10848                              <1> 
 10849                              <1> .go_inst_int13:
 10850 00003808 31C0                <1> 	xor ax, ax
 10851 0000380A FF1E[A13C]          <1> 	call far [myint13h_tmp.edd30_off]	;install my int13h 
 10852                              <1> 
 10853                              <1> .end:
 10854 0000380E 07                  <1> 	pop es
 10855 0000380F 61                  <1> 	popa
 10856 00003810 C3                  <1> 	ret
 10857                              <1> 
 10858                              <1> ;=============================================================================
 10859                              <1> ;uninstall_myint13h ---- uninstall my int13h handler
 10860                              <1> ;=============================================================================
 10861                              <1> uninstall_myint13h:
 10862 00003811 60                  <1> 	pusha
 10863 00003812 E83400              <1> 	call check_myint13h
 10864 00003815 7214                <1> 	jc .not_inst
 10865                              <1> 
 10866 00003817 B401                <1> 	mov ah, 1
 10867 00003819 FF1E[A13C]          <1> 	call far [myint13h_tmp.edd30_off]
 10868 0000381D 720C                <1> 	jc .not_inst
 10869                              <1> 
 10870 0000381F 06                  <1> 	push es
 10871 00003820 31C0                <1> 	xor ax, ax
 10872 00003822 8EC0                <1> 	mov es, ax
 10873 00003824 268306130408        <1> 	add word [es:0x413], SIZE_OF_EDD30 ; free memory
 10874 0000382A 07                  <1> 	pop es
 10875                              <1> 
 10876                              <1> .not_inst:
 10877 0000382B 61                  <1> 	popa
 10878 0000382C C3                  <1> 	ret
 10879                              <1> 
 10880                              <1> ;=============================================================================
 10881                              <1> ;set_drive_map
 10882                              <1> ;input: bx, cx drive map
 10883                              <1> ;=============================================================================
 10884                              <1> set_drive_map:
 10885 0000382D 60                  <1> 	pusha
 10886 0000382E E81800              <1> 	call check_myint13h
 10887 00003831 7206                <1> 	jc .end
 10888 00003833 B403                <1> 	mov ah, 3
 10889                              <1> 
 10890 00003835 FF1E[A13C]          <1> 	call far [myint13h_tmp.edd30_off]
 10891                              <1> .end:
 10892 00003839 61                  <1> 	popa
 10893 0000383A C3                  <1> 	ret
 10894                              <1> 
 10895                              <1> ;=============================================================================
 10896                              <1> ;set_io_ports
 10897                              <1> ;input: bx, cx io ports
 10898                              <1> ;=============================================================================
 10899                              <1> set_io_ports:
 10900 0000383B 60                  <1> 	pusha
 10901 0000383C E80A00              <1> 	call check_myint13h
 10902 0000383F 7206                <1> 	jc .end
 10903 00003841 B404                <1> 	mov ah, 4
 10904                              <1> 
 10905 00003843 FF1E[A13C]          <1> 	call far [myint13h_tmp.edd30_off]
 10906                              <1> .end:
 10907 00003847 61                  <1> 	popa
 10908 00003848 C3                  <1> 	ret
 10909                              <1> 
 10910                              <1> ;=============================================================================
 10911                              <1> ;check_myint13h ---- check if myint13h is present
 10912                              <1> ;=============================================================================
 10913                              <1> check_myint13h:
 10914 00003849 60                  <1> 	pusha
 10915 0000384A B86666              <1> 	mov ax, 0x6666
 10916 0000384D BB424D              <1> 	mov bx, EDD30_SIG1
 10917 00003850 B94342              <1> 	mov cx, EDD30_SIG2
 10918 00003853 F8                  <1> 	clc
 10919 00003854 CD13                <1> 	int 0x13
 10920 00003856 720C                <1> 	jc .absent
 10921 00003858 81FB4342            <1> 	cmp bx, EDD30_SIG2
 10922 0000385C 7506                <1> 	jne .absent
 10923 0000385E 81F9424D            <1> 	cmp cx, EDD30_SIG1
 10924 00003862 7401                <1> 	je .end
 10925                              <1> .absent:
 10926 00003864 F9                  <1> 	stc
 10927                              <1> .end:
 10928 00003865 61                  <1> 	popa
 10929 00003866 C3                  <1> 	ret
 10930                              <1> 
 10931                              <1> module_edd30:
 10932 00003866 <incbin>            <1> incbin "edd30.bin"
 10933                              <1> end_of_mod_edd30:
 10934                                  
 10935                                  ;=============================================================================
 10936                                  ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  DATA AREA  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 10937                                  ;=============================================================================
 10938                                  
 10939                                  %define ROOT_WINDOW_ACTION_NUMBER (main_action_table.end_of_root_window - main_action_table.root_window) / SIZE_OF_STRUC_ACTION
 10940                                  %define BOOT_MENU_ACTION_NUMBER (main_action_table.end_of_boot_menu - main_action_table.boot_menu) / SIZE_OF_STRUC_ACTION
 10941                                  %define MAIN_MENU_ACTION_NUMBER (main_action_table.end_of_main_menu - main_action_table.main_menu) / SIZE_OF_STRUC_ACTION
 10942                                  %define RECORD_MENU_ACTION_NUMBER (main_action_table.end_of_record_menu - main_action_table.record_menu) / SIZE_OF_STRUC_ACTION
 10943                                  %define SYS_MENU_ACTION_NUMBER (main_action_table.end_of_sys_menu - main_action_table.sys_menu) / SIZE_OF_STRUC_ACTION
 10944                                  
 10945                                  %define MAIN_MENU_ITEMS_NUMBER   11
 10946                                  %define RECORD_MENU_ITEMS_NUMBER 16
 10947                                  %define SYS_MENU_ITEMS_NUMBER    18
 10948                                  ;=============================================================================
 10949                                  ; Windows data
 10950                                  ;=============================================================================
 10951                                  main_windows_data:
 10952                                  .root_window    istruc struc_window
 10953 000043F7 0900                    		at struc_window.flags,                  dw WINFLAG_OPEN | WINFLAG_NO_FOCUS
 10954 000043F9 0000                    		at struc_window.title,                  dw 0
 10955 000043FB 0000                    		at struc_window.win_attr,               dw 0
 10956 000043FD 0000                    		at struc_window.win_pos,                dw 0
 10957 000043FF 0000                    		at struc_window.win_size,               dw 0
 10958 00004401 0000                    		at struc_window.parent_win,             dw 0
 10959 00004403 0000                    		at struc_window.next_win,               dw 0
 10960 00004405 0000                    		at struc_window.previous_win,           dw 0
 10961 00004407 2D00                    		at struc_window.act_num,                dw ROOT_WINDOW_ACTION_NUMBER
 10962 00004409 [BD44]                  		at struc_window.act_table,              dw main_action_table.root_window
 10963 0000440B [8B24]                  		at struc_window.default_event_handle,   dw window_default_event_handle
 10964 0000440D [9724]                  		at struc_window.event_handle,           dw window_event_handle
 10965 0000440F [4014]                  		at struc_window.draw_body_proc,         dw root_window_draw_body_proc
 10966                                  		iend
 10967                                  
 10968                                  .boot_menu      istruc struc_menu_box
 10969 00004411 F400                    		at struc_window.flags,                  dw WINFLAG_FRAMED | MENUFLAG_SCROLLBAR | MENUFLAG_SINK_UPPER | MENUFLAG_SINK_WIDTH | MENUFLAG_SINK_BOTTOM
 10970 00004413 [6C46]                  		at struc_window.title,                  dw str_idx.boot_menu_title
 10971 00004415 F13F                    		at struc_window.win_attr,               dw 0x3FF1
 10972 00004417 0000                    		at struc_window.win_pos,                dw 0
 10973 00004419 0000                    		at struc_window.win_size,               dw 0
 10974 0000441B [F743]                  		at struc_window.parent_win,             dw .root_window
 10975 0000441D 0000                    		at struc_window.next_win,               dw 0
 10976 0000441F 0000                    		at struc_window.previous_win,           dw 0
 10977 00004421 1300                    		at struc_window.act_num,                dw BOOT_MENU_ACTION_NUMBER
 10978 00004423 [9E45]                  		at struc_window.act_table,              dw main_action_table.boot_menu
 10979 00004425 [6121]                  		at struc_window.default_event_handle,   dw menubox_default_event_handle
 10980 00004427 [9724]                  		at struc_window.event_handle,           dw window_event_handle
 10981 00004429 [2420]                  		at struc_window.draw_body_proc,         dw menubox_draw_body_proc
 10982 0000442B [6E46]                  		at struc_menu_box.menu_header,          dw str_idx.boot_menu_header
 10983 0000442D 1F                      		at struc_menu_box.menu_header_attr,     db 0x1F
 10984 0000442E 707C                    		at struc_menu_box.menu_norm_attr,       dw 0x7C70
 10985 00004430 0F0C                    		at struc_menu_box.menu_focus_attr,      dw 0x0C0F
 10986 00004432 0000                                    at struc_menu_box.menu_area_pos,        dw 0
 10987 00004434 0000                                    at struc_menu_box.menu_area_size,       dw 0
 10988 00004436 3F                      		at struc_menu_box.scrollbar_attr,       db 0x3F
 10989 00004437 00                      		at struc_menu_box.items_num,            db 0
 10990 00004438 00                      		at struc_menu_box.focus_item,           db 0
 10991 00004439 00                      		at struc_menu_box.first_visible_item,   db 0
 10992 0000443A [BE15]                  		at struc_menu_box.item_str_proc,        dw boot_menu_item_str_proc
 10993                                  		iend
 10994                                  
 10995                                  .main_menu      istruc struc_menu_box
 10996 0000443C 0400                    		at struc_window.flags,                  dw WINFLAG_FRAMED
 10997 0000443E [E446]                  		at struc_window.title,                  dw str_idx.main_menu_title
 10998 00004440 F130                    		at struc_window.win_attr,               dw 0x30F1
 10999 00004442 0101                    		at struc_window.win_pos,                dw 0x0101
 11000 00004444 000D                    		at struc_window.win_size,               db 0, MAIN_MENU_ITEMS_NUMBER+2
 11001 00004446 [1144]                  		at struc_window.parent_win,             dw .boot_menu
 11002 00004448 0000                    		at struc_window.next_win,               dw 0
 11003 0000444A 0000                    		at struc_window.previous_win,           dw 0
 11004 0000444C 0B00                    		at struc_window.act_num,                dw MAIN_MENU_ACTION_NUMBER
 11005 0000444E [BD44]                  		at struc_window.act_table,              dw main_action_table.main_menu
 11006 00004450 [6121]                  		at struc_window.default_event_handle,   dw menubox_default_event_handle
 11007 00004452 [9724]                  		at struc_window.event_handle,           dw window_event_handle
 11008 00004454 [2420]                  		at struc_window.draw_body_proc,	        dw menubox_draw_body_proc
 11009 00004456 0000                    		at struc_menu_box.menu_header,          dw 0
 11010 00004458 3F                      		at struc_menu_box.menu_header_attr,     db 0x3F
 11011 00004459 303C                    		at struc_menu_box.menu_norm_attr,       dw 0x3C30
 11012 0000445B 070C                    		at struc_menu_box.menu_focus_attr,      dw 0x0C07
 11013 0000445D 0000                                    at struc_menu_box.menu_area_pos,        dw 0
 11014 0000445F 0000                                    at struc_menu_box.menu_area_size,       dw 0
 11015 00004461 3F                      		at struc_menu_box.scrollbar_attr,       db 0x3F
 11016 00004462 0B                      		at struc_menu_box.items_num,            db MAIN_MENU_ITEMS_NUMBER
 11017 00004463 00                      		at struc_menu_box.focus_item,           db 0
 11018 00004464 00                      		at struc_menu_box.first_visible_item,   db 0
 11019 00004465 [D815]                  		at struc_menu_box.item_str_proc,        dw main_menu_item_str_proc
 11020                                  		iend
 11021                                  
 11022                                  .record_menu    istruc struc_menu_box
 11023 00004467 0400                    		at struc_window.flags,                  dw WINFLAG_FRAMED
 11024 00004469 [FC46]                  		at struc_window.title,                  dw str_idx.record_menu_title
 11025 0000446B F130                    		at struc_window.win_attr,               dw 0x30F1
 11026 0000446D 0202                    		at struc_window.win_pos,                dw 0x0202
 11027 0000446F 0012                    		at struc_window.win_size,               db 0, RECORD_MENU_ITEMS_NUMBER+2
 11028 00004471 [1144]                  		at struc_window.parent_win,             dw .boot_menu
 11029 00004473 0000                    		at struc_window.next_win,               dw 0
 11030 00004475 0000                    		at struc_window.previous_win,           dw 0
 11031 00004477 1000                    		at struc_window.act_num,                dw RECORD_MENU_ACTION_NUMBER
 11032 00004479 [F444]                  		at struc_window.act_table,              dw main_action_table.record_menu
 11033 0000447B [6121]                  		at struc_window.default_event_handle,   dw menubox_default_event_handle
 11034 0000447D [9724]                  		at struc_window.event_handle,           dw window_event_handle
 11035 0000447F [2420]                  		at struc_window.draw_body_proc,	        dw menubox_draw_body_proc
 11036 00004481 0000                    		at struc_menu_box.menu_header,          dw 0
 11037 00004483 3F                      		at struc_menu_box.menu_header_attr,     db 0x3F
 11038 00004484 303C                    		at struc_menu_box.menu_norm_attr,       dw 0x3C30
 11039 00004486 070C                    		at struc_menu_box.menu_focus_attr,      dw 0x0C07
 11040 00004488 0000                                    at struc_menu_box.menu_area_pos,        dw 0
 11041 0000448A 0000                                    at struc_menu_box.menu_area_size,       dw 0
 11042 0000448C 3F                      		at struc_menu_box.scrollbar_attr,       db 0x3F
 11043 0000448D 10                      		at struc_menu_box.items_num,            db RECORD_MENU_ITEMS_NUMBER
 11044 0000448E 00                      		at struc_menu_box.focus_item,           db 0
 11045 0000448F 00                      		at struc_menu_box.first_visible_item,   db 0
 11046 00004490 [DD15]                  		at struc_menu_box.item_str_proc,        dw record_menu_item_str_proc
 11047                                  		iend
 11048                                  
 11049                                  .sys_menu       istruc struc_menu_box
 11050 00004492 0400                    		at struc_window.flags,                  dw WINFLAG_FRAMED
 11051 00004494 [1E47]                  		at struc_window.title,                  dw str_idx.sys_menu_title
 11052 00004496 F130                    		at struc_window.win_attr,               dw 0x30F1
 11053 00004498 0303                    		at struc_window.win_pos,                dw 0x0303
 11054 0000449A 0014                    		at struc_window.win_size,               db 0, SYS_MENU_ITEMS_NUMBER+2
 11055 0000449C [1144]                  		at struc_window.parent_win,             dw .boot_menu
 11056 0000449E 0000                    		at struc_window.next_win,               dw 0
 11057 000044A0 0000                    		at struc_window.previous_win,           dw 0
 11058 000044A2 1000                    		at struc_window.act_num,                dw SYS_MENU_ACTION_NUMBER
 11059 000044A4 [4445]                  		at struc_window.act_table,              dw main_action_table.sys_menu
 11060 000044A6 [6121]                  		at struc_window.default_event_handle,   dw menubox_default_event_handle
 11061 000044A8 [9724]                  		at struc_window.event_handle,           dw window_event_handle
 11062 000044AA [2420]                  		at struc_window.draw_body_proc,         dw menubox_draw_body_proc
 11063 000044AC 0000                    		at struc_menu_box.menu_header,          dw 0
 11064 000044AE 3F                      		at struc_menu_box.menu_header_attr,     db 0x3F
 11065 000044AF 303C                    		at struc_menu_box.menu_norm_attr,       dw 0x3C30
 11066 000044B1 070C                    		at struc_menu_box.menu_focus_attr,      dw 0x0C07
 11067 000044B3 0000                                    at struc_menu_box.menu_area_pos,        dw 0
 11068 000044B5 0000                                    at struc_menu_box.menu_area_size,       dw 0
 11069 000044B7 3F                      		at struc_menu_box.scrollbar_attr,       db 0x3F
 11070 000044B8 12                      		at struc_menu_box.items_num,            db SYS_MENU_ITEMS_NUMBER
 11071 000044B9 00                      		at struc_menu_box.focus_item,           db 0
 11072 000044BA 00                      		at struc_menu_box.first_visible_item,   db 0
 11073 000044BB [E215]                  		at struc_menu_box.item_str_proc,        dw sys_menu_item_str_proc
 11074                                  		iend
 11075                                  
 11076                                  .end_of_windows_data:
 11077                                  
 11078                                  ;=============================================================================
 11079                                  ; Action table
 11080                                  ;=============================================================================
 11081                                  main_action_table:
 11082                                  
 11083                                  .root_window:
 11084                                  
 11085                                  .main_menu:
 11086 000044BD 08                              db  ACTFLAG_REDRAW_SCR
 11087 000044BE 003B                            dw  kbF1
 11088 000044C0 [0A0B]                          dw  main_show_help
 11089                                  
 11090 000044C2 08                              db  ACTFLAG_REDRAW_SCR
 11091 000044C3 005E                            dw  kbCtrlF1
 11092 000044C5 [200B]                          dw  main_show_about
 11093                                  
 11094 000044C7 88                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_SECURITY
 11095 000044C8 003C                            dw  kbF2
 11096 000044CA [6B0B]                          dw  main_save_changes
 11097                                  
 11098 000044CC 54                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_AUTH_RECORD | ACTFLAG_CHK_RECNUM
 11099 000044CD 0000                            dw  0
 11100 000044CF [EE0D]                          dw  main_boot_it
 11101                                  
 11102 000044D1 04                              db  ACTFLAG_REDRAW_WIN
 11103 000044D2 0000                            dw  0
 11104 000044D4 [B811]                          dw  main_boot_prev_in_menu
 11105                                  
 11106 000044D6 00                              db  0
 11107 000044D7 0000                            dw  0
 11108 000044D9 0000                            dw  0
 11109                                  
 11110 000044DB 08                              db  ACTFLAG_REDRAW_SCR
 11111 000044DC 0013                            dw  kbAltR
 11112 000044DE [3D0B]                          dw  main_show_record_menu
 11113                                  
 11114 000044E0 08                              db  ACTFLAG_REDRAW_SCR
 11115 000044E1 001F                            dw  kbAltS
 11116 000044E3 [440B]                          dw  main_show_sys_menu
 11117                                  
 11118 000044E5 00                              db  0
 11119 000044E6 0000                            dw  0
 11120 000044E8 0000                            dw  0
 11121                                  
 11122 000044EA 24                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_AUTH_ROOT
 11123 000044EB 1110                            dw  kbCtrlQ
 11124 000044ED [190E]                          dw  main_return_to_bios
 11125                                  
 11126 000044EF 00                              db  0
 11127 000044F0 008A                            dw  kbCtrlF12
 11128 000044F2 [9511]                          dw  main_power_off
 11129                                  
 11130                                  .end_of_main_menu
 11131                                  
 11132                                  .record_menu:
 11133 000044F4 04                              db  ACTFLAG_REDRAW_WIN
 11134 000044F5 2F35                            dw  kbSlash
 11135 000044F7 [A110]                          dw  main_show_record_info
 11136                                  
 11137 000044F9 D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11138 000044FA 003D                            dw  kbF3
 11139 000044FC [810B]                          dw  main_change_name
 11140                                  
 11141 000044FE D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11142 000044FF 0043                            dw  kbF9
 11143 00004501 [080C]                          dw  main_change_record_password
 11144                                  
 11145 00004503 D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11146 00004504 131F                            dw  kbCtrlS
 11147 00004506 [EA0E]                          dw  main_toggle_schedule
 11148                                  
 11149 00004508 D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11150 00004509 0B25                            dw  kbCtrlK
 11151 0000450B [B80F]                          dw  main_toggle_keystrokes
 11152                                  
 11153 0000450D 00                              db  0
 11154 0000450E 0000                            dw  0
 11155 00004510 0000                            dw  0
 11156                                  
 11157 00004512 08                              db  ACTFLAG_REDRAW_SCR 
 11158 00004513 003E                            dw  kbF4
 11159 00004515 [910C]                          dw  main_mark_active
 11160                                  
 11161 00004517 08                              db  ACTFLAG_REDRAW_SCR
 11162 00004518 003F                            dw  kbF5
 11163 0000451A [E90C]                          dw  main_toggle_hidden
 11164                                  
 11165 0000451C 08                              db  ACTFLAG_REDRAW_SCR
 11166 0000451D 0040                            dw  kbF6
 11167 0000451F [650C]                          dw  main_toggle_auto_active
 11168                                  
 11169 00004521 08                              db  ACTFLAG_REDRAW_SCR
 11170 00004522 0041                            dw  kbF7
 11171 00004524 [7B0C]                          dw  main_toggle_auto_hide
 11172                                  
 11173 00004526 08                              db  ACTFLAG_REDRAW_SCR
 11174 00004527 182D                            dw  kbCtrlX
 11175 00004529 [CC0E]                          dw  main_toggle_swapid
 11176                                  
 11177 0000452B 00                              db  0
 11178 0000452C 0000                            dw  0
 11179 0000452E 0000                            dw  0
 11180                                  
 11181 00004530 D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11182 00004531 0420                            dw  kbCtrlD
 11183 00004533 [110D]                          dw  main_delete_record
 11184                                  
 11185 00004535 D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11186 00004536 1019                            dw  kbCtrlP
 11187 00004538 [250E]                          dw  main_dup_record
 11188                                  
 11189 0000453A 98                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY
 11190 0000453B 1516                            dw  kbCtrlU
 11191 0000453D [7A0E]                          dw  main_move_record_up
 11192                                  
 11193 0000453F 98                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY
 11194 00004540 0E31                            dw  kbCtrlN
 11195 00004542 [480E]                          dw  main_move_record_down
 11196                                  
 11197                                  
 11198                                  .end_of_record_menu
 11199                                  
 11200                                  .sys_menu:
 11201 00004544 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11202 00004545 0044                            dw  kbF10
 11203 00004547 [BB0B]                          dw  main_change_root_password
 11204                                  
 11205 00004549 A8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT | ACTFLAG_AUTH_SECURITY
 11206 0000454A 0067                            dw  kbCtrlF10
 11207 0000454C [A50B]                          dw  main_login_as_root
 11208                                  
 11209 0000454E 88                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_SECURITY
 11210 0000454F 0071                            dw  kbAltF10
 11211 00004551 [B10B]                          dw  main_change_security_mode
 11212                                  
 11213 00004553 00                              db  0
 11214 00004554 0000                            dw  0
 11215 00004556 0000                            dw  0
 11216                                  
 11217 00004558 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11218 00004559 0042                            dw  kbF8
 11219 0000455B [4B0C]                          dw  main_set_default_record
 11220                                  
 11221 0000455D 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11222 0000455E 005B                            dw  kbShiftF8
 11223 00004560 [5B0C]                          dw  main_unset_default_record
 11224                                  
 11225 00004562 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11226 00004563 1414                            dw  kbCtrlT
 11227 00004565 [BE0D]                          dw  main_set_delay_time
 11228                                  
 11229 00004567 08                              db  ACTFLAG_REDRAW_SCR
 11230 00004568 0621                            dw  kbCtrlF
 11231 0000456A [9811]                          dw  main_change_bootmenu_style
 11232                                  
 11233 0000456C 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11234 0000456D 0C26                            dw  kbCtrlL
 11235 0000456F [AE11]                          dw  main_toggle_rem_last
 11236                                  
 11237 00004571 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11238 00004572 0000                            dw  0
 11239 00004574 [C611]                          dw  main_toggle_int13ext
 11240                                  
 11241 00004576 00                              db  0
 11242 00004577 0000                            dw  0
 11243 00004579 0000                            dw  0
 11244                                  
 11245 0000457B 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11246 0000457C 0917                            dw  kbCtrlI
 11247 0000457E [630D]                          dw  main_rescan_all_records
 11248                                  
 11249 00004580 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11250 00004581 0823                            dw  kbCtrlH
 11251 00004583 [6A0D]                          dw  main_rescan_all_partitions
 11252                                  
 11253 00004585 08                              db  ACTFLAG_REDRAW_SCR
 11254 00004586 0000                            dw  0
 11255 00004588 [E311]                          dw  main_set_cdrom_ioports
 11256                                  
 11257 0000458A 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11258 0000458B 0000                            dw  0
 11259 0000458D [5912]                          dw  main_set_y2k_year
 11260                                  
 11261 0000458F 00                              db  0
 11262 00004590 0000                            dw  0
 11263 00004592 0000                            dw  0
 11264                                  
 11265                                          ;db  ACTFLAG_REDRAW_SCR
 11266                                          ;dw  0
 11267                                          ;dw  main_install_sbm
 11268                                  
 11269                                          ;db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11270                                          ;dw  0
 11271                                          ;dw  main_uninstall_sbm
 11272                                  
 11273                                  .end_of_sys_menu
 11274                                  
 11275 00004594 08                              db  ACTFLAG_REDRAW_SCR
 11276 00004595 01F4                            dw  EVENT_REDRAW_ROOT
 11277 00004597 0000                            dw  0
 11278                                  
 11279 00004599 18                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM
 11280 0000459A 02F4                            dw  EVENT_BOOT_DEFAULT
 11281 0000459C [9717]                          dw  main_boot_default
 11282                                  
 11283                                  .end_of_root_window
 11284                                          
 11285                                  .boot_menu:
 11286 0000459E 08                              db  ACTFLAG_REDRAW_SCR
 11287 0000459F 0098                            dw  kbEnhAltUp
 11288 000045A1 [0121]                          dw  menubox_focus_up
 11289                                  
 11290 000045A3 08                              db  ACTFLAG_REDRAW_SCR
 11291 000045A4 00A0                            dw  kbEnhAltDown
 11292 000045A6 [2D21]                          dw  menubox_focus_down
 11293                                  
 11294 000045A8 04                              db  ACTFLAG_REDRAW_WIN
 11295 000045A9 3F35                            dw  kbQuestion
 11296 000045AB [A110]                          dw  main_show_record_info
 11297                                  
 11298 000045AD D4                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11299 000045AE 003D                            dw  kbF3
 11300 000045B0 [810B]                          dw  main_change_name
 11301                                  
 11302 000045B2 D4                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11303 000045B3 0043                            dw  kbF9
 11304 000045B5 [080C]                          dw  main_change_record_password
 11305                                  
 11306 000045B7 D4                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11307 000045B8 131F                            dw  kbCtrlS
 11308 000045BA [EA0E]                          dw  main_toggle_schedule
 11309                                  
 11310 000045BC D4                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11311 000045BD 0B25                            dw  kbCtrlK
 11312 000045BF [B80F]                          dw  main_toggle_keystrokes
 11313                                  
 11314 000045C1 D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11315 000045C2 003E                            dw  kbF4
 11316 000045C4 [910C]                          dw  main_mark_active
 11317                                  
 11318 000045C6 D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11319 000045C7 003F                            dw  kbF5
 11320 000045C9 [E90C]                          dw  main_toggle_hidden
 11321                                  
 11322 000045CB D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11323 000045CC 0040                            dw  kbF6
 11324 000045CE [650C]                          dw  main_toggle_auto_active
 11325                                  
 11326 000045D0 D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11327 000045D1 0041                            dw  kbF7
 11328 000045D3 [7B0C]                          dw  main_toggle_auto_hide
 11329                                  
 11330 000045D5 D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11331 000045D6 182D                            dw  kbCtrlX
 11332 000045D8 [CC0E]                          dw  main_toggle_swapid
 11333                                  
 11334 000045DA D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11335 000045DB 0420                            dw  kbCtrlD
 11336 000045DD [110D]                          dw  main_delete_record
 11337                                  
 11338 000045DF D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11339 000045E0 1019                            dw  kbCtrlP
 11340 000045E2 [250E]                          dw  main_dup_record
 11341                                  
 11342 000045E4 02                              db  ACTFLAG_REDRAW_BODY
 11343 000045E5 1516                            dw  kbCtrlU
 11344 000045E7 [7A0E]                          dw  main_move_record_up
 11345                                  
 11346 000045E9 02                              db  ACTFLAG_REDRAW_BODY
 11347 000045EA 0E31                            dw  kbCtrlN
 11348 000045EC [480E]                          dw  main_move_record_down
 11349                                  
 11350 000045EE 54                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_AUTH_RECORD | ACTFLAG_CHK_RECNUM
 11351 000045EF 0D1C                            dw  kbEnter
 11352 000045F1 [EE0D]                          dw  main_boot_it
 11353                                  
 11354 000045F3 14                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_CHK_RECNUM
 11355 000045F4 1B01                            dw  kbEsc
 11356 000045F6 [9717]                          dw  main_boot_default
 11357                                  
 11358 000045F8 08                              db  ACTFLAG_REDRAW_SCR
 11359 000045F9 08F2                            dw  EVENT_ALT_RELEASE
 11360 000045FB [360B]                          dw  main_show_main_menu
 11361                                  .end_of_boot_menu
 11362                                  
 11363                                  ;END OF KERNEL
 11364 000045FD 55AA                            dw BR_GOOD_FLAG
 11365                                  
 11366                                  end_of_kernel:
 11367                                  ;=============================================================================
 11368                                  ;theme data
 11369                                  ;=============================================================================
 11370                                  theme_start:
 11371                                  
 11372                                  
 11373                                  %ifdef THEME_ZH
 11374                                  %include "themes/theme-zh.asm"
 11375                                  %elifdef THEME_DE
 11376                                  %include "themes/theme-de.asm"
 11377                                  %elifdef THEME_HU
 11378                                  %include "themes/theme-hu.asm"
 11379                                  %elifdef THEME_RU
 11380                                  %include "themes/theme-ru.asm"
 11381                                  %elifdef THEME_CZ
 11382                                  %include "themes/theme-cz.asm"
 11383                                  %elifdef THEME_ES
 11384                                  %include "themes/theme-es.asm"
 11385                                  %elifdef THEME_FR
 11386                                  %include "themes/theme-fr.asm"
 11387                                  %elifdef THEME_PT
 11388                                  %include "themes/theme-pt.asm"
 11389                                  %else
 11390                                  %include "themes/theme-us.asm"
 11391                              <1> ; asmsyntax=nasm
 11392                              <1> ;
 11393                              <1> ; theme-us.asm
 11394                              <1> ;
 11395                              <1> ; English theme data for Smart Boot Manager
 11396                              <1> ;
 11397                              <1> ; Copyright (C) 2001, Suzhe. See file COPYING for details.
 11398                              <1> ;
 11399                              <1> 
 11400                              <1> ; some constant used in this theme.
 11401                              <1> 
 11402                              <1> ; PLEASE DO NOT CHANGE THESE, UNLESS YOU KNOW WHAT YOU ARE DOING!
 11403                              <1> %define SBMT_MAGIC      0x544D4253         ; magic number of
 11404                              <1>                                            ; Smart Boot Manager theme.
 11405                              <1> %define SBMT_VERSION    0x035A             ; version of theme ( 3.90 ).
 11406                              <1> 
 11407                              <1> start_font              equ     219
 11408                              <1> brand_char1             equ     start_font
 11409                              <1> brand_char2             equ     start_font+1
 11410                              <1> brand_char3             equ     start_font+2
 11411                              <1> brand_char4             equ     start_font+3
 11412                              <1> 
 11413                              <1> start_of_theme:
 11414                              <1> 
 11415                              <1> ;!!! PLEASE DON NOT CHANGE THE SIZE AND ORDER OF FOLLOWING DATA !!!
 11416                              <1> 
 11417                              <1> ;=============================================================================
 11418                              <1> ;the header of Smart Boot Manager theme ( 16 bytes )
 11419                              <1> ;=============================================================================
 11420 000045FF 53424D54            <1> theme_magic             dd  SBMT_MAGIC ; magic number = 'SBMT', 4 bytes.
 11421                              <1>                                        ; it's abbr. of 'Smart Boot Manager Theme'
 11422 00004603 0000                <1>                         dw  0          ;
 11423 00004605 656E2D555300        <1> theme_lang              db  'en-US',0  ; language of this theme, 6 bytes.
 11424 0000460B 5A03                <1> theme_version           dw  SBMT_VERSION ; version, high byte is major version,
 11425                              <1>                                          ; low byte is minor version. should be
 11426                              <1>                                          ; equal to the version of Smart Boot Manager.
 11427 0000460D AA0F                <1> theme_size              dw  (end_of_theme - start_of_theme)
 11428                              <1>                                          ; size of the theme (bytes).
 11429                              <1> 
 11430                              <1> ;=============================================================================
 11431                              <1> ; fix size data and index tables of variable size data
 11432                              <1> ;=============================================================================
 11433                              <1> 
 11434 0000460F FF                  <1> video_mode              db  0xff        ; 0 = 90x25, 0xff = 80x25
 11435                              <1>                                         ; do not use other value!!!
 11436                              <1> 
 11437 00004610 10                  <1> keyboard_type           db  0x10        ; = 0x10 means use enhanced keyboard
 11438                              <1>                                         ; = 0x00 means use normal keyboard
 11439                              <1>                                         ; CAUTION: cannot use other value!!!
 11440                              <1> 
 11441 00004611 01                  <1> show_date_method        db  1           ; the method of show date:
 11442                              <1>                                         ; 0 = don't show date
 11443                              <1>                                         ; 1 = day mm-dd-yyyy
 11444                              <1>                                         ; 2 = day yyyy-mm-dd
 11445                              <1>                                         ; 3 = day dd-mm-yyyy
 11446                              <1> 
 11447 00004612 01                  <1> show_time_method        db  1           ; the method of show time:
 11448                              <1>                                         ; 0 = don't show time
 11449                              <1>                                         ; 1 = hh:mm (24 hours)
 11450                              <1> 
 11451 00004613 79                  <1> yes_key_lower	        db  'y'
 11452 00004614 59                  <1> yes_key_upper	        db  'Y'
 11453                              <1>  
 11454                              <1> ; position of screen elements, low byte = column, high byte = row
 11455                              <1> position:
 11456 00004615 FF00                <1> .brand                  dw  0x00FF      ; start position of brand icon
 11457                              <1>                                         ; low = column, high = row
 11458                              <1>                                         ; if low = 255 then brand will be
 11459                              <1>                                         ; right justify in the screen.
 11460 00004617 3700                <1> .date                   dw  0x0037
 11461                              <1> 
 11462 00004619 4600                <1> .time                   dw  0x0046
 11463                              <1> 
 11464                              <1> ; size of screen elements
 11465                              <1> size:
 11466 0000461B 01                  <1> .copyright              db  1           ; number of rows used by copyright info
 11467 0000461C 01                  <1> .hint                   db  1           ; number of rows used by hint info
 11468 0000461D 05                  <1> .box_width              db  5           ; the minimal width of info/error/input box
 11469                              <1>                                         ; (when no info string)
 11470 0000461E 04                  <1> .box_height             db  4           ; the minimal height of info/error/input box
 11471                              <1>                                         ; (when no info string)
 11472 0000461F 0D                  <1> .boot_menu_win_height   db  13          ; the height of the boot menu window
 11473 00004620 0A                  <1> .list_box_win_height    db  10          ; the height of the list box window
 11474                              <1> 
 11475                              <1> ;Black          = 0
 11476                              <1> ;Blue           = 1
 11477                              <1> ;Green          = 2
 11478                              <1> ;Cyan           = 3
 11479                              <1> ;Red            = 4
 11480                              <1> ;Violet         = 5
 11481                              <1> ;Yellow (brown) = 6
 11482                              <1> ;White          = 7
 11483                              <1> ;Black (gray)   = 8
 11484                              <1> ;Intense blue   = 9
 11485                              <1> ;Intense green  = a
 11486                              <1> ;Intense cyan   = b
 11487                              <1> ;Intense red    = c
 11488                              <1> ;Intense violet = d
 11489                              <1> ;Intense yellow = e
 11490                              <1> ;Intense white  = f
 11491                              <1> 
 11492                              <1> ; color of screen elements
 11493                              <1> ; high 4 bits is background color, low 4 bits is foreground color
 11494                              <1> 
 11495                              <1> color:
 11496 00004621 70                  <1> .win_title_inactive     db  0x70        ; title attribute for inactive window.
 11497                              <1> 
 11498                              <1> .boot_menu:
 11499 00004622 3F                  <1> .boot_menu_frame        db  0x3F        ; attributes of boot menu window
 11500 00004623 F1                  <1> .boot_menu_title        db  0xF1        ;
 11501 00004624 1F                  <1> .boot_menu_header       db  0x1F        ;
 11502 00004625 707C                <1> .boot_menu_normal       dw  0x7C70      ;
 11503 00004627 0F0C                <1> .boot_menu_focus        dw  0x0C0F      ; 
 11504 00004629 3F                  <1> .boot_menu_scrollbar    db  0x3F        ; scroll bar
 11505                              <1> 
 11506                              <1> .cmd_menu:
 11507 0000462A 30                  <1> .cmd_menu_frame         db  0x30        ;
 11508 0000462B F1                  <1> .cmd_menu_title         db  0xF1        ; the colors used 
 11509 0000462C 3F                  <1> .cmd_menu_header        db  0x3F        ;
 11510 0000462D 303C                <1> .cmd_menu_normal        dw  0x3C30      ; in command menu
 11511 0000462F 070C                <1> .cmd_menu_focus         dw  0x0C07      ;
 11512 00004631 3F                  <1> .cmd_menu_scrollbar     db  0x3F        ;
 11513                              <1> 
 11514                              <1> .list_box:
 11515 00004632 30                  <1> .list_box_frame         db  0x30        ;
 11516 00004633 F1                  <1> .list_box_title         db  0xF1        ; list box
 11517 00004634 1F                  <1> .list_box_header        db  0x1F        ;
 11518 00004635 303C                <1> .list_box_normal        dw  0x3C30      ;
 11519 00004637 070C                <1> .list_box_focus         dw  0x0C07      ;
 11520 00004639 3F                  <1> .list_box_scrollbar     db  0x3F        ;
 11521                              <1> 
 11522                              <1> .input_box:
 11523 0000463A B0                  <1> .input_box_frame        db  0xB0        ;
 11524 0000463B F1                  <1> .input_box_title        db  0xF1        ; input box
 11525 0000463C B0                  <1> .input_box_msg          db  0xB0        ;
 11526                              <1> 
 11527                              <1> .error_box:
 11528 0000463D CF                  <1> .error_box_frame        db  0xCF        ;
 11529 0000463E F1                  <1> .error_box_title        db  0xF1        ; error box
 11530 0000463F CF                  <1> .error_box_msg          db  0xCF        ;
 11531                              <1> 
 11532                              <1> .info_box:
 11533 00004640 B0                  <1> .info_box_frame         db  0xB0        ;
 11534 00004641 F1                  <1> .info_box_title         db  0xF1        ; info box
 11535 00004642 B0                  <1> .info_box_msg           db  0xB0        ;
 11536                              <1> 
 11537                              <1> .help_win:
 11538 00004643 3F                  <1> .help_win_frame         db  0x3F        ;
 11539 00004644 F1                  <1> .help_win_title         db  0xF1        ; help window
 11540 00004645 30                  <1> .help_msg               db  0x30        ;
 11541                              <1> 
 11542                              <1> .about_win:
 11543 00004646 3F                  <1> .about_win_frame        db  0x3F        ;
 11544 00004647 F1                  <1> .about_win_title        db  0xF1        ; about window
 11545 00004648 3E                  <1> .about_msg              db  0x3E        ;
 11546                              <1> 
 11547 00004649 70                  <1> .delay_time             db  0x70        ; delay time
 11548 0000464A 00                  <1> .background             db  0x00        ; background (if no background icon)
 11549 0000464B 7074                <1> .copyright              dw  0x7470      ; copyright string
 11550 0000464D 7074                <1> .hint                   dw  0x7470      ; hint string
 11551 0000464F 7C                  <1> .knl_flags              db  0x7C        ; the color of kernal fags.
 11552 00004650 70                  <1> .knl_drvid              db  0x70        ; the color of kernel drive id.
 11553 00004651 70                  <1> .date                   db  0x70        ; color of date string
 11554 00004652 70                  <1> .time                   db  0x70        ; color of time string
 11555                              <1> 
 11556                              <1> ; icon data
 11557                              <1> icon:
 11558 00004653 0401                <1> .brand_size         dw  0x0104              ; the size of brand icon,
 11559                              <1>                                             ; high byte = row, low byte = col.
 11560 00004655 [5C47]              <1> .brand              dw  icon_data.brand     ; offset of brand icon data, set to
 11561                              <1>                                             ; zero if no brand icon.
 11562                              <1> 
 11563 00004657 0401                <1> .background_size    dw  0x0104              ; the size of background icon,
 11564                              <1>                                             ; high byte = row, low byte = col.
 11565 00004659 [6447]              <1> .background         dw  icon_data.background; offset of background icon data,
 11566                              <1>                                             ; set to zero if no background icon.
 11567                              <1> 
 11568                              <1> ; font data
 11569                              <1> font:
 11570 0000465B 0400                <1> .number             dw  (font_data.end-font_data)/17
 11571                              <1>                                             ; number of chars to be replaced,
 11572                              <1>                                             ; should <= (256 - start).
 11573 0000465D [6C47]              <1> .data               dw  font_data           ; offset of font set data, set to
 11574                              <1>                                             ; zero if no font to be replaced.
 11575                              <1> 
 11576                              <1> ; chars used by window frame
 11577                              <1> frame_char:
 11578 0000465F 20                  <1> .top                db     0x20            ; top horizontal
 11579 00004660 CD                  <1> .bottom             db     0xCD            ; bottom horiztontal
 11580 00004661 BA                  <1> .left               db     0xBA            ; left vertical
 11581 00004662 BA                  <1> .right              db     0xBA            ; right vertical
 11582 00004663 C9                  <1> .tl_corner          db     0xC9            ; top left corner
 11583 00004664 BB                  <1> .tr_corner          db     0xBB            ; top right corner
 11584 00004665 C8                  <1> .bl_corner          db     0xC8            ; bottom left corner
 11585 00004666 BC                  <1> .br_corner          db     0xBC            ; bottom right corner
 11586                              <1> 
 11587                              <1> ; how to draw window frame
 11588 00004667 01                  <1> draw_frame_method   db  1          ; = 0 means draw all frame using frame attr.
 11589                              <1>                                    ; = 1 means draw top horizontal line using
 11590                              <1>                                    ;     title attr.
 11591                              <1>                                    ; = 2 means draw top corner and horizontal
 11592                              <1>                                    ;     line using title attr.
 11593                              <1> 
 11594                              <1> ; keymap data
 11595                              <1> keymap:                                  ; entry of keymap
 11596 00004668 0000                <1> .number             dw  (keymap_data.end-keymap_data)/4
 11597                              <1>                                            ; number of keymap entries
 11598 0000466A [B047]              <1> .data               dw  keymap_data      ; pointer to keymap
 11599                              <1> 
 11600                              <1> ; index table of strings
 11601                              <1> str_idx:
 11602 0000466C [B047]              <1> .boot_menu_title                dw  string.boot_menu_title
 11603 0000466E [BA47]              <1> .boot_menu_header               dw  string.boot_menu_header
 11604 00004670 [C647]              <1> .boot_menu_header_noflags       dw  string.boot_menu_header_noflags
 11605 00004672 [CE47]              <1> .boot_menu_header_nonumber      dw  string.boot_menu_header_nonumber
 11606 00004674 [D747]              <1> .boot_menu_header_notype        dw  string.boot_menu_header_notype
 11607                              <1> 
 11608 00004676 [DE47]              <1> .about              dw  string.about
 11609 00004678 [E447]              <1> .error              dw  string.error
 11610 0000467A [EA47]              <1> .help               dw  string.help
 11611 0000467C [EF47]              <1> .info               dw  string.info
 11612 0000467E [FA47]              <1> .input              dw  string.input
 11613                              <1> 
 11614 00004680 [0048]              <1> .delay_time         dw  string.delay_time
 11615 00004682 [0D48]              <1> .name               dw  string.name
 11616 00004684 [1448]              <1> .new_root_passwd    dw  string.new_root_passwd
 11617 00004686 [1848]              <1> .root_passwd        dw  string.root_passwd
 11618 00004688 [2848]              <1> .new_record_passwd  dw  string.new_record_passwd
 11619 0000468A [2C48]              <1> .record_passwd      dw  string.record_passwd
 11620 0000468C [3E48]              <1> .retype_passwd      dw  string.retype_passwd
 11621 0000468E [5048]              <1> .input_schedule     dw  string.input_schedule
 11622 00004690 [6E48]              <1> .input_keystrokes   dw  string.input_keystrokes
 11623 00004692 [BA48]              <1> .key_count          dw  string.key_count
 11624 00004694 [C848]              <1> .io_port            dw  string.io_port
 11625 00004696 [E548]              <1> .year               dw  string.year
 11626                              <1> 
 11627 00004698 [EC48]              <1> .drive_id           dw  string.drive_id
 11628 0000469A [FA48]              <1> .part_id            dw  string.part_id
 11629 0000469C [0749]              <1> .record_type        dw  string.record_type
 11630 0000469E [1649]              <1> .record_name        dw  string.record_name
 11631 000046A0 [2549]              <1> .auto_active        dw  string.auto_active
 11632 000046A2 [3549]              <1> .active             dw  string.active
 11633 000046A4 [4249]              <1> .auto_hide          dw  string.auto_hide
 11634 000046A6 [5149]              <1> .hidden             dw  string.hidden
 11635 000046A8 [5E49]              <1> .swap_drv           dw  string.swap_drv
 11636 000046AA [6D49]              <1> .logical            dw  string.logical
 11637 000046AC [7A49]              <1> .key_strokes        dw  string.key_strokes
 11638 000046AE [8A49]              <1> .password           dw  string.password
 11639 000046B0 [9749]              <1> .schedule           dw  string.schedule
 11640 000046B2 [A649]              <1> .yes                dw  string.yes
 11641 000046B4 [AA49]              <1> .no                 dw  string.no
 11642                              <1> 
 11643 000046B6 [AE49]              <1> .copyright          dw  string.copyright
 11644 000046B8 [E449]              <1> .hint               dw  string.hint
 11645 000046BA [2B4A]              <1> .about_content      dw  string.about_content
 11646 000046BC [344B]              <1> .help_content       dw  string.help_content
 11647                              <1> 
 11648 000046BE [C64E]              <1> .changes_saved      dw  string.changes_saved
 11649 000046C0 [D54E]              <1> .passwd_changed     dw  string.passwd_changed
 11650 000046C2 [E74E]              <1> .ask_save_changes   dw  string.ask_save_changes
 11651                              <1> 
 11652 000046C4 [FF4E]              <1> .wrong_passwd       dw  string.wrong_passwd
 11653 000046C6 [0F4F]              <1> .disk_error         dw  string.disk_error
 11654 000046C8 [1E4F]              <1> .mark_act_failed    dw  string.mark_act_failed
 11655 000046CA [324F]              <1> .toggle_hid_failed  dw  string.toggle_hid_failed
 11656 000046CC [464F]              <1> .no_system          dw  string.no_system
 11657 000046CE [794F]              <1> .invalid_record     dw  string.invalid_record
 11658 000046D0 [8E4F]              <1> .invalid_schedule   dw  string.invalid_schedule
 11659 000046D2 [A54F]              <1> .inst_confirm       dw  string.inst_confirm
 11660 000046D4 [D44F]              <1> .inst_ok            dw  string.inst_ok
 11661 000046D6 [F04F]              <1> .inst_abort         dw  string.inst_abort
 11662 000046D8 [0850]              <1> .uninst_confirm     dw  string.uninst_confirm
 11663 000046DA [2E50]              <1> .uninst_ok          dw  string.uninst_ok
 11664 000046DC [6850]              <1> .uninst_abort       dw  string.uninst_abort
 11665 000046DE [8250]              <1> .confirm            dw  string.confirm
 11666 000046E0 [AB50]              <1> .no_sbml            dw  string.no_sbml
 11667 000046E2 [E350]              <1> .invalid_ioports    dw  string.invalid_ioports
 11668                              <1> 
 11669                              <1> ; command menu str_idx
 11670                              <1> ; main menu
 11671 000046E4 [F650]              <1> .main_menu_title    dw string.main_menu_title
 11672                              <1> .main_menu_strings:
 11673 000046E6 [0051]              <1>                     dw string.main_menu_help
 11674 000046E8 [1651]              <1>                     dw string.main_menu_about
 11675 000046EA [9A51]              <1>                     dw string.main_menu_save
 11676 000046EC [2C51]              <1>                     dw string.main_menu_bootit
 11677 000046EE [3451]              <1>                     dw string.main_menu_bootprev
 11678 000046F0 [B051]              <1>                     dw string.main_menu_bar
 11679 000046F2 [7251]              <1>                     dw string.main_menu_recordset
 11680 000046F4 [8651]              <1>                     dw string.main_menu_sysset
 11681 000046F6 [B051]              <1>                     dw string.main_menu_bar
 11682 000046F8 [4651]              <1>                     dw string.main_menu_quit
 11683 000046FA [5C51]              <1>                     dw string.main_menu_poweroff
 11684                              <1> 
 11685                              <1> ; record settings menu
 11686 000046FC [C451]              <1> .record_menu_title  dw string.record_menu_title
 11687                              <1> .record_menu_strings:
 11688 000046FE [D451]              <1>                     dw string.record_menu_info
 11689 00004700 [ED51]              <1>                     dw string.record_menu_name
 11690 00004702 [0652]              <1>                     dw string.record_menu_passwd
 11691 00004704 [1F52]              <1>                     dw string.record_menu_schedule
 11692 00004706 [3852]              <1>                     dw string.record_menu_keys
 11693 00004708 [3253]              <1>                     dw string.record_menu_bar
 11694 0000470A [5152]              <1>                     dw string.record_menu_act
 11695 0000470C [6A52]              <1>                     dw string.record_menu_hide
 11696 0000470E [8352]              <1>                     dw string.record_menu_autoact
 11697 00004710 [9C52]              <1>                     dw string.record_menu_autohide
 11698 00004712 [B552]              <1>                     dw string.record_menu_swapdrv
 11699 00004714 [3253]              <1>                     dw string.record_menu_bar
 11700 00004716 [CE52]              <1>                     dw string.record_menu_del
 11701 00004718 [E752]              <1>                     dw string.record_menu_dup
 11702 0000471A [0053]              <1>                     dw string.record_menu_moveup
 11703 0000471C [1953]              <1>                     dw string.record_menu_movedown
 11704                              <1> 
 11705                              <1> ; system setting menu
 11706 0000471E [4953]              <1> .sys_menu_title     dw string.sys_menu_title
 11707                              <1> .sys_menu_strings:
 11708 00004720 [5953]              <1>                     dw string.sys_menu_rootpasswd
 11709 00004722 [7A53]              <1>                     dw string.sys_menu_admin
 11710 00004724 [9B53]              <1>                     dw string.sys_menu_security
 11711 00004726 [2255]              <1>                     dw string.sys_menu_bar
 11712 00004728 [BC53]              <1>                     dw string.sys_menu_setdef
 11713 0000472A [DD53]              <1>                     dw string.sys_menu_unsetdef
 11714 0000472C [FE53]              <1>                     dw string.sys_menu_delay
 11715 0000472E [1F54]              <1>                     dw string.sys_menu_bmstyle
 11716 00004730 [4054]              <1>                     dw string.sys_menu_remlast
 11717 00004732 [6154]              <1>                     dw string.sys_menu_int13ext
 11718 00004734 [2255]              <1>                     dw string.sys_menu_bar
 11719 00004736 [7954]              <1>                     dw string.sys_menu_rescanall
 11720 00004738 [9A54]              <1>                     dw string.sys_menu_rescanpart
 11721 0000473A [BB54]              <1>                     dw string.sys_menu_set_ioports
 11722 0000473C [D054]              <1>                     dw string.sys_menu_set_y2kfix
 11723 0000473E [2255]              <1>                     dw string.sys_menu_bar
 11724 00004740 [EC54]              <1>                     dw string.sys_menu_inst
 11725 00004742 [0655]              <1>                     dw string.sys_menu_uninst
 11726                              <1> 
 11727 00004744 [4155]              <1> .cdimg_menu_title   dw string.cdimg_menu_title
 11728 00004746 [5355]              <1> .cdimg_menu_strings dw string.cdimg_menu_noemu
 11729 00004748 [6055]              <1>                     dw string.cdimg_menu_120m
 11730 0000474A [6F55]              <1>                     dw string.cdimg_menu_144m
 11731 0000474C [7E55]              <1>                     dw string.cdimg_menu_288m
 11732                              <1> 
 11733 0000474E [8D55]              <1> .sunday             dw string.sunday
 11734 00004750 [9155]              <1> .monday             dw string.monday
 11735 00004752 [9555]              <1> .tuesday            dw string.tuesday
 11736 00004754 [9955]              <1> .wednesday          dw string.wednesday
 11737 00004756 [9D55]              <1> .thursday           dw string.thursday
 11738 00004758 [A155]              <1> .friday             dw string.friday
 11739 0000475A [A555]              <1> .saturday           dw string.saturday
 11740                              <1> 
 11741                              <1> end_of_str_idx:
 11742                              <1> 
 11743                              <1> ;=============================================================================
 11744                              <1> ; variable size data
 11745                              <1> ;=============================================================================
 11746                              <1> 
 11747                              <1> ; icon data
 11748                              <1> 
 11749                              <1> ; two bytes corresponding to a char,
 11750                              <1> ; high byte is color, low byte is char code.
 11751                              <1> icon_data:
 11752                              <1> .brand:
 11753 0000475C DB7CDC7CDD7CDE7C    <1> db  brand_char1, 0x7C, brand_char2, 0x7C, brand_char3, 0x7C, brand_char4, 0x7C
 11754                              <1> 
 11755                              <1> .background:
 11756 00004764 B071B071B071B071    <1> db  0xB0, 0x71, 0xB0, 0x71, 0xB0, 0x71, 0xB0, 0x71
 11757                              <1> 
 11758                              <1> ; font data
 11759                              <1> ; each char occupied 17 bytes
 11760                              <1> ; the first bytes is the ascii code used by this char
 11761                              <1> ; the following 16 bytes is font data
 11762                              <1> ;
 11763                              <1> ; NOTE:
 11764                              <1> ;   Do not replace ascii char 0 and 0x0d, 0x1e and 0x1f,
 11765                              <1> ;   these chars have special use.
 11766                              <1> ;
 11767                              <1> font_data:
 11768 0000476C DB                  <1>   db  start_font
 11769 0000476D 00000000070C08080C- <1>   db  0x00,0x00,0x00,0x00,0x07,0x0c,0x08,0x08,0x0c,0x07,0x00,0x00,0x00,0x00,0xfe,0x00
 11770 00004776 0700000000FE00      <1>
 11771 0000477D DC                  <1>   db  start_font+1
 11772 0000477E 01010101FD011F1F03- <1>   db  0x01,0x01,0x01,0x01,0xfd,0x01,0x1f,0x1f,0x03,0xf7,0x0d,0x19,0x31,0x61,0xff,0xff
 11773 00004787 F70D193161FFFF      <1>
 11774 0000478E DD                  <1>   db  start_font+2
 11775 0000478F 80808080BF80F0F898- <1>   db  0x80,0x80,0x80,0x80,0xbf,0x80,0xf0,0xf8,0x98,0x9b,0x98,0x98,0x98,0x98,0x9e,0x9e
 11776 00004798 9B989898989E9E      <1>
 11777 0000479F DE                  <1>   db  start_font+3
 11778 000047A0 00000000FF00000000- <1>   db  0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0xf0,0x18,0x08,0x08,0x18,0xf0,0x00
 11779 000047A9 F018080818F000      <1>
 11780                              <1> .end:
 11781                              <1> 
 11782                              <1> ; keymap
 11783                              <1> ; each entry has two words, the first is original keycode, 
 11784                              <1> ; the second is new keycode.
 11785                              <1> keymap_data:
 11786                              <1> %ifdef KEYMAP_AZERTY
 11787                              <1>   %include "azerty.kbd"
 11788                              <1> %elifdef KEYMAP_QWERTZ
 11789                              <1>   %include "qwertz.kbd"
 11790                              <1> %elifdef KEYMAP_DVORAK
 11791                              <1>   %include "dvorak.kbd"
 11792                              <1> %elifdef KEYMAP_DVORAK_ANSI
 11793                              <1>   %include "dvorak-ansi.kbd"
 11794                              <1> %endif
 11795                              <1> .end:
 11796                              <1> 
 11797                              <1> ; strings
 11798                              <1> ; all strings are zero ending,
 11799                              <1> ; use 0x0d to break string into multi-lines.
 11800                              <1> string:
 11801                              <1> ; used in main window and boot menu.
 11802 000047B0 426F6F74204D656E75- <1> .boot_menu_title                db  'Boot Menu',0
 11803 000047B9 00                  <1>
 11804 000047BA 2020202020466C6167- <1> .boot_menu_header               db  '     Flags  '
 11805 000047C3 732020              <1>
 11806 000047C6 20204E756D626572    <1> .boot_menu_header_noflags       db  '  Number'
 11807 000047CE 202054797065202020  <1> .boot_menu_header_nonumber      db  '  Type   '
 11808 000047D7 20204E616D6500      <1> .boot_menu_header_notype        db  '  Name',0
 11809                              <1> 
 11810                              <1> ; window titles.
 11811 000047DE 41626F757400        <1> .about                          db  'About',0
 11812 000047E4 4572726F7200        <1> .error                          db  'Error',0
 11813 000047EA 48656C7000          <1> .help                           db  'Help',0
 11814 000047EF 496E666F6D6174696F- <1> .info                           db  'Infomation',0
 11815 000047F8 6E00                <1>
 11816 000047FA 496E70757400        <1> .input                          db  'Input',0
 11817                              <1> 
 11818                              <1> ; used in input boxes.
 11819 00004800 44656C61792074696D- <1> .delay_time                     db  'Delay time: ',0
 11820 00004809 653A2000            <1>
 11821 0000480D 4E616D653A2000      <1> .name                           db  'Name: ',0
 11822 00004814 4E657720            <1> .new_root_passwd                db  'New '
 11823 00004818 526F6F742070617373- <1> .root_passwd                    db  'Root password: ',0
 11824 00004821 776F72643A2000      <1>
 11825 00004828 4E657720            <1> .new_record_passwd              db  'New '
 11826 0000482C 5265636F7264207061- <1> .record_passwd                  db  'Record password: ',0
 11827 00004835 7373776F72643A2000  <1>
 11828 0000483E 526574797065207061- <1> .retype_passwd                  db  'Retype password: ',0
 11829 00004847 7373776F72643A2000  <1>
 11830 00004850 5363686564756C6520- <1> .input_schedule                 db  'Schedule (hh:mm-hh:mm;days): ',0
 11831 00004859 2868683A6D6D2D6868- <1>
 11832 00004862 3A6D6D3B6461797329- <1>
 11833 0000486B 3A2000              <1>
 11834 0000486E 496E707574206B6579- <1> .input_keystrokes               db  'Input keystrokes (max 13 keys)',0x0d
 11835 00004877 7374726F6B65732028- <1>
 11836 00004880 6D6178203133206B65- <1>
 11837 00004889 7973290D            <1>
 11838 0000488D 5072657373203C5363- <1>                                 db  'Press <Scroll Lock> to finish,',0x0d
 11839 00004896 726F6C6C204C6F636B- <1>
 11840 0000489F 3E20746F2066696E69- <1>
 11841 000048A8 73682C0D            <1>
 11842 000048AC 4B657920636F646520- <1>                                 db  'Key code = 0x',0
 11843 000048B5 3D20307800          <1>
 11844 000048BA 0D4B657920636F756E- <1> .key_count                      db  0x0d,'Key count = ',0
 11845 000048C3 74203D2000          <1>
 11846 000048C8 492F4F204261736520- <1> .io_port                        db  'I/O Base Ports (hex1,hex2): ',0
 11847 000048D1 506F72747320286865- <1>
 11848 000048DA 78312C68657832293A- <1>
 11849 000048E3 2000                <1>
 11850 000048E5 596561723A2000      <1> .year                           db  'Year: ',0
 11851                              <1> 
 11852                              <1> ; used in record info box.
 11853 000048EC 202020447269766520- <1> .drive_id                       db       '   Drive ID: ',0
 11854 000048F5 49443A2000          <1>
 11855 000048FA 202020506172742049- <1> .part_id                        db  '   Part ID: ',0
 11856 00004903 443A2000            <1>
 11857 00004907 0D5265636F72642054- <1> .record_type                    db  0x0d,'Record Type: ',0
 11858 00004910 7970653A2000        <1>
 11859 00004916 0D5265636F7264204E- <1> .record_name                    db  0x0d,'Record Name: ',0
 11860 0000491F 616D653A2000        <1>
 11861                              <1> 
 11862 00004925 0D0D4175746F204163- <1> .auto_active                    db  0x0d,0x0d,'Auto Active: ',0
 11863 0000492E 746976653A2000      <1>
 11864 00004935 202020204163746976- <1> .active                         db  '    Active: ',0
 11865 0000493E 653A2000            <1>
 11866 00004942 0D20204175746F2048- <1> .auto_hide                      db  0x0d,'  Auto Hide: ',0
 11867 0000494B 6964653A2000        <1>
 11868 00004951 202020204869646465- <1> .hidden                         db  '    Hidden: ',0
 11869 0000495A 6E3A2000            <1>
 11870 0000495E 0D5377617020647269- <1> .swap_drv                       db  0x0d,'Swap driver: ',0
 11871 00004967 7665723A2000        <1>
 11872 0000496D 2020204C6F67696361- <1> .logical                        db  '   Logical: ',0
 11873 00004976 6C3A2000            <1>
 11874 0000497A 0D0D4B657920537472- <1> .key_strokes                    db  0x0d,0x0d,'Key Strokes: ',0
 11875 00004983 6F6B65733A2000      <1>
 11876 0000498A 202050617373776F72- <1> .password                       db  '  Password: ',0
 11877 00004993 643A2000            <1>
 11878 00004997 0D2020205363686564- <1> .schedule                       db  0x0d,'   Schedule: ',0
 11879 000049A0 756C653A2000        <1>
 11880                              <1> 
 11881 000049A6 59657300            <1> .yes                            db  'Yes',0
 11882 000049AA 4E6F2000            <1> .no                             db  'No ',0
 11883                              <1> 
 11884                              <1> ; copyright infomation, displayed at the top of the screen.
 11885 000049AE 20536D61727420426F- <1> .copyright          db  ' Smart Boot Manager 3.90.1 | Copyright (C) 2001 Suzhe',0
 11886 000049B7 6F74204D616E616765- <1>
 11887 000049C0 7220332E39302E3120- <1>
 11888 000049C9 7C20436F7079726967- <1>
 11889 000049D2 687420284329203230- <1>
 11890 000049DB 30312053757A686500  <1>
 11891                              <1> 
 11892                              <1> ; hint message, displayed at the bottom of the screen.
 11893 000049E4 207E46317E2D48656C- <1> .hint               db  ' ~F1~-Help  ~F2~-Save  ~F3~-Rename  ~F4~-Active  ~F5~-Hide  ~Tab~-Menu',0
 11894 000049ED 7020207E46327E2D53- <1>
 11895 000049F6 61766520207E46337E- <1>
 11896 000049FF 2D52656E616D652020- <1>
 11897 00004A08 7E46347E2D41637469- <1>
 11898 00004A11 766520207E46357E2D- <1>
 11899 00004A1A 4869646520207E5461- <1>
 11900 00004A23 627E2D4D656E7500    <1>
 11901                              <1> 
 11902                              <1> ; about infomation.
 11903 00004A2B 202020202020202020- <1> .about_content      db  '           Smart Boot Manager 3.90.1',0x0d
 11904 00004A34 2020536D6172742042- <1>
 11905 00004A3D 6F6F74204D616E6167- <1>
 11906 00004A46 657220332E39302E31- <1>
 11907 00004A4F 0D                  <1>
 11908 00004A50 2020436F7079726967- <1>                     db  '  Copyright (C) 2001 Suzhe <su_zhe@sina.com>',0x0d,0x0d
 11909 00004A59 687420284329203230- <1>
 11910 00004A62 30312053757A686520- <1>
 11911 00004A6B 3C73755F7A68654073- <1>
 11912 00004A74 696E612E636F6D3E0D- <1>
 11913 00004A7D 0D                  <1>
 11914 00004A7E 205468697320697320- <1>                     db  ' This is free software, you can redistribute',0x0d
 11915 00004A87 6672656520736F6674- <1>
 11916 00004A90 776172652C20796F75- <1>
 11917 00004A99 2063616E2072656469- <1>
 11918 00004AA2 73747269627574650D  <1>
 11919 00004AAB 2020697420616E642F- <1>                     db  '  it and/or modify it under the terms of the',0x0d
 11920 00004AB4 6F72206D6F64696679- <1>
 11921 00004ABD 20697420756E646572- <1>
 11922 00004AC6 20746865207465726D- <1>
 11923 00004ACF 73206F66207468650D  <1>
 11924 00004AD8 2020202020474E5520- <1>                     db  '     GNU General Public License version 2.',0x0d,0x0d
 11925 00004AE1 47656E6572616C2050- <1>
 11926 00004AEA 75626C6963204C6963- <1>
 11927 00004AF3 656E73652076657273- <1>
 11928 00004AFC 696F6E20322E0D0D    <1>
 11929 00004B04 546869732070726F67- <1>                     db  'This program comes with ABSOLUTELY NO WARRANTY!',0
 11930 00004B0D 72616D20636F6D6573- <1>
 11931 00004B16 207769746820414253- <1>
 11932 00004B1F 4F4C5554454C59204E- <1>
 11933 00004B28 4F2057415252414E54- <1>
 11934 00004B31 592100              <1>
 11935                              <1> 
 11936                              <1> ; help infomation.
 11937                              <1> .help_content:
 11938 00004B34 202020202020463120- <1>         db '      F1 = Help                  Ctrl+F1 = About',0x0d
 11939 00004B3D 3D2048656C70202020- <1>
 11940 00004B46 202020202020202020- <1>
 11941 00004B4F 202020202020437472- <1>
 11942 00004B58 6C2B4631203D204162- <1>
 11943 00004B61 6F75740D            <1>
 11944 00004B65 202020202020463220- <1>         db '      F2 = Save                       F3 = Rename',0x0d
 11945 00004B6E 3D2053617665202020- <1>
 11946 00004B77 202020202020202020- <1>
 11947 00004B80 202020202020202020- <1>
 11948 00004B89 20204633203D205265- <1>
 11949 00004B92 6E616D650D          <1>
 11950 00004B97 202020202020463420- <1>         db '      F4 = Mark active                F5 = Hide/unhide',0x0d
 11951 00004BA0 3D204D61726B206163- <1>
 11952 00004BA9 746976652020202020- <1>
 11953 00004BB2 202020202020202020- <1>
 11954 00004BBB 20204635203D204869- <1>
 11955 00004BC4 64652F756E68696465- <1>
 11956 00004BCD 0D                  <1>
 11957 00004BCE 202020202020463620- <1>         db '      F6 = Toggle auto active         F7 = Toggle auto hide',0x0d
 11958 00004BD7 3D20546F67676C6520- <1>
 11959 00004BE0 6175746F2061637469- <1>
 11960 00004BE9 766520202020202020- <1>
 11961 00004BF2 20204637203D20546F- <1>
 11962 00004BFB 67676C65206175746F- <1>
 11963 00004C04 20686964650D        <1>
 11964 00004C0A 202020202020463820- <1>         db '      F8 = Set default          Shift+F8 = Unset default',0x0d
 11965 00004C13 3D2053657420646566- <1>
 11966 00004C1C 61756C742020202020- <1>
 11967 00004C25 202020202053686966- <1>
 11968 00004C2E 742B4638203D20556E- <1>
 11969 00004C37 736574206465666175- <1>
 11970 00004C40 6C740D              <1>
 11971 00004C43 20204374726C2B4420- <1>         db '  Ctrl+D = Delete                 Ctrl+P = Duplicate',0x0d
 11972 00004C4C 3D2044656C65746520- <1>
 11973 00004C55 202020202020202020- <1>
 11974 00004C5E 202020202020204374- <1>
 11975 00004C67 726C2B50203D204475- <1>
 11976 00004C70 706C69636174650D    <1>
 11977 00004C78 20204374726C2B5520- <1>         db '  Ctrl+U = Move record up         Ctrl+N = Move record down',0x0d
 11978 00004C81 3D204D6F7665207265- <1>
 11979 00004C8A 636F72642075702020- <1>
 11980 00004C93 202020202020204374- <1>
 11981 00004C9C 726C2B4E203D204D6F- <1>
 11982 00004CA5 7665207265636F7264- <1>
 11983 00004CAE 20646F776E0D        <1>
 11984 00004CB4 20204374726C2B5320- <1>         db '  Ctrl+S = Set/unset schedule     Ctrl+T = Set delay time',0x0d
 11985 00004CBD 3D205365742F756E73- <1>
 11986 00004CC6 657420736368656475- <1>
 11987 00004CCF 6C6520202020204374- <1>
 11988 00004CD8 726C2B54203D205365- <1>
 11989 00004CE1 742064656C61792074- <1>
 11990 00004CEA 696D650D            <1>
 11991 00004CEE 20204374726C2B4B20- <1>         db '  Ctrl+K = Set/unset keystrokes   / or ? = Show information',0x0d
 11992 00004CF7 3D205365742F756E73- <1>
 11993 00004D00 6574206B6579737472- <1>
 11994 00004D09 6F6B65732020202F20- <1>
 11995 00004D12 6F72203F203D205368- <1>
 11996 00004D1B 6F7720696E666F726D- <1>
 11997 00004D24 6174696F6E0D        <1>
 11998 00004D2A 20204374726C2B4920- <1>         db '  Ctrl+I = Rescan all records     Ctrl+H = Rescan all partitions',0x0d,
 11999 00004D33 3D2052657363616E20- <1>
 12000 00004D3C 616C6C207265636F72- <1>
 12001 00004D45 647320202020204374- <1>
 12002 00004D4E 726C2B48203D205265- <1>
 12003 00004D57 7363616E20616C6C20- <1>
 12004 00004D60 706172746974696F6E- <1>
 12005 00004D69 730D                <1>
 12006 00004D6B 20204374726C2B5820- <1>         db '  Ctrl+X = Toggle swap driver id  Ctrl+F = Show/hide flags',0x0d
 12007 00004D74 3D20546F67676C6520- <1>
 12008 00004D7D 737761702064726976- <1>
 12009 00004D86 657220696420204374- <1>
 12010 00004D8F 726C2B46203D205368- <1>
 12011 00004D98 6F772F686964652066- <1>
 12012 00004DA1 6C6167730D          <1>
 12013 00004DA6 20204374726C2B4C20- <1>         db '  Ctrl+L = Toggle remember the last booted record',0x0d
 12014 00004DAF 3D20546F67676C6520- <1>
 12015 00004DB8 72656D656D62657220- <1>
 12016 00004DC1 746865206C61737420- <1>
 12017 00004DCA 626F6F746564207265- <1>
 12018 00004DD3 636F72640D          <1>
 12019 00004DD8 202020202020463920- <1>         db '      F9 = Change boot record password',0x0d
 12020 00004DE1 3D204368616E676520- <1>
 12021 00004DEA 626F6F74207265636F- <1>
 12022 00004DF3 72642070617373776F- <1>
 12023 00004DFC 72640D              <1>
 12024 00004DFF 202020202046313020- <1>         db '     F10 = Change root password',0x0d
 12025 00004E08 3D204368616E676520- <1>
 12026 00004E11 726F6F742070617373- <1>
 12027 00004E1A 776F72640D          <1>
 12028 00004E1F 4374726C2B46313020- <1>         db 'Ctrl+F10 = Enter/leave Administrator mode',0x0d
 12029 00004E28 3D20456E7465722F6C- <1>
 12030 00004E31 656176652041646D69- <1>
 12031 00004E3A 6E6973747261746F72- <1>
 12032 00004E43 206D6F64650D        <1>
 12033 00004E49 20416C742B46313020- <1>         db ' Alt+F10 = Enter/leave Security Lock mode',0x0d
 12034 00004E52 3D20456E7465722F6C- <1>
 12035 00004E5B 656176652053656375- <1>
 12036 00004E64 72697479204C6F636B- <1>
 12037 00004E6D 206D6F64650D        <1>
 12038 00004E73 202020202054616220- <1>         db '     Tab = Popup command menu',0x0d
 12039 00004E7C 3D20506F7075702063- <1>
 12040 00004E85 6F6D6D616E64206D65- <1>
 12041 00004E8E 6E750D              <1>
 12042 00004E91 20204374726C2B5120- <1>         db '  Ctrl+Q = Quit to BIOS         Ctrl+F12 = Power off',0
 12043 00004E9A 3D205175697420746F- <1>
 12044 00004EA3 2042494F5320202020- <1>
 12045 00004EAC 20202020204374726C- <1>
 12046 00004EB5 2B463132203D20506F- <1>
 12047 00004EBE 776572206F666600    <1>
 12048                              <1> 
 12049                              <1> ; normal messages.
 12050 00004EC6 4368616E6765732073- <1> .changes_saved      db  'Changes saved.',0
 12051 00004ECF 617665642E00        <1>
 12052 00004ED5 50617373776F726420- <1> .passwd_changed     db  'Password changed.',0
 12053 00004EDE 6368616E6765642E00  <1>
 12054 00004EE7 536176652074686520- <1> .ask_save_changes   db  'Save the changes (y/n)?',0
 12055 00004EF0 6368616E6765732028- <1>
 12056 00004EF9 792F6E293F00        <1>
 12057                              <1> 
 12058                              <1> ; error messages.
 12059 00004EFF 57726F6E6720706173- <1> .wrong_passwd       db  'Wrong password!',0
 12060 00004F08 73776F72642100      <1>
 12061 00004F0F 4469736B206572726F- <1> .disk_error         db  'Disk error! 0x',0
 12062 00004F18 722120307800        <1>
 12063 00004F1E 4D61726B2061637469- <1> .mark_act_failed    db  'Mark active failed!',0
 12064 00004F27 7665206661696C6564- <1>
 12065 00004F30 2100                <1>
 12066 00004F32 486964652F756E6869- <1> .toggle_hid_failed  db  'Hide/unhide failed!',0
 12067 00004F3B 6465206661696C6564- <1>
 12068 00004F44 2100                <1>
 12069 00004F46 4E6F204F7065726174- <1> .no_system          db  'No Operating System!',0x0d
 12070 00004F4F 696E67205379737465- <1>
 12071 00004F58 6D210D              <1>
 12072 00004F5B 5265706C6163652061- <1>                     db  'Replace a disk and try again.',0
 12073 00004F64 206469736B20616E64- <1>
 12074 00004F6D 207472792061676169- <1>
 12075 00004F76 6E2E00              <1>
 12076 00004F79 496E76616C69642062- <1> .invalid_record     db  'Invalid boot record!',0
 12077 00004F82 6F6F74207265636F72- <1>
 12078 00004F8B 642100              <1>
 12079 00004F8E 496E76616C69642073- <1> .invalid_schedule   db  'Invalid schedule time!',0
 12080 00004F97 63686564756C652074- <1>
 12081 00004FA0 696D652100          <1>
 12082 00004FA5 5375726520746F2069- <1> .inst_confirm       db  'Sure to install Smart BootManager ',
 12083 00004FAE 6E7374616C6C20536D- <1>
 12084 00004FB7 61727420426F6F744D- <1>
 12085 00004FC0 616E6167657220      <1>
 12086 00004FC7 696E746F2064726976- <1>                     db  'into driver ',0
 12087 00004FD0 65722000            <1>
 12088 00004FD4 496E7374616C6C6174- <1> .inst_ok            db  'Installation is successful!',0
 12089 00004FDD 696F6E206973207375- <1>
 12090 00004FE6 636365737366756C21- <1>
 12091 00004FEF 00                  <1>
 12092 00004FF0 41626F727420746865- <1> .inst_abort         db  'Abort the installation.',0
 12093 00004FF9 20696E7374616C6C61- <1>
 12094 00005002 74696F6E2E00        <1>
 12095 00005008 5375726520746F2075- <1> .uninst_confirm     db  'Sure to uninstall Smart BootManager?',0x0d,0
 12096 00005011 6E696E7374616C6C20- <1>
 12097 0000501A 536D61727420426F6F- <1>
 12098 00005023 744D616E616765723F- <1>
 12099 0000502C 0D00                <1>
 12100 0000502E 556E696E7374616C6C- <1> .uninst_ok          db  'Uninstallation is successful!',0x0d
 12101 00005037 6174696F6E20697320- <1>
 12102 00005040 737563636573736675- <1>
 12103 00005049 6C210D              <1>
 12104 0000504C 436F6D707574657220- <1>                     db  'Computer will be restarted.',0
 12105 00005055 77696C6C2062652072- <1>
 12106 0000505E 65737461727465642E- <1>
 12107 00005067 00                  <1>
 12108 00005068 41626F727420746865- <1> .uninst_abort       db  'Abort the uninstallation.',0
 12109 00005071 20756E696E7374616C- <1>
 12110 0000507A 6C6174696F6E2E00    <1>
 12111 00005082 507265737320592074- <1> .confirm            db  'Press Y to continue, other key to abort.',0
 12112 0000508B 6F20636F6E74696E75- <1>
 12113 00005094 652C206F7468657220- <1>
 12114 0000509D 6B657920746F206162- <1>
 12115 000050A6 6F72742E00          <1>
 12116 000050AB 536D61727420426F6F- <1> .no_sbml            db  'Smart Boot Manager Loader missing ',0x0d
 12117 000050B4 74204D616E61676572- <1>
 12118 000050BD 204C6F61646572206D- <1>
 12119 000050C6 697373696E67200D    <1>
 12120 000050CE 6F722076657273696F- <1>                     db  'or version mismatch!',0
 12121 000050D7 6E206D69736D617463- <1>
 12122 000050E0 682100              <1>
 12123 000050E3 496E76616C69642049- <1> .invalid_ioports    db  'Invalid I/O Ports!',0
 12124 000050EC 2F4F20506F72747321- <1>
 12125 000050F5 00                  <1>
 12126                              <1> 
 12127                              <1> ; command menu strings
 12128                              <1> ; main menu
 12129 000050F6 4D61696E204D656E75- <1> .main_menu_title     db  'Main Menu',0
 12130 000050FF 00                  <1>
 12131 00005100 48656C702020202020- <1> .main_menu_help      db  'Help             ~F1~',0
 12132 00005109 20202020202020207E- <1>
 12133 00005112 46317E00            <1>
 12134 00005116 41626F757420202020- <1> .main_menu_about     db  'About       ~Ctrl-F1~',0
 12135 0000511F 2020207E4374726C2D- <1>
 12136 00005128 46317E00            <1>
 12137 0000512C 426F6F7420697400    <1> .main_menu_bootit    db  'Boot it',0
 12138 00005134 426F6F742050726576- <1> .main_menu_bootprev  db  'Boot Previous MBR',0
 12139 0000513D 696F7573204D425200  <1>
 12140 00005146 517569742020202020- <1> .main_menu_quit      db  'Quit         ~Ctrl-Q~',0
 12141 0000514F 202020207E4374726C- <1>
 12142 00005158 2D517E00            <1>
 12143 0000515C 506F776572204F6666- <1> .main_menu_poweroff  db  'Power Off  ~Ctrl-F12~',0
 12144 00005165 20207E4374726C2D46- <1>
 12145 0000516E 31327E00            <1>
 12146 00005172 5265636F7264205365- <1> .main_menu_recordset db  'Record Settings  ->',0
 12147 0000517B 7474696E677320202D- <1>
 12148 00005184 3E00                <1>
 12149 00005186 53797374656D205365- <1> .main_menu_sysset    db  'System Settings  ->',0
 12150 0000518F 7474696E677320202D- <1>
 12151 00005198 3E00                <1>
 12152 0000519A 53617665204368616E- <1> .main_menu_save      db  'Save Changes     ~F2~',0
 12153 000051A3 67657320202020207E- <1>
 12154 000051AC 46327E00            <1>
 12155 000051B0 2D2D2D2D2D2D2D2D2D- <1> .main_menu_bar       db  '-------------------',0
 12156 000051B9 2D2D2D2D2D2D2D2D2D- <1>
 12157 000051C2 2D00                <1>
 12158                              <1> 
 12159                              <1> ; record settings menu
 12160 000051C4 5265636F7264205365- <1> .record_menu_title    db  'Record Settings',0
 12161 000051CD 7474696E677300      <1>
 12162 000051D4 496E666F726D617469- <1> .record_menu_info     db  'Information     ~/ or ?~',0
 12163 000051DD 6F6E20202020207E2F- <1>
 12164 000051E6 206F72203F7E00      <1>
 12165 000051ED 4E616D652020202020- <1> .record_menu_name     db  'Name                ~F3~',0
 12166 000051F6 202020202020202020- <1>
 12167 000051FF 20207E46337E00      <1>
 12168 00005206 50617373776F726420- <1> .record_menu_passwd   db  'Password            ~F9~',0
 12169 0000520F 202020202020202020- <1>
 12170 00005218 20207E46397E00      <1>
 12171 0000521F 5363686564756C6520- <1> .record_menu_schedule db  'Schedule        ~Ctrl-S~',0
 12172 00005228 202020202020207E43- <1>
 12173 00005231 74726C2D537E00      <1>
 12174 00005238 4B65797374726F6B65- <1> .record_menu_keys     db  'Keystrokes      ~Ctrl-K~',0
 12175 00005241 732020202020207E43- <1>
 12176 0000524A 74726C2D4B7E00      <1>
 12177 00005251 4D61726B2041637469- <1> .record_menu_act      db  'Mark Active         ~F4~',0
 12178 0000525A 766520202020202020- <1>
 12179 00005263 20207E46347E00      <1>
 12180 0000526A 486964652F756E6869- <1> .record_menu_hide     db  'Hide/unhide         ~F5~',0
 12181 00005273 646520202020202020- <1>
 12182 0000527C 20207E46357E00      <1>
 12183 00005283 4175746F2041637469- <1> .record_menu_autoact  db  'Auto Active         ~F6~',0
 12184 0000528C 766520202020202020- <1>
 12185 00005295 20207E46367E00      <1>
 12186 0000529C 4175746F2048696465- <1> .record_menu_autohide db  'Auto Hide           ~F7~',0
 12187 000052A5 202020202020202020- <1>
 12188 000052AE 20207E46377E00      <1>
 12189 000052B5 537761702044726976- <1> .record_menu_swapdrv  db  'Swap Driver ID  ~Ctrl-X~',0
 12190 000052BE 657220494420207E43- <1>
 12191 000052C7 74726C2D587E00      <1>
 12192 000052CE 44656C657465202020- <1> .record_menu_del      db  'Delete          ~Ctrl-D~',0
 12193 000052D7 202020202020207E43- <1>
 12194 000052E0 74726C2D447E00      <1>
 12195 000052E7 4475706C6963617465- <1> .record_menu_dup      db  'Duplicate       ~Ctrl-P~',0
 12196 000052F0 202020202020207E43- <1>
 12197 000052F9 74726C2D507E00      <1>
 12198 00005300 4D6F76652055702020- <1> .record_menu_moveup   db  'Move Up         ~Ctrl-U~',0
 12199 00005309 202020202020207E43- <1>
 12200 00005312 74726C2D557E00      <1>
 12201 00005319 4D6F766520446F776E- <1> .record_menu_movedown db  'Move Down       ~Ctrl-N~',0
 12202 00005322 202020202020207E43- <1>
 12203 0000532B 74726C2D4E7E00      <1>
 12204 00005332 2D2D2D2D2D2D2D2D2D- <1> .record_menu_bar      db  '----------------------',0
 12205 0000533B 2D2D2D2D2D2D2D2D2D- <1>
 12206 00005344 2D2D2D2D00          <1>
 12207                              <1> 
 12208                              <1> ; system setting menu
 12209 00005349 53797374656D205365- <1> .sys_menu_title       db  'System Settings',0
 12210 00005352 7474696E677300      <1>
 12211 00005359 526F6F742050617373- <1> .sys_menu_rootpasswd  db  'Root Password              ~F10~',0
 12212 00005362 776F72642020202020- <1>
 12213 0000536B 202020202020202020- <1>
 12214 00005374 7E4631307E00        <1>
 12215 0000537A 546F67676C65204164- <1> .sys_menu_admin       db  'Toggle Admin Mode     ~Ctrl-F10~',0
 12216 00005383 6D696E204D6F646520- <1>
 12217 0000538C 202020207E4374726C- <1>
 12218 00005395 2D4631307E00        <1>
 12219 0000539B 546F67676C65205365- <1> .sys_menu_security    db  'Toggle Security Mode   ~Alt-F10~',0
 12220 000053A4 637572697479204D6F- <1>
 12221 000053AD 64652020207E416C74- <1>
 12222 000053B6 2D4631307E00        <1>
 12223 000053BC 536574204465666175- <1> .sys_menu_setdef      db  'Set Default Record          ~F8~',0
 12224 000053C5 6C74205265636F7264- <1>
 12225 000053CE 202020202020202020- <1>
 12226 000053D7 207E46387E00        <1>
 12227 000053DD 556E73657420446566- <1> .sys_menu_unsetdef    db  'Unset Default Record  ~Shift-F8~',0
 12228 000053E6 61756C74205265636F- <1>
 12229 000053EF 726420207E53686966- <1>
 12230 000053F8 742D46387E00        <1>
 12231 000053FE 5365742044656C6179- <1> .sys_menu_delay       db  'Set Delay Time          ~Ctrl-T~',0
 12232 00005407 2054696D6520202020- <1>
 12233 00005410 2020202020207E4374- <1>
 12234 00005419 726C2D547E00        <1>
 12235 0000541F 4368616E676520426F- <1> .sys_menu_bmstyle     db  'Change Boot Menu Style  ~Ctrl-F~',0
 12236 00005428 6F74204D656E752053- <1>
 12237 00005431 74796C6520207E4374- <1>
 12238 0000543A 726C2D467E00        <1>
 12239 00005440 546F67676C65205265- <1> .sys_menu_remlast     db  'Toggle Remember Last    ~Ctrl-L~',0
 12240 00005449 6D656D626572204C61- <1>
 12241 00005452 7374202020207E4374- <1>
 12242 0000545B 726C2D4C7E00        <1>
 12243 00005461 546F67676C65204578- <1> .sys_menu_int13ext    db  'Toggle Extended Int 13H',0
 12244 0000546A 74656E64656420496E- <1>
 12245 00005473 742031334800        <1>
 12246 00005479 52657363616E20416C- <1> .sys_menu_rescanall   db  'Rescan All Boot Records ~Ctrl-I~',0
 12247 00005482 6C20426F6F74205265- <1>
 12248 0000548B 636F726473207E4374- <1>
 12249 00005494 726C2D497E00        <1>
 12250 0000549A 52657363616E20416C- <1> .sys_menu_rescanpart  db  'Rescan All Partitions   ~Ctrl-H~',0
 12251 000054A3 6C2050617274697469- <1>
 12252 000054AC 6F6E732020207E4374- <1>
 12253 000054B5 726C2D487E00        <1>
 12254 000054BB 5365742043442D524F- <1> .sys_menu_set_ioports db  'Set CD-ROM I/O Ports',0
 12255 000054C4 4D20492F4F20506F72- <1>
 12256 000054CD 747300              <1>
 12257 000054D0 536574207965617220- <1> .sys_menu_set_y2kfix  db  'Set year (fix Y2K BIOS bug)',0
 12258 000054D9 286669782059324B20- <1>
 12259 000054E2 42494F532062756729- <1>
 12260 000054EB 00                  <1>
 12261 000054EC 496E7374616C6C2053- <1> .sys_menu_inst        db  'Install Smart BootManager',0
 12262 000054F5 6D61727420426F6F74- <1>
 12263 000054FE 4D616E6167657200    <1>
 12264 00005506 556E696E7374616C6C- <1> .sys_menu_uninst      db  'Uninstall Smart BootManager',0
 12265 0000550F 20536D61727420426F- <1>
 12266 00005518 6F744D616E61676572- <1>
 12267 00005521 00                  <1>
 12268 00005522 2D2D2D2D2D2D2D2D2D- <1> .sys_menu_bar         db  '------------------------------',0
 12269 0000552B 2D2D2D2D2D2D2D2D2D- <1>
 12270 00005534 2D2D2D2D2D2D2D2D2D- <1>
 12271 0000553D 2D2D2D00            <1>
 12272                              <1> 
 12273 00005541 43686F6F7365206120- <1> .cdimg_menu_title     db  'Choose a CD Image',0
 12274 0000554A 434420496D61676500  <1>
 12275 00005553 4E6F20456D756C6174- <1> .cdimg_menu_noemu     db  'No Emulation',0
 12276 0000555C 696F6E00            <1>
 12277 00005560 312E32204D20446973- <1> .cdimg_menu_120m      db  '1.2 M Diskette',0
 12278 00005569 6B6574746500        <1>
 12279 0000556F 312E34344D20446973- <1> .cdimg_menu_144m      db  '1.44M Diskette',0
 12280 00005578 6B6574746500        <1>
 12281 0000557E 322E38384D20446973- <1> .cdimg_menu_288m      db  '2.88M Diskette',0
 12282 00005587 6B6574746500        <1>
 12283                              <1> 
 12284 0000558D 53756E00            <1> .sunday              db 'Sun',0
 12285 00005591 4D6F6E00            <1> .monday              db 'Mon',0
 12286 00005595 54756500            <1> .tuesday             db 'Tue',0
 12287 00005599 57656400            <1> .wednesday           db 'Wed',0
 12288 0000559D 54687500            <1> .thursday            db 'Thu',0
 12289 000055A1 46726900            <1> .friday              db 'Fri',0
 12290 000055A5 53617400            <1> .saturday            db 'Sat',0
 12291                              <1> 
 12292                              <1> ; END OF THEME.
 12293                              <1> end_of_theme:
 12294                              <1> 
 12295                              <1> ; vi:ts=8:et:nowrap
 12296                                  %endif
 12297                                  
 12298                                  end_of_sbm:
 12299                                  SIZE_OF_SBMK equ ($-$$)
 12300                                  
 12301                                  %ifndef EMULATE_PROG
 12302                                  
 12303 000055A9 00<rept>                  times 63*512-($-$$) db 0
 12304                                  
 12305                                  %endif
 12306                                  
 12307                                  
 12308                                  ;=============================================================================
 12309                                  ; temp data area
 12310                                  ;=============================================================================
 12311                                  	section .bss
 12312                                  
 12313                                  %ifndef EMULATE_PROG
 12314 00000000 <res 00001F87>                  resb MAX_SBM_SIZE - SIZE_OF_SBMK   ; skip enough space for theme.
 12315                                  %endif
 12316                                   
 12317                                  Start_of_Temporary_Data_Area:
 12318                                  start_of_tmp_data:
 12319                                  %include "tempdata.asm"
 12320                              <1> ; tempdata.asm
 12321                              <1> ;
 12322                              <1> ; some temp data for Smart Boot Manager
 12323                              <1> ;
 12324                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
 12325                              <1> ;
 12326                              <1> 
 12327                              <1> ;==============================================================================
 12328                              <1> ;temp data area for hd_io.asm
 12329                              <1> ;==============================================================================
 12330                              <1> %ifndef HD_IO_TEMPDATA
 12331                              <1> %define HD_IO_TEMPDATA
 12332                              <1> 
 12333                              <1> hdio_tmp:
 12334 00001F87 <res 00000008>      <1> .cdbc_cmd	resb SIZE_OF_CDBC_CMD
 12335 00001F8F <res 00000042>      <1> .extparam	resb SIZE_OF_EXTPARAM
 12336 00001FD1 <res 00000010>      <1> .int13ext	resb SIZE_OF_INT13EXT
 12337 00001FE1 <res 0000000A>      <1> .driveinfo	resb SIZE_OF_DRIVEINFO
 12338 00001FEB <res 00000001>      <1> .disk_errno	resb 1
 12339                              <1> 
 12340                              <1> %endif
 12341                              <1> 
 12342                              <1> ;==============================================================================
 12343                              <1> ;temp data area for knl.asm
 12344                              <1> ;==============================================================================
 12345                              <1> %ifndef KNL_TEMPDATA
 12346                              <1> %define KNL_TEMPDATA
 12347                              <1> 
 12348                              <1> knl_tmp:
 12349 00001FEC <res 00000001>      <1> .good_record_num	resb 1
 12350 00001FED <res 00000001>      <1> .max_record_num		resb 1
 12351 00001FEE <res 00000001>      <1> .part_id		resb 1
 12352 00001FEF <res 00000004>      <1> .logi_father		resd 1
 12353                              <1> 
 12354 00001FF3 <res 00000001>      <1> .floppy_num		resb 1
 12355 00001FF4 <res 00000013>      <1> .cdemu_spec		resb SIZE_OF_CDEMU_SPEC
 12356                              <1> 
 12357 00002007 <res 00000800>      <1> .disk_buf1		resb 2048
 12358 00002807 <res 00000800>      <1> .disk_buf2		resb 2048
 12359                              <1> 
 12360                              <1> %endif
 12361                              <1> 
 12362                              <1> ;==============================================================================
 12363                              <1> ;temp data area for ui.asm
 12364                              <1> ;==============================================================================
 12365                              <1> %ifndef UI_TEMPDATA
 12366                              <1> %define UI_TEMPDATA
 12367                              <1> 
 12368                              <1> ui_tmp:
 12369 00003007 <res 00000001>      <1> .left_col	resb  1
 12370 00003008 <res 00000001>      <1> .top_row	resb  1
 12371 00003009 <res 00000001>      <1> .right_col	resb  1
 12372 0000300A <res 00000001>      <1> .bottom_row	resb  1
 12373 0000300B <res 00000001>      <1> .frame_attr	resb  1
 12374 0000300C <res 00000001>      <1> .title_attr	resb  1
 12375 0000300D <res 00000002>      <1> .focus_win	resw  1
 12376 0000300F <res 00000002>      <1> .root_win	resw  1
 12377 00003011 <res 0000001A>      <1> .def_root_win	resb SIZE_OF_STRUC_WINDOW
 12378 0000302B <res 00000020>      <1> .tmp_msgbox	resb SIZE_OF_STRUC_MESSAGE_BOX
 12379 0000304B <res 00000029>      <1> .tmp_inputbox	resb SIZE_OF_STRUC_INPUT_BOX
 12380 00003074 <res 0000002B>      <1> .tmp_menubox	resb SIZE_OF_STRUC_MENU_BOX
 12381 0000309F <res 00000100>      <1> .tmp_buf	resb  256
 12382 0000319F <res 00000100>      <1> .tmp_buf1	resb  256
 12383                              <1> 
 12384                              <1> %endif
 12385                              <1> 
 12386                              <1> ;==============================================================================
 12387                              <1> ;temp data area for utils.asm
 12388                              <1> ;==============================================================================
 12389                              <1> %ifndef UTILS_TEMPDATA
 12390                              <1> %define UTILS_TEMPDATA
 12391                              <1> 
 12392                              <1> utils_tmp:
 12393 0000329F <res 00000001>      <1> .kbd_work	       resb  1
 12394 000032A0 <res 00000001>      <1> .kbd_last_shift        resb  1
 12395 000032A1 <res 00000001>      <1> .kbd_bypass_next_shift resb 1
 12396                              <1> 
 12397                              <1> %endif
 12398                              <1> 
 12399                              <1> ;=============================================================================
 12400                              <1> ;temp data area for main.asm
 12401                              <1> ;=============================================================================
 12402                              <1> %ifndef MAIN_TEMPDATA
 12403                              <1> %define MAIN_TEMPDATA
 12404                              <1> 
 12405                              <1> main_tmp:
 12406 000032A2 <res 00000020>      <1> .good_record_list    resb MAX_RECORD_NUM
 12407                              <1> 
 12408 000032C2 <res 00000001>      <1> .time_count         resb  1                       ;
 12409 000032C3 <res 00000002>      <1> .ticks_count        resw  1                       ; used in get_key func
 12410 000032C5 <res 00000001>      <1> .key_pressed        resb  1                       ;
 12411 000032C6 <res 00000002>      <1> .keycode            resw  1
 12412                              <1> 
 12413 000032C8 <res 00000001>      <1> .change_occured     resb  1                       ; if change occured.
 12414 000032C9 <res 00000001>      <1> .root_login         resb  1                       ; root login state.
 12415                              <1> 
 12416 000032CA <res 00000002>      <1> .last_time          resw  1
 12417                              <1> 
 12418 000032CC <res 00000002>      <1> .schedule_begin  resw  1
 12419 000032CE <res 00000002>      <1> .schedule_end    resw  1
 12420 000032D0 <res 00000002>      <1> .schedule_day    resw  1
 12421                              <1> 
 12422 000032D2 <res 00000002>      <1> .keystroke_ptr   resw  1
 12423 000032D4 <res 00000001>      <1> .keystroke_num   resb  1
 12424 000032D5 <res 00000001>      <1> .keystroke_max   resb  1
 12425 000032D6 <res 0000002B>      <1> .ikbox           resb SIZE_OF_STRUC_MENU_BOX
 12426                              <1> 
 12427 00003301 <res 00000800>      <1> .records_buf     resb MAX_RECORD_NUM * SIZE_OF_BOOTRECORD
 12428 00003B01 <res 00000050>      <1> .record_string   resb 80
 12429 00003B51 <res 00000100>      <1> .dialog_buf      resb 256
 12430 00003C51 <res 00000050>      <1> .root_buf        resb 80
 12431                              <1> 
 12432                              <1> %endif
 12433                              <1> 
 12434                              <1> %ifndef MYINT13H_TEMPDATA
 12435                              <1> %define MYINT13H_TEMPDATA
 12436                              <1> 
 12437                              <1> myint13h_tmp:
 12438 00003CA1 <res 00000002>      <1> .edd30_off  resw 1
 12439 00003CA3 <res 00000002>      <1> .edd30_seg  resw 1
 12440                              <1> 
 12441                              <1> %endif
 12442                              <1> 
 12443                                  End_of_Temporary_Data_Area:
 12444                                  
 12445                                  ; vi:ts=8:et:nowrap
