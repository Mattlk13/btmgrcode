     1                                  ; 
     2                                  ; 
     3                                  ; Smart Boot Manager
     4                                  ; 
     5                                  ; 
     6                                  ;  developed by
     7                                  ;    
     8                                  ;       Peter Kleissner
     9                                  ;       Vienna Computer Products
    10                                  ;       Suzhe
    11                                  ;       Christopher Li
    12                                  ;       Lonius
    13                                  ;       Risko Gergely
    14                                  ;       Victor O`Muerte
    15                                  ;       Dirk Knop
    16                                  ;       Lenart Janos
    17                                  ;       Frédéric Bonnaud
    18                                  ;       brz
    19                                  ;       Manuel Clos
    20                                  ;       Benoit Mortier
    21                                  ;       Bill Hults
    22                                  ;       Andr Maldonado
    23                                  ;       Santiago Garcia Mantinan
    24                                  ;       
    25                                  ;       Thank you all.
    26                                  ;       
    27                                  
    28                                  ; asmsyntax=nasm
    29                                  ;
    30                                  ; main.asm
    31                                  ;
    32                                  ; Main programs for Smart Boot Manager
    33                                  ;
    34                                  ; Copyright (C) 2000, Suzhe. See file COPYING for details.
    35                                  ; Copyright (C) 2001, Suzhe. See file COPYING for details.
    36                                  ;
    37                                  
    38                                  ; optional Assembly:
    39                                  ; 
    40                                  ;   EMULATE_PROG
    41                                  ;       if defined, creates DOS executable Test-vesion
    42                                  ;   
    43                                  ;   THEME_ZH, THEME_DE, THEME_HU, THEME_RU, THEME_CZ, THEME_ES, THEME_FR, THEME_PT, else US
    44                                  ;       language themes
    45                                  ;   
    46                                  ;   DISABLE_CDBOOT
    47                                  ;       disables CD Boot and initialization of it
    48                                  ;   
    49                                  ;   Y2K_BUGFIX
    50                                  ;       year 2000 fix [removed since Revision 5, we write the year 2007]
    51                                  
    52                                  
    53                                  ; compile 16 bit code (Real Mode) and beware backward compatibility down to 386er
    54                                  [bits 16]
    55                                  CPU 386
    56                                  
    57                                  %include "macros.h"
    58                              <1> ; macros.h
    59                              <1> ;
    60                              <1> ; some nasm macros that simplify the coding.
    61                              <1> ;
    62                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
    63                              <1> ;
    64                              <1> 
    65                              <1> %ifndef DEFINE_MACROS
    66                              <1> %define DEFINE_MACROS
    67                              <1> 
    68                              <1> %macro retz 0
    69                              <1>        jnz %%skip
    70                              <1>        ret
    71                              <1> %%skip:
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %define jmpz  jz near
    75                              <1> %define jmpnz jnz near
    76                              <1> %define jmpe  je near
    77                              <1> %define jmpne jne near
    78                              <1> %define jmpc  jc near
    79                              <1> %define jmpnc jnc near
    80                              <1> %define jmpa  ja near
    81                              <1> %define jmpna jna near
    82                              <1> %define jmpb  jb near
    83                              <1> %define jmpnb jnb near
    84                              <1> 
    85                              <1> 
    86                              <1> %if 0
    87                              <1> %macro jmpz 1
    88                              <1>        jnz %%skip
    89                              <1>        jmp %1
    90                              <1> %%skip:
    91                              <1> %endmacro
    92                              <1> 
    93                              <1> %macro jmpnz 1
    94                              <1>        jz %%skip
    95                              <1>        jmp %1
    96                              <1> %%skip:
    97                              <1> %endmacro
    98                              <1> 
    99                              <1> %macro jmpe 1
   100                              <1>        jne %%skip
   101                              <1>        jmp %1
   102                              <1> %%skip:
   103                              <1> %endmacro
   104                              <1> 
   105                              <1> %macro jmpne 1
   106                              <1>        je %%skip
   107                              <1>        jmp %1
   108                              <1> %%skip:
   109                              <1> %endmacro
   110                              <1> 
   111                              <1> %macro jmpc 1
   112                              <1>        jnc %%skip
   113                              <1>        jmp %1
   114                              <1> %%skip:
   115                              <1> %endmacro
   116                              <1> 
   117                              <1> %macro jmpnc 1
   118                              <1>        jc %%skip
   119                              <1>        jmp %1
   120                              <1> %%skip:
   121                              <1> %endmacro
   122                              <1> 
   123                              <1> %macro jmpb 1
   124                              <1>        jnb %%skip
   125                              <1>        jmp %1
   126                              <1> %%skip:
   127                              <1> %endmacro
   128                              <1> 
   129                              <1> %macro jmpnb 1
   130                              <1>        jb %%skip
   131                              <1>        jmp %1
   132                              <1> %%skip:
   133                              <1> %endmacro
   134                              <1> 
   135                              <1> %endif
   136                              <1> 
   137                              <1> %endif
   138                                  %include "ui.h"
   139                              <1> ;
   140                              <1> ; ui.h
   141                              <1> ;
   142                              <1> ; header file for ui.asm
   143                              <1> ;
   144                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   145                              <1> ;
   146                              <1> 
   147                              <1> ; following flags is used in struc_window.flags
   148                              <1> 
   149                              <1> %define WINFLAG_OPEN		0x01  ; set this flag when open the window
   150                              <1> %define WINFLAG_MODAL		0x02  ; Modal window
   151                              <1> %define WINFLAG_FRAMED		0x04  ; the window has frame.
   152                              <1> %define WINFLAG_NO_FOCUS	0x08  ; Cannot be focused.
   153                              <1> 
   154                              <1> %define MENUFLAG_SCROLLBAR	0x10  ; the menu has scroll bar
   155                              <1> %define MENUFLAG_SINK_WIDTH	0x20  ; reduce the width of menu area by two char
   156                              <1> %define MENUFLAG_SINK_UPPER	0x40  ; reduce the upper of menu area by one char
   157                              <1> %define MENUFLAG_SINK_BOTTOM	0x80  ; ..
   158                              <1> 
   159                              <1> %define WINFLAG_HI_RUNNING	0x01  ; unsed in hi-byte of struc_window.flags
   160                              <1> 
   161                              <1> ; following flags is used in struc_action.flags
   162                              <1> 
   163                              <1> %define ACTFLAG_CLOSE_WIN	0x01  ; close the window after doing the action
   164                              <1> %define ACTFLAG_REDRAW_BODY	0x02  ; redraw window body after doing it
   165                              <1> %define ACTFLAG_REDRAW_WIN	0x04  ; redraw entire window after doing it
   166                              <1> %define ACTFLAG_REDRAW_SCR	0x08  ; redraw entire screen after doint it
   167                              <1> 
   168                              <1> %define ACTFLAG_CHK_RECNUM	0x10  ; check good record number before do it
   169                              <1> %define ACTFLAG_AUTH_ROOT	0x20  ; confirm root password before do it
   170                              <1> %define ACTFLAG_AUTH_RECORD	0x40  ; confirm record password before do it
   171                              <1> %define ACTFLAG_AUTH_SECURITY	0x80  ; confirm password according to security
   172                              <1>                                       ; level
   173                              <1> %define ACTFLAG_AUTHS		0xF0
   174                              <1> 
   175                              <1> %define SIZE_OF_STRUC_WINDOW		struc_window.end_of_struc
   176                              <1> %define SIZE_OF_STRUC_MENU_BOX		struc_menu_box.end_of_struc
   177                              <1> %define SIZE_OF_STRUC_ACTION		struc_action.end_of_struc
   178                              <1> %define SIZE_OF_STRUC_MESSAGE_BOX	struc_message_box.end_of_struc
   179                              <1> %define SIZE_OF_STRUC_INPUT_BOX		struc_input_box.end_of_struc
   180                              <1> 
   181                              <1> struc struc_window
   182 00000000 <res 00000002>      <1> 	.flags			resw 1	; flags
   183 00000002 <res 00000002>      <1> 	.title			resw 1	; 2nd level pointer to window title
   184 00000004 <res 00000002>      <1> 	.win_attr		resw 1  ; window attribute, 
   185                              <1> 					; high = title, low = frame
   186 00000006 <res 00000002>      <1> 	.win_pos		resw 1	; window position, 
   187                              <1> 					; high = row, low = col
   188 00000008 <res 00000002>      <1> 	.win_size		resw 1	; window size,
   189                              <1> 					; high = height, low = width
   190 0000000A <res 00000002>      <1> 	.parent_win		resw 1	; pointer to parent window
   191 0000000C <res 00000002>      <1> 	.next_win		resw 1  ; pointer to next window
   192 0000000E <res 00000002>      <1> 	.previous_win		resw 1  ; pointer to previous window
   193                              <1> 
   194 00000010 <res 00000002>      <1> 	.act_num		resw 1  ; number of actions
   195 00000012 <res 00000002>      <1> 	.act_table		resw 1	; pointer to action table
   196                              <1> 
   197 00000014 <res 00000002>      <1> 	.default_event_handle	resw 1	; default key event handle
   198 00000016 <res 00000002>      <1> 	.event_handle		resw 1	; key event handle
   199 00000018 <res 00000002>      <1> 	.draw_body_proc		resw 1	; draw window body proc
   200                              <1> 	.end_of_struc
   201                              <1> endstruc
   202                              <1> 
   203                              <1> struc struc_action
   204 00000000 <res 00000001>      <1> 	.flags			resb 1	; flags
   205 00000001 <res 00000002>      <1> 	.keycode		resw 1	; keycode
   206 00000003 <res 00000002>      <1> 	.func			resw 1	; function entry
   207                              <1> 	.end_of_struc
   208                              <1> endstruc
   209                              <1> 
   210                              <1> 
   211                              <1> ; For menubox, the actions of menu items are stored in struc_window.act_table.
   212                              <1> ; First items_num actions in act_table are menu items'. Other actions are 
   213                              <1> ; hotkeys.
   214                              <1> 
   215                              <1> struc struc_menu_box
   216                              <1> ; first part is a struc_window data
   217 00000000 <res 0000001A>      <1> 	.window			resb SIZE_OF_STRUC_WINDOW
   218                              <1> 
   219                              <1> ; data member of menu box
   220 0000001A <res 00000002>      <1> 	.menu_header		resw 1	; 2nd level pointer to menu header string
   221 0000001C <res 00000001>      <1> 	.menu_header_attr	resb 1	; attribute of menu header (if have)
   222 0000001D <res 00000002>      <1> 	.menu_norm_attr		resw 1	; attribute of normal menu item, 
   223                              <1> 					; high = hotkey attr, low =normal attr
   224 0000001F <res 00000002>      <1> 	.menu_focus_attr	resw 1	; attribute of focused menu item
   225 00000021 <res 00000002>      <1> 	.menu_area_pos		resw 1	; position of menu area
   226 00000023 <res 00000002>      <1> 	.menu_area_size		resw 1	; size of menu area
   227 00000025 <res 00000001>      <1> 	.scrollbar_attr		resb 1	; attribute of scrollbar
   228                              <1> 
   229 00000026 <res 00000001>      <1> 	.items_num		resb 1	; number of menu items
   230 00000027 <res 00000001>      <1> 	.focus_item		resb 1	; focused item
   231 00000028 <res 00000001>      <1> 	.first_visible_item	resb 1	; first visible item
   232                              <1> 
   233 00000029 <res 00000002>      <1> 	.item_str_proc		resw 1	; proc of get a item's string
   234                              <1> 					; input cx = index, si -> menu
   235                              <1> 					; output si -> string
   236                              <1> 	.end_of_struc
   237                              <1> endstruc
   238                              <1> 
   239                              <1> struc struc_message_box
   240 00000000 <res 0000001A>      <1> 	.window			resb SIZE_OF_STRUC_WINDOW
   241 0000001A <res 00000002>      <1> 	.message		resw 1  ; pointer to the message
   242 0000001C <res 00000002>      <1> 	.message_attr		resw 1  ; attribute of the message
   243 0000001E <res 00000002>      <1> 	.pressed_key		resw 1  ; the key which user pressed
   244                              <1> 	.end_of_struc
   245                              <1> endstruc
   246                              <1> 
   247                              <1> struc struc_input_box
   248 00000000 <res 0000001A>      <1> 	.window			resb SIZE_OF_STRUC_WINDOW
   249 0000001A <res 00000002>      <1> 	.message		resw 1  ; pointer to the message
   250 0000001C <res 00000002>      <1> 	.message_attr		resw 1  ; attribute of the message
   251 0000001E <res 00000001>      <1> 	.input_attr		resb 1  ; attribute of input area
   252 0000001F <res 00000001>      <1> 	.input_type		resb 1	; input type, 0=normal, 1=passwd
   253 00000020 <res 00000002>      <1> 	.input_buf		resw 1	; pointer to input buffer
   254 00000022 <res 00000001>      <1> 	.input_buf_len		resb 1	; length of input buffer
   255 00000023 <res 00000001>      <1> 	.input_area_len		resb 1	; length of input area
   256 00000024 <res 00000002>      <1> 	.input_area_pos		resw 1	; position of input area (in window)
   257 00000026 <res 00000001>      <1> 	.input_startp		resb 1	; the first visible char in input buf
   258 00000027 <res 00000001>      <1> 	.input_curp		resb 1	; cursor position
   259 00000028 <res 00000001>      <1> 	.return_val		resb 1	; return val, 0 = success, 1 = cancel
   260                              <1> 	.end_of_struc
   261                              <1> endstruc
   262                              <1> 
   263                              <1> ; vi:nowrap
   264                                  %include "hd_io.h"
   265                              <1> ; hd_io.h
   266                              <1> ;
   267                              <1> ; header file for hd_io.asm
   268                              <1> ;
   269                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   270                              <1> ;
   271                              <1> 
   272                              <1> 
   273                              <1> %define DRVFLAG_DRIVEOK    0x0001       ;
   274                              <1> %define DRVFLAG_CHSVALID   0x0002       ; used in driveinfo structure
   275                              <1> %define DRVFLAG_REMOVABLE  0x0004       ; and bootrecord structure 
   276                              <1> %define DRVFLAG_EXTOK      0x0008       ;
   277                              <1> %define DRVFLAG_ISCDROM    0x0010       ; 0000,0000,0001,0000B
   278                              <1> 
   279                              <1> %define DRVFLAG_MASK       0x0015       ; 0000,0000,0001,0101B
   280                              <1> 
   281                              <1> %define INT13H_EXT_INSTCHECK 0x41
   282                              <1> %define INT13H_EXT_READ      0x42
   283                              <1> %define INT13H_EXT_WRITE     0x43
   284                              <1> %define INT13H_EXT_GETINFO   0x48
   285                              <1> %define INT13H_EXT_LOCK      0x45
   286                              <1> %define INT13H_RESET         0X00
   287                              <1> %define INT13H_READ          0X02
   288                              <1> %define INT13H_WRITE         0X03
   289                              <1> %define INT13H_GETINFO       0X08
   290                              <1> %define INT13H_GETTYPE       0x15
   291                              <1> 
   292                              <1> %define EXT_SUBSET_FIXED     0x01
   293                              <1> %define EXT_SUBSET_REMOVABLE 0x02
   294                              <1> %define EXT_SUBSET_EDD       0x04
   295                              <1> 
   296                              <1> %define DRV_TYPE_FIXED       0x03
   297                              <1> 
   298                              <1> %define MIN_HD_ID            0X80
   299                              <1> %define EXTPARAM_SIZE        0x42
   300                              <1> 
   301                              <1> %define MAX_CYLS             1023
   302                              <1> 
   303                              <1> ; Structure for calling int 13h ext Read / Write functions
   304                              <1> struc struc_int13ext
   305 00000000 <res 00000001>      <1>       .pack_size    : resb  1      ; ==16 size of struct Int13ExtData
   306 00000001 <res 00000001>      <1>       .reserved     : resb  1      ; ==0
   307 00000002 <res 00000001>      <1>       .blk_count    : resb  1      ; number of blocks to transfer <= 127
   308 00000003 <res 00000001>      <1>       .reserved1    : resb  1      ; ==0
   309 00000004 <res 00000002>      <1>       .buf_addr_off : resw  1      ; address of transfer buffer(segment:offset)
   310 00000006 <res 00000002>      <1>       .buf_addr_seg : resw  1
   311 00000008 <res 00000002>      <1>       .blk_num_low1 : resw  1      ; starting absolute block number
   312 0000000A <res 00000002>      <1>       .blk_num_low2 : resw  1
   313 0000000C <res 00000002>      <1>       .blk_num_high1: resw  1
   314 0000000E <res 00000002>      <1>       .blk_num_high2: resw  1
   315                              <1>       .end_of_struc
   316                              <1> endstruc
   317                              <1> 
   318                              <1> ; structure for calling int 13h ext get drive parameters functions (0x48)
   319                              <1> struc struc_extparam
   320 00000000 <res 00000002>      <1>       .pack_size         : resw  1
   321 00000002 <res 00000002>      <1>       .flags             : resw  1
   322 00000004 <res 00000004>      <1>       .cylinders         : resd  1
   323 00000008 <res 00000004>      <1>       .heads             : resd  1      ; <= 255
   324 0000000C <res 00000004>      <1>       .sectors           : resd  1      ; <= 63
   325 00000010 <res 00000008>      <1>       .total_sectors     : resd  2
   326 00000018 <res 00000002>      <1>       .bytes_per_sect    : resw  1
   327 0000001A <res 00000004>      <1>       .dpte_addr         : resd  1      ; device parameter table extension
   328 0000001E <res 00000002>      <1>       .dpi_key           : resw  1      ; 0xBEDD - Key, indicates presence
   329                              <1>                                         ; of Device Path Information
   330 00000020 <res 00000001>      <1>       .dpi_length        : resb  1      ; Length of Device Path Information 
   331                              <1>                                         ; including the key. = 36
   332 00000021 <res 00000001>      <1>       .reserved1         : resb  1
   333 00000022 <res 00000002>      <1>       .reserved2         : resw  1
   334 00000024 <res 00000004>      <1>       .host_bus_type     : resb  4      ; Host bus type, 4 bytes
   335                              <1>                                         ; PCI    PCI Local Bus
   336                              <1>                                         ; ISA    Legacy 16 bit fixed bus
   337 00000028 <res 00000008>      <1>       .interface_type    : resb  8      ; Interface type, 8 bytes
   338                              <1>                                         ; ATA   ATA/ATAPI-4 compliant device using ATA commands
   339                              <1>                                         ; ATAPI ATA/ATAPI-4 compliant device using ATAPI commands
   340                              <1>                                         ; SCSI  SCSI compliant device
   341                              <1>                                         ; USB   USB Mass Storage compliant device
   342                              <1>                                         ; 1394  1394 Mass Storage device
   343                              <1>                                         ; FIBRE Fibre Channel
   344 00000030 <res 00000008>      <1>       .interface_path    : resq  1
   345 00000038 <res 00000008>      <1>       .device_path       : resq  1
   346 00000040 <res 00000001>      <1>       .reserved3         : resb  1
   347 00000041 <res 00000001>      <1>       .checksum          : resb  1
   348                              <1>       .end_of_struc
   349                              <1> endstruc
   350                              <1> 
   351                              <1> ; Device parameter table extension
   352                              <1> %define SIZE_OF_DPTE struc_dpte.end_of_struc
   353                              <1> struc struc_dpte
   354 00000000 <res 00000002>      <1> 	.base_io	: resw 1
   355 00000002 <res 00000002>      <1> 	.ctrl_io	: resw 1
   356 00000004 <res 00000001>      <1> 	.flags		: resb 1
   357 00000005 <res 00000001>      <1> 	.vender_spec	: resb 1
   358 00000006 <res 00000001>      <1> 	.irq		: resb 1
   359 00000007 <res 00000001>      <1> 	.blk_count	: resb 1
   360 00000008 <res 00000001>      <1> 	.dma		: resb 1
   361 00000009 <res 00000001>      <1> 	.pio		: resb 1
   362 0000000A <res 00000002>      <1> 	.bios_spec	: resw 1
   363 0000000C <res 00000002>      <1> 	.reserved	: resw 1
   364 0000000E <res 00000001>      <1> 	.revision	: resb 1
   365 0000000F <res 00000001>      <1> 	.checksum	: resb 1
   366                              <1> 	.end_of_struc
   367                              <1> endstruc
   368                              <1> 
   369                              <1> ;Return cdrom boot catalog command packet
   370                              <1> %define SIZE_OF_CDBC_CMD struc_cdbc_cmd.end_of_struc
   371                              <1> struc struc_cdbc_cmd
   372 00000000 <res 00000001>      <1> 	.pack_size	: resb 1
   373 00000001 <res 00000001>      <1> 	.sector_count	: resb 1
   374 00000002 <res 00000002>      <1> 	.buf_addr_off	: resw 1
   375 00000004 <res 00000002>      <1> 	.buf_addr_seg	: resw 1
   376 00000006 <res 00000002>      <1> 	.begnning_sect	: resw 1
   377                              <1> 	.end_of_struc
   378                              <1> endstruc
   379                              <1> 
   380                              <1> ;CD Emulation Specification Packet
   381                              <1> %define SIZE_OF_CDEMU_SPEC struc_cdemu_spec.end_of_struc
   382                              <1> struc struc_cdemu_spec
   383 00000000 <res 00000001>      <1> 	.pack_size	: resb 1
   384 00000001 <res 00000001>      <1> 	.media_type	: resb 1
   385 00000002 <res 00000001>      <1> 	.emu_drvid	: resb 1
   386 00000003 <res 00000001>      <1> 	.controller_id	: resb 1
   387 00000004 <res 00000004>      <1> 	.image_lba	: resd 1
   388 00000008 <res 00000002>      <1> 	.device_spec	: resw 1
   389 0000000A <res 00000002>      <1> 	.user_bufseg	: resw 1
   390 0000000C <res 00000002>      <1> 	.load_seg	: resw 1
   391 0000000E <res 00000002>      <1> 	.sect_count	: resw 1
   392 00000010 <res 00000001>      <1> 	.cylinders	: resb 1
   393 00000011 <res 00000001>      <1> 	.sectors	: resb 1
   394 00000012 <res 00000001>      <1> 	.heads		: resb 1
   395                              <1> 	.end_of_struc
   396                              <1> endstruc
   397                              <1> 
   398                              <1> 
   399                              <1> ;Structure of boot catalog entry
   400                              <1> %define SIZE_OF_BOOT_CATALOG struc_boot_catalog.end_of_struc
   401                              <1> struc struc_boot_catalog
   402 00000000 <res 00000001>      <1> 	.indicator	: resb 1
   403 00000001 <res 00000001>      <1> 	.media_type	: resb 1
   404 00000002 <res 00000002>      <1> 	.load_seg	: resw 1
   405 00000004 <res 00000001>      <1> 	.sys_type	: resb 1
   406 00000005 <res 00000001>      <1> 	.reserved	: resb 1
   407 00000006 <res 00000002>      <1> 	.sect_count	: resw 1
   408 00000008 <res 00000004>      <1> 	.load_rba	: resd 1
   409 0000000C <res 00000014>      <1> 	.reserved1	: resb 20
   410                              <1> 	.end_of_struc
   411                              <1> endstruc
   412                              <1> 
   413                              <1> 
   414                              <1> ; structure for record drive informations
   415                              <1> struc struc_driveinfo
   416 00000000 <res 00000001>      <1>       .id                : resb  1
   417 00000001 <res 00000001>      <1>       .flags             : resb  1
   418 00000002 <res 00000002>      <1>       .cylinders         : resw  1
   419 00000004 <res 00000002>      <1>       .heads             : resw  1
   420 00000006 <res 00000002>      <1>       .sectors           : resw  1
   421 00000008 <res 00000002>      <1>       .sector_size       : resw  1
   422                              <1>       .end_of_struc
   423                              <1> endstruc
   424                              <1> 
   425                              <1> 
   426                              <1> 
   427                              <1> %define SIZE_OF_DRIVEINFO (struc_driveinfo.end_of_struc)
   428                              <1> %define SIZE_OF_EXTPARAM (struc_extparam.end_of_struc)
   429                              <1> %define SIZE_OF_INT13EXT (struc_int13ext.end_of_struc)
   430                              <1> 
   431                                  %include "knl.h"
   432                              <1> ; knl.h
   433                              <1> ;
   434                              <1> ; header file for knl.asm
   435                              <1> ;
   436                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   437                              <1> ;
   438                              <1> 
   439                              <1> %define MAX_NAME_LENGTH   15
   440                              <1> %define MAX_KEYSTROKES    13
   441                              <1> 
   442                              <1> %define FAT16_DRVID_OFF   0x24               ; drive id offset in fat16
   443                              <1> %define FAT16_HIDSEC_OFF  0x1C               ; hidden sector offset in fat16
   444                              <1> %define FAT16_EXTBRID_OFF 0x26               ; EXBRID offset in fat16
   445                              <1> 
   446                              <1> %define FAT32_DRVID_OFF   0x40
   447                              <1> %define FAT32_HIDSEC_OFF  0x1C
   448                              <1> %define FAT32_EXTBRID_OFF 0x42
   449                              <1> 
   450                              <1> %define EXTBRID           0x29               ; ext boot record id for fat
   451                              <1> 
   452                              <1> %define INFOFLAG_SCHEDULED  0x8000       ; 1000,0000,0000,0000B
   453                              <1> %define INFOFLAG_HAVEKEYS   0x4000       ; 0100,0000,0000,0000B
   454                              <1> %define INFOFLAG_SWAPDRVID  0x2000       ; 0010,0000,0000,0000B
   455                              <1> %define INFOFLAG_AUTOACTIVE 0x1000       ; 0001,0000,0000,0000B
   456                              <1> %define INFOFLAG_ACTIVE     0x0800       ; 0000,1000,0000,0000B
   457                              <1> %define INFOFLAG_AUTOHIDE   0x0400       ; 0000,0100,0000,0000B
   458                              <1> %define INFOFLAG_HIDDEN     0x0200       ; 0000,0010,0000,0000B
   459                              <1> %define INFOFLAG_LOGICAL    0x0100       ; 0000,0001,0000,0000B
   460                              <1> 
   461                              <1> %define INFOFLAG_ISDRIVER   0x0080       ; 0000,0000,1000,0000B
   462                              <1> %define INFOFLAG_ISSPECIAL  0X0008       ; 0000,0000,0000,1000B
   463                              <1> 
   464                              <1> %define SPREC_BOOTPREV      0
   465                              <1> %define SPREC_QUIT          1
   466                              <1> %define SPREC_POWEROFF      2
   467                              <1> %define SPREC_RESTART       3
   468                              <1> 
   469                              <1> %define NUM_OF_SPREC        4
   470                              <1> 
   471                              <1> %define NUM_OF_INFOFLAGS    9
   472                              <1> 
   473                              <1> ; structure for boot record, including removable drives and partitions
   474                              <1> struc struc_bootrecord
   475 00000000 <res 00000002>      <1>       .flags           : resw 1  ; type flags of this record, see INFOFLAG_x
   476 00000002 <res 00000001>      <1>       .drive_id        : resb 1  ; drive id = 0 to 255
   477                              <1>                                  ; partition id used in linux,
   478 00000003 <res 00000001>      <1>       .part_id         : resb 1  ; 1-4 for primary partitions,
   479                              <1>                                  ; > 5 for logical partitions,
   480                              <1>                                  ; 0 for driver or special bootrecord.
   481 00000004 <res 00000001>      <1>       .type            : resb 1  ; partition type, = 0 : not a partition
   482 00000005 <res 00000001>      <1>       .reserved        : resb 1  ;
   483 00000006 <res 00000004>      <1>       .father_abs_addr : resd 1  ; father's LBA address
   484 0000000A <res 00000004>      <1>       .abs_addr        : resd 1  ; partition's abs LBA address
   485 0000000E <res 00000004>      <1>       .password        : resd 1  ; password of this record
   486 00000012 <res 00000004>      <1>       .schedule_time   : resd 1  ; schedule time
   487 00000016 <res 00000010>      <1>       .name            : resb 16 ; name of this record, zero ending.
   488 00000026 <res 0000001A>      <1>       .keystrokes      : resw 13 ; keystrokes to be preloaded.
   489                              <1>       .end_of_struc
   490                              <1> endstruc
   491                              <1> 
   492                              <1> ; structure for partition record
   493                              <1> struc struc_partition
   494 00000000 <res 00000001>      <1>       .state           : resb 1  ; = 0 : inactive; = drive id : active
   495 00000001 <res 00000001>      <1>       .start_head      : resb 1  ; start chs address of the partition
   496 00000002 <res 00000002>      <1>       .start_cs        : resw 1  ;
   497 00000004 <res 00000001>      <1>       .type            : resb 1  ; equal to the same item in struc_bootrecord
   498 00000005 <res 00000001>      <1>       .end_head        : resb 1  ; end chs address of the partition
   499 00000006 <res 00000002>      <1>       .end_cs          : resw 1  ;
   500 00000008 <res 00000004>      <1>       .relative_addr   : resd 1  ; the relative address of this partition
   501 0000000C <res 00000004>      <1>       .sectors         : resd 1  ; the number of sectors of the partition
   502                              <1>       .end_of_struc
   503                              <1> endstruc
   504                              <1> 
   505                              <1> %define SIZE_OF_BOOTRECORD (struc_bootrecord.end_of_struc)
   506                              <1> %define SIZE_OF_PARTITION  (struc_partition.end_of_struc)
   507                              <1> 
   508                                  %include "sbm.h"
   509                              <1> ; sbm.h
   510                              <1> ;
   511                              <1> ; header file for main.asm and loader.asm
   512                              <1> ;
   513                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   514                              <1> ;
   515                              <1> 
   516                              <1> %define MAX_SBM_SIZE    30000              ; the max size of Smart Boot Manager
   517                              <1> 
   518                              <1> %define MAX_RECORD_NUM      32
   519                              <1> %define MAX_FLOPPY_NUM      2
   520                              <1> %define MAX_PASSWORD_LENGTH 16
   521                              <1> 
   522                              <1> %define PART_OFF        0x0600             ; partition table offset
   523                              <1>                                            ; Smart Boot Manager kernel startup
   524                              <1> %define SBM_SAVE_NBLKS  5
   525                              <1> 
   526                              <1> %ifndef STRUC_SBMK_HEADER
   527                              <1> %define STRUC_SBMK_HEADER
   528                              <1> 
   529                              <1> 
   530                              <1> struc struc_block_map
   531 00000000 <res 00000001>      <1>       .n_sects         resb 1
   532 00000001 <res 00000004>      <1>       .lba_addr        resd 1
   533                              <1>       .end_of_struc
   534                              <1> endstruc
   535                              <1> 
   536                              <1> %define SIZE_OF_STRUC_BLOCK_MAP struc_block_map.end_of_struc
   537                              <1> 
   538                              <1> 
   539                              <1> %endif
   540                              <1> 
   541                                  %include "main.h"
   542                              <1> ; main.h
   543                              <1> ;
   544                              <1> ; header file for main.asm main-cmds.asm main-utils.asm
   545                              <1> ;
   546                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   547                              <1> ;
   548                              <1> 
   549                              <1> ; some flags
   550                              <1> 
   551                              <1> %define KNLFLAG_FIRSTSCAN   0x01
   552                              <1> %define KNLFLAG_SECURITY    0x02
   553                              <1> %define KNLFLAG_NOINT13EXT  0x04
   554                              <1> %define KNLFLAG_NOCDROM     0x08
   555                              <1> 
   556                              <1> %define KNLFLAG_REMLAST     0x10
   557                              <1> %define KNLFLAG_ONLYPARTS   0X20
   558                              <1> %define KNLFLAG_COMPRESSED  0x80
   559                              <1> 
   560                              <1> %define BMSTYLE_FULL        0
   561                              <1> %define BMSTYLE_NOFLAGS     1
   562                              <1> %define BMSTYLE_NONUMBER    2
   563                              <1> %define BMSTYLE_NOTYPE      3
   564                              <1> 
   565                                  %include "evtcode.h"
   566                              <1> ;
   567                              <1> ; evtcode.h
   568                              <1> ;
   569                              <1> ; definiation of event codes
   570                              <1> ;
   571                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   572                              <1> ;
   573                              <1> 
   574                              <1> %define kbEsc                0x011B
   575                              <1> %define kbAltEsc             0x0100
   576                              <1> 
   577                              <1> %define kbF1                 0x3B00
   578                              <1> %define kbAltF1              0x6800
   579                              <1> %define kbCtrlF1             0x5E00
   580                              <1> %define kbShiftF1            0x5400
   581                              <1> 
   582                              <1> %define kbF2                 0x3C00
   583                              <1> %define kbAltF2              0x6900
   584                              <1> %define kbCtrlF2             0x5F00
   585                              <1> %define kbShiftF2            0x5500
   586                              <1> 
   587                              <1> %define kbF3                 0x3D00
   588                              <1> %define kbAltF3              0x6A00
   589                              <1> %define kbCtrlF3             0x6000
   590                              <1> %define kbShiftF3            0x5600
   591                              <1> 
   592                              <1> %define kbF4                 0x3E00
   593                              <1> %define kbAltF4              0x6B00
   594                              <1> %define kbCtrlF4             0x6100
   595                              <1> %define kbShiftF4            0x5700
   596                              <1> 
   597                              <1> %define kbF5                 0x3F00
   598                              <1> %define kbAltF5              0x6C00
   599                              <1> %define kbCtrlF5             0x6200
   600                              <1> %define kbShiftF5            0x5800
   601                              <1> 
   602                              <1> %define kbF6                 0x4000
   603                              <1> %define kbAltF6              0x6D00
   604                              <1> %define kbCtrlF6             0x6300
   605                              <1> %define kbShiftF6            0x5900
   606                              <1> 
   607                              <1> %define kbF7                 0x4100
   608                              <1> %define kbAltF7              0x6E00
   609                              <1> %define kbCtrlF7             0x6400
   610                              <1> %define kbShiftF7            0x5A00
   611                              <1> 
   612                              <1> %define kbF8                 0x4200
   613                              <1> %define kbAltF8              0x6F00
   614                              <1> %define kbCtrlF8             0x6500
   615                              <1> %define kbShiftF8            0x5B00
   616                              <1> 
   617                              <1> %define kbF9                 0x4300
   618                              <1> %define kbAltF9              0x7000
   619                              <1> %define kbCtrlF9             0x6600
   620                              <1> %define kbShiftF9            0x5C00
   621                              <1> 
   622                              <1> %define kbF10                0x4400
   623                              <1> %define kbAltF10             0x7100
   624                              <1> %define kbCtrlF10            0x6700
   625                              <1> %define kbShiftF10           0x5D00
   626                              <1> 
   627                              <1> %define kbF11                0x8500
   628                              <1> %define kbAltF11             0x8B00
   629                              <1> %define kbCtrlF11            0x8900
   630                              <1> %define kbShiftF11           0x8700
   631                              <1> 
   632                              <1> %define kbF12                0x8600
   633                              <1> %define kbAltF12             0x8C00
   634                              <1> %define kbCtrlF12            0x8A00
   635                              <1> %define kbShiftF12           0x8800
   636                              <1> 
   637                              <1> %define kbTab                0x0F09
   638                              <1> %define kbAltTab             0xA500
   639                              <1> %define kbCtrlTab            0x9400
   640                              <1> %define kbShiftTab           0x0F00
   641                              <1> 
   642                              <1> %define kbBack               0x0E08
   643                              <1> %define kbAltBack            0x0E00
   644                              <1> %define kbCtrlBack           0x0E7F
   645                              <1> 
   646                              <1> %define kbEnter              0x1C0D
   647                              <1> %define kbAltEnter           0x1C00
   648                              <1> %define kbCtrlEnter          0x1C0A
   649                              <1> %define kbEnhEnter           0xE00D
   650                              <1> %define kbEnhAltEnter        0xA600
   651                              <1> %define kbEnhCtrlEnter       0xE00A
   652                              <1> 
   653                              <1> %define kbSpace              0x3920
   654                              <1> 
   655                              <1> %define kbIns                0x5200
   656                              <1> %define kbEnhIns             0x52E0
   657                              <1> %define kbCtrlIns            0x9200
   658                              <1> %define kbEnhCtrlIns         0x92E0
   659                              <1> %define kbEnhAltIns          0xA200
   660                              <1> 
   661                              <1> %define kbHome               0x4700
   662                              <1> %define kbEnhHome            0x47E0
   663                              <1> %define kbCtrlHome           0x7700
   664                              <1> %define kbEnhCtrlHome        0x77E0
   665                              <1> %define kbEnhAltHome         0x9700
   666                              <1> 
   667                              <1> %define kbPgUp               0x4900
   668                              <1> %define kbEnhPgUp            0x49E0
   669                              <1> %define kbCtrlPgUp           0x8400
   670                              <1> %define kbEnhCtrlPgUp        0x84E0
   671                              <1> %define kbEnhAltPgUp         0x9900
   672                              <1> 
   673                              <1> %define kbEnd                0x4F00
   674                              <1> %define kbEnhEnd             0x4FE0
   675                              <1> %define kbCtrlEnd            0x7500
   676                              <1> %define kbEnhCtrlEnd         0x75E0
   677                              <1> %define kbEnhAltEnd          0x9F00
   678                              <1> 
   679                              <1> %define kbDel                0x5300
   680                              <1> %define kbEnhDel             0x53E0
   681                              <1> %define kbCtrlDel            0x9300
   682                              <1> %define kbEnhCtrlDel         0x93E0
   683                              <1> %define kbEnhAltDel          0xA300
   684                              <1> 
   685                              <1> %define kbPgDn               0x5100
   686                              <1> %define kbEnhPgDn            0x51E0
   687                              <1> %define kbCtrlPgDn           0x7600
   688                              <1> %define kbEnhCtrlPgDn        0x76E0
   689                              <1> %define kbEnhAltPgDn         0xA100
   690                              <1> 
   691                              <1> %define kbUp                 0x4800
   692                              <1> %define kbCtrlUp             0x8D00
   693                              <1> %define kbEnhUp              0x48E0
   694                              <1> %define kbEnhAltUp           0x9800
   695                              <1> %define kbEnhCtrlUp          0x8DE0
   696                              <1> 
   697                              <1> %define kbDown               0x5000
   698                              <1> %define kbCtrlDown           0x9100
   699                              <1> %define kbEnhDown            0x50E0
   700                              <1> %define kbEnhAltDown         0xA000
   701                              <1> %define kbEnhCtrlDown        0x91E0
   702                              <1> 
   703                              <1> %define kbLeft               0x4b00
   704                              <1> %define kbCtrlLeft           0x7300
   705                              <1> %define kbEnhLeft            0x4BE0
   706                              <1> %define kbEnhAltLeft         0x9B00
   707                              <1> %define kbEnhCtrlLeft        0x73E0
   708                              <1> 
   709                              <1> %define kbRight              0x4d00
   710                              <1> %define kbCtrlRight          0x7400
   711                              <1> %define kbEnhRight           0x4DE0
   712                              <1> %define kbEnhAltRight        0x9D00
   713                              <1> %define kbEnhCtrlRight       0x74E0
   714                              <1> 
   715                              <1> %define kbGraySlash          0xE02F
   716                              <1> %define kbGrayStar           0x372A
   717                              <1> %define kbGrayMinus          0x4A2D
   718                              <1> %define kbGrayPlus           0x4E2B
   719                              <1> 
   720                              <1> %define kbCtrlQ              0x1011
   721                              <1> %define kbCtrlW              0x1117
   722                              <1> %define kbCtrlE              0x1205
   723                              <1> %define kbCtrlR              0x1312
   724                              <1> %define kbCtrlT              0x1414
   725                              <1> %define kbCtrlY              0x1519
   726                              <1> %define kbCtrlU              0x1615
   727                              <1> %define kbCtrlI              0x1709
   728                              <1> %define kbCtrlO              0x180F
   729                              <1> %define kbCtrlP              0x1910
   730                              <1> %define kbCtrlA              0x1E01
   731                              <1> %define kbCtrlS              0x1f13
   732                              <1> %define kbCtrlD              0x2004
   733                              <1> %define kbCtrlF              0x2106
   734                              <1> %define kbCtrlG              0x2207
   735                              <1> %define kbCtrlH              0x2308
   736                              <1> %define kbCtrlJ              0x240A
   737                              <1> %define kbCtrlK              0x250b
   738                              <1> %define kbCtrlL              0x260C
   739                              <1> %define kbCtrlZ              0x2C1A
   740                              <1> %define kbCtrlX              0x2D18
   741                              <1> %define kbCtrlC              0x2E03
   742                              <1> %define kbCtrlV              0x2F16
   743                              <1> %define kbCtrlB              0x3002
   744                              <1> %define kbCtrlN              0x310E
   745                              <1> %define kbCtrlM              0x320D
   746                              <1> 
   747                              <1> %define kbLowerY             0x1579
   748                              <1> %define kbUpperY             0x1559
   749                              <1> 
   750                              <1> %define kbSlash              0x352F
   751                              <1> %define kbQuestion           0x353F
   752                              <1> 
   753                              <1> %define kbAltS               0x1F00
   754                              <1> %define kbAltR               0x1300
   755                              <1> 
   756                              <1> %define kbOne                0x0231
   757                              <1> 
   758                              <1> %define kbRightShiftMask     0x01
   759                              <1> %define kbLeftShiftMask      0x02
   760                              <1> %define kbShiftMask          0x03
   761                              <1> %define kbCtrlMask           0x04
   762                              <1> %define kbAltMask            0x08
   763                              <1> %define kbScrollMask         0x10
   764                              <1> %define kbNumLockMask        0x20
   765                              <1> %define kbCapsLockMask       0x40
   766                              <1> %define kbInsertMask         0x80
   767                              <1> 
   768                              <1> %define kbStateKeysMask   (kbScrollMask | kbNumLockMask | kbCapsLockMask | kbInsertMask)
   769                              <1> 
   770                              <1> %define EVTCODE_COMMAND		0xF0
   771                              <1> %define EVTCODE_KEYPRESS        0x01
   772                              <1> %define EVTCODE_KEYRELEASE      0x02
   773                              <1> %define EVTCODE_BROADCAST	0x04
   774                              <1> 
   775                              <1> ; Broadcast events
   776                              <1> %define EVENT_REDRAW_ROOT  ((EVTCODE_COMMAND | EVTCODE_BROADCAST) << 8 | 0x0001)
   777                              <1> %define EVENT_BOOT_DEFAULT ((EVTCODE_COMMAND | EVTCODE_BROADCAST) << 8 | 0x0002)
   778                              <1> 
   779                              <1> ; Normal events
   780                              <1> %define EVENT_TOGGLE_MENU  ((EVTCODE_COMMAND ) << 8 | 0x0001)
   781                              <1> 
   782                              <1> ; Key press event
   783                              <1> %define EVENT_RIGHTSHIFT_PRESS    ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbRightShiftMask)
   784                              <1> %define EVENT_LEFTSHIFT_PRESS     ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbLeftShiftMask)
   785                              <1> %define EVENT_SHIFT_PRESS         ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbShiftMask)
   786                              <1> %define EVENT_CTRL_PRESS          ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbCtrlMask)
   787                              <1> %define EVENT_ALT_PRESS           ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbAltMask)
   788                              <1> %define EVENT_SCROLL_ON           ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbScrollMask)
   789                              <1> %define EVENT_NUMLOCK_ON          ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbNumLockMask)
   790                              <1> %define EVENT_CAPSLOCK_ON         ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbCapsLockMask)
   791                              <1> %define EVENT_INSERT_ON           ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbInsertMask)
   792                              <1> 
   793                              <1> %define EVENT_RIGHTSHIFT_RELEASE  ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbRightShiftMask)
   794                              <1> %define EVENT_LEFTSHIFT_RELEASE   ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbLeftShiftMask)
   795                              <1> %define EVENT_SHIFT_RELEASE       ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbShiftMask)
   796                              <1> %define EVENT_CTRL_RELEASE        ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbCtrlMask)
   797                              <1> %define EVENT_ALT_RELEASE         ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbAltMask)
   798                              <1> %define EVENT_SCROLL_OFF          ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbScrollMask)
   799                              <1> %define EVENT_NUMLOCK_OFF         ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbNumLockMask)
   800                              <1> %define EVENT_CAPSLOCK_OFF        ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbCapsLockMask)
   801                              <1> %define EVENT_INSERT_OFF          ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbInsertMask)
   802                              <1> 
   803                              <1> 
   804                                  
   805                                  %define GOOD_RECORD_NUMBER    (main_windows_data.boot_menu + struc_menu_box.items_num)
   806                                  %define FOCUS_RECORD          (main_windows_data.boot_menu + struc_menu_box.focus_item)
   807                                  %define FIRST_VISIBLE_RECORD  (main_windows_data.boot_menu + struc_menu_box.first_visible_item)
   808                                  %define BOOT_MENU_AREA_HEIGHT (main_windows_data.boot_menu + struc_menu_box.menu_area_size + 1) 
   809                                  
   810                                  ; some data definitions
   811                                  
   812                                  %define disk_address_packet     7E00h
   813                                    %define dap                   disk_address_packet
   814                                  
   815                                    %define dap_Size      dap+00h
   816                                    %define dap_Reserved  dap+01h
   817                                    %define dap_Count     dap+02h
   818                                    %define dap_Buffer    dap+04h				; Segment:Offset value
   819                                    %define dap_LBA_low   dap+08h
   820                                    %define dap_LBA_high  dap+0Ch
   821                                  
   822                                  %define Boot_stuff              7E10h
   823                                    %define Boot_Drive            Boot_stuff+0
   824                                    %define Boot_Drive_Sector     Boot_stuff+4		; ToasterOS Standalone only
   825                                    %define Boot_Drive_Type       Boot_stuff+8		; ToasterOS Standalone only
   826                                    %define Boot_Drive_Buffer     Boot_stuff+12		; ToasterOS Standalone only
   827                                    %define Boot_File_Handle      Boot_stuff+51		; ToasterOS Standalone only
   828                                    %define Temp_RM               Boot_stuff+69		; ToasterOS Standalone Bootloader only
   829                                    %define Boot_Drive_Pointer    Boot_stuff+73		; ToasterOS Standalone only
   830                                    %define Debug_RM              Boot_stuff+77		; triple-byte
   831                                    %define Boot_Last_Boot_drive  Boot_stuff+78
   832                                  
   833                                  
   834                                  %ifdef EMULATE_PROG
   835                                  	org 0x100
   836                                  %else
   837                                  	org 0
   838                                  %endif
   839                                  
   840                                  	section .text
   841                                  
   842                                  
   843                                  %ifndef EMULATE_PROG
   844                                  
   845                                    ; include the load code for the low level Master Boot Record
   846                                    %include  'Bootloader.asm'
   847                              <1> ; ******************************************************
   848                              <1> 
   849                              <1> ;	Name: Bootloader
   850                              <1> ;	Autor: Peter Kleissner
   851                              <1> ;	Version: 1.02
   852                              <1> ;	Date: Wednesday, 12th April 2006
   853                              <1> ;	last Update: Monday, 17th April 2006
   854                              <1> 
   855                              <1> ;	For: ToasterOS BMS
   856                              <1> ;	         |
   857                              <1> ;                l-- MBR Version
   858                              <1> ;                l----- Standalone
   859                              <1> ;	            |         |
   860                              <1> ;                   |         l--- FAT16
   861                              <1> ;                   |         l--- FAT32
   862                              <1> ;                   l
   863                              <1> ;                   l-- ISO Version
   864                              <1> 
   865                              <1> ; ******************************************************
   866                              <1> 
   867                              <1> [bits 16]					; create a 16 Bit Code
   868                              <1> CPU 386						; Assemble instructions up to the 386 instruction set
   869                              <1> 
   870                              <1> 
   871                              <1> 
   872                              <1> ; disable Interrupts & clear the direction flag
   873 00000000 FA                  <1> cli
   874 00000001 FC                  <1> cld
   875                              <1> 
   876                              <1> 
   877                              <1> ; set the Stack to 0000h:Stack_Pointer
   878 00000002 6631DB              <1> xor ebx,ebx
   879 00000005 8ED3                <1> mov ss,bx
   880 00000007 BC007C              <1> mov sp,7C00h
   881                              <1> 
   882                              <1> ; set the Data Segments to 0000h (0000h:7C000h operating address)
   883 0000000A 31C0                <1> xor ax,ax
   884 0000000C 8ED8                <1> mov ds,ax
   885 0000000E 8EC0                <1> mov es,ax
   886 00000010 8EE0                <1> mov fs,ax
   887 00000012 8EE8                <1> mov gs,ax
   888                              <1> 
   889                              <1> 
   890                              <1> 
   891                              <1> ;(Table 00653)
   892                              <1> ;Values Bootstrap loader is called with (IBM BIOS):
   893                              <1> ;	CS:IP = 0000h:7C00h
   894                              <1> ;	DH = access
   895                              <1> ;	    bits 7-6,4-0: don't care
   896                              <1> ;	    bit 5: =0 device supported by INT 13
   897                              <1> ;	DL = boot drive
   898                              <1> ;	    00h first floppy
   899                              <1> ;	    80h first hard disk
   900                              <1> 
   901                              <1> 
   902                              <1> ; check if the drive is a floppy (since ToasterOS Server Business Edition pre deactivated)
   903 00000014 F6C280              <1> test dl,80h
   904 00000017 7446                <1> jz Drive_Error
   905                              <1> 
   906                              <1> ; check if the drive is not supported by Interrupt 13h
   907                              <1> ;test dh,00100000b
   908                              <1> ;jnz Drive_Error
   909                              <1> 
   910                              <1> ; store the boot drive
   911 00000019 668916107E          <1> mov [Boot_Drive],edx
   912                              <1> 
   913                              <1> 
   914                              <1> 
   915                              <1> 
   916                              <1> ; load the default for the disk address packet
   917 0000001E C606007E10          <1> mov [dap_Size],byte 10h
   918 00000023 881E017E            <1> mov [dap_Reserved],bl
   919                              <1> 
   920                              <1> ; [ds:si] = disk address packet
   921 00000027 BE007E              <1> mov si,disk_address_packet
   922                              <1> 
   923                              <1> 
   924                              <1> 
   925                              <1> ; load the whole Master Boot Record into memory
   926 0000002A C706027E3F00        <1> mov [dap_Count],word 63
   927 00000030 66891E147E          <1> mov [Boot_Drive_Sector],ebx
   928 00000035 66891E087E          <1> mov [dap_LBA_low],ebx
   929 0000003A 66891E0C7E          <1> mov [dap_LBA_high],ebx
   930 0000003F 66C706047E00800000  <1> mov [dap_Buffer],dword 00008000h
   931                              <1> 
   932                              <1> ; interrupt 13h, function 42h: Extended Read
   933 00000048 B442                <1> mov ah,42h
   934 0000004A CD13                <1> int 13h
   935                              <1> 
   936 0000004C 7216                <1> jc Read_Error
   937                              <1> 
   938                              <1> 
   939                              <1> 
   940                              <1> ; set the Data Segments to 8000h (0800h:0000h operating address)
   941 0000004E B80008              <1> mov ax,0800h
   942 00000051 8ED8                <1> mov ds,ax
   943 00000053 8EC0                <1> mov es,ax
   944                              <1> 
   945                              <1> 
   946                              <1> 
   947                              <1> ; jump to the Smart Boot Manager Kernel
   948 00000055 EA[2F0A]0008        <1> jmp 0800h:Smart_Boot_Manager_Kernel
   949                              <1> 
   950                              <1> 
   951                              <1> 
   952                              <1> 
   953                              <1> 
   954                              <1> 
   955                              <1> Boot_Error:
   956                              <1> 
   957                              <1> ; if boot partition isn't found
   958                              <1> 
   959 0000005A BE[9E00]            <1> mov si,MSG_Boot_Error
   960 0000005D EB08                <1> jmp Public_Error
   961                              <1> 
   962                              <1> 
   963                              <1> 
   964                              <1> Drive_Error:
   965                              <1> 
   966                              <1> ; if boot drive is a floppy
   967                              <1> 
   968 0000005F BE[8900]            <1> mov si,MSG_Drive_Error
   969 00000062 EB03                <1> jmp Public_Error
   970                              <1> 
   971                              <1> 
   972                              <1> 
   973                              <1> Read_Error:
   974                              <1> 
   975                              <1> ; if there was an read error
   976                              <1> 
   977 00000064 BE[AB00]            <1> mov si,MSG_Read_Error
   978                              <1> ;jmp Public_Error
   979                              <1> 
   980                              <1> 
   981                              <1> 
   982                              <1> 
   983                              <1> ; the public error handler (esi = specific text)
   984                              <1> Public_Error:
   985 00000067 E80F00              <1> call Print_Text
   986                              <1> 
   987 0000006A BE[B800]            <1> mov si,MSG_Reboot
   988 0000006D E80900              <1> call Print_Text
   989                              <1> 
   990                              <1> ; reboot after a key press
   991 00000070 30E4                <1> xor ah,ah					; Function 00h: Get Keystroke
   992 00000072 CD16                <1> int 16h
   993                              <1> 
   994                              <1> ; this code jumps to the BIOS reboot
   995 00000074 EA                  <1> db 0EAh
   996 00000075 0000                <1> dw 0000h
   997 00000077 FFFF                <1> dw 0FFFFh
   998                              <1> 
   999                              <1> 
  1000                              <1> 
  1001                              <1> 
  1002                              <1> ; a function to write a text onto the screen (si = text)
  1003                              <1> Print_Text:
  1004                              <1> 
  1005                              <1> ;mov ax,cs
  1006                              <1> ;mov ds,ax					; ds = cs
  1007                              <1> 
  1008 00000079 BB0700              <1> mov bx,0007h					; Page Number = 0, Attribute = 07h
  1009 0000007C B40E                <1> mov ah,0Eh					; function 0Eh: Teletype Output
  1010                              <1> 
  1011 0000007E 2EAC                <1> cs lodsb					; load the first character
  1012                              <1> 
  1013                              <1> Next_Char:
  1014 00000080 CD10                <1> int 10h
  1015 00000082 2EAC                <1> cs lodsb					; al = next character
  1016 00000084 08C0                <1> or al,al					; last letter?
  1017 00000086 75F8                <1> jnz Next_Char					; if not print next letter
  1018                              <1> 
  1019 00000088 C3                  <1> ret
  1020                              <1> 
  1021                              <1> 
  1022                              <1> 
  1023                              <1> 
  1024                              <1> ; Error Messages
  1025 00000089 0A0D496E76616C6964- <1> MSG_Drive_Error		db	10, 13, "Invalid Boot-Drive", 0
  1026 00000092 20426F6F742D447269- <1>
  1027 0000009B 766500              <1>
  1028 0000009E 0A0D426F6F74204572- <1> MSG_Boot_Error		db	10, 13, "Boot Error", 0
  1029 000000A7 726F7200            <1>
  1030 000000AB 0A0D52656164204572- <1> MSG_Read_Error		db	10, 13, "Read Error", 0
  1031 000000B4 726F7200            <1>
  1032 000000B8 0A0D50726573732061- <1> MSG_Reboot		db	10, 13, "Press a key to restart", 0
  1033 000000C1 206B657920746F2072- <1>
  1034 000000CA 65737461727400      <1>
  1035                              <1> 
  1036 000000D1 51444F53            <1> Boot_Checksum	dd	"QDOS"
  1037                              <1> 
  1038                              <1> 
  1039                              <1> 
  1040                              <1> 
  1041                              <1> 
  1042                              <1> ; Error routines entry points
  1043                              <1> 
  1044 000000D5 00<rept>            <1> times 1AFh-($-$$) db 0
  1045                              <1> 
  1046 000001AF E9A8FE              <1> jmp Boot_Error
  1047 000001B2 E9AFFE              <1> jmp Read_Error
  1048                              <1> 
  1049                              <1> 
  1050                              <1> 
  1051                              <1> ; language descriptions [unused]
  1052                              <1> 
  1053                              <1> times 1B5h-($-$$) db 0
  1054                              <1> 
  1055 000001B5 00                  <1> Error_Message_1_length	db	0
  1056 000001B6 00                  <1> Error_Message_2_length	db	0
  1057 000001B7 00                  <1> Error_Message_3_length	db	0
  1058                              <1> 
  1059                              <1> 
  1060                              <1> 
  1061                              <1> ; Disk Signature
  1062                              <1> 
  1063                              <1> times 440-($-$$) db 0
  1064                              <1> 
  1065 000001B8 00000000            <1> disk_signature		dd	0
  1066 000001BC 0000                <1> 			dw	0
  1067                              <1> 
  1068                              <1> 
  1069                              <1> 
  1070                              <1> ; Partition Table
  1071                              <1> 
  1072                              <1> times 1BEh-($-$$) db 0
  1073                              <1> 
  1074                              <1> 
  1075                              <1> Partition_1
  1076 000001BE 80                  <1>     Partition_1_bootable	db	80h
  1077 000001BF 000101              <1>     Partition_1_Start_CHS	db	00h, 01h, 01h
  1078 000001C2 04                  <1>     Partition_1_Type		db	04h
  1079 000001C3 FFFEFF              <1>     Partition_1_End_CHS		db	0FFh, 0FEh, 0FFh
  1080 000001C6 3F000000            <1>     Partition_1_Start_LBA	dd	63
  1081 000001CA 814E0000            <1>     Partition_1_Sectors		dd	20160-63
  1082                              <1> Partition_2
  1083 000001CE 00                  <1>     Partition_2_bootable	db	0
  1084 000001CF 000000              <1>     Partition_2_Start_CHS	db	0, 0, 0
  1085 000001D2 07                  <1>     Partition_2_Type		db	7h
  1086 000001D3 000000              <1>     Partition_2_End_CHS		db	0, 0, 0
  1087 000001D6 C04E0000            <1>     Partition_2_Start_LBA	dd	20160
  1088 000001DA 00A00000            <1>     Partition_2_Sectors		dd	40960
  1089                              <1> Partition_3
  1090 000001DE 00                  <1>     Partition_3_bootable	db	0
  1091 000001DF 000000              <1>     Partition_3_Start_CHS	db	0, 0, 0
  1092 000001E2 00                  <1>     Partition_3_Type		db	0
  1093 000001E3 000000              <1>     Partition_3_End_CHS		db	0, 0, 0
  1094 000001E6 00000000            <1>     Partition_3_Start_LBA	dd	0
  1095 000001EA 00000000            <1>     Partition_3_Sectors		dd	0
  1096                              <1> Partition_4
  1097 000001EE 00                  <1>     Partition_4_bootable	db	0
  1098 000001EF 000000              <1>     Partition_4_Start_CHS	db	0, 0, 0
  1099 000001F2 00                  <1>     Partition_4_Type		db	0
  1100 000001F3 000000              <1>     Partition_4_End_CHS		db	0, 0, 0
  1101 000001F6 00000000            <1>     Partition_4_Start_LBA	dd	0
  1102 000001FA 00000000            <1>     Partition_4_Sectors		dd	0
  1103                              <1>     
  1104                              <1> 
  1105                              <1> times 510-($-$$) db 0
  1106                              <1> 
  1107 000001FE 55AA                <1> Boot_Signature	dw	0AA55h
  1108                                    
  1109                                  %else
  1110                                  
  1111                                    ; include DOS Source Code
  1112                                    
  1113                                  	; set Data Segments to CS / 0000h
  1114                                  	push cs
  1115                                  	pop ax
  1116                                  	mov ds,ax
  1117                                  	mov es,ax
  1118                                  	
  1119                                  	xor ax,ax
  1120                                  	mov fs,ax
  1121                                  	mov gs,ax
  1122                                  	
  1123                                  	jmp Smart_Boot_Manager_Kernel
  1124                                  
  1125                                  %endif
  1126                                  
  1127                                  
  1128                                  
  1129                                  ;=============================================================================
  1130                                  ;  data for the Smart Boot Manager
  1131                                  ;=============================================================================
  1132                                  
  1133 00000200 <res 00000019>            ADDR_SBMK_BLOCK_MAP              resb      SIZE_OF_STRUC_BLOCK_MAP * 5
  1134 00000219 01                        ADDR_SBMK_FLAGS                  db        KNLFLAG_FIRSTSCAN
  1135 0000021A 1E                        ADDR_SBMK_DELAY_TIME             db        30
  1136 0000021B FF                        ADDR_SBMK_DIRECT_BOOT            db        0FFh
  1137 0000021C FF                        ADDR_SBMK_DEFAULT_BOOT           db        0FFh
  1138 0000021D 00000000                  ADDR_SBMK_ROOT_PASSWORD          dd        0
  1139 00000221 0000                      ADDR_SBMK_BOOTMENU_STYLE         db        0, 0
  1140 00000223 00000000                  ADDR_SBMK_CDROM_IOPORTS          dw        0, 0
  1141 00000227 0E06                      ADDR_SBMK_BOOT_MENU_POS          dw        0x060E
  1142 00000229 0101                      ADDR_SBMK_MAIN_MENU_POS          dw        0x0101
  1143 0000022B 0202                      ADDR_SBMK_RECORD_MENU_POS        dw        0x0202
  1144 0000022D 0303                      ADDR_SBMK_SYS_MENU_POS           dw        0x0303
  1145                                  
  1146                                  
  1147                                  ; some huge data
  1148                                  
  1149 0000022F <res 00000800>            ADDR_SBMK_BOOT_RECORDS           resb      MAX_RECORD_NUM * SIZE_OF_BOOTRECORD
  1150                                  
  1151                                  
  1152                                  
  1153                                  
  1154                                  
  1155                                  ;=============================================================================
  1156                                  ;  Smart Boot Manager Kernel
  1157                                  ;=============================================================================
  1158                                  
  1159                                  Smart_Boot_Manager_Kernel:
  1160                                  
  1161                                  
  1162                                  ; install own interrupt 13h Handler [in-removing]
  1163 00000A2F B301                    mov bl,1
  1164 00000A31 E8842D                  call install_myint13h
  1165                                  
  1166                                  ;Initializing the CD-ROMs.. [in reviewing]
  1167                                  %ifndef DISABLE_CDBOOT
  1168 00000A34 F606[1902]08            	test byte [ADDR_SBMK_FLAGS], KNLFLAG_NOCDROM
  1169 00000A39 750B                    	jnz .not_set_cdrom_ports
  1170 00000A3B 8B1E[2302]              	mov bx, [ADDR_SBMK_CDROM_IOPORTS]
  1171 00000A3F 8B0E[2502]              	mov cx, [ADDR_SBMK_CDROM_IOPORTS+2]
  1172 00000A43 E8E02D                  	call set_io_ports
  1173                                  .not_set_cdrom_ports:
  1174                                  %endif
  1175                                  
  1176                                  
  1177                                  %ifndef EMULATE_PROG
  1178                                  
  1179                                  ; Set "No Int 13h Extension" flag
  1180 00000A46 30C0                    	xor al, al
  1181 00000A48 F606[1902]04            	test byte [ADDR_SBMK_FLAGS], KNLFLAG_NOINT13EXT
  1182 00000A4D 7502                    	jnz .no_int13_ext
  1183 00000A4F FEC0                            inc al
  1184                                  .no_int13_ext:
  1185 00000A51 A2[B737]                	mov [use_int13_ext], al
  1186                                  
  1187                                  ; Do some initialization
  1188 00000A54 E8F407                  	call main_init_theme		; initialize the theme
  1189 00000A57 E8D508                  	call main_init_video		; initialize the video mode.
  1190 00000A5A E8CC18                          call window_initialize
  1191                                  
  1192                                  ; Check if needs scan boot records.
  1193 00000A5D F606[1902]01            	test byte [ADDR_SBMK_FLAGS], KNLFLAG_FIRSTSCAN
  1194 00000A62 740D                    	jz .no_first_scan
  1195                                  
  1196 00000A64 E80409                  	call main_init_boot_records	; if it's the first time
  1197                                  					; to run this program,
  1198                                  					; call the init_boot_records.
  1199 00000A67 E8D808                  	call main_init_good_record_list
  1200                                  
  1201 00000A6A 8026[1902]FE            	and byte [ADDR_SBMK_FLAGS], ~ KNLFLAG_FIRSTSCAN
  1202 00000A6F EB3E                    	jmp short .show_menu
  1203                                  
  1204                                  .no_first_scan:
  1205                                  
  1206                                  ; go ahead!
  1207                                  
  1208                                  ; Initialize the good record list
  1209 00000A71 E8CE08                  	call main_init_good_record_list
  1210                                  
  1211                                  ; Initialize the keyboard shift var, and test if Ctrl is pressed down.
  1212 00000A74 B402                    	mov ah, 0x02			; test the keyboard status,
  1213 00000A76 E8FA1E                  	call bioskey			; if ctrl pressed then show
  1214 00000A79 A2[A668]                        mov [utils_tmp.kbd_last_shift], al ; Initialize the kbd stat reg.
  1215 00000A7C A804                    	test al, kbCtrlMask		; menu directly,
  1216 00000A7E 752F                    	jnz .show_menu			;
  1217                                  
  1218                                  ; Check direct boot, and schedule boot
  1219 00000A80 A0[1B02]                	mov al, [ADDR_SBMK_DIRECT_BOOT]	; check if need boot directly.
  1220 00000A83 3C20                    	cmp al, MAX_RECORD_NUM		;
  1221 00000A85 7213                    	jb .go_direct_boot
  1222                                  
  1223 00000A87 E8B20D                  	call main_do_schedule		; implement the schedule table.
  1224                                  
  1225 00000A8A 803E[1A02]00            	cmp byte [ADDR_SBMK_DELAY_TIME], 0
  1226 00000A8F 751E                    	jnz .show_menu			; delay_time = 0, boot the
  1227                                  					; default record directly.
  1228 00000A91 A0[1C02]                	mov al, [ADDR_SBMK_DEFAULT_BOOT]
  1229 00000A94 3C20                    	cmp al, MAX_RECORD_NUM
  1230 00000A96 720F                    	jb .go_def_boot
  1231 00000A98 EB15                    	jmp short .show_menu
  1232                                          
  1233                                  .go_direct_boot:
  1234 00000A9A C606[1B02]FF            	mov byte [ADDR_SBMK_DIRECT_BOOT], 0xff ; clear the direct boot sig.
  1235 00000A9F E8DC0D                  	call main_save_boot_manager
  1236 00000AA2 7208                    	jc .disk_error
  1237                                  
  1238 00000AA4 A2[1C02]                	mov [ADDR_SBMK_DEFAULT_BOOT], al
  1239                                  
  1240                                  .go_def_boot:
  1241 00000AA7 E8DE0C                  	call main_boot_default
  1242 00000AAA EB03                    	jmp short .show_menu
  1243                                  
  1244                                  .disk_error:
  1245 00000AAC E8600C                  	call main_show_disk_error
  1246                                  
  1247                                  %else
  1248                                   
  1249                                   ; DOS Emulation Source Code
  1250                                  
  1251                                      call main_init_video
  1252                                      call main_init_boot_records
  1253                                      call main_init_good_record_list
  1254                                      call main_do_schedule
  1255                                  
  1256                                  %endif
  1257                                  
  1258                                  
  1259                                  .show_menu:
  1260 00000AAF E8EC07                  	call main_init_all_menus	; initialize the command menus
  1261                                  
  1262                                  ;Initialize  time count var
  1263 00000AB2 A0[1A02]                	mov al, [ADDR_SBMK_DELAY_TIME]
  1264 00000AB5 3CFF                    	cmp al, 255
  1265 00000AB7 7305                    	jae .not_count_time			; if delay_time = 255
  1266 00000AB9 A2[C868]                	mov [main_tmp.time_count], al		; then do not count time.
  1267 00000ABC 30C0                    	xor al, al
  1268                                  
  1269                                  .not_count_time:
  1270 00000ABE A2[CB68]                	mov [main_tmp.key_pressed], al
  1271                                  
  1272                                  ; Set focus bar to the default record
  1273 00000AC1 8A1E[1C02]              	mov bl, [ADDR_SBMK_DEFAULT_BOOT]
  1274 00000AC5 8D36[A868]              	lea si, [main_tmp.good_record_list]
  1275 00000AC9 8A0E[2244]              	mov cl, [GOOD_RECORD_NUMBER]
  1276 00000ACD 30ED                    	xor ch, ch
  1277 00000ACF 30FF                    	xor bh, bh
  1278                                          
  1279                                  .loop_search_def:
  1280 00000AD1 AC                      	lodsb
  1281 00000AD2 38D8                    	cmp al, bl
  1282 00000AD4 7406                    	je .found_def
  1283 00000AD6 FEC7                    	inc bh
  1284 00000AD8 E2F7                    	loop .loop_search_def
  1285 00000ADA EB14                    	jmp short .go_ahead
  1286                                  
  1287                                  .found_def:
  1288 00000ADC 883E[2344]              	mov [FOCUS_RECORD], bh
  1289 00000AE0 3A3E[2044]              	cmp bh, [BOOT_MENU_AREA_HEIGHT]
  1290 00000AE4 720A                    	jb .go_ahead
  1291 00000AE6 FEC7                    	inc bh
  1292 00000AE8 2A3E[2044]              	sub bh, [BOOT_MENU_AREA_HEIGHT]
  1293 00000AEC 883E[2444]              	mov [FIRST_VISIBLE_RECORD], bh
  1294                                  
  1295                                  ; Run the UI system
  1296                                  .go_ahead:
  1297 00000AF0 BB[E243]                        mov bx, main_windows_data.root_window
  1298 00000AF3 BE[FC43]                        mov si, main_windows_data.boot_menu
  1299 00000AF6 E86518                          call window_execute
  1300                                  
  1301                                  .halt:
  1302 00000AF9 EBFE                            jmp short .halt
  1303                                  
  1304                                  ;=============================================================================
  1305                                  ;  include area (mostly commands)
  1306                                  ;=============================================================================
  1307                                  
  1308                                  %include "main-cmds.asm"
  1309                              <1> ; asmsyntax=nasm
  1310                              <1> ;
  1311                              <1> ; main-cmds.asm
  1312                              <1> ;
  1313                              <1> ; command handles for main program
  1314                              <1> ;
  1315                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
  1316                              <1> ;
  1317                              <1> 
  1318                              <1> ;=============================================================================
  1319                              <1> ;main_show_help ---- show the help window
  1320                              <1> ;=============================================================================
  1321                              <1> main_show_help:
  1322 00000AFB 8B36[A046]          <1>         mov si, [str_idx.help_content]
  1323 00000AFF 09F6                <1>         or si, si
  1324 00000B01 740D                <1>         jz .end
  1325                              <1>         
  1326 00000B03 A0[2946]            <1> 	mov al, [color.help_msg]
  1327 00000B06 8B1E[2746]          <1> 	mov bx, [color.help_win]
  1328 00000B0A BA[5E46]            <1>         mov dx, str_idx.help
  1329 00000B0D E8FC11              <1>         call message_box
  1330                              <1> .end:
  1331 00000B10 C3                  <1>         ret
  1332                              <1> 
  1333                              <1> ;=============================================================================
  1334                              <1> ;main_show_about ---- show the about window
  1335                              <1> ;=============================================================================
  1336                              <1> main_show_about:
  1337 00000B11 8B36[9E46]          <1>         mov si, [str_idx.about_content]
  1338 00000B15 09F6                <1>         or si, si
  1339 00000B17 740D                <1>         jz .end
  1340                              <1>         
  1341 00000B19 A0[2C46]            <1>         mov al, [color.about_msg]
  1342 00000B1C 8B1E[2A46]          <1>         mov bx, [color.about_win]
  1343 00000B20 BA[5A46]            <1>         mov dx, str_idx.about
  1344 00000B23 E8E611              <1>         call message_box
  1345                              <1> .end:
  1346 00000B26 C3                  <1>         ret
  1347                              <1> 
  1348                              <1> ;=============================================================================
  1349                              <1> ;main_show_main_menu ---- show the main command menu
  1350                              <1> ;=============================================================================
  1351                              <1> main_show_main_menu:
  1352 00000B27 BE[2744]            <1> 	mov si, main_windows_data.main_menu
  1353 00000B2A E86B18              <1> 	call window_run
  1354 00000B2D C3                  <1> 	ret
  1355                              <1> 
  1356                              <1> ;=============================================================================
  1357                              <1> ;main_show_record_menu ---- show the record command menu
  1358                              <1> ;=============================================================================
  1359                              <1> main_show_record_menu:
  1360 00000B2E BE[5244]            <1> 	mov si, main_windows_data.record_menu
  1361 00000B31 E86418              <1> 	call window_run
  1362 00000B34 C3                  <1> 	ret
  1363                              <1> 
  1364                              <1> ;=============================================================================
  1365                              <1> ;main_show_sys_menu ---- show the sys command menu
  1366                              <1> ;=============================================================================
  1367                              <1> main_show_sys_menu:
  1368 00000B35 BE[7D44]            <1> 	mov si, main_windows_data.sys_menu
  1369 00000B38 E85D18              <1> 	call window_run
  1370 00000B3B C3                  <1> 	ret
  1371                              <1> 
  1372                              <1> ;=============================================================================
  1373                              <1> ;main_ask_save_changes ---- save boot manager to disk
  1374                              <1> ;=============================================================================
  1375                              <1> main_ask_save_changes:
  1376 00000B3C 803E[CE68]00        <1>         cmp byte [main_tmp.change_occured], 0
  1377 00000B41 7418                <1>         je .no_changes
  1378                              <1>         
  1379 00000B43 8B36[A646]          <1>         mov si, [str_idx.ask_save_changes]
  1380 00000B47 E8EE11              <1>         call info_box
  1381 00000B4A 3D0D1C              <1>         cmp ax, kbEnter
  1382 00000B4D 740D                <1>         je main_save_changes
  1383 00000B4F 3A06[F745]          <1>         cmp al, [yes_key_lower]
  1384 00000B53 7407                <1>         je main_save_changes
  1385 00000B55 3A06[F845]          <1>         cmp al, [yes_key_upper]
  1386 00000B59 7401                <1>         je main_save_changes
  1387                              <1>         
  1388                              <1> .no_changes:
  1389 00000B5B C3                  <1>         ret
  1390                              <1> 
  1391                              <1> ;=============================================================================
  1392                              <1> ;main_save_changes ---- save boot manager to disk
  1393                              <1> ;=============================================================================
  1394                              <1> main_save_changes:
  1395                              <1> 
  1396                              <1> %ifndef EMULATE_PROG
  1397 00000B5C E81F0D              <1>         call main_save_boot_manager
  1398 00000B5F 720D                <1>         jc .disk_error
  1399                              <1> %endif
  1400                              <1> 
  1401 00000B61 C606[CE68]00        <1>         mov byte [main_tmp.change_occured], 0       ; clear change signature.
  1402                              <1> 
  1403 00000B66 8B36[A246]          <1>         mov si, [str_idx.changes_saved]
  1404 00000B6A E8CB11              <1>         call info_box
  1405 00000B6D C3                  <1>         ret
  1406                              <1> 
  1407                              <1> .disk_error:
  1408 00000B6E E89E0B              <1>         call main_show_disk_error
  1409                              <1> .end:
  1410 00000B71 C3                  <1>         ret
  1411                              <1> 
  1412                              <1> %if 0
  1413                              <1> ;=============================================================================
  1414                              <1> ;main_change_video_mode ---- change the video mode
  1415                              <1> ;=============================================================================
  1416                              <1> main_change_video_mode:
  1417                              <1> 
  1418                              <1>         inc byte [change_occured]               ; some changes occured.
  1419                              <1> 
  1420                              <1>         mov al, [video_mode]
  1421                              <1>         not al
  1422                              <1>         mov [video_mode], al
  1423                              <1>         call init_video
  1424                              <1>         call draw_screen
  1425                              <1>         ret
  1426                              <1> %endif
  1427                              <1> 
  1428                              <1> ;=============================================================================
  1429                              <1> ;main_change_name ---- change the record name
  1430                              <1> ;=============================================================================
  1431                              <1> main_change_name:
  1432 00000B72 E8E80B              <1>         call main_get_focus_record_pointer
  1433                              <1> 
  1434 00000B75 89F7                <1> 	mov di, si
  1435 00000B77 83C716              <1> 	add di, struc_bootrecord.name
  1436                              <1> 
  1437 00000B7A 0FB606[2046]        <1>         movzx ax, byte [color.input_box_msg]
  1438 00000B7F 8B1E[1E46]          <1>         mov bx, [color.input_box]
  1439 00000B83 B90F0F              <1> 	mov cx, (MAX_NAME_LENGTH<<8)|MAX_NAME_LENGTH
  1440 00000B86 31D2                <1> 	xor dx, dx
  1441 00000B88 8B36[6646]          <1>         mov si, [str_idx.name]
  1442                              <1>         
  1443 00000B8C E87713              <1>         call input_box
  1444 00000B8F 7204                <1>         jc .end
  1445 00000B91 FE06[CE68]          <1>         inc byte [main_tmp.change_occured]          ; some changes occured.
  1446                              <1> .end:
  1447 00000B95 C3                  <1>         ret
  1448                              <1> 
  1449                              <1> 
  1450                              <1> ;=============================================================================
  1451                              <1> ;main_login_as_root ---- login as root
  1452                              <1> ;=============================================================================
  1453                              <1> main_login_as_root:
  1454 00000B96 A0[CF68]            <1> 	mov al, [main_tmp.root_login]
  1455 00000B99 08C0                <1> 	or al, al
  1456 00000B9B 0F94C0              <1> 	setz al
  1457 00000B9E A2[CF68]            <1> 	mov [main_tmp.root_login], al
  1458 00000BA1 C3                  <1>         ret
  1459                              <1> 
  1460                              <1> 
  1461                              <1> ;=============================================================================
  1462                              <1> ;main_change_security_mode ---- change the secure mode
  1463                              <1> ;=============================================================================
  1464                              <1> main_change_security_mode:
  1465 00000BA2 8036[1902]02        <1> 	xor byte [ADDR_SBMK_FLAGS], KNLFLAG_SECURITY
  1466 00000BA7 FE06[CE68]          <1>         inc byte [main_tmp.change_occured]
  1467 00000BAB C3                  <1>         ret
  1468                              <1> 
  1469                              <1> ;=============================================================================
  1470                              <1> ;main_change_root_password ---- change the root password
  1471                              <1> ;=============================================================================
  1472                              <1> main_change_root_password:
  1473 00000BAC B110                <1> 	mov cl, MAX_PASSWORD_LENGTH
  1474 00000BAE 8B36[6846]          <1>         mov si, [str_idx.new_root_passwd]
  1475 00000BB2 E89413              <1>         call input_password
  1476 00000BB5 7241                <1>         jc .end
  1477 00000BB7 89C3                <1>         mov bx, ax
  1478 00000BB9 89D1                <1>         mov cx, dx
  1479                              <1> 
  1480 00000BBB 53                  <1>         push bx
  1481 00000BBC 51                  <1>         push cx
  1482 00000BBD B110                <1> 	mov cl, MAX_PASSWORD_LENGTH
  1483 00000BBF 8B36[7046]          <1>         mov si, [str_idx.retype_passwd]
  1484 00000BC3 E88313              <1>         call input_password
  1485 00000BC6 59                  <1>         pop cx
  1486 00000BC7 5B                  <1>         pop bx
  1487 00000BC8 722E                <1>         jc .end
  1488 00000BCA 39C3                <1>         cmp bx, ax
  1489 00000BCC 7523                <1>         jne .wrong
  1490 00000BCE 39D1                <1>         cmp cx, dx
  1491 00000BD0 751F                <1>         jne .wrong
  1492                              <1> 
  1493 00000BD2 891E[1D02]          <1>         mov [ADDR_SBMK_ROOT_PASSWORD], bx
  1494 00000BD6 890E[1F02]          <1>         mov [ADDR_SBMK_ROOT_PASSWORD+2], cx
  1495                              <1> 
  1496 00000BDA C606[CF68]00        <1>         mov byte [main_tmp.root_login], 0
  1497 00000BDF 8026[1902]FD        <1>         and byte [ADDR_SBMK_FLAGS], ~ KNLFLAG_SECURITY
  1498                              <1> 
  1499 00000BE4 8B36[A446]          <1>         mov si, [str_idx.passwd_changed]
  1500 00000BE8 E84D11              <1>         call info_box
  1501                              <1> 
  1502 00000BEB FE06[CE68]          <1>         inc byte [main_tmp.change_occured]         ; some changes occured.
  1503 00000BEF EB07                <1>         jmp short .end
  1504                              <1> .wrong:
  1505 00000BF1 8B36[A846]          <1>         mov si, [str_idx.wrong_passwd]
  1506 00000BF5 E82E11              <1>         call error_box
  1507                              <1> .end:
  1508 00000BF8 C3                  <1>         ret
  1509                              <1> 
  1510                              <1> ;=============================================================================
  1511                              <1> ;main_change_record_password ---- change the record password
  1512                              <1> ;=============================================================================
  1513                              <1> main_change_record_password:
  1514 00000BF9 B110                <1> 	mov cl, MAX_PASSWORD_LENGTH
  1515 00000BFB 8B36[6C46]          <1>         mov si, [str_idx.new_record_passwd]
  1516 00000BFF E84713              <1>         call input_password
  1517 00000C02 7237                <1>         jc .end
  1518 00000C04 89C3                <1>         mov bx, ax
  1519 00000C06 89D1                <1>         mov cx, dx
  1520                              <1> 
  1521 00000C08 53                  <1>         push bx
  1522 00000C09 51                  <1>         push cx
  1523 00000C0A B110                <1> 	mov cl, MAX_PASSWORD_LENGTH
  1524 00000C0C 8B36[7046]          <1>         mov si, [str_idx.retype_passwd]
  1525 00000C10 E83613              <1>         call input_password
  1526 00000C13 59                  <1>         pop cx
  1527 00000C14 5B                  <1>         pop bx
  1528 00000C15 7224                <1>         jc .end
  1529 00000C17 39C3                <1>         cmp bx, ax
  1530 00000C19 7519                <1>         jne .wrong
  1531 00000C1B 39D1                <1>         cmp cx, dx
  1532 00000C1D 7515                <1>         jne .wrong
  1533                              <1> 
  1534 00000C1F E83B0B              <1>         call main_get_focus_record_pointer
  1535 00000C22 895C0E              <1>         mov [si+struc_bootrecord.password], bx
  1536 00000C25 894C10              <1>         mov [si+struc_bootrecord.password+2], cx
  1537                              <1>         
  1538 00000C28 8B36[A446]          <1>         mov si, [str_idx.passwd_changed]
  1539 00000C2C E80911              <1>         call info_box
  1540                              <1> 
  1541 00000C2F FE06[CE68]          <1>         inc byte [main_tmp.change_occured]         ; some changes occured.
  1542 00000C33 C3                  <1>         ret
  1543                              <1>         
  1544                              <1> .wrong:
  1545 00000C34 8B36[A846]          <1>         mov si, [str_idx.wrong_passwd]
  1546 00000C38 E8EB10              <1>         call error_box
  1547                              <1> .end:
  1548 00000C3B C3                  <1>         ret
  1549                              <1> 
  1550                              <1> ;=============================================================================
  1551                              <1> ;main_set_default_record ---- set the default boot record
  1552                              <1> ;=============================================================================
  1553                              <1> main_set_default_record:
  1554 00000C3C 8A0E[2344]          <1> 	mov cl, [FOCUS_RECORD]
  1555 00000C40 E82D0B              <1> 	call main_get_record_pointer           ; get real record index
  1556                              <1> 
  1557 00000C43 880E[1C02]          <1>         mov [ADDR_SBMK_DEFAULT_BOOT], cl
  1558 00000C47 FE06[CE68]          <1>         inc byte [main_tmp.change_occured]      ; some changes occured.
  1559 00000C4B C3                  <1>         ret
  1560                              <1> 
  1561                              <1> ;=============================================================================
  1562                              <1> ;main_unset_default_record ---- unset the default boot record
  1563                              <1> ;=============================================================================
  1564                              <1> main_unset_default_record:
  1565 00000C4C C606[1C02]FF        <1>         mov byte [ADDR_SBMK_DEFAULT_BOOT], 0xFF
  1566 00000C51 FE06[CE68]          <1>         inc byte [main_tmp.change_occured]      ; some changes occured.
  1567 00000C55 C3                  <1>         ret
  1568                              <1>         
  1569                              <1> ;=============================================================================
  1570                              <1> ;main_toggle_auto_active ---- toggle the auto active switch
  1571                              <1> ;=============================================================================
  1572                              <1> main_toggle_auto_active:
  1573 00000C56 E8040B              <1>         call main_get_focus_record_pointer
  1574 00000C59 E8A127              <1>         call check_allow_act
  1575 00000C5C 720D                <1>         jc .end
  1576                              <1> 
  1577 00000C5E E80C0A              <1> 	call main_auth_record_action
  1578 00000C61 7208                <1> 	jc .end
  1579                              <1> 
  1580 00000C63 81340010            <1>         xor word [si + struc_bootrecord.flags], INFOFLAG_AUTOACTIVE
  1581 00000C67 FE06[CE68]          <1>         inc byte [main_tmp.change_occured]        ; some changes occured.
  1582                              <1> .end:
  1583 00000C6B C3                  <1>         ret
  1584                              <1> 
  1585                              <1> ;=============================================================================
  1586                              <1> ;main_toggle_auto_hide ---- toggle the auto hide switch
  1587                              <1> ;=============================================================================
  1588                              <1> main_toggle_auto_hide:
  1589 00000C6C E8EE0A              <1>         call main_get_focus_record_pointer
  1590 00000C6F E86827              <1>         call check_allow_hide
  1591 00000C72 720D                <1>         jc .end
  1592                              <1> 
  1593 00000C74 E8F609              <1> 	call main_auth_record_action
  1594 00000C77 7208                <1> 	jc .end
  1595                              <1>         
  1596 00000C79 81340004            <1>         xor word [si + struc_bootrecord.flags], INFOFLAG_AUTOHIDE
  1597 00000C7D FE06[CE68]          <1>         inc byte [main_tmp.change_occured]        ; some changes occured.
  1598                              <1> 
  1599                              <1> .end:
  1600 00000C81 C3                  <1>         ret
  1601                              <1> 
  1602                              <1> ;=============================================================================
  1603                              <1> ;main_mark_active ---- mark the record active
  1604                              <1> ;=============================================================================
  1605                              <1> main_mark_active:
  1606 00000C82 E8D80A              <1>         call main_get_focus_record_pointer
  1607 00000C85 E87527              <1>         call check_allow_act
  1608 00000C88 724F                <1>         jc .end
  1609                              <1> 
  1610 00000C8A E8E009              <1> 	call main_auth_record_action
  1611 00000C8D 724A                <1> 	jc .end
  1612                              <1> 
  1613 00000C8F 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]
  1614                              <1> 
  1615 00000C92 56                  <1>         push si
  1616 00000C93 8D36[A868]          <1>         lea si, [main_tmp.good_record_list]
  1617 00000C97 8D3E[2F02]          <1>         lea di, [ADDR_SBMK_BOOT_RECORDS]
  1618                              <1> 
  1619 00000C9B 0FB60E[2244]        <1>         movzx cx, byte [GOOD_RECORD_NUMBER]
  1620 00000CA0 B640                <1>         mov dh, SIZE_OF_BOOTRECORD
  1621 00000CA2 6631DB              <1>         xor ebx, ebx
  1622 00000CA5 FC                  <1>         cld
  1623                              <1> .loop_clear_act:                                ; clear all active marks of
  1624 00000CA6 57                  <1>         push di                                 ; the boot records in same
  1625 00000CA7 AC                  <1>         lodsb                                   ; drive and father partition.
  1626 00000CA8 F6E6                <1>         mul dh
  1627 00000CAA 01C7                <1>         add di, ax
  1628 00000CAC 3A5502              <1>         cmp dl, [di + struc_bootrecord.drive_id]
  1629 00000CAF 750A                <1>         jne .do_nothing
  1630 00000CB1 66395D06            <1>         cmp [di + struc_bootrecord.father_abs_addr], ebx
  1631 00000CB5 7504                <1>         jne .do_nothing
  1632 00000CB7 8125FFF7            <1>         and word [di + struc_bootrecord.flags], ~ INFOFLAG_ACTIVE
  1633                              <1> .do_nothing:
  1634 00000CBB 5F                  <1>         pop di
  1635 00000CBC E2E8                <1>         loop .loop_clear_act
  1636                              <1> 
  1637 00000CBE 5E                  <1>         pop si
  1638                              <1>         
  1639 00000CBF E87423              <1>         call mark_record_active
  1640 00000CC2 7206                <1>         jc .error                                ; mark active ok
  1641 00000CC4 E8600A              <1>         call main_recheck_same_records           ; recheck same records
  1642 00000CC7 7205                <1>         jc .disk_error
  1643 00000CC9 C3                  <1>         ret
  1644                              <1> 
  1645                              <1> .error:
  1646 00000CCA 09C0                <1>         or ax, ax
  1647 00000CCC 7404                <1>         jz .cannot_act
  1648                              <1> 
  1649                              <1> .disk_error:
  1650 00000CCE E83E0A              <1>         call main_show_disk_error
  1651 00000CD1 C3                  <1>         ret
  1652                              <1> 
  1653                              <1> .cannot_act:
  1654 00000CD2 8B36[AC46]          <1>         mov si, [str_idx.mark_act_failed]
  1655 00000CD6 E84D10              <1>         call error_box
  1656                              <1> .end:
  1657 00000CD9 C3                  <1>         ret
  1658                              <1> 
  1659                              <1> ;=============================================================================
  1660                              <1> ;main_toggle_hidden ---- toggle a record's hidden attribute
  1661                              <1> ;=============================================================================
  1662                              <1> main_toggle_hidden:
  1663 00000CDA E8800A              <1>         call main_get_focus_record_pointer
  1664 00000CDD E8FA26              <1>         call check_allow_hide
  1665 00000CE0 721F                <1>         jc .end
  1666                              <1> 
  1667 00000CE2 E88809              <1> 	call main_auth_record_action
  1668 00000CE5 721A                <1> 	jc .end
  1669                              <1> 
  1670 00000CE7 E8B623              <1>         call toggle_record_hidden
  1671 00000CEA 7206                <1>         jc .error                                 ; toggle hidden ok
  1672 00000CEC E8380A              <1>         call main_recheck_same_records            ; recheck same records
  1673 00000CEF 7205                <1>         jc .disk_error
  1674 00000CF1 C3                  <1>         ret
  1675                              <1> 
  1676                              <1> .error:
  1677 00000CF2 09C0                <1>         or ax, ax
  1678 00000CF4 7404                <1>         jz .cannot_hide
  1679                              <1> 
  1680                              <1> .disk_error:
  1681 00000CF6 E8160A              <1>         call main_show_disk_error
  1682 00000CF9 C3                  <1>         ret
  1683                              <1> 
  1684                              <1> .cannot_hide:
  1685 00000CFA 8B36[AE46]          <1>         mov si, [str_idx.toggle_hid_failed]
  1686 00000CFE E82510              <1>         call error_box
  1687                              <1> .end:
  1688 00000D01 C3                  <1>         ret
  1689                              <1> 
  1690                              <1> ;=============================================================================
  1691                              <1> ;main_delete_record ---- delete a boot record
  1692                              <1> ;=============================================================================
  1693                              <1> main_delete_record:
  1694 00000D02 E8580A              <1>         call main_get_focus_record_pointer
  1695 00000D05 F7040002            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_HIDDEN
  1696 00000D09 7415                <1>         jz .del_it
  1697                              <1> 
  1698 00000D0B E89223              <1>         call toggle_record_hidden           ; unhide it first.
  1699 00000D0E 7310                <1>         jnc .del_it                         ; unhide ok, del it.
  1700                              <1> 
  1701 00000D10 09C0                <1>         or ax, ax
  1702 00000D12 7404                <1>         jz .cannot_hide
  1703 00000D14 E8F809              <1>         call main_show_disk_error
  1704 00000D17 C3                  <1>         ret
  1705                              <1> 
  1706                              <1> .cannot_hide:
  1707 00000D18 8B36[AE46]          <1>         mov si, [str_idx.toggle_hid_failed]
  1708 00000D1C E80710              <1>         call error_box
  1709 00000D1F C3                  <1>         ret
  1710                              <1> 
  1711                              <1> .del_it:
  1712 00000D20 30C0                <1>         xor al, al
  1713 00000D22 89F7                <1>         mov di, si
  1714 00000D24 B94000              <1>         mov cx, SIZE_OF_BOOTRECORD
  1715 00000D27 FC                  <1>         cld
  1716 00000D28 F3AA                <1>         rep stosb
  1717                              <1> 
  1718 00000D2A FE06[CE68]          <1>         inc byte [main_tmp.change_occured]               ; some changes occured.
  1719                              <1> 
  1720 00000D2E E81106              <1>         call main_init_good_record_list
  1721 00000D31 A0[2244]            <1>         mov al, [GOOD_RECORD_NUMBER]
  1722 00000D34 08C0                <1>         or al, al
  1723 00000D36 7415                <1>         jz .no_record
  1724                              <1>         
  1725 00000D38 FEC8                <1>         dec al
  1726 00000D3A 3A06[2444]          <1>         cmp al, [FIRST_VISIBLE_RECORD]                  ; adjust the cursor
  1727 00000D3E 7303                <1>         jae .check_focus_pos                            ; and menu position.
  1728 00000D40 A2[2444]            <1>         mov [FIRST_VISIBLE_RECORD], al                  ;
  1729                              <1> .check_focus_pos:                                       ;
  1730 00000D43 3A06[2344]          <1>         cmp al, [FOCUS_RECORD]                          ;
  1731 00000D47 730A                <1>         jae .end                                        ;
  1732 00000D49 A2[2344]            <1>         mov [FOCUS_RECORD], al                          ;
  1733 00000D4C C3                  <1>         ret
  1734                              <1> 
  1735                              <1> .no_record:
  1736 00000D4D A2[2444]            <1>         mov [FIRST_VISIBLE_RECORD], al
  1737 00000D50 A2[2344]            <1>         mov [FOCUS_RECORD], al
  1738                              <1> .end:
  1739 00000D53 C3                  <1>         ret
  1740                              <1>         
  1741                              <1> 
  1742                              <1> ;=============================================================================
  1743                              <1> ;main_rescan_all_drives ---- research all drives for boot records
  1744                              <1> ;=============================================================================
  1745                              <1> main_rescan_all_records:
  1746 00000D54 8026[1902]DF        <1>         and byte [ADDR_SBMK_FLAGS], ~ KNLFLAG_ONLYPARTS
  1747 00000D59 EB05                <1>         jmp short main_rescan_records
  1748                              <1>         
  1749                              <1> ;=============================================================================
  1750                              <1> ;rescan_fixed_drives ---- research fixed drives for boot records
  1751                              <1> ;=============================================================================
  1752                              <1> main_rescan_all_partitions:
  1753 00000D5B 800E[1902]20        <1>         or byte [ADDR_SBMK_FLAGS], KNLFLAG_ONLYPARTS
  1754                              <1>         
  1755                              <1> ;=============================================================================
  1756                              <1> ;rescan_records ---- research all drives for boot records
  1757                              <1> ;=============================================================================
  1758                              <1> main_rescan_records:
  1759 00000D60 0FB60E[2244]        <1>         movzx cx, byte [GOOD_RECORD_NUMBER]
  1760 00000D65 08C9                <1>         or cl, cl                               ; if no good record then go to
  1761 00000D67 7423                <1>         jz .init_it                             ; init directly.
  1762                              <1>         
  1763 00000D69 8D3E[A868]          <1>         lea di, [main_tmp.good_record_list]
  1764 00000D6D B240                <1>         mov dl, SIZE_OF_BOOTRECORD
  1765                              <1> 
  1766                              <1> ; unhide all hidden partition first.
  1767                              <1> .loop_unhide:
  1768 00000D6F 8A05                <1>         mov al, [di]
  1769 00000D71 47                  <1>         inc di
  1770 00000D72 F6E2                <1>         mul dl
  1771 00000D74 8D36[2F02]          <1>         lea si, [ADDR_SBMK_BOOT_RECORDS]
  1772 00000D78 01C6                <1>         add si, ax
  1773 00000D7A F7040002            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_HIDDEN
  1774 00000D7E 740A                <1>         jz .not_hidden
  1775 00000D80 E81D23              <1>         call toggle_record_hidden
  1776 00000D83 721A                <1>         jc .hidden_error
  1777 00000D85 E89F09              <1>         call main_recheck_same_records
  1778 00000D88 7219                <1>         jc .disk_error
  1779                              <1> 
  1780                              <1> .not_hidden:
  1781 00000D8A E2E3                <1>         loop .loop_unhide
  1782                              <1>         
  1783                              <1> .init_it:
  1784 00000D8C FE06[CE68]          <1>         inc byte [main_tmp.change_occured]               ; some changes occured.
  1785                              <1> 
  1786 00000D90 E8D805              <1>         call main_init_boot_records
  1787 00000D93 E8AC05              <1>         call main_init_good_record_list
  1788                              <1> 
  1789 00000D96 30C0                <1>         xor al, al
  1790 00000D98 A2[2344]            <1>         mov byte [FOCUS_RECORD], al
  1791 00000D9B A2[2444]            <1>         mov byte [FIRST_VISIBLE_RECORD], al
  1792 00000D9E C3                  <1> 	ret
  1793                              <1>         
  1794                              <1> .hidden_error:
  1795 00000D9F 09C0                <1>         or ax, ax
  1796 00000DA1 7404                <1>         jz .cannot_hide
  1797                              <1> 
  1798                              <1> .disk_error:
  1799 00000DA3 E86909              <1>         call main_show_disk_error
  1800 00000DA6 C3                  <1>         ret
  1801                              <1> 
  1802                              <1> .cannot_hide:
  1803 00000DA7 8B36[AE46]          <1>         mov si, [str_idx.toggle_hid_failed]
  1804 00000DAB E8780F              <1>         call error_box
  1805                              <1> .end:
  1806 00000DAE C3                  <1>         ret
  1807                              <1> 
  1808                              <1> ;=============================================================================
  1809                              <1> ;main_set_delay_time ---- set the delay time
  1810                              <1> ;=============================================================================
  1811                              <1> main_set_delay_time:
  1812 00000DAF 0FB606[2046]        <1>         movzx ax, [color.input_box_msg]
  1813 00000DB4 8B1E[1E46]          <1>         mov bx, [color.input_box]
  1814 00000DB8 B90303              <1>         mov cx, 0x0303
  1815 00000DBB 31D2                <1> 	xor dx, dx
  1816 00000DBD 8B36[6446]          <1>         mov si, [str_idx.delay_time]
  1817 00000DC1 BF[5771]            <1>         mov di, main_tmp.dialog_buf
  1818 00000DC4 8835                <1>         mov [di], dh
  1819 00000DC6 E83D11              <1>         call input_box
  1820 00000DC9 7213                <1>         jc .end
  1821                              <1> 
  1822 00000DCB 89FE                <1>         mov si, di
  1823 00000DCD E84B19              <1>         call atoi
  1824                              <1> 
  1825 00000DD0 3DFF00              <1>         cmp ax, 255
  1826 00000DD3 7602                <1>         jbe .set_time
  1827 00000DD5 B0FF                <1>         mov al, 255
  1828                              <1> .set_time:
  1829 00000DD7 A2[1A02]            <1>         mov [ADDR_SBMK_DELAY_TIME], al
  1830 00000DDA FE06[CE68]          <1>         inc byte [main_tmp.change_occured]         ; some changes occured.
  1831                              <1> .end:
  1832 00000DDE C3                  <1>         ret
  1833                              <1> 
  1834                              <1> ;=============================================================================
  1835                              <1> ;main_boot_it ---- boot the selected record
  1836                              <1> ;=============================================================================
  1837                              <1> main_boot_it:
  1838 00000DDF 8A0E[2344]          <1> 	mov cl, [FOCUS_RECORD]
  1839 00000DE3 E88A09              <1> 	call main_get_record_pointer
  1840 00000DE6 88C8                <1> 	mov al, cl
  1841 00000DE8 50                  <1> 	push ax
  1842                              <1> 
  1843 00000DE9 F606[1902]10        <1>         test byte [ADDR_SBMK_FLAGS], KNLFLAG_REMLAST
  1844 00000DEE 740D                <1>         jz .no_remlast
  1845                              <1> 
  1846 00000DF0 A2[1C02]            <1>         mov [ADDR_SBMK_DEFAULT_BOOT], al
  1847                              <1>        
  1848 00000DF3 E8880A              <1>         call main_save_boot_manager
  1849 00000DF6 7308                <1>         jnc .cont_boot
  1850                              <1> 
  1851 00000DF8 E81409              <1>         call main_show_disk_error
  1852 00000DFB EB03                <1>         jmp short .cont_boot
  1853                              <1> 
  1854                              <1> .no_remlast:
  1855 00000DFD E83CFD              <1>         call main_ask_save_changes              ; ask if save the changes.
  1856                              <1> 
  1857                              <1> .cont_boot:
  1858 00000E00 E8CC0A              <1>         call main_hide_auto_hides
  1859 00000E03 58                  <1>         pop ax
  1860 00000E04 7203                <1>         jc .end
  1861                              <1>  
  1862 00000E06 E8A309              <1>         call main_do_boot_record
  1863                              <1> .end:
  1864 00000E09 C3                  <1>         ret
  1865                              <1> 
  1866                              <1> ;=============================================================================
  1867                              <1> ;main_return_to_bios ---- give control back to BIOS
  1868                              <1> ;=============================================================================
  1869                              <1> main_return_to_bios:
  1870 00000E0A E82FFD              <1>         call main_ask_save_changes              ; ask if save the changes.
  1871                              <1>         
  1872 00000E0D E8E80D              <1>         call reset_video_mode
  1873                              <1>         
  1874 00000E10 E8E929              <1> 	call uninstall_myint13h
  1875                              <1> %ifdef EMULATE_PROG
  1876                              <1>         mov ax, 0x4c00                          ; exit to dos
  1877                              <1>         int 0x21                                ;
  1878                              <1> %else
  1879 00000E13 CD18                <1>         int 0x18                                ; return to BIOS
  1880                              <1> %endif
  1881                              <1> 
  1882                              <1> .end:
  1883 00000E15 C3                  <1>         ret
  1884                              <1> 
  1885                              <1> 
  1886                              <1> ;=============================================================================
  1887                              <1> ; Duplicate the boot record
  1888                              <1> ;=============================================================================
  1889                              <1> main_dup_record:
  1890 00000E16 B84000              <1>         mov ax, SIZE_OF_BOOTRECORD
  1891 00000E19 B92000              <1>         mov cx, MAX_RECORD_NUM
  1892 00000E1C BF[2F02]            <1>         mov di, ADDR_SBMK_BOOT_RECORDS
  1893                              <1> 
  1894                              <1> .search_empty_slot:
  1895 00000E1F F60509              <1>         test byte [di + struc_bootrecord.flags], DRVFLAG_DRIVEOK | INFOFLAG_ISSPECIAL
  1896 00000E22 7405                <1>         jz .found_empty
  1897 00000E24 01C7                <1>         add di, ax
  1898 00000E26 E2F7                <1>         loop .search_empty_slot
  1899 00000E28 C3                  <1> 	ret
  1900                              <1> 
  1901                              <1> .found_empty:
  1902                              <1> 
  1903 00000E29 FE06[CE68]          <1>         inc byte [main_tmp.change_occured]
  1904                              <1> 
  1905 00000E2D E82D09              <1>         call main_get_focus_record_pointer
  1906 00000E30 89C1                <1>         mov cx, ax
  1907 00000E32 FC                  <1>         cld
  1908 00000E33 F3A4                <1>         rep movsb
  1909 00000E35 E80A05              <1>         call main_init_good_record_list
  1910 00000E38 C3                  <1>         ret
  1911                              <1> 
  1912                              <1> 
  1913                              <1> 
  1914                              <1> ;=============================================================================
  1915                              <1> ; move the boot record down 
  1916                              <1> ;=============================================================================
  1917                              <1> main_move_record_down:
  1918 00000E39 0FB61E[2344]        <1>         movzx bx, byte [FOCUS_RECORD]
  1919 00000E3E 8A87[A868]          <1>         mov al, [main_tmp.good_record_list + bx]
  1920 00000E42 FEC3                <1>         inc bl
  1921 00000E44 8AA7[A868]          <1>         mov ah, [main_tmp.good_record_list + bx]
  1922 00000E48 3A1E[2244]          <1>         cmp bl, [GOOD_RECORD_NUMBER]
  1923 00000E4C 731C                <1>         jae .end
  1924                              <1> 
  1925 00000E4E 3A06[1C02]          <1>         cmp al, [ADDR_SBMK_DEFAULT_BOOT]
  1926 00000E52 7506                <1>         jne .chknext
  1927 00000E54 8826[1C02]          <1>         mov [ADDR_SBMK_DEFAULT_BOOT], ah
  1928 00000E58 EB09                <1>         jmp short .swap_record
  1929                              <1> .chknext:
  1930 00000E5A 3A26[1C02]          <1>         cmp ah, [ADDR_SBMK_DEFAULT_BOOT]
  1931 00000E5E 7503                <1>         jne .swap_record
  1932 00000E60 A2[1C02]            <1>         mov [ADDR_SBMK_DEFAULT_BOOT], al
  1933                              <1> 
  1934                              <1> .swap_record:
  1935 00000E63 881E[2344]          <1>         mov [FOCUS_RECORD], bl
  1936 00000E67 E83100              <1>         call main_swap_records
  1937                              <1> .end:
  1938 00000E6A C3                  <1>         ret
  1939                              <1> 
  1940                              <1> ;=============================================================================
  1941                              <1> ; move the boot record up
  1942                              <1> ;=============================================================================
  1943                              <1> main_move_record_up:
  1944 00000E6B 0FB61E[2344]        <1>         movzx bx, byte [FOCUS_RECORD]
  1945 00000E70 08DB                <1>         or bl, bl
  1946 00000E72 7426                <1>         jz .end
  1947 00000E74 8A87[A868]          <1>         mov al, [main_tmp.good_record_list + bx]
  1948 00000E78 FECB                <1>         dec bl
  1949 00000E7A 8AA7[A868]          <1>         mov ah, [main_tmp.good_record_list + bx]
  1950                              <1> 
  1951 00000E7E 3A06[1C02]          <1>         cmp al, [ADDR_SBMK_DEFAULT_BOOT]
  1952 00000E82 7506                <1>         jne .chknext
  1953 00000E84 8826[1C02]          <1>         mov [ADDR_SBMK_DEFAULT_BOOT], ah
  1954 00000E88 EB09                <1>         jmp short .swap_record
  1955                              <1> .chknext:
  1956 00000E8A 3A26[1C02]          <1>         cmp ah, [ADDR_SBMK_DEFAULT_BOOT]
  1957 00000E8E 7503                <1>         jne .swap_record
  1958 00000E90 A2[1C02]            <1>         mov [ADDR_SBMK_DEFAULT_BOOT], al
  1959                              <1> 
  1960                              <1> .swap_record:
  1961                              <1>   
  1962 00000E93 E80500              <1>         call main_swap_records
  1963 00000E96 881E[2344]          <1>         mov [FOCUS_RECORD],bl
  1964                              <1> .end:
  1965 00000E9A C3                  <1>         ret
  1966                              <1> 
  1967                              <1> ;=============================================================================
  1968                              <1> ; swap current and previous boot record
  1969                              <1> ;=============================================================================
  1970                              <1> main_swap_records:
  1971 00000E9B 60                  <1> 	pusha
  1972 00000E9C FE0E[2344]          <1>         dec byte [FOCUS_RECORD]
  1973 00000EA0 E8BA08              <1>         call main_get_focus_record_pointer
  1974 00000EA3 89F7                <1> 	mov di, si
  1975 00000EA5 FE06[2344]          <1> 	inc byte [FOCUS_RECORD]
  1976 00000EA9 E8B108              <1> 	call main_get_focus_record_pointer	; si -> current  di -> prev
  1977                              <1> 
  1978 00000EAC B94000              <1>         mov cx, SIZE_OF_BOOTRECORD
  1979                              <1> 
  1980                              <1> .loop_swap:
  1981 00000EAF 8A04                <1> 	mov al, [si]
  1982 00000EB1 8A1D                <1> 	mov bl, [di]
  1983 00000EB3 881C                <1> 	mov [si], bl
  1984 00000EB5 8805                <1> 	mov [di], al
  1985 00000EB7 46                  <1> 	inc si
  1986 00000EB8 47                  <1> 	inc di
  1987 00000EB9 E2F4                <1> 	loop .loop_swap
  1988 00000EBB 61                  <1> 	popa
  1989                              <1> 
  1990 00000EBC C3                  <1>         ret
  1991                              <1> 
  1992                              <1> ;=============================================================================
  1993                              <1> ;main_toggle_swapid ---- toggle the swap driver id flag 
  1994                              <1> ;=============================================================================
  1995                              <1> main_toggle_swapid:
  1996 00000EBD E89D08              <1> 	call main_get_focus_record_pointer
  1997 00000EC0 09F6                <1> 	or si, si
  1998 00000EC2 7416                <1> 	jz .end
  1999 00000EC4 F7041800            <1> 	test word [si + struc_bootrecord.flags], DRVFLAG_ISCDROM | INFOFLAG_ISSPECIAL
  2000 00000EC8 7510                <1> 	jnz .end
  2001                              <1> 
  2002 00000ECA E8A007              <1> 	call main_auth_record_action
  2003 00000ECD 720B                <1> 	jc .end
  2004                              <1> 
  2005 00000ECF 81340020            <1>         xor word [si + struc_bootrecord.flags], INFOFLAG_SWAPDRVID
  2006 00000ED3 E8BE1D              <1>         call check_bootrecord
  2007 00000ED6 FE06[CE68]          <1>         inc byte [main_tmp.change_occured]
  2008                              <1> .end:
  2009 00000EDA C3                  <1>         ret
  2010                              <1> 
  2011                              <1> ;=============================================================================
  2012                              <1> ;main_toggle_schedule ---- toggle the schedule of the bootrecord
  2013                              <1> ;=============================================================================
  2014                              <1> main_toggle_schedule:
  2015 00000EDB E87F08              <1>         call main_get_focus_record_pointer
  2016 00000EDE F7040080            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_SCHEDULED
  2017 00000EE2 7512                <1>         jnz .clear_schedule
  2018                              <1> 
  2019 00000EE4 56                  <1>         push si
  2020 00000EE5 E81700              <1>         call main_input_schedule_time
  2021 00000EE8 5E                  <1>         pop si
  2022 00000EE9 7213                <1>         jc .end
  2023                              <1> 
  2024 00000EEB 09D2                <1>         or dx, dx
  2025 00000EED 7502                <1>         jnz .set_schedule
  2026 00000EEF F7D2                <1>         not dx
  2027                              <1> 
  2028                              <1> .set_schedule:
  2029 00000EF1 E81822              <1>         call set_record_schedule
  2030 00000EF4 EB04                <1>         jmp short .end_ok
  2031                              <1> 
  2032                              <1> .clear_schedule:
  2033 00000EF6 8124FF7F            <1>         and word [si + struc_bootrecord.flags], ~INFOFLAG_SCHEDULED
  2034                              <1> 
  2035                              <1> .end_ok:
  2036 00000EFA FE06[CE68]          <1>         inc byte [main_tmp.change_occured]
  2037                              <1> .end:
  2038 00000EFE C3                  <1>         ret
  2039                              <1> 
  2040                              <1> ;=============================================================================
  2041                              <1> ;main_input_schedule_time ---- input the schedule time
  2042                              <1> ;input:
  2043                              <1> ;      none
  2044                              <1> ;output:
  2045                              <1> ;      cf = 0 success, 
  2046                              <1> ;           ax = begin time (in minutes)
  2047                              <1> ;           bx = end time (in minutes)
  2048                              <1> ;           dx = days info (bit 0 to bit 7 indicate Mon to Sun)
  2049                              <1> ;      cf = 1 cancel
  2050                              <1> ;=============================================================================
  2051                              <1> main_input_schedule_time:
  2052 00000EFF 60                  <1>         pusha
  2053                              <1> 
  2054 00000F00 31C0                <1>         xor ax, ax
  2055 00000F02 B90400              <1> 	mov cx, 4
  2056 00000F05 FC                  <1> 	cld
  2057 00000F06 BF[D268]            <1> 	mov di, main_tmp.schedule_begin
  2058 00000F09 F3AB                <1> 	rep stosw
  2059                              <1> 
  2060 00000F0B A0[2046]            <1>         mov al, [color.input_box_msg]
  2061 00000F0E 8B1E[1E46]          <1>         mov bx, [color.input_box_frame]
  2062 00000F12 B91313              <1>         mov cx, 0x1313
  2063 00000F15 31D2                <1> 	xor dx, dx
  2064 00000F17 8B36[7246]          <1>         mov si, [str_idx.input_schedule]
  2065 00000F1B BF[5771]            <1>         mov di, main_tmp.dialog_buf
  2066 00000F1E C60500              <1> 	mov byte [di], 0 
  2067                              <1>         
  2068 00000F21 E8E20F              <1>         call input_box
  2069 00000F24 724C                <1>         jc .exit
  2070                              <1> 
  2071                              <1> ;convert begin time
  2072 00000F26 89FE                <1>         mov si, di
  2073 00000F28 E85400              <1> 	call main_str_to_schtime
  2074 00000F2B 723D                <1> 	jc .invalid_input
  2075 00000F2D A3[D268]            <1>         mov [main_tmp.schedule_begin], ax
  2076                              <1> 
  2077                              <1> ;convert end time
  2078 00000F30 AC                  <1> 	lodsb
  2079 00000F31 3C2D                <1> 	cmp al,'-'
  2080 00000F33 7535                <1> 	jne .invalid_input
  2081                              <1> 
  2082 00000F35 E84700              <1> 	call main_str_to_schtime
  2083 00000F38 7230                <1> 	jc .invalid_input
  2084 00000F3A A3[D468]            <1>         mov [main_tmp.schedule_end], ax
  2085                              <1> 
  2086                              <1> ;convert day info
  2087 00000F3D AC                  <1>         lodsb
  2088 00000F3E 08C0                <1>         or al, al
  2089 00000F40 7425                <1>         jz .end
  2090                              <1> 
  2091 00000F42 3C3B                <1>         cmp al, ';'
  2092 00000F44 7524                <1>         jne .invalid_input
  2093                              <1> 
  2094 00000F46 B90700              <1>         mov cx, 7
  2095 00000F49 31D2                <1>         xor dx, dx
  2096                              <1> 
  2097                              <1> .loop_get_days:
  2098 00000F4B AC                  <1>         lodsb
  2099 00000F4C 08C0                <1>         or al, al
  2100 00000F4E 7413                <1>         jz .end_get_days
  2101 00000F50 2C30                <1>         sub al, '0'
  2102 00000F52 3C07                <1>         cmp al, 7
  2103 00000F54 7314                <1>         jae .invalid_input
  2104 00000F56 BB0100              <1>         mov bx, 1
  2105 00000F59 51                  <1>         push cx
  2106 00000F5A 88C1                <1>         mov cl, al
  2107 00000F5C D3E3                <1>         shl bx, cl
  2108 00000F5E 59                  <1>         pop cx
  2109 00000F5F 09DA                <1>         or dx, bx
  2110 00000F61 E2E8                <1>         loop .loop_get_days
  2111                              <1> 
  2112                              <1> .end_get_days:
  2113 00000F63 8916[D668]          <1>         mov [main_tmp.schedule_day], dx
  2114                              <1> 
  2115                              <1> .end:
  2116 00000F67 F8                  <1> 	clc
  2117 00000F68 EB08                <1> 	jmp short .exit
  2118                              <1> 
  2119                              <1> .invalid_input:
  2120 00000F6A 8B36[B446]          <1>         mov si, [str_idx.invalid_schedule]
  2121 00000F6E E8B50D              <1>         call error_box
  2122 00000F71 F9                  <1>         stc
  2123                              <1> .exit:
  2124 00000F72 61                  <1>         popa
  2125 00000F73 A1[D268]            <1>         mov ax, [main_tmp.schedule_begin]
  2126 00000F76 8B1E[D468]          <1>         mov bx, [main_tmp.schedule_end]
  2127 00000F7A 8B16[D668]          <1>         mov dx, [main_tmp.schedule_day]
  2128 00000F7E C3                  <1>         ret
  2129                              <1> 
  2130                              <1> 
  2131                              <1> ;=============================================================================
  2132                              <1> ;input ds:si -> string
  2133                              <1> ;output cf =0 ok, ax = time in minutes
  2134                              <1> ;       cf =1 fail
  2135                              <1> ;=============================================================================
  2136                              <1> main_str_to_schtime:
  2137 00000F7F 31DB                <1> 	xor bx, bx
  2138 00000F81 31C9                <1> 	xor cx, cx
  2139                              <1> 
  2140 00000F83 E89517              <1>         call atoi
  2141 00000F86 3C18                <1>         cmp al, 24                          ; hh must be less than 24
  2142 00000F88 771D                <1>         ja .fail
  2143                              <1> 
  2144 00000F8A 88C3                <1>         mov bl, al
  2145 00000F8C AC                  <1> 	lodsb
  2146 00000F8D 3C3A                <1> 	cmp al, ':'
  2147 00000F8F 7516                <1> 	jne .fail
  2148                              <1> 
  2149 00000F91 E88717              <1>         call atoi
  2150 00000F94 3C3C                <1>         cmp al, 60                          ; mm must be less than 60
  2151 00000F96 730F                <1>         jae .fail
  2152 00000F98 88C1                <1>         mov cl, al
  2153                              <1> 
  2154 00000F9A B03C                <1>         mov al, 60
  2155 00000F9C F6E3                <1>         mul bl
  2156 00000F9E 01C8                <1>         add ax, cx
  2157 00000FA0 3DA005              <1>         cmp ax, 24*60                       ; begin time must be no more than
  2158 00000FA3 7702                <1>         ja .fail                            ; 24*60 minutes
  2159 00000FA5 F8                  <1> 	clc
  2160 00000FA6 C3                  <1> 	ret
  2161                              <1> .fail:
  2162 00000FA7 F9                  <1> 	stc
  2163 00000FA8 C3                  <1> 	ret
  2164                              <1> 
  2165                              <1> ;=============================================================================
  2166                              <1> ;main_toggle_keystrokes ---- toggle the keystrokes switch of the bootrecord
  2167                              <1> ;=============================================================================
  2168                              <1> main_toggle_keystrokes:
  2169                              <1> 
  2170 00000FA9 E8B107              <1>         call main_get_focus_record_pointer
  2171 00000FAC F7040040            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_HAVEKEYS
  2172 00000FB0 7406                <1>         jz .input_keys
  2173                              <1> 
  2174 00000FB2 8124FFBF            <1>         and word [si + struc_bootrecord.flags], ~INFOFLAG_HAVEKEYS
  2175 00000FB6 EB12                <1>         jmp short .end_ok
  2176                              <1> 
  2177                              <1> .input_keys:
  2178 00000FB8 8D7C26              <1>         lea di, [si + struc_bootrecord.keystrokes]
  2179 00000FBB B10D                <1>         mov cl, MAX_KEYSTROKES
  2180 00000FBD 56                  <1>         push si
  2181 00000FBE E89800              <1>         call main_input_keystrokes
  2182 00000FC1 5E                  <1>         pop si
  2183 00000FC2 08ED                <1>         or ch, ch
  2184 00000FC4 7408                <1>         jz .end
  2185                              <1> 
  2186 00000FC6 810C0040            <1>         or word [si + struc_bootrecord.flags], INFOFLAG_HAVEKEYS
  2187                              <1> 
  2188                              <1> .end_ok:
  2189 00000FCA FE06[CE68]          <1>         inc byte [main_tmp.change_occured]
  2190                              <1> .end:
  2191 00000FCE C3                  <1>         ret
  2192                              <1> 
  2193                              <1> ;=============================================================================
  2194                              <1> ; main_ikbox_event_handle ---- event handle for Input keystroke box
  2195                              <1> ;=============================================================================
  2196                              <1> main_ikbox_event_handle:
  2197 00000FCF 80FCF0              <1>         cmp ah, EVTCODE_COMMAND
  2198 00000FD2 720A                <1>         jb .normal_key
  2199                              <1> 
  2200 00000FD4 3D10F2              <1>         cmp ax, EVENT_SCROLL_OFF
  2201 00000FD7 7524                <1>         jne .end
  2202                              <1> 
  2203 00000FD9 E81414              <1>         call window_close
  2204 00000FDC F8                  <1>         clc
  2205 00000FDD C3                  <1>         ret
  2206                              <1> 
  2207                              <1> .normal_key:
  2208 00000FDE FC                  <1>         cld
  2209 00000FDF 8B3E[D868]          <1>         mov di, [main_tmp.keystroke_ptr]
  2210 00000FE3 0FB60E[DA68]        <1>         movzx cx, [main_tmp.keystroke_num]
  2211 00000FE8 3A0E[DB68]          <1>         cmp cl, [main_tmp.keystroke_max]
  2212 00000FEC 730F                <1>         jae .end
  2213                              <1> 
  2214 00000FEE D1E1                <1>         shl cx, 1
  2215 00000FF0 01CF                <1>         add di, cx
  2216 00000FF2 AB                  <1>         stosw
  2217                              <1> 
  2218 00000FF3 FE06[DA68]          <1>         inc byte [main_tmp.keystroke_num]
  2219 00000FF7 E80500              <1>         call main_ikbox_prepare
  2220 00000FFA E8E911              <1>         call window_draw_body
  2221                              <1> .end:
  2222 00000FFD F8                  <1>         clc
  2223 00000FFE C3                  <1>         ret
  2224                              <1> 
  2225                              <1> ;=============================================================================
  2226                              <1> ;main_ikbox_prepare
  2227                              <1> ;input:
  2228                              <1> ;       ds:si -> the message_box struc
  2229                              <1> ;=============================================================================
  2230                              <1> main_ikbox_prepare:
  2231 00000FFF C74416[CF0F]        <1>         mov word [si + struc_window.event_handle],main_ikbox_event_handle
  2232 00001004 31C0                <1> 	xor ax, ax
  2233                              <1> 
  2234 00001006 56                  <1>         push si
  2235 00001007 8B7C1A              <1>         mov di, [si + struc_message_box.message]
  2236 0000100A 8B36[7446]          <1>         mov si, [str_idx.input_keystrokes]
  2237 0000100E 57                  <1>         push di
  2238                              <1> 
  2239 0000100F E88617              <1>         call strcpy
  2240 00001012 57                  <1>         push di
  2241 00001013 0FB60E[DA68]        <1>         movzx cx, byte [main_tmp.keystroke_num]
  2242                              <1> 
  2243 00001018 D1E1                <1>         shl cx,1
  2244 0000101A 8B3E[D868]          <1>         mov di, [main_tmp.keystroke_ptr]
  2245 0000101E 01CF                <1>         add di, cx
  2246 00001020 09C9                <1> 	or cx, cx
  2247 00001022 7403                <1> 	jz .first_prepare
  2248 00001024 83EF02              <1> 	sub di, 2
  2249                              <1> .first_prepare:
  2250 00001027 8B05                <1> 	mov ax, [di]
  2251                              <1> 
  2252 00001029 5F                  <1>         pop di
  2253 0000102A 51                  <1>         push cx
  2254                              <1>         
  2255 0000102B B104                <1>         mov cl, 4
  2256 0000102D E89817              <1>         call htoa                          ; fill in the key code string
  2257 00001030 83C704              <1>         add di, 4
  2258                              <1> 
  2259 00001033 8B36[7646]          <1>         mov si, [str_idx.key_count]
  2260 00001037 E85E17              <1>         call strcpy
  2261                              <1> 
  2262 0000103A 59                  <1>         pop cx
  2263 0000103B D1E9                <1>         shr cx, 1
  2264 0000103D 0FB6C1              <1>         movzx ax, cl
  2265 00001040 B102                <1>         mov cl, 2
  2266 00001042 E8AC16              <1>         call itoa                          ; fill in the key cound string
  2267                              <1> 
  2268 00001045 5E                  <1>         pop si
  2269                              <1> 
  2270 00001046 E8C217              <1> 	call count_lines
  2271                              <1> 
  2272 00001049 020E[0146]          <1> 	add cl, [size.box_width]
  2273 0000104D 022E[0246]          <1> 	add ch, [size.box_height]
  2274                              <1> 
  2275 00001051 5E                  <1>         pop si
  2276 00001052 894C08              <1> 	mov [si + struc_window.win_size], cx
  2277 00001055 E80914              <1> 	call window_center_window
  2278 00001058 C3                  <1>         ret
  2279                              <1> 
  2280                              <1> 
  2281                              <1> ;=============================================================================
  2282                              <1> ;main_input_keystrokes ---- input a set of key strokes
  2283                              <1> ;input:
  2284                              <1> ;      cl = max key strokes number
  2285                              <1> ;      es:di -> the buffer
  2286                              <1> ;output:
  2287                              <1> ;      es:di -> the buffer filled by key strokes
  2288                              <1> ;      ch = number of key strokes that inputed
  2289                              <1> ;=============================================================================
  2290                              <1> main_input_keystrokes:
  2291 00001059 57                  <1>         push di
  2292                              <1> 
  2293 0000105A 31C0                <1>         xor ax, ax
  2294 0000105C 893E[D868]          <1>         mov [main_tmp.keystroke_ptr], di
  2295 00001060 880E[DB68]          <1>         mov [main_tmp.keystroke_max], cl
  2296 00001064 A2[DA68]            <1>         mov [main_tmp.keystroke_num], al
  2297 00001067 8905                <1>         mov [di], ax
  2298                              <1> 
  2299 00001069 A0[2046]            <1>         mov al, [color.input_box_msg]
  2300 0000106C 8B1E[1E46]          <1>         mov bx, [color.input_box]
  2301 00001070 BA[6246]            <1>         mov dx, str_idx.input
  2302 00001073 BE[5771]            <1>         mov si, main_tmp.dialog_buf
  2303 00001076 BF[DC68]            <1>         mov di, main_tmp.ikbox
  2304                              <1> 
  2305 00001079 8824                <1>         mov [si], ah
  2306 0000107B E8540C              <1>         call msgbox_prepare
  2307 0000107E 89FE                <1>         mov si, di
  2308 00001080 E87CFF              <1>         call main_ikbox_prepare
  2309                              <1> 
  2310 00001083 E8D50B              <1>         call turnon_scrolllock
  2311 00001086 E80F13              <1>         call window_run
  2312 00001089 E8DD0B              <1>         call turnoff_scrolllock
  2313                              <1> 
  2314 0000108C 8A2E[DA68]          <1>         mov ch, [main_tmp.keystroke_num]
  2315 00001090 5F                  <1>         pop di
  2316 00001091 C3                  <1>         ret
  2317                              <1> 
  2318                              <1> ;=============================================================================
  2319                              <1> ;main_show_record_info ---- show the information of the boot record
  2320                              <1> ;=============================================================================
  2321                              <1> main_show_record_info:
  2322 00001092 E8C806              <1>         call main_get_focus_record_pointer
  2323 00001095 BF[5771]            <1>         mov di, main_tmp.dialog_buf
  2324                              <1> 
  2325 00001098 E8B020              <1>         call get_record_schedule
  2326 0000109B 52                  <1>         push dx
  2327 0000109C 53                  <1>         push bx
  2328 0000109D 50                  <1>         push ax
  2329                              <1> 
  2330 0000109E 66FF740E            <1>         push dword [si + struc_bootrecord.password]
  2331                              <1> 
  2332 000010A2 8B1C                <1>         mov bx, [si + struc_bootrecord.flags]
  2333 000010A4 8B4402              <1>         mov ax, [si + struc_bootrecord.drive_id]
  2334                              <1> 
  2335 000010A7 89F2                <1>         mov dx, si
  2336 000010A9 83C616              <1>         add si, struc_bootrecord.name
  2337 000010AC 56                  <1>         push si                               ; save record name pointer
  2338 000010AD 52                  <1>         push dx                               ; save record pointer
  2339 000010AE 50                  <1>         push ax                               ; save drive_id and part_id
  2340                              <1> 
  2341                              <1> ;write drive id
  2342 000010AF 8B36[7C46]          <1>         mov si, [str_idx.drive_id]
  2343 000010B3 E8E216              <1>         call strcpy
  2344                              <1> 
  2345 000010B6 F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  2346 000010BA 7407                <1> 	jz .drvid_ok
  2347                              <1> 
  2348 000010BC B02D                <1> 	mov al, '-'
  2349 000010BE AA                  <1> 	stosb
  2350 000010BF AA                  <1> 	stosb
  2351 000010C0 AA                  <1> 	stosb
  2352 000010C1 EB05                <1> 	jmp short .write_partid
  2353                              <1> 
  2354                              <1> .drvid_ok:
  2355 000010C3 88C2                <1> 	mov dl, al
  2356 000010C5 E8E126              <1> 	call get_drvid_str
  2357                              <1> 
  2358                              <1> .write_partid:
  2359                              <1> ;write part id
  2360 000010C8 8B36[7E46]          <1>         mov si, [str_idx.part_id]
  2361 000010CC E8C916              <1>         call strcpy
  2362                              <1> 
  2363 000010CF 58                  <1>         pop ax                          ; ax = drive id, partition id
  2364 000010D0 F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  2365 000010D4 7406                <1> 	jz .partid_ok
  2366 000010D6 B02D                <1> 	mov al, '-'
  2367 000010D8 AA                  <1> 	stosb
  2368 000010D9 AA                  <1> 	stosb
  2369 000010DA EB0B                <1> 	jmp short .write_rectype
  2370                              <1> 
  2371                              <1> .partid_ok:
  2372 000010DC 0FB6C4              <1>         movzx ax, ah
  2373 000010DF B90200              <1>         mov cx, 2
  2374 000010E2 E80C16              <1>         call itoa
  2375 000010E5 01CF                <1>         add di, cx
  2376                              <1> 
  2377                              <1> .write_rectype:
  2378                              <1> ;write record type
  2379 000010E7 8B36[8046]          <1>         mov si, [str_idx.record_type]
  2380 000010EB E8AA16              <1>         call strcpy
  2381                              <1> 
  2382 000010EE 89FE                <1>         mov si, di
  2383 000010F0 E84C16              <1>         call strlen
  2384                              <1> 
  2385 000010F3 89C8                <1>         mov ax, cx
  2386 000010F5 5E                  <1>         pop si                          ; si -> record pointer
  2387 000010F6 E8301E              <1>         call get_record_typestr
  2388 000010F9 89FE                <1>         mov si, di
  2389 000010FB E84116              <1>         call strlen
  2390 000010FE 29C1                <1>         sub cx, ax
  2391 00001100 01CF                <1>         add di, cx
  2392                              <1> 
  2393                              <1> ;write record name 
  2394 00001102 8B36[8246]          <1>         mov si, [str_idx.record_name]
  2395 00001106 E88F16              <1>         call strcpy
  2396 00001109 5E                  <1>         pop si
  2397 0000110A E88B16              <1>         call strcpy
  2398                              <1> 
  2399                              <1> ;write flags
  2400 0000110D B90700              <1> 	mov cx, 7
  2401 00001110 89DA                <1> 	mov dx, bx
  2402 00001112 31DB                <1> 	xor bx, bx
  2403                              <1> .loop_copy_flags:
  2404 00001114 8BB7[8446]          <1> 	mov si, [str_idx.auto_active + bx]
  2405 00001118 8B87[7811]          <1> 	mov ax, [.flag_val + bx]
  2406 0000111C E84400              <1> 	call .copy_flag_stat
  2407 0000111F 43                  <1> 	inc bx
  2408 00001120 43                  <1> 	inc bx
  2409 00001121 E2F1                <1> 	loop .loop_copy_flags
  2410                              <1> 
  2411                              <1> ;write password flag
  2412 00001123 8B36[9246]          <1>         mov si, [str_idx.password]
  2413 00001127 E86E16              <1>         call strcpy
  2414 0000112A 6659                <1>         pop ecx
  2415 0000112C 6609C9              <1>         or ecx, ecx
  2416 0000112F 7406                <1>         jz .no_pswd
  2417 00001131 8B36[9646]          <1>         mov si, [str_idx.yes]
  2418 00001135 EB04                <1>         jmp short .pswd
  2419                              <1> .no_pswd:
  2420 00001137 8B36[9846]          <1>         mov si, [str_idx.no]
  2421                              <1> .pswd:
  2422 0000113B E85A16              <1>         call strcpy
  2423                              <1> 
  2424                              <1> ;write schedule time
  2425 0000113E 8B36[9446]          <1>         mov si, [str_idx.schedule]
  2426 00001142 E85316              <1>         call strcpy
  2427 00001145 89D1                <1>         mov cx, dx
  2428                              <1> 
  2429 00001147 58                  <1>         pop ax
  2430 00001148 5B                  <1>         pop bx
  2431 00001149 5A                  <1>         pop dx
  2432                              <1> 
  2433 0000114A F7C10080            <1>         test cx, INFOFLAG_SCHEDULED
  2434 0000114E 7405                <1>         jz .no_sched
  2435 00001150 E82220              <1>         call schedule_to_str
  2436 00001153 EB07                <1>         jmp short .show_info
  2437                              <1> 
  2438                              <1> .no_sched:
  2439 00001155 8B36[9846]          <1>         mov si, [str_idx.no]
  2440 00001159 E83C16              <1>         call strcpy
  2441                              <1> 
  2442                              <1> .show_info:
  2443 0000115C BE[5771]            <1>         mov si, main_tmp.dialog_buf
  2444 0000115F E8D60B              <1>         call info_box
  2445                              <1> .end:
  2446 00001162 C3                  <1>         ret
  2447                              <1> 
  2448                              <1> ; si -> flag string
  2449                              <1> ; ax = flag
  2450                              <1> .copy_flag_stat:
  2451 00001163 E83216              <1> 	call strcpy
  2452 00001166 85C2                <1>         test dx, ax
  2453 00001168 7406                <1>         jz .no_this_flag
  2454 0000116A 8B36[9646]          <1>         mov si, [str_idx.yes] 
  2455 0000116E EB04                <1>         jmp short .copy_flag
  2456                              <1> .no_this_flag:
  2457 00001170 8B36[9846]          <1>         mov si, [str_idx.no]
  2458                              <1> .copy_flag:
  2459 00001174 E82116              <1>         call strcpy
  2460 00001177 C3                  <1> 	ret
  2461                              <1> 
  2462 00001178 001000080004000200- <1> .flag_val	dw INFOFLAG_AUTOACTIVE, INFOFLAG_ACTIVE, INFOFLAG_AUTOHIDE, INFOFLAG_HIDDEN, INFOFLAG_SWAPDRVID
  2463 00001181 20                  <1>
  2464 00001182 00010040            <1> 		dw INFOFLAG_LOGICAL, INFOFLAG_HAVEKEYS
  2465                              <1> 
  2466                              <1>        
  2467                              <1> ;=============================================================================
  2468                              <1> ;main_power_off ---- turn of the power
  2469                              <1> ;=============================================================================
  2470                              <1> main_power_off:
  2471 00001186 E9B516              <1>         jmp power_off
  2472                              <1> 
  2473                              <1> 
  2474                              <1> ;=============================================================================
  2475                              <1> ;main_change_bootmenu_style ---- change the boot menu's draw style
  2476                              <1> ;=============================================================================
  2477                              <1> main_change_bootmenu_style:
  2478 00001189 A0[2102]            <1> 	mov al, [ADDR_SBMK_BOOTMENU_STYLE]
  2479 0000118C FEC0                <1> 	inc al
  2480 0000118E 3C04                <1> 	cmp al, 4
  2481 00001190 7202                <1> 	jb .ok
  2482 00001192 30C0                <1> 	xor al, al
  2483                              <1> 
  2484                              <1> .ok:
  2485 00001194 A2[2102]            <1> 	mov [ADDR_SBMK_BOOTMENU_STYLE], al
  2486 00001197 E85201              <1> 	call main_init_boot_menu
  2487                              <1> 
  2488 0000119A FE06[CE68]          <1>         inc byte [main_tmp.change_occured]
  2489 0000119E C3                  <1>         ret
  2490                              <1> 
  2491                              <1> ;=============================================================================
  2492                              <1> ;main_toggle_rem_last ---- toggle the remember last switch.
  2493                              <1> ;=============================================================================
  2494                              <1> main_toggle_rem_last:
  2495 0000119F 8036[1902]10        <1>         xor byte [ADDR_SBMK_FLAGS], KNLFLAG_REMLAST
  2496 000011A4 FE06[CE68]          <1>         inc byte [main_tmp.change_occured]
  2497 000011A8 C3                  <1>         ret
  2498                              <1> 
  2499                              <1> 
  2500                              <1> ;=============================================================================
  2501                              <1> ;main_boot_prev_in_menu ---- boot previous MBR in command menu
  2502                              <1> ;=============================================================================
  2503                              <1> main_boot_prev_in_menu:
  2504 000011A9 E86822              <1> 	call check_prev_mbr
  2505 000011AC 7208                <1> 	jc .end
  2506                              <1> 
  2507 000011AE E8F404              <1>         call main_confirm_root_passwd
  2508 000011B1 7203                <1>         jc .end
  2509                              <1> 
  2510 000011B3 E85F07              <1> 	call main_boot_prev_mbr
  2511                              <1> .end:
  2512 000011B6 C3                  <1> 	ret
  2513                              <1> 
  2514                              <1> 
  2515                              <1> ;=============================================================================
  2516                              <1> ; main_toggle_int13ext
  2517                              <1> ;=============================================================================
  2518                              <1> main_toggle_int13ext:
  2519 000011B7 A0[1902]            <1>         mov al, [ADDR_SBMK_FLAGS]
  2520 000011BA 3404                <1>         xor al, KNLFLAG_NOINT13EXT
  2521 000011BC A2[1902]            <1>         mov [ADDR_SBMK_FLAGS], al
  2522                              <1> 
  2523 000011BF A804                <1>         test al, KNLFLAG_NOINT13EXT
  2524 000011C1 7507                <1>         jnz .no_int13ext
  2525 000011C3 C606[B737]01        <1>         mov byte [use_int13_ext], 1
  2526 000011C8 EB05                <1>         jmp short .endok
  2527                              <1> 
  2528                              <1> .no_int13ext:
  2529 000011CA C606[B737]00        <1>         mov byte [use_int13_ext], 0
  2530                              <1> .endok:
  2531 000011CF FE06[CE68]          <1>         inc byte [main_tmp.change_occured]
  2532 000011D3 C3                  <1>         ret
  2533                              <1> 
  2534                              <1> ;=============================================================================
  2535                              <1> ; main_set_cdrom_ioports
  2536                              <1> ;=============================================================================
  2537                              <1> 
  2538                              <1> main_set_cdrom_ioports:
  2539                              <1> %ifndef DISABLE_CDBOOT
  2540 000011D4 F606[1902]08        <1> 	test byte [ADDR_SBMK_FLAGS], KNLFLAG_NOCDROM
  2541 000011D9 756E                <1> 	jnz .end
  2542                              <1> 
  2543 000011DB E8C704              <1>         call main_confirm_root_passwd
  2544 000011DE 7269                <1>         jc .end
  2545                              <1> 
  2546 000011E0 8D3E[5771]          <1>         lea di, [main_tmp.dialog_buf]
  2547 000011E4 57                  <1> 	push di
  2548 000011E5 C60500              <1> 	mov byte [di], 0 
  2549 000011E8 A1[2302]            <1> 	mov ax, [ADDR_SBMK_CDROM_IOPORTS]
  2550 000011EB 09C0                <1> 	or ax, ax
  2551 000011ED 7411                <1> 	jz .no_ports
  2552 000011EF B104                <1> 	mov cl, 4
  2553 000011F1 E8D415              <1> 	call htoa
  2554 000011F4 83C704              <1> 	add di, 4
  2555 000011F7 B02C                <1> 	mov al, ','
  2556 000011F9 AA                  <1> 	stosb
  2557 000011FA A1[2502]            <1> 	mov ax, [ADDR_SBMK_CDROM_IOPORTS+2]
  2558 000011FD E8C815              <1> 	call htoa
  2559                              <1> .no_ports:
  2560 00001200 5F                  <1> 	pop di
  2561                              <1> 
  2562 00001201 0FB606[2046]        <1>         movzx ax, [color.input_box_msg]
  2563 00001206 8B1E[1E46]          <1>         mov bx, [color.input_box]
  2564 0000120A B90909              <1>         mov cx, 0x0909
  2565 0000120D 31D2                <1>         xor dx, dx
  2566 0000120F 8B36[7846]          <1>         mov si, [str_idx.io_port]
  2567                              <1> 	
  2568 00001213 E8F00C              <1>         call input_box
  2569 00001216 7231                <1>         jc .end
  2570                              <1> 
  2571 00001218 89FE                <1>         mov si, di
  2572 0000121A E8C615              <1> 	call atoh
  2573 0000121D 803C2C              <1> 	cmp byte [si], ','
  2574 00001220 751E                <1> 	jne .invalid
  2575 00001222 89C3                <1> 	mov bx, ax
  2576 00001224 46                  <1> 	inc si
  2577 00001225 E8BB15              <1> 	call atoh
  2578 00001228 803C00              <1> 	cmp byte [si], 0
  2579 0000122B 7513                <1> 	jne .invalid
  2580                              <1> 
  2581 0000122D 89C1                <1> 	mov cx, ax
  2582 0000122F 891E[2302]          <1> 	mov [ADDR_SBMK_CDROM_IOPORTS], bx
  2583 00001233 890E[2502]          <1> 	mov [ADDR_SBMK_CDROM_IOPORTS+2], cx
  2584                              <1> 
  2585 00001237 FE06[CE68]          <1>         inc byte [main_tmp.change_occured]               ; some changes occured.
  2586 0000123B E8E825              <1> 	call set_io_ports
  2587 0000123E EB09                <1> 	jmp short .end
  2588                              <1> 
  2589                              <1> .invalid:
  2590 00001240 8B36[C646]          <1> 	mov si, [str_idx.invalid_ioports]
  2591 00001244 E8DF0A              <1> 	call error_box
  2592 00001247 EB00                <1> 	jmp .end
  2593                              <1> .end:
  2594                              <1> %endif
  2595 00001249 C3                  <1>         ret
  2596                              <1> 
  2597                              <1> ;=============================================================================
  2598                              <1> ;main_set_y2k_year
  2599                              <1> ;=============================================================================
  2600                              <1> 
  2601                              <1> main_set_y2k_year:
  2602                              <1> %ifdef Y2K_BUGFIX
  2603                              <1>         lea di, [main_tmp.dialog_buf]
  2604                              <1> 	mov byte [di], 0 
  2605                              <1> 	mov cl,4
  2606                              <1> 	mov ax,[ADDR_SBMK_Y2K_LAST_YEAR]
  2607                              <1> 	or ax,ax
  2608                              <1> 	jz .nofix
  2609                              <1> 	call bcd_to_str
  2610                              <1> .nofix:
  2611                              <1>         movzx ax, [color.input_box_msg]
  2612                              <1>         mov bx, [color.input_box]
  2613                              <1>         mov si, [str_idx.year]
  2614                              <1>         mov ch, cl
  2615                              <1> 	xor dx, dx
  2616                              <1> 
  2617                              <1>         call input_box
  2618                              <1>         jc .end
  2619                              <1> 
  2620                              <1> 	xor bx,bx
  2621                              <1> 	or ch,ch
  2622                              <1> 	jz .set
  2623                              <1> 
  2624                              <1>         mov si,di
  2625                              <1> .loop:
  2626                              <1> 	shl bx,cl
  2627                              <1> 	lodsb
  2628                              <1> 	sub al,'0'
  2629                              <1> 	or bl,al
  2630                              <1> 	dec ch
  2631                              <1> 	jnz .loop
  2632                              <1> 
  2633                              <1> 	mov ah,4
  2634                              <1> 	int 0x1a
  2635                              <1> 	jc .end
  2636                              <1> 
  2637                              <1> 	mov cx,bx
  2638                              <1> 	mov ah,5
  2639                              <1> 	int 0x1a
  2640                              <1> .set:
  2641                              <1> 	mov [ADDR_SBMK_Y2K_LAST_YEAR],bx
  2642                              <1>         inc byte [main_tmp.change_occured]               ; some changes occured.
  2643                              <1> .end:
  2644                              <1> %endif
  2645 0000124A C3                  <1>         ret
  2646                              <1> 
  2647                                  %include "main-utils.asm"
  2648                              <1> ; asmsyntax=nasm
  2649                              <1> ;
  2650                              <1> ; main-utils.asm
  2651                              <1> ;
  2652                              <1> ; utility functions for main program
  2653                              <1> ;
  2654                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
  2655                              <1> ;
  2656                              <1> 
  2657                              <1> 
  2658                              <1> ;=============================================================================
  2659                              <1> ; >>>>>>>>>>>>>>>>>>>>>>>>> Initialization Functions <<<<<<<<<<<<<<<<<<<<<<<<<
  2660                              <1> ;=============================================================================
  2661                              <1> 
  2662                              <1> ;=============================================================================
  2663                              <1> ; main_init_theme ---- initialize the theme data.
  2664                              <1> ;=============================================================================
  2665                              <1> main_init_theme:
  2666 0000124B 8B1E[3946]          <1>         mov bx, [icon.brand]
  2667 0000124F 09DB                <1>         or bx, bx
  2668 00001251 7406                <1>         jz .adjust_bkgnd                            ; no brand icon
  2669 00001253 8106[3946][E345]    <1>         add word [icon.brand], theme_start          ;
  2670                              <1> .adjust_bkgnd:
  2671 00001259 8B1E[3D46]          <1>         mov bx, [icon.background]
  2672 0000125D 09DB                <1>         or bx, bx
  2673 0000125F 7406                <1>         jz .adjust_font                             ; no background icon
  2674 00001261 8106[3D46][E345]    <1>         add word [icon.background], theme_start
  2675                              <1> .adjust_font:
  2676 00001267 8B1E[4146]          <1>         mov bx, [font.data]
  2677 0000126B 09DB                <1>         or bx, bx
  2678 0000126D 7406                <1>         jz .adjust_keymap
  2679 0000126F 8106[4146][E345]    <1>         add word [font.data], theme_start
  2680                              <1> .adjust_keymap:
  2681 00001275 8B1E[4E46]          <1>         mov bx, [keymap.data]
  2682 00001279 09DB                <1>         or bx, bx
  2683 0000127B 7406                <1>         jz .adjust_str
  2684 0000127D 8106[4E46][E345]    <1>         add word [keymap.data], theme_start
  2685                              <1> 
  2686                              <1> .adjust_str:
  2687 00001283 8D36[5046]          <1>         lea si, [str_idx]
  2688 00001287 B97800              <1>         mov cx, (end_of_str_idx - str_idx)/2
  2689                              <1>         
  2690                              <1> .loop_adjust:
  2691 0000128A 8B1C                <1>         mov bx, [si]
  2692 0000128C 81C3[E345]          <1>         add bx, theme_start
  2693 00001290 891C                <1>         mov [si], bx
  2694 00001292 83C602              <1>         add si, 2
  2695 00001295 E2F3                <1>         loop .loop_adjust
  2696                              <1> 
  2697 00001297 B010                <1>         mov al, 0x10
  2698 00001299 2006[F445]          <1>         and [keyboard_type], al
  2699                              <1> 
  2700 0000129D C3                  <1>         ret
  2701                              <1>         
  2702                              <1> ;=============================================================================
  2703                              <1> ; main_init_all_menus ---- initialize the menus
  2704                              <1> ;=============================================================================
  2705                              <1> main_init_all_menus:
  2706 0000129E BE[0E46]            <1>         mov si, color.cmd_menu
  2707                              <1> ;initialize main menu
  2708 000012A1 BF[2744]            <1>         mov di, main_windows_data.main_menu
  2709 000012A4 E82800              <1>         call main_init_menu
  2710 000012A7 A1[2902]            <1> 	mov ax, [ADDR_SBMK_MAIN_MENU_POS]
  2711 000012AA A3[2D44]            <1> 	mov [main_windows_data.main_menu + struc_window.win_pos], ax
  2712                              <1> ;initialize record menu
  2713 000012AD BF[5244]            <1>         mov di, main_windows_data.record_menu
  2714 000012B0 E81C00              <1>         call main_init_menu
  2715 000012B3 A1[2B02]            <1> 	mov ax, [ADDR_SBMK_RECORD_MENU_POS]
  2716 000012B6 A3[5844]            <1> 	mov [main_windows_data.record_menu + struc_window.win_pos], ax
  2717                              <1> ;initialize system menu
  2718 000012B9 BF[7D44]            <1>         mov di, main_windows_data.sys_menu
  2719 000012BC E81000              <1>         call main_init_menu
  2720 000012BF A1[2D02]            <1> 	mov ax, [ADDR_SBMK_SYS_MENU_POS]
  2721 000012C2 A3[8344]            <1> 	mov [main_windows_data.sys_menu + struc_window.win_pos], ax
  2722                              <1> ;initialize boot menu
  2723 000012C5 A1[2702]            <1> 	mov ax, [ADDR_SBMK_BOOT_MENU_POS]
  2724 000012C8 A3[0244]            <1> 	mov [main_windows_data.boot_menu + struc_window.win_pos], ax
  2725 000012CB E81E00              <1>         call main_init_boot_menu
  2726 000012CE C3                  <1>         ret
  2727                              <1> 
  2728                              <1> ;=============================================================================
  2729                              <1> ; main_init_menu
  2730                              <1> ;input:
  2731                              <1> ;       ds:si -> colors
  2732                              <1> ;       ds:di -> struc_menu_box
  2733                              <1> ;=============================================================================
  2734                              <1> main_init_menu:
  2735 000012CF 56                  <1>         push si
  2736 000012D0 FC                  <1>         cld
  2737 000012D1 AD                  <1>         lodsw
  2738 000012D2 894504              <1>         mov [di + struc_window.win_attr], ax
  2739 000012D5 AC                  <1>         lodsb
  2740 000012D6 88451C              <1>         mov [di + struc_menu_box.menu_header_attr], al
  2741 000012D9 AD                  <1>         lodsw
  2742 000012DA 89451D              <1>         mov [di + struc_menu_box.menu_norm_attr], ax
  2743 000012DD AD                  <1>         lodsw
  2744 000012DE 89451F              <1>         mov [di + struc_menu_box.menu_focus_attr], ax
  2745 000012E1 AC                  <1>         lodsb
  2746 000012E2 884525              <1>         mov [di + struc_menu_box.scrollbar_attr], al
  2747 000012E5 89FE                <1>         mov si, di
  2748 000012E7 E8850C              <1>         call menubox_adjust_geometry
  2749 000012EA 5E                  <1>         pop si
  2750 000012EB C3                  <1>         ret
  2751                              <1> 
  2752                              <1> ;=============================================================================
  2753                              <1> ; main_init_boot_menu
  2754                              <1> ;=============================================================================
  2755                              <1> main_init_boot_menu:
  2756 000012EC 60                  <1>         pusha
  2757                              <1> ;initialize boot menu
  2758 000012ED BF[FC43]            <1>         mov di, main_windows_data.boot_menu
  2759 000012F0 A0[0346]            <1>         mov al, [size.boot_menu_win_height]
  2760 000012F3 884509              <1>         mov [di + struc_window.win_size + 1], al        ; set boot menu height
  2761                              <1> 
  2762                              <1> ;set boot menu header
  2763 000012F6 0FB606[2102]        <1>         movzx ax, byte [ADDR_SBMK_BOOTMENU_STYLE]
  2764 000012FB BB[5246]            <1>         mov bx, str_idx.boot_menu_header
  2765 000012FE 3C03                <1>         cmp al, 3
  2766 00001300 7602                <1>         jbe .bmstyle_ok
  2767 00001302 30C0                <1>         xor al, al
  2768                              <1> 
  2769                              <1> .bmstyle_ok:
  2770 00001304 D0E0                <1>         shl al, 1
  2771 00001306 01C3                <1>         add bx, ax
  2772 00001308 895D1A              <1>         mov [di + struc_menu_box.menu_header], bx
  2773                              <1> 
  2774                              <1> ;init the color and geometry of boot menu
  2775 0000130B BE[0646]            <1>         mov si, color.boot_menu
  2776 0000130E E8BEFF              <1>         call main_init_menu
  2777                              <1> 
  2778                              <1> ; set position of boot menu window 
  2779                              <1> 
  2780 00001311 8B4506              <1>         mov ax, [di + struc_window.win_pos]
  2781 00001314 88C3                <1>         mov bl, al
  2782                              <1> 
  2783 00001316 025D08              <1>         add bl, [di + struc_window.win_size]
  2784 00001319 80C302              <1>         add bl, 2
  2785 0000131C 3A1E[1E26]          <1>         cmp bl, [ui_screen_width]
  2786 00001320 7208                <1>         jb .bmpos_ok
  2787                              <1> 
  2788 00001322 A0[1E26]            <1>         mov al, [ui_screen_width]
  2789 00001325 2A4508              <1>         sub al, [di + struc_window.win_size]
  2790 00001328 2C02                <1>         sub al, 2
  2791                              <1> 
  2792                              <1> .bmpos_ok:
  2793 0000132A 894506              <1>         mov [di + struc_window.win_pos], ax
  2794 0000132D 61                  <1>         popa
  2795 0000132E C3                  <1>         ret
  2796                              <1> 
  2797                              <1> ;=============================================================================
  2798                              <1> ;main_init_video ---- init the video mode
  2799                              <1> ;input:
  2800                              <1> ;      none
  2801                              <1> ;output:
  2802                              <1> ;      none
  2803                              <1> ;=============================================================================
  2804                              <1> main_init_video:
  2805 0000132F 60                  <1> 	pusha
  2806 00001330 A0[F345]            <1>         mov al, [video_mode]
  2807 00001333 B308                <1>         mov bl, 8
  2808 00001335 8B2E[4146]          <1>         mov bp, [font.data]
  2809 00001339 8B0E[3F46]          <1>         mov cx, [font.number]
  2810                              <1>         
  2811 0000133D E8FB07              <1>         call set_video_mode
  2812 00001340 61                  <1> 	popa
  2813 00001341 C3                  <1>         ret
  2814                              <1> 
  2815                              <1> ;=============================================================================
  2816                              <1> ;main_init_good_record_list ---- init the good boot record list
  2817                              <1> ;input:
  2818                              <1> ;      none
  2819                              <1> ;output:
  2820                              <1> ;      cf = 0 sucess
  2821                              <1> ;      cf = 1 failed, no good record
  2822                              <1> ;=============================================================================
  2823                              <1> main_init_good_record_list:
  2824 00001342 FC                  <1>         cld
  2825 00001343 60                  <1>         pusha
  2826 00001344 B92000              <1>         mov cx, MAX_RECORD_NUM
  2827 00001347 8D3E[A868]          <1>         lea di, [main_tmp.good_record_list]
  2828 0000134B 8D36[2F02]          <1>         lea si, [ADDR_SBMK_BOOT_RECORDS]
  2829 0000134F 31C0                <1>         xor ax, ax
  2830                              <1> 
  2831                              <1> .loop_check:
  2832 00001351 E84019              <1>         call check_bootrecord                   ; check if it's valid
  2833 00001354 7203                <1>         jc .check_next
  2834 00001356 AA                  <1>         stosb                                   ; store it's index to buffer
  2835 00001357 FEC4                <1>         inc ah
  2836                              <1>         
  2837                              <1> .check_next:
  2838 00001359 FEC0                <1>         inc al
  2839 0000135B 83C640              <1>         add si, SIZE_OF_BOOTRECORD
  2840 0000135E E2F1                <1>         loop .loop_check
  2841                              <1> 
  2842 00001360 8826[2244]          <1>         mov [GOOD_RECORD_NUMBER], ah
  2843 00001364 08E4                <1>         or ah, ah
  2844 00001366 7501                <1>         jnz .ok
  2845 00001368 F9                  <1>         stc
  2846                              <1> .ok:
  2847 00001369 61                  <1>         popa
  2848 0000136A C3                  <1>         ret
  2849                              <1> 
  2850                              <1> ;=============================================================================
  2851                              <1> ;init_boot_records ---- init the boot records list
  2852                              <1> ;input:
  2853                              <1> ;      none
  2854                              <1> ;output:
  2855                              <1> ;      none
  2856                              <1> ;=============================================================================
  2857                              <1> main_init_boot_records:
  2858 0000136B 60                  <1>         pusha
  2859 0000136C FE06[CE68]          <1>         inc byte [main_tmp.change_occured]         ; some changes occured.
  2860                              <1> 
  2861 00001370 FC                  <1>         cld
  2862 00001371 BE[2F02]            <1>         mov si, ADDR_SBMK_BOOT_RECORDS
  2863 00001374 BF[0769]            <1>         mov di, main_tmp.records_buf
  2864                              <1> 
  2865 00001377 B90008              <1> 	mov cx, MAX_RECORD_NUM * SIZE_OF_BOOTRECORD
  2866 0000137A E8DE17              <1> 	call clear_memory
  2867                              <1> 
  2868 0000137D B84000              <1>         mov ax, SIZE_OF_BOOTRECORD        ; ax = size of bootrecord
  2869 00001380 B92000              <1>         mov cx, MAX_RECORD_NUM            ; cx = max record number
  2870                              <1> 
  2871 00001383 88CB                <1>         mov bl, cl
  2872                              <1> 
  2873 00001385 56                  <1>         push si
  2874 00001386 51                  <1>         push cx                           ; cx = MAX_RECORD_NUM
  2875                              <1> .bkp_good_records:
  2876 00001387 E80A19              <1>         call check_bootrecord
  2877 0000138A 720A                <1>         jc .bad_record
  2878                              <1> 
  2879 0000138C 56                  <1>         push si
  2880 0000138D 51                  <1>         push cx
  2881 0000138E 89C1                <1>         mov cx, ax
  2882 00001390 F3A4                <1>         rep movsb
  2883 00001392 59                  <1>         pop cx
  2884 00001393 5E                  <1>         pop si
  2885                              <1> 
  2886 00001394 FECB                <1>         dec bl
  2887                              <1>         
  2888                              <1> .bad_record:
  2889 00001396 01C6                <1>         add si, ax
  2890 00001398 E2ED                <1>         loop .bkp_good_records
  2891                              <1> 
  2892 0000139A 59                  <1>         pop cx                           ; cx = MAX_RECORD_NUM
  2893 0000139B 5E                  <1>         pop si                           ; si -> boot_records
  2894 0000139C 87F7                <1>         xchg si, di                      ; di -> boot_records
  2895                              <1> 
  2896 0000139E 57                  <1>         push di
  2897 0000139F 50                  <1> 	push ax
  2898 000013A0 30D2                <1>         xor dl, dl
  2899 000013A2 F606[1902]20        <1>         test byte [ADDR_SBMK_FLAGS], KNLFLAG_ONLYPARTS
  2900 000013A7 0F95C0              <1> 	setnz al
  2901 000013AA E8341B              <1>         call search_records
  2902 000013AD 58                  <1> 	pop ax
  2903 000013AE 5F                  <1>         pop di
  2904                              <1> 
  2905                              <1> ;search finished, find out new records
  2906 000013AF B92000              <1>         mov cx, MAX_RECORD_NUM
  2907 000013B2 87F7                <1>         xchg si, di                      ; si -> boot_records
  2908                              <1> 
  2909 000013B4 56                  <1>         push si
  2910                              <1> 
  2911 000013B5 08DB                <1>         or bl, bl
  2912 000013B7 741C                <1>         jz .no_space
  2913                              <1> 
  2914                              <1> .search_news:
  2915 000013B9 57                  <1>         push di
  2916 000013BA BF[0769]            <1>         mov di, main_tmp.records_buf
  2917 000013BD E82000              <1>         call main_find_record_in_buf
  2918 000013C0 5F                  <1>         pop di
  2919                              <1> 
  2920 000013C1 730A                <1>         jnc .found
  2921                              <1> 
  2922 000013C3 51                  <1>         push cx
  2923 000013C4 56                  <1>         push si
  2924 000013C5 89C1                <1>         mov cx, ax
  2925 000013C7 F3A4                <1>         rep movsb
  2926 000013C9 5E                  <1>         pop si
  2927 000013CA 59                  <1>         pop cx
  2928                              <1> 
  2929 000013CB FECB                <1>         dec bl
  2930                              <1> 
  2931                              <1> .found:
  2932 000013CD 08DB                <1>         or bl, bl
  2933 000013CF 7404                <1>         jz .no_space
  2934 000013D1 01C6                <1>         add si, ax
  2935 000013D3 E2E4                <1>         loop .search_news
  2936                              <1> 
  2937                              <1> .no_space:
  2938                              <1> 
  2939 000013D5 5F                  <1>         pop di
  2940 000013D6 BE[0769]            <1>         mov si, main_tmp.records_buf
  2941 000013D9 B90008              <1> 	mov cx, MAX_RECORD_NUM * SIZE_OF_BOOTRECORD
  2942 000013DC F3A4                <1>         rep movsb
  2943                              <1> 
  2944 000013DE 61                  <1>         popa
  2945 000013DF C3                  <1>         ret
  2946                              <1> 
  2947                              <1> ;=============================================================================
  2948                              <1> ; main_find_record_in_buf ---- find a record in a buffer
  2949                              <1> ; input:
  2950                              <1> ;      ds:si -> the record
  2951                              <1> ;      es:di -> the buffer
  2952                              <1> ; output:
  2953                              <1> ;      cf = 1 not found
  2954                              <1> ;=============================================================================
  2955                              <1> main_find_record_in_buf:
  2956 000013E0 60                  <1>         pusha
  2957 000013E1 8B1C                <1> 	mov bx, [si]				; flags
  2958 000013E3 F7C30900            <1>         test bx, DRVFLAG_DRIVEOK|INFOFLAG_ISSPECIAL
  2959                              <1> 
  2960 000013E7 7442                <1>         jz .not_found
  2961                              <1> 
  2962 000013E9 B92000              <1>         mov cx, MAX_RECORD_NUM
  2963                              <1> 
  2964                              <1> .compare_next:
  2965 000013EC F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  2966 000013F0 7408                <1> 	jz .normal_rec
  2967 000013F2 F7050800            <1> 	test word [di], INFOFLAG_ISSPECIAL
  2968 000013F6 7524                <1> 	jnz .special_rec
  2969 000013F8 EB2C                <1> 	jmp short .not_same
  2970                              <1> 
  2971                              <1> .normal_rec:
  2972 000013FA F7050100            <1> 	test word [di], DRVFLAG_DRIVEOK
  2973 000013FE 7426                <1> 	jz .not_same
  2974 00001400 8B4502              <1>         mov ax, [di + struc_bootrecord.drive_id]
  2975 00001403 394402              <1>         cmp [si + struc_bootrecord.drive_id], ax
  2976 00001406 751E                <1>         jne .not_same
  2977 00001408 668B4506            <1>         mov eax, [di + struc_bootrecord.father_abs_addr]
  2978 0000140C 66394406            <1>         cmp [si + struc_bootrecord.father_abs_addr], eax
  2979 00001410 7514                <1>         jne .not_same
  2980 00001412 668B450A            <1>         mov eax, [di + struc_bootrecord.abs_addr]
  2981 00001416 6639440A            <1>         cmp [si + struc_bootrecord.abs_addr], eax
  2982 0000141A 750A                <1>         jne .not_same
  2983                              <1> 
  2984                              <1> .special_rec:
  2985 0000141C 8A4504              <1>         mov al, [di + struc_bootrecord.type]
  2986 0000141F 384404              <1>         cmp [si + struc_bootrecord.type], al
  2987 00001422 7502                <1>         jne .not_same
  2988                              <1> 
  2989 00001424 EB08                <1>         jmp short .found_same
  2990                              <1> 
  2991                              <1> .not_same:
  2992 00001426 83C740              <1>         add di, SIZE_OF_BOOTRECORD
  2993 00001429 E2C1                <1>         loop .compare_next
  2994                              <1> 
  2995                              <1> .not_found:
  2996 0000142B F9                  <1>         stc
  2997 0000142C 61                  <1>         popa
  2998 0000142D C3                  <1>         ret
  2999                              <1> 
  3000                              <1> .found_same:
  3001 0000142E F8                  <1>         clc
  3002 0000142F 61                  <1>         popa
  3003 00001430 C3                  <1>         ret
  3004                              <1> 
  3005                              <1> 
  3006                              <1> ;=============================================================================
  3007                              <1> ; >>>>>>>>>>>>>>>>>>>>>>>>> User Interface Functions <<<<<<<<<<<<<<<<<<<<<<<<<
  3008                              <1> ;=============================================================================
  3009                              <1> 
  3010                              <1> ;=============================================================================
  3011                              <1> ;root_window_draw_body_proc ---- draw the root window
  3012                              <1> ;input:
  3013                              <1> ;      none
  3014                              <1> ;output:
  3015                              <1> ;      none
  3016                              <1> ;=============================================================================
  3017                              <1> root_window_draw_body_proc:
  3018 00001431 8A3E[2E46]          <1>         mov bh, [color.background]              ;
  3019 00001435 8B36[3D46]          <1>         mov si, [icon.background]               ; draw background
  3020 00001439 8B0E[3B46]          <1>         mov cx, [icon.background_size]          ;
  3021 0000143D E8EA07              <1>         call draw_background                    ;
  3022                              <1> 
  3023 00001440 31D2                <1>         xor dx, dx                              ;
  3024 00001442 8B1E[2F46]          <1>         mov bx, [color.copyright]               ;
  3025 00001446 A0[1E26]            <1>         mov al, [ui_screen_width]               ; draw copyright message
  3026 00001449 50                  <1>         push ax                                 ; save screen width
  3027 0000144A 8A0E[FF45]          <1>         mov cl, [size.copyright]
  3028 0000144E F6E1                <1>         mul cl
  3029 00001450 89C1                <1>         mov cx, ax
  3030 00001452 B020                <1>         mov al, ' '                             ;
  3031 00001454 E86F05              <1>         call draw_char                          ;
  3032 00001457 8B36[9A46]          <1>         mov si, [str_idx.copyright]
  3033 0000145B E84105              <1>         call draw_string_hl
  3034                              <1>         
  3035 0000145E 8B1E[3146]          <1>         mov bx, [color.hint]                    ;
  3036 00001462 8A36[1F26]          <1>         mov dh, [ui_screen_height]              ;
  3037 00001466 8A0E[0046]          <1>         mov cl, [size.hint]                     ;
  3038 0000146A 28CE                <1>         sub dh, cl                              ; draw hint message
  3039 0000146C 58                  <1>         pop ax                                  ; get screen width
  3040 0000146D F6E1                <1>         mul cl                                  ;
  3041 0000146F 89C1                <1>         mov cx, ax                              ;
  3042 00001471 B020                <1>         mov al, ' '                             ;
  3043 00001473 E85005              <1>         call draw_char                          ;
  3044 00001476 8B36[9C46]          <1>         mov si, [str_idx.hint]                  ;
  3045 0000147A E82205              <1>         call draw_string_hl                     ;
  3046                              <1> 
  3047 0000147D 8B16[F945]          <1>         mov dx, [position.brand]                ; draw brand icon
  3048 00001481 8B0E[3746]          <1>         mov cx, [icon.brand_size]               ;
  3049 00001485 80FAFF              <1>         cmp dl, 0xFF                            ;
  3050 00001488 7506                <1>         jne .not_justify                        ;
  3051 0000148A 8A16[1E26]          <1>         mov dl, [ui_screen_width]               ; right justify
  3052 0000148E 28CA                <1>         sub dl, cl                              ;
  3053                              <1> .not_justify:                                   ;
  3054 00001490 8B36[3946]          <1>         mov si, [icon.brand]                    ;
  3055 00001494 E86C07              <1>         call draw_icon                          ;
  3056                              <1> 
  3057 00001497 E80A00              <1>         call root_window_draw_date
  3058 0000149A E82000              <1>         call root_window_draw_time
  3059 0000149D E8CD00              <1>         call root_window_draw_delay_time
  3060 000014A0 E83300              <1>         call root_window_draw_knl_flags
  3061                              <1> 
  3062 000014A3 C3                  <1>         ret
  3063                              <1>         
  3064                              <1> ;=============================================================================
  3065                              <1> ;root_window_draw_date ---- draw the date string
  3066                              <1> ;input:
  3067                              <1> ;      none
  3068                              <1> ;output:
  3069                              <1> ;      none
  3070                              <1> ;=============================================================================
  3071                              <1> root_window_draw_date:
  3072 000014A4 60                  <1>         pusha
  3073 000014A5 BF[5772]            <1>         mov di, main_tmp.root_buf               ; draw date
  3074 000014A8 A0[F545]            <1>         mov al, [show_date_method]              ;
  3075 000014AB E8F815              <1>         call get_current_date_string            ;
  3076 000014AE 89FE                <1>         mov si, di                              ;
  3077 000014B0 8A1E[3546]          <1>         mov bl, [color.date]                    ;
  3078 000014B4 8B16[FB45]          <1>         mov dx, [position.date]                 ;
  3079 000014B8 E8E404              <1>         call draw_string                        ;
  3080 000014BB 61                  <1>         popa
  3081 000014BC C3                  <1>         ret
  3082                              <1> 
  3083                              <1> ;=============================================================================
  3084                              <1> ;draw_time ---- draw the time string
  3085                              <1> ;input:
  3086                              <1> ;      none
  3087                              <1> ;output:
  3088                              <1> ;      none
  3089                              <1> ;=============================================================================
  3090                              <1> root_window_draw_time:
  3091 000014BD 60                  <1>         pusha
  3092 000014BE BF[5772]            <1>         mov di, main_tmp.root_buf               ; draw date
  3093 000014C1 A0[F645]            <1>         mov al, [show_time_method]              ;
  3094 000014C4 E8B815              <1>         call get_current_time_string            ;
  3095 000014C7 89FE                <1>         mov si, di                              ;
  3096 000014C9 8A1E[3646]          <1>         mov bl, [color.time]                    ;
  3097 000014CD 8B16[FD45]          <1>         mov dx, [position.time]                 ;
  3098 000014D1 E8CB04              <1>         call draw_string                        ;
  3099 000014D4 61                  <1>         popa
  3100 000014D5 C3                  <1>         ret
  3101                              <1> 
  3102                              <1> ;=============================================================================
  3103                              <1> ;root_window_draw_knl_flags ---- draw root passwd, login, secure mode, 
  3104                              <1> ;                                remember last and int13 ext flags.
  3105                              <1> ;=============================================================================
  3106                              <1> root_window_draw_knl_flags:
  3107 000014D6 8B16[1E26]          <1>         mov dx, [ui_screen_size]
  3108 000014DA 81EA1301            <1>         sub dx, 0x0113
  3109 000014DE B90100              <1>         mov cx, 1
  3110                              <1> 
  3111                              <1> ; draw seperators
  3112 000014E1 8A1E[3146]          <1>         mov bl, [color.hint]
  3113 000014E5 B07C                <1>         mov al, '|'
  3114 000014E7 E8DC04              <1>         call draw_char
  3115 000014EA 80C204              <1> 	add dl,4
  3116 000014ED E8D604              <1> 	call draw_char
  3117 000014F0 80C206              <1> 	add dl,6
  3118 000014F3 E8D004              <1> 	call draw_char
  3119 000014F6 80EA09              <1> 	sub dl,9
  3120                              <1> 
  3121                              <1> ; draw driver id
  3122 000014F9 BF[5772]            <1>         mov di, main_tmp.root_buf
  3123 000014FC 57                  <1> 	push di
  3124 000014FD 52                  <1> 	push dx
  3125 000014FE 8A16107E            <1> 	mov dl, [Boot_Drive]
  3126 00001502 E8A422              <1> 	call get_drvid_str
  3127 00001505 5A                  <1> 	pop dx
  3128 00001506 5E                  <1> 	pop si
  3129                              <1> 
  3130 00001507 8A1E[3446]          <1>         mov bl, [color.knl_drvid]
  3131                              <1> 
  3132 0000150B E89104              <1>         call draw_string
  3133 0000150E 80C204              <1>         add dl, 4
  3134                              <1> 
  3135                              <1> ; draw flags
  3136 00001511 8A1E[3346]          <1>         mov bl, [color.knl_flags]
  3137 00001515 66833E[1D02]00      <1>         cmp dword [ADDR_SBMK_ROOT_PASSWORD], 0
  3138 0000151B 7404                <1>         jz .no_root_password
  3139                              <1>         
  3140 0000151D B050                <1>         mov al, 'P'
  3141 0000151F EB02                <1>         jmp short .draw_pwd
  3142                              <1> .no_root_password:
  3143 00001521 B02D                <1>         mov al, '-'
  3144                              <1> .draw_pwd:
  3145 00001523 E8A004              <1>         call draw_char
  3146 00001526 FEC2                <1>         inc dl
  3147                              <1> 
  3148 00001528 8A26[1902]          <1> 	mov ah, [ADDR_SBMK_FLAGS]
  3149                              <1> 
  3150 0000152C F6C402              <1>         test ah, KNLFLAG_SECURITY
  3151 0000152F 7404                <1>         jz .no_security
  3152                              <1> 
  3153 00001531 B053                <1>         mov al, 'S'
  3154 00001533 EB02                <1>         jmp short .draw_security
  3155                              <1> .no_security:
  3156 00001535 B02D                <1>         mov al, '-'
  3157                              <1> .draw_security:
  3158 00001537 E88C04              <1>         call draw_char
  3159 0000153A FEC2                <1>         inc dl
  3160                              <1> 
  3161 0000153C 803E[CF68]00        <1>         cmp byte [main_tmp.root_login],0
  3162 00001541 7404                <1>         jz .no_root_login
  3163                              <1> 
  3164 00001543 B041                <1>         mov al, 'A'
  3165 00001545 EB02                <1>         jmp short .draw_login
  3166                              <1> .no_root_login:
  3167 00001547 B02D                <1>         mov al, '-'
  3168                              <1> .draw_login:
  3169 00001549 E87A04              <1>         call draw_char
  3170                              <1> 
  3171 0000154C FEC2                <1>         inc dl
  3172                              <1> 
  3173 0000154E F6C410              <1>         test ah, KNLFLAG_REMLAST
  3174 00001551 7404                <1>         jz .no_remlast
  3175 00001553 B04C                <1>         mov al, 'L'
  3176 00001555 EB02                <1>         jmp short .draw_remlast
  3177                              <1> .no_remlast:
  3178 00001557 B02D                <1>         mov al, '-'
  3179                              <1> .draw_remlast:
  3180 00001559 E86A04              <1>         call draw_char
  3181                              <1> 
  3182 0000155C FEC2                <1>         inc dl
  3183                              <1> 
  3184 0000155E F6C404              <1>         test ah, KNLFLAG_NOINT13EXT
  3185 00001561 7504                <1>         jnz .no_int13ext
  3186 00001563 B045                <1>         mov al, 'E'
  3187 00001565 EB02                <1>         jmp .draw_int13ext
  3188                              <1> .no_int13ext:
  3189 00001567 B02D                <1>         mov al, '-'
  3190                              <1> .draw_int13ext:
  3191 00001569 E85A04              <1>         call draw_char
  3192 0000156C C3                  <1>         ret
  3193                              <1> 
  3194                              <1> ;=============================================================================
  3195                              <1> ;root_window_draw_delay_time ---- draw the delay_time and time_count
  3196                              <1> ;=============================================================================
  3197                              <1> root_window_draw_delay_time:
  3198 0000156D 0FB606[C868]        <1>         movzx ax, byte [main_tmp.time_count]
  3199 00001572 B90300              <1>         mov cx, 3
  3200 00001575 BF[5772]            <1>         mov di, main_tmp.root_buf
  3201 00001578 E87611              <1>         call itoa
  3202                              <1>         
  3203 0000157B 8A1E[2D46]          <1>         mov bl, [color.delay_time]
  3204 0000157F 8B16[1E26]          <1>         mov dx, [ui_screen_size]
  3205 00001583 81EA0801            <1>         sub dx, 0x0108
  3206 00001587 89FE                <1>         mov si, di
  3207 00001589 E81304              <1>         call draw_string
  3208                              <1> 
  3209 0000158C 0FB606[1A02]        <1>         movzx ax, byte [ADDR_SBMK_DELAY_TIME]
  3210 00001591 B90300              <1>         mov cx, 3
  3211 00001594 E85A11              <1>         call itoa
  3212                              <1> 
  3213 00001597 B03A                <1>         mov al, ':'
  3214 00001599 B101                <1>         mov cl, 1
  3215 0000159B 80C203              <1>         add dl, 3
  3216 0000159E E82504              <1>         call draw_char
  3217 000015A1 FEC2                <1>         inc dl
  3218 000015A3 E8F903              <1>         call draw_string
  3219 000015A6 B020                <1>         mov al, ' '
  3220 000015A8 80C203              <1>         add dl, 3
  3221 000015AB E81804              <1>         call draw_char
  3222 000015AE C3                  <1>         ret
  3223                              <1> 
  3224                              <1> 
  3225                              <1> ;=============================================================================
  3226                              <1> ; boot_menu_item_str_proc ---- get item string of boot menu
  3227                              <1> ; input:
  3228                              <1> ;	cx = index
  3229                              <1> ; output:
  3230                              <1> ;	ds:si -> item string
  3231                              <1> ;=============================================================================
  3232                              <1> boot_menu_item_str_proc:
  3233 000015AF E8BE01              <1> 	call main_get_record_pointer
  3234                              <1> 
  3235 000015B2 FC                  <1> 	cld
  3236 000015B3 8D3E[0771]          <1>         lea di, [main_tmp.record_string]
  3237 000015B7 57                  <1> 	push di
  3238                              <1> 
  3239 000015B8 3A0E[1C02]          <1> 	cmp cl, [ADDR_SBMK_DEFAULT_BOOT]
  3240 000015BC 7502                <1> 	jne .not_def
  3241 000015BE B02A                <1> 	mov al, '*'
  3242                              <1> .not_def:
  3243 000015C0 AA                  <1> 	stosb
  3244                              <1> 
  3245 000015C1 A0[2102]            <1>         mov al, [ADDR_SBMK_BOOTMENU_STYLE]
  3246 000015C4 E8CE19              <1>         call get_record_string
  3247 000015C7 5E                  <1> 	pop si
  3248 000015C8 C3                  <1> 	ret
  3249                              <1> 
  3250                              <1> ;=============================================================================
  3251                              <1> ; main_menu_item_str_proc ---- get item string of main menu
  3252                              <1> ; input:
  3253                              <1> ;	cx = index
  3254                              <1> ; output:
  3255                              <1> ;	ds:si -> item string
  3256                              <1> ;=============================================================================
  3257                              <1> main_menu_item_str_proc:
  3258 000015C9 BE[CA46]            <1> 	mov si, str_idx.main_menu_strings
  3259 000015CC EB0A                <1> 	jmp short main_get_cmd_menu_item_str
  3260                              <1> 
  3261                              <1> ;=============================================================================
  3262                              <1> ; record_menu_item_str_proc ---- get item string of record menu
  3263                              <1> ; input:
  3264                              <1> ;	cx = index
  3265                              <1> ; output:
  3266                              <1> ;	ds:si -> item string
  3267                              <1> ;=============================================================================
  3268                              <1> record_menu_item_str_proc:
  3269 000015CE BE[E246]            <1> 	mov si, str_idx.record_menu_strings
  3270 000015D1 EB05                <1> 	jmp short main_get_cmd_menu_item_str
  3271                              <1> 
  3272                              <1> ;=============================================================================
  3273                              <1> ; sys_menu_item_str_proc ---- get item string of sys menu
  3274                              <1> ; input:
  3275                              <1> ;	cx = index
  3276                              <1> ; output:
  3277                              <1> ;	ds:si -> item string
  3278                              <1> ;=============================================================================
  3279                              <1> sys_menu_item_str_proc:
  3280 000015D3 BE[0447]            <1> 	mov si, str_idx.sys_menu_strings
  3281 000015D6 EB00                <1> 	jmp short main_get_cmd_menu_item_str
  3282                              <1> 
  3283                              <1> ;=============================================================================
  3284                              <1> ; main_get_cmd_menu_item_str ---- get item string of a command menu
  3285                              <1> ; input:
  3286                              <1> ;	cx = index
  3287                              <1> ;	ds:si -> str_idx
  3288                              <1> ; output:
  3289                              <1> ;	ds:si -> item string
  3290                              <1> ;=============================================================================
  3291                              <1> main_get_cmd_menu_item_str:
  3292 000015D8 D1E1                <1> 	shl cx,1
  3293 000015DA 01CE                <1> 	add si, cx
  3294 000015DC 8B34                <1> 	mov si, [si]
  3295 000015DE C3                  <1> 	ret
  3296                              <1> 
  3297                              <1> ;=============================================================================
  3298                              <1> ;main_check_update_time ---- check if the time message needs update.
  3299                              <1> ;output:
  3300                              <1> ;	cf = 0 not changed
  3301                              <1> ;	cf = 1 changed
  3302                              <1> ;=============================================================================
  3303                              <1> main_check_update_time:
  3304 000015DF 50                  <1> 	push ax
  3305 000015E0 B402                <1>         mov ah, 0x02
  3306 000015E2 CD1A                <1>         int 0x1a
  3307                              <1> 
  3308 000015E4 390E[D068]          <1>         cmp [main_tmp.last_time], cx
  3309 000015E8 7407                <1>         je .end
  3310                              <1> 
  3311 000015EA 890E[D068]          <1>         mov [main_tmp.last_time], cx
  3312 000015EE F9                  <1> 	stc
  3313 000015EF 58                  <1> 	pop ax
  3314 000015F0 C3                  <1> 	ret
  3315                              <1> .end:
  3316 000015F1 F8                  <1> 	clc
  3317 000015F2 58                  <1> 	pop ax
  3318 000015F3 C3                  <1>         ret
  3319                              <1> 
  3320                              <1> 
  3321                              <1> ;=============================================================================
  3322                              <1> ;main_check_delay_time ---- check if the delay time is up
  3323                              <1> ; output:
  3324                              <1> ;	cf = 0 not zero
  3325                              <1> ;	cf = 1 zero
  3326                              <1> ;=============================================================================
  3327                              <1> main_check_delay_time:
  3328 000015F4 30E4                <1>         xor ah, ah                                      ; get time ticks
  3329 000015F6 CD1A                <1>         int 0x1a                                        ;
  3330                              <1> 
  3331 000015F8 3B16[C968]          <1>         cmp dx, [main_tmp.ticks_count]
  3332 000015FC 7304                <1>         jae .next_time                                  ; dx must greater than
  3333 000015FE 8916[C968]          <1>         mov [main_tmp.ticks_count], dx                  ; ticks_count
  3334                              <1> .next_time:
  3335 00001602 31C0                <1> 	xor ax, ax
  3336 00001604 89D1                <1>         mov cx, dx                                      ; every 18 ticks approxmiately
  3337 00001606 2B0E[C968]          <1>         sub cx, [main_tmp.ticks_count]                  ; equal to 1 second,
  3338 0000160A 83F912              <1>         cmp cx, 18                                      ; decrease time_count
  3339 0000160D 7609                <1>         jbe .not_add                                    ; until to zero.
  3340 0000160F 8916[C968]          <1>         mov [main_tmp.ticks_count], dx
  3341 00001613 FE0E[C868]          <1>         dec byte [main_tmp.time_count]
  3342 00001617 40                  <1> 	inc ax
  3343                              <1> .not_add:
  3344 00001618 803E[C868]00        <1>         cmp byte [main_tmp.time_count], 0               ; if time is up, then
  3345 0000161D 7502                <1>         jne .no_up                                      ; send ESC key.
  3346 0000161F F9                  <1> 	stc
  3347 00001620 C3                  <1> 	ret
  3348                              <1> 
  3349                              <1> .no_up:
  3350 00001621 F8                  <1> 	clc
  3351 00001622 C3                  <1> 	ret
  3352                              <1> 
  3353                              <1> ;=============================================================================
  3354                              <1> ;get_event ---- get a event, if no key is pressed then count down the 
  3355                              <1> ;               delay time until to zero and send an EVENT_BOOT_DEFAULT event
  3356                              <1> ;input:
  3357                              <1> ;      none
  3358                              <1> ;output:
  3359                              <1> ;      ax = the key code
  3360                              <1> ;=============================================================================
  3361                              <1> get_event:
  3362 00001623 60                  <1> 	pusha
  3363                              <1> 
  3364 00001624 31C0                <1> 	xor ax, ax
  3365                              <1> 
  3366                              <1> .loop_get_event:
  3367 00001626 E8B6FF              <1> 	call main_check_update_time
  3368 00001629 7305                <1> 	jnc .no_update_time
  3369                              <1> 
  3370 0000162B B801F4              <1> 	mov ax, EVENT_REDRAW_ROOT
  3371 0000162E EB31                <1> 	jmp short .cont_loop
  3372                              <1> 
  3373                              <1> .no_update_time:
  3374                              <1> 
  3375 00001630 803E[1A02]00        <1> 	cmp byte [ADDR_SBMK_DELAY_TIME], 0
  3376 00001635 741E                <1> 	je .no_count
  3377 00001637 803E[CB68]00        <1> 	cmp byte [main_tmp.key_pressed], 0
  3378 0000163C 7517                <1> 	jne .no_count
  3379                              <1> 
  3380 0000163E E8B3FF              <1> 	call main_check_delay_time
  3381 00001641 7309                <1> 	jnc .has_delay
  3382 00001643 B802F4              <1> 	mov ax, EVENT_BOOT_DEFAULT
  3383 00001646 FE06[CB68]          <1> 	inc byte [main_tmp.key_pressed]
  3384 0000164A EB15                <1> 	jmp short .cont_loop
  3385                              <1> 
  3386                              <1> .has_delay
  3387 0000164C 09C0                <1> 	or ax, ax
  3388 0000164E 7405                <1> 	jz .no_count
  3389 00001650 B801F4              <1> 	mov ax, EVENT_REDRAW_ROOT
  3390 00001653 EB0C                <1> 	jmp short .cont_loop
  3391                              <1> 
  3392                              <1> .no_count:
  3393 00001655 E86113              <1> 	call check_keyevent
  3394 00001658 09C0                <1> 	or ax, ax
  3395 0000165A 7405                <1> 	jz .cont_loop
  3396                              <1> 
  3397                              <1> .key_pressed:
  3398 0000165C C606[CB68]01        <1> 	mov byte [main_tmp.key_pressed], 1
  3399                              <1> 
  3400                              <1> .cont_loop:
  3401 00001661 09C0                <1> 	or ax, ax
  3402 00001663 74C1                <1> 	jz .loop_get_event
  3403                              <1> 
  3404 00001665 A3[CC68]            <1> 	mov [main_tmp.keycode], ax
  3405 00001668 61                  <1> 	popa
  3406 00001669 A1[CC68]            <1> 	mov ax, [main_tmp.keycode]
  3407 0000166C C3                  <1> 	ret
  3408                              <1>         
  3409                              <1> 
  3410                              <1> ;=============================================================================
  3411                              <1> ; main_auth_record_action
  3412                              <1> ;=============================================================================
  3413                              <1> main_auth_record_action:
  3414 0000166D B0D0                <1> 	mov al, ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
  3415                              <1> 
  3416                              <1> ;=============================================================================
  3417                              <1> ; main_auth_action  ---- auth an action
  3418                              <1> ; input:
  3419                              <1> ;	al = auth type
  3420                              <1> ; output:
  3421                              <1> ;	cf = 0, success
  3422                              <1> ;	cf = 1, failed
  3423                              <1> ;=============================================================================
  3424                              <1> main_auth_action:
  3425 0000166F 60                  <1> 	pusha
  3426                              <1> 
  3427 00001670 A810                <1> 	test al, ACTFLAG_CHK_RECNUM
  3428 00001672 7407                <1> 	jz .test_security
  3429                              <1> 
  3430 00001674 803E[2244]00        <1> 	cmp byte [GOOD_RECORD_NUMBER], 0
  3431 00001679 7427                <1> 	jz .auth_failed
  3432                              <1> 
  3433                              <1> .test_security:
  3434 0000167B 803E[CF68]00        <1>         cmp byte [main_tmp.root_login], 0
  3435 00001680 7514                <1>         jnz .auth_ok
  3436                              <1> 
  3437 00001682 F606[1902]02        <1> 	test byte [ADDR_SBMK_FLAGS], KNLFLAG_SECURITY
  3438 00001687 7404                <1> 	jz .test_root
  3439                              <1> 
  3440 00001689 A880                <1> 	test al, ACTFLAG_AUTH_SECURITY
  3441 0000168B 7504                <1> 	jnz .auth_root
  3442                              <1> 
  3443                              <1> .test_root:
  3444 0000168D A820                <1> 	test al, ACTFLAG_AUTH_ROOT
  3445 0000168F 7408                <1> 	jz .test_record
  3446                              <1> 
  3447                              <1> .auth_root:
  3448 00001691 E81100              <1> 	call main_confirm_root_passwd
  3449 00001694 720C                <1> 	jc .auth_failed
  3450                              <1> 
  3451                              <1> .auth_ok:
  3452 00001696 F8                  <1> 	clc
  3453 00001697 61                  <1> 	popa
  3454 00001698 C3                  <1> 	ret
  3455                              <1> 
  3456                              <1> .test_record:
  3457 00001699 A840                <1> 	test al, ACTFLAG_AUTH_RECORD
  3458 0000169B 74F9                <1> 	jz .auth_ok
  3459 0000169D E82100              <1> 	call main_confirm_record_passwd
  3460 000016A0 73F4                <1> 	jnc .auth_ok
  3461                              <1> 
  3462                              <1> .auth_failed:
  3463 000016A2 F9                  <1> 	stc
  3464 000016A3 61                  <1> 	popa
  3465 000016A4 C3                  <1> 	ret
  3466                              <1> 
  3467                              <1> 	
  3468                              <1> ;=============================================================================
  3469                              <1> ;main_confirm_root_passwd ---- confirm the root password
  3470                              <1> ;input:
  3471                              <1> ;      none
  3472                              <1> ;output:
  3473                              <1> ;      cf = 0 success
  3474                              <1> ;      cf = 1 failed or cancel
  3475                              <1> ;=============================================================================
  3476                              <1> main_confirm_root_passwd:
  3477 000016A5 60                  <1>         pusha
  3478 000016A6 8B1E[1D02]          <1>         mov bx, [ADDR_SBMK_ROOT_PASSWORD]
  3479 000016AA 8B0E[1F02]          <1>         mov cx, [ADDR_SBMK_ROOT_PASSWORD+2]
  3480 000016AE 09DB                <1>         or bx, bx
  3481 000016B0 7506                <1>         jnz .have_password
  3482 000016B2 09C9                <1>         or cx, cx
  3483 000016B4 7502                <1>         jnz .have_password
  3484 000016B6 EB07                <1>         jmp short .auth_ok
  3485                              <1>         
  3486                              <1> .have_password:                                     
  3487 000016B8 8B36[6A46]          <1>         mov si, [str_idx.root_passwd]               ; check root
  3488 000016BC E81F00              <1>         call main_confirm_passwd                    ; password
  3489                              <1> .auth_ok:
  3490 000016BF 61                  <1>         popa
  3491 000016C0 C3                  <1>         ret
  3492                              <1> 
  3493                              <1> ;=============================================================================
  3494                              <1> ;main_confirm_record_passwd ---- confirm the record password
  3495                              <1> ;=============================================================================
  3496                              <1> main_confirm_record_passwd:
  3497 000016C1 60                  <1>         pusha
  3498 000016C2 E89800              <1>         call main_get_focus_record_pointer
  3499 000016C5 8B5C0E              <1>         mov bx, [si + struc_bootrecord.password]
  3500 000016C8 8B4C10              <1>         mov cx, [si + struc_bootrecord.password+2]
  3501 000016CB 09DB                <1>         or bx, bx
  3502 000016CD 7506                <1>         jnz .have_password
  3503 000016CF 09C9                <1>         or cx, cx
  3504 000016D1 7502                <1>         jnz .have_password
  3505 000016D3 EB07                <1>         jmp short .auth_ok
  3506                              <1>         
  3507                              <1> .have_password:
  3508 000016D5 8B36[6E46]          <1>         mov si, [str_idx.record_passwd]             ; check record
  3509 000016D9 E80200              <1>         call main_confirm_passwd                    ; password
  3510                              <1> .auth_ok:
  3511 000016DC 61                  <1>         popa
  3512 000016DD C3                  <1>         ret
  3513                              <1> 
  3514                              <1> ;=============================================================================
  3515                              <1> ;main_confirm_passwd ---- let user input a password and confirm it.
  3516                              <1> ;input:
  3517                              <1> ;      bx:cx = password
  3518                              <1> ;      ds:si -> message string
  3519                              <1> ;output:
  3520                              <1> ;      cf = 0 success
  3521                              <1> ;      cf = 1 failed or cancel
  3522                              <1> ;=============================================================================
  3523                              <1> main_confirm_passwd:
  3524 000016DE 803E[CF68]00        <1>         cmp byte [main_tmp.root_login],0       ; check if root has logined
  3525 000016E3 751F                <1>         jnz .ok
  3526                              <1> 
  3527 000016E5 51                  <1> 	push cx
  3528 000016E6 B110                <1> 	mov cl, MAX_PASSWORD_LENGTH
  3529 000016E8 E85E08              <1>         call input_password
  3530 000016EB 59                  <1> 	pop cx
  3531 000016EC 721F                <1>         jc .cancel
  3532                              <1> 
  3533 000016EE 39C3                <1>         cmp bx, ax
  3534 000016F0 7506                <1>         jne .cmp_root
  3535 000016F2 39D1                <1>         cmp cx, dx
  3536 000016F4 7502                <1>         jne .cmp_root
  3537 000016F6 EB0C                <1>         jmp .ok
  3538                              <1>         
  3539                              <1> .cmp_root:
  3540 000016F8 3906[1D02]          <1>         cmp [ADDR_SBMK_ROOT_PASSWORD], ax
  3541 000016FC 7508                <1>         jne .failed
  3542 000016FE 3916[1F02]          <1>         cmp [ADDR_SBMK_ROOT_PASSWORD+2], dx
  3543 00001702 7502                <1>         jne .failed
  3544                              <1> .ok:
  3545 00001704 F8                  <1>         clc
  3546 00001705 C3                  <1>         ret
  3547                              <1>         
  3548                              <1> .failed:
  3549 00001706 8B36[A846]          <1>         mov si, [str_idx.wrong_passwd]
  3550 0000170A E81906              <1>         call error_box
  3551                              <1>         
  3552                              <1> .cancel:
  3553 0000170D F9                  <1>         stc
  3554 0000170E C3                  <1>         ret
  3555                              <1> 
  3556                              <1> ;=============================================================================
  3557                              <1> ; main_show_disk_error ---- show the disk error box.
  3558                              <1> ;=============================================================================
  3559                              <1> main_show_disk_error:
  3560 0000170F 8B36[AA46]          <1>         mov si, [str_idx.disk_error]
  3561 00001713 BF[5771]            <1>         mov di, main_tmp.dialog_buf
  3562 00001716 57                  <1>         push di
  3563 00001717 E87E10              <1>         call strcpy
  3564 0000171A E88820              <1> 	call get_last_disk_errno
  3565 0000171D B102                <1>         mov cl, 2
  3566 0000171F E8A610              <1>         call htoa
  3567 00001722 5E                  <1>         pop si
  3568 00001723 E80006              <1>         call error_box
  3569 00001726 C3                  <1>         ret
  3570                              <1> 
  3571                              <1> 
  3572                              <1> ;=============================================================================
  3573                              <1> ;>>>>>>>>>>>>>>>>>>>>>>>>>> Miscellaneous Functions <<<<<<<<<<<<<<<<<<<<<<<<<<
  3574                              <1> ;=============================================================================
  3575                              <1> 
  3576                              <1> ;=============================================================================
  3577                              <1> ;main_recheck_same_records ---- recheck all records that same as given record
  3578                              <1> ;input:
  3579                              <1> ;      ds:si -> record
  3580                              <1> ;output:
  3581                              <1> ;      cf = 0  success
  3582                              <1> ;      cf = 1  failed
  3583                              <1> ;=============================================================================
  3584                              <1> main_recheck_same_records:
  3585 00001727 60                  <1>         pusha
  3586 00001728 8B4402              <1>         mov ax, [si + struc_bootrecord.drive_id]
  3587 0000172B 668B5C06            <1>         mov ebx, [si + struc_bootrecord.father_abs_addr]
  3588 0000172F 668B540A            <1>         mov edx, [si + struc_bootrecord.abs_addr]
  3589                              <1> 
  3590 00001733 8D36[2F02]          <1>         lea si, [ADDR_SBMK_BOOT_RECORDS]
  3591 00001737 B92000              <1>         mov cx, MAX_RECORD_NUM
  3592                              <1> 
  3593                              <1> .loop_check:
  3594 0000173A F60401              <1>         test byte [si + struc_bootrecord.flags], DRVFLAG_DRIVEOK
  3595 0000173D 7416                <1>         jz .check_next
  3596 0000173F 394402              <1>         cmp [si + struc_bootrecord.drive_id], ax
  3597 00001742 7511                <1>         jne .check_next
  3598 00001744 66395C06            <1>         cmp [si + struc_bootrecord.father_abs_addr], ebx
  3599 00001748 750B                <1>         jne .check_next
  3600 0000174A 6639540A            <1>         cmp [si + struc_bootrecord.abs_addr], edx
  3601 0000174E 7505                <1>         jne .check_next
  3602                              <1> 
  3603 00001750 E84115              <1>         call check_bootrecord
  3604 00001753 7206                <1>         jc .end
  3605                              <1> 
  3606                              <1> .check_next:
  3607 00001755 83C640              <1>         add si, SIZE_OF_BOOTRECORD
  3608 00001758 E2E0                <1>         loop .loop_check
  3609 0000175A F8                  <1>         clc
  3610                              <1> .end:
  3611 0000175B 61                  <1>         popa
  3612 0000175C C3                  <1>         ret
  3613                              <1> 
  3614                              <1> ;=============================================================================
  3615                              <1> ;main_get_focus_record_pointer ---- get current boot record's pointer
  3616                              <1> ;input:
  3617                              <1> ;	none
  3618                              <1> ;output:
  3619                              <1> ;       ds:si -> record pointer
  3620                              <1> ;=============================================================================
  3621                              <1> main_get_focus_record_pointer:
  3622 0000175D 31F6                <1>         xor si, si
  3623 0000175F 803E[2244]00        <1>         cmp byte [GOOD_RECORD_NUMBER], 0
  3624 00001764 7409                <1>         jz .end
  3625 00001766 51                  <1> 	push cx
  3626 00001767 8A0E[2344]          <1> 	mov cl, [FOCUS_RECORD]
  3627 0000176B E80200              <1> 	call main_get_record_pointer
  3628 0000176E 59                  <1> 	pop cx
  3629                              <1> .end:
  3630 0000176F C3                  <1> 	ret
  3631                              <1> 
  3632                              <1> ;=============================================================================
  3633                              <1> ;main_get_record_pointer ---- get boot record's pointer
  3634                              <1> ;input:
  3635                              <1> ;      cl = record index in good record list
  3636                              <1> ;output:
  3637                              <1> ;      cl = real index in boot_records list
  3638                              <1> ;      ds:si -> record pointer
  3639                              <1> ;=============================================================================
  3640                              <1> main_get_record_pointer:
  3641 00001770 50                  <1>         push ax
  3642 00001771 30ED                <1>         xor ch, ch
  3643 00001773 BE[A868]            <1>         mov si, main_tmp.good_record_list       ;
  3644 00001776 01CE                <1>         add si, cx                              ;
  3645 00001778 AC                  <1>         lodsb                                   ;
  3646 00001779 50                  <1> 	push ax
  3647                              <1> 
  3648 0000177A B140                <1>         mov cl, SIZE_OF_BOOTRECORD              ; get the pointer to
  3649 0000177C F6E1                <1>         mul cl                                  ; the record.
  3650 0000177E BE[2F02]            <1>         mov si, ADDR_SBMK_BOOT_RECORDS          ;
  3651 00001781 01C6                <1>         add si, ax                              ;
  3652 00001783 59                  <1> 	pop cx
  3653 00001784 30ED                <1> 	xor ch, ch
  3654 00001786 58                  <1>         pop ax
  3655 00001787 C3                  <1>         ret
  3656                              <1> 
  3657                              <1> ;=============================================================================
  3658                              <1> ;main_boot_default ---- boot the default record
  3659                              <1> ;=============================================================================
  3660                              <1> main_boot_default:
  3661 00001788 8A26[1C02]          <1>         mov ah, [ADDR_SBMK_DEFAULT_BOOT]
  3662 0000178C BE[A868]            <1>         mov si, main_tmp.good_record_list
  3663 0000178F 0FB60E[2244]        <1>         movzx cx, [GOOD_RECORD_NUMBER]
  3664 00001794 08C9                <1>         or cl, cl
  3665 00001796 7408                <1>         jz .no_default
  3666 00001798 FC                  <1>         cld
  3667                              <1> 
  3668                              <1> .loop_search:
  3669 00001799 AC                  <1>         lodsb
  3670 0000179A 38E0                <1>         cmp al, ah
  3671 0000179C 7403                <1>         je .found_it
  3672 0000179E E2F9                <1>         loop .loop_search
  3673                              <1>         
  3674                              <1> .no_default:                                ; no default record, do nothing.
  3675 000017A0 C3                  <1>         ret
  3676                              <1>         
  3677                              <1> .found_it:
  3678 000017A1 50                  <1> 	push ax
  3679 000017A2 E82A01              <1> 	call main_hide_auto_hides
  3680 000017A5 58                  <1> 	pop ax
  3681 000017A6 30E4                <1> 	xor ah, ah
  3682 000017A8 E80100              <1>         call main_do_boot_record
  3683 000017AB C3                  <1>         ret
  3684                              <1>         
  3685                              <1> ;=============================================================================
  3686                              <1> ;main_do_boot_record ---- really boot the given record.
  3687                              <1> ;input:
  3688                              <1> ;      ax =  the boot record number.
  3689                              <1> ;=============================================================================
  3690                              <1> main_do_boot_record:
  3691 000017AC B340                <1>         mov bl, SIZE_OF_BOOTRECORD
  3692 000017AE F6E3                <1>         mul bl
  3693                              <1> 
  3694 000017B0 BE[2F02]            <1>         mov si, ADDR_SBMK_BOOT_RECORDS
  3695 000017B3 01C6                <1>         add si, ax
  3696                              <1> 
  3697 000017B5 8B1C                <1> 	mov bx, [si + struc_bootrecord.flags]
  3698                              <1> 
  3699 000017B7 F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  3700 000017BB 7405                <1> 	jz .boot_drv_part
  3701                              <1> 
  3702 000017BD E85A00              <1> 	call main_do_special_record
  3703 000017C0 EB57                <1> 	jmp short .end
  3704                              <1> 
  3705                              <1> .boot_drv_part:
  3706                              <1> %ifndef DISABLE_CDBOOT
  3707 000017C2 F7C31000            <1> 	test bx, DRVFLAG_ISCDROM
  3708 000017C6 743C                <1> 	jz .normal_boot
  3709                              <1> 
  3710 000017C8 8A5402              <1> 	mov dl, [si + struc_bootrecord.drive_id]
  3711 000017CB BF[0D5E]            <1> 	mov di, knl_tmp.disk_buf2
  3712 000017CE E8AC1F              <1> 	call get_cdrom_boot_catalog
  3713 000017D1 723B                <1> 	jc .disk_error
  3714                              <1> 
  3715 000017D3 56                  <1> 	push si
  3716 000017D4 89FE                <1> 	mov si, di
  3717 000017D6 BF[0D56]            <1> 	mov di, knl_tmp.disk_buf1
  3718 000017D9 E8251B              <1> 	call find_cdboot_catalog
  3719 000017DC 5E                  <1> 	pop si
  3720                              <1> 
  3721 000017DD 09C9                <1> 	or cx, cx
  3722 000017DF 7431                <1> 	jz .no_system
  3723 000017E1 83F901              <1> 	cmp cx, 1
  3724 000017E4 740F                <1> 	je .go_boot_cdrom
  3725                              <1> 
  3726 000017E6 56                  <1> 	push si
  3727 000017E7 89FE                <1> 	mov si, di
  3728 000017E9 E86301              <1> 	call main_choose_cdimg
  3729 000017EC 5E                  <1> 	pop si
  3730 000017ED 722A                <1> 	jc .end
  3731                              <1> 
  3732 000017EF B120                <1> 	mov cl, SIZE_OF_BOOT_CATALOG
  3733 000017F1 F6E1                <1> 	mul cl
  3734                              <1> 
  3735 000017F3 01C7                <1> 	add di, ax
  3736                              <1> 
  3737                              <1> .go_boot_cdrom:
  3738 000017F5 52                  <1> 	push dx
  3739 000017F6 57                  <1> 	push di
  3740 000017F7 E83F1B              <1>         call preload_keystrokes     ; preload the keystrokes into key buffer.
  3741 000017FA E8FB03              <1>         call reset_video_mode
  3742 000017FD 5F                  <1> 	pop di
  3743 000017FE 5A                  <1> 	pop dx
  3744 000017FF E8A01A              <1> 	call boot_cdrom
  3745 00001802 EB03                <1> 	jmp short .boot_fail
  3746                              <1> 
  3747                              <1> %endif
  3748                              <1> 
  3749                              <1> .normal_boot:
  3750 00001804 E8DB19              <1>         call boot_normal_record
  3751                              <1> 
  3752                              <1> .boot_fail:
  3753 00001807 E825FB              <1> 	call main_init_video
  3754                              <1> 
  3755 0000180A 08C0                <1>         or al, al
  3756 0000180C 7404                <1>         jz .no_system
  3757                              <1> 
  3758                              <1> .disk_error:
  3759 0000180E E8FEFE              <1>         call main_show_disk_error
  3760 00001811 C3                  <1>         ret
  3761                              <1> 
  3762                              <1> .no_system:
  3763 00001812 8B36[B046]          <1>         mov si, [str_idx.no_system]
  3764 00001816 E80D05              <1>         call error_box
  3765                              <1> 
  3766                              <1> .end:
  3767 00001819 C3                  <1>         ret
  3768                              <1>         
  3769                              <1> 
  3770                              <1> ;=============================================================================
  3771                              <1> ;main_do_special_record ---- execute a special boot record.
  3772                              <1> ;input:
  3773                              <1> ;      si ->  the boot record.
  3774                              <1> ;=============================================================================
  3775                              <1> main_do_special_record:
  3776 0000181A E8DB03              <1> 	call reset_video_mode
  3777 0000181D 8A4404              <1> 	mov al, [si + struc_bootrecord.type]
  3778                              <1> 
  3779 00001820 3C02                <1> 	cmp al, SPREC_POWEROFF
  3780 00001822 7503                <1> 	jne .chk_rst
  3781 00001824 E81710              <1> 	call power_off
  3782                              <1> 
  3783                              <1> .chk_rst:
  3784 00001827 3C03                <1> 	cmp al, SPREC_RESTART
  3785 00001829 7503                <1> 	jne .chk_quit
  3786 0000182B E83511              <1> 	call reboot
  3787                              <1> 
  3788                              <1> .chk_quit:
  3789 0000182E 3C01                <1> 	cmp al, SPREC_QUIT
  3790 00001830 7502                <1> 	jne .chk_bootprev
  3791                              <1> 
  3792                              <1> %ifdef EMULATE_PROG
  3793                              <1>         mov ax, 0x4c00                          ; exit to dos
  3794                              <1>         int 0x21                                ;
  3795                              <1> %else
  3796 00001832 CD18                <1>         int 0x18                                ; return to BIOS
  3797                              <1> %endif
  3798                              <1> 
  3799                              <1> .chk_bootprev:
  3800 00001834 3C00                <1> 	cmp al, SPREC_BOOTPREV
  3801 00001836 7503                <1> 	jne .end
  3802 00001838 E8DA00              <1> 	call main_boot_prev_mbr
  3803                              <1> 
  3804                              <1> .end:
  3805 0000183B C3                  <1> 	ret
  3806                              <1> 
  3807                              <1> ;=============================================================================
  3808                              <1> ;main_do_schedule ---- implement the schedule table
  3809                              <1> ;input:
  3810                              <1> ;      none
  3811                              <1> ;output:
  3812                              <1> ;      default_boot set to the scheduled record
  3813                              <1> ;=============================================================================
  3814                              <1> main_do_schedule:
  3815 0000183C 60                  <1>         pusha
  3816 0000183D E8F811              <1>         call get_realtime
  3817 00001840 723A                <1>         jc .end
  3818                              <1> 
  3819 00001842 A3[D268]            <1>         mov [main_tmp.schedule_begin], ax
  3820 00001845 8916[D668]          <1>         mov [main_tmp.schedule_day], dx
  3821 00001849 31C9                <1>         xor cx, cx
  3822 0000184B BE[2F02]            <1>         mov si, ADDR_SBMK_BOOT_RECORDS
  3823                              <1> 
  3824                              <1> .loop_check:
  3825 0000184E F7040080            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_SCHEDULED
  3826 00001852 741E                <1>         jz .check_next
  3827                              <1> 
  3828 00001854 E83D14              <1>         call check_bootrecord
  3829 00001857 7219                <1>         jc .check_next
  3830                              <1> 
  3831 00001859 E8EF18              <1>         call get_record_schedule
  3832                              <1> 
  3833 0000185C 3906[D268]          <1>         cmp [main_tmp.schedule_begin], ax 
  3834 00001860 7210                <1>         jb .check_next
  3835 00001862 391E[D268]          <1>         cmp [main_tmp.schedule_begin], bx
  3836 00001866 770A                <1>         ja .check_next
  3837                              <1> 
  3838 00001868 8516[D668]          <1>         test dx, [main_tmp.schedule_day]
  3839 0000186C 7404                <1>         jz .check_next
  3840                              <1> 
  3841 0000186E 880E[1C02]          <1>         mov [ADDR_SBMK_DEFAULT_BOOT], cl
  3842                              <1> 
  3843                              <1> .check_next:
  3844 00001872 FEC1                <1>         inc cl
  3845 00001874 83C640              <1>         add si, SIZE_OF_BOOTRECORD
  3846 00001877 80F920              <1>         cmp cl, MAX_RECORD_NUM
  3847 0000187A 72D2                <1>         jb .loop_check
  3848                              <1> 
  3849                              <1> .end:
  3850 0000187C 61                  <1>         popa
  3851 0000187D C3                  <1>         ret
  3852                              <1> 
  3853                              <1> ;=============================================================================
  3854                              <1> ;main_save_boot_manager ---- save boot manager to disk.
  3855                              <1> ;input:
  3856                              <1> ;      none
  3857                              <1> ;output:
  3858                              <1> ;      cf = 0 success
  3859                              <1> ;      cf = 1 failed
  3860                              <1> ;=============================================================================
  3861                              <1> main_save_boot_manager:
  3862 0000187E 60                  <1> 	pusha
  3863 0000187F 06                  <1> 	push es
  3864 00001880 1E                  <1> 	push ds
  3865                              <1> 
  3866                              <1> ; Backup the menus' pos
  3867 00001881 A1[0244]            <1> 	mov ax, [main_windows_data.boot_menu + struc_window.win_pos]
  3868 00001884 A3[2702]            <1> 	mov [ADDR_SBMK_BOOT_MENU_POS], ax
  3869 00001887 A1[2D44]            <1> 	mov ax, [main_windows_data.main_menu + struc_window.win_pos]
  3870 0000188A A3[2902]            <1> 	mov [ADDR_SBMK_MAIN_MENU_POS], ax
  3871 0000188D A1[5844]            <1> 	mov ax, [main_windows_data.record_menu + struc_window.win_pos]
  3872 00001890 A3[2B02]            <1> 	mov [ADDR_SBMK_RECORD_MENU_POS], ax
  3873 00001893 A1[8344]            <1> 	mov ax, [main_windows_data.sys_menu + struc_window.win_pos]
  3874 00001896 A3[2D02]            <1> 	mov [ADDR_SBMK_SYS_MENU_POS], ax
  3875                              <1> 
  3876                              <1> ; ;calculate checksum
  3877                              <1> ; 	push es
  3878                              <1> ; 	pop ds
  3879                              <1> ; 
  3880                              <1> ; 	xor si, si
  3881                              <1> ; 	mov cx, end_of_kernel - start_of_kernel
  3882                              <1> ; 	mov byte [ADDR_SBMK_CHECKSUM], 0
  3883                              <1> ; 	call calc_checksum                      ; calculate the checksum.
  3884                              <1> ; 	neg bl
  3885                              <1> ; 	mov [ADDR_SBMK_CHECKSUM], bl
  3886                              <1> 
  3887 00001899 8A16107E            <1> 	mov dl, [Boot_Drive]
  3888 0000189D 8D36[0002]          <1> 	lea si, [ADDR_SBMK_BLOCK_MAP]
  3889 000018A1 B90500              <1> 	mov cx, SBM_SAVE_NBLKS
  3890 000018A4 31FF                <1> 	xor di, di
  3891                              <1> 
  3892 000018A6 1F                  <1> 	pop ds
  3893                              <1> 
  3894                              <1> .loop_save_blk:
  3895 000018A7 51                  <1> 	push cx
  3896                              <1> 
  3897 000018A8 AC                  <1> 	lodsb
  3898 000018A9 88C1                <1> 	mov cl, al			; number of sectors for this block
  3899 000018AB 66AD                <1> 	lodsd
  3900 000018AD 6689C3              <1> 	mov ebx,eax			; lba address for this block
  3901                              <1>         
  3902 000018B0 B80103              <1> 	mov ax, ( INT13H_WRITE << 8 ) | 1 
  3903                              <1> 
  3904 000018B3 F8                  <1> 	clc
  3905 000018B4 09C9                <1> 	or cx, cx
  3906 000018B6 7413                <1> 	jz .write_end
  3907                              <1> 
  3908                              <1> .loop_write:
  3909 000018B8 E8A51E              <1> 	call disk_access
  3910 000018BB 720E                <1> 	jc .write_end
  3911                              <1>         
  3912                              <1>         ; next sector or something
  3913 000018BD 81C70002            <1> 	add di, 512
  3914 000018C1 6643                <1> 	inc ebx
  3915 000018C3 E2F3                <1> 	loop .loop_write
  3916                              <1> 
  3917 000018C5 59                  <1> 	pop cx
  3918 000018C6 E2DF                <1> 	loop .loop_save_blk
  3919                              <1> 
  3920 000018C8 F8                  <1> 	clc
  3921 000018C9 EB01                <1> 	jmp short .end
  3922                              <1> 
  3923                              <1> .write_end:
  3924 000018CB 59                  <1> 	pop cx
  3925                              <1> 
  3926                              <1> .end:
  3927 000018CC 07                  <1> 	pop es
  3928 000018CD 61                  <1> 	popa
  3929 000018CE C3                  <1> 	ret
  3930                              <1> 
  3931                              <1> 
  3932                              <1> ;=============================================================================
  3933                              <1> ;main_hide_auto_hides ---- hide all partitions that marked auto hide,
  3934                              <1> ;                          except the focus record.
  3935                              <1> ;input:
  3936                              <1> ;      none
  3937                              <1> ;output:
  3938                              <1> ;      cf = 0 success
  3939                              <1> ;      cf = 1 failed
  3940                              <1> ;=============================================================================
  3941                              <1> main_hide_auto_hides:
  3942 000018CF 0FB60E[2244]        <1>         movzx cx, byte [GOOD_RECORD_NUMBER]
  3943 000018D4 08C9                <1>         or cl, cl                               ; if no good record then go to
  3944 000018D6 7429                <1>         jz .end_ok                              ; init directly.
  3945                              <1> 
  3946 000018D8 86E9                <1> 	xchg ch, cl
  3947                              <1>         
  3948                              <1> ; hide all auto hide partitions.
  3949                              <1> .loop_hide:
  3950 000018DA 3A0E[2344]          <1>         cmp cl, [FOCUS_RECORD]                  ; do not hide the focus record.
  3951 000018DE 741B                <1>         je .not_hide
  3952                              <1> 
  3953 000018E0 51                  <1> 	push cx
  3954 000018E1 E88CFE              <1> 	call main_get_record_pointer
  3955 000018E4 59                  <1> 	pop cx
  3956                              <1> 
  3957 000018E5 8B04                <1>         mov ax, [si + struc_bootrecord.flags]
  3958 000018E7 A90004              <1>         test ax, INFOFLAG_AUTOHIDE
  3959 000018EA 740F                <1>         jz .not_hide
  3960 000018EC A90002              <1>         test ax, INFOFLAG_HIDDEN
  3961 000018EF 750A                <1>         jnz .not_hide
  3962                              <1> 
  3963 000018F1 E8AC17              <1>         call toggle_record_hidden
  3964 000018F4 720D                <1>         jc .hidden_error
  3965                              <1> 
  3966 000018F6 E82EFE              <1>         call main_recheck_same_records
  3967 000018F9 720C                <1>         jc .disk_error
  3968                              <1> 
  3969                              <1> .not_hide:
  3970 000018FB FEC1                <1>         inc cl
  3971 000018FD 38E9                <1>         cmp cl, ch
  3972 000018FF 72D9                <1>         jb .loop_hide
  3973                              <1>         
  3974                              <1> .end_ok:
  3975 00001901 F8                  <1>         clc
  3976 00001902 C3                  <1>         ret
  3977                              <1>         
  3978                              <1> .hidden_error:
  3979 00001903 09C0                <1>         or ax, ax
  3980 00001905 7405                <1>         jz .cannot_hide
  3981                              <1> 
  3982                              <1> .disk_error:
  3983 00001907 E805FE              <1>         call main_show_disk_error
  3984 0000190A EB07                <1>         jmp short .end
  3985                              <1> 
  3986                              <1> .cannot_hide:
  3987 0000190C 8B36[AE46]          <1>         mov si, [str_idx.toggle_hid_failed]
  3988 00001910 E81304              <1>         call error_box
  3989                              <1> .end:
  3990 00001913 F9                  <1>         stc
  3991 00001914 C3                  <1>         ret
  3992                              <1> 
  3993                              <1> ;=============================================================================
  3994                              <1> ; main_boot_prev_mbr ---- boot previous MBR
  3995                              <1> ;=============================================================================
  3996                              <1> main_boot_prev_mbr:
  3997                              <1> ; read partition table
  3998 00001915 06                  <1>         push es
  3999 00001916 6631DB              <1>         xor ebx, ebx
  4000 00001919 8EC3                <1>         mov es, bx
  4001 0000191B 8A16107E            <1>         mov dl, [Boot_Drive]
  4002 0000191F BF007C              <1>         mov di, 7C00h
  4003 00001922 B80102              <1>         mov ax, (INT13H_READ << 8) | 0x01
  4004 00001925 E8381E              <1>         call disk_access
  4005 00001928 07                  <1>         pop es
  4006 00001929 7220                <1>         jc .disk_failed
  4007                              <1> 
  4008 0000192B 52                  <1>         push dx
  4009 0000192C 57                  <1>         push di
  4010 0000192D E80CF2              <1>         call main_ask_save_changes
  4011 00001930 E89CFF              <1>         call main_hide_auto_hides
  4012 00001933 E8C202              <1>         call reset_video_mode
  4013 00001936 5F                  <1>         pop di
  4014 00001937 5A                  <1>         pop dx
  4015                              <1> 
  4016 00001938 E8C11E              <1> 	call uninstall_myint13h
  4017                              <1> 
  4018                              <1> ; copy previous mbr to Boot Offset 0x7c00
  4019 0000193B FC                  <1>         cld
  4020                              <1> ;        mov cx, SIZE_OF_MBR
  4021                              <1> ;        lea si, [ADDR_SBMK_PREVIOUS_MBR]
  4022 0000193C 31C0                <1>         xor ax, ax
  4023 0000193E 50                  <1>         push ax
  4024 0000193F 07                  <1>         pop es
  4025 00001940 F3A4                <1>         rep movsb
  4026                              <1> 
  4027 00001942 50                  <1>         push ax
  4028 00001943 1F                  <1>         pop ds
  4029                              <1> 
  4030 00001944 31ED                <1>         xor bp, bp                          ; might help some boot problems
  4031                              <1>         ;mov ax, BR_GOOD_FLAG                ; boot signature (just in case ...)
  4032 00001946 EA007C0000          <1>         jmp 0:7C00h                         ; jump to the  boot sector
  4033                              <1> 
  4034                              <1> .disk_failed:
  4035 0000194B E8C1FD              <1>         call main_show_disk_error
  4036                              <1> .end:
  4037 0000194E C3                  <1>         ret
  4038                              <1> 
  4039                              <1> 
  4040                              <1> ;==============================================================================
  4041                              <1> ; CD-ROM Boot Stuff
  4042                              <1> ;==============================================================================
  4043                              <1> 
  4044                              <1> %ifndef DISABLE_CDBOOT
  4045                              <1> ;==============================================================================
  4046                              <1> ;main_choose_cdimg ---- let user choose a cdimg to boot
  4047                              <1> ;input ds:si -> buffer to store boot catalogs
  4048                              <1> ;      cl = number of entries
  4049                              <1> ;output cf =0 ok, al = user choice
  4050                              <1> ;       cf =1 cancel
  4051                              <1> ;==============================================================================
  4052                              <1> main_choose_cdimg:
  4053 0000194F 53                  <1> 	push bx
  4054 00001950 51                  <1> 	push cx
  4055 00001951 52                  <1> 	push dx
  4056 00001952 56                  <1> 	push si
  4057                              <1> 
  4058 00001953 31D2                <1> 	xor dx, dx
  4059 00001955 8936[9D19]          <1> 	mov [.catalogs_buf], si
  4060 00001959 8A2E[0446]          <1> 	mov ch, [size.list_box_win_height]
  4061 0000195D BB[2847]            <1> 	mov bx, str_idx.cdimg_menu_title
  4062                              <1> 
  4063 00001960 BE[6D19]            <1> 	mov si, .item_str_proc
  4064 00001963 E84D08              <1> 	call list_box
  4065 00001966 88C8                <1> 	mov al, cl
  4066                              <1> 
  4067 00001968 5E                  <1> 	pop si
  4068 00001969 5A                  <1> 	pop dx
  4069 0000196A 59                  <1> 	pop cx
  4070 0000196B 5B                  <1> 	pop bx
  4071 0000196C C3                  <1> 	ret
  4072                              <1> 
  4073                              <1> .item_str_proc:
  4074 0000196D 8B36[9D19]          <1> 	mov si, [.catalogs_buf]
  4075 00001971 BF[5771]            <1> 	mov di, main_tmp.dialog_buf
  4076 00001974 57                  <1> 	push di
  4077 00001975 B82000              <1> 	mov ax, SIZE_OF_BOOT_CATALOG
  4078 00001978 F6E1                <1> 	mul cl
  4079 0000197A 01C6                <1> 	add si, ax
  4080                              <1> 
  4081 0000197C 89C8                <1> 	mov ax, cx
  4082 0000197E B102                <1> 	mov cl, 2
  4083 00001980 E86E0D              <1> 	call itoa
  4084 00001983 83C702              <1> 	add di, 2
  4085 00001986 B82E20              <1> 	mov ax, '. '
  4086 00001989 FC                  <1> 	cld
  4087 0000198A AB                  <1> 	stosw
  4088                              <1> 
  4089 0000198B 0FB64401            <1> 	movzx ax, [si + struc_boot_catalog.media_type]
  4090                              <1> 
  4091 0000198F D0E0                <1> 	shl al, 1
  4092                              <1> 
  4093 00001991 BE[2A47]            <1> 	mov si, str_idx.cdimg_menu_strings
  4094 00001994 01C6                <1> 	add si, ax
  4095 00001996 8B34                <1> 	mov si, [si]
  4096 00001998 E8FD0D              <1> 	call strcpy
  4097 0000199B 5E                  <1> 	pop si
  4098 0000199C C3                  <1> 	ret
  4099                              <1> 
  4100 0000199D 0000                <1> .catalogs_buf dw 0
  4101                              <1> 
  4102                              <1> %endif
  4103                                  %include "ui.asm"
  4104                              <1> ; asmsyntax=nasm
  4105                              <1> ;
  4106                              <1> ; ui.asm
  4107                              <1> ;
  4108                              <1> ; Functions for User Interface
  4109                              <1> ;
  4110                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
  4111                              <1> ;
  4112                              <1> 
  4113                              <1> %define DIRECT_DRAW
  4114                              <1> 
  4115                              <1> %define SCR_BUF_SEG0    0xB800
  4116                              <1> %define SCR_BUF_SEG1    0xB900
  4117                              <1> %define SCR_BUF_SEG2    0xBA00
  4118                              <1> %define SCR_PAGE_SEGS   0x0100
  4119                              <1> 
  4120                              <1> %define SCR_BAK_SEG     0x0900
  4121                              <1> %define BIOS_DATA_SEG   0x0040
  4122                              <1> 
  4123                              <1> %define BIOS_KEYSTAT_OFF 0x0017
  4124                              <1> 
  4125                              <1> %define WINDOW_DEF_ACTION_NUM  (window_def_action_table.end_of_table - window_def_action_table) / SIZE_OF_STRUC_ACTION
  4126                              <1> %define MENUBOX_DEF_ACTION_NUM  (menubox_def_action_table.end_of_table - menubox_def_action_table) / SIZE_OF_STRUC_ACTION
  4127                              <1> %define LISTBOX_ACTION_NUM  (listbox_action_table.end_of_table - listbox_action_table) / SIZE_OF_STRUC_ACTION
  4128                              <1> %define INPUTBOX_ACTION_NUM  (inputbox_action_table.end_of_table - inputbox_action_table) / SIZE_OF_STRUC_ACTION
  4129                              <1>       bits 16
  4130                              <1> 
  4131                              <1> 
  4132                              <1> ;=============================================================================
  4133                              <1> ; <<<<<<<<<<<<<<<<<<< Basic Drawing and Screen functions >>>>>>>>>>>>>>>>>>>>>
  4134                              <1> ;=============================================================================
  4135                              <1> 
  4136                              <1> %if 1
  4137                              <1> ;=============================================================================
  4138                              <1> ;draw_string_hl ---- Draw a zero ending string with highlighted characters 
  4139                              <1> ;                    at special position
  4140                              <1> ;input:
  4141                              <1> ;      bl = attribute for normal characters
  4142                              <1> ;           high 4 bit Background color and low 4 bit Foreground color
  4143                              <1> ;      bh = attribute for hightlight characters
  4144                              <1> ;      dh = start row
  4145                              <1> ;      dl = start column
  4146                              <1> ;      ds:si -> the string to be displayed
  4147                              <1> ;output:
  4148                              <1> ;      none
  4149                              <1> ;=============================================================================
  4150                              <1> draw_string:
  4151                              <1> draw_string_hl:
  4152 0000199F 60                  <1>         pusha
  4153 000019A0 52                  <1>         push dx
  4154 000019A1 B90100              <1>         mov cx,1
  4155 000019A4 FC                  <1>         cld
  4156                              <1> .start:
  4157                              <1> 
  4158 000019A5 AC                  <1>         lodsb
  4159 000019A6 08C0                <1>         or al,al
  4160 000019A8 7419                <1>         jz .end
  4161                              <1> 
  4162 000019AA 3C0D                <1>         cmp al,0x0d                ; if need Change row
  4163 000019AC 7506                <1>         jne .no_cr
  4164 000019AE 5A                  <1>         pop dx
  4165 000019AF FEC6                <1>         inc dh
  4166 000019B1 52                  <1>         push dx
  4167 000019B2 EBF1                <1>         jmp short .start
  4168                              <1> 
  4169                              <1> .no_cr:
  4170 000019B4 3C7E                <1>         cmp al, '~'
  4171 000019B6 7504                <1>         jne .draw_it
  4172 000019B8 86FB                <1>         xchg bh, bl
  4173 000019BA EB05                <1>         jmp short .next_char
  4174                              <1> 
  4175                              <1> .draw_it:
  4176 000019BC E80700              <1>         call draw_char
  4177                              <1> 
  4178 000019BF FEC2                <1>         inc dl
  4179                              <1> .next_char:
  4180 000019C1 EBE2                <1>         jmp short .start
  4181                              <1> .end:
  4182 000019C3 5A                  <1>         pop dx
  4183 000019C4 61                  <1>         popa
  4184 000019C5 C3                  <1>         ret
  4185                              <1> ;=============================================================================
  4186                              <1> %endif
  4187                              <1> 
  4188                              <1> %if 0
  4189                              <1> ;=============================================================================
  4190                              <1> ;draw_string ---- Draw a zero ending string at special position
  4191                              <1> ;input:
  4192                              <1> ;      bl = high 4 bit Background color and low 4 bit Foreground color
  4193                              <1> ;      dh = start row
  4194                              <1> ;      dl = start column
  4195                              <1> ;      ds:si -> the string to be displayed
  4196                              <1> ;output:
  4197                              <1> ;      none
  4198                              <1> ;=============================================================================
  4199                              <1> draw_string_hl:
  4200                              <1> draw_string:
  4201                              <1>         pusha
  4202                              <1>         push dx
  4203                              <1>         mov cx,1
  4204                              <1>         cld
  4205                              <1> .start:
  4206                              <1> 
  4207                              <1>         lodsb
  4208                              <1>         or al,al
  4209                              <1>         jz .end
  4210                              <1> 
  4211                              <1>         cmp al,0x0d                ; if need Change row
  4212                              <1>         jne .no_cr
  4213                              <1>         pop dx
  4214                              <1>         inc dh
  4215                              <1>         push dx
  4216                              <1>         jmp short .start
  4217                              <1> 
  4218                              <1> .no_cr:
  4219                              <1>         call draw_char
  4220                              <1> 
  4221                              <1>         inc dl
  4222                              <1>         jmp short .start
  4223                              <1> .end:
  4224                              <1>         pop dx
  4225                              <1>         popa
  4226                              <1>         ret
  4227                              <1> ;=============================================================================
  4228                              <1> %endif
  4229                              <1> 
  4230                              <1> ;=============================================================================
  4231                              <1> ;draw_char ---- Draw chars at special position
  4232                              <1> ;input:
  4233                              <1> ;      bl = high 4 bit Background color and low 4 bit Foreground color
  4234                              <1> ;      dh = start row
  4235                              <1> ;      dl = start column
  4236                              <1> ;      al = the char to be displayed
  4237                              <1> ;      cx = repeat times
  4238                              <1> ;output:
  4239                              <1> ;      none
  4240                              <1> ;=============================================================================
  4241                              <1> draw_char:
  4242                              <1> %ifdef DIRECT_DRAW                            ; directly write to video buffer
  4243 000019C6 60                  <1>         pusha
  4244 000019C7 06                  <1>         push es
  4245 000019C8 FC                  <1> 	cld
  4246                              <1> 
  4247 000019C9 88DC                <1>         mov ah, bl
  4248 000019CB 50                  <1>         push ax
  4249                              <1> 
  4250 000019CC FF36[2026]          <1> 	push word [ui_screen_bufseg]
  4251 000019D0 07                  <1> 	pop es
  4252                              <1> 
  4253 000019D1 A0[1E26]            <1>         mov al, [ui_screen_width]
  4254 000019D4 F6E6                <1>         mul dh
  4255 000019D6 30F6                <1>         xor dh, dh
  4256 000019D8 01D0                <1>         add ax, dx
  4257 000019DA D1E0                <1>         shl ax, 1
  4258 000019DC 89C7                <1>         mov di, ax
  4259                              <1> 
  4260 000019DE 58                  <1>         pop ax
  4261 000019DF F3AB                <1>         rep stosw
  4262 000019E1 07                  <1>         pop es
  4263 000019E2 61                  <1>         popa
  4264                              <1> %else
  4265                              <1>         push bx
  4266                              <1>         mov ah,2
  4267                              <1>         mov bh, [ui_screen_page]
  4268                              <1>         int 0x10
  4269                              <1>         mov ah,0x09
  4270                              <1>         int 0x10
  4271                              <1>         pop bx
  4272                              <1> %endif
  4273 000019E3 C3                  <1>         ret
  4274                              <1> ;=============================================================================
  4275                              <1> 
  4276                              <1> ;=============================================================================
  4277                              <1> ;clear_screen ---- clear a screen area
  4278                              <1> ;input:
  4279                              <1> ;      ch = row of top left corner
  4280                              <1> ;      cl = column of top left corner
  4281                              <1> ;      dh = row of bottom right corner
  4282                              <1> ;      dl = column of bottom right corner
  4283                              <1> ;      bh = attribute
  4284                              <1> ;output:
  4285                              <1> ;      none
  4286                              <1> ;=============================================================================
  4287                              <1> clear_screen:
  4288 000019E4 60                  <1>         pusha
  4289                              <1> %ifdef DIRECT_DRAW
  4290 000019E5 06                  <1>         push es
  4291 000019E6 FC                  <1> 	cld
  4292                              <1> 
  4293 000019E7 88FC                <1>         mov ah, bh
  4294 000019E9 B020                <1>         mov al, ' '
  4295                              <1> 
  4296 000019EB FF36[2026]          <1> 	push word [ui_screen_bufseg]
  4297 000019EF 07                  <1> 	pop es
  4298                              <1> 
  4299 000019F0 28CA                <1>         sub dl, cl
  4300 000019F2 FEC2                <1>         inc dl
  4301                              <1> 
  4302                              <1> .loop_fill:
  4303 000019F4 51                  <1>         push cx
  4304 000019F5 50                  <1>         push ax
  4305                              <1> 
  4306 000019F6 A0[1E26]            <1>         mov al, [ui_screen_width]
  4307 000019F9 F6E5                <1>         mul ch
  4308 000019FB 30ED                <1>         xor ch, ch
  4309 000019FD 01C8                <1>         add ax, cx
  4310 000019FF D1E0                <1>         shl ax, 1
  4311 00001A01 89C7                <1>         mov di, ax
  4312 00001A03 88D1                <1>         mov cl, dl
  4313                              <1> 
  4314 00001A05 58                  <1>         pop ax
  4315 00001A06 F3AB                <1>         rep stosw
  4316 00001A08 59                  <1>         pop cx
  4317 00001A09 FEC5                <1>         inc ch
  4318 00001A0B 38F5                <1>         cmp ch, dh
  4319 00001A0D 76E5                <1>         jbe .loop_fill
  4320                              <1> 
  4321 00001A0F 07                  <1>         pop es
  4322                              <1> %else
  4323                              <1>         mov ax, 0x0600
  4324                              <1>         int 0x10
  4325                              <1> %endif
  4326 00001A10 61                  <1>         popa
  4327 00001A11 C3                  <1>         ret
  4328                              <1> 
  4329                              <1> ;=============================================================================
  4330                              <1> ;read_scrchar ---- read a char from the screen
  4331                              <1> ;input:
  4332                              <1> ;       dh = row
  4333                              <1> ;       dl = column
  4334                              <1> ;output:
  4335                              <1> ;       ax = char with attribute
  4336                              <1> ;=============================================================================
  4337                              <1> read_scrchar:
  4338                              <1> %ifdef DIRECT_DRAW
  4339 00001A12 1E                  <1>         push ds
  4340 00001A13 52                  <1>         push dx
  4341 00001A14 56                  <1>         push si
  4342                              <1> 
  4343 00001A15 A0[1E26]            <1>         mov al, [ui_screen_width]
  4344 00001A18 F6E6                <1>         mul dh
  4345 00001A1A 30F6                <1>         xor dh, dh
  4346 00001A1C 01D0                <1>         add ax, dx
  4347 00001A1E D1E0                <1>         shl ax, 1
  4348 00001A20 89C6                <1>         mov si, ax
  4349                              <1> 
  4350 00001A22 FF36[2026]          <1> 	push word [ui_screen_bufseg]
  4351 00001A26 1F                  <1> 	pop ds
  4352                              <1> 
  4353 00001A27 AD                  <1>         lodsw
  4354 00001A28 5E                  <1>         pop si
  4355 00001A29 5A                  <1>         pop dx
  4356 00001A2A 1F                  <1>         pop ds
  4357                              <1> %else
  4358                              <1>         push bx
  4359                              <1>         mov bh, [ui_screen_page]
  4360                              <1>         mov ah,0x02
  4361                              <1>         int 0x10
  4362                              <1>         mov ah,0x08
  4363                              <1>         int 0x10
  4364                              <1>         pop bx
  4365                              <1> %endif
  4366 00001A2B C3                  <1>         ret
  4367                              <1> 
  4368                              <1> %if 0
  4369                              <1> ;=============================================================================
  4370                              <1> ;draw_string_tty ---- Draw a string ending by zero ( tty mode )
  4371                              <1> ;input:
  4372                              <1> ;      ds:si -> string
  4373                              <1> ;output:
  4374                              <1> ;      none
  4375                              <1> ;=============================================================================
  4376                              <1> draw_string_tty:
  4377                              <1>         pusha
  4378                              <1>         cld
  4379                              <1> .draw1:
  4380                              <1>         lodsb
  4381                              <1>         or al, al
  4382                              <1>         jz .end
  4383                              <1>         mov bx,7
  4384                              <1>         mov ah,0x0e
  4385                              <1>         int 0x10
  4386                              <1>         jmp short .draw1
  4387                              <1> .end:
  4388                              <1>         popa
  4389                              <1>         ret
  4390                              <1> ;=============================================================================
  4391                              <1> %endif
  4392                              <1> 
  4393                              <1> ;=============================================================================
  4394                              <1> ;draw_window ---- Draw a framed window
  4395                              <1> ;input:
  4396                              <1> ;      ch = row of top left corner
  4397                              <1> ;      cl = column of top left corner
  4398                              <1> ;      dh = row of bottom right corner
  4399                              <1> ;      dl = column of bottom right corner
  4400                              <1> ;      bl = high 4 bit Background color and low 4 bit Foreground color
  4401                              <1> ;      bh = title attribute (define same as bl)
  4402                              <1> ;      ds:si -> title
  4403                              <1> ;output:
  4404                              <1> ;      none
  4405                              <1> ;=============================================================================
  4406                              <1> draw_window:
  4407 00001A2C 60                  <1>         pusha
  4408 00001A2D 890E[0D66]          <1>         mov [ui_tmp.left_col], cx          ;
  4409 00001A31 8916[0F66]          <1>         mov [ui_tmp.right_col], dx         ; save window pos and attribute
  4410 00001A35 891E[1166]          <1>         mov [ui_tmp.frame_attr], bx        ;
  4411                              <1> 
  4412                              <1> ;Clear frame background
  4413 00001A39 86FB                <1>         xchg bh,bl
  4414 00001A3B E8A6FF              <1>         call clear_screen
  4415                              <1> 
  4416 00001A3E 87D1                <1>         xchg dx,cx
  4417 00001A40 B90100              <1>         mov cx,1
  4418                              <1> 
  4419                              <1> ;Draw four corners
  4420 00001A43 8A1E[1166]          <1>         mov bl, [ui_tmp.frame_attr]
  4421 00001A47 803E[4B46]02        <1>         cmp byte [draw_frame_method], 2             ; check draw method.
  4422 00001A4C 7204                <1>         jb .draw_top_corner
  4423 00001A4E 8A1E[1266]          <1>         mov bl, [ui_tmp.title_attr]
  4424                              <1> .draw_top_corner:
  4425 00001A52 A0[4746]            <1>         mov al, [frame_char.tl_corner]
  4426 00001A55 E86EFF              <1>         call draw_char
  4427                              <1> 
  4428 00001A58 8A16[0F66]          <1>         mov dl, [ui_tmp.right_col]
  4429 00001A5C A0[4846]            <1>         mov al, [frame_char.tr_corner]
  4430 00001A5F E864FF              <1>         call draw_char
  4431                              <1> 
  4432 00001A62 8A1E[1166]          <1>         mov bl, [ui_tmp.frame_attr]
  4433 00001A66 8A36[1066]          <1>         mov dh, [ui_tmp.bottom_row]
  4434 00001A6A A0[4A46]            <1>         mov al, [frame_char.br_corner]
  4435 00001A6D E856FF              <1>         call draw_char
  4436                              <1>   
  4437 00001A70 8A16[0D66]          <1>         mov dl, [ui_tmp.left_col]
  4438 00001A74 A0[4946]            <1>         mov al, [frame_char.bl_corner]
  4439 00001A77 E84CFF              <1>         call draw_char
  4440                              <1> 
  4441                              <1> ;Draw bottom horizontal line
  4442 00001A7A FEC2                <1>         inc dl
  4443 00001A7C 8A0E[0F66]          <1>         mov cl, [ui_tmp.right_col]
  4444 00001A80 28D1                <1>         sub cl, dl
  4445 00001A82 A0[4446]            <1>         mov al, [frame_char.bottom]
  4446 00001A85 E83EFF              <1>         call draw_char
  4447                              <1> 
  4448                              <1> ;Draw top horizontal line
  4449 00001A88 8A1E[1166]          <1>         mov bl, [ui_tmp.frame_attr]
  4450 00001A8C 803E[4B46]01        <1>         cmp byte [draw_frame_method], 1             ; check draw method.
  4451 00001A91 7204                <1>         jb .draw_top_line
  4452 00001A93 8A1E[1266]          <1>         mov bl, [ui_tmp.title_attr]
  4453                              <1> .draw_top_line:
  4454 00001A97 8A36[0E66]          <1>         mov dh, [ui_tmp.top_row]
  4455 00001A9B A0[4346]            <1>         mov al, [frame_char.top]
  4456 00001A9E E825FF              <1>         call draw_char
  4457                              <1> 
  4458                              <1> ;Draw title
  4459 00001AA1 E89B0C              <1>         call strlen
  4460 00001AA4 09C9                <1>         or cx,cx
  4461 00001AA6 741E                <1>         jz .no_title
  4462                              <1> 
  4463 00001AA8 A0[0F66]            <1>         mov al, [ui_tmp.right_col]
  4464 00001AAB 2A06[0D66]          <1>         sub al, [ui_tmp.left_col]
  4465 00001AAF 28C8                <1>         sub al, cl
  4466 00001AB1 FEC0                <1>         inc al
  4467 00001AB3 D0E8                <1>         shr al,1
  4468 00001AB5 8A16[0D66]          <1>         mov dl, [ui_tmp.left_col]
  4469 00001AB9 00C2                <1>         add dl,al
  4470 00001ABB 8A36[0E66]          <1>         mov dh, [ui_tmp.top_row]
  4471                              <1> 
  4472 00001ABF 8A1E[1266]          <1>         mov bl, [ui_tmp.title_attr]
  4473 00001AC3 E8D9FE              <1>         call draw_string
  4474                              <1> 
  4475                              <1> .no_title:
  4476                              <1> 
  4477                              <1> ;Draw vertical line
  4478 00001AC6 8A1E[1166]          <1>         mov bl, [ui_tmp.frame_attr]
  4479 00001ACA 8A36[0E66]          <1>         mov dh, [ui_tmp.top_row]
  4480 00001ACE FEC6                <1>         inc dh
  4481                              <1> 
  4482 00001AD0 B90100              <1>         mov cx,1
  4483                              <1> 
  4484                              <1> .draw_vert_line:
  4485 00001AD3 A0[4546]            <1>         mov al, [frame_char.left]
  4486 00001AD6 8A16[0D66]          <1>         mov dl, [ui_tmp.left_col]
  4487 00001ADA E8E9FE              <1>         call draw_char
  4488 00001ADD A0[4646]            <1>         mov al, [frame_char.right]
  4489 00001AE0 8A16[0F66]          <1>         mov dl, [ui_tmp.right_col]
  4490 00001AE4 E8DFFE              <1>         call draw_char
  4491                              <1> 
  4492 00001AE7 FEC6                <1>         inc dh
  4493 00001AE9 3A36[1066]          <1>         cmp dh, [ui_tmp.bottom_row]
  4494 00001AED 72E4                <1>         jb .draw_vert_line
  4495                              <1> 
  4496                              <1> ;Draw shadow
  4497 00001AEF B308                <1>         mov bl, 0x08
  4498 00001AF1 8A2E[1066]          <1>         mov ch, [ui_tmp.bottom_row]
  4499 00001AF5 8A0E[0D66]          <1>         mov cl, [ui_tmp.left_col]
  4500 00001AF9 FEC5                <1>         inc ch
  4501 00001AFB 80C102              <1> 	add cl, 2
  4502 00001AFE 8A36[1066]          <1>         mov dh, [ui_tmp.bottom_row]
  4503 00001B02 8A16[0F66]          <1>         mov dl, [ui_tmp.right_col]
  4504 00001B06 FEC6                <1>         inc dh
  4505 00001B08 E81400              <1>         call draw_shadow
  4506 00001B0B 8A2E[0E66]          <1>         mov ch, [ui_tmp.top_row]
  4507 00001B0F 8A0E[0F66]          <1>         mov cl, [ui_tmp.right_col]
  4508 00001B13 FEC5                <1>         inc ch
  4509 00001B15 FEC1                <1>         inc cl
  4510 00001B17 80C202              <1> 	add dl, 2
  4511 00001B1A E80200              <1>         call draw_shadow
  4512                              <1> 
  4513 00001B1D 61                  <1>         popa
  4514 00001B1E C3                  <1>         ret
  4515                              <1> ;=============================================================================
  4516                              <1> 
  4517                              <1> ;=============================================================================
  4518                              <1> ;draw_shadow ---- Draw shadow block
  4519                              <1> ;input:
  4520                              <1> ;      ch = row of top left corner
  4521                              <1> ;      cl = column of top left corner
  4522                              <1> ;      dh = row of bottom right corner
  4523                              <1> ;      dl = column of bottom right corner
  4524                              <1> ;      bl = high 4 bit Background color and low 4 bit Foreground color
  4525                              <1> ;output:
  4526                              <1> ;      none
  4527                              <1> ;=============================================================================
  4528                              <1> draw_shadow:
  4529 00001B1F 60                  <1>         pusha
  4530                              <1> .loop_row:
  4531 00001B20 52                  <1>         push dx
  4532                              <1> .loop_col:
  4533 00001B21 51                  <1>         push cx
  4534 00001B22 B90100              <1>         mov cx,1
  4535 00001B25 E8EAFE              <1>         call read_scrchar
  4536 00001B28 E89BFE              <1>         call draw_char
  4537 00001B2B 59                  <1>         pop cx
  4538 00001B2C FECA                <1>         dec dl
  4539 00001B2E 38D1                <1>         cmp cl, dl
  4540 00001B30 76EF                <1>         jbe .loop_col
  4541 00001B32 5A                  <1>         pop dx
  4542 00001B33 FECE                <1>         dec dh
  4543 00001B35 38F5                <1>         cmp ch, dh
  4544 00001B37 76E7                <1>         jbe .loop_row
  4545                              <1> 
  4546 00001B39 61                  <1>         popa
  4547 00001B3A C3                  <1>         ret
  4548                              <1> ;=============================================================================
  4549                              <1> 
  4550                              <1> 
  4551                              <1> ;=============================================================================
  4552                              <1> ;set_video_mode ---- Set the Alphabet Video Mode
  4553                              <1> ;input:
  4554                              <1> ;      al = 0 , set screen resolution to 90x25,
  4555                              <1> ;           otherwise set to 80x25
  4556                              <1> ;      bl = character bit size ( 8 or 9 )
  4557                              <1> ;      cx = fonts number
  4558                              <1> ;      es:bp -> fonts data
  4559                              <1> ;output:
  4560                              <1> ;      none
  4561                              <1> ;=============================================================================
  4562                              <1> BIOS_CRT_COLS        equ 0x4A
  4563                              <1> BIOS_ADDR_6845       equ 0x63
  4564                              <1> 
  4565                              <1> set_video_mode:
  4566 00001B3B 06                  <1>         push es
  4567 00001B3C 53                  <1>         push bx
  4568 00001B3D 50                  <1>         push ax
  4569                              <1> 
  4570 00001B3E E8B700              <1>         call reset_video_mode
  4571                              <1> 
  4572                              <1> ;Establish CRTC vertical timing and cursor position in character matrix
  4573                              <1> ;and set user fonts table
  4574 00001B41 09C9                <1>         or cx, cx
  4575 00001B43 741D                <1>         jz .set_res                          ; no font data
  4576 00001B45 09ED                <1>         or bp, bp
  4577 00001B47 7419                <1>         jz .set_res                          ; no font data
  4578                              <1>         
  4579                              <1> .loop_set_fonts:                             ; set user defined chars
  4580 00001B49 51                  <1>         push cx
  4581 00001B4A 31C9                <1>         xor cx,cx
  4582 00001B4C FEC1                <1>         inc cl
  4583 00001B4E 260FB65600          <1>         movzx dx, byte [es:bp]
  4584 00001B53 45                  <1>         inc bp
  4585 00001B54 B80011              <1>         mov ax,0x1100
  4586 00001B57 BB0010              <1>         mov bx,0x1000
  4587 00001B5A CD10                <1>         int 0x10
  4588 00001B5C 59                  <1>         pop cx
  4589 00001B5D 83C510              <1>         add bp, 16
  4590 00001B60 E2E7                <1>         loop .loop_set_fonts
  4591                              <1> 
  4592                              <1> .set_res:
  4593 00001B62 C606[1E26]50        <1>         mov byte [ui_screen_width], 80
  4594 00001B67 C606[1F26]19        <1>         mov byte [ui_screen_height], 25
  4595                              <1> 
  4596 00001B6C B84000              <1>         mov ax,0x40
  4597 00001B6F 8EC0                <1>         mov es,ax
  4598 00001B71 58                  <1>         pop ax
  4599                              <1> 
  4600 00001B72 08C0                <1>         or al,al
  4601 00001B74 7540                <1>         jnz .skip_res_set
  4602                              <1> 
  4603 00001B76 268B166300          <1>         mov dx,[es:BIOS_ADDR_6845]                   ; CRTC I/O port
  4604                              <1> 
  4605                              <1> ;Enable I/O writes to CRTC registers
  4606 00001B7B B011                <1>         mov al,0x11
  4607 00001B7D EE                  <1>         out dx,al
  4608 00001B7E 42                  <1>         inc dx
  4609 00001B7F EC                  <1>         in al,dx
  4610 00001B80 4A                  <1>         dec dx
  4611 00001B81 88C4                <1>         mov ah,al
  4612 00001B83 B011                <1>         mov al,0x11
  4613 00001B85 50                  <1>         push ax
  4614 00001B86 80E47F              <1>         and ah,01111111b
  4615 00001B89 EF                  <1>         out dx,ax
  4616                              <1> 
  4617                              <1> ;Establish CRTC horizontal timing
  4618 00001B8A 8D36[1026]          <1>         lea si, [ui_VideoHorizParams]
  4619                              <1> 
  4620 00001B8E B90700              <1>         mov cx,7
  4621                              <1>         
  4622 00001B91 FC                  <1>         cld
  4623                              <1> .set_CRTC:
  4624 00001B92 AD                  <1>         lodsw
  4625 00001B93 EF                  <1>         out dx,ax
  4626 00001B94 E2FC                <1>         loop .set_CRTC
  4627                              <1> 
  4628                              <1> ;write-protect CRTC registers
  4629 00001B96 58                  <1>         pop ax
  4630 00001B97 EF                  <1>         out dx,ax
  4631                              <1> 
  4632                              <1> ;Program the Sequencer and Attribute Controller for 9 dots per character
  4633                              <1>         
  4634 00001B98 BAC403              <1>         mov dx, 0x3c4
  4635 00001B9B B80001              <1>         mov ax, 0x0100
  4636 00001B9E FA                  <1>         cli
  4637 00001B9F EF                  <1>         out dx,ax
  4638                              <1> 
  4639 00001BA0 B80101              <1>         mov ax,0x0101
  4640 00001BA3 EF                  <1>         out dx,ax
  4641 00001BA4 B80003              <1>         mov ax,0x0300
  4642 00001BA7 EF                  <1>         out dx,ax
  4643 00001BA8 FB                  <1>         sti
  4644                              <1> 
  4645 00001BA9 BB1300              <1>         mov bx,0x0013
  4646 00001BAC B80010              <1>         mov ax,0x1000
  4647 00001BAF CD10                <1>         int 0x10
  4648                              <1> 
  4649 00001BB1 C606[1E26]5A        <1>         mov byte [ui_screen_width], 90
  4650                              <1> .skip_res_set:
  4651                              <1> 
  4652                              <1> ;Program the Attribute Controller for 8- or 9-bit character codes
  4653 00001BB6 B80010              <1>         mov ax,0x1000
  4654 00001BB9 BB120F              <1>         mov bx,0x0f12
  4655 00001BBC 5A                  <1>         pop dx
  4656 00001BBD 80FA08              <1>         cmp dl,8
  4657 00001BC0 7402                <1>         je .svm01
  4658 00001BC2 B707                <1>         mov bh,7
  4659                              <1> .svm01:
  4660 00001BC4 CD10                <1>         int 0x10
  4661                              <1> 
  4662                              <1> ;Update video BIOS data area
  4663 00001BC6 A0[1E26]            <1>         mov al,[ui_screen_width]
  4664 00001BC9 26A24A00            <1>         mov [es:BIOS_CRT_COLS],al
  4665                              <1> 
  4666                              <1> ;Set background highlight attribute
  4667 00001BCD 07                  <1>         pop es
  4668 00001BCE B80310              <1>         mov ax,0x1003
  4669 00001BD1 30DB                <1>         xor bl,bl
  4670 00001BD3 CD10                <1>         int 0x10
  4671 00001BD5 E80C00              <1>         call hide_cursor
  4672                              <1> 
  4673 00001BD8 C3                  <1>         ret
  4674                              <1> ;=============================================================================
  4675                              <1> 
  4676                              <1> ;=============================================================================
  4677                              <1> ;set_cursor ---- move the cursor
  4678                              <1> ;input:
  4679                              <1> ;       dh = row
  4680                              <1> ;       dl = column
  4681                              <1> ;=============================================================================
  4682                              <1> set_cursor:
  4683 00001BD9 60                  <1> 	pusha
  4684 00001BDA 8A3E[2226]          <1>         mov bh, [ui_screen_page]
  4685 00001BDE B402                <1>         mov ah, 0x02
  4686 00001BE0 CD10                <1>         int 0x10
  4687 00001BE2 61                  <1> 	popa
  4688 00001BE3 C3                  <1>         ret
  4689                              <1> 
  4690                              <1> ;=============================================================================
  4691                              <1> ;hide_cursor ---- Hide the cursor
  4692                              <1> ;input:
  4693                              <1> ;      none
  4694                              <1> ;output:
  4695                              <1> ;      none
  4696                              <1> ;=============================================================================
  4697                              <1> hide_cursor:
  4698 00001BE4 60                  <1>         pusha
  4699 00001BE5 B401                <1>         mov ah,1
  4700 00001BE7 B9006F              <1>         mov cx,0x6f00
  4701 00001BEA CD10                <1>         int 0x10
  4702 00001BEC 61                  <1>         popa
  4703 00001BED C3                  <1>         ret
  4704                              <1> ;=============================================================================
  4705                              <1> 
  4706                              <1> ;=============================================================================
  4707                              <1> ;show_cursor ---- Show the cursor
  4708                              <1> ;input:
  4709                              <1> ;      none
  4710                              <1> ;output:
  4711                              <1> ;      none
  4712                              <1> ;=============================================================================
  4713                              <1> show_cursor:
  4714 00001BEE 60                  <1>         pusha
  4715 00001BEF B401                <1>         mov ah,1
  4716 00001BF1 B90F0E              <1>         mov cx,0x0e0f
  4717 00001BF4 CD10                <1>         int 0x10
  4718 00001BF6 61                  <1>         popa
  4719 00001BF7 C3                  <1>         ret
  4720                              <1> ;=============================================================================
  4721                              <1> 
  4722                              <1> ;=============================================================================
  4723                              <1> ;reset_video_mode ---- Reset the VideoMode
  4724                              <1> ;input:
  4725                              <1> ;      none
  4726                              <1> ;output:
  4727                              <1> ;      none
  4728                              <1> ;=============================================================================
  4729                              <1> reset_video_mode
  4730 00001BF8 60                  <1>         pusha
  4731 00001BF9 B80300              <1>         mov ax,3
  4732 00001BFC CD10                <1>         int 0x10
  4733 00001BFE E8EDFF              <1>         call show_cursor
  4734 00001C01 61                  <1>         popa
  4735 00001C02 C3                  <1>         ret
  4736                              <1> ;=============================================================================
  4737                              <1> 
  4738                              <1> 
  4739                              <1> ;=============================================================================
  4740                              <1> ;draw_icon ---- Draw a icon at special position
  4741                              <1> ;input:
  4742                              <1> ;      dh = start row
  4743                              <1> ;      dl = start column
  4744                              <1> ;      ch = number of row
  4745                              <1> ;      cl = number of column
  4746                              <1> ;      ds:si -> icon data , which is a two dim word array, each elements
  4747                              <1> ;               indicates a char. high byte is the attribute, low byte is
  4748                              <1> ;               is the char code.
  4749                              <1> ;output:
  4750                              <1> ;      none
  4751                              <1> ;=============================================================================
  4752                              <1> draw_icon:
  4753 00001C03 09F6                <1>         or si, si
  4754 00001C05 7422                <1>         jz .end
  4755 00001C07 09C9                <1>         or cx, cx
  4756 00001C09 741E                <1>         jz .end
  4757                              <1>         
  4758 00001C0B 60                  <1>         pusha
  4759 00001C0C FC                  <1>         cld
  4760                              <1> .loop_row:
  4761 00001C0D 52                  <1>         push dx
  4762 00001C0E 51                  <1>         push cx
  4763                              <1> .loop_col:
  4764 00001C0F 51                  <1>         push cx
  4765 00001C10 B90100              <1>         mov cx,1
  4766 00001C13 AD                  <1>         lodsw
  4767 00001C14 86E3                <1>         xchg ah,bl
  4768 00001C16 E8ADFD              <1>         call draw_char
  4769                              <1>         
  4770 00001C19 59                  <1>         pop cx
  4771 00001C1A FEC2                <1>         inc dl
  4772 00001C1C FEC9                <1>         dec cl
  4773 00001C1E 75EF                <1>         jnz .loop_col
  4774                              <1>         
  4775 00001C20 59                  <1>         pop cx
  4776 00001C21 5A                  <1>         pop dx
  4777 00001C22 FEC6                <1>         inc dh
  4778 00001C24 FECD                <1>         dec ch
  4779 00001C26 75E5                <1>         jnz .loop_row
  4780                              <1> 
  4781 00001C28 61                  <1>         popa
  4782                              <1> .end:
  4783 00001C29 C3                  <1>         ret
  4784                              <1> ;=============================================================================
  4785                              <1> 
  4786                              <1> ;=============================================================================
  4787                              <1> ;draw_background ---- Draw the background using specified icon
  4788                              <1> ;input:
  4789                              <1> ;      bh = background color when no icon
  4790                              <1> ;      cx = icon size (ch = row, cl = col)
  4791                              <1> ;      ds:si -> icon data , which is a two dim word array, each elements
  4792                              <1> ;               indicates a char. high byte is the attribute, low byte is
  4793                              <1> ;               is the char code.
  4794                              <1> ;output:
  4795                              <1> ;      none
  4796                              <1> ;=============================================================================
  4797                              <1> draw_background:
  4798 00001C2A 60                  <1>         pusha
  4799 00001C2B 09F6                <1>         or si,si
  4800 00001C2D 7513                <1>         jnz .normal_bg
  4801                              <1> 
  4802                              <1> ;no icon. clear background.
  4803 00001C2F 31C9                <1>         xor cx,cx
  4804 00001C31 8A36[1F26]          <1>         mov dh,[ui_screen_height]
  4805 00001C35 8A16[1E26]          <1>         mov dl,[ui_screen_width]
  4806 00001C39 FECE                <1>         dec dh
  4807 00001C3B FECA                <1>         dec dl
  4808 00001C3D E8A4FD              <1>         call clear_screen
  4809 00001C40 61                  <1>         popa
  4810 00001C41 C3                  <1>         ret
  4811                              <1> 
  4812                              <1> .normal_bg:
  4813 00001C42 31D2                <1>         xor dx,dx
  4814                              <1> 
  4815                              <1> .loop_row:
  4816 00001C44 52                  <1>         push dx
  4817                              <1> .loop_col:
  4818 00001C45 E8BBFF              <1>         call draw_icon
  4819 00001C48 00CA                <1>         add dl, cl
  4820 00001C4A 3A16[1E26]          <1>         cmp dl, [ui_screen_width]
  4821 00001C4E 72F5                <1>         jb .loop_col
  4822 00001C50 5A                  <1>         pop dx
  4823 00001C51 00EE                <1>         add dh, ch
  4824 00001C53 3A36[1F26]          <1>         cmp dh, [ui_screen_height]
  4825 00001C57 72EB                <1>         jb .loop_row
  4826 00001C59 61                  <1>         popa
  4827 00001C5A C3                  <1>         ret
  4828                              <1> ;=============================================================================
  4829                              <1> 
  4830                              <1> ;=============================================================================
  4831                              <1> ;turnon_scrolllock ---- turn on the scroll lock key
  4832                              <1> ;input: none
  4833                              <1> ;output: none
  4834                              <1> ;=============================================================================
  4835                              <1> turnon_scrolllock:
  4836 00001C5B 60                  <1>         pusha
  4837 00001C5C 06                  <1>         push es
  4838 00001C5D 6A40                <1>         push word BIOS_DATA_SEG
  4839 00001C5F 07                  <1> 	pop es
  4840 00001C60 26800E170010        <1>         or byte [es: BIOS_KEYSTAT_OFF], kbScrollMask
  4841 00001C66 07                  <1>         pop es
  4842 00001C67 61                  <1>         popa
  4843 00001C68 C3                  <1>         ret
  4844                              <1> 
  4845                              <1> ;=============================================================================
  4846                              <1> ;turnoff_scrolllock ---- turn off the scroll lock key
  4847                              <1> ;input: none
  4848                              <1> ;output: none
  4849                              <1> ;=============================================================================
  4850                              <1> turnoff_scrolllock:
  4851 00001C69 60                  <1>         pusha
  4852 00001C6A 06                  <1>         push es
  4853 00001C6B 6A40                <1>         push word BIOS_DATA_SEG
  4854 00001C6D 07                  <1> 	pop es
  4855 00001C6E 2680261700EF        <1>         and byte [es: BIOS_KEYSTAT_OFF], ~ kbScrollMask
  4856 00001C74 07                  <1>         pop es
  4857 00001C75 61                  <1>         popa
  4858 00001C76 C3                  <1>         ret
  4859                              <1> 
  4860                              <1> ;=============================================================================
  4861                              <1> ;lock_screen ---- lock the screen, any output will be stored in SCR_BAK_SEG
  4862                              <1> ;=============================================================================
  4863                              <1> lock_screen:
  4864 00001C77 60                  <1> 	pusha 
  4865 00001C78 803E[2326]00        <1> 	cmp byte [ui_screen_lock], 0
  4866 00001C7D 7518                <1> 	jnz .no_swap_page
  4867                              <1> 
  4868 00001C7F A0[2226]            <1>         mov al, [ui_screen_page]
  4869 00001C82 3402                <1>         xor al, 0x02
  4870 00001C84 C706[2026]00B8      <1>         mov word [ui_screen_bufseg], SCR_BUF_SEG0
  4871 00001C8A 08C0                <1>         or al, al
  4872 00001C8C 7406                <1>         jz .set_seg0
  4873 00001C8E C706[2026]00BA      <1>         mov word [ui_screen_bufseg], SCR_BUF_SEG2
  4874                              <1> .set_seg0:
  4875 00001C94 A2[2226]            <1>         mov [ui_screen_page], al
  4876                              <1> 
  4877                              <1> .no_swap_page:
  4878 00001C97 FE06[2326]          <1> 	inc byte [ui_screen_lock]
  4879 00001C9B 61                  <1> 	popa
  4880 00001C9C C3                  <1>         ret
  4881                              <1> 
  4882                              <1> ;=============================================================================
  4883                              <1> ;unlock_screen ---- unlock the screen, copy SCR_BAK_SEG to SCR_BUF_SEG
  4884                              <1> ;=============================================================================
  4885                              <1> unlock_screen:
  4886 00001C9D 60                  <1> 	pusha
  4887 00001C9E FE0E[2326]          <1> 	dec byte [ui_screen_lock]
  4888 00001CA2 7507                <1> 	jnz .no_swap_page
  4889                              <1> 
  4890 00001CA4 B405                <1>         mov ah, 0x05
  4891 00001CA6 A0[2226]            <1>         mov al, [ui_screen_page]
  4892 00001CA9 CD10                <1>         int 0x10
  4893                              <1> .no_swap_page:
  4894 00001CAB 61                  <1> 	popa
  4895 00001CAC C3                  <1>         ret
  4896                              <1> 
  4897                              <1> 
  4898                              <1> ;=============================================================================
  4899                              <1> ;<<<<<<<<<<<<<<<<<<<<<<<<< Standard Dialog functions >>>>>>>>>>>>>>>>>>>>>>>>>
  4900                              <1> ;=============================================================================
  4901                              <1> 
  4902                              <1> ;=============================================================================
  4903                              <1> ; msgbox_draw_body_proc ---- draw body proc of message box
  4904                              <1> ; input:
  4905                              <1> ;	ds:si -> the window
  4906                              <1> ; output:
  4907                              <1> ;	none
  4908                              <1> ;=============================================================================
  4909                              <1> msgbox_draw_body_proc:
  4910 00001CAD 60                  <1> 	pusha
  4911 00001CAE 89F7                <1> 	mov di, si
  4912 00001CB0 8B5C1C              <1> 	mov bx, [si + struc_message_box.message_attr]
  4913 00001CB3 BA0302              <1> 	mov dx, 0x0203
  4914 00001CB6 8B741A              <1> 	mov si, [si + struc_message_box.message]
  4915 00001CB9 E8BB05              <1> 	call window_draw_string
  4916 00001CBC 61                  <1> 	popa
  4917 00001CBD C3                  <1> 	ret
  4918                              <1> 
  4919                              <1> ;=============================================================================
  4920                              <1> ; msgbox_default_event_handle ---- default event handle for message box
  4921                              <1> ; input:
  4922                              <1> ;	ax    -> event
  4923                              <1> ;	ds:si -> the window
  4924                              <1> ; output:
  4925                              <1> ;	none
  4926                              <1> ;=============================================================================
  4927                              <1> msgbox_default_event_handle:
  4928 00001CBE E8B507              <1> 	call window_default_event_handle
  4929 00001CC1 730D                <1> 	jnc .end
  4930                              <1> 
  4931 00001CC3 80FCF0              <1> 	cmp ah, EVTCODE_COMMAND
  4932 00001CC6 7202                <1> 	jb .exit
  4933                              <1> 
  4934 00001CC8 F9                  <1> 	stc
  4935 00001CC9 C3                  <1> 	ret
  4936                              <1> 
  4937                              <1> .exit:
  4938 00001CCA 89441E              <1> 	mov [si + struc_message_box.pressed_key], ax
  4939 00001CCD E82007              <1> 	call window_close
  4940                              <1> .end:
  4941 00001CD0 F8                  <1> 	clc
  4942 00001CD1 C3                  <1> 	ret
  4943                              <1> 
  4944                              <1> ;=============================================================================
  4945                              <1> ; msgbox_prepare ---- prepare a message box
  4946                              <1> ; input:
  4947                              <1> ;	al    =  message attribute
  4948                              <1> ;	bx    =  window attribute
  4949                              <1> ;	ds:dx -> 2nd level pointer to title
  4950                              <1> ;	ds:si -> message
  4951                              <1> ;	ds:di -> pointer to the struc_message_box
  4952                              <1> ; output:
  4953                              <1> ;	none
  4954                              <1> ;=============================================================================
  4955                              <1> msgbox_prepare:
  4956 00001CD2 60                  <1> 	pusha
  4957 00001CD3 B92000              <1> 	mov cx, SIZE_OF_STRUC_MESSAGE_BOX
  4958 00001CD6 E8820E              <1> 	call clear_memory
  4959                              <1> 
  4960 00001CD9 89751A              <1> 	mov [di + struc_message_box.message], si
  4961 00001CDC 89451C              <1> 	mov [di + struc_message_box.message_attr], ax
  4962 00001CDF 895D04              <1> 	mov [di + struc_window.win_attr], bx
  4963 00001CE2 895502              <1> 	mov [di + struc_window.title], dx
  4964                              <1> 
  4965 00001CE5 E8230B              <1> 	call count_lines
  4966                              <1> 
  4967 00001CE8 020E[0146]          <1> 	add cl, [size.box_width]
  4968 00001CEC 022E[0246]          <1> 	add ch, [size.box_height]
  4969 00001CF0 894D08              <1> 	mov [di + struc_window.win_size], cx
  4970 00001CF3 87F7                <1> 	xchg si, di
  4971 00001CF5 E86907              <1> 	call window_center_window
  4972                              <1> 
  4973 00001CF8 C60406              <1> 	mov byte [si], WINFLAG_FRAMED | WINFLAG_MODAL
  4974                              <1> 
  4975 00001CFB C74414[BE1C]        <1> 	mov word [si + struc_window.default_event_handle], msgbox_default_event_handle
  4976 00001D00 C74416[8224]        <1> 	mov word [si + struc_window.event_handle], window_event_handle
  4977 00001D05 C74418[AD1C]        <1> 	mov word [si + struc_window.draw_body_proc], msgbox_draw_body_proc
  4978 00001D0A 61                  <1> 	popa
  4979 00001D0B C3                  <1> 	ret
  4980                              <1> 
  4981                              <1> 
  4982                              <1> ;=============================================================================
  4983                              <1> ;message_box ---- Show a message box
  4984                              <1> ;input:
  4985                              <1> ;	al = message attribute
  4986                              <1> ;	bx = window attribute
  4987                              <1> ;	ds:dx -> 2nd level pointer to title
  4988                              <1> ;	ds:si -> message
  4989                              <1> ;output:
  4990                              <1> ;	ax = user pressed key
  4991                              <1> ;=============================================================================
  4992                              <1> message_box:
  4993 00001D0C 56                  <1> 	push si
  4994 00001D0D 57                  <1> 	push di
  4995 00001D0E BF[3166]            <1> 	mov di, ui_tmp.tmp_msgbox
  4996 00001D11 87F7                <1> 	xchg si, di
  4997 00001D13 E84708              <1> 	call winlist_remove
  4998 00001D16 87F7                <1> 	xchg si, di
  4999 00001D18 E8B7FF              <1> 	call msgbox_prepare
  5000 00001D1B 87F7                <1> 	xchg si, di
  5001 00001D1D E87806              <1> 	call window_run
  5002 00001D20 8B441E              <1> 	mov ax, [si + struc_message_box.pressed_key]
  5003 00001D23 5F                  <1> 	pop di
  5004 00001D24 5E                  <1> 	pop si
  5005 00001D25 C3                  <1>         ret
  5006                              <1> ;=============================================================================
  5007                              <1> 
  5008                              <1> ;=============================================================================
  5009                              <1> ;error_box ---- draw error message box.
  5010                              <1> ;input:
  5011                              <1> ;      ds:si -> error message
  5012                              <1> ;output:
  5013                              <1> ;      ax = return keycode
  5014                              <1> ;=============================================================================
  5015                              <1> error_box:
  5016 00001D26 53                  <1>         push bx
  5017 00001D27 52                  <1>         push dx
  5018 00001D28 A0[2346]            <1>         mov al, [color.error_box_msg]
  5019 00001D2B 8B1E[2146]          <1>         mov bx, [color.error_box_frame]
  5020 00001D2F BA[5C46]            <1>         mov dx, str_idx.error
  5021 00001D32 E8D7FF              <1>         call message_box
  5022 00001D35 5A                  <1>         pop dx
  5023 00001D36 5B                  <1>         pop bx
  5024 00001D37 C3                  <1>         ret
  5025                              <1> 
  5026                              <1> ;=============================================================================
  5027                              <1> ;info_box ---- draw infomation message box.
  5028                              <1> ;input:
  5029                              <1> ;      ds:si -> infomation message
  5030                              <1> ;output:
  5031                              <1> ;      ax = return keycode
  5032                              <1> ;=============================================================================
  5033                              <1> info_box:
  5034 00001D38 53                  <1>         push bx
  5035 00001D39 52                  <1>         push dx
  5036 00001D3A A0[2646]            <1>         mov al, [color.info_box_msg]
  5037 00001D3D 8B1E[2446]          <1>         mov bx, [color.info_box_frame]
  5038 00001D41 BA[6046]            <1>         mov dx, str_idx.info
  5039 00001D44 E8C5FF              <1>         call message_box
  5040 00001D47 5A                  <1>         pop dx
  5041 00001D48 5B                  <1>         pop bx
  5042 00001D49 C3                  <1>         ret
  5043                              <1> 
  5044                              <1> ;=============================================================================
  5045                              <1> ; inputbox_set_cursor
  5046                              <1> ; input:
  5047                              <1> ;	ds:si -> input box
  5048                              <1> ; output:
  5049                              <1> ;	none
  5050                              <1> ;=============================================================================
  5051                              <1> inputbox_set_cursor:
  5052 00001D4A 8B5424              <1> 	mov dx, [si + struc_input_box.input_area_pos]
  5053 00001D4D 025427              <1> 	add dl, [si + struc_input_box.input_curp]
  5054 00001D50 2A5426              <1> 	sub dl, [si + struc_input_box.input_startp]
  5055 00001D53 E80505              <1> 	call window_set_cursor
  5056 00001D56 E895FE              <1> 	call show_cursor
  5057 00001D59 C3                  <1> 	ret
  5058                              <1> 	
  5059                              <1> ;=============================================================================
  5060                              <1> ; inputbox_draw_body_proc ---- draw_body_proc of input box
  5061                              <1> ; input:
  5062                              <1> ;	ds:si -> pointer to struc_input_box
  5063                              <1> ; output:
  5064                              <1> ;	none
  5065                              <1> ;=============================================================================
  5066                              <1> inputbox_draw_body_proc:
  5067 00001D5A 60                  <1> 	pusha
  5068 00001D5B 89F7                <1> 	mov di, si
  5069 00001D5D 8B5C1C              <1> 	mov bx, [si + struc_input_box.message_attr]
  5070 00001D60 BA0202              <1> 	mov dx, 0x0202
  5071 00001D63 8B741A              <1> 	mov si, [si + struc_input_box.message]
  5072 00001D66 E80E05              <1> 	call window_draw_string
  5073 00001D69 61                  <1> 	popa
  5074 00001D6A E80400              <1> 	call inputbox_draw_input_area
  5075 00001D6D E8DAFF              <1> 	call inputbox_set_cursor
  5076 00001D70 C3                  <1> 	ret
  5077                              <1> 
  5078                              <1> ;=============================================================================
  5079                              <1> ; inputbox_draw_input_area ---- draw the input area of a input box
  5080                              <1> ; input:
  5081                              <1> ;	ds:si -> pointer to struc_input_box
  5082                              <1> ; output:
  5083                              <1> ;	none
  5084                              <1> ;=============================================================================
  5085                              <1> inputbox_draw_input_area:
  5086 00001D71 60                  <1> 	pusha
  5087 00001D72 0FB64C23            <1> 	movzx cx, byte [si + struc_input_box.input_area_len]
  5088 00001D76 8B5424              <1> 	mov dx, [si + struc_input_box.input_area_pos]
  5089 00001D79 B020                <1> 	mov al, 0x20
  5090 00001D7B 8A5C1E              <1> 	mov bl, [si + struc_input_box.input_attr]
  5091 00001D7E E8E804              <1> 	call window_draw_char
  5092                              <1> 
  5093 00001D81 0FB64426            <1> 	movzx ax, byte [si + struc_input_box.input_startp]
  5094 00001D85 8B7C20              <1> 	mov di, [si + struc_input_box.input_buf]
  5095 00001D88 01C7                <1> 	add di, ax
  5096 00001D8A 8A7C1F              <1> 	mov bh, [si + struc_input_box.input_type]
  5097                              <1> 
  5098                              <1> .loop_draw:
  5099 00001D8D 8A05                <1> 	mov al, [di]
  5100 00001D8F 08C0                <1> 	or al, al
  5101 00001D91 7412                <1> 	jz .end_draw
  5102 00001D93 08FF                <1> 	or bh, bh
  5103 00001D95 7402                <1> 	jz .draw_normal
  5104 00001D97 B02A                <1> 	mov al, '*'
  5105                              <1> .draw_normal:
  5106 00001D99 51                  <1> 	push cx
  5107 00001D9A B101                <1> 	mov cl, 1
  5108 00001D9C E8CA04              <1> 	call window_draw_char
  5109 00001D9F 59                  <1> 	pop cx
  5110 00001DA0 FEC2                <1> 	inc dl
  5111 00001DA2 47                  <1> 	inc di
  5112 00001DA3 E2E8                <1> 	loop .loop_draw
  5113                              <1> 
  5114                              <1> .end_draw:
  5115 00001DA5 61                  <1> 	popa
  5116 00001DA6 C3                  <1> 	ret
  5117                              <1> 
  5118                              <1> 
  5119                              <1> ;=============================================================================
  5120                              <1> ; inputbox_get_strlen 
  5121                              <1> ; input:
  5122                              <1> ;	ds:si -> input box
  5123                              <1> ; output:
  5124                              <1> ;	cx = input buf strlen
  5125                              <1> ;=============================================================================
  5126                              <1> inputbox_get_strlen:
  5127 00001DA7 56                  <1> 	push si
  5128 00001DA8 8B7420              <1> 	mov si, [si + struc_input_box.input_buf]
  5129 00001DAB E89109              <1> 	call strlen
  5130 00001DAE 5E                  <1> 	pop si
  5131 00001DAF C3                  <1> 	ret
  5132                              <1> 
  5133                              <1> ;=============================================================================
  5134                              <1> ; inputbox_delete_char
  5135                              <1> ; input:
  5136                              <1> ;	ds:si -> input box
  5137                              <1> ;	cl = position to be deleted
  5138                              <1> ; output:
  5139                              <1> ;	none
  5140                              <1> ;=============================================================================
  5141                              <1> inputbox_delete_char:
  5142 00001DB0 60                  <1> 	pusha
  5143 00001DB1 30ED                <1> 	xor ch, ch
  5144 00001DB3 8B7C20              <1> 	mov di, [si + struc_input_box.input_buf]
  5145 00001DB6 01CF                <1> 	add di, cx
  5146 00001DB8 89FE                <1> 	mov si, di
  5147 00001DBA 803C00              <1> 	cmp byte [si], 0
  5148 00001DBD 7406                <1> 	jz .end
  5149 00001DBF 46                  <1> 	inc si
  5150 00001DC0 B1FF                <1> 	mov cl, 255
  5151 00001DC2 E8B909              <1> 	call strncpy
  5152                              <1> .end:
  5153 00001DC5 61                  <1> 	popa
  5154 00001DC6 C3                  <1> 	ret
  5155                              <1> 
  5156                              <1> ;=============================================================================
  5157                              <1> ; inputbox_post_input
  5158                              <1> ;=============================================================================
  5159                              <1> inputbox_post_input:
  5160 00001DC7 8A4427              <1> 	mov al, [si + struc_input_box.input_curp]
  5161 00001DCA 8A4C26              <1> 	mov cl, [si + struc_input_box.input_startp]
  5162 00001DCD 38C1                <1> 	cmp cl, al
  5163 00001DCF 7205                <1> 	jb .below_cur
  5164 00001DD1 884426              <1> 	mov [si + struc_input_box.input_startp], al
  5165 00001DD4 EB0D                <1> 	jmp short .end
  5166                              <1> 
  5167                              <1> .below_cur:
  5168 00001DD6 28C8                <1> 	sub al, cl
  5169 00001DD8 3A4423              <1> 	cmp al, [si + struc_input_box.input_area_len]
  5170 00001DDB 7606                <1> 	jbe .end
  5171 00001DDD 2A4423              <1> 	sub al, [si + struc_input_box.input_area_len]
  5172 00001DE0 004426              <1> 	add [si + struc_input_box.input_startp], al
  5173                              <1> .end:
  5174 00001DE3 C3                  <1> 	ret
  5175                              <1> 
  5176                              <1> ;=============================================================================
  5177                              <1> ; inputbox_backspace 
  5178                              <1> ;=============================================================================
  5179                              <1> inputbox_backspace:
  5180 00001DE4 E8C0FF              <1> 	call inputbox_get_strlen
  5181 00001DE7 09C9                <1> 	or cx, cx
  5182 00001DE9 7412                <1> 	jz .end
  5183 00001DEB 8A4C27              <1> 	mov cl, [si + struc_input_box.input_curp]
  5184 00001DEE 08C9                <1> 	or cl, cl
  5185 00001DF0 740B                <1> 	jz .end
  5186 00001DF2 FEC9                <1> 	dec cl
  5187 00001DF4 884C27              <1> 	mov [si + struc_input_box.input_curp], cl
  5188 00001DF7 E8B6FF              <1> 	call inputbox_delete_char
  5189 00001DFA E8CAFF              <1> 	call inputbox_post_input
  5190                              <1> .end:
  5191 00001DFD C3                  <1> 	ret
  5192                              <1> 
  5193                              <1> ;=============================================================================
  5194                              <1> ; inputbox_delete
  5195                              <1> ;=============================================================================
  5196                              <1> inputbox_delete:
  5197 00001DFE E8A6FF              <1> 	call inputbox_get_strlen
  5198 00001E01 09C9                <1> 	or cx, cx
  5199 00001E03 7409                <1> 	jz .end
  5200 00001E05 8A4C27              <1> 	mov cl, [si + struc_input_box.input_curp]
  5201 00001E08 E8A5FF              <1> 	call inputbox_delete_char
  5202 00001E0B E8B9FF              <1> 	call inputbox_post_input
  5203                              <1> .end:
  5204 00001E0E C3                  <1> 	ret
  5205                              <1> 
  5206                              <1> ;=============================================================================
  5207                              <1> ; inputbox_right_arrow
  5208                              <1> ;=============================================================================
  5209                              <1> inputbox_right_arrow:
  5210 00001E0F E895FF              <1> 	call inputbox_get_strlen
  5211 00001E12 3A4C27              <1> 	cmp cl, [si + struc_input_box.input_curp]
  5212 00001E15 7606                <1> 	jbe .end
  5213                              <1> 
  5214 00001E17 FE4427              <1> 	inc byte [si + struc_input_box.input_curp]
  5215 00001E1A E8AAFF              <1> 	call inputbox_post_input
  5216                              <1> .end:
  5217 00001E1D C3                  <1> 	ret
  5218                              <1> 
  5219                              <1> ;=============================================================================
  5220                              <1> ; inputbox_left_arrow
  5221                              <1> ;=============================================================================
  5222                              <1> inputbox_left_arrow:
  5223 00001E1E 807C2700            <1> 	cmp byte [si + struc_input_box.input_curp], 0
  5224 00001E22 7406                <1> 	jz .end
  5225                              <1> 
  5226 00001E24 FE4C27              <1> 	dec byte [si + struc_input_box.input_curp]
  5227 00001E27 E89DFF              <1> 	call inputbox_post_input
  5228                              <1> .end:
  5229 00001E2A C3                  <1> 	ret
  5230                              <1> 
  5231                              <1> ;=============================================================================
  5232                              <1> ; inputbox_end_key
  5233                              <1> ;=============================================================================
  5234                              <1> inputbox_end_key:
  5235 00001E2B E879FF              <1> 	call inputbox_get_strlen
  5236 00001E2E 884C27              <1> 	mov [si + struc_input_box.input_curp], cl
  5237 00001E31 E893FF              <1> 	call inputbox_post_input
  5238 00001E34 C3                  <1> 	ret
  5239                              <1> 
  5240                              <1> ;=============================================================================
  5241                              <1> ; inputbox_home_key
  5242                              <1> ;=============================================================================
  5243                              <1> inputbox_home_key:
  5244 00001E35 C6442700            <1> 	mov byte [si + struc_input_box.input_curp], 0
  5245 00001E39 E88BFF              <1> 	call inputbox_post_input
  5246 00001E3C C3                  <1> 	ret
  5247                              <1> 
  5248                              <1> 
  5249                              <1> ;=============================================================================
  5250                              <1> ; inputbox_cancel
  5251                              <1> ;=============================================================================
  5252                              <1> inputbox_cancel:
  5253 00001E3D C6442801            <1> 	mov byte [si + struc_input_box.return_val], 1
  5254 00001E41 E8A0FD              <1> 	call hide_cursor
  5255 00001E44 C3                  <1> 	ret
  5256                              <1> 
  5257                              <1> ;=============================================================================
  5258                              <1> ; inputbox_enter
  5259                              <1> ;=============================================================================
  5260                              <1> inputbox_enter:
  5261 00001E45 C6442800            <1> 	mov byte [si + struc_input_box.return_val], 0
  5262 00001E49 E898FD              <1> 	call hide_cursor
  5263 00001E4C C3                  <1> 	ret
  5264                              <1> 
  5265                              <1> ;=============================================================================
  5266                              <1> ; inputbox_insert_char
  5267                              <1> ; input:
  5268                              <1> ;	al = char
  5269                              <1> ;	cl = position
  5270                              <1> ;	ds:si -> input box
  5271                              <1> ;=============================================================================
  5272                              <1> inputbox_insert_char:
  5273 00001E4D 60                  <1> 	pusha
  5274 00001E4E 30ED                <1> 	xor ch, ch
  5275 00001E50 51                  <1> 	push cx
  5276 00001E51 E853FF              <1> 	call inputbox_get_strlen
  5277 00001E54 8B7420              <1> 	mov si, [si + struc_input_box.input_buf]
  5278 00001E57 01CE                <1> 	add si, cx
  5279 00001E59 5A                  <1> 	pop dx
  5280 00001E5A 29D1                <1> 	sub cx, dx
  5281 00001E5C 09C9                <1> 	or cx, cx
  5282 00001E5E 7408                <1> 	jz .no_move
  5283                              <1> 
  5284                              <1> .loop_move:
  5285 00001E60 8A24                <1> 	mov ah, [si]
  5286 00001E62 886401              <1> 	mov [si + 1], ah
  5287 00001E65 4E                  <1> 	dec si
  5288 00001E66 E2F8                <1> 	loop .loop_move
  5289                              <1> 
  5290                              <1> .no_move:
  5291 00001E68 8A24                <1> 	mov ah, [si]
  5292 00001E6A 8904                <1> 	mov [si], ax
  5293 00001E6C 61                  <1> 	popa
  5294 00001E6D C3                  <1> 	ret
  5295                              <1> 	
  5296                              <1> ;=============================================================================
  5297                              <1> ; inputbox_default_event_handle
  5298                              <1> ; input:
  5299                              <1> ;	ax = event code
  5300                              <1> ;	ds:si -> input box
  5301                              <1> ; output:
  5302                              <1> ;	none
  5303                              <1> ;=============================================================================
  5304                              <1> inputbox_default_event_handle:
  5305 00001E6E E80506              <1> 	call window_default_event_handle
  5306 00001E71 732C                <1> 	jnc .end
  5307 00001E73 08C0                <1> 	or al, al
  5308 00001E75 7427                <1> 	jz .no_action
  5309 00001E77 80FCF0              <1> 	cmp ah, EVTCODE_COMMAND
  5310 00001E7A 7322                <1> 	jae .no_action
  5311 00001E7C 3C20                <1> 	cmp al, 0x20
  5312 00001E7E 721E                <1> 	jb .no_action
  5313 00001E80 3CE0                <1> 	cmp al, 0xE0
  5314 00001E82 741A                <1> 	je .no_action
  5315                              <1> 
  5316 00001E84 E820FF              <1> 	call inputbox_get_strlen
  5317 00001E87 2A4C22              <1> 	sub cl, [si + struc_input_box.input_buf_len]
  5318 00001E8A 08C9                <1> 	or cl, cl
  5319 00001E8C 7411                <1> 	jz .end
  5320                              <1> 
  5321 00001E8E 8A4C27              <1> 	mov cl, [si + struc_input_box.input_curp]
  5322 00001E91 E8B9FF              <1> 	call inputbox_insert_char
  5323 00001E94 FE4427              <1> 	inc byte [si + struc_input_box.input_curp]
  5324 00001E97 E82DFF              <1> 	call inputbox_post_input
  5325 00001E9A E84903              <1> 	call window_draw_body
  5326 00001E9D C3                  <1> 	ret
  5327                              <1> 
  5328                              <1> .no_action:
  5329 00001E9E F9                  <1> 	stc
  5330                              <1> .end:
  5331 00001E9F C3                  <1> 	ret
  5332                              <1> 
  5333                              <1> ;=============================================================================
  5334                              <1> ; inputbox_prepare
  5335                              <1> ; input:
  5336                              <1> ;	ah = input method ( 0 = normal, 1 = security )
  5337                              <1> ;	al = message attribute
  5338                              <1> ;	bh = title attribute
  5339                              <1> ;	bl = frame attribute
  5340                              <1> ;	ch = input area length
  5341                              <1> ;	cl = max input length
  5342                              <1> ;	ds:si -> message ( no more than one line )
  5343                              <1> ;	ds:di -> pointer to struc_input_box
  5344                              <1> ;	ds:dx -> buffer to store input string
  5345                              <1> ;=============================================================================
  5346                              <1> inputbox_prepare:
  5347 00001EA0 60                  <1> 	pusha
  5348 00001EA1 08ED                <1> 	or ch, ch
  5349 00001EA3 7502                <1> 	jnz .go_prepare
  5350 00001EA5 88CD                <1> 	mov ch, cl
  5351                              <1> .go_prepare:
  5352                              <1> 
  5353 00001EA7 51                  <1> 	push cx
  5354 00001EA8 B92900              <1> 	mov cx, SIZE_OF_STRUC_INPUT_BOX
  5355 00001EAB E8AD0C              <1> 	call clear_memory
  5356 00001EAE 59                  <1> 	pop cx
  5357                              <1> 
  5358 00001EAF C60506              <1> 	mov byte [di], WINFLAG_FRAMED | WINFLAG_MODAL		; win flag
  5359 00001EB2 C74502[6246]        <1> 	mov word [di + struc_window.title], str_idx.input	; win title
  5360 00001EB7 895D04              <1> 	mov [di + struc_window.win_attr], bx			; win attr
  5361 00001EBA 89751A              <1> 	mov [di + struc_input_box.message], si
  5362 00001EBD 88451C              <1> 	mov [di + struc_input_box.message_attr], al
  5363 00001EC0 B00F                <1> 	mov al, 0x0F
  5364 00001EC2 89451E              <1> 	mov [di + struc_input_box.input_attr], ax
  5365 00001EC5 895520              <1> 	mov [di + struc_input_box.input_buf], dx
  5366 00001EC8 894D22              <1> 	mov [di + struc_input_box.input_buf_len], cx		; input buf 
  5367                              <1> 								; and area len
  5368                              <1> 
  5369 00001ECB 8B1E[0146]          <1> 	mov bx, [size.box_width]
  5370 00001ECF FEC7                <1> 	inc bh
  5371 00001ED1 00EB                <1> 	add bl, ch
  5372                              <1> 
  5373 00001ED3 E86908              <1> 	call strlen
  5374 00001ED6 00CB                <1> 	add bl, cl
  5375 00001ED8 895D08              <1> 	mov [di + struc_window.win_size], bx			; win size
  5376 00001EDB 894D24              <1> 	mov [di + struc_input_box.input_area_pos],cx		; input area pos
  5377 00001EDE 8145240202          <1> 	add word [di + struc_input_box.input_area_pos], 0x0202
  5378                              <1> 
  5379 00001EE3 C745100E00          <1> 	mov word [di + struc_window.act_num], INPUTBOX_ACTION_NUM
  5380 00001EE8 C74512[6A26]        <1> 	mov word [di + struc_window.act_table], inputbox_action_table
  5381 00001EED C74514[6E1E]        <1> 	mov word [di + struc_window.default_event_handle], inputbox_default_event_handle
  5382 00001EF2 C74516[8224]        <1> 	mov word [di + struc_window.event_handle], window_event_handle
  5383 00001EF7 C74518[5A1D]        <1> 	mov word [di + struc_window.draw_body_proc], inputbox_draw_body_proc
  5384                              <1> 
  5385 00001EFC FE4528              <1> 	inc byte [di + struc_input_box.return_val]
  5386                              <1> 
  5387 00001EFF 89FE                <1> 	mov si, di
  5388 00001F01 E85D05              <1> 	call window_center_window
  5389 00001F04 61                  <1> 	popa
  5390 00001F05 C3                  <1> 	ret
  5391                              <1> 
  5392                              <1> ;=============================================================================
  5393                              <1> ;input_box ---- draw a input box and input a string
  5394                              <1> ;input:
  5395                              <1> ;      ah = input method ( 0 = normal, 1 = security )
  5396                              <1> ;      al = message attribute
  5397                              <1> ;      bh = title attribute
  5398                              <1> ;      bl = frame attribute
  5399                              <1> ;      ch = input area length
  5400                              <1> ;      cl = max input length
  5401                              <1> ;      ds:si -> message ( no more than one line )
  5402                              <1> ;      ds:di -> buffer to store input text
  5403                              <1> ;      ds:dx -> parent window
  5404                              <1> ;output:
  5405                              <1> ;      cf = 0 , ah = 0 ok, ch = number of inputed character
  5406                              <1> ;      cf = 1 , ah != 0 cancel, ch = 0
  5407                              <1> ;=============================================================================
  5408                              <1> input_box:
  5409 00001F06 56                  <1> 	push si
  5410 00001F07 57                  <1> 	push di
  5411 00001F08 57                  <1> 	push di
  5412 00001F09 52                  <1> 	push dx
  5413                              <1> 
  5414 00001F0A BA[A566]            <1> 	mov dx, ui_tmp.tmp_buf
  5415 00001F0D BF[5166]            <1> 	mov di, ui_tmp.tmp_inputbox
  5416 00001F10 87F7                <1> 	xchg si, di
  5417 00001F12 E84806              <1> 	call winlist_remove
  5418 00001F15 87F7                <1> 	xchg si, di
  5419 00001F17 E886FF              <1> 	call inputbox_prepare
  5420                              <1> 
  5421 00001F1A 8F450A              <1> 	pop word [di + struc_window.parent_win]
  5422 00001F1D 87FA                <1> 	xchg di, dx
  5423 00001F1F 5E                  <1> 	pop si
  5424                              <1> 
  5425 00001F20 06                  <1> 	push es
  5426 00001F21 1E                  <1> 	push ds
  5427 00001F22 07                  <1> 	pop es
  5428                              <1> 
  5429 00001F23 56                  <1> 	push si
  5430 00001F24 57                  <1> 	push di
  5431                              <1> 
  5432 00001F25 E87008              <1> 	call strcpy
  5433                              <1> 	
  5434 00001F28 89D6                <1> 	mov si, dx
  5435 00001F2A E86B04              <1> 	call window_run
  5436 00001F2D 8A6428              <1> 	mov ah, [si + struc_input_box.return_val]
  5437 00001F30 E874FE              <1> 	call inputbox_get_strlen
  5438 00001F33 88CD                <1> 	mov ch, cl
  5439 00001F35 8A4C22              <1> 	mov cl, [si + struc_input_box.input_buf_len]
  5440 00001F38 08E4                <1> 	or ah, ah
  5441                              <1> 
  5442 00001F3A 5E                  <1> 	pop si
  5443 00001F3B 5F                  <1> 	pop di
  5444 00001F3C 7403                <1> 	jz .ok
  5445 00001F3E F9                  <1> 	stc
  5446 00001F3F EB04                <1> 	jmp short .end
  5447                              <1> .ok:
  5448 00001F41 E85408              <1> 	call strcpy
  5449 00001F44 F8                  <1> 	clc
  5450                              <1> .end:
  5451 00001F45 07                  <1> 	pop es
  5452 00001F46 5F                  <1> 	pop di
  5453 00001F47 5E                  <1> 	pop si
  5454 00001F48 C3                  <1> 	ret
  5455                              <1> 
  5456                              <1> ;=============================================================================
  5457                              <1> ;input_password ---- input a password
  5458                              <1> ;input:
  5459                              <1> ;      cl = max password length
  5460                              <1> ;      ds:si -> message string
  5461                              <1> ;output:
  5462                              <1> ;      cf = 0 success, ax:dx = password
  5463                              <1> ;      cf = 1 cancel
  5464                              <1> ;=============================================================================
  5465                              <1> input_password:
  5466 00001F49 53                  <1>         push bx
  5467 00001F4A 51                  <1>         push cx
  5468                              <1>         
  5469 00001F4B B401                <1>         mov ah, 1
  5470 00001F4D A0[2046]            <1>         mov al, [color.input_box_msg]
  5471 00001F50 8B1E[1E46]          <1>         mov bx, [color.input_box_frame]
  5472 00001F54 88CD                <1>         mov ch, cl
  5473 00001F56 31D2                <1>         xor dx, dx
  5474 00001F58 BF[A567]            <1>         mov di, ui_tmp.tmp_buf1
  5475                              <1> 
  5476 00001F5B C60500              <1>         mov byte [di], 0
  5477                              <1> 
  5478 00001F5E E8A5FF              <1>         call input_box
  5479 00001F61 7209                <1>         jc .cancel_input
  5480                              <1> 
  5481 00001F63 89FE                <1>         mov si, di
  5482 00001F65 0FB6CD              <1>         movzx cx, ch
  5483 00001F68 E83A08              <1>         call calc_password
  5484 00001F6B F8                  <1>         clc
  5485                              <1> 
  5486                              <1> .cancel_input:
  5487 00001F6C 59                  <1>         pop cx
  5488 00001F6D 5B                  <1>         pop bx
  5489 00001F6E C3                  <1>         ret
  5490                              <1> ;=============================================================================
  5491                              <1> 
  5492                              <1> ;=============================================================================
  5493                              <1> ; menubox_adjust_geometry ---- adjust the size and position of the menu box
  5494                              <1> ; input:
  5495                              <1> ;	ds:si -> pointer to struc_menu_box
  5496                              <1> ; output:
  5497                              <1> ;	none
  5498                              <1> ;=============================================================================
  5499                              <1> menubox_adjust_geometry:
  5500 00001F6F E80400              <1> 	call menubox_adjust_menu_area
  5501 00001F72 E86E00              <1> 	call menubox_adjust_win_width
  5502 00001F75 C3                  <1> 	ret
  5503                              <1> 
  5504                              <1> ;=============================================================================
  5505                              <1> ; menubox_adjust_menu_area ---- adjust the size and position of the menu area
  5506                              <1> ; input:
  5507                              <1> ;	ds:si -> pointer to struc_menu_box
  5508                              <1> ; output:
  5509                              <1> ;	none
  5510                              <1> ;=============================================================================
  5511                              <1> menubox_adjust_menu_area:
  5512 00001F76 60                  <1> 	pusha
  5513                              <1> 
  5514                              <1> ;adjust menu area position
  5515 00001F77 B90101              <1> 	mov cx, 0x0101
  5516 00001F7A 8A04                <1> 	mov al, [si]
  5517 00001F7C A840                <1> 	test al, MENUFLAG_SINK_UPPER
  5518 00001F7E 7402                <1> 	jz .no_sink_upper
  5519 00001F80 FEC5                <1> 	inc ch
  5520                              <1> .no_sink_upper:
  5521 00001F82 837C1A00            <1> 	cmp word [si + struc_menu_box.menu_header], 0
  5522 00001F86 7402                <1> 	jz .no_header
  5523 00001F88 FEC5                <1> 	inc ch
  5524                              <1> .no_header:
  5525 00001F8A A820                <1> 	test al, MENUFLAG_SINK_WIDTH
  5526 00001F8C 7402                <1> 	jz .no_sink_width
  5527 00001F8E FEC1                <1> 	inc cl
  5528                              <1> .no_sink_width:
  5529 00001F90 894C21              <1> 	mov [si + struc_menu_box.menu_area_pos], cx
  5530                              <1> 
  5531                              <1> ;adjust menu area size
  5532 00001F93 8B5408              <1> 	mov dx, [si + struc_window.win_size]
  5533 00001F96 28EE                <1> 	sub dh, ch
  5534 00001F98 FECE                <1> 	dec dh
  5535 00001F9A A880                <1> 	test al, MENUFLAG_SINK_BOTTOM
  5536 00001F9C 7402                <1> 	jz .no_sink_bottom
  5537 00001F9E FECE                <1> 	dec dh
  5538                              <1> .no_sink_bottom:
  5539                              <1> 
  5540 00001FA0 30D2                <1> 	xor dl, dl
  5541 00001FA2 0FB64C26            <1> 	movzx cx, byte [si + struc_menu_box.items_num]
  5542 00001FA6 09C9                <1> 	or cx, cx
  5543 00001FA8 741D                <1> 	jz .end_calc
  5544 00001FAA 8B5C29              <1> 	mov bx, [si + struc_menu_box.item_str_proc]
  5545 00001FAD 09DB                <1> 	or bx, bx
  5546 00001FAF 7416                <1> 	jz .end_calc
  5547                              <1> 
  5548                              <1> .loop_calc_item_width:
  5549 00001FB1 56                  <1> 	push si
  5550 00001FB2 53                  <1> 	push bx
  5551 00001FB3 51                  <1> 	push cx
  5552 00001FB4 49                  <1> 	dec cx
  5553                              <1> 
  5554 00001FB5 52                  <1> 	push dx
  5555 00001FB6 FFD3                <1> 	call bx
  5556 00001FB8 5A                  <1> 	pop dx
  5557                              <1> 
  5558 00001FB9 E89607              <1> 	call strlen_hl
  5559 00001FBC 38CA                <1> 	cmp dl, cl
  5560 00001FBE 7302                <1> 	jae .cont_calc
  5561 00001FC0 88CA                <1> 	mov dl, cl
  5562                              <1> .cont_calc:
  5563 00001FC2 59                  <1> 	pop cx
  5564 00001FC3 5B                  <1> 	pop bx
  5565 00001FC4 5E                  <1> 	pop si
  5566 00001FC5 E2EA                <1> 	loop .loop_calc_item_width
  5567                              <1> 
  5568                              <1> .end_calc:
  5569                              <1> 
  5570 00001FC7 56                  <1> 	push si
  5571 00001FC8 8B741A              <1> 	mov si, [si + struc_menu_box.menu_header]
  5572 00001FCB 09F6                <1> 	or si, si
  5573 00001FCD 740B                <1> 	jz .no_header_len
  5574 00001FCF 8B34                <1> 	mov si, [si]
  5575 00001FD1 E87E07              <1> 	call strlen_hl
  5576 00001FD4 38CA                <1> 	cmp dl, cl
  5577 00001FD6 7302                <1> 	jae .header_short
  5578 00001FD8 88CA                <1> 	mov dl, cl
  5579                              <1> .header_short:
  5580                              <1> .no_header_len:
  5581 00001FDA 80C202              <1> 	add dl, 2
  5582 00001FDD 5E                  <1> 	pop si
  5583 00001FDE 895423              <1> 	mov [si + struc_menu_box.menu_area_size], dx
  5584                              <1> 
  5585 00001FE1 61                  <1> 	popa
  5586 00001FE2 C3                  <1> 	ret
  5587                              <1> 
  5588                              <1> 
  5589                              <1> ;=============================================================================
  5590                              <1> ; menubox_adjust_win_width ---- adjust the width the menu window. 
  5591                              <1> ; input:
  5592                              <1> ;	ds:si -> pointer to struc_menu_box
  5593                              <1> ; output:
  5594                              <1> ;	none
  5595                              <1> ;=============================================================================
  5596                              <1> menubox_adjust_win_width:
  5597 00001FE3 60                  <1> 	pusha
  5598 00001FE4 8A04                <1> 	mov al, [si]
  5599 00001FE6 8B5C23              <1> 	mov bx, [si + struc_menu_box.menu_area_size]
  5600                              <1> 
  5601                              <1> ; calculate window width
  5602 00001FE9 80C302              <1> 	add bl, 2
  5603                              <1> 
  5604 00001FEC A820                <1> 	test al, MENUFLAG_SINK_WIDTH
  5605 00001FEE 7403                <1> 	jz .no_sink_width
  5606 00001FF0 80C302              <1> 	add bl, 2
  5607                              <1> .no_sink_width:
  5608 00001FF3 A810                <1> 	test al, MENUFLAG_SCROLLBAR
  5609 00001FF5 7402                <1> 	jz .no_scrollbar
  5610 00001FF7 FEC3                <1> 	inc bl
  5611                              <1> .no_scrollbar:
  5612 00001FF9 885C08              <1> 	mov [si + struc_window.win_size], bl
  5613 00001FFC 8A0E[1E26]          <1> 	mov cl, [ui_screen_width]
  5614 00002000 28D9                <1> 	sub cl, bl
  5615 00002002 80E902              <1> 	sub cl, 2
  5616                              <1> 
  5617 00002005 384C06              <1> 	cmp [si + struc_window.win_pos], cl
  5618 00002008 7603                <1> 	jbe .no_adjust_pos
  5619 0000200A 884C06              <1> 	mov [si + struc_window.win_pos], cl
  5620                              <1> .no_adjust_pos:
  5621 0000200D 61                  <1> 	popa
  5622 0000200E C3                  <1> 	ret
  5623                              <1> 
  5624                              <1> ;=============================================================================
  5625                              <1> ; menubox_draw_body_proc ---- draw the window body of a menu box
  5626                              <1> ; input:
  5627                              <1> ;	ds:si -> pointer to struc_menu_box
  5628                              <1> ; output:
  5629                              <1> ;	none
  5630                              <1> ;=============================================================================
  5631                              <1> menubox_draw_body_proc:
  5632 0000200F 60                  <1> 	pusha
  5633 00002010 E82700              <1> 	call menubox_draw_menu
  5634 00002013 837C1A00            <1> 	cmp word [si + struc_menu_box.menu_header], 0
  5635 00002017 7403                <1> 	jz .no_header
  5636 00002019 E87D00              <1> 	call menubox_draw_header
  5637                              <1> .no_header:
  5638 0000201C F60410              <1> 	test byte [si], MENUFLAG_SCROLLBAR
  5639 0000201F 7403                <1> 	jz .no_scrollbar
  5640 00002021 E80200              <1> 	call menubox_draw_scrollbar
  5641                              <1> .no_scrollbar:
  5642 00002024 61                  <1> 	popa
  5643 00002025 C3                  <1> 	ret
  5644                              <1> 
  5645                              <1> 
  5646                              <1> ;=============================================================================
  5647                              <1> ; menubox_draw_scrollbar ---- draw the scrollbar
  5648                              <1> ; input:
  5649                              <1> ;	ds:si -> pointer to struc_menu_box
  5650                              <1> ; output:
  5651                              <1> ;	none
  5652                              <1> ;=============================================================================
  5653                              <1> menubox_draw_scrollbar:
  5654 00002026 8B4426              <1> 	mov ax, [si + struc_menu_box.items_num]
  5655 00002029 8A5C25              <1> 	mov bl, [si + struc_menu_box.scrollbar_attr]
  5656 0000202C 8B4C21              <1> 	mov cx, [si + struc_menu_box.menu_area_pos]
  5657 0000202F 8B5423              <1> 	mov dx, [si + struc_menu_box.menu_area_size]
  5658 00002032 00D1                <1> 	add cl, dl
  5659 00002034 30D2                <1> 	xor dl, dl
  5660 00002036 E84C02              <1> 	call window_draw_scrollbar
  5661 00002039 C3                  <1> 	ret
  5662                              <1> 
  5663                              <1> ;=============================================================================
  5664                              <1> ; menubox_draw_menu ---- draw the menu area
  5665                              <1> ; input:
  5666                              <1> ;	ds:si -> pointer to struc_menu_box
  5667                              <1> ; output:
  5668                              <1> ;	none
  5669                              <1> ;=============================================================================
  5670                              <1> menubox_draw_menu:
  5671 0000203A 60                  <1> 	pusha
  5672 0000203B 8B4C21              <1> 	mov cx, [si + struc_menu_box.menu_area_pos]
  5673 0000203E 8B5423              <1> 	mov dx, [si + struc_menu_box.menu_area_size]
  5674 00002041 52                  <1> 	push dx
  5675 00002042 51                  <1> 	push cx
  5676 00002043 034C06              <1> 	add cx, [si + struc_window.win_pos]
  5677 00002046 01CA                <1> 	add dx, cx
  5678                              <1> 
  5679 00002048 81EA0101            <1> 	sub dx, 0x0101
  5680 0000204C 8A7C1D              <1> 	mov bh, [si + struc_menu_box.menu_norm_attr]
  5681 0000204F E892F9              <1> 	call clear_screen
  5682                              <1> 
  5683 00002052 5A                  <1> 	pop dx
  5684 00002053 58                  <1> 	pop ax
  5685                              <1> 
  5686 00002054 0FB64C28            <1> 	movzx cx, [si + struc_menu_box.first_visible_item]
  5687 00002058 807C2600            <1> 	cmp byte [si + struc_menu_box.items_num], 0
  5688 0000205C 7439                <1> 	je .end
  5689                              <1> 
  5690 0000205E 89F7                <1> 	mov di, si
  5691                              <1> 
  5692                              <1> .loop_draw_item:
  5693 00002060 3A4C27              <1> 	cmp cl, [si + struc_menu_box.focus_item]
  5694 00002063 7405                <1> 	je .focused
  5695 00002065 8B5C1D              <1> 	mov bx, [si + struc_menu_box.menu_norm_attr]
  5696 00002068 EB03                <1> 	jmp short .draw_item
  5697                              <1> .focused:
  5698 0000206A 8B5C1F              <1> 	mov bx, [si + struc_menu_box.menu_focus_attr]
  5699                              <1> .draw_item:
  5700 0000206D 60                  <1> 	pusha
  5701 0000206E 51                  <1> 	push cx
  5702 0000206F 88C1                <1> 	mov cl, al
  5703 00002071 B020                <1> 	mov al, ' '
  5704 00002073 E8F301              <1> 	call window_draw_char
  5705 00002076 59                  <1> 	pop cx
  5706 00002077 FEC2                <1> 	inc dl
  5707 00002079 53                  <1> 	push bx
  5708 0000207A 52                  <1> 	push dx
  5709 0000207B 57                  <1> 	push di
  5710 0000207C FF5429              <1> 	call word [si + struc_menu_box.item_str_proc]
  5711 0000207F 5F                  <1> 	pop di
  5712 00002080 5A                  <1> 	pop dx
  5713 00002081 5B                  <1> 	pop bx
  5714 00002082 E8F201              <1> 	call window_draw_string
  5715 00002085 61                  <1> 	popa
  5716 00002086 FEC6                <1> 	inc dh
  5717 00002088 FEC1                <1> 	inc cl
  5718 0000208A FECC                <1> 	dec ah
  5719 0000208C 3A4C26              <1> 	cmp cl, [si + struc_menu_box.items_num]
  5720 0000208F 7306                <1> 	jae .end
  5721 00002091 08E4                <1> 	or ah, ah
  5722 00002093 7402                <1> 	jz .end
  5723 00002095 EBC9                <1> 	jmp short .loop_draw_item
  5724                              <1> .end:
  5725 00002097 61                  <1> 	popa
  5726 00002098 C3                  <1> 	ret
  5727                              <1> 
  5728                              <1> ;=============================================================================
  5729                              <1> ; menubox_draw_header ---- draw the menu header
  5730                              <1> ; input:
  5731                              <1> ;	ds:si -> pointer to struc_menu_box
  5732                              <1> ; output:
  5733                              <1> ;	none
  5734                              <1> ;=============================================================================
  5735                              <1> menubox_draw_header:
  5736 00002099 60                  <1> 	pusha
  5737 0000209A 8B5C1C              <1> 	mov bx, [si + struc_menu_box.menu_header_attr]
  5738 0000209D 8B5421              <1> 	mov dx, [si + struc_menu_box.menu_area_pos]
  5739 000020A0 FECE                <1> 	dec dh
  5740 000020A2 0FB64C23            <1> 	movzx cx, byte [si + struc_menu_box.menu_area_size]
  5741 000020A6 B020                <1> 	mov al, ' '
  5742 000020A8 F60410              <1> 	test byte [si], MENUFLAG_SCROLLBAR
  5743 000020AB 7402                <1> 	jz .no_scrollbar
  5744 000020AD FEC1                <1> 	inc cl
  5745                              <1> .no_scrollbar:
  5746 000020AF E8B701              <1> 	call window_draw_char
  5747 000020B2 89F7                <1> 	mov di, si
  5748 000020B4 8B741A              <1> 	mov si, [si + struc_menu_box.menu_header]
  5749 000020B7 8B34                <1> 	mov si, [si]
  5750 000020B9 FEC2                <1> 	inc dl
  5751 000020BB E8B901              <1> 	call window_draw_string
  5752 000020BE 61                  <1> 	popa
  5753 000020BF C3                  <1> 	ret
  5754                              <1> 
  5755                              <1> ;=============================================================================
  5756                              <1> ; menubox_do_focus ---- do the focused menu item, get the pointer of item action
  5757                              <1> ;                    from action_table, then call window_do_action to do it.
  5758                              <1> ; input:
  5759                              <1> ;	ds:si -> pointer to struc_menu_box
  5760                              <1> ; output:
  5761                              <1> ;	none
  5762                              <1> ;=============================================================================
  5763                              <1> menubox_do_focus:
  5764 000020C0 8B5C12              <1> 	mov bx, [si + struc_window.act_table]
  5765 000020C3 B005                <1> 	mov al, SIZE_OF_STRUC_ACTION
  5766 000020C5 8A4C27              <1> 	mov cl, [si + struc_menu_box.focus_item]
  5767 000020C8 F6E1                <1> 	mul cl
  5768 000020CA 01C3                <1> 	add bx, ax
  5769 000020CC 8B4701              <1> 	mov ax, [bx + struc_action.keycode]
  5770 000020CF E80004              <1> 	call window_do_action
  5771 000020D2 C3                  <1> 	ret
  5772                              <1> 	
  5773                              <1> 
  5774                              <1> ;=============================================================================
  5775                              <1> ; menubox_adjust_visible_boundary
  5776                              <1> ;input:
  5777                              <1> ;	ds:si -> pointer to struc_menu_box
  5778                              <1> ;=============================================================================
  5779                              <1> menubox_adjust_visible_boundary:
  5780 000020D3 8B4427              <1> 	mov ax, [si + struc_menu_box.focus_item] ; al = focus_item, ah = first_visible_item
  5781                              <1> 
  5782                              <1> .check_upper:
  5783 000020D6 38E0                <1> 	cmp al, ah
  5784 000020D8 7303                <1> 	jae .check_bottom
  5785 000020DA 884428              <1> 	mov [si + struc_menu_box.first_visible_item], al
  5786                              <1> .check_bottom:
  5787 000020DD 026424              <1> 	add ah, [si + struc_menu_box.menu_area_size + 1]
  5788 000020E0 38E0                <1> 	cmp al, ah
  5789 000020E2 7207                <1> 	jb .end
  5790 000020E4 28E0                <1> 	sub al, ah
  5791 000020E6 FEC0                <1> 	inc al
  5792 000020E8 004428              <1> 	add [si + struc_menu_box.first_visible_item], al
  5793                              <1> .end:	
  5794 000020EB C3                  <1> 	ret
  5795                              <1> 
  5796                              <1> ;=============================================================================
  5797                              <1> ; menubox_focus_up ---- move the focus bar up one line
  5798                              <1> ; input:
  5799                              <1> ;	ds:si -> pointer to struc_menu_box
  5800                              <1> ; output:
  5801                              <1> ;	none
  5802                              <1> ;=============================================================================
  5803                              <1> menubox_focus_up:
  5804 000020EC 8B4426              <1> 	mov ax, [si + struc_menu_box.items_num]	;al = items_num, ah = focus_item
  5805 000020EF 08E4                <1> 	or ah, ah
  5806 000020F1 7502                <1> 	jnz .up
  5807 000020F3 88C4                <1> 	mov ah, al
  5808                              <1> .up:
  5809 000020F5 FECC                <1> 	dec ah
  5810 000020F7 886427              <1> 	mov [si + struc_menu_box.focus_item], ah
  5811 000020FA E8D6FF              <1> 	call menubox_adjust_visible_boundary
  5812 000020FD C3                  <1> 	ret
  5813                              <1> 
  5814                              <1> ;=============================================================================
  5815                              <1> ; menu_focus_pageup ---- move the focus bar up one page
  5816                              <1> ; input:
  5817                              <1> ;	ds:si -> pointer to struc_menu_box
  5818                              <1> ; output:
  5819                              <1> ;	none
  5820                              <1> ;=============================================================================
  5821                              <1> menubox_focus_pageup:
  5822 000020FE 8A4427              <1> 	mov al, [si + struc_menu_box.focus_item]
  5823 00002101 8A4C24              <1> 	mov cl, byte [si + struc_menu_box.menu_area_size+1]
  5824 00002104 FEC9                <1> 	dec cl
  5825 00002106 38C1                <1> 	cmp cl, al
  5826 00002108 7206                <1> 	jb .loop_up
  5827                              <1> 
  5828 0000210A 88C1                <1> 	mov cl, al
  5829 0000210C 08C9                <1> 	or cl, cl
  5830 0000210E 7407                <1> 	jz .end
  5831                              <1> 
  5832                              <1> .loop_up:
  5833 00002110 30ED                <1> 	xor ch, ch
  5834 00002112 E8D7FF              <1> 	call menubox_focus_up
  5835 00002115 E2F9                <1> 	loop .loop_up
  5836                              <1> .end:
  5837 00002117 C3                  <1> 	ret
  5838                              <1> 
  5839                              <1> ;=============================================================================
  5840                              <1> ; menu_focus_down ---- move the focus bar down one line
  5841                              <1> ; input:
  5842                              <1> ;	ds:si -> pointer to struc_menu_box
  5843                              <1> ; output:
  5844                              <1> ;	none
  5845                              <1> ;=============================================================================
  5846                              <1> menubox_focus_down:
  5847 00002118 8B4426              <1> 	mov ax, [si + struc_menu_box.items_num]	;al = items_num, ah = focus_item
  5848 0000211B FEC4                <1> 	inc ah
  5849 0000211D 38C4                <1> 	cmp ah, al
  5850 0000211F 7202                <1> 	jb .down
  5851 00002121 30E4                <1> 	xor ah, ah
  5852                              <1> .down:
  5853 00002123 886427              <1> 	mov [si + struc_menu_box.focus_item], ah
  5854 00002126 E8AAFF              <1> 	call menubox_adjust_visible_boundary
  5855 00002129 C3                  <1> 	ret
  5856                              <1> 
  5857                              <1> ;=============================================================================
  5858                              <1> ; menu_focus_pagedown ---- move the focus bar down one page
  5859                              <1> ; input:
  5860                              <1> ;	ds:si -> pointer to struc_menu_box
  5861                              <1> ; output:
  5862                              <1> ;	none
  5863                              <1> ;=============================================================================
  5864                              <1> menubox_focus_pagedown:
  5865 0000212A 8B4426              <1> 	mov ax, [si + struc_menu_box.items_num]
  5866 0000212D 08C0                <1> 	or al, al
  5867 0000212F 741A                <1> 	jz .end
  5868                              <1> 
  5869 00002131 28E0                <1> 	sub al, ah
  5870 00002133 FEC8                <1> 	dec al
  5871                              <1> 
  5872 00002135 8A4C24              <1> 	mov cl, byte [si + struc_menu_box.menu_area_size+1]
  5873 00002138 FEC9                <1> 	dec cl
  5874                              <1> 
  5875 0000213A 38C1                <1> 	cmp cl, al
  5876 0000213C 7206                <1> 	jb .loop_down
  5877 0000213E 88C1                <1> 	mov cl, al
  5878 00002140 08C9                <1> 	or cl, cl
  5879 00002142 7407                <1> 	jz .end
  5880                              <1> 
  5881                              <1> .loop_down:
  5882 00002144 30ED                <1> 	xor ch, ch
  5883 00002146 E8CFFF              <1> 	call menubox_focus_down
  5884 00002149 E2F9                <1> 	loop .loop_down
  5885                              <1> .end:
  5886 0000214B C3                  <1> 	ret
  5887                              <1> 
  5888                              <1> ;=============================================================================
  5889                              <1> ;menubox_default_event_handle
  5890                              <1> ;=============================================================================
  5891                              <1> menubox_default_event_handle:
  5892 0000214C 60                  <1> 	pusha
  5893 0000214D B90A00              <1> 	mov cx, MENUBOX_DEF_ACTION_NUM
  5894 00002150 BB[BF26]            <1> 	mov bx, menubox_def_action_table
  5895 00002153 E84603              <1> 	call window_generic_event_handle
  5896 00002156 7303                <1> 	jnc .end
  5897 00002158 E81B03              <1> 	call window_default_event_handle
  5898                              <1> .end:
  5899 0000215B 61                  <1> 	popa
  5900 0000215C C3                  <1> 	ret
  5901                              <1> ;=============================================================================
  5902                              <1> 
  5903                              <1> ;=============================================================================
  5904                              <1> ; listbox_prepare ---- prepare a list box
  5905                              <1> ; input:
  5906                              <1> ;	cl = number of items
  5907                              <1> ;	ch = height of list box
  5908                              <1> ;	ds:bx -> 2nd level pointer to title
  5909                              <1> ;	ds:dx -> 2nd level pointer to header
  5910                              <1> ;	ds:si -> items string proc
  5911                              <1> ;	ds:di -> struc_menu_box
  5912                              <1> ;=============================================================================
  5913                              <1> listbox_prepare:
  5914 0000215D 60                  <1> 	pusha
  5915 0000215E 51                  <1> 	push cx
  5916 0000215F B92B00              <1> 	mov cx, SIZE_OF_STRUC_MENU_BOX
  5917 00002162 E8F609              <1> 	call clear_memory
  5918 00002165 59                  <1> 	pop cx
  5919                              <1> 
  5920 00002166 C60516              <1> 	mov byte [di], WINFLAG_FRAMED | WINFLAG_MODAL | MENUFLAG_SCROLLBAR
  5921 00002169 895D02              <1> 	mov [di + struc_window.title], bx
  5922 0000216C 89551A              <1> 	mov [di + struc_menu_box.menu_header], dx
  5923 0000216F 897529              <1> 	mov [di + struc_menu_box.item_str_proc], si
  5924                              <1> 
  5925 00002172 BE[1646]            <1> 	mov si, color.list_box
  5926 00002175 FC                  <1> 	cld
  5927 00002176 AD                  <1> 	lodsw
  5928 00002177 894504              <1> 	mov word [di + struc_window.win_attr], ax
  5929 0000217A AC                  <1> 	lodsb
  5930 0000217B 88451C              <1> 	mov byte [di + struc_menu_box.menu_header_attr], al
  5931 0000217E AD                  <1> 	lodsw
  5932 0000217F 89451D              <1> 	mov word [di + struc_menu_box.menu_norm_attr], ax
  5933 00002182 AD                  <1> 	lodsw
  5934 00002183 89451F              <1> 	mov word [di + struc_menu_box.menu_focus_attr], ax
  5935 00002186 AC                  <1> 	lodsb
  5936 00002187 884525              <1> 	mov byte [di + struc_menu_box.scrollbar_attr], al
  5937                              <1> 
  5938 0000218A 884D26              <1> 	mov [di + struc_menu_box.items_num], cl
  5939 0000218D 886D09              <1> 	mov [di + struc_window.win_size + 1], ch
  5940 00002190 C745100300          <1> 	mov word [di + struc_window.act_num], LISTBOX_ACTION_NUM
  5941 00002195 C74512[B026]        <1> 	mov word [di + struc_window.act_table], listbox_action_table
  5942 0000219A C74514[4C21]        <1> 	mov word [di + struc_window.default_event_handle], menubox_default_event_handle
  5943 0000219F C74516[8224]        <1> 	mov word [di + struc_window.event_handle], window_event_handle
  5944 000021A4 C74518[0F20]        <1> 	mov word [di + struc_window.draw_body_proc], menubox_draw_body_proc
  5945                              <1> 
  5946 000021A9 89FE                <1> 	mov si, di
  5947 000021AB E8C1FD              <1> 	call menubox_adjust_geometry
  5948 000021AE E8B002              <1> 	call window_center_window
  5949 000021B1 61                  <1> 	popa
  5950 000021B2 C3                  <1> 	ret
  5951                              <1> 	
  5952                              <1> ;=============================================================================
  5953                              <1> ; list_box ---- run a list box
  5954                              <1> ; input:
  5955                              <1> ;	cl = number of items
  5956                              <1> ;	ch = height of list box
  5957                              <1> ;	ds:bx -> 2nd level pointer to title
  5958                              <1> ;	ds:dx -> 2nd level pointer to header
  5959                              <1> ;	ds:si -> items string proc
  5960                              <1> ; output:
  5961                              <1> ;	cl = selected item, 0xff means canceled
  5962                              <1> ;	cf = 0 success, cf = 1 canceled
  5963                              <1> ;=============================================================================
  5964                              <1> list_box:
  5965 000021B3 60                  <1> 	pusha
  5966 000021B4 BF[7A66]            <1> 	mov di, ui_tmp.tmp_menubox
  5967 000021B7 E8A3FF              <1> 	call listbox_prepare
  5968 000021BA 89FE                <1> 	mov si, di
  5969 000021BC E8D901              <1> 	call window_run
  5970 000021BF 61                  <1> 	popa
  5971 000021C0 8A0E[A166]          <1> 	mov cl, [ui_tmp.tmp_menubox + struc_menu_box.focus_item]
  5972 000021C4 80F9FF              <1> 	cmp cl, 0xFF
  5973 000021C7 7402                <1> 	je .cancel
  5974 000021C9 F8                  <1> 	clc
  5975 000021CA C3                  <1> 	ret
  5976                              <1> .cancel:
  5977 000021CB F9                  <1> 	stc
  5978 000021CC C3                  <1> 	ret
  5979                              <1> 
  5980                              <1> ;=============================================================================
  5981                              <1> ; listbox_cancel
  5982                              <1> ;=============================================================================
  5983                              <1> listbox_cancel:
  5984 000021CD C64427FF            <1> 	mov byte [si + struc_menu_box.focus_item], 0xFF
  5985 000021D1 C3                  <1> 	ret
  5986                              <1> ;=============================================================================
  5987                              <1> 
  5988                              <1> 
  5989                              <1> 
  5990                              <1> ;=============================================================================
  5991                              <1> ;<<<<<<<<<<<<<<<<<<<<<<<<<< Window System functions >>>>>>>>>>>>>>>>>>>>>>>>>>
  5992                              <1> ;=============================================================================
  5993                              <1> 
  5994                              <1> ;=============================================================================
  5995                              <1> ; window_draw_all ---- draw all windows
  5996                              <1> ; input:
  5997                              <1> ;	none
  5998                              <1> ; output:
  5999                              <1> ;	none
  6000                              <1> ;=============================================================================
  6001                              <1> window_draw_all:
  6002 000021D2 60                  <1> 	pusha
  6003 000021D3 8B36[1566]          <1> 	mov si, [ui_tmp.root_win]
  6004 000021D7 09F6                <1> 	or si, si
  6005 000021D9 7409                <1> 	jz .end
  6006 000021DB E899FA              <1> 	call lock_screen
  6007 000021DE E82600              <1> 	call window_draw_window
  6008 000021E1 E8B9FA              <1> 	call unlock_screen
  6009                              <1> .end:
  6010 000021E4 61                  <1> 	popa
  6011 000021E5 C3                  <1> 	ret
  6012                              <1> 
  6013                              <1> ;=============================================================================
  6014                              <1> ; window_draw_body ---- draw the window body
  6015                              <1> ; input:
  6016                              <1> ;	ds:si -> pointer to struc_window
  6017                              <1> ; output:
  6018                              <1> ;	none
  6019                              <1> ;=============================================================================
  6020                              <1> window_draw_body:
  6021 000021E6 60                  <1> 	pusha
  6022 000021E7 09F6                <1> 	or si, si
  6023 000021E9 741A                <1> 	jz .no_win
  6024                              <1> 
  6025 000021EB F60401              <1> 	test byte [si], WINFLAG_OPEN
  6026 000021EE 7415                <1> 	jz .no_win
  6027                              <1> 
  6028 000021F0 8B5C18              <1> 	mov bx, [si + struc_window.draw_body_proc]
  6029 000021F3 09DB                <1> 	or bx, bx
  6030 000021F5 740E                <1> 	jz .no_win
  6031                              <1> 
  6032 000021F7 56                  <1> 	push si
  6033 000021F8 FFD3                <1> 	call bx
  6034 000021FA 5E                  <1> 	pop si
  6035                              <1> 
  6036 000021FB 8B740C              <1> 	mov si, [si + struc_window.next_win]
  6037 000021FE 09F6                <1> 	or si, si
  6038 00002200 7403                <1> 	jz .no_win
  6039 00002202 E80200              <1> 	call window_draw_window		; draw top windows.
  6040                              <1> 
  6041                              <1> .no_win:
  6042 00002205 61                  <1> 	popa
  6043 00002206 C3                  <1> 	ret
  6044                              <1> ;=============================================================================
  6045                              <1> ; window_draw_window ---- draw the window and window body
  6046                              <1> ; input:
  6047                              <1> ;	ds:si -> pointer to struc_window
  6048                              <1> ; output:
  6049                              <1> ;	none
  6050                              <1> ;=============================================================================
  6051                              <1> window_draw_window:
  6052 00002207 60                  <1> 	pusha
  6053                              <1> 
  6054 00002208 E8D9F9              <1> 	call hide_cursor
  6055                              <1> 
  6056 0000220B 09F6                <1> 	or si, si
  6057 0000220D 7422                <1> 	jz .no_next_win
  6058                              <1> 
  6059 0000220F F60401              <1> 	test byte [si], WINFLAG_OPEN
  6060 00002212 7413                <1> 	jz .no_body
  6061 00002214 F60404              <1> 	test byte [si], WINFLAG_FRAMED
  6062 00002217 7403                <1> 	jz .no_frame
  6063 00002219 E81700              <1> 	call window_draw_frame
  6064                              <1> .no_frame:
  6065 0000221C 8B5C18              <1> 	mov bx, [si + struc_window.draw_body_proc]
  6066 0000221F 09DB                <1> 	or bx, bx
  6067 00002221 7404                <1> 	jz .no_body
  6068 00002223 56                  <1>         push si
  6069 00002224 FFD3                <1> 	call bx
  6070 00002226 5E                  <1>         pop si
  6071                              <1> .no_body:
  6072 00002227 8B740C              <1> 	mov si, [si + struc_window.next_win]
  6073 0000222A 09F6                <1> 	or si, si
  6074 0000222C 7403                <1> 	jz .no_next_win
  6075 0000222E E8D6FF              <1> 	call window_draw_window		; draw top windows.
  6076                              <1> 
  6077                              <1> .no_next_win:
  6078 00002231 61                  <1> 	popa
  6079 00002232 C3                  <1> 	ret
  6080                              <1> 
  6081                              <1> ;=============================================================================
  6082                              <1> ; window_draw_frame ---- draw the window frame and clear the window body
  6083                              <1> ; input:
  6084                              <1> ;	ds:si -> pointer to struc_window
  6085                              <1> ; output:
  6086                              <1> ;	none
  6087                              <1> ;=============================================================================
  6088                              <1> window_draw_frame:
  6089 00002233 60                  <1> 	pusha
  6090 00002234 8B4C06              <1> 	mov cx, [si + struc_window.win_pos]	; window position
  6091 00002237 8B5408              <1> 	mov dx, [si + struc_window.win_size]	;
  6092 0000223A 01CA                <1> 	add dx, cx				; calculate window bottom
  6093 0000223C 81EA0101            <1> 	sub dx, 0x0101				; right corner.
  6094                              <1> 
  6095 00002240 8B5C04              <1> 	mov bx, [si + struc_window.win_attr]	; window attribute
  6096                              <1> 
  6097 00002243 3B36[1366]          <1> 	cmp si, [ui_tmp.focus_win]
  6098 00002247 7404                <1> 	je .focused
  6099                              <1> 
  6100 00002249 8A3E[0546]          <1> 	mov bh, [color.win_title_inactive]	; use another title attr for 
  6101                              <1> 						; inactive window.
  6102                              <1> .focused:
  6103 0000224D 8B7402              <1> 	mov si, [si + struc_window.title]	; get window title pointer
  6104 00002250 09F6                <1> 	or si, si
  6105 00002252 7402                <1> 	jz .no_title
  6106 00002254 8B34                <1> 	mov si, [si]
  6107                              <1> .no_title:
  6108 00002256 E8D3F7              <1> 	call draw_window
  6109 00002259 61                  <1> 	popa
  6110 0000225A C3                  <1> 	ret
  6111                              <1> 
  6112                              <1> ;=============================================================================
  6113                              <1> ; window_set_cursor
  6114                              <1> ; input:
  6115                              <1> ;	dx = cursor position
  6116                              <1> ;	ds:si -> window
  6117                              <1> ; output:
  6118                              <1> ;	none
  6119                              <1> ;=============================================================================
  6120                              <1> window_set_cursor:
  6121 0000225B 52                  <1> 	push dx
  6122 0000225C F60401              <1> 	test byte [si], WINFLAG_OPEN
  6123 0000225F 7406                <1> 	jz .no_cursor
  6124                              <1> 
  6125 00002261 035406              <1> 	add dx, [si + struc_window.win_pos]
  6126 00002264 E872F9              <1> 	call set_cursor
  6127                              <1> 
  6128                              <1> .no_cursor:
  6129 00002267 5A                  <1> 	pop dx
  6130 00002268 C3                  <1> 	ret
  6131                              <1> 
  6132                              <1> ;=============================================================================
  6133                              <1> ; window_draw_char ---- Draw chars at special position in a window
  6134                              <1> ;input:
  6135                              <1> ;      bl = high 4 bit Background color and low 4 bit Foreground color
  6136                              <1> ;      dh = start row
  6137                              <1> ;      dl = start column
  6138                              <1> ;      al = the char to be displayed
  6139                              <1> ;      cx = repeat times
  6140                              <1> ;      ds:si -> the window
  6141                              <1> ;output:
  6142                              <1> ;      none
  6143                              <1> ;=============================================================================
  6144                              <1> window_draw_char:
  6145 00002269 52                  <1> 	push dx
  6146 0000226A F60401              <1> 	test byte [si], WINFLAG_OPEN
  6147 0000226D 7406                <1> 	jz .not_draw
  6148                              <1> 
  6149 0000226F 035406              <1> 	add dx, [si + struc_window.win_pos]
  6150 00002272 E851F7              <1> 	call draw_char
  6151                              <1> 
  6152                              <1> .not_draw:
  6153 00002275 5A                  <1> 	pop dx
  6154 00002276 C3                  <1> 	ret
  6155                              <1> 
  6156                              <1> ;=============================================================================
  6157                              <1> ;window_draw_string ---- Draw a zero ending string in a window 
  6158                              <1> ;                    at special position
  6159                              <1> ;input:
  6160                              <1> ;      bl = attribute for normal characters
  6161                              <1> ;           high 4 bit Background color and low 4 bit Foreground color
  6162                              <1> ;      bh = attribute for hightlight characters
  6163                              <1> ;      dh = start row
  6164                              <1> ;      dl = start column
  6165                              <1> ;      ds:si -> the string to be displayed
  6166                              <1> ;      ds:di -> the window
  6167                              <1> ;output:
  6168                              <1> ;      none
  6169                              <1> ;=============================================================================
  6170                              <1> window_draw_string:
  6171 00002277 60                  <1> 	pusha
  6172 00002278 F60501              <1> 	test byte [di], WINFLAG_OPEN
  6173 0000227B 7406                <1> 	jz .not_draw
  6174                              <1> 
  6175 0000227D 035506              <1> 	add dx, [di + struc_window.win_pos]
  6176 00002280 E81CF7              <1> 	call draw_string
  6177                              <1> .not_draw:
  6178 00002283 61                  <1> 	popa
  6179 00002284 C3                  <1> 	ret
  6180                              <1> 
  6181                              <1> ;=============================================================================
  6182                              <1> ; window_draw_scrollbar ---- draw a scroll bar in a window
  6183                              <1> ; input:
  6184                              <1> ;	ds:si -> pointer to struc_window
  6185                              <1> ;	al    -> total amount
  6186                              <1> ;	ah    -> current value
  6187                              <1> ;	bl    -> attribute 
  6188                              <1> ;	ch    -> row of top of the scroll bar (relative to window position)
  6189                              <1> ;	cl    -> col of top of the scroll bar (relative to window position)
  6190                              <1> ;	dh    -> height of the scroll bar ( vertical bar, dl = 0 )
  6191                              <1> ;	dl    -> length of the scroll bar ( horizontal bar, dh = 0 )
  6192                              <1> ; output:
  6193                              <1> ;	none
  6194                              <1> ;=============================================================================
  6195                              <1> window_draw_scrollbar:
  6196 00002285 60                  <1> 	pusha
  6197                              <1> 
  6198                              <1> ; ================== do some initialization. ==================
  6199 00002286 51                  <1> 	push cx
  6200 00002287 31C9                <1> 	xor cx, cx
  6201 00002289 880E[2723]          <1> 	mov [.bar_type], cl
  6202 0000228D FEC1                <1> 	inc cl
  6203                              <1> 
  6204 0000228F 08F6                <1> 	or dh, dh
  6205 00002291 7406                <1> 	jz .horiz1
  6206 00002293 880E[2723]          <1> 	mov [.bar_type], cl
  6207 00002297 86D6                <1> 	xchg dl, dh
  6208                              <1> .horiz1:
  6209                              <1> 
  6210 00002299 8816[2823]          <1> 	mov [.bar_length], dl
  6211 0000229D 5A                  <1> 	pop dx
  6212                              <1> 
  6213 0000229E 50                  <1> 	push ax
  6214 0000229F 52                  <1> 	push dx
  6215                              <1> 
  6216                              <1> ; ==================== draw blank bar =================
  6217 000022A0 8A26[2823]          <1> 	mov ah, [.bar_length]
  6218 000022A4 B020                <1> 	mov al, ' '
  6219                              <1> 
  6220                              <1> .loop_draw_blank:
  6221 000022A6 E8C0FF              <1> 	call window_draw_char
  6222 000022A9 FECC                <1> 	dec ah
  6223                              <1> 
  6224 000022AB 803E[2723]00        <1> 	cmp byte [.bar_type], 0
  6225 000022B0 7405                <1> 	jz .horiz2
  6226 000022B2 FEC6                <1> 	inc dh
  6227 000022B4 E90200              <1> 	jmp near .cont_draw_blank
  6228                              <1> .horiz2:
  6229 000022B7 FEC2                <1> 	inc dl
  6230                              <1> 
  6231                              <1> .cont_draw_blank:
  6232 000022B9 08E4                <1> 	or ah, ah
  6233 000022BB 75E9                <1> 	jnz .loop_draw_blank
  6234                              <1> 
  6235 000022BD 803E[2723]00        <1> 	cmp byte [.bar_type], 0
  6236 000022C2 7406                <1> 	jz .horiz3
  6237 000022C4 B81E1F              <1> 	mov ax, 0x1f1e
  6238 000022C7 E90300              <1> 	jmp near .draw_arrow
  6239                              <1> .horiz3:
  6240 000022CA B83C3E              <1> 	mov ax, '<>'
  6241                              <1> 
  6242                              <1> .draw_arrow:
  6243 000022CD 5A                  <1> 	pop dx
  6244 000022CE 52                  <1> 	push dx
  6245                              <1> 
  6246 000022CF E897FF              <1> 	call window_draw_char
  6247 000022D2 86C4                <1> 	xchg al, ah
  6248                              <1> 
  6249 000022D4 803E[2723]00        <1> 	cmp byte [.bar_type], 0
  6250 000022D9 7409                <1> 	jz .horiz4
  6251 000022DB 0236[2823]          <1> 	add dh, [.bar_length]
  6252 000022DF FECE                <1> 	dec dh
  6253 000022E1 E90600              <1> 	jmp near .draw_end_arrow
  6254                              <1> .horiz4:
  6255 000022E4 0216[2823]          <1> 	add dl, [.bar_length]
  6256 000022E8 FECA                <1> 	dec dl
  6257                              <1> .draw_end_arrow:
  6258                              <1> 
  6259 000022EA E87CFF              <1> 	call window_draw_char
  6260 000022ED 5A                  <1> 	pop dx
  6261                              <1> 
  6262                              <1> ; ================= draw scroll block ===============
  6263 000022EE 59                  <1> 	pop cx
  6264 000022EF 380E[2823]          <1> 	cmp [.bar_length], cl
  6265 000022F3 7330                <1> 	jae .no_cursor
  6266 000022F5 803E[2823]03        <1> 	cmp byte [.bar_length], 3
  6267 000022FA 7229                <1> 	jb .no_cursor
  6268                              <1> 
  6269 000022FC 0FB6C5              <1> 	movzx ax, ch			; block position =
  6270 000022FF 8A2E[2823]          <1> 	mov ch, [.bar_length]		; cur value * bar length / value max
  6271 00002303 80ED02              <1> 	sub ch, 2			; 
  6272 00002306 F6E5                <1> 	mul ch				;
  6273 00002308 F6F1                <1> 	div cl				;
  6274                              <1> 
  6275 0000230A 803E[2723]00        <1> 	cmp byte [.bar_type], 0
  6276 0000230F 7407                <1> 	jz .horiz5
  6277 00002311 00C6                <1> 	add dh, al
  6278 00002313 FEC6                <1> 	inc dh
  6279 00002315 E90400              <1> 	jmp near .draw_scroll_block
  6280                              <1> .horiz5:
  6281 00002318 00C2                <1> 	add dl, al
  6282 0000231A FEC2                <1> 	inc dl
  6283                              <1> 
  6284                              <1> .draw_scroll_block:
  6285 0000231C B04F                <1> 	mov al, 'O'
  6286 0000231E 31C9                <1> 	xor cx, cx
  6287 00002320 FEC1                <1> 	inc cl
  6288 00002322 E844FF              <1> 	call window_draw_char
  6289                              <1> 
  6290                              <1> .no_cursor:
  6291 00002325 61                  <1> 	popa
  6292 00002326 C3                  <1> 	ret
  6293                              <1> 
  6294 00002327 00                  <1> .bar_type	db 0		; 1 = vertical, 0 =horizontal
  6295 00002328 00                  <1> .bar_length	db 0
  6296                              <1> 
  6297                              <1> 
  6298                              <1> ;=============================================================================
  6299                              <1> ; window_initialize ---- initialize the window system.
  6300                              <1> ; input:
  6301                              <1> ;	none
  6302                              <1> ; output:
  6303                              <1> ;	none
  6304                              <1> ;=============================================================================
  6305                              <1> window_initialize:
  6306 00002329 60                  <1> 	pusha
  6307 0000232A 30C0                <1> 	xor al, al
  6308 0000232C BF[1766]            <1> 	mov di, ui_tmp.def_root_win
  6309 0000232F B91A00              <1> 	mov cx, SIZE_OF_STRUC_WINDOW
  6310 00002332 E82608              <1> 	call clear_memory
  6311 00002335 C60509              <1> 	mov byte [di], WINFLAG_OPEN | WINFLAG_NO_FOCUS
  6312 00002338 C74518[4923]        <1> 	mov word [di + struc_window.draw_body_proc], window_clear_win_area
  6313 0000233D A1[1E26]            <1> 	mov ax, [ui_screen_size]
  6314 00002340 894508              <1> 	mov [di + struc_window.win_size], ax
  6315                              <1> 
  6316 00002343 893E[1566]          <1> 	mov [ui_tmp.root_win], di
  6317 00002347 61                  <1> 	popa
  6318 00002348 C3                  <1> 	ret
  6319                              <1> 
  6320                              <1> 
  6321                              <1> ;=============================================================================
  6322                              <1> ; window_clear_win_area:
  6323                              <1> ; input:
  6324                              <1> ;	ds:si -> root win
  6325                              <1> ; output:
  6326                              <1> ;	none
  6327                              <1> ;=============================================================================
  6328                              <1> window_clear_win_area:
  6329 00002349 60                  <1> 	pusha
  6330 0000234A 8B4C06              <1> 	mov cx, [si + struc_window.win_pos]
  6331 0000234D 8B5408              <1> 	mov dx, [si + struc_window.win_size]
  6332 00002350 01CA                <1> 	add dx, cx
  6333 00002352 81EA0101            <1> 	sub dx, 0x0101
  6334 00002356 8A7C04              <1> 	mov bh, [si + struc_window.win_attr]
  6335 00002359 E888F6              <1> 	call clear_screen
  6336 0000235C 61                  <1> 	popa
  6337 0000235D C3                  <1> 	ret
  6338                              <1> 
  6339                              <1> ;=============================================================================
  6340                              <1> ; window_execute ---- execute the  window system, no return.
  6341                              <1> ; input:
  6342                              <1> ;	ds:bx -> pointer to root window
  6343                              <1> ;	ds:si -> pointer to current window
  6344                              <1> ; output:
  6345                              <1> ;	none
  6346                              <1> ;=============================================================================
  6347                              <1> window_execute:
  6348 0000235E 09DB                <1> 	or bx, bx
  6349 00002360 7503                <1> 	jnz .has_root
  6350 00002362 BB[1766]            <1> 	mov bx, ui_tmp.def_root_win
  6351                              <1> .has_root:
  6352 00002365 09F6                <1> 	or si, si
  6353 00002367 742E                <1> 	jz .end
  6354                              <1> 
  6355 00002369 87F3                <1> 	xchg si, bx
  6356 0000236B E8B001              <1> 	call winlist_setroot
  6357 0000236E E896FE              <1> 	call window_draw_window
  6358 00002371 87F3                <1> 	xchg si, bx
  6359                              <1> 
  6360                              <1> .loop_exec:
  6361 00002373 F60408              <1> 	test byte [si], WINFLAG_NO_FOCUS
  6362 00002376 7510                <1> 	jnz .find_focusable
  6363                              <1> 
  6364 00002378 E81D00              <1> 	call window_run
  6365 0000237B 8B36[1366]          <1> 	mov si, [ui_tmp.focus_win]
  6366 0000237F 09F6                <1> 	or si, si
  6367 00002381 7414                <1> 	jz .end
  6368                              <1> 
  6369 00002383 E84D02              <1> 	call winlist_findwin
  6370 00002386 7208                <1> 	jc .reset_focus
  6371                              <1> 
  6372                              <1> .find_focusable:
  6373 00002388 E85E02              <1> 	call winlist_find_focusable
  6374 0000238B 09F6                <1> 	or si, si
  6375 0000238D 75E4                <1> 	jnz .loop_exec
  6376 0000238F C3                  <1> 	ret
  6377                              <1> 
  6378                              <1> .reset_focus:
  6379 00002390 E8FA01              <1> 	call winlist_findtop
  6380 00002393 89FE                <1> 	mov si, di
  6381 00002395 EBDC                <1> 	jmp short .loop_exec
  6382                              <1> .end:
  6383 00002397 C3                  <1> 	ret
  6384                              <1> 
  6385                              <1> ;=============================================================================
  6386                              <1> ; window_run ---- run a window, open it, and loop get key until the window
  6387                              <1> ;                 is closed (WINFLAG_OPEN is cleared). It passes the key to 
  6388                              <1> ;                 function window_event_handle. If window_event_handle failed
  6389                              <1> ;                 to handle this key, then the key will be passed to its 
  6390                              <1> ;                 parent window.
  6391                              <1> ; input:
  6392                              <1> ;	ds:si -> pointer to struc_window
  6393                              <1> ; output:
  6394                              <1> ;	none
  6395                              <1> ;=============================================================================
  6396                              <1> window_run:
  6397 00002398 E83802              <1> 	call winlist_findwin
  6398 0000239B 720E                <1> 	jc .run_this_win
  6399                              <1> 
  6400 0000239D F6440101            <1> 	test byte [si + 1], WINFLAG_HI_RUNNING
  6401 000023A1 7408                <1> 	jz .run_this_win
  6402                              <1> 
  6403 000023A3 8936[1366]          <1> 	mov [ui_tmp.focus_win], si
  6404 000023A7 E8F501              <1> 	call winlist_raise
  6405 000023AA C3                  <1> 	ret
  6406                              <1> 
  6407                              <1> .run_this_win:
  6408 000023AB 60                  <1> 	pusha
  6409 000023AC 804C0101            <1> 	or byte [si + 1], WINFLAG_HI_RUNNING
  6410                              <1> 
  6411 000023B0 FF36[1366]          <1> 	push word [ui_tmp.focus_win]
  6412 000023B4 E82D00              <1> 	call window_open
  6413                              <1> 
  6414                              <1> .loop_run:	
  6415 000023B7 3936[1366]          <1> 	cmp [ui_tmp.focus_win], si		; if current win is switched
  6416 000023BB 7520                <1> 	jne .end_run				; just return.
  6417                              <1> 
  6418 000023BD E863F2              <1> 	call get_event
  6419 000023C0 80FCF0              <1> 	cmp ah, EVTCODE_COMMAND
  6420 000023C3 720A                <1> 	jb .keycode
  6421 000023C5 F6C404              <1> 	test ah, EVTCODE_BROADCAST
  6422 000023C8 7405                <1> 	jz .keycode
  6423 000023CA E83002              <1> 	call winlist_broadcast_event
  6424 000023CD EB03                <1> 	jmp short .cont_run
  6425                              <1> .keycode:
  6426 000023CF E8E300              <1> 	call window_event_dispatcher
  6427                              <1> .cont_run:
  6428 000023D2 F60401              <1> 	test byte [si], WINFLAG_OPEN
  6429 000023D5 75E0                <1> 	jnz .loop_run
  6430                              <1> 
  6431 000023D7 8F06[1366]          <1> 	pop word [ui_tmp.focus_win]		; if window is closed, restore
  6432 000023DB EB01                <1> 	jmp short .end				; focus_win and return.
  6433                              <1> 
  6434                              <1> .end_run:
  6435 000023DD 58                  <1> 	pop ax
  6436                              <1> .end:
  6437 000023DE 806401FE            <1> 	and byte [si + 1], ~ WINFLAG_HI_RUNNING
  6438 000023E2 61                  <1> 	popa
  6439 000023E3 C3                  <1> 	ret
  6440                              <1> 
  6441                              <1> 
  6442                              <1> ;=============================================================================
  6443                              <1> ; window_open ---- open a window, draw the window and set flag WINFLAG_OPEN, 
  6444                              <1> ;                  and insert it into the windows list.
  6445                              <1> ; input:
  6446                              <1> ;	ds:si -> pointer to struc_window
  6447                              <1> ; output:
  6448                              <1> ;	none
  6449                              <1> ;=============================================================================
  6450                              <1> window_open:
  6451 000023E4 60                  <1> 	pusha
  6452 000023E5 E8B701              <1> 	call winlist_raise
  6453 000023E8 800C01              <1> 	or byte [si], WINFLAG_OPEN
  6454 000023EB E8B801              <1> 	call winlist_set_focus_win
  6455 000023EE 61                  <1> 	popa
  6456 000023EF C3                  <1> 	ret
  6457                              <1> 
  6458                              <1> ;=============================================================================
  6459                              <1> ; window_close ---- close a window, clear flag WINFLAG_OPEN, and remove it
  6460                              <1> ;                   from the windows list.
  6461                              <1> ; input:
  6462                              <1> ;	ds:si -> pointer to struc_window
  6463                              <1> ; output:
  6464                              <1> ;	none
  6465                              <1> ;=============================================================================
  6466                              <1> window_close:
  6467 000023F0 60                  <1> 	pusha
  6468 000023F1 E86901              <1> 	call winlist_remove
  6469 000023F4 8024FE              <1> 	and byte [si], ~ WINFLAG_OPEN
  6470 000023F7 E8D8FD              <1> 	call window_draw_all
  6471 000023FA 61                  <1> 	popa
  6472 000023FB C3                  <1> 	ret
  6473                              <1> 
  6474                              <1> ;=============================================================================
  6475                              <1> ; window_move_up ---- move the window up one row
  6476                              <1> ; input:
  6477                              <1> ;	ds:si -> pointer to struc_window
  6478                              <1> ; output:
  6479                              <1> ;	none
  6480                              <1> ;=============================================================================
  6481                              <1> window_move_up:
  6482 000023FC 50                  <1> 	push ax
  6483 000023FD 8A4407              <1> 	mov al, [si + struc_window.win_pos + 1]
  6484 00002400 08C0                <1> 	or al, al
  6485 00002402 7405                <1> 	jz .no_move
  6486 00002404 FEC8                <1> 	dec al
  6487 00002406 884407              <1> 	mov [si + struc_window.win_pos + 1], al
  6488                              <1> .no_move:
  6489 00002409 58                  <1> 	pop ax
  6490 0000240A C3                  <1> 	ret
  6491                              <1> 
  6492                              <1> ;=============================================================================
  6493                              <1> ; window_move_down ---- move the window down one row
  6494                              <1> ; input:
  6495                              <1> ;	ds:si -> pointer to struc_window
  6496                              <1> ; output:
  6497                              <1> ;	none
  6498                              <1> ;=============================================================================
  6499                              <1> window_move_down:
  6500 0000240B 50                  <1> 	push ax
  6501 0000240C 8A4407              <1> 	mov al, [si + struc_window.win_pos + 1]
  6502 0000240F 8A26[1F26]          <1> 	mov ah, [ui_screen_height]
  6503 00002413 FECC                <1> 	dec ah
  6504                              <1> 
  6505 00002415 38E0                <1> 	cmp al, ah
  6506 00002417 7305                <1> 	jae .no_move
  6507 00002419 FEC0                <1> 	inc al
  6508 0000241B 884407              <1> 	mov [si + struc_window.win_pos + 1], al
  6509                              <1> .no_move:
  6510 0000241E 58                  <1> 	pop ax
  6511 0000241F C3                  <1> 	ret
  6512                              <1> 
  6513                              <1> 
  6514                              <1> ;=============================================================================
  6515                              <1> ; window_move_left ---- move the window left one column
  6516                              <1> ; input:
  6517                              <1> ;	ds:si -> pointer to struc_window
  6518                              <1> ; output:
  6519                              <1> ;	none
  6520                              <1> ;=============================================================================
  6521                              <1> window_move_left:
  6522 00002420 50                  <1> 	push ax
  6523 00002421 8A4406              <1> 	mov al, [si + struc_window.win_pos]
  6524 00002424 08C0                <1> 	or al, al
  6525 00002426 7405                <1> 	jz .no_move
  6526 00002428 FEC8                <1> 	dec al
  6527 0000242A 884406              <1> 	mov [si + struc_window.win_pos], al
  6528                              <1> .no_move:
  6529 0000242D 58                  <1> 	pop ax
  6530 0000242E C3                  <1> 	ret
  6531                              <1> 
  6532                              <1> 
  6533                              <1> ;=============================================================================
  6534                              <1> ; window_move_right ---- move the window right one column
  6535                              <1> ; input:
  6536                              <1> ;	ds:si -> pointer to struc_window
  6537                              <1> ; output:
  6538                              <1> ;	none
  6539                              <1> ;=============================================================================
  6540                              <1> window_move_right:
  6541 0000242F 50                  <1> 	push ax
  6542 00002430 8A4406              <1> 	mov al, [si + struc_window.win_pos]
  6543 00002433 8A26[1E26]          <1> 	mov ah, [ui_screen_width]
  6544 00002437 2A6408              <1> 	sub ah, [si + struc_window.win_size]
  6545 0000243A 80EC02              <1> 	sub ah, 2
  6546                              <1> 
  6547 0000243D 38E0                <1> 	cmp al, ah
  6548 0000243F 7305                <1> 	jae .no_move
  6549 00002441 FEC0                <1> 	inc al
  6550 00002443 884406              <1> 	mov [si + struc_window.win_pos], al
  6551                              <1> .no_move:
  6552 00002446 58                  <1> 	pop ax
  6553 00002447 C3                  <1> 	ret
  6554                              <1> 
  6555                              <1> 
  6556                              <1> ;=============================================================================
  6557                              <1> ; window_switch_window ---- switch to the next window
  6558                              <1> ; input:
  6559                              <1> ;	ds:si -> pointer to current window
  6560                              <1> ; output:
  6561                              <1> ;	none
  6562                              <1> ;=============================================================================
  6563                              <1> window_switch_window:
  6564 00002448 60                  <1> 	pusha
  6565 00002449 F60402              <1> 	test byte [si], WINFLAG_MODAL
  6566 0000244C 7511                <1> 	jnz .no_switch
  6567 0000244E E88201              <1> 	call winlist_findwin
  6568 00002451 720C                <1> 	jc .no_switch
  6569 00002453 8B36[1566]          <1> 	mov si, [ui_tmp.root_win]
  6570 00002457 09F6                <1> 	or si, si
  6571 00002459 7404                <1> 	jz .no_switch
  6572                              <1> 
  6573 0000245B 8936[1366]          <1> 	mov [ui_tmp.focus_win], si
  6574                              <1> 
  6575                              <1> .no_switch:
  6576 0000245F 61                  <1> 	popa
  6577 00002460 C3                  <1> 	ret
  6578                              <1> 
  6579                              <1> ;=============================================================================
  6580                              <1> ; move a window to center of the screen.
  6581                              <1> ;input:
  6582                              <1> ;	ds:si -> pointer to window
  6583                              <1> ;output:
  6584                              <1> ;	none
  6585                              <1> ;=============================================================================
  6586                              <1> window_center_window:
  6587 00002461 60                  <1> 	pusha
  6588 00002462 8B5408              <1> 	mov dx, [si + struc_window.win_size]
  6589 00002465 8B0E[1E26]          <1> 	mov cx, [ui_screen_size]                   ; calculate the coordinate
  6590                              <1> 
  6591 00002469 28F5                <1> 	sub ch, dh                              ; of input box.
  6592 0000246B D0ED                <1> 	shr ch, 1                               ; cx = top left pos
  6593 0000246D 28D1                <1> 	sub cl, dl                              ; 
  6594 0000246F D0E9                <1> 	shr cl, 1                               ;
  6595                              <1> 
  6596 00002471 894C06              <1> 	mov [si + struc_window.win_pos], cx
  6597 00002474 61                  <1> 	popa
  6598 00002475 C3                  <1> 	ret
  6599                              <1> 
  6600                              <1> 
  6601                              <1> ;=============================================================================
  6602                              <1> ; window_default_event_handle ---- default event handle for a normal window, it
  6603                              <1> ;                           handles some normal events, such as move window.
  6604                              <1> ; input:
  6605                              <1> ;	ax    -> keycode
  6606                              <1> ;	ds:si -> pointer to struc_window
  6607                              <1> ; output:
  6608                              <1> ;	cf = 0, success
  6609                              <1> ;	cf = 1, fail, no such action
  6610                              <1> ;=============================================================================
  6611                              <1> window_default_event_handle:
  6612 00002476 60                  <1> 	pusha
  6613 00002477 B90E00              <1> 	mov cx, WINDOW_DEF_ACTION_NUM
  6614 0000247A BB[2426]            <1> 	mov bx, window_def_action_table
  6615 0000247D E81C00              <1> 	call window_generic_event_handle
  6616 00002480 61                  <1> 	popa
  6617 00002481 C3                  <1> 	ret
  6618                              <1> 
  6619                              <1> ;=============================================================================
  6620                              <1> ; window_event_handle ----  event handle for a normal window, it finds 
  6621                              <1> ;                           the corresponding action for a key event from
  6622                              <1> ;                           action_table then call window_do_action to run it.
  6623                              <1> ;                           If the event is not in action_table, then
  6624                              <1> ;                           .defkey_handle will be called to handle it.
  6625                              <1> ; input:
  6626                              <1> ;	ax    -> keycode
  6627                              <1> ;	ds:si -> pointer to struc_window
  6628                              <1> ; output:
  6629                              <1> ;	cf = 0, success
  6630                              <1> ;	cf = 1, fail, no such action
  6631                              <1> ;=============================================================================
  6632                              <1> window_event_handle:
  6633 00002482 60                  <1> 	pusha
  6634 00002483 8B5C12              <1> 	mov bx, [si + struc_window.act_table]
  6635 00002486 8B4C10              <1> 	mov cx, [si + struc_window.act_num]
  6636 00002489 E81000              <1> 	call window_generic_event_handle
  6637 0000248C 730C                <1> 	jnc .success
  6638 0000248E 8B5C14              <1> 	mov bx, [si + struc_window.default_event_handle]
  6639 00002491 09DB                <1> 	or bx, bx
  6640 00002493 7404                <1> 	jz .failed
  6641 00002495 FFD3                <1> 	call bx
  6642 00002497 7301                <1> 	jnc .success
  6643                              <1> .failed:
  6644 00002499 F9                  <1> 	stc
  6645                              <1> .success:
  6646 0000249A 61                  <1> 	popa
  6647 0000249B C3                  <1> 	ret
  6648                              <1> 
  6649                              <1> ;=============================================================================
  6650                              <1> ; window_generic_event_handle ---- generic event handle, it find a key from 
  6651                              <1> ;                                  an action list, then run it.
  6652                              <1> ; input:
  6653                              <1> ;	ax    -> keycode
  6654                              <1> ;	ds:si -> pointer to struc_window
  6655                              <1> ;	ds:bx -> action list
  6656                              <1> ;	cx    -> action number
  6657                              <1> ; output:
  6658                              <1> ;	cf = 0, success
  6659                              <1> ;	cf = 1, fail, no such action
  6660                              <1> ;=============================================================================
  6661                              <1> window_generic_event_handle:
  6662 0000249C 09C9                <1> 	or cx, cx
  6663 0000249E 7413                <1> 	jz .no_action
  6664 000024A0 09DB                <1> 	or bx, bx
  6665 000024A2 740F                <1> 	jz .no_action
  6666                              <1> 
  6667                              <1> .loop_find_act:
  6668 000024A4 394701              <1> 	cmp [bx + struc_action.keycode], ax
  6669 000024A7 7505                <1> 	jne .cont_find
  6670 000024A9 E82600              <1> 	call window_do_action
  6671 000024AC F8                  <1> 	clc
  6672 000024AD C3                  <1> 	ret
  6673                              <1> 
  6674                              <1> .cont_find:
  6675 000024AE 83C305              <1> 	add bx, SIZE_OF_STRUC_ACTION
  6676 000024B1 E2F1                <1> 	loop .loop_find_act
  6677                              <1> 
  6678                              <1> .no_action:
  6679 000024B3 F9                  <1> 	stc
  6680 000024B4 C3                  <1> 	ret
  6681                              <1> 
  6682                              <1> ;=============================================================================
  6683                              <1> ; window_event_dispatcher ---- dispatch event to event handle 
  6684                              <1> ; input:
  6685                              <1> ;	ax    -> keycode
  6686                              <1> ;	ds:si -> pointer to struc_window
  6687                              <1> ; output:
  6688                              <1> ;	cf = 0, success
  6689                              <1> ;	cf = 1, fail, no such action
  6690                              <1> ;=============================================================================
  6691                              <1> window_event_dispatcher:
  6692 000024B5 60                  <1> 	pusha
  6693 000024B6 8B5C16              <1> 	mov bx, [si + struc_window.event_handle]
  6694 000024B9 09DB                <1> 	or bx, bx
  6695 000024BB 7406                <1> 	jz .no_event_handle
  6696                              <1> 
  6697 000024BD 56                  <1> 	push si
  6698 000024BE FFD3                <1> 	call bx
  6699 000024C0 5E                  <1> 	pop si
  6700                              <1> 
  6701 000024C1 730D                <1> 	jnc .action_ok
  6702                              <1> 
  6703                              <1> .no_event_handle:
  6704 000024C3 8B740A              <1> 	mov si, [si + struc_window.parent_win]
  6705 000024C6 09F6                <1> 	or si, si
  6706 000024C8 7405                <1> 	jz .no_parent
  6707 000024CA E8E8FF              <1> 	call window_event_dispatcher
  6708 000024CD 7301                <1> 	jnc .action_ok
  6709                              <1> 
  6710                              <1> .no_parent:
  6711 000024CF F9                  <1> 	stc
  6712                              <1> 
  6713                              <1> .action_ok:
  6714 000024D0 61                  <1> 	popa
  6715 000024D1 C3                  <1> 	ret
  6716                              <1> 
  6717                              <1> ;=============================================================================
  6718                              <1> ; window_do_action ---- do a window action
  6719                              <1> ; input:
  6720                              <1> ;	ax    =  event code
  6721                              <1> ;	ds:si -> pointer to struc_window
  6722                              <1> ;	ds:bx -> pointer to struc_action
  6723                              <1> ; output:
  6724                              <1> ;	none
  6725                              <1> ;=============================================================================
  6726                              <1> window_do_action:
  6727 000024D2 60                  <1> 	pusha
  6728                              <1> 
  6729 000024D3 09F6                <1> 	or si, si
  6730 000024D5 7445                <1> 	jz .end
  6731 000024D7 09DB                <1> 	or bx, bx
  6732 000024D9 7441                <1> 	jz .end
  6733                              <1> 
  6734 000024DB 8A17                <1> 	mov dl, [bx]
  6735                              <1> 
  6736 000024DD F6C2F0              <1> 	test dl, ACTFLAG_AUTHS		; check action flags
  6737 000024E0 7409                <1> 	jz .no_auth
  6738                              <1> 
  6739 000024E2 60                  <1> 	pusha
  6740 000024E3 88D0                <1> 	mov al, dl
  6741 000024E5 E887F1              <1> 	call main_auth_action		; check if the action is ready to do
  6742                              <1> 					; al = auth type
  6743 000024E8 61                  <1> 	popa
  6744 000024E9 720B                <1> 	jc .no_action
  6745                              <1> 
  6746                              <1> .no_auth:
  6747 000024EB 8B5F03              <1> 	mov bx, [bx + struc_action.func]
  6748 000024EE 09DB                <1> 	or bx, bx
  6749 000024F0 7404                <1> 	jz .no_action
  6750                              <1> 
  6751 000024F2 60                  <1> 	pusha
  6752 000024F3 FFD3                <1> 	call bx				; do the action
  6753 000024F5 61                  <1> 	popa
  6754                              <1> 
  6755                              <1> .no_action:
  6756                              <1> 
  6757 000024F6 F6C201              <1> 	test dl, ACTFLAG_CLOSE_WIN
  6758 000024F9 7405                <1> 	jz .no_close
  6759 000024FB E8F2FE              <1> 	call window_close
  6760 000024FE EB1C                <1> 	jmp short .end
  6761                              <1> .no_close:
  6762 00002500 F6C202              <1> 	test dl, ACTFLAG_REDRAW_BODY
  6763 00002503 7405                <1> 	jz .no_redraw_body
  6764 00002505 E8DEFC              <1> 	call window_draw_body
  6765 00002508 EB12                <1> 	jmp short .end
  6766                              <1> .no_redraw_body:
  6767 0000250A F6C204              <1> 	test dl, ACTFLAG_REDRAW_WIN
  6768 0000250D 7405                <1> 	jz .no_redraw_win
  6769 0000250F E8F5FC              <1> 	call window_draw_window
  6770 00002512 EB08                <1> 	jmp short .end
  6771                              <1> .no_redraw_win:
  6772 00002514 F6C208              <1> 	test dl, ACTFLAG_REDRAW_SCR
  6773 00002517 7403                <1> 	jz .end
  6774 00002519 E8B6FC              <1> 	call window_draw_all
  6775                              <1> .end:
  6776 0000251C 61                  <1> 	popa
  6777 0000251D C3                  <1> 	ret
  6778                              <1> 
  6779                              <1> ;=============================================================================
  6780                              <1> ; winlist_setroot ---- set root window
  6781                              <1> ; input:
  6782                              <1> ;	ds:si -> pointer to root window
  6783                              <1> ; output:
  6784                              <1> ;	none
  6785                              <1> ;=============================================================================
  6786                              <1> winlist_setroot:
  6787 0000251E 53                  <1> 	push bx
  6788                              <1> 
  6789 0000251F 09F6                <1> 	or si, si
  6790 00002521 741A                <1> 	jz .invalid_root
  6791                              <1> 
  6792 00002523 8B1E[1566]          <1> 	mov bx, [ui_tmp.root_win]
  6793 00002527 09DB                <1> 	or bx, bx
  6794 00002529 7403                <1> 	jz .no_root
  6795 0000252B 8B5F0C              <1> 	mov bx, [bx + struc_window.next_win]
  6796                              <1> 
  6797                              <1> .no_root:
  6798 0000252E 8936[1566]          <1> 	mov [ui_tmp.root_win], si
  6799 00002532 895C0C              <1> 	mov [si + struc_window.next_win], bx
  6800 00002535 31DB                <1> 	xor bx, bx
  6801 00002537 895C0E              <1> 	mov [si + struc_window.previous_win], bx
  6802 0000253A 895C0A              <1> 	mov [si + struc_window.parent_win], bx
  6803                              <1> 
  6804                              <1> .invalid_root:
  6805 0000253D 5B                  <1> 	pop bx
  6806 0000253E C3                  <1> 	ret
  6807                              <1> 
  6808                              <1> ;=============================================================================
  6809                              <1> ; winlist_insert ---- insert a window
  6810                              <1> ; input:
  6811                              <1> ;	ds:si -> pointer to the window
  6812                              <1> ; output:
  6813                              <1> ;	none
  6814                              <1> ;=============================================================================
  6815                              <1> winlist_insert:
  6816 0000253F 57                  <1> 	push di
  6817 00002540 09F6                <1> 	or si, si
  6818 00002542 7417                <1> 	jz .invalid_win
  6819 00002544 E88C00              <1> 	call winlist_findwin
  6820 00002547 7312                <1> 	jnc .invalid_win
  6821                              <1> 
  6822 00002549 E84100              <1> 	call winlist_findtop
  6823 0000254C 09FF                <1> 	or di, di
  6824 0000254E 740B                <1> 	jz .invalid_win
  6825                              <1> 
  6826 00002550 89750C              <1> 	mov [di + struc_window.next_win], si
  6827 00002553 897C0E              <1> 	mov [si + struc_window.previous_win], di
  6828 00002556 31FF                <1> 	xor di, di
  6829 00002558 897C0C              <1> 	mov [si + struc_window.next_win], di
  6830                              <1> 
  6831                              <1> .invalid_win:
  6832 0000255B 5F                  <1> 	pop di
  6833 0000255C C3                  <1> 	ret
  6834                              <1> 
  6835                              <1> ;=============================================================================
  6836                              <1> ; winlist_remove ---- remove a window
  6837                              <1> ; input:
  6838                              <1> ;	ds:si -> pointer to the window
  6839                              <1> ; output:
  6840                              <1> ;	none
  6841                              <1> ;=============================================================================
  6842                              <1> winlist_remove:
  6843 0000255D 09F6                <1> 	or si, si
  6844 0000255F 742B                <1> 	jz .invalid_win
  6845 00002561 3936[1566]          <1> 	cmp [ui_tmp.root_win], si
  6846 00002565 7425                <1> 	je .invalid_win
  6847 00002567 E86900              <1> 	call winlist_findwin
  6848 0000256A 7220                <1> 	jc .invalid_win
  6849                              <1> 
  6850 0000256C 53                  <1> 	push bx
  6851 0000256D 56                  <1> 	push si
  6852 0000256E 8B5C0C              <1> 	mov bx, [si + struc_window.next_win]
  6853 00002571 8B740E              <1> 	mov si ,[si + struc_window.previous_win]
  6854 00002574 09DB                <1> 	or bx, bx
  6855 00002576 7403                <1> 	jz .no_next
  6856 00002578 89770E              <1> 	mov [bx + struc_window.previous_win], si
  6857                              <1> .no_next:
  6858 0000257B 09F6                <1> 	or si, si
  6859 0000257D 7403                <1> 	jz .no_previous
  6860 0000257F 895C0C              <1> 	mov [si + struc_window.next_win], bx
  6861                              <1> .no_previous:
  6862 00002582 5E                  <1> 	pop si
  6863 00002583 31DB                <1> 	xor bx, bx
  6864 00002585 895C0C              <1> 	mov [si + struc_window.next_win], bx
  6865 00002588 895C0E              <1> 	mov [si + struc_window.previous_win], bx
  6866 0000258B 5B                  <1> 	pop bx
  6867                              <1> 
  6868                              <1> .invalid_win:
  6869 0000258C C3                  <1> 	ret
  6870                              <1> 
  6871                              <1> ;=============================================================================
  6872                              <1> ; winlist_findtop ---- find the top window
  6873                              <1> ; input:
  6874                              <1> ;	none
  6875                              <1> ; output:
  6876                              <1> ;	ds:di -> the top window
  6877                              <1> ;=============================================================================
  6878                              <1> winlist_findtop:
  6879 0000258D 50                  <1> 	push ax
  6880 0000258E 8B3E[1566]          <1> 	mov di, [ui_tmp.root_win]
  6881                              <1> 
  6882                              <1> .loop_find:
  6883 00002592 8B450C              <1> 	mov ax, [di + struc_window.next_win]
  6884 00002595 09C0                <1> 	or ax, ax
  6885 00002597 7404                <1> 	jz .find_it
  6886 00002599 89C7                <1> 	mov di, ax
  6887 0000259B EBF5                <1> 	jmp short .loop_find
  6888                              <1> 
  6889                              <1> .find_it:
  6890 0000259D 58                  <1> 	pop ax
  6891 0000259E C3                  <1> 	ret
  6892                              <1> 
  6893                              <1> ;=============================================================================
  6894                              <1> ; winlist_raise ---- raise a window to top
  6895                              <1> ; input:
  6896                              <1> ;	ds:si -> the window
  6897                              <1> ; output:
  6898                              <1> ;	none
  6899                              <1> ;=============================================================================
  6900                              <1> winlist_raise:
  6901 0000259F E8BBFF              <1> 	call winlist_remove
  6902 000025A2 E89AFF              <1> 	call winlist_insert
  6903 000025A5 C3                  <1> 	ret
  6904                              <1> 
  6905                              <1> ;=============================================================================
  6906                              <1> ; winlist_set_focus_win ---- set the focus window
  6907                              <1> ; input:
  6908                              <1> ;	ds:si -> the window
  6909                              <1> ; output:
  6910                              <1> ;	none
  6911                              <1> ;=============================================================================
  6912                              <1> winlist_set_focus_win:
  6913 000025A6 53                  <1> 	push bx
  6914 000025A7 56                  <1> 	push si
  6915 000025A8 8B36[1366]          <1> 	mov si, [ui_tmp.focus_win]
  6916 000025AC 89F3                <1> 	mov bx, si
  6917 000025AE E82200              <1> 	call winlist_findwin
  6918 000025B1 5E                  <1> 	pop si
  6919 000025B2 720A                <1> 	jc .ok
  6920                              <1> 
  6921 000025B4 F60402              <1> 	test byte [si], WINFLAG_MODAL
  6922 000025B7 7505                <1> 	jnz .ok
  6923 000025B9 F60702              <1> 	test byte [bx], WINFLAG_MODAL
  6924 000025BC 7509                <1> 	jnz .end
  6925                              <1> 
  6926                              <1> .ok:
  6927 000025BE E81200              <1> 	call winlist_findwin
  6928 000025C1 7204                <1> 	jc .end
  6929 000025C3 8936[1366]          <1> 	mov [ui_tmp.focus_win], si
  6930                              <1> .end:
  6931 000025C7 8B36[1366]          <1> 	mov si, [ui_tmp.focus_win]
  6932 000025CB E8D1FF              <1> 	call winlist_raise
  6933 000025CE E801FC              <1> 	call window_draw_all
  6934 000025D1 5B                  <1> 	pop bx
  6935 000025D2 C3                  <1> 	ret
  6936                              <1> 
  6937                              <1> ;=============================================================================
  6938                              <1> ; winlist_findwin ---- find a window in winlist
  6939                              <1> ; input:
  6940                              <1> ;	ds:si -> the window
  6941                              <1> ; output:
  6942                              <1> ;	cf = 0  found
  6943                              <1> ;	cf = 1  not found
  6944                              <1> ;=============================================================================
  6945                              <1> winlist_findwin:
  6946 000025D3 53                  <1> 	push bx
  6947 000025D4 8B1E[1566]          <1> 	mov bx, [ui_tmp.root_win]
  6948                              <1> .loop_find:
  6949 000025D8 39F3                <1> 	cmp bx, si
  6950 000025DA 740A                <1> 	je .found
  6951 000025DC 8B5F0C              <1> 	mov bx, [bx + struc_window.next_win]
  6952 000025DF 09DB                <1> 	or bx, bx
  6953 000025E1 75F5                <1> 	jnz .loop_find
  6954 000025E3 F9                  <1> 	stc
  6955 000025E4 5B                  <1> 	pop bx
  6956 000025E5 C3                  <1> 	ret
  6957                              <1> .found:
  6958 000025E6 F8                  <1> 	clc
  6959 000025E7 5B                  <1> 	pop bx
  6960 000025E8 C3                  <1> 	ret
  6961                              <1> 
  6962                              <1> ;=============================================================================
  6963                              <1> ; winlist_find_focusable ---- find a focusable window
  6964                              <1> ; input:
  6965                              <1> ;	ds:si -> the first win
  6966                              <1> ; output:
  6967                              <1> ;	ds:si -> the focusable win
  6968                              <1> ;=============================================================================
  6969                              <1> winlist_find_focusable:
  6970 000025E9 E8E7FF              <1> 	call winlist_findwin
  6971 000025EC 720C                <1> 	jc .failed
  6972                              <1> 
  6973                              <1> .loop_find:
  6974 000025EE F60408              <1> 	test byte [si], WINFLAG_NO_FOCUS
  6975 000025F1 7409                <1> 	jz .found
  6976 000025F3 8B740C              <1> 	mov si, [si + struc_window.next_win]
  6977 000025F6 09F6                <1> 	or si, si
  6978 000025F8 75F4                <1> 	jnz .loop_find
  6979                              <1> .failed:
  6980 000025FA 31F6                <1> 	xor si, si
  6981                              <1> .found:
  6982 000025FC C3                  <1> 	ret
  6983                              <1> 
  6984                              <1> 
  6985                              <1> ;=============================================================================
  6986                              <1> ; winlist_broadcast_event ---- broadcast an event to all opened windows
  6987                              <1> ; input:
  6988                              <1> ;	ax = event code
  6989                              <1> ; output:
  6990                              <1> ;	none
  6991                              <1> ;=============================================================================
  6992                              <1> winlist_broadcast_event:
  6993 000025FD 60                  <1> 	pusha
  6994 000025FE 8B36[1566]          <1> 	mov si, [ui_tmp.root_win]
  6995                              <1> 
  6996                              <1> .loop_broadcast:
  6997 00002602 E8B0FE              <1> 	call window_event_dispatcher
  6998 00002605 7307                <1> 	jnc .end
  6999 00002607 8B740C              <1> 	mov si, [si + struc_window.next_win]
  7000 0000260A 09F6                <1> 	or si, si
  7001 0000260C 75F4                <1> 	jnz .loop_broadcast
  7002                              <1> .end:
  7003 0000260E 61                  <1> 	popa
  7004 0000260F C3                  <1> 	ret
  7005                              <1> 
  7006                              <1> 
  7007                              <1> 
  7008                              <1> 
  7009                              <1> ;=============================================================================
  7010                              <1> ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Private Data Area >>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  7011                              <1> ;=============================================================================
  7012 00002610 006B0159025A038E04- <1> ui_VideoHorizParams dw 0x6B00,0x5901,0x5A02,0x8E03,0x5F04,0x8C05,0x2D13 ;8-wide
  7013 00002619 5F058C132D          <1>
  7014                              <1> 
  7015                              <1> ui_screen_size:
  7016 0000261E 5A                  <1> ui_screen_width     db     90
  7017 0000261F 19                  <1> ui_screen_height    db     25
  7018                              <1> 
  7019 00002620 00B8                <1> ui_screen_bufseg     dw     SCR_BUF_SEG0
  7020 00002622 00                  <1> ui_screen_page       db     0
  7021 00002623 00                  <1> ui_screen_lock       db     0
  7022                              <1> 
  7023                              <1> 
  7024                              <1> window_def_action_table:
  7025 00002624 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7026 00002625 008D                <1> 	dw	kbCtrlUp
  7027 00002627 [FC23]              <1> 	dw	window_move_up
  7028                              <1> 
  7029 00002629 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7030 0000262A E08D                <1> 	dw	kbEnhCtrlUp
  7031 0000262C [FC23]              <1> 	dw	window_move_up
  7032                              <1> 
  7033 0000262E 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7034 0000262F E047                <1> 	dw	kbEnhHome
  7035 00002631 [FC23]              <1> 	dw	window_move_up
  7036                              <1> 
  7037 00002633 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7038 00002634 0091                <1> 	dw	kbCtrlDown
  7039 00002636 [0B24]              <1> 	dw	window_move_down
  7040                              <1> 
  7041 00002638 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7042 00002639 E091                <1> 	dw	kbEnhCtrlDown
  7043 0000263B [0B24]              <1> 	dw	window_move_down
  7044                              <1> 
  7045 0000263D 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7046 0000263E E04F                <1> 	dw	kbEnhEnd
  7047 00002640 [0B24]              <1> 	dw	window_move_down
  7048                              <1> 
  7049 00002642 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7050 00002643 0073                <1> 	dw	kbCtrlLeft
  7051 00002645 [2024]              <1> 	dw	window_move_left
  7052                              <1> 
  7053 00002647 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7054 00002648 E073                <1> 	dw	kbEnhCtrlLeft
  7055 0000264A [2024]              <1> 	dw	window_move_left
  7056                              <1> 
  7057 0000264C 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7058 0000264D E053                <1> 	dw	kbEnhDel
  7059 0000264F [2024]              <1> 	dw	window_move_left
  7060                              <1> 
  7061 00002651 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7062 00002652 0074                <1> 	dw	kbCtrlRight
  7063 00002654 [2F24]              <1> 	dw	window_move_right
  7064                              <1> 
  7065 00002656 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7066 00002657 E074                <1> 	dw	kbEnhCtrlRight
  7067 00002659 [2F24]              <1> 	dw	window_move_right
  7068                              <1> 
  7069 0000265B 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7070 0000265C E051                <1> 	dw	kbEnhPgDn
  7071 0000265E [2F24]              <1> 	dw	window_move_right
  7072                              <1> 
  7073 00002660 00                  <1> 	db	0
  7074 00002661 0094                <1> 	dw	kbCtrlTab
  7075 00002663 [4824]              <1> 	dw	window_switch_window
  7076                              <1> 
  7077 00002665 00                  <1> 	db	0
  7078 00002666 00A5                <1> 	dw	kbAltTab
  7079 00002668 [4824]              <1> 	dw	window_switch_window
  7080                              <1> .end_of_table
  7081                              <1> 
  7082                              <1> inputbox_action_table:
  7083 0000266A 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7084 0000266B 080E                <1> 	dw	kbBack
  7085 0000266D [E41D]              <1> 	dw	inputbox_backspace
  7086                              <1> 
  7087 0000266F 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7088 00002670 0053                <1> 	dw	kbDel
  7089 00002672 [FE1D]              <1> 	dw	inputbox_delete
  7090                              <1> 
  7091 00002674 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7092 00002675 E053                <1> 	dw	kbEnhDel
  7093 00002677 [FE1D]              <1> 	dw	inputbox_delete
  7094                              <1> 
  7095 00002679 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7096 0000267A 0047                <1> 	dw	kbHome
  7097 0000267C [351E]              <1> 	dw	inputbox_home_key
  7098                              <1> 
  7099 0000267E 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7100 0000267F E047                <1> 	dw	kbEnhHome
  7101 00002681 [351E]              <1> 	dw	inputbox_home_key
  7102                              <1> 
  7103 00002683 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7104 00002684 004F                <1> 	dw	kbEnd
  7105 00002686 [2B1E]              <1> 	dw	inputbox_end_key
  7106                              <1> 
  7107 00002688 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7108 00002689 E04F                <1> 	dw	kbEnhEnd
  7109 0000268B [2B1E]              <1> 	dw	inputbox_end_key
  7110                              <1> 
  7111 0000268D 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7112 0000268E 004B                <1> 	dw	kbLeft
  7113 00002690 [1E1E]              <1> 	dw	inputbox_left_arrow
  7114                              <1> 
  7115 00002692 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7116 00002693 E04B                <1> 	dw	kbEnhLeft
  7117 00002695 [1E1E]              <1> 	dw	inputbox_left_arrow
  7118                              <1> 
  7119 00002697 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7120 00002698 004D                <1> 	dw	kbRight
  7121 0000269A [0F1E]              <1> 	dw	inputbox_right_arrow
  7122                              <1> 
  7123 0000269C 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7124 0000269D E04D                <1> 	dw	kbEnhRight
  7125 0000269F [0F1E]              <1> 	dw	inputbox_right_arrow
  7126                              <1> 
  7127 000026A1 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7128 000026A2 1B01                <1> 	dw	kbEsc
  7129 000026A4 [3D1E]              <1> 	dw	inputbox_cancel
  7130                              <1> 
  7131 000026A6 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7132 000026A7 0D1C                <1> 	dw	kbEnter
  7133 000026A9 [451E]              <1> 	dw	inputbox_enter
  7134                              <1> 
  7135 000026AB 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7136 000026AC 0DE0                <1> 	dw	kbEnhEnter
  7137 000026AE [451E]              <1> 	dw	inputbox_enter
  7138                              <1> 
  7139                              <1> .end_of_table
  7140                              <1> 
  7141                              <1> listbox_action_table:
  7142 000026B0 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7143 000026B1 0D1C                <1> 	dw	kbEnter
  7144 000026B3 0000                <1> 	dw	0
  7145                              <1> 
  7146 000026B5 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7147 000026B6 0DE0                <1> 	dw	kbEnhEnter
  7148 000026B8 0000                <1> 	dw	0
  7149                              <1> 
  7150 000026BA 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7151 000026BB 1B01                <1> 	dw	kbEsc
  7152 000026BD [CD21]              <1> 	dw	listbox_cancel
  7153                              <1> .end_of_table
  7154                              <1> 
  7155                              <1> menubox_def_action_table:
  7156 000026BF 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7157 000026C0 0048                <1> 	dw	kbUp
  7158 000026C2 [EC20]              <1> 	dw	menubox_focus_up
  7159                              <1> 
  7160 000026C4 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7161 000026C5 E048                <1> 	dw	kbEnhUp
  7162 000026C7 [EC20]              <1> 	dw	menubox_focus_up
  7163                              <1> 
  7164 000026C9 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7165 000026CA 0050                <1> 	dw	kbDown
  7166 000026CC [1821]              <1> 	dw	menubox_focus_down
  7167                              <1> 
  7168 000026CE 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7169 000026CF E050                <1> 	dw	kbEnhDown
  7170 000026D1 [1821]              <1> 	dw	menubox_focus_down
  7171                              <1> 
  7172 000026D3 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7173 000026D4 0049                <1> 	dw	kbPgUp
  7174 000026D6 [FE20]              <1> 	dw	menubox_focus_pageup
  7175                              <1> 
  7176 000026D8 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7177 000026D9 0051                <1> 	dw	kbPgDn
  7178 000026DB [2A21]              <1> 	dw	menubox_focus_pagedown
  7179                              <1> 
  7180 000026DD 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7181 000026DE 0D1C                <1> 	dw	kbEnter
  7182 000026E0 [C020]              <1> 	dw	menubox_do_focus
  7183                              <1> 
  7184 000026E2 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7185 000026E3 0DE0                <1> 	dw	kbEnhEnter
  7186 000026E5 [C020]              <1> 	dw	menubox_do_focus
  7187                              <1> 
  7188 000026E7 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7189 000026E8 1B01                <1> 	dw	kbEsc
  7190 000026EA 0000                <1> 	dw	0
  7191                              <1> 
  7192 000026EC 01                  <1>         db      ACTFLAG_CLOSE_WIN
  7193 000026ED 08F2                <1>         dw      EVENT_ALT_RELEASE
  7194 000026EF 0000                <1>         dw      0
  7195                              <1> .end_of_table
  7196                              <1> 
  7197                              <1> 
  7198                              <1> 
  7199                              <1> ; ===========================================================================
  7200                              <1> 
  7201                              <1> ; vi:nowrap
  7202                                  %include "utils.asm"
  7203                              <1> ; asmsyntax=nasm
  7204                              <1> ;
  7205                              <1> ; utils.asm
  7206                              <1> ;
  7207                              <1> ; Some utility functions
  7208                              <1> ;
  7209                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
  7210                              <1> ;
  7211                              <1> 
  7212                              <1> ;=============================================================================
  7213                              <1> ;itoa ---- convert integer to ascii string (the string is zero ending)
  7214                              <1> ;input:
  7215                              <1> ;      ax = the integer to be converted
  7216                              <1> ;      cl = max length of the integer
  7217                              <1> ;      es:di -> buffer
  7218                              <1> ;output:
  7219                              <1> ;      none
  7220                              <1> ;=============================================================================
  7221                              <1> itoa:
  7222 000026F1 60                  <1>         pusha
  7223 000026F2 30ED                <1>         xor ch, ch
  7224 000026F4 01CF                <1>         add di, cx
  7225 000026F6 C60500              <1>         mov byte [di], 0
  7226 000026F9 BB0A00              <1>         mov bx, 10
  7227                              <1> .loop_itoa:
  7228 000026FC 31D2                <1>         xor dx, dx
  7229 000026FE 4F                  <1>         dec di
  7230 000026FF F7F3                <1>         div bx
  7231 00002701 80C230              <1>         add dl, '0'
  7232 00002704 8815                <1>         mov [di], dl
  7233 00002706 49                  <1>         dec cx
  7234 00002707 09C0                <1>         or ax, ax
  7235 00002709 7404                <1>         jz .end_itoa
  7236 0000270B 09C9                <1>         or cx, cx
  7237 0000270D 75ED                <1>         jnz .loop_itoa
  7238                              <1> .end_itoa:
  7239 0000270F 09C9                <1>         or cx, cx
  7240 00002711 7406                <1>         jz .end
  7241                              <1> .loop_fillspace:
  7242 00002713 4F                  <1>         dec di
  7243 00002714 C60520              <1>         mov byte [di], ' '
  7244 00002717 E2FA                <1>         loop .loop_fillspace
  7245                              <1> .end:
  7246 00002719 61                  <1>         popa
  7247 0000271A C3                  <1>         ret
  7248                              <1> 
  7249                              <1> ;=============================================================================
  7250                              <1> ;atoi ---- convert ascii string to integer (the string is zero ending)
  7251                              <1> ;input:
  7252                              <1> ;      ds:si -> buffer
  7253                              <1> ;output:
  7254                              <1> ;      ax = convert result ( <= 65535 )
  7255                              <1> ;=============================================================================
  7256                              <1> atoi:
  7257 0000271B 53                  <1> 	push bx
  7258 0000271C 51                  <1> 	push cx
  7259                              <1> 
  7260 0000271D 31DB                <1> 	xor bx, bx
  7261 0000271F 31C0                <1> 	xor ax, ax
  7262                              <1> 
  7263                              <1> .loop_conv:
  7264 00002721 AC                  <1> 	lodsb
  7265 00002722 08C0                <1> 	or al, al
  7266 00002724 7413                <1> 	jz .end
  7267 00002726 2C30                <1> 	sub al, '0'
  7268 00002728 3C0A                <1> 	cmp al, 10
  7269 0000272A 730D                <1> 	jae .end
  7270                              <1> 
  7271 0000272C 89D9                <1> 	mov cx, bx
  7272 0000272E C1E303              <1>         shl bx, 3                   ; bx = bx * 10
  7273 00002731 D1E1                <1>         shl cx, 1                   ;
  7274 00002733 01CB                <1>         add bx, cx                  ;
  7275 00002735 01C3                <1> 	add bx, ax
  7276 00002737 EBE8                <1> 	jmp short .loop_conv
  7277                              <1> 
  7278                              <1> .end:
  7279 00002739 89D8                <1> 	mov ax, bx
  7280 0000273B 4E                  <1> 	dec si
  7281 0000273C 59                  <1> 	pop cx
  7282 0000273D 5B                  <1> 	pop bx
  7283 0000273E C3                  <1> 	ret
  7284                              <1> 
  7285                              <1> ;=============================================================================
  7286                              <1> ;strlen ---- Count Length of a zero ending string
  7287                              <1> ;input:
  7288                              <1> ;      ds:si -> string
  7289                              <1> ;output:
  7290                              <1> ;      cx = length (not include the ending zero)
  7291                              <1> ;=============================================================================
  7292                              <1> strlen:
  7293 0000273F 50                  <1>         push ax
  7294 00002740 31C9                <1>         xor cx,cx
  7295                              <1> 
  7296 00002742 09F6                <1>         or si,si
  7297 00002744 740A                <1>         jz .end
  7298                              <1> 
  7299 00002746 56                  <1>         push si
  7300 00002747 FC                  <1>         cld
  7301                              <1> .loop_count:
  7302 00002748 41                  <1>         inc cx
  7303 00002749 AC                  <1>         lodsb
  7304 0000274A 08C0                <1>         or al, al
  7305 0000274C 75FA                <1>         jnz .loop_count
  7306                              <1> 
  7307 0000274E 49                  <1>         dec cx
  7308 0000274F 5E                  <1>         pop si
  7309                              <1> 
  7310                              <1> .end:
  7311 00002750 58                  <1>         pop ax
  7312 00002751 C3                  <1>         ret
  7313                              <1> 
  7314                              <1> ;=============================================================================
  7315                              <1> ;strlen_hl ---- Count Length of a zero ending string (ignore ~ chars)
  7316                              <1> ;input:
  7317                              <1> ;      ds:si -> string
  7318                              <1> ;output:
  7319                              <1> ;      cx = length (not include the ending zero)
  7320                              <1> ;=============================================================================
  7321                              <1> strlen_hl:
  7322 00002752 50                  <1>         push ax
  7323 00002753 31C9                <1>         xor cx,cx
  7324                              <1> 
  7325 00002755 09F6                <1>         or si,si
  7326 00002757 740E                <1>         jz .end
  7327                              <1> 
  7328 00002759 56                  <1>         push si
  7329 0000275A FC                  <1>         cld
  7330                              <1> .loop_count:
  7331 0000275B 41                  <1>         inc cx
  7332                              <1> 
  7333                              <1> .loop_nocount:
  7334 0000275C AC                  <1>         lodsb
  7335 0000275D 3C7E                <1>         cmp al, '~'
  7336 0000275F 74FB                <1>         je .loop_nocount
  7337 00002761 08C0                <1>         or al, al
  7338 00002763 75F6                <1>         jnz .loop_count
  7339                              <1> 
  7340 00002765 49                  <1>         dec cx
  7341 00002766 5E                  <1>         pop si
  7342                              <1> 
  7343                              <1> .end:
  7344 00002767 58                  <1>         pop ax
  7345 00002768 C3                  <1>         ret
  7346                              <1> 
  7347                              <1> ;=============================================================================
  7348                              <1> ;strchr ---- search a char in a string
  7349                              <1> ;input:
  7350                              <1> ;      al = the char to be searched
  7351                              <1> ;      cx = length of the string
  7352                              <1> ;      es:di -> string
  7353                              <1> ;output:
  7354                              <1> ;      cf = 0 the char was found
  7355                              <1> ;            cx = offset of the char
  7356                              <1> ;      cf = 1 the char was not found
  7357                              <1> ;            cx = length of the string
  7358                              <1> ;=============================================================================
  7359                              <1> strchr:
  7360 00002769 53                  <1>         push bx
  7361 0000276A 57                  <1>         push di
  7362 0000276B 89CB                <1>         mov bx,cx
  7363 0000276D FC                  <1>         cld
  7364 0000276E F2AE                <1>         repnz scasb
  7365 00002770 5F                  <1>         pop di
  7366 00002771 87D9                <1>         xchg bx, cx
  7367 00002773 7506                <1>         jnz .not_found
  7368 00002775 29D9                <1>         sub cx, bx
  7369 00002777 49                  <1>         dec cx
  7370 00002778 5B                  <1>         pop bx
  7371 00002779 F8                  <1>         clc
  7372 0000277A C3                  <1>         ret
  7373                              <1> .not_found:
  7374 0000277B 5B                  <1>         pop bx
  7375 0000277C F9                  <1>         stc
  7376 0000277D C3                  <1>         ret
  7377                              <1> 
  7378                              <1> ;=============================================================================
  7379                              <1> ;strncpy ---- copy strings
  7380                              <1> ;input:
  7381                              <1> ;      cx = max number of chars to be copied
  7382                              <1> ;      ds:si -> source string
  7383                              <1> ;      es:di -> dest string
  7384                              <1> ;output:
  7385                              <1> ;      cx = number of chars actually copied (not include the ending zero char)
  7386                              <1> ;      es:di -> point to next char of the end of dest string and set it to
  7387                              <1> ;               zero
  7388                              <1> ;=============================================================================
  7389                              <1> strncpy:
  7390 0000277E 56                  <1>         push si
  7391 0000277F 50                  <1>         push ax
  7392 00002780 53                  <1>         push bx
  7393 00002781 89CB                <1>         mov bx, cx
  7394 00002783 FC                  <1>         cld
  7395                              <1> .loop_copy:
  7396 00002784 AC                  <1>         lodsb
  7397 00002785 AA                  <1>         stosb
  7398 00002786 08C0                <1>         or al, al
  7399 00002788 7405                <1>         jz .end
  7400 0000278A E2F8                <1>         loop .loop_copy
  7401 0000278C 30C0                <1>         xor al, al
  7402 0000278E AA                  <1>         stosb
  7403                              <1> .end:
  7404 0000278F 4F                  <1>         dec di
  7405 00002790 87D9                <1>         xchg bx, cx
  7406 00002792 29D9                <1>         sub cx, bx
  7407 00002794 5B                  <1>         pop bx
  7408 00002795 58                  <1>         pop ax
  7409 00002796 5E                  <1>         pop si
  7410 00002797 C3                  <1>         ret
  7411                              <1> 
  7412                              <1> ;=============================================================================
  7413                              <1> ;strcpy ---- copy strings
  7414                              <1> ;input:
  7415                              <1> ;      ds:si -> source string
  7416                              <1> ;      es:di -> dest string
  7417                              <1> ;output:
  7418                              <1> ;      es:di -> point to next char of the end of dest string and set it to
  7419                              <1> ;               zero
  7420                              <1> ;=============================================================================
  7421                              <1> strcpy:
  7422 00002798 56                  <1>         push si
  7423 00002799 50                  <1>         push ax
  7424                              <1> 
  7425 0000279A FC                  <1>         cld
  7426                              <1> .loop_copy:
  7427 0000279B AC                  <1>         lodsb
  7428 0000279C AA                  <1>         stosb
  7429 0000279D 08C0                <1>         or al, al
  7430 0000279F 75FA                <1> 	jnz .loop_copy
  7431                              <1> 
  7432 000027A1 4F                  <1>         dec di
  7433 000027A2 58                  <1>         pop ax
  7434 000027A3 5E                  <1>         pop si
  7435 000027A4 C3                  <1>         ret
  7436                              <1> 
  7437                              <1> 
  7438                              <1> ;=============================================================================
  7439                              <1> ;calc_password ---- calculate the password
  7440                              <1> ;input:
  7441                              <1> ;      ds:si -> the pasword string (zero ending)
  7442                              <1> ;      cx = max length of the password
  7443                              <1> ;output:
  7444                              <1> ;      dx:ax = the encrypted password (32 bits)
  7445                              <1> ;=============================================================================
  7446                              <1> calc_password:
  7447 000027A5 56                  <1>         push si
  7448 000027A6 6631D2              <1>         xor edx, edx
  7449 000027A9 6631C0              <1>         xor eax, eax
  7450 000027AC FC                  <1>         cld
  7451                              <1> .loop_calc:
  7452 000027AD AC                  <1>         lodsb
  7453 000027AE 08C0                <1>         or al, al
  7454 000027B0 740E                <1>         jz .end
  7455 000027B2 F6D0                <1>         not al
  7456 000027B4 C0C004              <1>         rol al, 4
  7457 000027B7 6601C2              <1>         add edx, eax
  7458 000027BA 66C1C202            <1>         rol edx, 2
  7459 000027BE E2ED                <1>         loop .loop_calc
  7460                              <1> .end:
  7461 000027C0 89D0                <1>         mov ax, dx
  7462 000027C2 66C1CA10            <1>         ror edx, 16
  7463 000027C6 5E                  <1>         pop si
  7464 000027C7 C3                  <1>         ret
  7465                              <1> 
  7466                              <1> ;=============================================================================
  7467                              <1> ;htoa ---- hex to ascii
  7468                              <1> ;input:
  7469                              <1> ;     ax = hex number
  7470                              <1> ;     cl = length of hex number (1 to 4)
  7471                              <1> ;     es:di -> buffer to store ascii string
  7472                              <1> ;output:
  7473                              <1> ;     es:di -> ascii string
  7474                              <1> ;=============================================================================
  7475                              <1> htoa:
  7476 000027C8 60                  <1>         pusha
  7477 000027C9 30ED                <1>         xor ch, ch
  7478 000027CB 01CF                <1>         add di, cx
  7479 000027CD C60500              <1>         mov byte [di], 0
  7480                              <1> 
  7481                              <1> .loop_conv:
  7482 000027D0 50                  <1> 	push ax                 ;Save AX
  7483 000027D1 240F                <1> 	and al,0Fh              ;Keep 4 bits
  7484 000027D3 3C0A                <1> 	cmp al,0Ah              ;Compute the hex digit,
  7485 000027D5 1C69                <1> 	sbb al,69h              ;using Improved Allison's Algorithm
  7486 000027D7 2F                  <1> 	das
  7487 000027D8 4F                  <1> 	dec di
  7488 000027D9 8805                <1> 	mov [di], al
  7489 000027DB 58                  <1> 	pop ax                  ;Restore AX
  7490 000027DC C1E804              <1> 	shr ax,4                ;Shift it over
  7491 000027DF E2EF                <1>         loop .loop_conv
  7492                              <1> 
  7493 000027E1 61                  <1>         popa
  7494 000027E2 C3                  <1>         ret
  7495                              <1> 
  7496                              <1> ;=============================================================================
  7497                              <1> ;atoh ---- ascii to hex
  7498                              <1> ;input:
  7499                              <1> ;     ds:si -> buffer
  7500                              <1> ;output:
  7501                              <1> ;     ax = hex
  7502                              <1> ;     ds:si -> end of the hex number
  7503                              <1> ;=============================================================================
  7504                              <1> atoh:
  7505 000027E3 53                  <1> 	push bx
  7506                              <1> 
  7507 000027E4 31DB                <1> 	xor bx, bx
  7508 000027E6 31C0                <1> 	xor ax, ax
  7509                              <1> .loop_conv:
  7510 000027E8 AC                  <1> 	lodsb
  7511 000027E9 08C0                <1> 	or al, al
  7512 000027EB 7419                <1> 	jz .end
  7513                              <1> 
  7514 000027ED 2C30                <1> 	sub al, '0'
  7515 000027EF 3C0A                <1> 	cmp al, 10
  7516 000027F1 720C                <1> 	jb .ok
  7517 000027F3 2C07                <1> 	sub al, 'A'-'0'-10
  7518 000027F5 3C10                <1> 	cmp al, 16
  7519 000027F7 7206                <1> 	jb .ok
  7520 000027F9 2C20                <1> 	sub al, 'a'-'A'
  7521 000027FB 3C10                <1> 	cmp al, 16
  7522 000027FD 7307                <1> 	jae .end
  7523                              <1> 
  7524                              <1> .ok:
  7525 000027FF C1E304              <1> 	shl bx, 4
  7526 00002802 01C3                <1> 	add bx, ax
  7527 00002804 EBE2                <1> 	jmp .loop_conv
  7528                              <1> 
  7529                              <1> .end:
  7530 00002806 4E                  <1> 	dec si
  7531 00002807 89D8                <1> 	mov ax, bx
  7532 00002809 5B                  <1>         pop bx
  7533 0000280A C3                  <1>         ret
  7534                              <1> 
  7535                              <1> ;=============================================================================
  7536                              <1> ;count_lines ---- count how many lines in a string.
  7537                              <1> ;input:
  7538                              <1> ;      ds:si -> string
  7539                              <1> ;output:
  7540                              <1> ;      ch = number of lines
  7541                              <1> ;      cl = max line length
  7542                              <1> ;=============================================================================
  7543                              <1> count_lines:
  7544 0000280B 56                  <1>         push si
  7545 0000280C 53                  <1>         push bx
  7546 0000280D 50                  <1>         push ax
  7547                              <1> 
  7548 0000280E FC                  <1>         cld
  7549                              <1> 
  7550 0000280F 31C9                <1>         xor cx, cx
  7551 00002811 31DB                <1>         xor bx, bx
  7552                              <1> 
  7553 00002813 09F6                <1>         or si, si
  7554 00002815 7423                <1>         jz .end
  7555                              <1> 
  7556 00002817 FEC5                <1>         inc ch
  7557                              <1> .loop_count:
  7558 00002819 AC                  <1>         lodsb
  7559 0000281A 08C0                <1>         or al, al
  7560 0000281C 7416                <1>         jz .ending
  7561                              <1> 
  7562 0000281E 3C0D                <1>         cmp al, 0x0d
  7563 00002820 7404                <1>         je .new_line
  7564                              <1> 
  7565 00002822 FEC3                <1>         inc bl
  7566 00002824 EBF3                <1>         jmp short .loop_count
  7567                              <1> 
  7568                              <1> .new_line:
  7569 00002826 FEC5                <1>         inc ch
  7570                              <1> 
  7571 00002828 88DF                <1>         mov bh, bl
  7572 0000282A 30DB                <1>         xor bl, bl
  7573 0000282C 38CF                <1>         cmp bh, cl
  7574 0000282E 76E9                <1>         jbe .loop_count
  7575 00002830 88F9                <1>         mov cl, bh
  7576 00002832 EBE5                <1>         jmp short .loop_count
  7577                              <1> 
  7578                              <1> .ending:
  7579 00002834 38CB                <1>         cmp bl, cl
  7580 00002836 7602                <1>         jbe .end
  7581 00002838 88D9                <1>         mov cl, bl
  7582                              <1> 
  7583                              <1> .end:
  7584 0000283A 58                  <1>         pop ax
  7585 0000283B 5B                  <1>         pop bx
  7586 0000283C 5E                  <1>         pop si
  7587 0000283D C3                  <1>         ret
  7588                              <1> 
  7589                              <1> ;=============================================================================
  7590                              <1> ; power_off ---- turn the power off
  7591                              <1> ;input:
  7592                              <1> ;       none
  7593                              <1> ;output:
  7594                              <1> ;       never return if successful.
  7595                              <1> ;       cf = 1 on error.
  7596                              <1> ;=============================================================================
  7597                              <1> power_off:
  7598 0000283E 60                  <1>         pusha
  7599 0000283F E82D00              <1> 	call check_apm_bios
  7600 00002842 7229                <1>         jc .end
  7601                              <1> 
  7602 00002844 B80153              <1>         mov ax, 0x5301
  7603 00002847 31DB                <1>         xor bx, bx
  7604 00002849 CD15                <1>         int 0x15
  7605 0000284B 7220                <1>         jc .end
  7606                              <1> 
  7607 0000284D B88053              <1>         mov ax, 0x5380
  7608 00002850 B78C                <1>         mov bh, 0x8c
  7609 00002852 CD15                <1>         int 0x15
  7610                              <1> 
  7611 00002854 B84000              <1>         mov ax, 0x40
  7612 00002857 BBD800              <1>         mov bx, 0xd8
  7613 0000285A 1E                  <1>         push ds
  7614 0000285B 8ED8                <1>         mov ds, ax
  7615 0000285D 3E800F10            <1>         or byte [ds:bx], 0x10
  7616 00002861 1F                  <1>         pop ds
  7617                              <1> 
  7618 00002862 B80753              <1>         mov ax, 0x5307
  7619 00002865 BB0100              <1>         mov bx, 1
  7620 00002868 B90300              <1>         mov cx, 3
  7621 0000286B CD15                <1>         int 0x15
  7622                              <1> 
  7623                              <1> .end:
  7624 0000286D 61                  <1>         popa
  7625 0000286E C3                  <1>         ret
  7626                              <1> 
  7627                              <1> 
  7628                              <1> ;=============================================================================
  7629                              <1> ; check_apm_bios ---- check if the apm bios present
  7630                              <1> ; output:
  7631                              <1> ;	cf = 1 error, cf = 0 ok
  7632                              <1> ;=============================================================================
  7633                              <1> check_apm_bios:
  7634 0000286F 60                  <1>         pusha
  7635 00002870 B80053              <1>         mov ax, 0x5300
  7636 00002873 31DB                <1>         xor bx, bx
  7637 00002875 CD15                <1>         int 0x15                                 ; check if apm present
  7638 00002877 720D                <1> 	jc .end
  7639 00002879 81FB4D50            <1> 	cmp bx, 0x504D
  7640 0000287D 7506                <1> 	jnz .none
  7641 0000287F F7C10100            <1> 	test cx, 1
  7642 00002883 7501                <1> 	jnz .end
  7643                              <1> .none:
  7644 00002885 F9                  <1> 	stc
  7645                              <1> .end:
  7646 00002886 61                  <1> 	popa
  7647 00002887 C3                  <1> 	ret
  7648                              <1> 
  7649                              <1> ;=============================================================================
  7650                              <1> ; leap_year ---- check if a year is leap a year
  7651                              <1> ; input:
  7652                              <1> ;      ax = year
  7653                              <1> ; output:
  7654                              <1> ;      cf = 1, it's a leap year
  7655                              <1> ;      cf = 0, not a leap year
  7656                              <1> ;=============================================================================
  7657                              <1> leap_year:
  7658 00002888 60                  <1>        pusha
  7659 00002889 B99001              <1>        mov cx, 400
  7660 0000288C 31D2                <1>        xor dx, dx 
  7661 0000288E 50                  <1>        push ax
  7662 0000288F F7F1                <1>        div cx
  7663 00002891 58                  <1>        pop ax
  7664 00002892 09D2                <1>        or dx, dx
  7665 00002894 741B                <1>        jz .isleap
  7666                              <1> 
  7667 00002896 B96400              <1>        mov cx, 100
  7668 00002899 31D2                <1>        xor dx, dx
  7669 0000289B 50                  <1>        push ax
  7670 0000289C F7F1                <1>        div cx
  7671 0000289E 58                  <1>        pop ax
  7672 0000289F 09D2                <1>        or dx, dx
  7673 000028A1 740B                <1>        jz .noleap
  7674                              <1> 
  7675 000028A3 31D2                <1>        xor dx, dx
  7676 000028A5 B90400              <1>        mov cx, 4
  7677 000028A8 F7F1                <1>        div cx
  7678 000028AA 09D2                <1>        or dx, dx
  7679 000028AC 7403                <1>        jz .isleap
  7680                              <1> 
  7681                              <1> .noleap:
  7682 000028AE F8                  <1>        clc
  7683 000028AF 61                  <1>        popa
  7684 000028B0 C3                  <1>        ret
  7685                              <1> 
  7686                              <1> .isleap:
  7687 000028B1 F9                  <1>        stc
  7688 000028B2 61                  <1>        popa
  7689 000028B3 C3                  <1>        ret
  7690                              <1> 
  7691                              <1> ;=============================================================================
  7692                              <1> ; day_in_week
  7693                              <1> ; input:
  7694                              <1> ;      ax = year
  7695                              <1> ;      dh = month
  7696                              <1> ;      dl = day
  7697                              <1> ; output:
  7698                              <1> ;      cx = day in week
  7699                              <1> ;=============================================================================
  7700                              <1> day_in_week:
  7701 000028B4 50                  <1> 	push ax
  7702 000028B5 53                  <1> 	push bx
  7703 000028B6 52                  <1> 	push dx
  7704                              <1> 
  7705 000028B7 52                  <1> 	push dx
  7706                              <1> 
  7707 000028B8 48                  <1> 	dec ax
  7708 000028B9 89C1                <1> 	mov cx, ax
  7709 000028BB 31D2                <1> 	xor dx, dx
  7710 000028BD 50                  <1> 	push ax
  7711 000028BE BB0400              <1> 	mov bx, 4
  7712 000028C1 F7F3                <1> 	div bx
  7713 000028C3 01C1                <1> 	add cx, ax
  7714 000028C5 58                  <1> 	pop ax
  7715                              <1> 
  7716 000028C6 31D2                <1> 	xor dx, dx
  7717 000028C8 50                  <1> 	push ax
  7718 000028C9 BB6400              <1> 	mov bx, 100
  7719 000028CC F7F3                <1> 	div bx
  7720 000028CE 29C1                <1> 	sub cx, ax
  7721 000028D0 58                  <1> 	pop ax
  7722                              <1> 
  7723 000028D1 31D2                <1> 	xor dx, dx
  7724 000028D3 50                  <1> 	push ax
  7725 000028D4 BB9001              <1> 	mov bx, 400
  7726 000028D7 F7F3                <1> 	div bx
  7727 000028D9 01C1                <1> 	add cx, ax
  7728 000028DB 58                  <1> 	pop ax
  7729                              <1> 
  7730 000028DC 40                  <1> 	inc ax
  7731 000028DD 5A                  <1> 	pop dx
  7732                              <1> 
  7733 000028DE 0FB6DE              <1> 	movzx bx, dh
  7734 000028E1 8A9F[0429]          <1> 	mov bl, [days_in_month_norm-1+bx]
  7735 000028E5 01D9                <1> 	add cx, bx 
  7736                              <1> 
  7737 000028E7 E89EFF              <1> 	call leap_year
  7738 000028EA 7306                <1> 	jnc .norm
  7739 000028EC 80FE03              <1> 	cmp dh, 3
  7740                              <1> 
  7741 000028EF 7201                <1> 	jb .norm
  7742 000028F1 41                  <1> 	inc cx
  7743                              <1> 
  7744                              <1> .norm:
  7745 000028F2 30F6                <1> 	xor dh, dh
  7746 000028F4 01D1                <1> 	add cx, dx
  7747                              <1> 
  7748 000028F6 89C8                <1> 	mov ax, cx
  7749 000028F8 31D2                <1> 	xor dx, dx
  7750 000028FA B90700              <1> 	mov cx, 7
  7751 000028FD F7F1                <1> 	div cx
  7752 000028FF 89D1                <1> 	mov cx, dx
  7753                              <1> 
  7754 00002901 5A                  <1> 	pop dx
  7755 00002902 5B                  <1> 	pop bx
  7756 00002903 58                  <1> 	pop ax
  7757 00002904 C3                  <1> 	ret
  7758                              <1> 
  7759 00002905 000303060104060205- <1> days_in_month_norm db  0, 3, 3, 6, 1, 4, 6, 2, 5, 0, 3, 5
  7760 0000290E 000305              <1>
  7761                              <1> 
  7762                              <1> ;=============================================================================
  7763                              <1> ; bcd_to_bin ---- convert bcd to binary
  7764                              <1> ; input: ax = bcd number
  7765                              <1> ; output: ax = binary number
  7766                              <1> ;=============================================================================
  7767                              <1> bcd_to_bin:
  7768 00002911 53                  <1>        push bx
  7769 00002912 51                  <1>        push cx
  7770 00002913 52                  <1>        push dx
  7771 00002914 56                  <1>        push si
  7772                              <1> 
  7773 00002915 8D36[3729]          <1>        lea si, [.mul_num]
  7774 00002919 B90400              <1>        mov cx, 4
  7775 0000291C 31DB                <1>        xor bx, bx
  7776                              <1> 
  7777                              <1> .loop_conv:
  7778 0000291E 50                  <1>        push ax
  7779 0000291F 83E00F              <1>        and ax, 0x000f
  7780 00002922 8B14                <1>        mov dx, [si]
  7781 00002924 F7E2                <1>        mul dx
  7782 00002926 01C3                <1>        add bx, ax
  7783 00002928 58                  <1>        pop ax
  7784 00002929 C1E804              <1>        shr ax, 4
  7785 0000292C 46                  <1>        inc si
  7786 0000292D 46                  <1>        inc si
  7787 0000292E E2EE                <1>        loop .loop_conv
  7788                              <1> 
  7789 00002930 89D8                <1>        mov ax, bx
  7790                              <1> 
  7791 00002932 5E                  <1>        pop si
  7792 00002933 5A                  <1>        pop dx
  7793 00002934 59                  <1>        pop cx
  7794 00002935 5B                  <1>        pop bx
  7795 00002936 C3                  <1>        ret
  7796                              <1> 
  7797 00002937 01000A006400E803    <1> .mul_num  dw 1, 10, 100, 1000
  7798                              <1> 
  7799                              <1> ;=============================================================================
  7800                              <1> ; bcd_to_str ---- convert bcd to string
  7801                              <1> ; input: ax = bcd number
  7802                              <1> ;        cl = length (0 to 4)
  7803                              <1> ;        es:di -> buffer
  7804                              <1> ; output: none
  7805                              <1> ;=============================================================================
  7806                              <1> bcd_to_str:
  7807 0000293F 60                  <1>        pusha
  7808 00002940 51                  <1>        push cx
  7809 00002941 89C3                <1>        mov bx, ax
  7810 00002943 B004                <1>        mov al, 4
  7811 00002945 F6E1                <1>        mul cl
  7812 00002947 88C1                <1>        mov cl, al
  7813 00002949 D3CB                <1>        ror bx, cl
  7814 0000294B 59                  <1>        pop cx
  7815                              <1> 
  7816                              <1> .loop_conv:
  7817 0000294C 08C9                <1>        or cl, cl
  7818 0000294E 740E                <1>        jz .end
  7819 00002950 C1C304              <1>        rol bx, 4
  7820 00002953 89D8                <1>        mov ax, bx
  7821 00002955 240F                <1>        and al, 0x0f
  7822 00002957 0430                <1>        add al, '0'
  7823 00002959 AA                  <1>        stosb
  7824 0000295A FEC9                <1>        dec cl
  7825 0000295C EBEE                <1>        jmp .loop_conv
  7826                              <1> 
  7827                              <1> .end:
  7828 0000295E 30C0                <1>        xor al, al
  7829 00002960 AA                  <1>        stosb
  7830 00002961 61                  <1>        popa
  7831 00002962 C3                  <1>        ret
  7832                              <1> 
  7833                              <1> ;=============================================================================
  7834                              <1> ; reboot ---- reboot the computer
  7835                              <1> ; input:
  7836                              <1> ;	none
  7837                              <1> ;=============================================================================
  7838                              <1> reboot:
  7839 00002963 BB4000              <1>        mov bx, 0x40
  7840 00002966 53                  <1>        push bx
  7841 00002967 1F                  <1>        pop ds
  7842 00002968 B83412              <1>        mov ax, 0x1234
  7843 0000296B A37200              <1>        mov [0x0072], ax
  7844 0000296E EA0000FFFF          <1>        jmp 0xFFFF:0x0000
  7845                              <1> 
  7846                              <1> ;=============================================================================
  7847                              <1> ; bioskey ---- BIOS keyboard func
  7848                              <1> ;=============================================================================
  7849                              <1> bioskey:
  7850 00002973 C606[A568]00        <1>        mov byte [utils_tmp.kbd_work], 0
  7851 00002978 08E4                <1>        or ah, ah
  7852 0000297A 740F                <1>        je .post_trans
  7853 0000297C 80FC01              <1>        cmp ah, 0x01
  7854 0000297F 740A                <1>        je .post_trans
  7855 00002981 80FC10              <1>        cmp ah, 0x10
  7856 00002984 7405                <1>        je .post_trans
  7857 00002986 80FC11              <1>        cmp ah, 0x11
  7858 00002989 7504                <1>        jne .call_int16
  7859                              <1> 
  7860                              <1> .post_trans:
  7861 0000298B FE06[A568]          <1>        inc byte [utils_tmp.kbd_work]
  7862                              <1> 
  7863                              <1> .call_int16:
  7864 0000298F CD16                <1>        int 0x16
  7865 00002991 9C                  <1>        pushf
  7866                              <1> 
  7867 00002992 803E[A568]00        <1>        cmp byte [utils_tmp.kbd_work], 0
  7868 00002997 741E                <1>        jz .end
  7869                              <1> 
  7870 00002999 51                  <1>        push cx
  7871 0000299A 56                  <1>        push si
  7872 0000299B 8B0E[4C46]          <1>        mov cx, [keymap.number]
  7873 0000299F 8B36[4E46]          <1>        mov si, [keymap.data]
  7874 000029A3 09C9                <1>        or cx, cx
  7875 000029A5 740E                <1>        jz .end_trans
  7876                              <1> 
  7877                              <1> .loop_trans:
  7878 000029A7 3B04                <1>        cmp ax, [si]
  7879 000029A9 7505                <1>        jne .loop_next
  7880 000029AB 8B4402              <1>        mov ax, [si+2]
  7881 000029AE EB05                <1>        jmp short .end_trans
  7882                              <1> .loop_next:
  7883 000029B0 83C604              <1>        add si, 4
  7884 000029B3 E2F2                <1>        loop .loop_trans
  7885                              <1> .end_trans:
  7886 000029B5 5E                  <1>        pop si
  7887 000029B6 59                  <1>        pop cx
  7888                              <1> .end:
  7889 000029B7 9D                  <1>        popf       
  7890 000029B8 C3                  <1>        ret
  7891                              <1> 
  7892                              <1> ;=============================================================================
  7893                              <1> ; check_keyevent ---- check if keyboard is pressed
  7894                              <1> ; input:
  7895                              <1> ;	none
  7896                              <1> ; output:
  7897                              <1> ;	ax = keyevent (0 = no key)
  7898                              <1> ;=============================================================================
  7899                              <1> check_keyevent:
  7900 000029B9 53                  <1> 	push bx
  7901                              <1> 
  7902 000029BA 8A3E[A668]          <1> 	mov bh, [utils_tmp.kbd_last_shift]
  7903 000029BE E85200              <1> 	call .check_stat_key
  7904 000029C1 88C3                <1> 	mov bl, al
  7905 000029C3 A2[A668]            <1> 	mov [utils_tmp.kbd_last_shift], al
  7906                              <1> 
  7907 000029C6 E85600              <1> 	call .check_norm_key
  7908 000029C9 09C0                <1> 	or ax, ax
  7909 000029CB 7407                <1> 	jz .no_norm_key
  7910                              <1> 
  7911 000029CD C606[A768]01        <1> 	mov byte [utils_tmp.kbd_bypass_next_shift], 1
  7912                              <1> .end:
  7913 000029D2 5B                  <1> 	pop bx
  7914 000029D3 C3                  <1> 	ret
  7915                              <1> 
  7916                              <1> .no_norm_key:
  7917 000029D4 31C0                <1> 	xor ax, ax
  7918 000029D6 38FB                <1> 	cmp bl, bh
  7919 000029D8 74F8                <1> 	je .end
  7920                              <1> 
  7921 000029DA 51                  <1> 	push cx
  7922 000029DB B90101              <1> 	mov cx, 0x0101
  7923                              <1> 
  7924                              <1> .loop_check_keys:
  7925 000029DE 53                  <1> 	push bx
  7926 000029DF 21CB                <1> 	and bx, cx
  7927 000029E1 38DF                <1> 	cmp bh, bl
  7928 000029E3 5B                  <1> 	pop bx
  7929                              <1> 
  7930 000029E4 740E                <1> 	je .no_this_key
  7931                              <1> 
  7932 000029E6 84CB                <1> 	test bl, cl
  7933 000029E8 7404                <1> 	jz .release
  7934 000029EA B4F1                <1> 	mov ah, (EVTCODE_COMMAND | EVTCODE_KEYPRESS)
  7935 000029EC EB02                <1> 	jmp short .key_ok
  7936                              <1> 
  7937                              <1> .release:
  7938 000029EE B4F2                <1> 	mov ah, (EVTCODE_COMMAND | EVTCODE_KEYRELEASE)
  7939                              <1> 
  7940                              <1> .key_ok:
  7941 000029F0 88C8                <1> 	mov al, cl
  7942 000029F2 EB06                <1> 	jmp short .end_check_keys
  7943                              <1> 
  7944                              <1> .no_this_key:
  7945 000029F4 D1E1                <1> 	shl cx, 1
  7946 000029F6 08C9                <1> 	or cl, cl
  7947 000029F8 75E4                <1> 	jnz .loop_check_keys
  7948                              <1> 
  7949                              <1> .end_check_keys:
  7950 000029FA 09C0                <1> 	or ax, ax
  7951 000029FC 7412                <1> 	jz .end_stat
  7952                              <1> 
  7953 000029FE A8F0                <1> 	test al, kbStateKeysMask
  7954 00002A00 7509                <1> 	jnz .dont_bypass
  7955                              <1> 
  7956 00002A02 803E[A768]00        <1> 	cmp byte [utils_tmp.kbd_bypass_next_shift], 0
  7957 00002A07 7407                <1> 	jz .end_stat
  7958                              <1> 
  7959 00002A09 31C0                <1> 	xor ax, ax
  7960                              <1> 
  7961                              <1> .dont_bypass:
  7962 00002A0B C606[A768]00        <1> 	mov byte [utils_tmp.kbd_bypass_next_shift], 0
  7963                              <1> 
  7964                              <1> .end_stat:
  7965 00002A10 59                  <1> 	pop cx
  7966 00002A11 5B                  <1> 	pop bx
  7967 00002A12 C3                  <1> 	ret
  7968                              <1> 
  7969                              <1> .check_stat_key:
  7970 00002A13 53                  <1> 	push bx
  7971 00002A14 B402                <1> 	mov ah, 2
  7972 00002A16 0A26[F445]          <1> 	or ah, [keyboard_type]
  7973 00002A1A E856FF              <1> 	call bioskey
  7974 00002A1D 5B                  <1> 	pop bx
  7975 00002A1E C3                  <1> 	ret
  7976                              <1> 
  7977                              <1> .check_norm_key:
  7978 00002A1F 53                  <1> 	push bx
  7979 00002A20 B401                <1>         mov ah,1                                        ; if no key pressed
  7980 00002A22 0A26[F445]          <1>         or ah, [keyboard_type]
  7981 00002A26 E84AFF              <1>         call bioskey                                    ; go back to check
  7982 00002A29 7409                <1> 	jz .no_key
  7983 00002A2B 8A26[F445]          <1> 	mov ah, [keyboard_type]
  7984 00002A2F E841FF              <1> 	call bioskey
  7985 00002A32 5B                  <1> 	pop bx
  7986 00002A33 C3                  <1> 	ret
  7987                              <1> 
  7988                              <1> .no_key:
  7989 00002A34 31C0                <1> 	xor ax, ax
  7990 00002A36 5B                  <1> 	pop bx
  7991 00002A37 C3                  <1> 	ret
  7992                              <1> 
  7993                              <1> ;=============================================================================
  7994                              <1> ;get_realtime ---- get the machine real time in minutes
  7995                              <1> ;input:
  7996                              <1> ;      none
  7997                              <1> ;output:
  7998                              <1> ;      cf = 0 success, ax = real time in minutes, dx = day (set a bit)
  7999                              <1> ;      cf = 1 failed
  8000                              <1> ;=============================================================================
  8001                              <1> get_realtime:
  8002 00002A38 53                  <1>         push bx
  8003 00002A39 51                  <1>         push cx
  8004                              <1> 
  8005 00002A3A B404                <1>         mov ah, 0x04
  8006 00002A3C CD1A                <1>         int 0x1a
  8007 00002A3E 723C                <1>         jc .end
  8008                              <1> 
  8009 00002A40 0FB6C6              <1>         movzx ax, dh
  8010 00002A43 E8CBFE              <1>         call bcd_to_bin
  8011 00002A46 88C6                <1>         mov dh, al
  8012 00002A48 88D0                <1>         mov al, dl
  8013 00002A4A E8C4FE              <1>         call bcd_to_bin
  8014 00002A4D 88C2                <1>         mov dl, al
  8015                              <1> 
  8016 00002A4F 89C8                <1>         mov ax, cx
  8017 00002A51 E8BDFE              <1>         call bcd_to_bin
  8018                              <1> 
  8019 00002A54 E85DFE              <1>         call day_in_week
  8020                              <1> 
  8021 00002A57 BA0100              <1>         mov dx, 1
  8022 00002A5A D3E2                <1>         shl dx, cl
  8023                              <1> 
  8024 00002A5C 52                  <1>         push dx
  8025 00002A5D B402                <1>         mov ah, 0x02
  8026 00002A5F CD1A                <1>         int 0x1a
  8027 00002A61 5A                  <1>         pop dx
  8028 00002A62 7218                <1>         jc .end
  8029                              <1> 
  8030 00002A64 0FB6C5              <1>         movzx ax, ch
  8031 00002A67 E8A7FE              <1>         call bcd_to_bin
  8032 00002A6A 88C5                <1>         mov ch, al
  8033                              <1> 
  8034 00002A6C 88C8                <1>         mov al, cl
  8035 00002A6E E8A0FE              <1>         call bcd_to_bin
  8036 00002A71 88C1                <1>         mov cl, al
  8037                              <1> 
  8038                              <1> ;convert hour and minute into minute
  8039 00002A73 B03C                <1>         mov al, 60
  8040 00002A75 F6E5                <1>         mul ch
  8041 00002A77 30ED                <1>         xor ch, ch
  8042 00002A79 01C8                <1>         add ax, cx
  8043                              <1> 
  8044 00002A7B F8                  <1>         clc
  8045                              <1> .end:
  8046 00002A7C 59                  <1>         pop cx
  8047 00002A7D 5B                  <1>         pop bx
  8048                              <1> 
  8049 00002A7E C3                  <1>         ret
  8050                              <1> 
  8051                              <1> 
  8052                              <1> ;=============================================================================
  8053                              <1> ; get_current_time_string ---- get current time string
  8054                              <1> ; input: al = show method, es:di -> buffer
  8055                              <1> ;=============================================================================
  8056                              <1> get_current_time_string:
  8057 00002A7F 60                  <1>        pusha
  8058 00002A80 08C0                <1>        or al, al
  8059 00002A82 741D                <1>        jz .end
  8060                              <1> 
  8061 00002A84 B402                <1>        mov ah, 0x02
  8062 00002A86 CD1A                <1>        int 0x1a
  8063 00002A88 7217                <1>        jc .end
  8064                              <1> 
  8065 00002A8A 89CB                <1>        mov bx, cx
  8066                              <1> 
  8067 00002A8C B90200              <1>        mov cx, 2
  8068                              <1> 
  8069 00002A8F 0FB6C7              <1>        movzx ax, bh
  8070 00002A92 E8AAFE              <1>        call bcd_to_str
  8071 00002A95 01CF                <1>        add di, cx
  8072 00002A97 B03A                <1>        mov al, ':'
  8073 00002A99 AA                  <1>        stosb
  8074                              <1> 
  8075 00002A9A 88D8                <1>        mov al, bl
  8076 00002A9C E8A0FE              <1>        call bcd_to_str
  8077 00002A9F 01CF                <1>        add di, cx
  8078                              <1>        
  8079                              <1> .end:
  8080 00002AA1 30C0                <1>        xor al, al
  8081 00002AA3 AA                  <1>        stosb
  8082 00002AA4 61                  <1>        popa
  8083 00002AA5 C3                  <1>        ret      
  8084                              <1> 
  8085                              <1> 
  8086                              <1> ;=============================================================================
  8087                              <1> ; get_current_date_string ---- get current date string
  8088                              <1> ; input: al = show method, es:di -> buffer
  8089                              <1> ;        the method of show date:
  8090                              <1> ;           0 = don't show date
  8091                              <1> ;           1 = day mm-dd-yyyy
  8092                              <1> ;           2 = day yyyy-mm-dd
  8093                              <1> ;           3 = day dd-mm-yyyy
  8094                              <1> ; output: none
  8095                              <1> ;=============================================================================
  8096                              <1> get_current_date_string:
  8097 00002AA6 60                  <1>        pusha
  8098                              <1> 
  8099 00002AA7 08C0                <1>        or al, al
  8100 00002AA9 7443                <1>        jz .end
  8101                              <1> 
  8102 00002AAB 50                  <1>        push ax
  8103 00002AAC B404                <1>        mov ah, 0x04
  8104 00002AAE CD1A                <1>        int 0x1a
  8105 00002AB0 58                  <1>        pop ax
  8106 00002AB1 723B                <1>        jc .end
  8107                              <1> 
  8108 00002AB3 50                  <1>        push ax
  8109 00002AB4 51                  <1>        push cx
  8110 00002AB5 52                  <1>        push dx
  8111                              <1> 
  8112 00002AB6 0FB6C6              <1>        movzx ax, dh
  8113 00002AB9 E855FE              <1>        call bcd_to_bin
  8114 00002ABC 88C6                <1>        mov dh, al
  8115 00002ABE 88D0                <1>        mov al, dl
  8116 00002AC0 E84EFE              <1>        call bcd_to_bin
  8117 00002AC3 88C2                <1>        mov dl, al
  8118                              <1> 
  8119 00002AC5 89C8                <1>        mov ax, cx
  8120 00002AC7 E847FE              <1>        call bcd_to_bin
  8121                              <1> 
  8122 00002ACA E8E7FD              <1>        call day_in_week
  8123                              <1> 
  8124 00002ACD 89CB                <1>        mov bx, cx
  8125 00002ACF D1E3                <1>        shl bx, 1
  8126 00002AD1 8BB7[3247]          <1>        mov si, [str_idx.sunday+bx]
  8127                              <1> 
  8128 00002AD5 E8C0FC              <1>        call strcpy
  8129 00002AD8 B020                <1>        mov al, ' '
  8130 00002ADA AA                  <1>        stosb
  8131                              <1> 
  8132 00002ADB 5A                  <1>        pop dx
  8133 00002ADC 5B                  <1>        pop bx
  8134 00002ADD 58                  <1>        pop ax
  8135                              <1> 
  8136 00002ADE 31C9                <1>        xor cx, cx
  8137                              <1> 
  8138 00002AE0 3C01                <1>        cmp al, 1
  8139 00002AE2 740F                <1>        je .mmddyy
  8140 00002AE4 3C02                <1>        cmp al, 2
  8141 00002AE6 741E                <1>        je .yymmdd
  8142 00002AE8 3C03                <1>        cmp al, 3
  8143 00002AEA 742D                <1>        je .ddmmyy
  8144 00002AEC EB00                <1>        jmp .end
  8145                              <1> 
  8146                              <1> .end:       
  8147 00002AEE 30C0                <1>        xor al, al
  8148 00002AF0 AA                  <1>        stosb
  8149 00002AF1 61                  <1>        popa
  8150 00002AF2 C3                  <1>        ret
  8151                              <1> 
  8152                              <1> .mmddyy:
  8153 00002AF3 B02D                <1>        mov al, '-'
  8154 00002AF5 50                  <1>        push ax
  8155 00002AF6 E83300              <1>        call .write_mm
  8156 00002AF9 58                  <1>        pop ax
  8157 00002AFA AA                  <1>        stosb
  8158 00002AFB 50                  <1>        push ax
  8159 00002AFC E83800              <1>        call .write_dd
  8160 00002AFF 58                  <1>        pop ax
  8161 00002B00 AA                  <1>        stosb
  8162 00002B01 E83E00              <1>        call .write_yy
  8163                              <1> 
  8164 00002B04 EBE8                <1>        jmp .end
  8165                              <1> 
  8166                              <1> .yymmdd:
  8167 00002B06 B02D                <1>        mov al, '-'
  8168 00002B08 50                  <1>        push ax
  8169 00002B09 E83600              <1>        call .write_yy
  8170 00002B0C 58                  <1>        pop ax
  8171 00002B0D AA                  <1>        stosb
  8172 00002B0E 50                  <1>        push ax
  8173 00002B0F E81A00              <1>        call .write_mm
  8174 00002B12 58                  <1>        pop ax
  8175 00002B13 AA                  <1>        stosb
  8176 00002B14 E82000              <1>        call .write_dd
  8177                              <1> 
  8178 00002B17 EBD5                <1>        jmp .end
  8179                              <1> 
  8180                              <1> .ddmmyy:
  8181 00002B19 B02D                <1>        mov al, '-'
  8182 00002B1B 50                  <1>        push ax
  8183 00002B1C E81800              <1>        call .write_dd
  8184 00002B1F 58                  <1>        pop ax
  8185 00002B20 AA                  <1>        stosb
  8186 00002B21 50                  <1>        push ax
  8187 00002B22 E80700              <1>        call .write_mm
  8188 00002B25 58                  <1>        pop ax
  8189 00002B26 AA                  <1>        stosb
  8190 00002B27 E81800              <1>        call .write_yy
  8191                              <1> 
  8192 00002B2A EBC2                <1>        jmp .end
  8193                              <1> 
  8194                              <1> .write_mm:
  8195 00002B2C 0FB6C6              <1>        movzx ax, dh
  8196 00002B2F B102                <1>        mov cl, 2
  8197 00002B31 E80BFE              <1>        call bcd_to_str
  8198 00002B34 01CF                <1>        add di, cx
  8199 00002B36 C3                  <1>        ret
  8200                              <1> 
  8201                              <1> .write_dd:
  8202 00002B37 0FB6C2              <1>        movzx ax, dl
  8203 00002B3A B102                <1>        mov cl, 2
  8204 00002B3C E800FE              <1>        call bcd_to_str
  8205 00002B3F 01CF                <1>        add di, cx
  8206 00002B41 C3                  <1>        ret
  8207                              <1> 
  8208                              <1> .write_yy:
  8209 00002B42 89D8                <1>        mov ax, bx
  8210 00002B44 B104                <1>        mov cl, 4
  8211 00002B46 E8F6FD              <1>        call bcd_to_str
  8212 00002B49 01CF                <1>        add di, cx
  8213 00002B4B C3                  <1>        ret
  8214                              <1> 
  8215                              <1> ;=============================================================================
  8216                              <1> ;calc_checksum ---- calculate the checksum of a data block.
  8217                              <1> ;input:
  8218                              <1> ;      ds:si -> start of the checksum area
  8219                              <1> ;      cx = checksum size
  8220                              <1> ;output:
  8221                              <1> ;      bl = the checksum value.
  8222                              <1> ;=============================================================================
  8223                              <1> calc_checksum:
  8224 00002B4C 51                  <1>         push cx
  8225 00002B4D 50                  <1>         push ax
  8226 00002B4E 56                  <1>         push si
  8227 00002B4F 30DB                <1>         xor bl, bl
  8228 00002B51 FC                  <1>         cld
  8229                              <1> .loop_calc:
  8230 00002B52 AC                  <1>         lodsb
  8231 00002B53 00C3                <1>         add bl, al
  8232 00002B55 E2FB                <1>         loop .loop_calc
  8233 00002B57 5E                  <1>         pop si
  8234 00002B58 58                  <1>         pop ax
  8235 00002B59 59                  <1>         pop cx
  8236 00002B5A C3                  <1>         ret
  8237                              <1> 
  8238                              <1> ;=============================================================================
  8239                              <1> ; clear_memory ---- clear a memory block to zero
  8240                              <1> ; input:
  8241                              <1> ;	cx = size
  8242                              <1> ;	ds:di -> memory
  8243                              <1> ;=============================================================================
  8244                              <1> clear_memory:
  8245 00002B5B 60                  <1> 	pusha
  8246 00002B5C 06                  <1> 	push es
  8247 00002B5D 1E                  <1> 	push ds
  8248 00002B5E 07                  <1> 	pop es
  8249 00002B5F 30C0                <1> 	xor al, al
  8250 00002B61 F3AA                <1> 	rep stosb
  8251 00002B63 07                  <1> 	pop es
  8252 00002B64 61                  <1> 	popa
  8253 00002B65 C3                  <1> 	ret 
  8254                              <1> 
  8255                                  %include "knl.asm"
  8256                              <1> ; asmsyntax=nasm
  8257                              <1> ;
  8258                              <1> ; knl.asm
  8259                              <1> ;
  8260                              <1> ; kernel functions for partition list
  8261                              <1> ;
  8262                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
  8263                              <1> ;
  8264                              <1> 
  8265                              <1> %define LIMIT_FLOPPY_NUMBER
  8266                              <1> 
  8267                              <1> %define NUM_OF_ID       (part_type.str_tbl - part_type.id_tbl)
  8268                              <1> %define NUM_OF_LOG_DENY (part_type.auto_act_tbl - part_type.log_deny_tbl)
  8269                              <1> %define NUM_OF_PRI_DENY (part_type.auto_act_tbl - part_type.pri_deny_tbl)
  8270                              <1> %define NUM_OF_AUTO_ACT (part_type.hidden_tbl - part_type.auto_act_tbl)
  8271                              <1> %define NUM_OF_HIDDEN   (part_type.end_of_tbl - part_type.hidden_tbl)
  8272                              <1> %define NUM_OF_ALLOW_HIDE (part_type.hidden_tbl - part_type.allow_hide_tbl)
  8273                              <1> 
  8274                              <1> ;%define NUM_OF_EXT      (part_type.log_deny_tbl - part_type.ext_tbl)
  8275                              <1> 
  8276                              <1> %define MAX_FLOPPY_NUM  2
  8277                              <1> 
  8278                              <1> ;==============================================================================
  8279                              <1> ;fill_bootrecord ---- fill the boot record for a partition
  8280                              <1> ;input:
  8281                              <1> ;      ebx   =  father's abs LBA address
  8282                              <1> ;      dh    =  partition id
  8283                              <1> ;      dl    =  drive id
  8284                              <1> ;      ds:si -> source partition record
  8285                              <1> ;      es:di -> buffer to store the boot record
  8286                              <1> ;output:
  8287                              <1> ;      es:di -> filled with boot record
  8288                              <1> ;==============================================================================
  8289                              <1> fill_bootrecord:
  8290 00002B66 6660                <1>         pushad
  8291 00002B68 FC                  <1>         cld
  8292                              <1> 
  8293 00002B69 57                  <1>         push di                                  ; clear the boot record
  8294 00002B6A 30C0                <1>         xor al, al                               ;
  8295 00002B6C B94000              <1>         mov cx, SIZE_OF_BOOTRECORD               ;
  8296 00002B6F F3AA                <1>         rep stosb                                ;
  8297 00002B71 5F                  <1>         pop di                                   ;
  8298                              <1>         
  8299 00002B72 895502              <1>         mov [di + struc_bootrecord.drive_id], dx ; fill the drive_id and
  8300                              <1>                                                  ; part_id
  8301 00002B75 6689D9              <1>         mov ecx, ebx
  8302 00002B78 66894D06            <1>         mov [di + struc_bootrecord.father_abs_addr], ecx
  8303                              <1> 
  8304 00002B7C 8A7C04              <1>         mov bh, [si + struc_partition.type]
  8305                              <1> 
  8306 00002B7F E8200B              <1>         call get_drive_flags
  8307                              <1> 
  8308 00002B82 83E015              <1>         and ax, DRVFLAG_MASK                     ; set flags
  8309                              <1>         
  8310 00002B85 08F6                <1>         or dh, dh                                ; check if it's a driver record
  8311 00002B87 7507                <1>         jnz .is_partition
  8312 00002B89 0D8000              <1>         or ax, INFOFLAG_ISDRIVER
  8313 00002B8C 30FF                <1>         xor bh, bh
  8314 00002B8E EB0F                <1>         jmp short .set_other_flags
  8315                              <1> 
  8316                              <1> .is_partition:
  8317 00002B90 6609C9              <1>         or ecx,ecx                               ;
  8318 00002B93 7403                <1>         jz .not_logical                          ;
  8319 00002B95 0D0001              <1>         or ax, INFOFLAG_LOGICAL                  ;
  8320                              <1>         
  8321                              <1> .not_logical:
  8322 00002B98 3A14                <1>         cmp dl, [si + struc_partition.state]     ; test if it's active
  8323                              <1>                                                  ; should changed to
  8324                              <1>                                                  ; cmp 0x80, [xxx] ? 
  8325 00002B9A 7503                <1>         jne .set_other_flags
  8326 00002B9C 0D0008              <1>         or ax, INFOFLAG_ACTIVE
  8327                              <1> 
  8328                              <1> .set_other_flags:
  8329                              <1> 
  8330 00002B9F 51                  <1>         push cx                                  ;
  8331 00002BA0 57                  <1>         push di                                  ;
  8332                              <1> 
  8333 00002BA1 A98000              <1>         test ax, INFOFLAG_ISDRIVER
  8334 00002BA4 752E                <1>         jnz .not_hidden                          ;
  8335                              <1> 
  8336 00002BA6 A90001              <1>         test ax, INFOFLAG_LOGICAL                ; ah = record flags
  8337 00002BA9 7513                <1>         jnz .not_auto_act                        ;
  8338                              <1> 
  8339 00002BAB 50                  <1>         push ax                                  ; check if it should
  8340 00002BAC 8D3E[9035]          <1>         lea di, [part_type.auto_act_tbl]         ; be marked as
  8341 00002BB0 B90800              <1>         mov cx, NUM_OF_AUTO_ACT                  ; auto active.
  8342 00002BB3 88F8                <1>         mov al, bh
  8343 00002BB5 E8B1FB              <1>         call strchr                              ;
  8344 00002BB8 58                  <1>         pop ax                                   ;
  8345 00002BB9 7203                <1>         jc .not_auto_act                         ;
  8346                              <1> 
  8347 00002BBB 0D0010              <1>         or ax, INFOFLAG_AUTOACTIVE
  8348                              <1>         
  8349                              <1> .not_auto_act:                                   ;
  8350 00002BBE 50                  <1>         push ax                                  ; check if it's a
  8351 00002BBF 8D3E[9835]          <1>         lea di, [part_type.hidden_tbl]           ; hidden partition.
  8352 00002BC3 B90700              <1>         mov cx, NUM_OF_HIDDEN                    ;
  8353 00002BC6 88F8                <1>         mov al, bh
  8354 00002BC8 E89EFB              <1>         call strchr                              ;
  8355 00002BCB 58                  <1>         pop ax                                   ;
  8356 00002BCC 7206                <1>         jc .not_hidden                           ;
  8357                              <1> 
  8358 00002BCE 0D0002              <1>         or ax, INFOFLAG_HIDDEN                   ; set the hidden flag
  8359 00002BD1 80E70F              <1>         and bh, 0x0F                             ; clear the hidden signature
  8360                              <1>         
  8361                              <1> .not_hidden:
  8362 00002BD4 5F                  <1>         pop di
  8363 00002BD5 59                  <1>         pop cx
  8364                              <1> 
  8365 00002BD6 8905                <1>         mov [di + struc_bootrecord.flags], ax    ; fill the flags and type
  8366 00002BD8 887D04              <1>         mov [di + struc_bootrecord.type], bh
  8367                              <1> 
  8368 00002BDB A98000              <1>         test ax, INFOFLAG_ISDRIVER
  8369 00002BDE 7507                <1>         jnz .no_abs_addr                         ; if it's floppy, abs_addr = 0
  8370                              <1>         
  8371 00002BE0 668B5C08            <1>         mov ebx, [si + struc_partition.relative_addr]    ;
  8372                              <1> 
  8373 00002BE4 6601D9              <1>         add ecx, ebx                                     ; ecx = abs_address
  8374                              <1>         
  8375                              <1> .no_abs_addr:
  8376 00002BE7 66894D0A            <1>         mov [di + struc_bootrecord.abs_addr], ecx
  8377                              <1> 
  8378 00002BEB A98000              <1>         test ax, INFOFLAG_ISDRIVER
  8379 00002BEE 7511                <1>         jnz .isdriver
  8380                              <1> 
  8381 00002BF0 A90001              <1>         test ax, INFOFLAG_LOGICAL
  8382 00002BF3 7406                <1>         jz .primary
  8383 00002BF5 8D36[3E34]          <1>         lea si, [knl_strings.logical]               ; it's logical partition
  8384 00002BF9 EB2B                <1>         jmp short .fill_name                              ;
  8385                              <1> .primary:
  8386 00002BFB 8D36[3634]          <1>         lea si, [knl_strings.primary]               ; it's primary partition
  8387 00002BFF EB25                <1>         jmp short .fill_name
  8388                              <1> 
  8389                              <1> .isdriver:
  8390 00002C01 80FA80              <1>         cmp dl, MIN_HD_ID
  8391 00002C04 721C                <1>         jb .floppy
  8392                              <1> 
  8393 00002C06 A90400              <1>         test ax, DRVFLAG_REMOVABLE
  8394 00002C09 7411                <1>         jz .harddisk
  8395                              <1> 
  8396 00002C0B A91000              <1> 	test ax, DRVFLAG_ISCDROM
  8397 00002C0E 7406                <1> 	jz .removable
  8398                              <1> 
  8399 00002C10 8D36[5934]          <1> 	lea si, [knl_strings.cdrom]
  8400 00002C14 EB10                <1> 	jmp short .fill_name
  8401                              <1> 
  8402                              <1> .removable:
  8403 00002C16 8D36[4634]          <1>         lea si, [knl_strings.removable]
  8404 00002C1A EB0A                <1>         jmp short .fill_name
  8405                              <1> 
  8406                              <1> .harddisk:
  8407 00002C1C 8D36[5034]          <1>         lea si, [knl_strings.harddisk]              ; it's hard drive
  8408 00002C20 EB04                <1>         jmp short .fill_name
  8409                              <1> 
  8410                              <1> .floppy:
  8411 00002C22 8D36[2F34]          <1>         lea si, [knl_strings.floppy]                ; it's floppy drive
  8412                              <1> 
  8413                              <1> .fill_name:
  8414 00002C26 83C716              <1>         add di, struc_bootrecord.name
  8415 00002C29 B90F00              <1>         mov cx, 15
  8416 00002C2C E84FFB              <1>         call strncpy
  8417                              <1> 
  8418 00002C2F A98000              <1>         test ax, INFOFLAG_ISDRIVER
  8419 00002C32 7509                <1>         jnz .end
  8420                              <1> 
  8421 00002C34 88F0                <1>         mov al, dh                                  ; append partition id
  8422 00002C36 30E4                <1>         xor ah, ah                                  ; at the end of the
  8423 00002C38 B103                <1>         mov cl, 3                                   ; name
  8424 00002C3A E8B4FA              <1>         call itoa                                   ;
  8425                              <1> 
  8426                              <1> .end:
  8427 00002C3D 6661                <1>         popad
  8428 00002C3F C3                  <1>         ret
  8429                              <1> 
  8430                              <1> ;==============================================================================
  8431                              <1> ;fill_special_record ---- fill the boot record for a special command
  8432                              <1> ;input:
  8433                              <1> ;      al = command id
  8434                              <1> ;      es:di -> buffer to store the boot record
  8435                              <1> ;output:
  8436                              <1> ;      es:di -> filled with boot record
  8437                              <1> ;==============================================================================
  8438                              <1> fill_special_record:
  8439 00002C40 60                  <1> 	pusha
  8440 00002C41 FC                  <1>         cld
  8441                              <1> 
  8442 00002C42 50                  <1> 	push ax
  8443 00002C43 57                  <1>         push di                                  ; clear the boot record
  8444 00002C44 30C0                <1>         xor al, al                               ;
  8445 00002C46 B94000              <1>         mov cx, SIZE_OF_BOOTRECORD               ;
  8446 00002C49 F3AA                <1>         rep stosb                                ;
  8447 00002C4B 5F                  <1>         pop di                                   ;
  8448 00002C4C 58                  <1> 	pop ax
  8449                              <1> 
  8450 00002C4D 830D08              <1> 	or word [di + struc_bootrecord.flags], INFOFLAG_ISSPECIAL
  8451 00002C50 884504              <1> 	mov byte [di + struc_bootrecord.type], al
  8452 00002C53 83C716              <1> 	add di, struc_bootrecord.name
  8453                              <1> 
  8454 00002C56 31F6                <1> 	xor si, si
  8455                              <1> 
  8456 00002C58 3C02                <1> 	cmp al, SPREC_POWEROFF
  8457 00002C5A 7503                <1> 	jne .not_poweroff
  8458 00002C5C BE[6834]            <1> 	mov si, knl_strings.poweroff
  8459                              <1> 
  8460                              <1> .not_poweroff:
  8461 00002C5F 3C03                <1> 	cmp al, SPREC_RESTART
  8462 00002C61 7503                <1> 	jne .not_restart
  8463 00002C63 BE[7234]            <1> 	mov si, knl_strings.restart
  8464                              <1> 
  8465                              <1> .not_restart:
  8466 00002C66 3C01                <1> 	cmp al, SPREC_QUIT
  8467 00002C68 7503                <1> 	jne .not_quit
  8468 00002C6A BE[7934]            <1> 	mov si, knl_strings.quit
  8469                              <1> 
  8470                              <1> .not_quit:
  8471 00002C6D 3C00                <1> 	cmp al, SPREC_BOOTPREV
  8472 00002C6F 7503                <1> 	jne .not_bootprev
  8473 00002C71 BE[8634]            <1> 	mov si, knl_strings.bootprev
  8474                              <1> 
  8475                              <1> .not_bootprev:
  8476 00002C74 B90F00              <1> 	mov cx, 15
  8477 00002C77 E804FB              <1> 	call strncpy
  8478 00002C7A 61                  <1> 	popa
  8479 00002C7B C3                  <1> 	ret
  8480                              <1> 
  8481                              <1> ;==============================================================================
  8482                              <1> ;get_parttype_str ---- get partition type string
  8483                              <1> ;input:
  8484                              <1> ;      al = partition type
  8485                              <1> ;output:
  8486                              <1> ;      ds:si -> partition type string
  8487                              <1> ;==============================================================================
  8488                              <1> get_parttype_str:
  8489 00002C7C 57                  <1>         push di
  8490 00002C7D 51                  <1>         push cx
  8491 00002C7E 8D3E[9A34]          <1>         lea di, [part_type.id_tbl]
  8492 00002C82 B91A00              <1>         mov cx, NUM_OF_ID
  8493 00002C85 E8E1FA              <1>         call strchr
  8494 00002C88 C1E103              <1>         shl cx, 3                   ; cx = cx * 8
  8495 00002C8B 8D36[B434]          <1>         lea si, [part_type.str_tbl]
  8496 00002C8F 01CE                <1>         add si, cx
  8497 00002C91 59                  <1>         pop cx
  8498 00002C92 5F                  <1>         pop di
  8499 00002C93 C3                  <1>         ret
  8500                              <1> 
  8501                              <1> ;==============================================================================
  8502                              <1> ;check_bootrecord ---- check if the boot record is ok
  8503                              <1> ;input:
  8504                              <1> ;      ds:si -> boot record
  8505                              <1> ;output:
  8506                              <1> ;      cf = 0 the boot record is ok
  8507                              <1> ;      cf = 1 the boot record cannot boot
  8508                              <1> ;==============================================================================
  8509                              <1> check_bootrecord:
  8510 00002C94 6660                <1>         pushad                           ; save registers
  8511 00002C96 09F6                <1> 	or si, si
  8512 00002C98 0F84F800            <1> 	jmpz .bad_record
  8513                              <1> 
  8514 00002C9C FC                  <1>         cld
  8515                              <1> 
  8516                              <1> ;============= check special record ===========
  8517 00002C9D 8B04                <1>         mov ax, [si + struc_bootrecord.flags]        ; get record flags
  8518 00002C9F A90800              <1> 	test ax, INFOFLAG_ISSPECIAL
  8519 00002CA2 0F842400            <1> 	jmpz .normal_record
  8520                              <1> 
  8521 00002CA6 8A5C04              <1> 	mov bl, [si + struc_bootrecord.type]
  8522 00002CA9 80FB04              <1> 	cmp bl, NUM_OF_SPREC
  8523 00002CAC 0F83E400            <1> 	jmpnb .bad_record
  8524                              <1> 
  8525 00002CB0 80FB02              <1> 	cmp bl, SPREC_POWEROFF
  8526 00002CB3 0F850600            <1> 	jmpne .check_prev
  8527                              <1> 
  8528 00002CB7 E8B5FB              <1> 	call check_apm_bios
  8529 00002CBA E9D800              <1> 	jmp .end
  8530                              <1> 
  8531                              <1> .check_prev:
  8532 00002CBD 80FB00              <1> 	cmp bl, SPREC_BOOTPREV
  8533 00002CC0 0F85CD00            <1> 	jmpne .good_record
  8534                              <1> 
  8535 00002CC4 E84D07              <1> 	call check_prev_mbr
  8536 00002CC7 E9CB00              <1> 	jmp .end
  8537                              <1> 
  8538                              <1> .normal_record:
  8539                              <1> ;============= check driver ===================
  8540 00002CCA 8B5402              <1>         mov dx, [si + struc_bootrecord.drive_id]     ; get drive id and part id
  8541 00002CCD 8D3E[E755]          <1>         lea di, [hdio_tmp.driveinfo]
  8542 00002CD1 E8E808              <1>         call get_drive_info                          ; check if the drive ok
  8543 00002CD4 0F82BC00            <1>         jmpc .bad_record
  8544                              <1> 
  8545 00002CD8 50                  <1>         push ax
  8546 00002CD9 8A6501              <1>         mov ah, [di + struc_driveinfo.flags]         ;
  8547 00002CDC 251515              <1>         and ax, ( DRVFLAG_MASK << 8) | DRVFLAG_MASK  ; check if the flags was
  8548 00002CDF 38E0                <1>         cmp al, ah                                   ; changed
  8549 00002CE1 58                  <1>         pop ax                                       ;
  8550 00002CE2 0F85AE00            <1>         jmpne .bad_record
  8551                              <1> 
  8552 00002CE6 A98000              <1>         test ax, INFOFLAG_ISDRIVER                   ; if it's a driver then ok
  8553 00002CE9 0F85A400            <1>         jmpnz .good_record
  8554                              <1> 
  8555                              <1> ;============ check partition =================
  8556                              <1> ; now we know it's a partiton!
  8557 00002CED 8A5C04              <1>         mov bl, [si + struc_bootrecord.type]
  8558 00002CF0 08DB                <1>         or bl, bl                                    
  8559 00002CF2 0F849E00            <1>         jmpz .bad_record                               ; it's free, bad!
  8560                              <1> 
  8561                              <1> .not_free:
  8562 00002CF6 A90001              <1>         test ax, INFOFLAG_LOGICAL                    ; it's logical partition
  8563 00002CF9 7509                <1>         jnz .logical_part                            ;
  8564                              <1> 
  8565 00002CFB B90400              <1>         mov cx, NUM_OF_PRI_DENY                      ;
  8566 00002CFE 8D3E[8C35]          <1>         lea di, [part_type.pri_deny_tbl]             ;
  8567 00002D02 EB07                <1>         jmp short .check_type                        ; check if the partition
  8568                              <1> 
  8569                              <1> .logical_part:                                       ; type is in the deny
  8570 00002D04 B90400              <1>         mov cx, NUM_OF_LOG_DENY                      ; table
  8571 00002D07 8D3E[8C35]          <1>         lea di, [part_type.log_deny_tbl]             ;
  8572                              <1> 
  8573                              <1> .check_type:                                         ;
  8574 00002D0B 50                  <1>         push ax
  8575 00002D0C 88D8                <1>         mov al, bl                                   ; al = partition type
  8576 00002D0E E858FA              <1>         call strchr                                  ;
  8577 00002D11 58                  <1>         pop ax
  8578 00002D12 0F837E00            <1>         jmpnc .bad_record                              ; this type is denied!
  8579                              <1> 
  8580                              <1> ;================ check in father ===================        
  8581                              <1> ; read father's partition table into buffer and check it
  8582 00002D16 50                  <1>         push ax                                      ; save flags
  8583                              <1> 
  8584 00002D17 668B5C06            <1>         mov ebx, [si + struc_bootrecord.father_abs_addr]
  8585                              <1> 
  8586 00002D1B B80102              <1>         mov ax, (INT13H_READ << 8 ) | 0x01           ; read the first sector
  8587 00002D1E 8D3E[0D56]          <1>         lea di, [knl_tmp.disk_buf1]                           ; into buffer
  8588 00002D22 E83B0A              <1>         call disk_access                             ;
  8589 00002D25 58                  <1>         pop ax                                       ; load flags
  8590 00002D26 0F826A00            <1>         jmpc .bad_record
  8591                              <1> 
  8592 00002D2A 81BDFE0155AA        <1>         cmp word [di + 510], 0AA55h    ; check if the father is
  8593 00002D30 7562                <1>         jne .bad_record                              ; good
  8594                              <1> 
  8595 00002D32 668B4C0A            <1>         mov ecx, [si + struc_bootrecord.abs_addr]    ; get partition's abs addr
  8596 00002D36 6629D9              <1>         sub ecx, ebx                                 ; calculate relative address
  8597 00002D39 6689CB              <1> 	mov ebx, ecx
  8598                              <1> 
  8599 00002D3C 81C7BE01            <1>         add di, 1BEh                         ; point to father's partition
  8600                              <1>                                                      ; table
  8601 00002D40 B90400              <1>         mov cx, 4
  8602                              <1>         
  8603                              <1> .search_in_father:                                   ; find the record in
  8604 00002D43 807D0400            <1> 	cmp byte [di + struc_partition.type], 0      ;
  8605 00002D47 7406                <1> 	je .invalid_entry
  8606 00002D49 66395D08            <1>         cmp [di + struc_partition.relative_addr], ebx; father's partition
  8607 00002D4D 7407                <1>         je .found_it     
  8608                              <1> .invalid_entry:                                      ; table
  8609 00002D4F 83C710              <1>         add di, SIZE_OF_PARTITION                    ;
  8610 00002D52 E2EF                <1>         loop .search_in_father                       ;
  8611 00002D54 EB3E                <1>         jmp .bad_record                        ; not found! it's bad.
  8612                              <1>         
  8613                              <1> .found_it:
  8614                              <1> 
  8615                              <1> ;adjust some flags of the boot record.
  8616                              <1> ;there is no other place to suit these codes,
  8617                              <1> ;so I place them here :-(
  8618                              <1> 
  8619 00002D56 50                  <1>         push ax                                      ;
  8620 00002D57 57                  <1>         push di                                      ; hidden partition
  8621 00002D58 8A5D04              <1>         mov bl, [di + struc_partition.type]          ; check if it's a
  8622 00002D5B 88D8                <1>         mov al, bl                                   ;
  8623 00002D5D 8D3E[9835]          <1>         lea di, [part_type.hidden_tbl]               ;
  8624 00002D61 B90700              <1>         mov cx, NUM_OF_HIDDEN                        ;
  8625 00002D64 E802FA              <1>         call strchr                                  ;
  8626 00002D67 5F                  <1>         pop di                                       ;
  8627 00002D68 58                  <1>         pop ax                                       ;
  8628 00002D69 7208                <1>         jc .not_hidden                               ;
  8629 00002D6B 80E30F              <1>         and bl, 0x0F
  8630 00002D6E 0D0002              <1>         or ax, INFOFLAG_HIDDEN                       ; set hidden flag.
  8631 00002D71 EB03                <1>         jmp short .validate_type
  8632                              <1> 
  8633                              <1> .not_hidden:
  8634 00002D73 25FFFD              <1>         and ax, ~ INFOFLAG_HIDDEN                    ; clear hidden flag.
  8635                              <1> 
  8636                              <1> .validate_type:
  8637                              <1> 
  8638                              <1> %ifdef STRICT_PART_CHECK
  8639                              <1>         cmp bl, [si + struc_bootrecord.type]         ; check the partition type
  8640                              <1>         jne .bad_record                              ; wrong type!
  8641                              <1> %else
  8642 00002D76 885C04              <1> 	mov [si + struc_bootrecord.type], bl         ; set partition type
  8643                              <1> %endif
  8644                              <1> 
  8645                              <1> .type_ok:
  8646 00002D79 52                  <1>         push dx
  8647 00002D7A A90020              <1>         test ax, INFOFLAG_SWAPDRVID                  ; check if swap driver id
  8648 00002D7D 7403                <1>         jz .no_swapid
  8649 00002D7F 80E280              <1>         and dl, 0x80
  8650                              <1> 
  8651                              <1> .no_swapid:
  8652 00002D82 3A15                <1>         cmp dl, [di + struc_partition.state]         ; check if the partition
  8653 00002D84 5A                  <1>         pop dx
  8654 00002D85 7505                <1>         jne .not_active                              ; is active.
  8655 00002D87 0D0008              <1>         or ax, INFOFLAG_ACTIVE                       ; should change to
  8656 00002D8A EB03                <1>         jmp short .adjust_flags                      ; cmp 0x80, byte [state] ?
  8657                              <1> 
  8658                              <1> .not_active:
  8659 00002D8C 25FFF7              <1>         and ax, ~ INFOFLAG_ACTIVE
  8660                              <1> 
  8661                              <1> .adjust_flags:
  8662 00002D8F 8904                <1>         mov [si + struc_bootrecord.flags], ax
  8663                              <1> 
  8664                              <1> ;==================  check partition itself ==============
  8665                              <1> .check_inside:                                       ; check partition itself
  8666                              <1> 
  8667                              <1> %ifdef STRICT_PART_CHECK
  8668                              <1>         mov ebx, [si + struc_bootrecord.abs_addr]
  8669                              <1> 
  8670                              <1>         lea di, [knl_tmp.disk_buf1]
  8671                              <1>         mov ax, (INT13H_READ << 8 ) | 0x01           ; read the first sector
  8672                              <1>         call disk_access                             ; into buffer
  8673                              <1>         jc .bad_record                               ; read error!
  8674                              <1>         
  8675                              <1>         cmp word [di + 510], 0AA55h    ; check if the paritition
  8676                              <1>         jne .bad_record                              ; is good
  8677                              <1> %endif
  8678                              <1> 
  8679                              <1> .good_record:
  8680 00002D91 F8                  <1>         clc
  8681 00002D92 EB01                <1>         jmp short .end
  8682                              <1> 
  8683                              <1> .bad_record:
  8684 00002D94 F9                  <1>         stc
  8685                              <1> .end:
  8686 00002D95 6661                <1>         popad
  8687 00002D97 C3                  <1>         ret
  8688                              <1> 
  8689                              <1> ;==============================================================================
  8690                              <1> ;search_drv_records ---- search all driver records 
  8691                              <1> ;input:
  8692                              <1> ;      dl = beginning driver id.
  8693                              <1> ;      cl = max number of boot records could be searched
  8694                              <1> ;      es:di -> buffer to store boot records. 
  8695                              <1> ;output:
  8696                              <1> ;      ch = number of the valid boot records have searched
  8697                              <1> ;==============================================================================
  8698                              <1> search_drv_records:
  8699 00002D98 30ED                <1>        xor ch, ch
  8700 00002D9A 882E[F255]          <1>        mov [knl_tmp.good_record_num], ch
  8701 00002D9E 880E[F355]          <1>        mov [knl_tmp.max_record_num], cl
  8702 00002DA2 882E[F955]          <1>        mov [knl_tmp.floppy_num], ch
  8703 00002DA6 08C9                <1>        or cl, cl 
  8704 00002DA8 7501                <1>        jnz .can_search_more
  8705 00002DAA C3                  <1>        ret
  8706                              <1> 
  8707                              <1> .can_search_more:
  8708 00002DAB 60                  <1>        pusha
  8709 00002DAC 6631DB              <1>        xor ebx, ebx
  8710 00002DAF 30F6                <1>        xor dh, dh
  8711                              <1> 
  8712                              <1> .loop_search:
  8713 00002DB1 E8EE08              <1>        call get_drive_flags
  8714 00002DB4 722C                <1>        jc .search_next
  8715                              <1> 
  8716 00002DB6 A801                <1>        test al, DRVFLAG_DRIVEOK
  8717 00002DB8 7228                <1>        jc .search_next
  8718                              <1> 
  8719                              <1> %ifdef LIMIT_FLOPPY_NUMBER
  8720 00002DBA 80FA80              <1>        cmp dl, MIN_HD_ID
  8721 00002DBD 730F                <1>        jae .isharddisk
  8722 00002DBF A804                <1>        test al, DRVFLAG_REMOVABLE
  8723 00002DC1 740B                <1>        jz .isharddisk
  8724                              <1> 
  8725 00002DC3 FE06[F955]          <1>        inc byte [knl_tmp.floppy_num]
  8726 00002DC7 803E[F955]02        <1>        cmp byte [knl_tmp.floppy_num], MAX_FLOPPY_NUM
  8727 00002DCC 7714                <1>        ja .search_next
  8728                              <1> 
  8729                              <1> .isharddisk:
  8730                              <1> %endif
  8731                              <1> 
  8732 00002DCE E895FD              <1>        call fill_bootrecord
  8733 00002DD1 FE06[F255]          <1>        inc byte [knl_tmp.good_record_num]
  8734 00002DD5 8A26[F255]          <1>        mov ah, [knl_tmp.good_record_num]                ; check if there are any
  8735 00002DD9 3A26[F355]          <1>        cmp ah, [knl_tmp.max_record_num]                 ; more space.
  8736 00002DDD 7309                <1>        jae .end
  8737                              <1> 
  8738 00002DDF 83C740              <1>        add di, SIZE_OF_BOOTRECORD
  8739                              <1> 
  8740                              <1> .search_next:
  8741 00002DE2 FEC2                <1>        inc dl
  8742 00002DE4 08D2                <1>        or dl, dl
  8743 00002DE6 75C9                <1>        jnz .loop_search
  8744                              <1> 
  8745                              <1> .end:
  8746 00002DE8 61                  <1>        popa
  8747 00002DE9 8A2E[F255]          <1>        mov ch, [knl_tmp.good_record_num]
  8748 00002DED C3                  <1>        ret
  8749                              <1> 
  8750                              <1> 
  8751                              <1> ;==============================================================================
  8752                              <1> ;search_part_records ---- search all boot records in a drive
  8753                              <1> ;input:
  8754                              <1> ;      dl = drive id
  8755                              <1> ;      cl = max number of boot records could be searched
  8756                              <1> ;      es:di -> buffer to store boot records
  8757                              <1> ;output:
  8758                              <1> ;      ch = number of the valid boot records have searched
  8759                              <1> ;==============================================================================
  8760                              <1> search_part_records:
  8761 00002DEE 30ED                <1>         xor ch, ch
  8762 00002DF0 882E[F255]          <1>         mov [knl_tmp.good_record_num], ch
  8763 00002DF4 880E[F355]          <1>         mov [knl_tmp.max_record_num], cl
  8764 00002DF8 08C9                <1>         or cl, cl
  8765 00002DFA 7501                <1>         jnz .can_search_more                         ; check if there are any
  8766 00002DFC C3                  <1>         ret                                          ; space to search more.
  8767                              <1>         
  8768                              <1> .can_search_more:
  8769 00002DFD 60                  <1>         pusha
  8770                              <1> 
  8771 00002DFE 6631DB              <1>         xor ebx, ebx                                 ; clear some stuff
  8772 00002E01 30F6                <1>         xor dh, dh                                   ;
  8773                              <1> 
  8774 00002E03 E89C08              <1>         call get_drive_flags                         ; get the drive flags.
  8775 00002E06 0F82A400            <1>         jmpc .end
  8776                              <1>         
  8777 00002E0A A804                <1>         test al, DRVFLAG_REMOVABLE                  ; check if it's a floppy
  8778 00002E0C 0F859E00            <1>         jmpnz .end
  8779 00002E10 A810                <1> 	test al, DRVFLAG_ISCDROM
  8780 00002E12 0F859800            <1> 	jmpnz .end
  8781                              <1> 
  8782                              <1> ;search partitions
  8783                              <1> .search_partitions:
  8784 00002E16 57                  <1>         push di
  8785 00002E17 8D3E[0D5E]          <1>         lea di, [knl_tmp.disk_buf2]
  8786 00002E1B 89FE                <1>         mov si, di
  8787 00002E1D B80102              <1>         mov ax, (INT13H_READ << 8 ) | 0x01           ; read the first sector
  8788 00002E20 E83D09              <1>         call disk_access                             ; into buffer
  8789 00002E23 5F                  <1>         pop di
  8790 00002E24 0F828600            <1>         jmpc .end
  8791                              <1>         
  8792 00002E28 81BCFE0155AA        <1>         cmp word [si + 510], 0AA55h    ; check if the partition
  8793 00002E2E 0F857C00            <1>         jmpne .end                                   ; table is good
  8794                              <1>         
  8795 00002E32 81C6BE01            <1>         add si, 1BEh                         ; point to partition table
  8796                              <1>         
  8797 00002E36 30C0                <1>         xor al, al
  8798                              <1> 
  8799                              <1> .loop_search_part:
  8800 00002E38 FEC0                <1>         inc al
  8801                              <1> 
  8802 00002E3A 6609DB              <1>         or ebx, ebx                                  ; check if it's primary
  8803 00002E3D 7508                <1>         jnz .logical_part
  8804                              <1>         
  8805 00002E3F 88C6                <1>         mov dh, al                                   ;
  8806 00002E41 8836[F455]          <1>         mov [knl_tmp.part_id], dh                        ;
  8807 00002E45 EB04                <1>         jmp short .cont_fill_it                      ; get the partition id
  8808                              <1>                                                      ;
  8809                              <1> .logical_part:                                       ;
  8810 00002E47 8A36[F455]          <1>         mov dh, [knl_tmp.part_id]                        ;
  8811                              <1>         
  8812                              <1> .cont_fill_it:
  8813 00002E4B E818FD              <1>         call fill_bootrecord                         ; fill the boot record
  8814 00002E4E 87F7                <1>         xchg si, di
  8815 00002E50 E841FE              <1>         call check_bootrecord                        ; check if it's valid
  8816 00002E53 87F7                <1>         xchg si, di
  8817 00002E55 7211                <1>         jc .cont_search_part
  8818                              <1> 
  8819                              <1> ; find a valid boot record!
  8820                              <1> 
  8821 00002E57 FE06[F255]          <1>         inc byte [knl_tmp.good_record_num]
  8822 00002E5B 8A26[F255]          <1>         mov ah, [knl_tmp.good_record_num]                ; check if there are any
  8823 00002E5F 3A26[F355]          <1>         cmp ah, [knl_tmp.max_record_num]                 ; more space.
  8824 00002E63 7349                <1>         jae .end
  8825                              <1> 
  8826 00002E65 83C740              <1>         add di, SIZE_OF_BOOTRECORD                   ; move the pointer to
  8827                              <1> 
  8828                              <1> .cont_search_part:
  8829 00002E68 83C610              <1>         add si, SIZE_OF_PARTITION
  8830 00002E6B 3C04                <1>         cmp al, 4
  8831 00002E6D 72C9                <1>         jb .loop_search_part
  8832                              <1>         
  8833 00002E6F 83EE40              <1>         sub si, SIZE_OF_PARTITION * 4
  8834                              <1>         
  8835                              <1> ;now go ahead to search logical partitons
  8836 00002E72 30E4                <1>         xor ah, ah
  8837                              <1> 
  8838                              <1> .loop_search_ext:
  8839 00002E74 FEC4                <1>         inc ah
  8840 00002E76 8A4404              <1>         mov al, [si + struc_partition.type]
  8841                              <1>         
  8842 00002E79 3C05                <1>         cmp al, 0x05                                 ; check if it's
  8843 00002E7B 7412                <1>         je .found_ext                                ; extended
  8844 00002E7D 3C0F                <1>         cmp al, 0x0F                                 ; partition
  8845 00002E7F 740E                <1>         je .found_ext                                ;
  8846 00002E81 3C85                <1>         cmp al, 0x85                                 ;
  8847 00002E83 740A                <1>         je .found_ext                                ;
  8848                              <1> 
  8849 00002E85 83C610              <1>         add si, SIZE_OF_PARTITION
  8850 00002E88 80FC04              <1>         cmp ah, 4
  8851 00002E8B 72E7                <1>         jb .loop_search_ext
  8852 00002E8D EB1F                <1>         jmp short .end
  8853                              <1> 
  8854                              <1> ;there are some extended partitions, find inside it!
  8855                              <1> .found_ext:
  8856 00002E8F FE06[F455]          <1>         inc byte [knl_tmp.part_id]                       ; increase the partition id.
  8857 00002E93 668B4C08            <1> 	mov ecx, [si + struc_partition.relative_addr]
  8858                              <1> 
  8859 00002E97 6609DB              <1>         or ebx, ebx                                  ; all of the later logical
  8860 00002E9A 7407                <1>         jz .first_ext                                ; extended partitions' relative
  8861 00002E9C 668B1E[F555]        <1>         mov ebx, [knl_tmp.logi_father]                   ; address are based on the
  8862 00002EA1 EB05                <1>         jmp short .calc_next_father                  ; first primary extended
  8863                              <1>                                                      ; partition
  8864                              <1> .first_ext:
  8865 00002EA3 66890E[F555]        <1>         mov [knl_tmp.logi_father], ecx
  8866                              <1> 
  8867                              <1> .calc_next_father:
  8868 00002EA8 6601CB              <1>         add ebx, ecx                                 ; calculate the next
  8869                              <1>                                                      ; father's abs
  8870                              <1>                                                      ; address
  8871                              <1>         
  8872 00002EAB E968FF              <1>         jmp .search_partitions                       ; continue search
  8873                              <1> 
  8874                              <1> .end:
  8875 00002EAE 61                  <1>         popa
  8876 00002EAF 8A2E[F255]          <1>         mov ch, [knl_tmp.good_record_num]
  8877 00002EB3 C3                  <1>         ret
  8878                              <1>         
  8879                              <1> ;==============================================================================
  8880                              <1> ;search_specials ---- search all special boot records
  8881                              <1> ;input:
  8882                              <1> ;      cl = max number of boot records could be searched
  8883                              <1> ;      es:di -> buffer to store boot records
  8884                              <1> ;output:
  8885                              <1> ;      ch = number of the valid boot records have searched
  8886                              <1> ;==============================================================================
  8887                              <1> search_specials:
  8888 00002EB4 50                  <1> 	push ax
  8889 00002EB5 52                  <1> 	push dx
  8890 00002EB6 56                  <1> 	push si
  8891                              <1> 
  8892 00002EB7 88CC                <1> 	mov ah, cl
  8893 00002EB9 80FC04              <1> 	cmp ah, NUM_OF_SPREC
  8894 00002EBC 7202                <1> 	jb .do_search
  8895 00002EBE B404                <1> 	mov ah, NUM_OF_SPREC
  8896                              <1> 
  8897                              <1> .do_search:
  8898 00002EC0 30ED                <1> 	xor ch, ch
  8899 00002EC2 30C0                <1> 	xor al, al
  8900 00002EC4 08E4                <1> 	or ah, ah
  8901 00002EC6 7415                <1> 	jz .end
  8902                              <1> 
  8903                              <1> .loop_search:
  8904 00002EC8 E875FD              <1> 	call fill_special_record
  8905 00002ECB 89FE                <1> 	mov si, di
  8906 00002ECD E8C4FD              <1> 	call check_bootrecord
  8907 00002ED0 7205                <1> 	jc .search_next
  8908 00002ED2 83C740              <1> 	add di, SIZE_OF_BOOTRECORD
  8909 00002ED5 FEC5                <1> 	inc ch
  8910                              <1> .search_next:
  8911 00002ED7 FEC0                <1> 	inc al
  8912 00002ED9 38E0                <1> 	cmp al, ah
  8913 00002EDB 72EB                <1> 	jb .loop_search
  8914                              <1> .end:
  8915 00002EDD 5E                  <1> 	pop si
  8916 00002EDE 5A                  <1> 	pop dx
  8917 00002EDF 58                  <1> 	pop ax
  8918 00002EE0 C3                  <1> 	ret
  8919                              <1> 
  8920                              <1> ;==============================================================================
  8921                              <1> ;search_records ---- search all boot records
  8922                              <1> ;input:
  8923                              <1> ;      al = 0 all records, al = 1 only partitions
  8924                              <1> ;      cl = max number of boot records could be searched
  8925                              <1> ;      es:di -> buffer to store boot records
  8926                              <1> ;output:
  8927                              <1> ;      ch = number of the valid boot records have searched
  8928                              <1> ;==============================================================================
  8929                              <1> search_records:
  8930 00002EE1 57                  <1> 	push di
  8931 00002EE2 52                  <1> 	push dx
  8932 00002EE3 53                  <1> 	push bx
  8933 00002EE4 50                  <1> 	push ax
  8934                              <1> 
  8935 00002EE5 31D2                <1>         xor dx, dx
  8936                              <1> 
  8937 00002EE7 08C0                <1> 	or al, al
  8938 00002EE9 7516                <1> 	jnz .search_parts
  8939                              <1> 
  8940 00002EEB E8C6FF              <1> 	call search_specials
  8941 00002EEE 28E9                <1> 	sub cl, ch
  8942 00002EF0 88EE                <1> 	mov dh, ch
  8943                              <1> 
  8944 00002EF2 B340                <1>         mov bl, SIZE_OF_BOOTRECORD
  8945                              <1> 
  8946 00002EF4 E8A1FE              <1>         call search_drv_records
  8947 00002EF7 28E9                <1>         sub cl, ch
  8948 00002EF9 88E8                <1>         mov al, ch
  8949 00002EFB 00EE                <1> 	add dh, ch
  8950 00002EFD F6E3                <1>         mul bl
  8951 00002EFF 01C7                <1>         add di, ax
  8952                              <1> 
  8953                              <1> .search_parts:
  8954 00002F01 E80700              <1> 	call search_all_partitions
  8955 00002F04 00F5                <1> 	add ch, dh
  8956 00002F06 58                  <1> 	pop ax
  8957 00002F07 5B                  <1> 	pop bx
  8958 00002F08 5A                  <1> 	pop dx
  8959 00002F09 5F                  <1> 	pop di
  8960 00002F0A C3                  <1> 	ret
  8961                              <1> 
  8962                              <1> ;==============================================================================
  8963                              <1> ;search_all_partitions ---- search all partitions in all drives
  8964                              <1> ;input:
  8965                              <1> ;      cl = max number of boot records could be searched
  8966                              <1> ;      dl = lowest drive id to be searched
  8967                              <1> ;      es:di -> buffer to store boot records
  8968                              <1> ;output:
  8969                              <1> ;      ch = number of the valid boot records have searched
  8970                              <1> ;==============================================================================
  8971                              <1> search_all_partitions:
  8972 00002F0B 50                  <1>         push ax
  8973 00002F0C 52                  <1> 	push dx
  8974 00002F0D 30F6                <1> 	xor dh, dh
  8975 00002F0F B340                <1>         mov bl, SIZE_OF_BOOTRECORD
  8976                              <1> 
  8977                              <1> .loop_search:
  8978 00002F11 E8DAFE              <1>         call search_part_records
  8979 00002F14 28E9                <1>         sub cl, ch
  8980 00002F16 00EE                <1>         add dh, ch                                   ; count the searched boot
  8981                              <1>                                                      ; records
  8982 00002F18 88E8                <1>         mov al, ch                                   ;
  8983 00002F1A F6E3                <1>         mul bl                                       ; adjust the pointer (di)
  8984 00002F1C 01C7                <1>         add di, ax                                   ;
  8985 00002F1E FEC2                <1>         inc dl
  8986 00002F20 08D2                <1>         or dl, dl
  8987 00002F22 75ED                <1>         jnz .loop_search
  8988 00002F24 88F5                <1>         mov ch, dh
  8989 00002F26 5A                  <1> 	pop dx
  8990 00002F27 58                  <1>         pop ax
  8991 00002F28 C3                  <1>         ret
  8992                              <1> 
  8993                              <1> 
  8994                              <1> ;==============================================================================
  8995                              <1> ;get_record_typestr ---- get a record's type string
  8996                              <1> ;input:
  8997                              <1> ;      ds:si -> the record
  8998                              <1> ;      es:di -> the buffer to store the type string
  8999                              <1> ;output:
  9000                              <1> ;      none
  9001                              <1> ;==============================================================================
  9002                              <1> get_record_typestr:
  9003 00002F29 60                  <1>         pusha
  9004 00002F2A 8B04                <1>         mov ax, [si + struc_bootrecord.flags]
  9005 00002F2C 8A5C04              <1>         mov bl, [si + struc_bootrecord.type]
  9006 00002F2F 8B5402              <1>         mov dx, [si + struc_bootrecord.drive_id]
  9007                              <1> 
  9008 00002F32 A90800              <1> 	test ax, INFOFLAG_ISSPECIAL
  9009 00002F35 751A                <1> 	jnz .special
  9010                              <1> 
  9011 00002F37 A98000              <1>         test ax, INFOFLAG_ISDRIVER
  9012 00002F3A 7430                <1>         jz .partition
  9013                              <1> 
  9014 00002F3C A90400              <1>         test ax, DRVFLAG_REMOVABLE
  9015 00002F3F 741C                <1>         jz .harddisk
  9016                              <1> 
  9017 00002F41 F6C280              <1>         test dl, 0x80
  9018 00002F44 741D                <1>         jz .floppy
  9019                              <1> 
  9020 00002F46 A91000              <1> 	test ax, DRVFLAG_ISCDROM
  9021 00002F49 740C                <1> 	jz .removable
  9022                              <1> 
  9023 00002F4B 8D36[5934]          <1> 	lea si, [knl_strings.cdrom]
  9024 00002F4F EB16                <1> 	jmp short .filldrv
  9025                              <1> 
  9026                              <1> .special:
  9027 00002F51 8D36[6034]          <1> 	lea si, [knl_strings.special]
  9028 00002F55 EB10                <1> 	jmp short .filldrv
  9029                              <1> 
  9030                              <1> .removable:
  9031 00002F57 8D36[4634]          <1>         lea si, [knl_strings.removable]
  9032 00002F5B EB0A                <1>         jmp short .filldrv
  9033                              <1> 
  9034                              <1> .harddisk:
  9035 00002F5D 8D36[5034]          <1>         lea si, [knl_strings.harddisk]
  9036 00002F61 EB04                <1>         jmp short .filldrv
  9037                              <1> 
  9038                              <1> .floppy:
  9039 00002F63 8D36[2F34]          <1>         lea si, [knl_strings.floppy]
  9040                              <1> 
  9041                              <1> .filldrv:
  9042 00002F67 E82EF8              <1>         call strcpy
  9043 00002F6A EB27                <1>         jmp short .end
  9044                              <1> 
  9045                              <1> .partition:
  9046 00002F6C A90001              <1>         test ax, INFOFLAG_LOGICAL
  9047 00002F6F 7406                <1>         jz short .primary
  9048                              <1> 
  9049 00002F71 8D36[3E34]          <1>         lea si, [knl_strings.logical]
  9050 00002F75 EB04                <1>         jmp short .fillpart
  9051                              <1> 
  9052                              <1> .primary:
  9053 00002F77 8D36[3634]          <1>         lea si, [knl_strings.primary]
  9054                              <1> 
  9055                              <1> .fillpart:
  9056 00002F7B E81AF8              <1>         call strcpy
  9057                              <1> 
  9058 00002F7E C7052028            <1>         mov word [di], ' ('
  9059 00002F82 47                  <1>         inc di
  9060 00002F83 47                  <1>         inc di
  9061                              <1> 
  9062 00002F84 88D8                <1>         mov al, bl
  9063 00002F86 E8F3FC              <1>         call get_parttype_str
  9064 00002F89 E80CF8              <1>         call strcpy
  9065 00002F8C C60529              <1>         mov byte [di], ')'
  9066 00002F8F 47                  <1>         inc di
  9067 00002F90 30C0                <1>         xor al, al
  9068 00002F92 AA                  <1>         stosb
  9069                              <1> 
  9070                              <1> .end:
  9071 00002F93 61                  <1>         popa
  9072 00002F94 C3                  <1>         ret
  9073                              <1> 
  9074                              <1> ;==============================================================================
  9075                              <1> ;get_record_string ---- get a record's string
  9076                              <1> ;input:
  9077                              <1> ;      ds:si -> the record
  9078                              <1> ;      es:di -> buffer to store the string
  9079                              <1> ;      al =1    don't draw flags
  9080                              <1> ;      al =2    don't draw flags and number
  9081                              <1> ;      al =3    don't draw flags and type
  9082                              <1> ;
  9083                              <1> ;output:
  9084                              <1> ;      none
  9085                              <1> ;
  9086                              <1> ;notes:
  9087                              <1> ; the string layout is:
  9088                              <1> ; pSkXaAhHlD  128 01  (Type )  Partition Name.
  9089                              <1> ; where :
  9090                              <1> ; p  is password flag, means have password.
  9091                              <1> ; S  is schedule flag, means have boot schedule set.
  9092                              <1> ; k  is keystrokes flag, means have keystrokes set.
  9093                              <1> ; X  is swap driver id flag, means the driver id will be swap to the bootable
  9094                              <1> ;    id when boot this record.
  9095                              <1> ; aA is active flags, a means auto active, A means active
  9096                              <1> ; hH is hidden flags, h means auto hide, H means hidden
  9097                              <1> ; lD is other flags, L means it's Logical Partition, D means it's Disk Driver 
  9098                              <1> ; 128 is the drive id
  9099                              <1> ; 01 is the partition id
  9100                              <1> ; (Type ) is the type of this partition, 7 bytes
  9101                              <1> ; Partition Name is the name of this partition, 15 bytes
  9102                              <1> ;==============================================================================
  9103                              <1> get_record_string:
  9104 00002F95 60                  <1>         pusha
  9105 00002F96 FC                  <1>         cld
  9106                              <1> 
  9107 00002F97 668B4C0E            <1>         mov ecx, [si + struc_bootrecord.password]
  9108 00002F9B 8B1C                <1>         mov bx, [si + struc_bootrecord.flags]
  9109                              <1> 
  9110 00002F9D 88C4                <1> 	mov ah, al
  9111                              <1> 
  9112 00002F9F B020                <1> 	mov al, ' '
  9113 00002FA1 AA                  <1> 	stosb
  9114                              <1> 
  9115 00002FA2 08E4                <1>         or ah, ah
  9116 00002FA4 752C                <1>         jnz .no_flags
  9117 00002FA6 50                  <1> 	push ax
  9118                              <1> 
  9119                              <1> ;show flags
  9120                              <1> 
  9121 00002FA7 B02D                <1>         mov al, '-'
  9122                              <1> 
  9123 00002FA9 50                  <1>         push ax
  9124 00002FAA 6609C9              <1>         or ecx, ecx                                 ; check if has password.
  9125 00002FAD 7402                <1>         jz .no_password
  9126 00002FAF B070                <1>         mov al, 'p'                                 ; has password, draw a 'p'.
  9127                              <1> .no_password:
  9128 00002FB1 AA                  <1>         stosb
  9129 00002FB2 58                  <1>         pop ax
  9130                              <1> 
  9131 00002FB3 56                  <1>         push si
  9132 00002FB4 BA0080              <1>         mov dx, INFOFLAG_SCHEDULED
  9133 00002FB7 B90900              <1>         mov cx, NUM_OF_INFOFLAGS
  9134 00002FBA 8D36[2534]          <1>         lea si, [infoflag_chars]
  9135                              <1> 
  9136                              <1> .loop_show_flags:
  9137 00002FBE 50                  <1>         push ax
  9138 00002FBF 85D3                <1>         test bx, dx
  9139 00002FC1 7402                <1>         jz .no_thisflag
  9140 00002FC3 8A04                <1>         mov al, [si]
  9141                              <1> .no_thisflag:
  9142 00002FC5 AA                  <1>         stosb
  9143 00002FC6 58                  <1>         pop ax
  9144 00002FC7 46                  <1>         inc si
  9145 00002FC8 D1EA                <1>         shr dx, 1
  9146 00002FCA E2F2                <1>         loop .loop_show_flags
  9147 00002FCC 5E                  <1>         pop si
  9148                              <1> 
  9149 00002FCD B020                <1>         mov al, ' '
  9150 00002FCF AA                  <1>         stosb
  9151 00002FD0 AA                  <1>         stosb
  9152                              <1> 
  9153 00002FD1 58                  <1> 	pop ax
  9154                              <1> 
  9155                              <1> .no_flags:
  9156 00002FD2 80FC01              <1> 	cmp ah, 1
  9157 00002FD5 7728                <1> 	ja .no_number
  9158                              <1> 
  9159 00002FD7 50                  <1> 	push ax
  9160                              <1> 
  9161 00002FD8 8B5402              <1>         mov dx, [si + struc_bootrecord.drive_id]
  9162 00002FDB F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  9163 00002FDF 740A                <1> 	jz .get_drvid
  9164                              <1> 
  9165 00002FE1 56                  <1> 	push si
  9166 00002FE2 BE[9334]            <1> 	mov si, knl_strings.invalid_id
  9167 00002FE5 E8B0F7              <1> 	call strcpy
  9168 00002FE8 5E                  <1> 	pop si
  9169                              <1> 
  9170 00002FE9 EB0F                <1> 	jmp short .draw_type
  9171                              <1> 
  9172                              <1> .get_drvid:
  9173 00002FEB E8BB07              <1> 	call get_drvid_str
  9174                              <1> 
  9175 00002FEE 88F0                <1>         mov al, dh                                  ; fill partition id
  9176 00002FF0 30E4                <1> 	xor ah, ah
  9177 00002FF2 B103                <1>         mov cl, 3                                   ;
  9178 00002FF4 E8FAF6              <1>         call itoa                                   ;
  9179                              <1> 
  9180 00002FF7 83C703              <1>         add di, 3
  9181                              <1> 
  9182                              <1> .draw_type:
  9183 00002FFA B020                <1>         mov al, ' '
  9184 00002FFC AA                  <1>         stosb
  9185 00002FFD AA                  <1>         stosb
  9186                              <1> 
  9187 00002FFE 58                  <1> 	pop ax
  9188                              <1> 
  9189                              <1> .no_number:
  9190 00002FFF 80FC02              <1> 	cmp ah, 2
  9191 00003002 771A                <1> 	ja .no_type
  9192                              <1> 
  9193 00003004 56                  <1>         push si                                     ; save the boot record pointer
  9194                              <1> 
  9195 00003005 30C0                <1> 	xor al, al
  9196 00003007 F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  9197 0000300B 7503                <1> 	jnz .is_special
  9198 0000300D 8A4404              <1>         mov al, [si + struc_bootrecord.type]
  9199                              <1> .is_special:
  9200                              <1> 
  9201 00003010 E869FC              <1>         call get_parttype_str
  9202 00003013 B90800              <1>         mov  cx, 8
  9203 00003016 E865F7              <1>         call strncpy
  9204 00003019 5E                  <1>         pop si
  9205                              <1>         
  9206 0000301A B020                <1>         mov al, ' '
  9207 0000301C AA                  <1>         stosb
  9208 0000301D AA                  <1>         stosb
  9209                              <1> 
  9210                              <1> .no_type:
  9211 0000301E 83C616              <1>         add si, struc_bootrecord.name
  9212 00003021 B90F00              <1>         mov cx, 15
  9213 00003024 51                  <1> 	push cx
  9214 00003025 E856F7              <1>         call strncpy                                ; fill record name
  9215 00003028 89C8                <1> 	mov ax, cx
  9216 0000302A 59                  <1> 	pop cx
  9217 0000302B 29C1                <1> 	sub cx, ax
  9218 0000302D B020                <1> 	mov al, ' '
  9219 0000302F F3AA                <1> 	rep stosb
  9220 00003031 30C0                <1> 	xor al, al
  9221 00003033 AA                  <1> 	stosb
  9222 00003034 61                  <1>         popa
  9223 00003035 C3                  <1>         ret
  9224                              <1> 
  9225                              <1> ;==============================================================================
  9226                              <1> ;mark_record_active ---- mark the boot record active.
  9227                              <1> ;input:
  9228                              <1> ;      ds:si -> the record
  9229                              <1> ;output:
  9230                              <1> ;      cf = 0 success
  9231                              <1> ;      cf = 1 failed, ax = 0 cannot mark active, otherwise disk error occured.
  9232                              <1> ;==============================================================================
  9233                              <1> mark_record_active:
  9234 00003036 60                  <1>         pusha
  9235 00003037 E8C303              <1>         call check_allow_act
  9236 0000303A 725D                <1>         jc .cannot_active
  9237                              <1>         
  9238 0000303C B80102              <1>         mov ax, (INT13H_READ << 8 ) | 0x01                  ; read father's
  9239 0000303F 668B5C06            <1>         mov ebx, [si + struc_bootrecord.father_abs_addr]    ; partition table.
  9240 00003043 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]            ;
  9241                              <1>                                                             ;
  9242 00003046 8D3E[0D56]          <1>         lea di, [knl_tmp.disk_buf1]                                  ;
  9243 0000304A E81307              <1>         call disk_access                                    ;
  9244 0000304D 724F                <1>         jc .disk_error                                      ;
  9245                              <1> 
  9246 0000304F 52                  <1>         push dx
  9247 00003050 6653                <1>         push ebx
  9248 00003052 57                  <1>         push di
  9249                              <1>         
  9250 00003053 81C7BE01            <1>         add di, 1BEh
  9251                              <1> 
  9252 00003057 668B4C0A            <1>         mov ecx, [si + struc_bootrecord.abs_addr]    ; abs addr -> ecx
  9253                              <1> 
  9254 0000305B 6629D9              <1>         sub ecx, ebx                                 ; relative addr -> ebx
  9255 0000305E 6689CB              <1> 	mov ebx, ecx
  9256 00003061 B90400              <1>         mov cx, 4
  9257                              <1> 
  9258 00003064 F7040020            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_SWAPDRVID  ; check if need swap id
  9259 00003068 7403                <1>         jz .no_swapid
  9260                              <1> 
  9261 0000306A 80E2F0              <1>         and dl, 0xF0                                 ; use 0x80 as active flag if swap id is on.
  9262                              <1> .no_swapid:
  9263                              <1> 
  9264 0000306D 30E4                <1>         xor ah, ah
  9265                              <1> .search_in_father:                                   ;
  9266 0000306F 30C0                <1>         xor al, al                                   ;
  9267 00003071 66395D08            <1>         cmp [di + struc_partition.relative_addr], ebx; find the record in
  9268 00003075 7504                <1>         jne .not_it                                  ; father's partition
  9269 00003077 88D0                <1>         mov al, dl                                   ; table
  9270 00003079 FEC4                <1>         inc ah                                       ;
  9271                              <1> .not_it:                                             ;
  9272 0000307B 8805                <1>         mov byte [di  + struc_partition.state], al   ;
  9273 0000307D 83C710              <1>         add di, SIZE_OF_PARTITION                    ;
  9274 00003080 E2ED                <1>         loop .search_in_father                       ;
  9275                              <1> 
  9276 00003082 5F                  <1>         pop di                                       ;
  9277 00003083 665B                <1>         pop ebx                                       ;
  9278 00003085 5A                  <1>         pop dx
  9279                              <1> 
  9280 00003086 08E4                <1>         or ah, ah
  9281 00003088 740F                <1>         jz .cannot_active                            ; can not found the partition record
  9282                              <1>         
  9283 0000308A B80103              <1>         mov ax , (INT13H_WRITE << 8 ) | 0x01         ; write the partition
  9284 0000308D E8D006              <1>         call disk_access                             ; table back.
  9285 00003090 720C                <1>         jc .disk_error
  9286                              <1> 
  9287 00003092 810C0008            <1>         or word [si + struc_bootrecord.flags], INFOFLAG_ACTIVE ; set active flag
  9288 00003096 61                  <1>         popa
  9289 00003097 F8                  <1>         clc
  9290 00003098 C3                  <1>         ret
  9291                              <1>         
  9292                              <1> .cannot_active:
  9293 00003099 61                  <1>         popa
  9294 0000309A 31C0                <1>         xor ax, ax
  9295 0000309C F9                  <1>         stc
  9296 0000309D C3                  <1>         ret
  9297                              <1> .disk_error:
  9298 0000309E 61                  <1>         popa
  9299 0000309F C3                  <1>         ret
  9300                              <1> 
  9301                              <1> 
  9302                              <1> 
  9303                              <1> ;==============================================================================
  9304                              <1> ;toggle_record_hidden ---- toggle a boot record's hidden attribute
  9305                              <1> ;input:
  9306                              <1> ;      ds:si -> the record
  9307                              <1> ;output:
  9308                              <1> ;      cf = 0 success
  9309                              <1> ;      cf = 1 failed, ax = 0 cannot hide, otherwise disk error occured.
  9310                              <1> ;==============================================================================
  9311                              <1> toggle_record_hidden:
  9312 000030A0 60                  <1>         pusha
  9313                              <1>         
  9314 000030A1 E83603              <1>         call check_allow_hide
  9315 000030A4 725F                <1>         jc .cannot_hide
  9316                              <1>         
  9317 000030A6 B80102              <1>         mov ax, (INT13H_READ << 8 ) | 0x01                  ; read father's
  9318 000030A9 668B5C06            <1>         mov ebx, [si + struc_bootrecord.father_abs_addr]    ; partition table.
  9319 000030AD 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]            ;
  9320                              <1>                                                             ;
  9321 000030B0 8D3E[0D56]          <1>         lea di, [knl_tmp.disk_buf1]                                  ;
  9322 000030B4 E8A906              <1>         call disk_access                                    ;
  9323 000030B7 7251                <1>         jc .disk_error                                      ;
  9324                              <1> 
  9325 000030B9 6653                <1>         push ebx
  9326 000030BB 57                  <1>         push di
  9327                              <1>         
  9328 000030BC 81C7BE01            <1>         add di, 1BEh
  9329                              <1> 
  9330 000030C0 668B4C0A            <1>         mov ecx, [si + struc_bootrecord.abs_addr]    ; abs addr -> ebx
  9331                              <1> 
  9332 000030C4 6629D9              <1>         sub ecx, ebx                                 ; relative addr -> ebx
  9333 000030C7 6689CB              <1> 	mov ebx, ecx
  9334                              <1> 
  9335 000030CA B90400              <1>         mov cx, 4
  9336                              <1> 
  9337 000030CD 8B04                <1>         mov ax, [si + struc_bootrecord.flags]        ; get flags and type
  9338 000030CF 8A7404              <1>         mov dh, [si + struc_bootrecord.type]
  9339 000030D2 80E60F              <1>         and dh, 0x0F
  9340 000030D5 A90002              <1>         test ax, INFOFLAG_HIDDEN
  9341 000030D8 7503                <1>         jnz .unhide_it
  9342 000030DA 80CE10              <1>         or dh, 0x10                                  ; hide the partition
  9343                              <1> 
  9344                              <1> .unhide_it:
  9345 000030DD 30C0                <1>         xor al, al
  9346                              <1>         
  9347                              <1> .search_in_father:                                   ;
  9348 000030DF 66395D08            <1>         cmp [di + struc_partition.relative_addr], ebx; find the record in
  9349 000030E3 7505                <1>         jne .not_it                                  ; father's partition
  9350 000030E5 FEC0                <1>         inc al
  9351 000030E7 887504              <1>         mov byte [di  + struc_partition.type], dh    ; set partition type.
  9352                              <1> .not_it:                                             ;
  9353 000030EA 83C710              <1>         add di, SIZE_OF_PARTITION                    ;
  9354 000030ED E2F0                <1>         loop .search_in_father                       ;
  9355                              <1> 
  9356 000030EF 5F                  <1>         pop di                                       ;
  9357 000030F0 665B                <1>         pop ebx                                      ;
  9358                              <1> 
  9359 000030F2 08C0                <1>         or al, al
  9360 000030F4 740F                <1>         jz .cannot_hide                              ; can not found the partition record
  9361                              <1>         
  9362 000030F6 B80103              <1>         mov ax , (INT13H_WRITE << 8 ) | 0x01         ; write the partition
  9363 000030F9 E86406              <1>         call disk_access                             ; table back.
  9364 000030FC 720C                <1>         jc .disk_error
  9365                              <1> 
  9366 000030FE 81340002            <1>         xor word [si + struc_bootrecord.flags], INFOFLAG_HIDDEN ; toggle hidden flag.
  9367 00003102 61                  <1>         popa
  9368 00003103 F8                  <1>         clc
  9369 00003104 C3                  <1>         ret
  9370                              <1>         
  9371                              <1> .cannot_hide:
  9372 00003105 61                  <1>         popa
  9373 00003106 31C0                <1>         xor ax, ax
  9374 00003108 F9                  <1>         stc
  9375 00003109 C3                  <1>         ret
  9376                              <1> .disk_error:
  9377 0000310A 61                  <1>         popa
  9378 0000310B C3                  <1>         ret
  9379                              <1> 
  9380                              <1> ;==============================================================================
  9381                              <1> ;set_record_schedule ---- set the record's schedule time
  9382                              <1> ;input:
  9383                              <1> ;      ds:si -> the record
  9384                              <1> ;      ax = begin time (in minutes)
  9385                              <1> ;      bx = end time (in minutes)
  9386                              <1> ;      dx = week info (bit 0 to bit 6 indicate Mon to Sun, zero means all days)
  9387                              <1> ;output:
  9388                              <1> ;      none
  9389                              <1> ;==============================================================================
  9390                              <1> set_record_schedule:
  9391 0000310C 60                  <1>        pusha
  9392 0000310D 09C0                <1>        or ax, ax
  9393 0000310F 750E                <1>        jnz .timeok
  9394 00003111 09DB                <1>        or bx, bx
  9395 00003113 750A                <1>        jnz .timeok
  9396 00003115 09D2                <1>        or dx, dx
  9397 00003117 7506                <1>        jnz .timeok
  9398                              <1> 
  9399 00003119 8124FF7F            <1>        and word [si + struc_bootrecord.flags], ~ INFOFLAG_SCHEDULED
  9400 0000311D 61                  <1>        popa
  9401 0000311E C3                  <1>        ret
  9402                              <1> 
  9403                              <1> .timeok:
  9404 0000311F 6681E3FF0F0000      <1>        and ebx, 0x00000fff
  9405 00003126 6625FF0F0000        <1>        and eax, 0x00000fff
  9406 0000312C 66C1E30C            <1>        shl ebx, 12
  9407 00003130 6609D8              <1>        or  eax, ebx
  9408 00003133 6681E2FF000000      <1>        and edx, 0x000000ff
  9409 0000313A 66C1E218            <1>        shl edx, 24
  9410 0000313E 6609D0              <1>        or  eax, edx
  9411                              <1> 
  9412 00003141 66894412            <1>        mov [si + struc_bootrecord.schedule_time], eax
  9413 00003145 810C0080            <1>        or word [si + struc_bootrecord.flags], INFOFLAG_SCHEDULED
  9414                              <1> 
  9415 00003149 61                  <1>        popa
  9416 0000314A C3                  <1>        ret
  9417                              <1> 
  9418                              <1> ;==============================================================================
  9419                              <1> ;get_record_schedule ---- set the record's schedule time
  9420                              <1> ;input:
  9421                              <1> ;      ds:si -> the record
  9422                              <1> ;output:
  9423                              <1> ;      ax = begin time (in minutes)
  9424                              <1> ;      bx = end time (in minutes)
  9425                              <1> ;      dx = week info (bit 0 to bit 6 indicate Mon to Sun, zero means all days)
  9426                              <1> ;==============================================================================
  9427                              <1> get_record_schedule:
  9428 0000314B 31C0                <1>        xor ax, ax
  9429 0000314D 31DB                <1>        xor bx, bx
  9430 0000314F 31D2                <1>        xor dx, dx
  9431                              <1> 
  9432 00003151 F7040080            <1>        test word [si + struc_bootrecord.flags], INFOFLAG_SCHEDULED
  9433 00003155 741D                <1>        jz .end
  9434                              <1> 
  9435 00003157 668B4412            <1>        mov eax, [si + struc_bootrecord.schedule_time]
  9436 0000315B 6689C3              <1>        mov ebx, eax
  9437 0000315E 6689C2              <1>        mov edx, eax
  9438                              <1> 
  9439 00003161 25FF0F              <1>        and ax, 0x0fff
  9440 00003164 66C1EB0C            <1>        shr ebx, 12
  9441 00003168 81E3FF0F            <1>        and bx, 0x0fff
  9442 0000316C 66C1EA18            <1>        shr edx, 24
  9443 00003170 81E2FF00            <1>        and dx, 0x00ff
  9444                              <1> 
  9445                              <1> .end:
  9446 00003174 C3                  <1>        ret
  9447                              <1> 
  9448                              <1> ;=============================================================================
  9449                              <1> ;schedule_to_str ---- convert schedule time to string
  9450                              <1> ;input:
  9451                              <1> ;       ax = start time
  9452                              <1> ;       bx = stop time
  9453                              <1> ;       dx = days info
  9454                              <1> ;       es:di -> buffer
  9455                              <1> ;output:
  9456                              <1> ;       none
  9457                              <1> ;=============================================================================
  9458                              <1> schedule_to_str:
  9459 00003175 60                  <1>         pusha
  9460 00003176 FC                  <1>         cld
  9461 00003177 E83700              <1>         call sch_time_to_str
  9462 0000317A 89FE                <1>         mov si, di
  9463 0000317C E8C0F5              <1>         call strlen
  9464 0000317F 01CF                <1>         add di, cx
  9465 00003181 B02D                <1>         mov al, '-'
  9466 00003183 AA                  <1>         stosb
  9467 00003184 89D8                <1>         mov ax, bx
  9468 00003186 E82800              <1>         call sch_time_to_str
  9469 00003189 89FE                <1>         mov si, di
  9470 0000318B E8B1F5              <1>         call strlen
  9471 0000318E 01CF                <1>         add di, cx
  9472 00003190 B03B                <1>         mov al, ';'
  9473 00003192 AA                  <1>         stosb
  9474 00003193 E80200              <1>         call sch_days_to_str
  9475 00003196 61                  <1>         popa
  9476 00003197 C3                  <1>         ret
  9477                              <1> 
  9478                              <1> ;=============================================================================
  9479                              <1> ;sch_days_to_str ---- convert days info string 0123456
  9480                              <1> ;input:
  9481                              <1> ;       dx = day bits
  9482                              <1> ;       es:di -> buffer
  9483                              <1> ;output:
  9484                              <1> ;       none
  9485                              <1> ;=============================================================================
  9486                              <1> sch_days_to_str:
  9487 00003198 60                  <1>         pusha
  9488 00003199 B90700              <1>         mov cx, 7
  9489 0000319C B030                <1>         mov al, '0'
  9490 0000319E BB0100              <1>         mov bx, 1
  9491                              <1> 
  9492                              <1> .loop_chk:
  9493 000031A1 85DA                <1>         test dx, bx
  9494 000031A3 7401                <1>         jz .nothisday
  9495 000031A5 AA                  <1>         stosb
  9496                              <1> .nothisday:
  9497 000031A6 D1E3                <1>         shl bx, 1
  9498 000031A8 FEC0                <1>         inc al
  9499 000031AA E2F5                <1>         loop .loop_chk
  9500                              <1> 
  9501 000031AC 30C0                <1>         xor al, al
  9502 000031AE AA                  <1>         stosb
  9503                              <1> 
  9504 000031AF 61                  <1>         popa
  9505 000031B0 C3                  <1>         ret
  9506                              <1> 
  9507                              <1> ;=============================================================================
  9508                              <1> ;sch_time_to_str ---- convert time in minute info string hh:mm
  9509                              <1> ;input:
  9510                              <1> ;       ax = time
  9511                              <1> ;       es:di -> buffer
  9512                              <1> ;output:
  9513                              <1> ;       none
  9514                              <1> ;=============================================================================
  9515                              <1> sch_time_to_str:
  9516 000031B1 60                  <1>         pusha
  9517                              <1> 
  9518 000031B2 B23C                <1>         mov dl, 60
  9519 000031B4 F6F2                <1>         div dl
  9520 000031B6 50                  <1>         push ax
  9521                              <1> 
  9522 000031B7 30E4                <1>         xor ah, ah
  9523 000031B9 3C0A                <1>         cmp al, 10
  9524 000031BB 7205                <1>         jb .hlten
  9525 000031BD B90200              <1>         mov cx, 2
  9526 000031C0 EB03                <1>         jmp short .showh
  9527                              <1> .hlten:
  9528 000031C2 B90100              <1>         mov cx,1
  9529                              <1> .showh:
  9530 000031C5 E829F5              <1>         call itoa
  9531                              <1> 
  9532 000031C8 B03A                <1>         mov al,':'
  9533 000031CA 01CF                <1>         add di, cx
  9534 000031CC AA                  <1>         stosb
  9535                              <1> 
  9536 000031CD 58                  <1>         pop ax
  9537 000031CE 0FB6C4              <1>         movzx ax, ah
  9538 000031D1 3C0A                <1>         cmp al, 10
  9539 000031D3 7205                <1>         jb .mlten
  9540 000031D5 B90200              <1>         mov cx, 2
  9541 000031D8 EB03                <1>         jmp short .showm
  9542                              <1> .mlten:
  9543 000031DA B90100              <1>         mov cx,1
  9544                              <1> .showm:
  9545 000031DD E811F5              <1>         call itoa
  9546                              <1> 
  9547 000031E0 61                  <1>         popa
  9548 000031E1 C3                  <1>         ret
  9549                              <1> 
  9550                              <1> ;==============================================================================
  9551                              <1> ;boot_normal_record ---- boot a normal record
  9552                              <1> ;input:
  9553                              <1> ;      ds:si -> the record
  9554                              <1> ;output:
  9555                              <1> ;      will not return when successfully boot.
  9556                              <1> ;      if return then al != 0 disk error; al = 0 no operation system.
  9557                              <1> ;==============================================================================
  9558                              <1> boot_normal_record:
  9559 000031E2 06                  <1>         push es
  9560                              <1> 
  9561 000031E3 8B1C                <1>         mov bx, [si + struc_bootrecord.flags]
  9562 000031E5 F7C30010            <1>         test bx, INFOFLAG_AUTOACTIVE
  9563 000031E9 7403                <1>         jz .no_need_act
  9564 000031EB E848FE              <1>         call mark_record_active             ; active the partition
  9565                              <1> 
  9566                              <1> .no_need_act:
  9567 000031EE F7C30002            <1>         test bx, INFOFLAG_HIDDEN
  9568 000031F2 7403                <1>         jz .not_hidden
  9569 000031F4 E8A9FE              <1>         call toggle_record_hidden           ; unhide the partition
  9570                              <1> 
  9571                              <1> .not_hidden:
  9572                              <1> 
  9573 000031F7 53                  <1>         push bx                             ; save the flags
  9574 000031F8 8D3E[0D56]          <1>         lea di, [knl_tmp.disk_buf1]         ; load boot sector into knl_tmp.disk_buf1.
  9575 000031FC B80102              <1>         mov ax, (INT13H_READ << 8 ) | 0x01
  9576 000031FF 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]
  9577 00003202 668B5C0A            <1>         mov ebx, [si + struc_bootrecord.abs_addr]
  9578                              <1> 
  9579 00003206 E85705              <1>         call disk_access                    ; read the first sector of the
  9580                              <1>                                             ; partition / floppy into
  9581                              <1>                                             ; memory.
  9582 00003209 5B                  <1>         pop bx
  9583 0000320A 0F829200            <1>         jmpc .disk_error
  9584                              <1> 
  9585 0000320E 81BDFE0155AA        <1>         cmp word [di + 510], 0AA55h
  9586 00003214 0F858600            <1>         jmpne .no_system
  9587                              <1> 
  9588 00003218 F7C38000            <1>         test bx, INFOFLAG_ISDRIVER          ; if it's driver, skip loading the
  9589                              <1>                                             ; partition table.
  9590 0000321C 7517                <1>         jnz .do_boot
  9591                              <1> 
  9592 0000321E 53                  <1>         push bx                             ; save the flags 
  9593 0000321F 8D3E[0D5E]          <1>         lea di, [knl_tmp.disk_buf2]    ; load part table into knl_tmp.disk_buf2
  9594                              <1> 
  9595 00003223 668B5C06            <1>         mov ebx, [si + struc_bootrecord.father_abs_addr]
  9596                              <1> 
  9597 00003227 E83605              <1>         call disk_access                    ; load part table into memory.
  9598 0000322A 5B                  <1>         pop bx
  9599 0000322B 7273                <1>         jc .disk_error
  9600                              <1> 
  9601 0000322D 81BDFE0155AA        <1>         cmp word [di + 510], 0AA55h
  9602 00003233 7569                <1>         jne .no_system                      ; bad partition table, treated as
  9603                              <1>                                             ; no operating system.
  9604                              <1> 
  9605                              <1> .do_boot:
  9606                              <1> %ifndef EMULATE_PROG
  9607                              <1> 
  9608 00003235 F7C30020            <1>         test bx, INFOFLAG_SWAPDRVID         ; check if need swap id
  9609 00003239 7413                <1>         jz .no_swapid
  9610                              <1> 
  9611                              <1> ;================ swap the driver id ========================================
  9612 0000323B 88D6                <1>         mov dh, dl
  9613 0000323D 80E680              <1>         and dh, 0x80                        ; set driver id to the bootable id
  9614                              <1> 
  9615 00003240 89D3                <1> 	mov bx, dx
  9616 00003242 86F2                <1> 	xchg dh, dl
  9617 00003244 89D1                <1> 	mov cx, dx
  9618                              <1> 
  9619 00003246 E8CF05              <1> 	call set_drive_map
  9620                              <1> 
  9621 00003249 885402              <1>         mov [si + struc_bootrecord.drive_id], dl  ; write new driver id back
  9622 0000324C EB03                <1> 	jmp short .swap_ok
  9623                              <1> 
  9624                              <1> .no_swapid:
  9625 0000324E E8AB05              <1> 	call uninstall_myint13h
  9626                              <1> 
  9627                              <1> .swap_ok:
  9628 00003251 E80901              <1>         call prepare_boot                   ; prepare to boot.
  9629 00003254 7248                <1>         jc .no_system                       ; preparation failed.
  9630                              <1>         
  9631                              <1> %endif
  9632 00003256 E8E000              <1>         call preload_keystrokes     ; preload the keystrokes into key buffer.
  9633 00003259 E89CE9              <1>         call reset_video_mode
  9634                              <1> 
  9635                              <1> %ifndef EMULATE_PROG
  9636                              <1> 
  9637 0000325C 56                  <1>         push si
  9638 0000325D FC                  <1>         cld
  9639                              <1> 
  9640 0000325E 31C0                <1>         xor ax, ax
  9641 00003260 50                  <1>         push ax
  9642 00003261 07                  <1>         pop es
  9643 00003262 B90002              <1>         mov cx, 512
  9644                              <1> 
  9645 00003265 F7048000            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_ISDRIVER
  9646                              <1>                                             ; if it's driver, no partition
  9647 00003269 750B                <1>         jnz .boot_driver                    ; table to load.
  9648                              <1>         
  9649 0000326B 8D36[0D5E]          <1>         lea si, [knl_tmp.disk_buf2]
  9650 0000326F BF0006              <1>         mov di, PART_OFF
  9651                              <1> 
  9652 00003272 51                  <1>         push cx
  9653 00003273 F3A4                <1>         rep movsb                           ; move mbr (partition table) to
  9654                              <1>                                             ; 0000:0600
  9655 00003275 59                  <1>         pop cx
  9656                              <1>         
  9657                              <1> .boot_driver:
  9658 00003276 8D36[0D56]          <1>         lea si, [knl_tmp.disk_buf1]
  9659 0000327A BF007C              <1>         mov di, 7C00h
  9660 0000327D F3A4                <1>         rep movsb                           ; move boot sector to 0000:7C00
  9661                              <1> 
  9662 0000327F 5E                  <1>         pop si
  9663                              <1> 
  9664 00003280 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id] ; drive id -> dl
  9665 00003283 30F6                <1>         xor dh, dh
  9666                              <1> 
  9667                              <1> ; boot code from lilo :-)
  9668                              <1> 
  9669 00003285 89DE                <1>         mov si, bx                          ; ds:si , es:di point to the
  9670 00003287 81C6BE07            <1>         add si, PART_OFF + 1BEh     ; partition record.
  9671 0000328B 56                  <1>         push si                             ;
  9672 0000328C 5F                  <1>         pop di                              ;
  9673                              <1> 
  9674 0000328D 50                  <1>         push ax                             ; ds = 0 ( es already set to 0 ).
  9675 0000328E 1F                  <1>         pop ds                              ;
  9676                              <1>         
  9677                              <1> %if 0
  9678                              <1>         xor bp, bp                          ; might help some boot problems
  9679                              <1>         mov ax, 0AA55h                ; boot signature (just in case ...)
  9680                              <1>         jmp 0:7C00h                         ; start boot sector
  9681                              <1> %else
  9682                              <1> ;boot code from the OS2 Boot Manager
  9683 0000328F BB007C              <1>         mov bx, 7C00h
  9684                              <1>     
  9685 00003292 8ED0                <1>         mov ss,ax                           ; on all processors since the 186
  9686 00003294 89DC                <1>         mov sp,bx                           ; these instructions are locked
  9687                              <1>     
  9688 00003296 89F5                <1>         mov bp, si
  9689 00003298 50                  <1>         push    ax
  9690 00003299 53                  <1>         push    bx
  9691 0000329A B855AA              <1>         mov ax, 0AA55h
  9692 0000329D CB                  <1>         retf                                ; start boot sector
  9693                              <1> %endif
  9694                              <1>         
  9695                              <1> %else
  9696                              <1> 	call uninstall_myint13h
  9697                              <1>         mov ax, 0x4c00                      ; return to dos.
  9698                              <1>         int 0x21                            ;
  9699                              <1> %endif
  9700                              <1> 
  9701                              <1> .no_system:
  9702 0000329E 30C0                <1>         xor al, al
  9703                              <1> .disk_error:
  9704 000032A0 07                  <1>         pop es
  9705 000032A1 C3                  <1>         ret
  9706                              <1> 
  9707                              <1> %ifndef DISABLE_CDBOOT
  9708                              <1> ;==============================================================================
  9709                              <1> ; boot_cdrom ---- boot cdrom driver
  9710                              <1> ; input: ds:di -> boot catalog
  9711                              <1> ;        dl = cdrom drvid
  9712                              <1> ;==============================================================================
  9713                              <1> boot_cdrom:
  9714 000032A2 8A4501              <1> 	mov al, [di+1]
  9715 000032A5 240F                <1> 	and al, 0x0f
  9716                              <1> 
  9717 000032A7 BE[FA55]            <1> 	mov si, knl_tmp.cdemu_spec
  9718 000032AA C60413              <1> 	mov byte [si], SIZE_OF_CDEMU_SPEC
  9719 000032AD 884401              <1> 	mov [si + struc_cdemu_spec.media_type], al
  9720                              <1> 
  9721 000032B0 30E4                <1> 	xor ah, ah
  9722 000032B2 08C0                <1> 	or al, al
  9723 000032B4 7502                <1> 	jnz .floppy_emu
  9724 000032B6 88D4                <1> 	mov ah, dl
  9725                              <1> .floppy_emu: 
  9726                              <1> 
  9727 000032B8 886402              <1> 	mov byte [si + struc_cdemu_spec.emu_drvid], ah
  9728 000032BB 668B5D08            <1> 	mov ebx, [di+0x08]
  9729 000032BF 66895C04            <1> 	mov [si + struc_cdemu_spec.image_lba], ebx
  9730 000032C3 8B5D02              <1> 	mov bx, [di+0x02]
  9731 000032C6 895C0C              <1> 	mov [si + struc_cdemu_spec.load_seg], bx
  9732 000032C9 8B5D06              <1> 	mov bx, [di+0x06]
  9733 000032CC 895C0E              <1> 	mov [si + struc_cdemu_spec.sect_count], bx
  9734 000032CF C6441050            <1> 	mov byte [si + struc_cdemu_spec.cylinders], 0x50
  9735 000032D3 C6441202            <1> 	mov byte [si + struc_cdemu_spec.heads], 2
  9736                              <1> 
  9737 000032D7 88C3                <1> 	mov bl, al
  9738 000032D9 30FF                <1> 	xor bh, bh
  9739 000032DB 8AA7[FD32]          <1> 	mov ah, [.sect_nums + bx]
  9740                              <1> 
  9741 000032DF 886411              <1> 	mov byte [si + struc_cdemu_spec.sectors], ah
  9742 000032E2 31C0                <1> 	xor ax, ax
  9743 000032E4 89440A              <1> 	mov [si + struc_cdemu_spec.user_bufseg], ax
  9744                              <1> 
  9745                              <1> ;Boot it!
  9746 000032E7 B8004A              <1> 	mov ax, 0x4a00
  9747 000032EA CD13                <1> 	int 0x13
  9748 000032EC 8826[F155]          <1> 	mov [hdio_tmp.disk_errno],ah
  9749 000032F0 720A                <1> 	jc .end
  9750                              <1> 
  9751                              <1> ;If the cd-rom is accessed via BIOS, then uninstall my int13h.
  9752 000032F2 E80705              <1> 	call uninstall_myint13h
  9753                              <1> 
  9754 000032F5 B8004C              <1> 	mov ax, 0x4c00
  9755 000032F8 CD13                <1> 	int 0x13
  9756 000032FA 31C0                <1> 	xor ax, ax
  9757                              <1> .end:
  9758 000032FC C3                  <1> 	ret
  9759                              <1> 
  9760 000032FD 000F1224            <1> .sect_nums  db  0, 0x0f, 0x12, 0x24
  9761                              <1> 
  9762                              <1> 
  9763                              <1> ;==============================================================================
  9764                              <1> ;find_cdboot_catalog ---- find boot catalog entry from buffer
  9765                              <1> ;input: ds:si -> buffer  es:di -> entries buffer
  9766                              <1> ;return: cx = number of entries
  9767                              <1> ;==============================================================================
  9768                              <1> find_cdboot_catalog:
  9769 00003301 56                  <1> 	push si
  9770 00003302 57                  <1> 	push di
  9771 00003303 50                  <1> 	push ax
  9772 00003304 FC                  <1> 	cld
  9773                              <1> 
  9774 00003305 31C9                <1> 	xor cx, cx
  9775                              <1> 
  9776 00003307 833C01              <1> 	cmp word [si], 0x0001
  9777 0000330A 7529                <1> 	jne .end
  9778 0000330C 817C1E55AA          <1> 	cmp word [si+0x1e], 0xaa55
  9779 00003311 7522                <1> 	jne .end
  9780                              <1> 
  9781                              <1> .loop_find:
  9782 00003313 8A04                <1> 	mov al, [si + struc_boot_catalog.indicator]
  9783 00003315 08C0                <1> 	or al, al
  9784 00003317 741C                <1> 	jz .end
  9785                              <1> 
  9786 00003319 3C88                <1> 	cmp al, 0x88
  9787 0000331B 7513                <1> 	jne .loop_next
  9788                              <1> 
  9789 0000331D 8A4401              <1> 	mov al, [si + struc_boot_catalog.media_type]
  9790 00003320 240F                <1> 	and al, 0x0f
  9791 00003322 3C04                <1> 	cmp al , 4
  9792 00003324 730A                <1> 	jae .loop_next
  9793                              <1> 
  9794 00003326 51                  <1> 	push cx
  9795 00003327 56                  <1> 	push si
  9796 00003328 B92000              <1> 	mov cx, SIZE_OF_BOOT_CATALOG
  9797 0000332B F3A4                <1> 	rep movsb
  9798 0000332D 5E                  <1> 	pop si
  9799 0000332E 59                  <1> 	pop cx
  9800 0000332F 41                  <1> 	inc cx
  9801                              <1> 
  9802                              <1> .loop_next:
  9803 00003330 83C620              <1> 	add si, SIZE_OF_BOOT_CATALOG
  9804 00003333 EBDE                <1> 	jmp short .loop_find
  9805                              <1> 
  9806                              <1> .end:
  9807 00003335 58                  <1> 	pop ax
  9808 00003336 5F                  <1> 	pop di
  9809 00003337 5E                  <1> 	pop si
  9810 00003338 C3                  <1> 	ret
  9811                              <1> 
  9812                              <1> %endif
  9813                              <1> 
  9814                              <1> ;==============================================================================
  9815                              <1> ;preload_keystrokes ---- preload the keystrokes into key buffer.
  9816                              <1> ;input:
  9817                              <1> ;      ds:si -> boot record
  9818                              <1> ;output:
  9819                              <1> ;      none
  9820                              <1> ;==============================================================================
  9821                              <1> preload_keystrokes:
  9822 00003339 60                  <1>         pusha
  9823 0000333A FC                  <1>         cld
  9824 0000333B F7040040            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_HAVEKEYS
  9825 0000333F 741A                <1>         jz .end
  9826                              <1> 
  9827 00003341 B90D00              <1>         mov cx, MAX_KEYSTROKES
  9828 00003344 83C626              <1>         add si, struc_bootrecord.keystrokes
  9829                              <1> 
  9830                              <1> .loop_load:
  9831 00003347 AD                  <1>         lodsw
  9832 00003348 09C0                <1>         or ax, ax
  9833 0000334A 740F                <1>         jz .end
  9834                              <1> 
  9835 0000334C 51                  <1>         push cx
  9836 0000334D 89C1                <1>         mov cx, ax
  9837 0000334F B405                <1>         mov ah, 0x05
  9838 00003351 E81FF6              <1>         call bioskey
  9839 00003354 59                  <1>         pop cx
  9840 00003355 08C0                <1>         or al, al
  9841 00003357 7502                <1>         jnz .end
  9842 00003359 E2EC                <1>         loop .loop_load
  9843                              <1> .end:
  9844 0000335B 61                  <1>         popa
  9845 0000335C C3                  <1>         ret
  9846                              <1> 
  9847                              <1> ;==============================================================================
  9848                              <1> ;prepare_boot ---- do some preparation before booting.
  9849                              <1> ;input:
  9850                              <1> ;      ds:si -> boot record
  9851                              <1> ;      knl_tmp.disk_buf1  -> boot sector
  9852                              <1> ;      knl_tmp.disk_buf2 -> father's first sector ( partition table ).
  9853                              <1> ;output:
  9854                              <1> ;      cf = 0 success
  9855                              <1> ;          bx = the partition record's offset in partition table.
  9856                              <1> ;      cf = 1 failed
  9857                              <1> ;==============================================================================
  9858                              <1> prepare_boot:
  9859 0000335D 31C0                <1>         xor ax, ax
  9860 0000335F F7048000            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_ISDRIVER
  9861 00003363 0F856F00            <1>         jmpnz .end
  9862                              <1> 
  9863 00003367 668B5C0A            <1>         mov ebx, [si + struc_bootrecord.abs_addr]         ;
  9864                              <1> 
  9865 0000336B 668B4C06            <1>         mov ecx, [si + struc_bootrecord.father_abs_addr]  ;
  9866                              <1> 
  9867 0000336F 6689D8              <1>         mov eax, ebx
  9868 00003372 6629C8              <1>         sub eax, ecx                                      ; relative addr -> eax
  9869                              <1> 
  9870 00003375 8D3E[CB5F]          <1>         lea di, [knl_tmp.disk_buf2 + 1BEh]
  9871 00003379 30C9                <1>         xor cl, cl
  9872                              <1>         
  9873                              <1> .search_in_father:
  9874 0000337B 66394508            <1>         cmp [di + struc_partition.relative_addr], eax
  9875 0000337F 740C                <1>         je .found
  9876 00003381 FEC1                <1>         inc cl
  9877 00003383 83C710              <1>         add di, SIZE_OF_PARTITION
  9878 00003386 80F904              <1>         cmp cl, 4
  9879 00003389 72F0                <1>         jb .search_in_father
  9880 0000338B EB49                <1>         jmp short .failed
  9881                              <1> 
  9882                              <1> .found:
  9883 0000338D B010                <1>         mov al, SIZE_OF_PARTITION                   ; ax = offset in partition
  9884 0000338F F6E1                <1>         mul cl                                      ; table.
  9885                              <1> 
  9886 00003391 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]
  9887 00003394 8815                <1>         mov [di + struc_partition.state], dl        ; store drive id into
  9888                              <1>                                                     ; partition record
  9889                              <1> 
  9890 00003396 8D3E[0D56]          <1>         lea di, [knl_tmp.disk_buf1]                          ; di -> boot record
  9891 0000339A 8A7404              <1>         mov dh, [si + struc_bootrecord.type]
  9892                              <1> 
  9893 0000339D 80FE04              <1>         cmp dh, 0x04
  9894 000033A0 7416                <1>         je .fat16
  9895 000033A2 80FE06              <1>         cmp dh, 0x06
  9896 000033A5 7411                <1>         je .fat16
  9897 000033A7 80FE0E              <1>         cmp dh, 0x0e
  9898 000033AA 740C                <1>         je .fat16
  9899 000033AC 80FE0B              <1>         cmp dh, 0x0b
  9900 000033AF 7416                <1>         je .fat32
  9901 000033B1 80FE0C              <1>         cmp dh, 0x0c
  9902 000033B4 7411                <1>         je .fat32
  9903 000033B6 EB1E                <1>         jmp short .end
  9904                              <1> .fat16:
  9905 000033B8 807D2629            <1>         cmp byte [di + FAT16_EXTBRID_OFF], EXTBRID
  9906 000033BC 7518                <1>         jne .end
  9907                              <1>         
  9908 000033BE 885524              <1>         mov [di + FAT16_DRVID_OFF], dl              ; update the drive id.
  9909 000033C1 66895D1C            <1>         mov [di + FAT16_HIDSEC_OFF], ebx            ; update hidden sector
  9910                              <1>                                                     ; = abs_addr.
  9911 000033C5 EB0F                <1>         jmp short .end
  9912                              <1> .fat32:
  9913 000033C7 807D4229            <1>         cmp byte [di + FAT32_EXTBRID_OFF], EXTBRID
  9914 000033CB 7509                <1>         jne .end
  9915                              <1>         
  9916 000033CD 885540              <1>         mov [di + FAT32_DRVID_OFF], dl              ; update the drive id.
  9917 000033D0 66895D1C            <1>         mov [di + FAT32_HIDSEC_OFF], ebx            ; update hidden sector
  9918                              <1>                                                     ; = abs_addr.
  9919 000033D4 EB00                <1>         jmp short .end
  9920                              <1>         
  9921                              <1> .failed:
  9922                              <1> ;        stc
  9923                              <1> ;        ret
  9924                              <1> .end:
  9925 000033D6 89C3                <1>         mov bx, ax          ; partition record's offset store to bx.
  9926 000033D8 F8                  <1>         clc
  9927 000033D9 C3                  <1>         ret
  9928                              <1> 
  9929                              <1> ;==============================================================================
  9930                              <1> ;check_allow_hide ---- check if the partition can be hidden.
  9931                              <1> ;input:
  9932                              <1> ;      ds:si -> the boot record
  9933                              <1> ;output:
  9934                              <1> ;      cf = 0 can be hidden
  9935                              <1> ;      cf = 1 cannot be hidden
  9936                              <1> ;==============================================================================
  9937                              <1> check_allow_hide:
  9938 000033DA 60                  <1>         pusha
  9939 000033DB 09F6                <1> 	or si, si
  9940 000033DD 741B                <1> 	jz .cannot_hide
  9941                              <1> 
  9942 000033DF 8B04                <1>         mov ax, [si + struc_bootrecord.flags]
  9943 000033E1 A90100              <1>         test ax, DRVFLAG_DRIVEOK
  9944 000033E4 7414                <1>         jz .cannot_hide
  9945 000033E6 A99800              <1>         test ax, INFOFLAG_ISDRIVER | DRVFLAG_ISCDROM | INFOFLAG_ISSPECIAL
  9946 000033E9 750F                <1>         jnz .cannot_hide
  9947                              <1> 
  9948 000033EB 8A4404              <1>         mov al, [si + struc_bootrecord.type]
  9949 000033EE B90700              <1>         mov cx, NUM_OF_ALLOW_HIDE
  9950 000033F1 8D3E[9135]          <1>         lea di, [part_type.allow_hide_tbl]
  9951 000033F5 E871F3              <1>         call strchr
  9952 000033F8 61                  <1>         popa
  9953 000033F9 C3                  <1>         ret
  9954                              <1>         
  9955                              <1> .cannot_hide:
  9956 000033FA 61                  <1>         popa
  9957 000033FB F9                  <1>         stc
  9958 000033FC C3                  <1>         ret
  9959                              <1> 
  9960                              <1> ;==============================================================================
  9961                              <1> ;check_allow_act ---- check if the partition can be actived.
  9962                              <1> ;input:
  9963                              <1> ;      ds:si -> the boot record
  9964                              <1> ;output:
  9965                              <1> ;      cf = 0 can be actived
  9966                              <1> ;      cf = 1 cannot be actived
  9967                              <1> ;==============================================================================
  9968                              <1> check_allow_act:
  9969 000033FD 60                  <1>         pusha
  9970 000033FE 09F6                <1> 	or si, si
  9971 00003400 740F                <1> 	jz .cannot_act
  9972                              <1> 
  9973 00003402 8B04                <1>         mov ax, [si + struc_bootrecord.flags]   ; get flags
  9974 00003404 A90100              <1>         test ax, DRVFLAG_DRIVEOK
  9975 00003407 7408                <1>         jz .cannot_act
  9976 00003409 A99801              <1>         test ax, INFOFLAG_ISDRIVER | INFOFLAG_LOGICAL | DRVFLAG_ISCDROM | INFOFLAG_ISSPECIAL
  9977 0000340C 7503                <1>         jnz .cannot_act
  9978 0000340E 61                  <1>         popa
  9979 0000340F F8                  <1>         clc
  9980 00003410 C3                  <1>         ret
  9981                              <1>         
  9982                              <1> .cannot_act:
  9983 00003411 61                  <1>         popa
  9984 00003412 F9                  <1>         stc
  9985 00003413 C3                  <1>         ret
  9986                              <1> 
  9987                              <1> ;==============================================================================
  9988                              <1> ;check_prev_mbr ---- check if the previous mbr is avaiable.
  9989                              <1> ;input:
  9990                              <1> ;      none
  9991                              <1> ;output:
  9992                              <1> ;      cf = 0 present
  9993                              <1> ;      cf = 1 absent
  9994                              <1> ;==============================================================================
  9995                              <1> check_prev_mbr:
  9996 00003414 60                  <1> 	pusha
  9997 00003415 8A16107E            <1> 	mov dl, [Boot_Drive]
  9998 00003419 E88602              <1> 	call get_drive_flags
  9999 0000341C 7205                <1> 	jc .end
 10000 0000341E A804                <1> 	test al, DRVFLAG_REMOVABLE
 10001 00003420 7401                <1> 	jz .end
 10002 00003422 F9                  <1> 	stc
 10003                              <1> .end:
 10004 00003423 61                  <1> 	popa
 10005 00003424 C3                  <1> 	ret
 10006                              <1> 
 10007                              <1> ;==============================================================================
 10008                              <1> ;data area
 10009                              <1> ;==============================================================================
 10010                              <1> 
 10011                              <1> ; strings used in knl.asm
 10012 00003425 536B58614168486C44- <1> infoflag_chars  db "SkXaAhHlD",0
 10013 0000342E 00                  <1>
 10014                              <1> 
 10015                              <1> knl_strings:
 10016 0000342F 466C6F70707900      <1> .floppy     db "Floppy",0
 10017 00003436 5072696D61727900    <1> .primary    db "Primary",0
 10018 0000343E 4C6F676963616C00    <1> .logical    db "Logical",0
 10019 00003446 52656D6F7661626C65- <1> .removable  db "Removable",0
 10020 0000344F 00                  <1>
 10021 00003450 486172646469736B00  <1> .harddisk   db "Harddisk",0
 10022 00003459 43442D524F4D00      <1> .cdrom      db "CD-ROM",0
 10023 00003460 5370656369616C00    <1> .special    db "Special",0
 10024 00003468 506F776572204F6666- <1> .poweroff   db "Power Off",0
 10025 00003471 00                  <1>
 10026 00003472 5265626F6F7400      <1> .restart    db "Reboot",0
 10027 00003479 5175697420746F2042- <1> .quit       db "Quit to BIOS",0
 10028 00003482 494F5300            <1>
 10029 00003486 50726576696F757320- <1> .bootprev   db "Previous MBR",0
 10030 0000348F 4D425200            <1>
 10031 00003493 2D2D2D202D2D00      <1> .invalid_id db "--- --",0
 10032                              <1> 
 10033                              <1> ; partition types and strings
 10034                              <1> part_type:
 10035                              <1> 
 10036                              <1> ; table of partition type ids
 10037                              <1> .id_tbl:
 10038 0000349A 00060708090A0B0C    <1>         db 0x00, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 
 10039 000034A2 0E3C4D4E4F636581    <1> 	db 0x0E, 0x3C, 0x4D, 0x4E, 0x4F, 0x63, 0x65, 0x81, 
 10040 000034AA 82838E93A5A6A9B7    <1> 	db 0x82, 0x83, 0x8E, 0x93, 0xA5, 0xA6, 0xA9, 0xB7, 
 10041 000034B2 BEEB                <1> 	db 0xBE, 0xEB
 10042                              <1> 
 10043                              <1> ; table of partition type strings
 10044                              <1> .str_tbl:
 10045 000034B4 4E4F4E4520202000    <1>         db "NONE   ",0           ; No type
 10046 000034BC 4641543136202000    <1>         db "FAT16  ",0           ; 0x06
 10047 000034C4 48502F4E54465300    <1>         db "HP/NTFS",0           ; 0x07
 10048 000034CC 4149582830382900    <1> 	db "AIX(08)",0           ; 0x08
 10049 000034D4 4149582830392900    <1> 	db "AIX(09)",0           ; 0x09
 10050 000034DC 4F532F3220424D00    <1> 	db "OS/2 BM",0           ; 0x0A
 10051 000034E4 4641543332202000    <1>         db "FAT32  ",0           ; 0x0B
 10052 000034EC 4641543332782000    <1>         db "FAT32x ",0           ; 0x0C
 10053 000034F4 4641543136782000    <1>         db "FAT16x ",0           ; 0x0E
 10054 000034FC 50512D426F6F7400    <1>         db "PQ-Boot",0           ; 0x3C
 10055 00003504 514E58342E782000    <1>         db "QNX4.x ",0           ; 0x4D
 10056 0000350C 514E5834782D3200    <1>         db "QNX4x-2",0           ; 0x4E
 10057 00003514 514E5834782D3300    <1>         db "QNX4x-3",0           ; 0x4F
 10058 0000351C 4855524420202000    <1>         db "HURD   ",0           ; 0x63
 10059 00003524 4E6F76656C6C2000    <1>         db "Novell ",0           ; 0x65
 10060 0000352C 4D696E6978202000    <1>         db "Minix  ",0           ; 0x81
 10061 00003534 4C6E785377617000    <1>         db "LnxSwap",0           ; 0x82
 10062 0000353C 4C696E7578202000    <1>         db "Linux  ",0           ; 0x83
 10063 00003544 4C6E78204C564D00    <1> 	db "Lnx LVM",0           ; 0x8E
 10064 0000354C 416D6F6562612000    <1> 	db "Amoeba ",0           ; 0x93
 10065 00003554 4253442F33383600    <1>         db "BSD/386",0           ; 0xA5
 10066 0000355C 4F70656E42534400    <1>         db "OpenBSD",0           ; 0xA6
 10067 00003564 4E65744253442000    <1>         db "NetBSD ",0           ; 0xA9
 10068 0000356C 4253446920667300    <1>         db "BSDi fs",0           ; 0xB7
 10069 00003574 536F6C6172697300    <1>         db "Solaris",0           ; 0xBE
 10070 0000357C 42654F5320202000    <1>         db "BeOS   ",0           ; 0xEB
 10071 00003584 556E6B6E6F776E00    <1>         db "Unknown",0           ; other
 10072                              <1> 
 10073                              <1> ; logical partition types which could not boot
 10074                              <1> ; include the following pri_deny_tbl
 10075                              <1> .log_deny_tbl:
 10076                              <1> %ifdef STRICT_PART_CHECK
 10077                              <1>         db 0x01, 0x0A, 0x07, 0x17
 10078                              <1> %endif
 10079                              <1> ; primary partition types which could not boot
 10080                              <1> .pri_deny_tbl:
 10081 0000358C 050F85              <1>         db 0x05, 0x0F, 0x85
 10082                              <1> %ifdef STRIC_PART_CHECK
 10083                              <1>         db 0x82, 0xA0, 0xB8, 0xE1, 0xE3, 0xF2
 10084                              <1> %endif
 10085 0000358F 00                  <1> 	db 0x00
 10086                              <1> 
 10087                              <1> ;the partition types which should be marked as auto active.
 10088                              <1> .auto_act_tbl:
 10089                              <1> ;the partition types which can be hidden.
 10090                              <1> ;the hide method is add 0x10 to the partition type.
 10091                              <1> ; ie. the type of hidden FAT16 = 0x16, etc.
 10092 00003590 BE                  <1>         db 0xBE
 10093                              <1> .allow_hide_tbl:
 10094 00003591 010406070B0C0E      <1>         db 0x01, 0x04, 0x06, 0x07, 0x0B, 0x0C, 0x0E
 10095                              <1> 
 10096                              <1> ; the types used to hide certain partitions.
 10097                              <1> .hidden_tbl:
 10098 00003598 111416171B1C1E      <1>         db 0x11, 0x14, 0x16, 0x17, 0x1B, 0x1C, 0x1E
 10099                              <1>         
 10100                              <1> .end_of_tbl
 10101                              <1> 
 10102                                  %include "hd_io.asm"
 10103                              <1> ; asmsyntax=nasm
 10104                              <1> ; hd_io.asm
 10105                              <1> ;
 10106                              <1> ; Interface to BIOS int 0x13 functions
 10107                              <1> ;
 10108                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
 10109                              <1> ;
 10110                              <1> 
 10111                              <1> %define RETRY_TIMES     3
 10112                              <1> 
 10113                              <1>         bits 16
 10114                              <1> ;==============================================================================
 10115                              <1> ;check_int13ext ---- Check if the extension of int13h is presents for a driver.
 10116                              <1> ;input:
 10117                              <1> ;      dl = driver id
 10118                              <1> ;output:
 10119                              <1> ;      cf = 0, int13ext is presents
 10120                              <1> ;          cl = interface support bitmap.
 10121                              <1> ;      cf = 1, int13ext is not presents
 10122                              <1> ;==============================================================================
 10123                              <1> check_int13ext:
 10124 0000359F 803E[B737]00        <1>         cmp byte [use_int13_ext], 0
 10125 000035A4 7414                <1>         jz .not_present
 10126                              <1> 
 10127 000035A6 BBAA55              <1>         mov bx, 0x55aa
 10128 000035A9 B441                <1>         mov ah, INT13H_EXT_INSTCHECK
 10129 000035AB CD13                <1>         int 0x13                        ; Check if int13h extension is presents
 10130                              <1> ;        jc .not_present
 10131 000035AD 81FB55AA            <1>         cmp bx, 0xaa55
 10132 000035B1 7507                <1>         jne .not_present
 10133 000035B3 F6C105              <1>         test cl, EXT_SUBSET_FIXED | EXT_SUBSET_EDD
 10134                              <1> 					; Check if this drive supports extended
 10135 000035B6 7402                <1>         jz .not_present                 ; read/write
 10136 000035B8 F8                  <1>         clc
 10137 000035B9 C3                  <1>         ret
 10138                              <1> .not_present:
 10139 000035BA F9                  <1>         stc
 10140 000035BB C3                  <1>         ret
 10141                              <1> 
 10142                              <1> ;==============================================================================
 10143                              <1> ;get_drive_info ---- Get drive informations
 10144                              <1> ;input:
 10145                              <1> ;      dl = drive id
 10146                              <1> ;      es:di -> buffer for drive info (struc struc_driveinfo)
 10147                              <1> ;output:
 10148                              <1> ;      cf = 0 ok
 10149                              <1> ;      cf = 1 drive is not presents
 10150                              <1> ;==============================================================================
 10151                              <1> get_drive_info:
 10152 000035BC 60                  <1>         pusha
 10153                              <1>         
 10154 000035BD 8815                <1>         mov [di + struc_driveinfo.id], dl
 10155 000035BF C6450100            <1>         mov byte [di + struc_driveinfo.flags], 0 ; clear the flags
 10156                              <1> 
 10157 000035C3 52                  <1>         push dx
 10158 000035C4 E8D8FF              <1>         call check_int13ext
 10159 000035C7 5A                  <1>         pop dx
 10160 000035C8 7359                <1>         jnc .ext_present
 10161                              <1> 
 10162 000035CA B415                <1>         mov ah, INT13H_GETTYPE
 10163 000035CC 52                  <1>         push dx
 10164 000035CD CD13                <1>         int 0x13
 10165 000035CF 8826[F155]          <1>         mov [hdio_tmp.disk_errno], ah
 10166 000035D3 5A                  <1>         pop dx
 10167 000035D4 724A                <1>         jc .drive_not_present
 10168 000035D6 08E4                <1>         or ah, ah                           ; ah = drive type, = 0 no such drive
 10169 000035D8 7446                <1>         jz .drive_not_present
 10170                              <1>         
 10171 000035DA 06                  <1>         push es
 10172 000035DB 57                  <1>         push di
 10173 000035DC 50                  <1>         push ax                             ; save drive type
 10174 000035DD B408                <1>         mov ah, INT13H_GETINFO
 10175 000035DF CD13                <1>         int 0x13
 10176 000035E1 8826[F155]          <1>         mov [hdio_tmp.disk_errno], ah
 10177 000035E5 58                  <1>         pop ax
 10178 000035E6 5F                  <1>         pop di
 10179 000035E7 07                  <1>         pop es
 10180 000035E8 7236                <1>         jc .drive_not_present
 10181                              <1> 
 10182 000035EA 50                  <1>         push ax                             ; drive type.
 10183 000035EB 53                  <1>         push bx                             ; floppy type.
 10184                              <1>         
 10185 000035EC 0FB6C1              <1>         movzx ax, cl                             ;
 10186 000035EF 243F                <1>         and al, 0x3f                             ; get sectors per track
 10187 000035F1 894506              <1>         mov [di + struc_driveinfo.sectors], ax   ;
 10188                              <1> 
 10189 000035F4 86E5                <1>         xchg ah, ch                              ;
 10190 000035F6 C1E102              <1>         shl cx, 2                                ;
 10191 000035F9 88E1                <1>         mov cl, ah                               ; get cylinders
 10192 000035FB 41                  <1>         inc cx                                   ;
 10193 000035FC 894D02              <1>         mov [di + struc_driveinfo.cylinders], cx ;
 10194                              <1> 
 10195 000035FF 0FB6C6              <1> 	movzx ax, dh                             ; get heads
 10196 00003602 40                  <1>         inc ax                                   ;
 10197 00003603 894504              <1>         mov [di + struc_driveinfo.heads], ax     ;
 10198                              <1> 
 10199 00003606 5B                  <1>         pop bx
 10200 00003607 58                  <1>         pop ax
 10201                              <1> 
 10202 00003608 B601                <1>         mov dh, DRVFLAG_DRIVEOK
 10203 0000360A 80FC03              <1>         cmp ah, DRV_TYPE_FIXED                  ; fixed drive.
 10204 0000360D 7403                <1>         je .fixed_drive
 10205 0000360F 80CE04              <1>         or dh, DRVFLAG_REMOVABLE
 10206                              <1>         
 10207                              <1> .fixed_drive:
 10208 00003612 80CE02              <1>         or dh, DRVFLAG_CHSVALID
 10209 00003615 887501              <1>         mov [di + struc_driveinfo.flags], dh
 10210 00003618 C745080002          <1> 	mov word [di + struc_driveinfo.sector_size], 0x200
 10211 0000361D E97F00              <1>         jmp .endok
 10212                              <1> 
 10213                              <1> .drive_not_present:
 10214 00003620 61                  <1>         popa
 10215 00003621 F9                  <1>         stc
 10216 00003622 C3                  <1>         ret
 10217                              <1> 
 10218                              <1> .ext_present:
 10219                              <1> ;Int13h ext is presents, use int13h ext to get drive info
 10220 00003623 B448                <1>         mov ah, INT13H_EXT_GETINFO
 10221 00003625 8D36[9555]          <1>         lea si, [hdio_tmp.extparam]
 10222 00003629 C7044200            <1>         mov word [si + struc_extparam.pack_size], SIZE_OF_EXTPARAM
 10223 0000362D 52                  <1>         push dx
 10224 0000362E CD13                <1>         int 0x13
 10225 00003630 8826[F155]          <1>         mov [hdio_tmp.disk_errno], ah
 10226 00003634 5A                  <1>         pop dx
 10227 00003635 72E9                <1>         jc .drive_not_present
 10228                              <1>         
 10229 00003637 8B4404              <1>         mov ax, [si + struc_extparam.cylinders]
 10230 0000363A 894502              <1>         mov [di + struc_driveinfo.cylinders], ax
 10231 0000363D 8B4408              <1>         mov ax, [si + struc_extparam.heads]
 10232 00003640 894504              <1>         mov [di + struc_driveinfo.heads], ax
 10233 00003643 8B440C              <1>         mov ax, [si + struc_extparam.sectors]
 10234 00003646 894506              <1>         mov [di + struc_driveinfo.sectors], ax
 10235 00003649 8B4418              <1> 	mov ax, [si + struc_extparam.bytes_per_sect]
 10236 0000364C 894508              <1> 	mov [di + struc_driveinfo.sector_size], ax
 10237                              <1> 
 10238 0000364F 8A4402              <1>         mov al, [si + struc_extparam.flags]              ;
 10239 00003652 2406                <1>         and al, (DRVFLAG_CHSVALID + DRVFLAG_REMOVABLE)   ; fill in the
 10240 00003654 0C09                <1>         or al, DRVFLAG_EXTOK + DRVFLAG_DRIVEOK           ; struc_driveinfo.flags
 10241                              <1> 
 10242                              <1> %ifndef DISABLE_CDBOOT
 10243 00003656 803C42              <1> 	cmp byte [si + struc_extparam.pack_size], SIZE_OF_EXTPARAM
 10244 00003659 721F                <1> 	jb .no_edd30
 10245 0000365B 817C1EDDBE          <1> 	cmp word [si + struc_extparam.dpi_key], 0xBEDD
 10246 00003660 7518                <1> 	jne .no_edd30
 10247 00003662 807C2024            <1> 	cmp byte [si + struc_extparam.dpi_length], 36
 10248 00003666 7512                <1> 	jne .no_edd30
 10249 00003668 66817C2841544150    <1> 	cmp dword [si + struc_extparam.interface_type], 'ATAP'
 10250 00003670 752A                <1> 	jne .not_cdrom
 10251 00003672 807C2C49            <1> 	cmp byte [si + struc_extparam.interface_type+4], 'I'
 10252 00003676 7524                <1> 	jne .not_cdrom
 10253 00003678 0C10                <1> 	or al, DRVFLAG_ISCDROM
 10254                              <1> 
 10255                              <1> .no_edd30:
 10256 0000367A 803C1E              <1> 	cmp byte [si + struc_extparam.pack_size], 30
 10257 0000367D 721D                <1> 	jb .not_cdrom
 10258 0000367F 8B5C1C              <1> 	mov bx, [si + struc_extparam.dpte_addr+2]
 10259 00003682 83FBFF              <1> 	cmp bx, 0xffff
 10260 00003685 7415                <1> 	je .not_cdrom
 10261 00003687 8B741A              <1> 	mov si, [si + struc_extparam.dpte_addr]
 10262 0000368A 83FEFF              <1> 	cmp si, 0xffff
 10263 0000368D 740D                <1> 	je .not_cdrom
 10264 0000368F 1E                  <1> 	push ds
 10265 00003690 8EDB                <1> 	mov ds, bx
 10266 00003692 3EF6440A40          <1> 	test byte [ds:si + struc_dpte.bios_spec], 0x40  ; check if is atapi dev
 10267 00003697 1F                  <1> 	pop ds
 10268 00003698 7402                <1> 	jz .not_cdrom
 10269 0000369A 0C10                <1> 	or al, DRVFLAG_ISCDROM
 10270                              <1> 
 10271                              <1> .not_cdrom:
 10272                              <1> %endif
 10273 0000369C 884501              <1>         mov [di + struc_driveinfo.flags], al
 10274                              <1> 
 10275                              <1> .endok:
 10276 0000369F 61                  <1>         popa
 10277 000036A0 F8                  <1>         clc
 10278 000036A1 C3                  <1>         ret
 10279                              <1>         
 10280                              <1> ;==============================================================================
 10281                              <1> ;get_drive_flags ---- get drive flags
 10282                              <1> ;input:
 10283                              <1> ;      dl = drive id
 10284                              <1> ;output:
 10285                              <1> ;      cf = 0 ok, al = drive flags
 10286                              <1> ;      cf = 1 error, al = 0
 10287                              <1> ;==============================================================================
 10288                              <1> get_drive_flags:
 10289 000036A2 57                  <1>         push di
 10290 000036A3 8D3E[E755]          <1>         lea di, [hdio_tmp.driveinfo]
 10291 000036A7 E812FF              <1>         call get_drive_info
 10292 000036AA 8A4501              <1>         mov al, [di + struc_driveinfo.flags]
 10293 000036AD 5F                  <1>         pop di
 10294 000036AE C3                  <1>         ret
 10295                              <1> 
 10296                              <1> ;;;;;;;;;;;;;;;;;;; perhaps these will be used in future ;;;;;;;;;;;;;;;;;;;
 10297                              <1> %if 0
 10298                              <1> ;==============================================================================
 10299                              <1> ;init_drives_info ---- get all drives info
 10300                              <1> ;input:
 10301                              <1> ;      es:di -> buffer to store the info of each drives
 10302                              <1> ;               should have enought space to store 255 drives' info
 10303                              <1> ;output:
 10304                              <1> ;      dh = the number of drives (include the floppy)
 10305                              <1> ;==============================================================================
 10306                              <1> init_drives_info:
 10307                              <1>         push es
 10308                              <1>         push di
 10309                              <1>         mov cx, 256
 10310                              <1>         xor dx, dx
 10311                              <1> .loop_query:
 10312                              <1>         push cx
 10313                              <1>         push dx
 10314                              <1>         call get_drive_info
 10315                              <1>         pop dx
 10316                              <1>         pop cx
 10317                              <1>         jc .bad_drive
 10318                              <1>         inc dh
 10319                              <1>         
 10320                              <1> .bad_drive:
 10321                              <1>         add di, SIZE_OF_DRIVEINFO
 10322                              <1>         inc dl
 10323                              <1>         loop .loop_query
 10324                              <1>         
 10325                              <1>         pop di
 10326                              <1>         pop es
 10327                              <1>         ret
 10328                              <1> 
 10329                              <1> %endif
 10330                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10331                              <1> 
 10332                              <1> ;==============================================================================
 10333                              <1> ;lba2chs ---- lba to chs translation
 10334                              <1> ;input:
 10335                              <1> ;      ebx = lba address 
 10336                              <1> ;      ds : si -> drive info struc
 10337                              <1> ;output:
 10338                              <1> ;      cf = 0 success
 10339                              <1> ;            ch = low eight bits of cylinder number
 10340                              <1> ;            cl = sector number 1-63 (bits 0-5)
 10341                              <1> ;                 high two bits of cylinder (bits 6-7, hard disk only)
 10342                              <1> ;            dh = head number
 10343                              <1> ;      cf = 1 error ( cylinder exceed )
 10344                              <1> ;==============================================================================
 10345                              <1> lba2chs:
 10346 000036AF 50                  <1>         push ax
 10347 000036B0 6689D8              <1> 	mov eax, ebx
 10348                              <1> 
 10349 000036B3 660FB74C06          <1>         movzx ecx, word [si + struc_driveinfo.sectors] ; calculate sector:
 10350                              <1> 
 10351 000036B8 09C9                <1>         or cx, cx                              ; sectors per track cannot equal
 10352 000036BA 7429                <1>         jz .convert_failed                     ; to zero.
 10353                              <1>         
 10354 000036BC 6631D2              <1>         xor edx, edx
 10355 000036BF 66F7F1              <1>         div ecx                                ; sector =  lba % sects_per_track + 1
 10356 000036C2 42                  <1>         inc dx                                 ; lba1 = lba / sects_per_track
 10357 000036C3 89D1                <1>         mov cx, dx                             ;
 10358                              <1> 
 10359                              <1>                                                ; calculate head and cylinder:
 10360                              <1>                                                ; head = lba1 % num_of_heads
 10361 000036C5 660FB75C04          <1>         movzx ebx, word [si + struc_driveinfo.heads] 
 10362                              <1>                                                ; cylinder = lba1 / num_of_heads
 10363                              <1> 
 10364 000036CA 08DB                <1>         or bl, bl                              ; heads cannot equal to zero.
 10365 000036CC 7417                <1>         jz .convert_failed                     ;
 10366                              <1>         
 10367 000036CE 6631D2              <1>         xor edx, edx
 10368 000036D1 66F7F3              <1>         div ebx                                ;
 10369                              <1>         
 10370 000036D4 88D6                <1>         mov dh, dl                             ; head = dl <= 255
 10371 000036D6 3DFF03              <1>         cmp ax, MAX_CYLS                       ; cylinder = ax
 10372 000036D9 770A                <1>         ja .convert_failed                     ; cylinder is too big.
 10373                              <1> 
 10374 000036DB 86C4                <1>         xchg al, ah                            ;
 10375 000036DD C0E006              <1>         shl al, 6                              ; fill cylinder and sector into
 10376 000036E0 09C1                <1>         or cx, ax                              ; cx
 10377 000036E2 58                  <1>         pop ax
 10378 000036E3 F8                  <1>         clc
 10379 000036E4 C3                  <1>         ret
 10380                              <1>         
 10381                              <1> .convert_failed:
 10382 000036E5 C606[F155]FE        <1>         mov byte [hdio_tmp.disk_errno], 0xFE             ; invalid LBA address
 10383 000036EA 58                  <1>         pop ax
 10384 000036EB F9                  <1>         stc
 10385 000036EC C3                  <1>         ret
 10386                              <1>         
 10387                              <1> ;==============================================================================
 10388                              <1> ;disk_access_low ---- read / write sectors on disk
 10389                              <1> ;input:
 10390                              <1> ;      ah      = function id, ( 02 = read, 03 = write )
 10391                              <1> ;      al      = number of sectors to be accessed
 10392                              <1> ;      ebx     = lba address
 10393                              <1> ;      ds : si -> drive info struc
 10394                              <1> ;      es : di -> buffer to get/store data
 10395                              <1> ;output:
 10396                              <1> ;      cf = 0 success
 10397                              <1> ;      cf = 1 error
 10398                              <1> ;==============================================================================
 10399                              <1> disk_access_low:
 10400 000036ED 60                  <1>         pusha
 10401                              <1>         
 10402 000036EE 8A7401              <1>         mov dh, [si + struc_driveinfo.flags]
 10403 000036F1 F6C601              <1>         test dh, DRVFLAG_DRIVEOK ; check if drive ok
 10404 000036F4 7467                <1>         jz .access_error
 10405                              <1>         
 10406 000036F6 F6C608              <1>         test dh, DRVFLAG_EXTOK
 10407 000036F9 7440                <1>         jz .no_ext
 10408                              <1>         
 10409                              <1> ;int13h extension is present, use it
 10410                              <1>         
 10411 000036FB 8A14                <1>         mov dl, [si + struc_driveinfo.id]    ; get drive id
 10412 000036FD 80C440              <1>         add ah, 0x40                         ; ext read func id = 0x42
 10413 00003700 8D36[D755]          <1>         lea si, [hdio_tmp.int13ext]
 10414 00003704 6631C9              <1>         xor ecx, ecx
 10415 00003707 C60410              <1>         mov byte [si + struc_int13ext.pack_size], 0x10 ;
 10416 0000370A 66894C0C            <1>         mov [si + struc_int13ext.blk_num_high1], ecx ; clear and set
 10417 0000370E 884C01              <1>         mov [si + struc_int13ext.reserved], cl       ; some stuff.
 10418 00003711 884C03              <1>         mov [si + struc_int13ext.reserved1], cl      ;
 10419                              <1> 
 10420 00003714 897C04              <1>         mov [si + struc_int13ext.buf_addr_off], di
 10421 00003717 8C4406              <1>         mov [si + struc_int13ext.buf_addr_seg], es
 10422 0000371A 66895C08            <1>         mov [si + struc_int13ext.blk_num_low1], ebx
 10423                              <1> 
 10424                              <1> .retry_ext_read:
 10425 0000371E 884402              <1>         mov [si + struc_int13ext.blk_count], al
 10426                              <1>         
 10427 00003721 50                  <1>         push ax
 10428 00003722 52                  <1>         push dx
 10429 00003723 56                  <1>         push si
 10430 00003724 CD13                <1>         int 0x13
 10431 00003726 8826[F155]          <1>         mov [hdio_tmp.disk_errno], ah
 10432 0000372A 5E                  <1>         pop si
 10433 0000372B 5A                  <1>         pop dx
 10434 0000372C 58                  <1>         pop ax
 10435 0000372D 732F                <1>         jnc .access_ok
 10436 0000372F E86C00              <1>         call reset_drive
 10437 00003732 FEC6                <1>         inc dh
 10438 00003734 80FE03              <1>         cmp dh, RETRY_TIMES                 ; retry 3 times
 10439 00003737 72E5                <1>         jb .retry_ext_read
 10440 00003739 EB22                <1>         jmp short .access_error
 10441                              <1> 
 10442                              <1> ;int13h extension is not ok, use old int13h
 10443                              <1> .no_ext:
 10444 0000373B E871FF              <1>         call lba2chs
 10445 0000373E 721D                <1>         jc .access_error
 10446 00003740 8A14                <1>         mov dl, [si + struc_driveinfo.id]   ; dl = drive id
 10447 00003742 89FB                <1>         mov bx, di                          ; es : bx -> buffer
 10448 00003744 31FF                <1>         xor di, di
 10449                              <1>         
 10450                              <1> .retry_read:
 10451 00003746 50                  <1>         push ax
 10452 00003747 52                  <1>         push dx
 10453 00003748 53                  <1>         push bx
 10454 00003749 CD13                <1>         int 0x13
 10455 0000374B 8826[F155]          <1>         mov [hdio_tmp.disk_errno], ah
 10456 0000374F 5B                  <1>         pop bx
 10457 00003750 5A                  <1>         pop dx
 10458 00003751 58                  <1>         pop ax
 10459 00003752 730A                <1>         jnc .access_ok
 10460 00003754 E84700              <1>         call reset_drive
 10461 00003757 47                  <1>         inc di
 10462 00003758 83FF03              <1>         cmp di, RETRY_TIMES                 ; retry 3 times
 10463 0000375B 72E9                <1>         jb .retry_read
 10464                              <1> 
 10465                              <1> .access_error:
 10466 0000375D F9                  <1>         stc
 10467                              <1> .access_ok:
 10468 0000375E 61                  <1>         popa
 10469 0000375F C3                  <1>         ret
 10470                              <1> 
 10471                              <1> ;==============================================================================
 10472                              <1> ;disk_access ---- read / write sectors on disk
 10473                              <1> ;input:
 10474                              <1> ;      ah = function id, ( 02 = read, 03 = write )
 10475                              <1> ;      al = number of sectors to be accessed
 10476                              <1> ;      ebx = lba address
 10477                              <1> ;      dl = drive id
 10478                              <1> ;      es : di -> buffer
 10479                              <1> ;output:
 10480                              <1> ;      cf = 0 success
 10481                              <1> ;      cf = 1 error
 10482                              <1> ;==============================================================================
 10483                              <1> disk_access:
 10484 00003760 56                  <1>         push si
 10485 00003761 57                  <1>         push di
 10486 00003762 6653                <1> 	push ebx
 10487                              <1> 
 10488 00003764 06                  <1>         push es
 10489 00003765 1E                  <1>         push ds                         ; ds -> es, hdio_tmp.driveinfo is in ds segment.
 10490 00003766 07                  <1>         pop es
 10491                              <1>         
 10492 00003767 8D3E[E755]          <1>         lea di, [hdio_tmp.driveinfo]
 10493 0000376B E84EFE              <1>         call get_drive_info
 10494                              <1>         
 10495 0000376E 07                  <1>         pop es
 10496 0000376F 665B                <1> 	pop ebx
 10497 00003771 5F                  <1>         pop di
 10498                              <1>         
 10499 00003772 7207                <1>         jc .access_error
 10500 00003774 8D36[E755]          <1>         lea si, [hdio_tmp.driveinfo]
 10501 00003778 E872FF              <1>         call disk_access_low
 10502                              <1> .access_error:
 10503 0000377B 5E                  <1>         pop si
 10504 0000377C C3                  <1>         ret
 10505                              <1> 
 10506                              <1> 
 10507                              <1> %if 0
 10508                              <1> ;==============================================================================
 10509                              <1> ;get_cdrom_devinfo ---- get the CDROM's device info, e.g. io port
 10510                              <1> ;input: dl = drive id
 10511                              <1> ;output: cf = 0 success, ax = base io port, bx = ctrl port,
 10512                              <1> ;        cx = device specification
 10513                              <1> ;==============================================================================
 10514                              <1> get_cdrom_devinfo:
 10515                              <1> 	push si
 10516                              <1> 	call get_drive_flags
 10517                              <1> 	test al, DRVFLAG_ISCDROM
 10518                              <1> 	jz .not_cdrom
 10519                              <1> 
 10520                              <1> 	mov si, hdio_tmp.extparam
 10521                              <1> 	mov word [si], SIZE_OF_EXTPARAM
 10522                              <1> 	mov ah, 0x48
 10523                              <1> 	int 0x13
 10524                              <1> 
 10525                              <1> 	jc .not_cdrom
 10526                              <1> 	cmp byte [si], 30
 10527                              <1> 	jb .not_cdrom
 10528                              <1> 	mov ax, [si + struc_extparam.dpte_addr + 2]
 10529                              <1> 	cmp ax, 0xffff
 10530                              <1> 	je .not_cdrom
 10531                              <1> 
 10532                              <1> 	push es
 10533                              <1> 	push di
 10534                              <1> 	mov es, ax
 10535                              <1> 	mov di, [si + struc_extparam.dpte_addr]
 10536                              <1> 	mov ax, [es:di + struc_dpte.base_io]
 10537                              <1> 	mov bx, [es:di + struc_dpte.ctrl_io]
 10538                              <1> 	pop di
 10539                              <1> 	pop es
 10540                              <1> 
 10541                              <1> 	cmp byte [si], SIZE_OF_EXTPARAM
 10542                              <1> 	jb .not_cdrom
 10543                              <1> 	mov cx, [si + struc_extparam.device_path]
 10544                              <1> 	clc
 10545                              <1> 	jmp short .ok
 10546                              <1> 
 10547                              <1> .not_cdrom:
 10548                              <1> 	stc
 10549                              <1> .ok:
 10550                              <1> 	pop si
 10551                              <1> 	ret
 10552                              <1> 
 10553                              <1> %endif
 10554                              <1> 
 10555                              <1> %ifndef DISABLE_CDBOOT
 10556                              <1> ;==============================================================================
 10557                              <1> ;get_cdrom_boot_catalog ---- get the CDROM's boot catalog
 10558                              <1> ;input:
 10559                              <1> ;	dl = drive id
 10560                              <1> ;	es:di -> buffer
 10561                              <1> ;output:
 10562                              <1> ;	cf =0 success
 10563                              <1> ;	cf =1 error
 10564                              <1> ;==============================================================================
 10565                              <1> get_cdrom_boot_catalog:
 10566 0000377D 60                  <1> 	pusha
 10567 0000377E BE[8D55]            <1> 	mov si, hdio_tmp.cdbc_cmd
 10568 00003781 C60408              <1> 	mov byte [si], SIZE_OF_CDBC_CMD
 10569 00003784 C6440101            <1> 	mov byte [si+struc_cdbc_cmd.sector_count], 1
 10570 00003788 897C02              <1> 	mov [si+struc_cdbc_cmd.buf_addr_off], di
 10571 0000378B 8C4404              <1> 	mov [si+struc_cdbc_cmd.buf_addr_seg], es
 10572 0000378E 31DB                <1> 	xor bx, bx
 10573 00003790 895C06              <1> 	mov [si+struc_cdbc_cmd.begnning_sect], bx
 10574 00003793 B8004D              <1> 	mov ax, 0x4d00
 10575 00003796 CD13                <1> 	int 0x13
 10576 00003798 8826[F155]          <1> 	mov [hdio_tmp.disk_errno], ah
 10577 0000379C 61                  <1> 	popa
 10578 0000379D C3                  <1> 	ret
 10579                              <1> %endif
 10580                              <1> 
 10581                              <1> ;==============================================================================
 10582                              <1> ;reset_drive ---- reset the drive
 10583                              <1> ;input:
 10584                              <1> ;      dl = drive id
 10585                              <1> ;output:
 10586                              <1> ;      cf = 0 success
 10587                              <1> ;      cf = 1 error
 10588                              <1> ;==============================================================================
 10589                              <1> reset_drive:
 10590 0000379E 60                  <1>         pusha
 10591 0000379F 31C0                <1>         xor ax, ax
 10592 000037A1 CD13                <1>         int 0x13
 10593 000037A3 61                  <1>         popa
 10594 000037A4 C3                  <1>         ret
 10595                              <1> 
 10596                              <1> ;==============================================================================
 10597                              <1> ; get_last_disk_errno ---- get the last disk error number
 10598                              <1> ; input:
 10599                              <1> ;	none
 10600                              <1> ; output:
 10601                              <1> ;	ax = errno
 10602                              <1> ;==============================================================================
 10603                              <1> get_last_disk_errno:
 10604 000037A5 A1[F155]            <1> 	mov ax, [hdio_tmp.disk_errno]
 10605 000037A8 C3                  <1> 	ret
 10606                              <1> 
 10607                              <1> ;==============================================================================
 10608                              <1> ;get_drvid_str ---- get driver id string
 10609                              <1> ;input:
 10610                              <1> ;	dl = drive id
 10611                              <1> ;	es:di -> buffer
 10612                              <1> ;output:
 10613                              <1> ;	es:di -> point to the end of the string
 10614                              <1> ;==============================================================================
 10615                              <1> get_drvid_str:
 10616 000037A9 60                  <1> 	pusha
 10617                              <1> 
 10618                              <1> %ifdef SHOW_DRV_NAME
 10619                              <1> 	call get_drive_flags
 10620                              <1> 	cmp dl, MIN_HD_ID
 10621                              <1> 	jb .floppy
 10622                              <1> 	test al, DRVFLAG_REMOVABLE
 10623                              <1> 	jz .harddisk
 10624                              <1> 	test al, DRVFLAG_ISCDROM
 10625                              <1> 	jnz .cdrom
 10626                              <1> 	mov ax, 'RD'
 10627                              <1> 	jmp short .show_drv_name
 10628                              <1> .floppy:
 10629                              <1> 	mov ax, 'FD'
 10630                              <1> 	jmp short .show_drv_name
 10631                              <1> .harddisk:
 10632                              <1> 	mov ax, 'HD'
 10633                              <1> 	jmp short .show_drv_name
 10634                              <1> .cdrom:
 10635                              <1> 	mov ax, 'CD'
 10636                              <1> .show_drv_name:
 10637                              <1> 	stosb
 10638                              <1> 	mov al, ah
 10639                              <1> 	stosb
 10640                              <1> 
 10641                              <1> 	movzx ax, dl
 10642                              <1> 	and al, 0x0F
 10643                              <1> 	mov cl, 1
 10644                              <1> 	call htoa
 10645                              <1> %else
 10646 000037AA 0FB6C2              <1>         movzx ax, dl                                ; fill drive id
 10647 000037AD B103                <1>         mov cl, 3                                   ;
 10648 000037AF E83FEF              <1>         call itoa                                   ;
 10649                              <1> %endif
 10650 000037B2 61                  <1> 	popa
 10651 000037B3 83C703              <1> 	add di, 3
 10652 000037B6 C3                  <1> 	ret
 10653                              <1> 
 10654 000037B7 01                  <1> use_int13_ext  db 1
 10655                                  %include "myint13h.asm"
 10656                              <1> ; asmsyntax=nasm
 10657                              <1> ;
 10658                              <1> ; myint13h.asm
 10659                              <1> ;
 10660                              <1> ; install / uninstall func for my int13h
 10661                              <1> ;
 10662                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
 10663                              <1> ;
 10664                              <1> %ifndef DISABLE_CDBOOT
 10665                              <1>   %define SIZE_OF_EDD30	8	; my EDD3.0 and ATAPI driver need 6K mem
 10666                              <1> %else
 10667                              <1>   %define SIZE_OF_EDD30	1	; my SWAP Driver ID wrapper needs 1K mem
 10668                              <1> %endif
 10669                              <1> 
 10670                              <1> %ifndef DISABLE_CDBOOT
 10671                              <1>   %define EDD30_SIG1	'BM'
 10672                              <1>   %define EDD30_SIG2	'CB'
 10673                              <1> %else
 10674                              <1>   %define EDD30_SIG1	'BM'
 10675                              <1>   %define EDD30_SIG2	'SD'
 10676                              <1> %endif
 10677                              <1> 
 10678                              <1> ;=============================================================================
 10679                              <1> ;install_myint13h ---- install my int13h handler
 10680                              <1> ; bl = 0 init cdrom
 10681                              <1> ; bl = 1 don't init cdrom
 10682                              <1> ;=============================================================================
 10683                              <1> install_myint13h:
 10684 000037B8 60                  <1> 	pusha
 10685 000037B9 06                  <1> 	push es
 10686 000037BA 31C0                <1> 	xor ax, ax
 10687 000037BC 8EC0                <1> 	mov es, ax
 10688                              <1> 
 10689 000037BE E87300              <1> 	call check_myint13h
 10690 000037C1 7209                <1> 	jc .not_inst
 10691 000037C3 26A14E00            <1> 	mov ax, [es:0x13*4+2]
 10692 000037C7 A3[A972]            <1> 	mov [myint13h_tmp.edd30_seg], ax
 10693                              <1> 
 10694 000037CA EB2D                <1> 	jmp .end
 10695                              <1> 	
 10696                              <1> .not_inst:
 10697                              <1> 
 10698                              <1> %ifndef DISABLE_CDBOOT
 10699 000037CC 53                  <1> 	push bx
 10700                              <1> %endif
 10701 000037CD 26832E130408        <1> 	sub word [es:0x413], SIZE_OF_EDD30 ; allocate memory for module edd30
 10702 000037D3 CD12                <1> 	int 0x12
 10703 000037D5 C1E006              <1> 	shl ax, 6
 10704 000037D8 50                  <1> 	push ax
 10705 000037D9 07                  <1> 	pop es
 10706 000037DA 31FF                <1> 	xor di, di
 10707 000037DC BE[5238]            <1> 	mov si, module_edd30
 10708 000037DF B9900B              <1> 	mov cx, end_of_mod_edd30 - module_edd30
 10709 000037E2 FC                  <1> 	cld
 10710 000037E3 F3A4                <1> 	rep movsb
 10711                              <1> 
 10712 000037E5 A3[A972]            <1> 	mov [myint13h_tmp.edd30_seg], ax
 10713                              <1> 
 10714                              <1> %ifndef DISABLE_CDBOOT
 10715 000037E8 5B                  <1> 	pop bx
 10716 000037E9 08DB                <1> 	or bl, bl
 10717 000037EB 7506                <1> 	jnz .go_inst_int13
 10718 000037ED B402                <1> 	mov ah, 2
 10719 000037EF FF1E[A772]          <1> 	call far [myint13h_tmp.edd30_off]	;initialize cdrom drivers
 10720                              <1> %endif
 10721                              <1> 
 10722                              <1> .go_inst_int13:
 10723 000037F3 31C0                <1> 	xor ax, ax
 10724 000037F5 FF1E[A772]          <1> 	call far [myint13h_tmp.edd30_off]	;install my int13h 
 10725                              <1> 
 10726                              <1> .end:
 10727 000037F9 07                  <1> 	pop es
 10728 000037FA 61                  <1> 	popa
 10729 000037FB C3                  <1> 	ret
 10730                              <1> 
 10731                              <1> ;=============================================================================
 10732                              <1> ;uninstall_myint13h ---- uninstall my int13h handler
 10733                              <1> ;=============================================================================
 10734                              <1> uninstall_myint13h:
 10735 000037FC 60                  <1> 	pusha
 10736 000037FD E83400              <1> 	call check_myint13h
 10737 00003800 7214                <1> 	jc .not_inst
 10738                              <1> 
 10739 00003802 B401                <1> 	mov ah, 1
 10740 00003804 FF1E[A772]          <1> 	call far [myint13h_tmp.edd30_off]
 10741 00003808 720C                <1> 	jc .not_inst
 10742                              <1> 
 10743 0000380A 06                  <1> 	push es
 10744 0000380B 31C0                <1> 	xor ax, ax
 10745 0000380D 8EC0                <1> 	mov es, ax
 10746 0000380F 268306130408        <1> 	add word [es:0x413], SIZE_OF_EDD30 ; free memory
 10747 00003815 07                  <1> 	pop es
 10748                              <1> 
 10749                              <1> .not_inst:
 10750 00003816 61                  <1> 	popa
 10751 00003817 C3                  <1> 	ret
 10752                              <1> 
 10753                              <1> ;=============================================================================
 10754                              <1> ;set_drive_map
 10755                              <1> ;input: bx, cx drive map
 10756                              <1> ;=============================================================================
 10757                              <1> set_drive_map:
 10758 00003818 60                  <1> 	pusha
 10759 00003819 E81800              <1> 	call check_myint13h
 10760 0000381C 7206                <1> 	jc .end
 10761 0000381E B403                <1> 	mov ah, 3
 10762                              <1> 
 10763 00003820 FF1E[A772]          <1> 	call far [myint13h_tmp.edd30_off]
 10764                              <1> .end:
 10765 00003824 61                  <1> 	popa
 10766 00003825 C3                  <1> 	ret
 10767                              <1> 
 10768                              <1> ;=============================================================================
 10769                              <1> ;set_io_ports
 10770                              <1> ;input: bx, cx io ports
 10771                              <1> ;=============================================================================
 10772                              <1> set_io_ports:
 10773 00003826 60                  <1> 	pusha
 10774 00003827 E80A00              <1> 	call check_myint13h
 10775 0000382A 7206                <1> 	jc .end
 10776 0000382C B404                <1> 	mov ah, 4
 10777                              <1> 
 10778 0000382E FF1E[A772]          <1> 	call far [myint13h_tmp.edd30_off]
 10779                              <1> .end:
 10780 00003832 61                  <1> 	popa
 10781 00003833 C3                  <1> 	ret
 10782                              <1> 
 10783                              <1> ;=============================================================================
 10784                              <1> ;check_myint13h ---- check if myint13h is present
 10785                              <1> ;=============================================================================
 10786                              <1> check_myint13h:
 10787 00003834 60                  <1> 	pusha
 10788 00003835 B86666              <1> 	mov ax, 0x6666
 10789 00003838 BB424D              <1> 	mov bx, EDD30_SIG1
 10790 0000383B B94342              <1> 	mov cx, EDD30_SIG2
 10791 0000383E F8                  <1> 	clc
 10792 0000383F CD13                <1> 	int 0x13
 10793 00003841 720C                <1> 	jc .absent
 10794 00003843 81FB4342            <1> 	cmp bx, EDD30_SIG2
 10795 00003847 7506                <1> 	jne .absent
 10796 00003849 81F9424D            <1> 	cmp cx, EDD30_SIG1
 10797 0000384D 7401                <1> 	je .end
 10798                              <1> .absent:
 10799 0000384F F9                  <1> 	stc
 10800                              <1> .end:
 10801 00003850 61                  <1> 	popa
 10802 00003851 C3                  <1> 	ret
 10803                              <1> 
 10804                              <1> module_edd30:
 10805 00003851 <incbin>            <1> incbin "edd30.bin"
 10806                              <1> end_of_mod_edd30:
 10807                                  
 10808                                  ;=============================================================================
 10809                                  ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  DATA AREA  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 10810                                  ;=============================================================================
 10811                                  
 10812                                  %define ROOT_WINDOW_ACTION_NUMBER (main_action_table.end_of_root_window - main_action_table.root_window) / SIZE_OF_STRUC_ACTION
 10813                                  %define BOOT_MENU_ACTION_NUMBER (main_action_table.end_of_boot_menu - main_action_table.boot_menu) / SIZE_OF_STRUC_ACTION
 10814                                  %define MAIN_MENU_ACTION_NUMBER (main_action_table.end_of_main_menu - main_action_table.main_menu) / SIZE_OF_STRUC_ACTION
 10815                                  %define RECORD_MENU_ACTION_NUMBER (main_action_table.end_of_record_menu - main_action_table.record_menu) / SIZE_OF_STRUC_ACTION
 10816                                  %define SYS_MENU_ACTION_NUMBER (main_action_table.end_of_sys_menu - main_action_table.sys_menu) / SIZE_OF_STRUC_ACTION
 10817                                  
 10818                                  %define MAIN_MENU_ITEMS_NUMBER   11
 10819                                  %define RECORD_MENU_ITEMS_NUMBER 16
 10820                                  %define SYS_MENU_ITEMS_NUMBER    18
 10821                                  ;=============================================================================
 10822                                  ;  Windows data
 10823                                  ;=============================================================================
 10824                                  main_windows_data:
 10825                                  .root_window    istruc struc_window
 10826 000043E2 0900                    		at struc_window.flags,                  dw WINFLAG_OPEN | WINFLAG_NO_FOCUS
 10827 000043E4 0000                    		at struc_window.title,                  dw 0
 10828 000043E6 0000                    		at struc_window.win_attr,               dw 0
 10829 000043E8 0000                    		at struc_window.win_pos,                dw 0
 10830 000043EA 0000                    		at struc_window.win_size,               dw 0
 10831 000043EC 0000                    		at struc_window.parent_win,             dw 0
 10832 000043EE 0000                    		at struc_window.next_win,               dw 0
 10833 000043F0 0000                    		at struc_window.previous_win,           dw 0
 10834 000043F2 2C00                    		at struc_window.act_num,                dw ROOT_WINDOW_ACTION_NUMBER
 10835 000043F4 [A844]                  		at struc_window.act_table,              dw main_action_table.root_window
 10836 000043F6 [7624]                  		at struc_window.default_event_handle,   dw window_default_event_handle
 10837 000043F8 [8224]                  		at struc_window.event_handle,           dw window_event_handle
 10838 000043FA [3114]                  		at struc_window.draw_body_proc,         dw root_window_draw_body_proc
 10839                                  		iend
 10840                                  
 10841                                  .boot_menu      istruc struc_menu_box
 10842 000043FC F400                    		at struc_window.flags,                  dw WINFLAG_FRAMED | MENUFLAG_SCROLLBAR | MENUFLAG_SINK_UPPER | MENUFLAG_SINK_WIDTH | MENUFLAG_SINK_BOTTOM
 10843 000043FE [5046]                  		at struc_window.title,                  dw str_idx.boot_menu_title
 10844 00004400 F13F                    		at struc_window.win_attr,               dw 0x3FF1
 10845 00004402 0000                    		at struc_window.win_pos,                dw 0
 10846 00004404 0000                    		at struc_window.win_size,               dw 0
 10847 00004406 [E243]                  		at struc_window.parent_win,             dw .root_window
 10848 00004408 0000                    		at struc_window.next_win,               dw 0
 10849 0000440A 0000                    		at struc_window.previous_win,           dw 0
 10850 0000440C 1300                    		at struc_window.act_num,                dw BOOT_MENU_ACTION_NUMBER
 10851 0000440E [8445]                  		at struc_window.act_table,              dw main_action_table.boot_menu
 10852 00004410 [4C21]                  		at struc_window.default_event_handle,   dw menubox_default_event_handle
 10853 00004412 [8224]                  		at struc_window.event_handle,           dw window_event_handle
 10854 00004414 [0F20]                  		at struc_window.draw_body_proc,         dw menubox_draw_body_proc
 10855 00004416 [5246]                  		at struc_menu_box.menu_header,          dw str_idx.boot_menu_header
 10856 00004418 1F                      		at struc_menu_box.menu_header_attr,     db 0x1F
 10857 00004419 707C                    		at struc_menu_box.menu_norm_attr,       dw 0x7C70
 10858 0000441B 0F0C                    		at struc_menu_box.menu_focus_attr,      dw 0x0C0F
 10859 0000441D 0000                                    at struc_menu_box.menu_area_pos,        dw 0
 10860 0000441F 0000                                    at struc_menu_box.menu_area_size,       dw 0
 10861 00004421 3F                      		at struc_menu_box.scrollbar_attr,       db 0x3F
 10862 00004422 00                      		at struc_menu_box.items_num,            db 0
 10863 00004423 00                      		at struc_menu_box.focus_item,           db 0
 10864 00004424 00                      		at struc_menu_box.first_visible_item,   db 0
 10865 00004425 [AF15]                  		at struc_menu_box.item_str_proc,        dw boot_menu_item_str_proc
 10866                                  		iend
 10867                                  
 10868                                  .main_menu      istruc struc_menu_box
 10869 00004427 0400                    		at struc_window.flags,                  dw WINFLAG_FRAMED
 10870 00004429 [C846]                  		at struc_window.title,                  dw str_idx.main_menu_title
 10871 0000442B F130                    		at struc_window.win_attr,               dw 0x30F1
 10872 0000442D 0101                    		at struc_window.win_pos,                dw 0x0101
 10873 0000442F 000D                    		at struc_window.win_size,               db 0, MAIN_MENU_ITEMS_NUMBER+2
 10874 00004431 [FC43]                  		at struc_window.parent_win,             dw .boot_menu
 10875 00004433 0000                    		at struc_window.next_win,               dw 0
 10876 00004435 0000                    		at struc_window.previous_win,           dw 0
 10877 00004437 0B00                    		at struc_window.act_num,                dw MAIN_MENU_ACTION_NUMBER
 10878 00004439 [A844]                  		at struc_window.act_table,              dw main_action_table.main_menu
 10879 0000443B [4C21]                  		at struc_window.default_event_handle,   dw menubox_default_event_handle
 10880 0000443D [8224]                  		at struc_window.event_handle,           dw window_event_handle
 10881 0000443F [0F20]                  		at struc_window.draw_body_proc,	        dw menubox_draw_body_proc
 10882 00004441 0000                    		at struc_menu_box.menu_header,          dw 0
 10883 00004443 3F                      		at struc_menu_box.menu_header_attr,     db 0x3F
 10884 00004444 303C                    		at struc_menu_box.menu_norm_attr,       dw 0x3C30
 10885 00004446 070C                    		at struc_menu_box.menu_focus_attr,      dw 0x0C07
 10886 00004448 0000                                    at struc_menu_box.menu_area_pos,        dw 0
 10887 0000444A 0000                                    at struc_menu_box.menu_area_size,       dw 0
 10888 0000444C 3F                      		at struc_menu_box.scrollbar_attr,       db 0x3F
 10889 0000444D 0B                      		at struc_menu_box.items_num,            db MAIN_MENU_ITEMS_NUMBER
 10890 0000444E 00                      		at struc_menu_box.focus_item,           db 0
 10891 0000444F 00                      		at struc_menu_box.first_visible_item,   db 0
 10892 00004450 [C915]                  		at struc_menu_box.item_str_proc,        dw main_menu_item_str_proc
 10893                                  		iend
 10894                                  
 10895                                  .record_menu    istruc struc_menu_box
 10896 00004452 0400                    		at struc_window.flags,                  dw WINFLAG_FRAMED
 10897 00004454 [E046]                  		at struc_window.title,                  dw str_idx.record_menu_title
 10898 00004456 F130                    		at struc_window.win_attr,               dw 0x30F1
 10899 00004458 0202                    		at struc_window.win_pos,                dw 0x0202
 10900 0000445A 0012                    		at struc_window.win_size,               db 0, RECORD_MENU_ITEMS_NUMBER+2
 10901 0000445C [FC43]                  		at struc_window.parent_win,             dw .boot_menu
 10902 0000445E 0000                    		at struc_window.next_win,               dw 0
 10903 00004460 0000                    		at struc_window.previous_win,           dw 0
 10904 00004462 1000                    		at struc_window.act_num,                dw RECORD_MENU_ACTION_NUMBER
 10905 00004464 [DF44]                  		at struc_window.act_table,              dw main_action_table.record_menu
 10906 00004466 [4C21]                  		at struc_window.default_event_handle,   dw menubox_default_event_handle
 10907 00004468 [8224]                  		at struc_window.event_handle,           dw window_event_handle
 10908 0000446A [0F20]                  		at struc_window.draw_body_proc,	        dw menubox_draw_body_proc
 10909 0000446C 0000                    		at struc_menu_box.menu_header,          dw 0
 10910 0000446E 3F                      		at struc_menu_box.menu_header_attr,     db 0x3F
 10911 0000446F 303C                    		at struc_menu_box.menu_norm_attr,       dw 0x3C30
 10912 00004471 070C                    		at struc_menu_box.menu_focus_attr,      dw 0x0C07
 10913 00004473 0000                                    at struc_menu_box.menu_area_pos,        dw 0
 10914 00004475 0000                                    at struc_menu_box.menu_area_size,       dw 0
 10915 00004477 3F                      		at struc_menu_box.scrollbar_attr,       db 0x3F
 10916 00004478 10                      		at struc_menu_box.items_num,            db RECORD_MENU_ITEMS_NUMBER
 10917 00004479 00                      		at struc_menu_box.focus_item,           db 0
 10918 0000447A 00                      		at struc_menu_box.first_visible_item,   db 0
 10919 0000447B [CE15]                  		at struc_menu_box.item_str_proc,        dw record_menu_item_str_proc
 10920                                  		iend
 10921                                  
 10922                                  .sys_menu       istruc struc_menu_box
 10923 0000447D 0400                    		at struc_window.flags,                  dw WINFLAG_FRAMED
 10924 0000447F [0247]                  		at struc_window.title,                  dw str_idx.sys_menu_title
 10925 00004481 F130                    		at struc_window.win_attr,               dw 0x30F1
 10926 00004483 0303                    		at struc_window.win_pos,                dw 0x0303
 10927 00004485 0014                    		at struc_window.win_size,               db 0, SYS_MENU_ITEMS_NUMBER+2
 10928 00004487 [FC43]                  		at struc_window.parent_win,             dw .boot_menu
 10929 00004489 0000                    		at struc_window.next_win,               dw 0
 10930 0000448B 0000                    		at struc_window.previous_win,           dw 0
 10931 0000448D 0F00                    		at struc_window.act_num,                dw SYS_MENU_ACTION_NUMBER
 10932 0000448F [2F45]                  		at struc_window.act_table,              dw main_action_table.sys_menu
 10933 00004491 [4C21]                  		at struc_window.default_event_handle,   dw menubox_default_event_handle
 10934 00004493 [8224]                  		at struc_window.event_handle,           dw window_event_handle
 10935 00004495 [0F20]                  		at struc_window.draw_body_proc,         dw menubox_draw_body_proc
 10936 00004497 0000                    		at struc_menu_box.menu_header,          dw 0
 10937 00004499 3F                      		at struc_menu_box.menu_header_attr,     db 0x3F
 10938 0000449A 303C                    		at struc_menu_box.menu_norm_attr,       dw 0x3C30
 10939 0000449C 070C                    		at struc_menu_box.menu_focus_attr,      dw 0x0C07
 10940 0000449E 0000                                    at struc_menu_box.menu_area_pos,        dw 0
 10941 000044A0 0000                                    at struc_menu_box.menu_area_size,       dw 0
 10942 000044A2 3F                      		at struc_menu_box.scrollbar_attr,       db 0x3F
 10943 000044A3 12                      		at struc_menu_box.items_num,            db SYS_MENU_ITEMS_NUMBER
 10944 000044A4 00                      		at struc_menu_box.focus_item,           db 0
 10945 000044A5 00                      		at struc_menu_box.first_visible_item,   db 0
 10946 000044A6 [D315]                  		at struc_menu_box.item_str_proc,        dw sys_menu_item_str_proc
 10947                                  		iend
 10948                                  
 10949                                  .end_of_windows_data:
 10950                                  
 10951                                  ;=============================================================================
 10952                                  ;  Action table
 10953                                  ;=============================================================================
 10954                                  main_action_table:
 10955                                  
 10956                                  .root_window:
 10957                                  
 10958                                  .main_menu:
 10959 000044A8 08                              db  ACTFLAG_REDRAW_SCR
 10960 000044A9 003B                            dw  kbF1
 10961 000044AB [FB0A]                          dw  main_show_help
 10962                                  
 10963 000044AD 08                              db  ACTFLAG_REDRAW_SCR
 10964 000044AE 005E                            dw  kbCtrlF1
 10965 000044B0 [110B]                          dw  main_show_about
 10966                                  
 10967 000044B2 88                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_SECURITY
 10968 000044B3 003C                            dw  kbF2
 10969 000044B5 [5C0B]                          dw  main_save_changes
 10970                                  
 10971 000044B7 54                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_AUTH_RECORD | ACTFLAG_CHK_RECNUM
 10972 000044B8 0000                            dw  0
 10973 000044BA [DF0D]                          dw  main_boot_it
 10974                                  
 10975 000044BC 04                              db  ACTFLAG_REDRAW_WIN
 10976 000044BD 0000                            dw  0
 10977 000044BF [A911]                          dw  main_boot_prev_in_menu
 10978                                  
 10979 000044C1 00                              db  0
 10980 000044C2 0000                            dw  0
 10981 000044C4 0000                            dw  0
 10982                                  
 10983 000044C6 08                              db  ACTFLAG_REDRAW_SCR
 10984 000044C7 0013                            dw  kbAltR
 10985 000044C9 [2E0B]                          dw  main_show_record_menu
 10986                                  
 10987 000044CB 08                              db  ACTFLAG_REDRAW_SCR
 10988 000044CC 001F                            dw  kbAltS
 10989 000044CE [350B]                          dw  main_show_sys_menu
 10990                                  
 10991 000044D0 00                              db  0
 10992 000044D1 0000                            dw  0
 10993 000044D3 0000                            dw  0
 10994                                  
 10995 000044D5 24                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_AUTH_ROOT
 10996 000044D6 1110                            dw  kbCtrlQ
 10997 000044D8 [0A0E]                          dw  main_return_to_bios
 10998                                  
 10999 000044DA 00                              db  0
 11000 000044DB 008A                            dw  kbCtrlF12
 11001 000044DD [8611]                          dw  main_power_off
 11002                                  
 11003                                  .end_of_main_menu
 11004                                  
 11005                                  .record_menu:
 11006 000044DF 04                              db  ACTFLAG_REDRAW_WIN
 11007 000044E0 2F35                            dw  kbSlash
 11008 000044E2 [9210]                          dw  main_show_record_info
 11009                                  
 11010 000044E4 D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11011 000044E5 003D                            dw  kbF3
 11012 000044E7 [720B]                          dw  main_change_name
 11013                                  
 11014 000044E9 D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11015 000044EA 0043                            dw  kbF9
 11016 000044EC [F90B]                          dw  main_change_record_password
 11017                                  
 11018 000044EE D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11019 000044EF 131F                            dw  kbCtrlS
 11020 000044F1 [DB0E]                          dw  main_toggle_schedule
 11021                                  
 11022 000044F3 D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11023 000044F4 0B25                            dw  kbCtrlK
 11024 000044F6 [A90F]                          dw  main_toggle_keystrokes
 11025                                  
 11026 000044F8 00                              db  0
 11027 000044F9 0000                            dw  0
 11028 000044FB 0000                            dw  0
 11029                                  
 11030 000044FD 08                              db  ACTFLAG_REDRAW_SCR 
 11031 000044FE 003E                            dw  kbF4
 11032 00004500 [820C]                          dw  main_mark_active
 11033                                  
 11034 00004502 08                              db  ACTFLAG_REDRAW_SCR
 11035 00004503 003F                            dw  kbF5
 11036 00004505 [DA0C]                          dw  main_toggle_hidden
 11037                                  
 11038 00004507 08                              db  ACTFLAG_REDRAW_SCR
 11039 00004508 0040                            dw  kbF6
 11040 0000450A [560C]                          dw  main_toggle_auto_active
 11041                                  
 11042 0000450C 08                              db  ACTFLAG_REDRAW_SCR
 11043 0000450D 0041                            dw  kbF7
 11044 0000450F [6C0C]                          dw  main_toggle_auto_hide
 11045                                  
 11046 00004511 08                              db  ACTFLAG_REDRAW_SCR
 11047 00004512 182D                            dw  kbCtrlX
 11048 00004514 [BD0E]                          dw  main_toggle_swapid
 11049                                  
 11050 00004516 00                              db  0
 11051 00004517 0000                            dw  0
 11052 00004519 0000                            dw  0
 11053                                  
 11054 0000451B D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11055 0000451C 0420                            dw  kbCtrlD
 11056 0000451E [020D]                          dw  main_delete_record
 11057                                  
 11058 00004520 D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11059 00004521 1019                            dw  kbCtrlP
 11060 00004523 [160E]                          dw  main_dup_record
 11061                                  
 11062 00004525 98                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY
 11063 00004526 1516                            dw  kbCtrlU
 11064 00004528 [6B0E]                          dw  main_move_record_up
 11065                                  
 11066 0000452A 98                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY
 11067 0000452B 0E31                            dw  kbCtrlN
 11068 0000452D [390E]                          dw  main_move_record_down
 11069                                  
 11070                                  
 11071                                  .end_of_record_menu
 11072                                  
 11073                                  .sys_menu:
 11074 0000452F 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11075 00004530 0044                            dw  kbF10
 11076 00004532 [AC0B]                          dw  main_change_root_password
 11077                                  
 11078 00004534 A8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT | ACTFLAG_AUTH_SECURITY
 11079 00004535 0067                            dw  kbCtrlF10
 11080 00004537 [960B]                          dw  main_login_as_root
 11081                                  
 11082 00004539 88                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_SECURITY
 11083 0000453A 0071                            dw  kbAltF10
 11084 0000453C [A20B]                          dw  main_change_security_mode
 11085                                  
 11086 0000453E 00                              db  0
 11087 0000453F 0000                            dw  0
 11088 00004541 0000                            dw  0
 11089                                  
 11090 00004543 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11091 00004544 0042                            dw  kbF8
 11092 00004546 [3C0C]                          dw  main_set_default_record
 11093                                  
 11094 00004548 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11095 00004549 005B                            dw  kbShiftF8
 11096 0000454B [4C0C]                          dw  main_unset_default_record
 11097                                  
 11098 0000454D 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11099 0000454E 1414                            dw  kbCtrlT
 11100 00004550 [AF0D]                          dw  main_set_delay_time
 11101                                  
 11102 00004552 08                              db  ACTFLAG_REDRAW_SCR
 11103 00004553 0621                            dw  kbCtrlF
 11104 00004555 [8911]                          dw  main_change_bootmenu_style
 11105                                  
 11106 00004557 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11107 00004558 0C26                            dw  kbCtrlL
 11108 0000455A [9F11]                          dw  main_toggle_rem_last
 11109                                  
 11110 0000455C 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11111 0000455D 0000                            dw  0
 11112 0000455F [B711]                          dw  main_toggle_int13ext
 11113                                  
 11114 00004561 00                              db  0
 11115 00004562 0000                            dw  0
 11116 00004564 0000                            dw  0
 11117                                  
 11118 00004566 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11119 00004567 0917                            dw  kbCtrlI
 11120 00004569 [540D]                          dw  main_rescan_all_records
 11121                                  
 11122 0000456B 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11123 0000456C 0823                            dw  kbCtrlH
 11124 0000456E [5B0D]                          dw  main_rescan_all_partitions
 11125                                  
 11126 00004570 08                              db  ACTFLAG_REDRAW_SCR
 11127 00004571 0000                            dw  0
 11128 00004573 [D411]                          dw  main_set_cdrom_ioports
 11129                                  
 11130                                          ;db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11131                                          ;dw  0
 11132                                          ;dw  main_set_y2k_year
 11133                                  
 11134 00004575 00                              db  0
 11135 00004576 0000                            dw  0
 11136 00004578 0000                            dw  0
 11137                                  
 11138                                          ;db  ACTFLAG_REDRAW_SCR
 11139                                          ;dw  0
 11140                                          ;dw  main_install_sbm
 11141                                  
 11142                                          ;db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11143                                          ;dw  0
 11144                                          ;dw  main_uninstall_sbm
 11145                                  
 11146                                  .end_of_sys_menu
 11147                                  
 11148 0000457A 08                              db  ACTFLAG_REDRAW_SCR
 11149 0000457B 01F4                            dw  EVENT_REDRAW_ROOT
 11150 0000457D 0000                            dw  0
 11151                                  
 11152 0000457F 18                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM
 11153 00004580 02F4                            dw  EVENT_BOOT_DEFAULT
 11154 00004582 [8817]                          dw  main_boot_default
 11155                                  
 11156                                  .end_of_root_window
 11157                                          
 11158                                  .boot_menu:
 11159 00004584 08                              db  ACTFLAG_REDRAW_SCR
 11160 00004585 0098                            dw  kbEnhAltUp
 11161 00004587 [EC20]                          dw  menubox_focus_up
 11162                                  
 11163 00004589 08                              db  ACTFLAG_REDRAW_SCR
 11164 0000458A 00A0                            dw  kbEnhAltDown
 11165 0000458C [1821]                          dw  menubox_focus_down
 11166                                  
 11167 0000458E 04                              db  ACTFLAG_REDRAW_WIN
 11168 0000458F 3F35                            dw  kbQuestion
 11169 00004591 [9210]                          dw  main_show_record_info
 11170                                  
 11171 00004593 D4                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11172 00004594 003D                            dw  kbF3
 11173 00004596 [720B]                          dw  main_change_name
 11174                                  
 11175 00004598 D4                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11176 00004599 0043                            dw  kbF9
 11177 0000459B [F90B]                          dw  main_change_record_password
 11178                                  
 11179 0000459D D4                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11180 0000459E 131F                            dw  kbCtrlS
 11181 000045A0 [DB0E]                          dw  main_toggle_schedule
 11182                                  
 11183 000045A2 D4                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11184 000045A3 0B25                            dw  kbCtrlK
 11185 000045A5 [A90F]                          dw  main_toggle_keystrokes
 11186                                  
 11187 000045A7 D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11188 000045A8 003E                            dw  kbF4
 11189 000045AA [820C]                          dw  main_mark_active
 11190                                  
 11191 000045AC D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11192 000045AD 003F                            dw  kbF5
 11193 000045AF [DA0C]                          dw  main_toggle_hidden
 11194                                  
 11195 000045B1 D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11196 000045B2 0040                            dw  kbF6
 11197 000045B4 [560C]                          dw  main_toggle_auto_active
 11198                                  
 11199 000045B6 D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11200 000045B7 0041                            dw  kbF7
 11201 000045B9 [6C0C]                          dw  main_toggle_auto_hide
 11202                                  
 11203 000045BB D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11204 000045BC 182D                            dw  kbCtrlX
 11205 000045BE [BD0E]                          dw  main_toggle_swapid
 11206                                  
 11207 000045C0 D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11208 000045C1 0420                            dw  kbCtrlD
 11209 000045C3 [020D]                          dw  main_delete_record
 11210                                  
 11211 000045C5 D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11212 000045C6 1019                            dw  kbCtrlP
 11213 000045C8 [160E]                          dw  main_dup_record
 11214                                  
 11215 000045CA 02                              db  ACTFLAG_REDRAW_BODY
 11216 000045CB 1516                            dw  kbCtrlU
 11217 000045CD [6B0E]                          dw  main_move_record_up
 11218                                  
 11219 000045CF 02                              db  ACTFLAG_REDRAW_BODY
 11220 000045D0 0E31                            dw  kbCtrlN
 11221 000045D2 [390E]                          dw  main_move_record_down
 11222                                  
 11223 000045D4 54                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_AUTH_RECORD | ACTFLAG_CHK_RECNUM
 11224 000045D5 0D1C                            dw  kbEnter
 11225 000045D7 [DF0D]                          dw  main_boot_it
 11226                                  
 11227 000045D9 14                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_CHK_RECNUM
 11228 000045DA 1B01                            dw  kbEsc
 11229 000045DC [8817]                          dw  main_boot_default
 11230                                  
 11231 000045DE 08                              db  ACTFLAG_REDRAW_SCR
 11232 000045DF 08F2                            dw  EVENT_ALT_RELEASE
 11233 000045E1 [270B]                          dw  main_show_main_menu
 11234                                  .end_of_boot_menu
 11235                                  
 11236                                  
 11237                                  
 11238                                  
 11239                                  ;=============================================================================
 11240                                  ;  include the language theme, specified as macro definition
 11241                                  ;=============================================================================
 11242                                  theme_start:
 11243                                  
 11244                                  %ifdef THEME_ZH
 11245                                   %include "themes/theme-zh.asm"
 11246                                  %elifdef THEME_DE
 11247                                   %include "themes/theme-de.asm"
 11248                                  %elifdef THEME_HU
 11249                                   %include "themes/theme-hu.asm"
 11250                                  %elifdef THEME_RU
 11251                                   %include "themes/theme-ru.asm"
 11252                                  %elifdef THEME_CZ
 11253                                   %include "themes/theme-cz.asm"
 11254                                  %elifdef THEME_ES
 11255                                   %include "themes/theme-es.asm"
 11256                                  %elifdef THEME_FR
 11257                                   %include "themes/theme-fr.asm"
 11258                                  %elifdef THEME_PT
 11259                                   %include "themes/theme-pt.asm"
 11260                                  %else
 11261                                   %include "themes/theme-us.asm"
 11262                              <1> ; asmsyntax=nasm
 11263                              <1> ;
 11264                              <1> ; theme-us.asm
 11265                              <1> ;
 11266                              <1> ; English theme data for Smart Boot Manager
 11267                              <1> ;
 11268                              <1> ; Copyright (C) 2001, Suzhe. See file COPYING for details.
 11269                              <1> ;
 11270                              <1> 
 11271                              <1> ; some constant used in this theme.
 11272                              <1> 
 11273                              <1> ; PLEASE DO NOT CHANGE THESE, UNLESS YOU KNOW WHAT YOU ARE DOING!
 11274                              <1> %define SBMT_MAGIC      0x544D4253         ; magic number of
 11275                              <1>                                            ; Smart Boot Manager theme.
 11276                              <1> %define SBMT_VERSION    0x035A             ; version of theme ( 3.90 ).
 11277                              <1> 
 11278                              <1> start_font              equ     219
 11279                              <1> brand_char1             equ     start_font
 11280                              <1> brand_char2             equ     start_font+1
 11281                              <1> brand_char3             equ     start_font+2
 11282                              <1> brand_char4             equ     start_font+3
 11283                              <1> 
 11284                              <1> start_of_theme:
 11285                              <1> 
 11286                              <1> ;!!! PLEASE DON NOT CHANGE THE SIZE AND ORDER OF FOLLOWING DATA !!!
 11287                              <1> 
 11288                              <1> ;=============================================================================
 11289                              <1> ;the header of Smart Boot Manager theme ( 16 bytes )
 11290                              <1> ;=============================================================================
 11291 000045E3 53424D54            <1> theme_magic             dd  SBMT_MAGIC ; magic number = 'SBMT', 4 bytes.
 11292                              <1>                                        ; it's abbr. of 'Smart Boot Manager Theme'
 11293 000045E7 0000                <1>                         dw  0          ;
 11294 000045E9 656E2D555300        <1> theme_lang              db  'en-US',0  ; language of this theme, 6 bytes.
 11295 000045EF 5A03                <1> theme_version           dw  SBMT_VERSION ; version, high byte is major version,
 11296                              <1>                                          ; low byte is minor version. should be
 11297                              <1>                                          ; equal to the version of Smart Boot Manager.
 11298 000045F1 AA0F                <1> theme_size              dw  (end_of_theme - start_of_theme)
 11299                              <1>                                          ; size of the theme (bytes).
 11300                              <1> 
 11301                              <1> ;=============================================================================
 11302                              <1> ; fix size data and index tables of variable size data
 11303                              <1> ;=============================================================================
 11304                              <1> 
 11305 000045F3 FF                  <1> video_mode              db  0xff        ; 0 = 90x25, 0xff = 80x25
 11306                              <1>                                         ; do not use other value!!!
 11307                              <1> 
 11308 000045F4 10                  <1> keyboard_type           db  0x10        ; = 0x10 means use enhanced keyboard
 11309                              <1>                                         ; = 0x00 means use normal keyboard
 11310                              <1>                                         ; CAUTION: cannot use other value!!!
 11311                              <1> 
 11312 000045F5 01                  <1> show_date_method        db  1           ; the method of show date:
 11313                              <1>                                         ; 0 = don't show date
 11314                              <1>                                         ; 1 = day mm-dd-yyyy
 11315                              <1>                                         ; 2 = day yyyy-mm-dd
 11316                              <1>                                         ; 3 = day dd-mm-yyyy
 11317                              <1> 
 11318 000045F6 01                  <1> show_time_method        db  1           ; the method of show time:
 11319                              <1>                                         ; 0 = don't show time
 11320                              <1>                                         ; 1 = hh:mm (24 hours)
 11321                              <1> 
 11322 000045F7 79                  <1> yes_key_lower	        db  'y'
 11323 000045F8 59                  <1> yes_key_upper	        db  'Y'
 11324                              <1>  
 11325                              <1> ; position of screen elements, low byte = column, high byte = row
 11326                              <1> position:
 11327 000045F9 FF00                <1> .brand                  dw  0x00FF      ; start position of brand icon
 11328                              <1>                                         ; low = column, high = row
 11329                              <1>                                         ; if low = 255 then brand will be
 11330                              <1>                                         ; right justify in the screen.
 11331 000045FB 3700                <1> .date                   dw  0x0037
 11332                              <1> 
 11333 000045FD 4600                <1> .time                   dw  0x0046
 11334                              <1> 
 11335                              <1> ; size of screen elements
 11336                              <1> size:
 11337 000045FF 01                  <1> .copyright              db  1           ; number of rows used by copyright info
 11338 00004600 01                  <1> .hint                   db  1           ; number of rows used by hint info
 11339 00004601 05                  <1> .box_width              db  5           ; the minimal width of info/error/input box
 11340                              <1>                                         ; (when no info string)
 11341 00004602 04                  <1> .box_height             db  4           ; the minimal height of info/error/input box
 11342                              <1>                                         ; (when no info string)
 11343 00004603 0D                  <1> .boot_menu_win_height   db  13          ; the height of the boot menu window
 11344 00004604 0A                  <1> .list_box_win_height    db  10          ; the height of the list box window
 11345                              <1> 
 11346                              <1> ;Black          = 0
 11347                              <1> ;Blue           = 1
 11348                              <1> ;Green          = 2
 11349                              <1> ;Cyan           = 3
 11350                              <1> ;Red            = 4
 11351                              <1> ;Violet         = 5
 11352                              <1> ;Yellow (brown) = 6
 11353                              <1> ;White          = 7
 11354                              <1> ;Black (gray)   = 8
 11355                              <1> ;Intense blue   = 9
 11356                              <1> ;Intense green  = a
 11357                              <1> ;Intense cyan   = b
 11358                              <1> ;Intense red    = c
 11359                              <1> ;Intense violet = d
 11360                              <1> ;Intense yellow = e
 11361                              <1> ;Intense white  = f
 11362                              <1> 
 11363                              <1> ; color of screen elements
 11364                              <1> ; high 4 bits is background color, low 4 bits is foreground color
 11365                              <1> 
 11366                              <1> color:
 11367 00004605 70                  <1> .win_title_inactive     db  0x70        ; title attribute for inactive window.
 11368                              <1> 
 11369                              <1> .boot_menu:
 11370 00004606 3F                  <1> .boot_menu_frame        db  0x3F        ; attributes of boot menu window
 11371 00004607 F1                  <1> .boot_menu_title        db  0xF1        ;
 11372 00004608 1F                  <1> .boot_menu_header       db  0x1F        ;
 11373 00004609 707C                <1> .boot_menu_normal       dw  0x7C70      ;
 11374 0000460B 0F0C                <1> .boot_menu_focus        dw  0x0C0F      ; 
 11375 0000460D 3F                  <1> .boot_menu_scrollbar    db  0x3F        ; scroll bar
 11376                              <1> 
 11377                              <1> .cmd_menu:
 11378 0000460E 30                  <1> .cmd_menu_frame         db  0x30        ;
 11379 0000460F F1                  <1> .cmd_menu_title         db  0xF1        ; the colors used 
 11380 00004610 3F                  <1> .cmd_menu_header        db  0x3F        ;
 11381 00004611 303C                <1> .cmd_menu_normal        dw  0x3C30      ; in command menu
 11382 00004613 070C                <1> .cmd_menu_focus         dw  0x0C07      ;
 11383 00004615 3F                  <1> .cmd_menu_scrollbar     db  0x3F        ;
 11384                              <1> 
 11385                              <1> .list_box:
 11386 00004616 30                  <1> .list_box_frame         db  0x30        ;
 11387 00004617 F1                  <1> .list_box_title         db  0xF1        ; list box
 11388 00004618 1F                  <1> .list_box_header        db  0x1F        ;
 11389 00004619 303C                <1> .list_box_normal        dw  0x3C30      ;
 11390 0000461B 070C                <1> .list_box_focus         dw  0x0C07      ;
 11391 0000461D 3F                  <1> .list_box_scrollbar     db  0x3F        ;
 11392                              <1> 
 11393                              <1> .input_box:
 11394 0000461E B0                  <1> .input_box_frame        db  0xB0        ;
 11395 0000461F F1                  <1> .input_box_title        db  0xF1        ; input box
 11396 00004620 B0                  <1> .input_box_msg          db  0xB0        ;
 11397                              <1> 
 11398                              <1> .error_box:
 11399 00004621 CF                  <1> .error_box_frame        db  0xCF        ;
 11400 00004622 F1                  <1> .error_box_title        db  0xF1        ; error box
 11401 00004623 CF                  <1> .error_box_msg          db  0xCF        ;
 11402                              <1> 
 11403                              <1> .info_box:
 11404 00004624 B0                  <1> .info_box_frame         db  0xB0        ;
 11405 00004625 F1                  <1> .info_box_title         db  0xF1        ; info box
 11406 00004626 B0                  <1> .info_box_msg           db  0xB0        ;
 11407                              <1> 
 11408                              <1> .help_win:
 11409 00004627 3F                  <1> .help_win_frame         db  0x3F        ;
 11410 00004628 F1                  <1> .help_win_title         db  0xF1        ; help window
 11411 00004629 30                  <1> .help_msg               db  0x30        ;
 11412                              <1> 
 11413                              <1> .about_win:
 11414 0000462A 3F                  <1> .about_win_frame        db  0x3F        ;
 11415 0000462B F1                  <1> .about_win_title        db  0xF1        ; about window
 11416 0000462C 3E                  <1> .about_msg              db  0x3E        ;
 11417                              <1> 
 11418 0000462D 70                  <1> .delay_time             db  0x70        ; delay time
 11419 0000462E 00                  <1> .background             db  0x00        ; background (if no background icon)
 11420 0000462F 7074                <1> .copyright              dw  0x7470      ; copyright string
 11421 00004631 7074                <1> .hint                   dw  0x7470      ; hint string
 11422 00004633 7C                  <1> .knl_flags              db  0x7C        ; the color of kernal fags.
 11423 00004634 70                  <1> .knl_drvid              db  0x70        ; the color of kernel drive id.
 11424 00004635 70                  <1> .date                   db  0x70        ; color of date string
 11425 00004636 70                  <1> .time                   db  0x70        ; color of time string
 11426                              <1> 
 11427                              <1> ; icon data
 11428                              <1> icon:
 11429 00004637 0401                <1> .brand_size         dw  0x0104              ; the size of brand icon,
 11430                              <1>                                             ; high byte = row, low byte = col.
 11431 00004639 [4047]              <1> .brand              dw  icon_data.brand     ; offset of brand icon data, set to
 11432                              <1>                                             ; zero if no brand icon.
 11433                              <1> 
 11434 0000463B 0401                <1> .background_size    dw  0x0104              ; the size of background icon,
 11435                              <1>                                             ; high byte = row, low byte = col.
 11436 0000463D [4847]              <1> .background         dw  icon_data.background; offset of background icon data,
 11437                              <1>                                             ; set to zero if no background icon.
 11438                              <1> 
 11439                              <1> ; font data
 11440                              <1> font:
 11441 0000463F 0400                <1> .number             dw  (font_data.end-font_data)/17
 11442                              <1>                                             ; number of chars to be replaced,
 11443                              <1>                                             ; should <= (256 - start).
 11444 00004641 [5047]              <1> .data               dw  font_data           ; offset of font set data, set to
 11445                              <1>                                             ; zero if no font to be replaced.
 11446                              <1> 
 11447                              <1> ; chars used by window frame
 11448                              <1> frame_char:
 11449 00004643 20                  <1> .top                db     0x20            ; top horizontal
 11450 00004644 CD                  <1> .bottom             db     0xCD            ; bottom horiztontal
 11451 00004645 BA                  <1> .left               db     0xBA            ; left vertical
 11452 00004646 BA                  <1> .right              db     0xBA            ; right vertical
 11453 00004647 C9                  <1> .tl_corner          db     0xC9            ; top left corner
 11454 00004648 BB                  <1> .tr_corner          db     0xBB            ; top right corner
 11455 00004649 C8                  <1> .bl_corner          db     0xC8            ; bottom left corner
 11456 0000464A BC                  <1> .br_corner          db     0xBC            ; bottom right corner
 11457                              <1> 
 11458                              <1> ; how to draw window frame
 11459 0000464B 01                  <1> draw_frame_method   db  1          ; = 0 means draw all frame using frame attr.
 11460                              <1>                                    ; = 1 means draw top horizontal line using
 11461                              <1>                                    ;     title attr.
 11462                              <1>                                    ; = 2 means draw top corner and horizontal
 11463                              <1>                                    ;     line using title attr.
 11464                              <1> 
 11465                              <1> ; keymap data
 11466                              <1> keymap:                                  ; entry of keymap
 11467 0000464C 0000                <1> .number             dw  (keymap_data.end-keymap_data)/4
 11468                              <1>                                            ; number of keymap entries
 11469 0000464E [9447]              <1> .data               dw  keymap_data      ; pointer to keymap
 11470                              <1> 
 11471                              <1> ; index table of strings
 11472                              <1> str_idx:
 11473 00004650 [9447]              <1> .boot_menu_title                dw  string.boot_menu_title
 11474 00004652 [9E47]              <1> .boot_menu_header               dw  string.boot_menu_header
 11475 00004654 [AA47]              <1> .boot_menu_header_noflags       dw  string.boot_menu_header_noflags
 11476 00004656 [B247]              <1> .boot_menu_header_nonumber      dw  string.boot_menu_header_nonumber
 11477 00004658 [BB47]              <1> .boot_menu_header_notype        dw  string.boot_menu_header_notype
 11478                              <1> 
 11479 0000465A [C247]              <1> .about              dw  string.about
 11480 0000465C [C847]              <1> .error              dw  string.error
 11481 0000465E [CE47]              <1> .help               dw  string.help
 11482 00004660 [D347]              <1> .info               dw  string.info
 11483 00004662 [DE47]              <1> .input              dw  string.input
 11484                              <1> 
 11485 00004664 [E447]              <1> .delay_time         dw  string.delay_time
 11486 00004666 [F147]              <1> .name               dw  string.name
 11487 00004668 [F847]              <1> .new_root_passwd    dw  string.new_root_passwd
 11488 0000466A [FC47]              <1> .root_passwd        dw  string.root_passwd
 11489 0000466C [0C48]              <1> .new_record_passwd  dw  string.new_record_passwd
 11490 0000466E [1048]              <1> .record_passwd      dw  string.record_passwd
 11491 00004670 [2248]              <1> .retype_passwd      dw  string.retype_passwd
 11492 00004672 [3448]              <1> .input_schedule     dw  string.input_schedule
 11493 00004674 [5248]              <1> .input_keystrokes   dw  string.input_keystrokes
 11494 00004676 [9E48]              <1> .key_count          dw  string.key_count
 11495 00004678 [AC48]              <1> .io_port            dw  string.io_port
 11496 0000467A [C948]              <1> .year               dw  string.year
 11497                              <1> 
 11498 0000467C [D048]              <1> .drive_id           dw  string.drive_id
 11499 0000467E [DE48]              <1> .part_id            dw  string.part_id
 11500 00004680 [EB48]              <1> .record_type        dw  string.record_type
 11501 00004682 [FA48]              <1> .record_name        dw  string.record_name
 11502 00004684 [0949]              <1> .auto_active        dw  string.auto_active
 11503 00004686 [1949]              <1> .active             dw  string.active
 11504 00004688 [2649]              <1> .auto_hide          dw  string.auto_hide
 11505 0000468A [3549]              <1> .hidden             dw  string.hidden
 11506 0000468C [4249]              <1> .swap_drv           dw  string.swap_drv
 11507 0000468E [5149]              <1> .logical            dw  string.logical
 11508 00004690 [5E49]              <1> .key_strokes        dw  string.key_strokes
 11509 00004692 [6E49]              <1> .password           dw  string.password
 11510 00004694 [7B49]              <1> .schedule           dw  string.schedule
 11511 00004696 [8A49]              <1> .yes                dw  string.yes
 11512 00004698 [8E49]              <1> .no                 dw  string.no
 11513                              <1> 
 11514 0000469A [9249]              <1> .copyright          dw  string.copyright
 11515 0000469C [C849]              <1> .hint               dw  string.hint
 11516 0000469E [0F4A]              <1> .about_content      dw  string.about_content
 11517 000046A0 [184B]              <1> .help_content       dw  string.help_content
 11518                              <1> 
 11519 000046A2 [AA4E]              <1> .changes_saved      dw  string.changes_saved
 11520 000046A4 [B94E]              <1> .passwd_changed     dw  string.passwd_changed
 11521 000046A6 [CB4E]              <1> .ask_save_changes   dw  string.ask_save_changes
 11522                              <1> 
 11523 000046A8 [E34E]              <1> .wrong_passwd       dw  string.wrong_passwd
 11524 000046AA [F34E]              <1> .disk_error         dw  string.disk_error
 11525 000046AC [024F]              <1> .mark_act_failed    dw  string.mark_act_failed
 11526 000046AE [164F]              <1> .toggle_hid_failed  dw  string.toggle_hid_failed
 11527 000046B0 [2A4F]              <1> .no_system          dw  string.no_system
 11528 000046B2 [5D4F]              <1> .invalid_record     dw  string.invalid_record
 11529 000046B4 [724F]              <1> .invalid_schedule   dw  string.invalid_schedule
 11530 000046B6 [894F]              <1> .inst_confirm       dw  string.inst_confirm
 11531 000046B8 [B84F]              <1> .inst_ok            dw  string.inst_ok
 11532 000046BA [D44F]              <1> .inst_abort         dw  string.inst_abort
 11533 000046BC [EC4F]              <1> .uninst_confirm     dw  string.uninst_confirm
 11534 000046BE [1250]              <1> .uninst_ok          dw  string.uninst_ok
 11535 000046C0 [4C50]              <1> .uninst_abort       dw  string.uninst_abort
 11536 000046C2 [6650]              <1> .confirm            dw  string.confirm
 11537 000046C4 [8F50]              <1> .no_sbml            dw  string.no_sbml
 11538 000046C6 [C750]              <1> .invalid_ioports    dw  string.invalid_ioports
 11539                              <1> 
 11540                              <1> ; command menu str_idx
 11541                              <1> ; main menu
 11542 000046C8 [DA50]              <1> .main_menu_title    dw string.main_menu_title
 11543                              <1> .main_menu_strings:
 11544 000046CA [E450]              <1>                     dw string.main_menu_help
 11545 000046CC [FA50]              <1>                     dw string.main_menu_about
 11546 000046CE [7E51]              <1>                     dw string.main_menu_save
 11547 000046D0 [1051]              <1>                     dw string.main_menu_bootit
 11548 000046D2 [1851]              <1>                     dw string.main_menu_bootprev
 11549 000046D4 [9451]              <1>                     dw string.main_menu_bar
 11550 000046D6 [5651]              <1>                     dw string.main_menu_recordset
 11551 000046D8 [6A51]              <1>                     dw string.main_menu_sysset
 11552 000046DA [9451]              <1>                     dw string.main_menu_bar
 11553 000046DC [2A51]              <1>                     dw string.main_menu_quit
 11554 000046DE [4051]              <1>                     dw string.main_menu_poweroff
 11555                              <1> 
 11556                              <1> ; record settings menu
 11557 000046E0 [A851]              <1> .record_menu_title  dw string.record_menu_title
 11558                              <1> .record_menu_strings:
 11559 000046E2 [B851]              <1>                     dw string.record_menu_info
 11560 000046E4 [D151]              <1>                     dw string.record_menu_name
 11561 000046E6 [EA51]              <1>                     dw string.record_menu_passwd
 11562 000046E8 [0352]              <1>                     dw string.record_menu_schedule
 11563 000046EA [1C52]              <1>                     dw string.record_menu_keys
 11564 000046EC [1653]              <1>                     dw string.record_menu_bar
 11565 000046EE [3552]              <1>                     dw string.record_menu_act
 11566 000046F0 [4E52]              <1>                     dw string.record_menu_hide
 11567 000046F2 [6752]              <1>                     dw string.record_menu_autoact
 11568 000046F4 [8052]              <1>                     dw string.record_menu_autohide
 11569 000046F6 [9952]              <1>                     dw string.record_menu_swapdrv
 11570 000046F8 [1653]              <1>                     dw string.record_menu_bar
 11571 000046FA [B252]              <1>                     dw string.record_menu_del
 11572 000046FC [CB52]              <1>                     dw string.record_menu_dup
 11573 000046FE [E452]              <1>                     dw string.record_menu_moveup
 11574 00004700 [FD52]              <1>                     dw string.record_menu_movedown
 11575                              <1> 
 11576                              <1> ; system setting menu
 11577 00004702 [2D53]              <1> .sys_menu_title     dw string.sys_menu_title
 11578                              <1> .sys_menu_strings:
 11579 00004704 [3D53]              <1>                     dw string.sys_menu_rootpasswd
 11580 00004706 [5E53]              <1>                     dw string.sys_menu_admin
 11581 00004708 [7F53]              <1>                     dw string.sys_menu_security
 11582 0000470A [0655]              <1>                     dw string.sys_menu_bar
 11583 0000470C [A053]              <1>                     dw string.sys_menu_setdef
 11584 0000470E [C153]              <1>                     dw string.sys_menu_unsetdef
 11585 00004710 [E253]              <1>                     dw string.sys_menu_delay
 11586 00004712 [0354]              <1>                     dw string.sys_menu_bmstyle
 11587 00004714 [2454]              <1>                     dw string.sys_menu_remlast
 11588 00004716 [4554]              <1>                     dw string.sys_menu_int13ext
 11589 00004718 [0655]              <1>                     dw string.sys_menu_bar
 11590 0000471A [5D54]              <1>                     dw string.sys_menu_rescanall
 11591 0000471C [7E54]              <1>                     dw string.sys_menu_rescanpart
 11592 0000471E [9F54]              <1>                     dw string.sys_menu_set_ioports
 11593 00004720 [B454]              <1>                     dw string.sys_menu_set_y2kfix
 11594 00004722 [0655]              <1>                     dw string.sys_menu_bar
 11595 00004724 [D054]              <1>                     dw string.sys_menu_inst
 11596 00004726 [EA54]              <1>                     dw string.sys_menu_uninst
 11597                              <1> 
 11598 00004728 [2555]              <1> .cdimg_menu_title   dw string.cdimg_menu_title
 11599 0000472A [3755]              <1> .cdimg_menu_strings dw string.cdimg_menu_noemu
 11600 0000472C [4455]              <1>                     dw string.cdimg_menu_120m
 11601 0000472E [5355]              <1>                     dw string.cdimg_menu_144m
 11602 00004730 [6255]              <1>                     dw string.cdimg_menu_288m
 11603                              <1> 
 11604 00004732 [7155]              <1> .sunday             dw string.sunday
 11605 00004734 [7555]              <1> .monday             dw string.monday
 11606 00004736 [7955]              <1> .tuesday            dw string.tuesday
 11607 00004738 [7D55]              <1> .wednesday          dw string.wednesday
 11608 0000473A [8155]              <1> .thursday           dw string.thursday
 11609 0000473C [8555]              <1> .friday             dw string.friday
 11610 0000473E [8955]              <1> .saturday           dw string.saturday
 11611                              <1> 
 11612                              <1> end_of_str_idx:
 11613                              <1> 
 11614                              <1> ;=============================================================================
 11615                              <1> ; variable size data
 11616                              <1> ;=============================================================================
 11617                              <1> 
 11618                              <1> ; icon data
 11619                              <1> 
 11620                              <1> ; two bytes corresponding to a char,
 11621                              <1> ; high byte is color, low byte is char code.
 11622                              <1> icon_data:
 11623                              <1> .brand:
 11624 00004740 DB7CDC7CDD7CDE7C    <1> db  brand_char1, 0x7C, brand_char2, 0x7C, brand_char3, 0x7C, brand_char4, 0x7C
 11625                              <1> 
 11626                              <1> .background:
 11627 00004748 B071B071B071B071    <1> db  0xB0, 0x71, 0xB0, 0x71, 0xB0, 0x71, 0xB0, 0x71
 11628                              <1> 
 11629                              <1> ; font data
 11630                              <1> ; each char occupied 17 bytes
 11631                              <1> ; the first bytes is the ascii code used by this char
 11632                              <1> ; the following 16 bytes is font data
 11633                              <1> ;
 11634                              <1> ; NOTE:
 11635                              <1> ;   Do not replace ascii char 0 and 0x0d, 0x1e and 0x1f,
 11636                              <1> ;   these chars have special use.
 11637                              <1> ;
 11638                              <1> font_data:
 11639 00004750 DB                  <1>   db  start_font
 11640 00004751 00000000070C08080C- <1>   db  0x00,0x00,0x00,0x00,0x07,0x0c,0x08,0x08,0x0c,0x07,0x00,0x00,0x00,0x00,0xfe,0x00
 11641 0000475A 0700000000FE00      <1>
 11642 00004761 DC                  <1>   db  start_font+1
 11643 00004762 01010101FD011F1F03- <1>   db  0x01,0x01,0x01,0x01,0xfd,0x01,0x1f,0x1f,0x03,0xf7,0x0d,0x19,0x31,0x61,0xff,0xff
 11644 0000476B F70D193161FFFF      <1>
 11645 00004772 DD                  <1>   db  start_font+2
 11646 00004773 80808080BF80F0F898- <1>   db  0x80,0x80,0x80,0x80,0xbf,0x80,0xf0,0xf8,0x98,0x9b,0x98,0x98,0x98,0x98,0x9e,0x9e
 11647 0000477C 9B989898989E9E      <1>
 11648 00004783 DE                  <1>   db  start_font+3
 11649 00004784 00000000FF00000000- <1>   db  0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0xf0,0x18,0x08,0x08,0x18,0xf0,0x00
 11650 0000478D F018080818F000      <1>
 11651                              <1> .end:
 11652                              <1> 
 11653                              <1> ; keymap
 11654                              <1> ; each entry has two words, the first is original keycode, 
 11655                              <1> ; the second is new keycode.
 11656                              <1> keymap_data:
 11657                              <1> %ifdef KEYMAP_AZERTY
 11658                              <1>   %include "azerty.kbd"
 11659                              <1> %elifdef KEYMAP_QWERTZ
 11660                              <1>   %include "qwertz.kbd"
 11661                              <1> %elifdef KEYMAP_DVORAK
 11662                              <1>   %include "dvorak.kbd"
 11663                              <1> %elifdef KEYMAP_DVORAK_ANSI
 11664                              <1>   %include "dvorak-ansi.kbd"
 11665                              <1> %endif
 11666                              <1> .end:
 11667                              <1> 
 11668                              <1> ; strings
 11669                              <1> ; all strings are zero ending,
 11670                              <1> ; use 0x0d to break string into multi-lines.
 11671                              <1> string:
 11672                              <1> ; used in main window and boot menu.
 11673 00004794 426F6F74204D656E75- <1> .boot_menu_title                db  'Boot Menu',0
 11674 0000479D 00                  <1>
 11675 0000479E 2020202020466C6167- <1> .boot_menu_header               db  '     Flags  '
 11676 000047A7 732020              <1>
 11677 000047AA 20204E756D626572    <1> .boot_menu_header_noflags       db  '  Number'
 11678 000047B2 202054797065202020  <1> .boot_menu_header_nonumber      db  '  Type   '
 11679 000047BB 20204E616D6500      <1> .boot_menu_header_notype        db  '  Name',0
 11680                              <1> 
 11681                              <1> ; window titles.
 11682 000047C2 41626F757400        <1> .about                          db  'About',0
 11683 000047C8 4572726F7200        <1> .error                          db  'Error',0
 11684 000047CE 48656C7000          <1> .help                           db  'Help',0
 11685 000047D3 496E666F6D6174696F- <1> .info                           db  'Infomation',0
 11686 000047DC 6E00                <1>
 11687 000047DE 496E70757400        <1> .input                          db  'Input',0
 11688                              <1> 
 11689                              <1> ; used in input boxes.
 11690 000047E4 44656C61792074696D- <1> .delay_time                     db  'Delay time: ',0
 11691 000047ED 653A2000            <1>
 11692 000047F1 4E616D653A2000      <1> .name                           db  'Name: ',0
 11693 000047F8 4E657720            <1> .new_root_passwd                db  'New '
 11694 000047FC 526F6F742070617373- <1> .root_passwd                    db  'Root password: ',0
 11695 00004805 776F72643A2000      <1>
 11696 0000480C 4E657720            <1> .new_record_passwd              db  'New '
 11697 00004810 5265636F7264207061- <1> .record_passwd                  db  'Record password: ',0
 11698 00004819 7373776F72643A2000  <1>
 11699 00004822 526574797065207061- <1> .retype_passwd                  db  'Retype password: ',0
 11700 0000482B 7373776F72643A2000  <1>
 11701 00004834 5363686564756C6520- <1> .input_schedule                 db  'Schedule (hh:mm-hh:mm;days): ',0
 11702 0000483D 2868683A6D6D2D6868- <1>
 11703 00004846 3A6D6D3B6461797329- <1>
 11704 0000484F 3A2000              <1>
 11705 00004852 496E707574206B6579- <1> .input_keystrokes               db  'Input keystrokes (max 13 keys)',0x0d
 11706 0000485B 7374726F6B65732028- <1>
 11707 00004864 6D6178203133206B65- <1>
 11708 0000486D 7973290D            <1>
 11709 00004871 5072657373203C5363- <1>                                 db  'Press <Scroll Lock> to finish,',0x0d
 11710 0000487A 726F6C6C204C6F636B- <1>
 11711 00004883 3E20746F2066696E69- <1>
 11712 0000488C 73682C0D            <1>
 11713 00004890 4B657920636F646520- <1>                                 db  'Key code = 0x',0
 11714 00004899 3D20307800          <1>
 11715 0000489E 0D4B657920636F756E- <1> .key_count                      db  0x0d,'Key count = ',0
 11716 000048A7 74203D2000          <1>
 11717 000048AC 492F4F204261736520- <1> .io_port                        db  'I/O Base Ports (hex1,hex2): ',0
 11718 000048B5 506F72747320286865- <1>
 11719 000048BE 78312C68657832293A- <1>
 11720 000048C7 2000                <1>
 11721 000048C9 596561723A2000      <1> .year                           db  'Year: ',0
 11722                              <1> 
 11723                              <1> ; used in record info box.
 11724 000048D0 202020447269766520- <1> .drive_id                       db       '   Drive ID: ',0
 11725 000048D9 49443A2000          <1>
 11726 000048DE 202020506172742049- <1> .part_id                        db  '   Part ID: ',0
 11727 000048E7 443A2000            <1>
 11728 000048EB 0D5265636F72642054- <1> .record_type                    db  0x0d,'Record Type: ',0
 11729 000048F4 7970653A2000        <1>
 11730 000048FA 0D5265636F7264204E- <1> .record_name                    db  0x0d,'Record Name: ',0
 11731 00004903 616D653A2000        <1>
 11732                              <1> 
 11733 00004909 0D0D4175746F204163- <1> .auto_active                    db  0x0d,0x0d,'Auto Active: ',0
 11734 00004912 746976653A2000      <1>
 11735 00004919 202020204163746976- <1> .active                         db  '    Active: ',0
 11736 00004922 653A2000            <1>
 11737 00004926 0D20204175746F2048- <1> .auto_hide                      db  0x0d,'  Auto Hide: ',0
 11738 0000492F 6964653A2000        <1>
 11739 00004935 202020204869646465- <1> .hidden                         db  '    Hidden: ',0
 11740 0000493E 6E3A2000            <1>
 11741 00004942 0D5377617020647269- <1> .swap_drv                       db  0x0d,'Swap driver: ',0
 11742 0000494B 7665723A2000        <1>
 11743 00004951 2020204C6F67696361- <1> .logical                        db  '   Logical: ',0
 11744 0000495A 6C3A2000            <1>
 11745 0000495E 0D0D4B657920537472- <1> .key_strokes                    db  0x0d,0x0d,'Key Strokes: ',0
 11746 00004967 6F6B65733A2000      <1>
 11747 0000496E 202050617373776F72- <1> .password                       db  '  Password: ',0
 11748 00004977 643A2000            <1>
 11749 0000497B 0D2020205363686564- <1> .schedule                       db  0x0d,'   Schedule: ',0
 11750 00004984 756C653A2000        <1>
 11751                              <1> 
 11752 0000498A 59657300            <1> .yes                            db  'Yes',0
 11753 0000498E 4E6F2000            <1> .no                             db  'No ',0
 11754                              <1> 
 11755                              <1> ; copyright infomation, displayed at the top of the screen.
 11756 00004992 20536D61727420426F- <1> .copyright          db  ' Smart Boot Manager 3.90.1 | Copyright (C) 2001 Suzhe',0
 11757 0000499B 6F74204D616E616765- <1>
 11758 000049A4 7220332E39302E3120- <1>
 11759 000049AD 7C20436F7079726967- <1>
 11760 000049B6 687420284329203230- <1>
 11761 000049BF 30312053757A686500  <1>
 11762                              <1> 
 11763                              <1> ; hint message, displayed at the bottom of the screen.
 11764 000049C8 207E46317E2D48656C- <1> .hint               db  ' ~F1~-Help  ~F2~-Save  ~F3~-Rename  ~F4~-Active  ~F5~-Hide  ~Tab~-Menu',0
 11765 000049D1 7020207E46327E2D53- <1>
 11766 000049DA 61766520207E46337E- <1>
 11767 000049E3 2D52656E616D652020- <1>
 11768 000049EC 7E46347E2D41637469- <1>
 11769 000049F5 766520207E46357E2D- <1>
 11770 000049FE 4869646520207E5461- <1>
 11771 00004A07 627E2D4D656E7500    <1>
 11772                              <1> 
 11773                              <1> ; about infomation.
 11774 00004A0F 202020202020202020- <1> .about_content      db  '           Smart Boot Manager 3.90.1',0x0d
 11775 00004A18 2020536D6172742042- <1>
 11776 00004A21 6F6F74204D616E6167- <1>
 11777 00004A2A 657220332E39302E31- <1>
 11778 00004A33 0D                  <1>
 11779 00004A34 2020436F7079726967- <1>                     db  '  Copyright (C) 2001 Suzhe <su_zhe@sina.com>',0x0d,0x0d
 11780 00004A3D 687420284329203230- <1>
 11781 00004A46 30312053757A686520- <1>
 11782 00004A4F 3C73755F7A68654073- <1>
 11783 00004A58 696E612E636F6D3E0D- <1>
 11784 00004A61 0D                  <1>
 11785 00004A62 205468697320697320- <1>                     db  ' This is free software, you can redistribute',0x0d
 11786 00004A6B 6672656520736F6674- <1>
 11787 00004A74 776172652C20796F75- <1>
 11788 00004A7D 2063616E2072656469- <1>
 11789 00004A86 73747269627574650D  <1>
 11790 00004A8F 2020697420616E642F- <1>                     db  '  it and/or modify it under the terms of the',0x0d
 11791 00004A98 6F72206D6F64696679- <1>
 11792 00004AA1 20697420756E646572- <1>
 11793 00004AAA 20746865207465726D- <1>
 11794 00004AB3 73206F66207468650D  <1>
 11795 00004ABC 2020202020474E5520- <1>                     db  '     GNU General Public License version 2.',0x0d,0x0d
 11796 00004AC5 47656E6572616C2050- <1>
 11797 00004ACE 75626C6963204C6963- <1>
 11798 00004AD7 656E73652076657273- <1>
 11799 00004AE0 696F6E20322E0D0D    <1>
 11800 00004AE8 546869732070726F67- <1>                     db  'This program comes with ABSOLUTELY NO WARRANTY!',0
 11801 00004AF1 72616D20636F6D6573- <1>
 11802 00004AFA 207769746820414253- <1>
 11803 00004B03 4F4C5554454C59204E- <1>
 11804 00004B0C 4F2057415252414E54- <1>
 11805 00004B15 592100              <1>
 11806                              <1> 
 11807                              <1> ; help infomation.
 11808                              <1> .help_content:
 11809 00004B18 202020202020463120- <1>         db '      F1 = Help                  Ctrl+F1 = About',0x0d
 11810 00004B21 3D2048656C70202020- <1>
 11811 00004B2A 202020202020202020- <1>
 11812 00004B33 202020202020437472- <1>
 11813 00004B3C 6C2B4631203D204162- <1>
 11814 00004B45 6F75740D            <1>
 11815 00004B49 202020202020463220- <1>         db '      F2 = Save                       F3 = Rename',0x0d
 11816 00004B52 3D2053617665202020- <1>
 11817 00004B5B 202020202020202020- <1>
 11818 00004B64 202020202020202020- <1>
 11819 00004B6D 20204633203D205265- <1>
 11820 00004B76 6E616D650D          <1>
 11821 00004B7B 202020202020463420- <1>         db '      F4 = Mark active                F5 = Hide/unhide',0x0d
 11822 00004B84 3D204D61726B206163- <1>
 11823 00004B8D 746976652020202020- <1>
 11824 00004B96 202020202020202020- <1>
 11825 00004B9F 20204635203D204869- <1>
 11826 00004BA8 64652F756E68696465- <1>
 11827 00004BB1 0D                  <1>
 11828 00004BB2 202020202020463620- <1>         db '      F6 = Toggle auto active         F7 = Toggle auto hide',0x0d
 11829 00004BBB 3D20546F67676C6520- <1>
 11830 00004BC4 6175746F2061637469- <1>
 11831 00004BCD 766520202020202020- <1>
 11832 00004BD6 20204637203D20546F- <1>
 11833 00004BDF 67676C65206175746F- <1>
 11834 00004BE8 20686964650D        <1>
 11835 00004BEE 202020202020463820- <1>         db '      F8 = Set default          Shift+F8 = Unset default',0x0d
 11836 00004BF7 3D2053657420646566- <1>
 11837 00004C00 61756C742020202020- <1>
 11838 00004C09 202020202053686966- <1>
 11839 00004C12 742B4638203D20556E- <1>
 11840 00004C1B 736574206465666175- <1>
 11841 00004C24 6C740D              <1>
 11842 00004C27 20204374726C2B4420- <1>         db '  Ctrl+D = Delete                 Ctrl+P = Duplicate',0x0d
 11843 00004C30 3D2044656C65746520- <1>
 11844 00004C39 202020202020202020- <1>
 11845 00004C42 202020202020204374- <1>
 11846 00004C4B 726C2B50203D204475- <1>
 11847 00004C54 706C69636174650D    <1>
 11848 00004C5C 20204374726C2B5520- <1>         db '  Ctrl+U = Move record up         Ctrl+N = Move record down',0x0d
 11849 00004C65 3D204D6F7665207265- <1>
 11850 00004C6E 636F72642075702020- <1>
 11851 00004C77 202020202020204374- <1>
 11852 00004C80 726C2B4E203D204D6F- <1>
 11853 00004C89 7665207265636F7264- <1>
 11854 00004C92 20646F776E0D        <1>
 11855 00004C98 20204374726C2B5320- <1>         db '  Ctrl+S = Set/unset schedule     Ctrl+T = Set delay time',0x0d
 11856 00004CA1 3D205365742F756E73- <1>
 11857 00004CAA 657420736368656475- <1>
 11858 00004CB3 6C6520202020204374- <1>
 11859 00004CBC 726C2B54203D205365- <1>
 11860 00004CC5 742064656C61792074- <1>
 11861 00004CCE 696D650D            <1>
 11862 00004CD2 20204374726C2B4B20- <1>         db '  Ctrl+K = Set/unset keystrokes   / or ? = Show information',0x0d
 11863 00004CDB 3D205365742F756E73- <1>
 11864 00004CE4 6574206B6579737472- <1>
 11865 00004CED 6F6B65732020202F20- <1>
 11866 00004CF6 6F72203F203D205368- <1>
 11867 00004CFF 6F7720696E666F726D- <1>
 11868 00004D08 6174696F6E0D        <1>
 11869 00004D0E 20204374726C2B4920- <1>         db '  Ctrl+I = Rescan all records     Ctrl+H = Rescan all partitions',0x0d,
 11870 00004D17 3D2052657363616E20- <1>
 11871 00004D20 616C6C207265636F72- <1>
 11872 00004D29 647320202020204374- <1>
 11873 00004D32 726C2B48203D205265- <1>
 11874 00004D3B 7363616E20616C6C20- <1>
 11875 00004D44 706172746974696F6E- <1>
 11876 00004D4D 730D                <1>
 11877 00004D4F 20204374726C2B5820- <1>         db '  Ctrl+X = Toggle swap driver id  Ctrl+F = Show/hide flags',0x0d
 11878 00004D58 3D20546F67676C6520- <1>
 11879 00004D61 737761702064726976- <1>
 11880 00004D6A 657220696420204374- <1>
 11881 00004D73 726C2B46203D205368- <1>
 11882 00004D7C 6F772F686964652066- <1>
 11883 00004D85 6C6167730D          <1>
 11884 00004D8A 20204374726C2B4C20- <1>         db '  Ctrl+L = Toggle remember the last booted record',0x0d
 11885 00004D93 3D20546F67676C6520- <1>
 11886 00004D9C 72656D656D62657220- <1>
 11887 00004DA5 746865206C61737420- <1>
 11888 00004DAE 626F6F746564207265- <1>
 11889 00004DB7 636F72640D          <1>
 11890 00004DBC 202020202020463920- <1>         db '      F9 = Change boot record password',0x0d
 11891 00004DC5 3D204368616E676520- <1>
 11892 00004DCE 626F6F74207265636F- <1>
 11893 00004DD7 72642070617373776F- <1>
 11894 00004DE0 72640D              <1>
 11895 00004DE3 202020202046313020- <1>         db '     F10 = Change root password',0x0d
 11896 00004DEC 3D204368616E676520- <1>
 11897 00004DF5 726F6F742070617373- <1>
 11898 00004DFE 776F72640D          <1>
 11899 00004E03 4374726C2B46313020- <1>         db 'Ctrl+F10 = Enter/leave Administrator mode',0x0d
 11900 00004E0C 3D20456E7465722F6C- <1>
 11901 00004E15 656176652041646D69- <1>
 11902 00004E1E 6E6973747261746F72- <1>
 11903 00004E27 206D6F64650D        <1>
 11904 00004E2D 20416C742B46313020- <1>         db ' Alt+F10 = Enter/leave Security Lock mode',0x0d
 11905 00004E36 3D20456E7465722F6C- <1>
 11906 00004E3F 656176652053656375- <1>
 11907 00004E48 72697479204C6F636B- <1>
 11908 00004E51 206D6F64650D        <1>
 11909 00004E57 202020202054616220- <1>         db '     Tab = Popup command menu',0x0d
 11910 00004E60 3D20506F7075702063- <1>
 11911 00004E69 6F6D6D616E64206D65- <1>
 11912 00004E72 6E750D              <1>
 11913 00004E75 20204374726C2B5120- <1>         db '  Ctrl+Q = Quit to BIOS         Ctrl+F12 = Power off',0
 11914 00004E7E 3D205175697420746F- <1>
 11915 00004E87 2042494F5320202020- <1>
 11916 00004E90 20202020204374726C- <1>
 11917 00004E99 2B463132203D20506F- <1>
 11918 00004EA2 776572206F666600    <1>
 11919                              <1> 
 11920                              <1> ; normal messages.
 11921 00004EAA 4368616E6765732073- <1> .changes_saved      db  'Changes saved.',0
 11922 00004EB3 617665642E00        <1>
 11923 00004EB9 50617373776F726420- <1> .passwd_changed     db  'Password changed.',0
 11924 00004EC2 6368616E6765642E00  <1>
 11925 00004ECB 536176652074686520- <1> .ask_save_changes   db  'Save the changes (y/n)?',0
 11926 00004ED4 6368616E6765732028- <1>
 11927 00004EDD 792F6E293F00        <1>
 11928                              <1> 
 11929                              <1> ; error messages.
 11930 00004EE3 57726F6E6720706173- <1> .wrong_passwd       db  'Wrong password!',0
 11931 00004EEC 73776F72642100      <1>
 11932 00004EF3 4469736B206572726F- <1> .disk_error         db  'Disk error! 0x',0
 11933 00004EFC 722120307800        <1>
 11934 00004F02 4D61726B2061637469- <1> .mark_act_failed    db  'Mark active failed!',0
 11935 00004F0B 7665206661696C6564- <1>
 11936 00004F14 2100                <1>
 11937 00004F16 486964652F756E6869- <1> .toggle_hid_failed  db  'Hide/unhide failed!',0
 11938 00004F1F 6465206661696C6564- <1>
 11939 00004F28 2100                <1>
 11940 00004F2A 4E6F204F7065726174- <1> .no_system          db  'No Operating System!',0x0d
 11941 00004F33 696E67205379737465- <1>
 11942 00004F3C 6D210D              <1>
 11943 00004F3F 5265706C6163652061- <1>                     db  'Replace a disk and try again.',0
 11944 00004F48 206469736B20616E64- <1>
 11945 00004F51 207472792061676169- <1>
 11946 00004F5A 6E2E00              <1>
 11947 00004F5D 496E76616C69642062- <1> .invalid_record     db  'Invalid boot record!',0
 11948 00004F66 6F6F74207265636F72- <1>
 11949 00004F6F 642100              <1>
 11950 00004F72 496E76616C69642073- <1> .invalid_schedule   db  'Invalid schedule time!',0
 11951 00004F7B 63686564756C652074- <1>
 11952 00004F84 696D652100          <1>
 11953 00004F89 5375726520746F2069- <1> .inst_confirm       db  'Sure to install Smart BootManager ',
 11954 00004F92 6E7374616C6C20536D- <1>
 11955 00004F9B 61727420426F6F744D- <1>
 11956 00004FA4 616E6167657220      <1>
 11957 00004FAB 696E746F2064726976- <1>                     db  'into driver ',0
 11958 00004FB4 65722000            <1>
 11959 00004FB8 496E7374616C6C6174- <1> .inst_ok            db  'Installation is successful!',0
 11960 00004FC1 696F6E206973207375- <1>
 11961 00004FCA 636365737366756C21- <1>
 11962 00004FD3 00                  <1>
 11963 00004FD4 41626F727420746865- <1> .inst_abort         db  'Abort the installation.',0
 11964 00004FDD 20696E7374616C6C61- <1>
 11965 00004FE6 74696F6E2E00        <1>
 11966 00004FEC 5375726520746F2075- <1> .uninst_confirm     db  'Sure to uninstall Smart BootManager?',0x0d,0
 11967 00004FF5 6E696E7374616C6C20- <1>
 11968 00004FFE 536D61727420426F6F- <1>
 11969 00005007 744D616E616765723F- <1>
 11970 00005010 0D00                <1>
 11971 00005012 556E696E7374616C6C- <1> .uninst_ok          db  'Uninstallation is successful!',0x0d
 11972 0000501B 6174696F6E20697320- <1>
 11973 00005024 737563636573736675- <1>
 11974 0000502D 6C210D              <1>
 11975 00005030 436F6D707574657220- <1>                     db  'Computer will be restarted.',0
 11976 00005039 77696C6C2062652072- <1>
 11977 00005042 65737461727465642E- <1>
 11978 0000504B 00                  <1>
 11979 0000504C 41626F727420746865- <1> .uninst_abort       db  'Abort the uninstallation.',0
 11980 00005055 20756E696E7374616C- <1>
 11981 0000505E 6C6174696F6E2E00    <1>
 11982 00005066 507265737320592074- <1> .confirm            db  'Press Y to continue, other key to abort.',0
 11983 0000506F 6F20636F6E74696E75- <1>
 11984 00005078 652C206F7468657220- <1>
 11985 00005081 6B657920746F206162- <1>
 11986 0000508A 6F72742E00          <1>
 11987 0000508F 536D61727420426F6F- <1> .no_sbml            db  'Smart Boot Manager Loader missing ',0x0d
 11988 00005098 74204D616E61676572- <1>
 11989 000050A1 204C6F61646572206D- <1>
 11990 000050AA 697373696E67200D    <1>
 11991 000050B2 6F722076657273696F- <1>                     db  'or version mismatch!',0
 11992 000050BB 6E206D69736D617463- <1>
 11993 000050C4 682100              <1>
 11994 000050C7 496E76616C69642049- <1> .invalid_ioports    db  'Invalid I/O Ports!',0
 11995 000050D0 2F4F20506F72747321- <1>
 11996 000050D9 00                  <1>
 11997                              <1> 
 11998                              <1> ; command menu strings
 11999                              <1> ; main menu
 12000 000050DA 4D61696E204D656E75- <1> .main_menu_title     db  'Main Menu',0
 12001 000050E3 00                  <1>
 12002 000050E4 48656C702020202020- <1> .main_menu_help      db  'Help             ~F1~',0
 12003 000050ED 20202020202020207E- <1>
 12004 000050F6 46317E00            <1>
 12005 000050FA 41626F757420202020- <1> .main_menu_about     db  'About       ~Ctrl-F1~',0
 12006 00005103 2020207E4374726C2D- <1>
 12007 0000510C 46317E00            <1>
 12008 00005110 426F6F7420697400    <1> .main_menu_bootit    db  'Boot it',0
 12009 00005118 426F6F742050726576- <1> .main_menu_bootprev  db  'Boot Previous MBR',0
 12010 00005121 696F7573204D425200  <1>
 12011 0000512A 517569742020202020- <1> .main_menu_quit      db  'Quit         ~Ctrl-Q~',0
 12012 00005133 202020207E4374726C- <1>
 12013 0000513C 2D517E00            <1>
 12014 00005140 506F776572204F6666- <1> .main_menu_poweroff  db  'Power Off  ~Ctrl-F12~',0
 12015 00005149 20207E4374726C2D46- <1>
 12016 00005152 31327E00            <1>
 12017 00005156 5265636F7264205365- <1> .main_menu_recordset db  'Record Settings  ->',0
 12018 0000515F 7474696E677320202D- <1>
 12019 00005168 3E00                <1>
 12020 0000516A 53797374656D205365- <1> .main_menu_sysset    db  'System Settings  ->',0
 12021 00005173 7474696E677320202D- <1>
 12022 0000517C 3E00                <1>
 12023 0000517E 53617665204368616E- <1> .main_menu_save      db  'Save Changes     ~F2~',0
 12024 00005187 67657320202020207E- <1>
 12025 00005190 46327E00            <1>
 12026 00005194 2D2D2D2D2D2D2D2D2D- <1> .main_menu_bar       db  '-------------------',0
 12027 0000519D 2D2D2D2D2D2D2D2D2D- <1>
 12028 000051A6 2D00                <1>
 12029                              <1> 
 12030                              <1> ; record settings menu
 12031 000051A8 5265636F7264205365- <1> .record_menu_title    db  'Record Settings',0
 12032 000051B1 7474696E677300      <1>
 12033 000051B8 496E666F726D617469- <1> .record_menu_info     db  'Information     ~/ or ?~',0
 12034 000051C1 6F6E20202020207E2F- <1>
 12035 000051CA 206F72203F7E00      <1>
 12036 000051D1 4E616D652020202020- <1> .record_menu_name     db  'Name                ~F3~',0
 12037 000051DA 202020202020202020- <1>
 12038 000051E3 20207E46337E00      <1>
 12039 000051EA 50617373776F726420- <1> .record_menu_passwd   db  'Password            ~F9~',0
 12040 000051F3 202020202020202020- <1>
 12041 000051FC 20207E46397E00      <1>
 12042 00005203 5363686564756C6520- <1> .record_menu_schedule db  'Schedule        ~Ctrl-S~',0
 12043 0000520C 202020202020207E43- <1>
 12044 00005215 74726C2D537E00      <1>
 12045 0000521C 4B65797374726F6B65- <1> .record_menu_keys     db  'Keystrokes      ~Ctrl-K~',0
 12046 00005225 732020202020207E43- <1>
 12047 0000522E 74726C2D4B7E00      <1>
 12048 00005235 4D61726B2041637469- <1> .record_menu_act      db  'Mark Active         ~F4~',0
 12049 0000523E 766520202020202020- <1>
 12050 00005247 20207E46347E00      <1>
 12051 0000524E 486964652F756E6869- <1> .record_menu_hide     db  'Hide/unhide         ~F5~',0
 12052 00005257 646520202020202020- <1>
 12053 00005260 20207E46357E00      <1>
 12054 00005267 4175746F2041637469- <1> .record_menu_autoact  db  'Auto Active         ~F6~',0
 12055 00005270 766520202020202020- <1>
 12056 00005279 20207E46367E00      <1>
 12057 00005280 4175746F2048696465- <1> .record_menu_autohide db  'Auto Hide           ~F7~',0
 12058 00005289 202020202020202020- <1>
 12059 00005292 20207E46377E00      <1>
 12060 00005299 537761702044726976- <1> .record_menu_swapdrv  db  'Swap Driver ID  ~Ctrl-X~',0
 12061 000052A2 657220494420207E43- <1>
 12062 000052AB 74726C2D587E00      <1>
 12063 000052B2 44656C657465202020- <1> .record_menu_del      db  'Delete          ~Ctrl-D~',0
 12064 000052BB 202020202020207E43- <1>
 12065 000052C4 74726C2D447E00      <1>
 12066 000052CB 4475706C6963617465- <1> .record_menu_dup      db  'Duplicate       ~Ctrl-P~',0
 12067 000052D4 202020202020207E43- <1>
 12068 000052DD 74726C2D507E00      <1>
 12069 000052E4 4D6F76652055702020- <1> .record_menu_moveup   db  'Move Up         ~Ctrl-U~',0
 12070 000052ED 202020202020207E43- <1>
 12071 000052F6 74726C2D557E00      <1>
 12072 000052FD 4D6F766520446F776E- <1> .record_menu_movedown db  'Move Down       ~Ctrl-N~',0
 12073 00005306 202020202020207E43- <1>
 12074 0000530F 74726C2D4E7E00      <1>
 12075 00005316 2D2D2D2D2D2D2D2D2D- <1> .record_menu_bar      db  '----------------------',0
 12076 0000531F 2D2D2D2D2D2D2D2D2D- <1>
 12077 00005328 2D2D2D2D00          <1>
 12078                              <1> 
 12079                              <1> ; system setting menu
 12080 0000532D 53797374656D205365- <1> .sys_menu_title       db  'System Settings',0
 12081 00005336 7474696E677300      <1>
 12082 0000533D 526F6F742050617373- <1> .sys_menu_rootpasswd  db  'Root Password              ~F10~',0
 12083 00005346 776F72642020202020- <1>
 12084 0000534F 202020202020202020- <1>
 12085 00005358 7E4631307E00        <1>
 12086 0000535E 546F67676C65204164- <1> .sys_menu_admin       db  'Toggle Admin Mode     ~Ctrl-F10~',0
 12087 00005367 6D696E204D6F646520- <1>
 12088 00005370 202020207E4374726C- <1>
 12089 00005379 2D4631307E00        <1>
 12090 0000537F 546F67676C65205365- <1> .sys_menu_security    db  'Toggle Security Mode   ~Alt-F10~',0
 12091 00005388 637572697479204D6F- <1>
 12092 00005391 64652020207E416C74- <1>
 12093 0000539A 2D4631307E00        <1>
 12094 000053A0 536574204465666175- <1> .sys_menu_setdef      db  'Set Default Record          ~F8~',0
 12095 000053A9 6C74205265636F7264- <1>
 12096 000053B2 202020202020202020- <1>
 12097 000053BB 207E46387E00        <1>
 12098 000053C1 556E73657420446566- <1> .sys_menu_unsetdef    db  'Unset Default Record  ~Shift-F8~',0
 12099 000053CA 61756C74205265636F- <1>
 12100 000053D3 726420207E53686966- <1>
 12101 000053DC 742D46387E00        <1>
 12102 000053E2 5365742044656C6179- <1> .sys_menu_delay       db  'Set Delay Time          ~Ctrl-T~',0
 12103 000053EB 2054696D6520202020- <1>
 12104 000053F4 2020202020207E4374- <1>
 12105 000053FD 726C2D547E00        <1>
 12106 00005403 4368616E676520426F- <1> .sys_menu_bmstyle     db  'Change Boot Menu Style  ~Ctrl-F~',0
 12107 0000540C 6F74204D656E752053- <1>
 12108 00005415 74796C6520207E4374- <1>
 12109 0000541E 726C2D467E00        <1>
 12110 00005424 546F67676C65205265- <1> .sys_menu_remlast     db  'Toggle Remember Last    ~Ctrl-L~',0
 12111 0000542D 6D656D626572204C61- <1>
 12112 00005436 7374202020207E4374- <1>
 12113 0000543F 726C2D4C7E00        <1>
 12114 00005445 546F67676C65204578- <1> .sys_menu_int13ext    db  'Toggle Extended Int 13H',0
 12115 0000544E 74656E64656420496E- <1>
 12116 00005457 742031334800        <1>
 12117 0000545D 52657363616E20416C- <1> .sys_menu_rescanall   db  'Rescan All Boot Records ~Ctrl-I~',0
 12118 00005466 6C20426F6F74205265- <1>
 12119 0000546F 636F726473207E4374- <1>
 12120 00005478 726C2D497E00        <1>
 12121 0000547E 52657363616E20416C- <1> .sys_menu_rescanpart  db  'Rescan All Partitions   ~Ctrl-H~',0
 12122 00005487 6C2050617274697469- <1>
 12123 00005490 6F6E732020207E4374- <1>
 12124 00005499 726C2D487E00        <1>
 12125 0000549F 5365742043442D524F- <1> .sys_menu_set_ioports db  'Set CD-ROM I/O Ports',0
 12126 000054A8 4D20492F4F20506F72- <1>
 12127 000054B1 747300              <1>
 12128 000054B4 536574207965617220- <1> .sys_menu_set_y2kfix  db  'Set year (fix Y2K BIOS bug)',0
 12129 000054BD 286669782059324B20- <1>
 12130 000054C6 42494F532062756729- <1>
 12131 000054CF 00                  <1>
 12132 000054D0 496E7374616C6C2053- <1> .sys_menu_inst        db  'Install Smart BootManager',0
 12133 000054D9 6D61727420426F6F74- <1>
 12134 000054E2 4D616E6167657200    <1>
 12135 000054EA 556E696E7374616C6C- <1> .sys_menu_uninst      db  'Uninstall Smart BootManager',0
 12136 000054F3 20536D61727420426F- <1>
 12137 000054FC 6F744D616E61676572- <1>
 12138 00005505 00                  <1>
 12139 00005506 2D2D2D2D2D2D2D2D2D- <1> .sys_menu_bar         db  '------------------------------',0
 12140 0000550F 2D2D2D2D2D2D2D2D2D- <1>
 12141 00005518 2D2D2D2D2D2D2D2D2D- <1>
 12142 00005521 2D2D2D00            <1>
 12143                              <1> 
 12144 00005525 43686F6F7365206120- <1> .cdimg_menu_title     db  'Choose a CD Image',0
 12145 0000552E 434420496D61676500  <1>
 12146 00005537 4E6F20456D756C6174- <1> .cdimg_menu_noemu     db  'No Emulation',0
 12147 00005540 696F6E00            <1>
 12148 00005544 312E32204D20446973- <1> .cdimg_menu_120m      db  '1.2 M Diskette',0
 12149 0000554D 6B6574746500        <1>
 12150 00005553 312E34344D20446973- <1> .cdimg_menu_144m      db  '1.44M Diskette',0
 12151 0000555C 6B6574746500        <1>
 12152 00005562 322E38384D20446973- <1> .cdimg_menu_288m      db  '2.88M Diskette',0
 12153 0000556B 6B6574746500        <1>
 12154                              <1> 
 12155 00005571 53756E00            <1> .sunday              db 'Sun',0
 12156 00005575 4D6F6E00            <1> .monday              db 'Mon',0
 12157 00005579 54756500            <1> .tuesday             db 'Tue',0
 12158 0000557D 57656400            <1> .wednesday           db 'Wed',0
 12159 00005581 54687500            <1> .thursday            db 'Thu',0
 12160 00005585 46726900            <1> .friday              db 'Fri',0
 12161 00005589 53617400            <1> .saturday            db 'Sat',0
 12162                              <1> 
 12163                              <1> ; END OF THEME.
 12164                              <1> end_of_theme:
 12165                              <1> 
 12166                              <1> ; vi:ts=8:et:nowrap
 12167                                  %endif
 12168                                  
 12169                                  
 12170                                  
 12171                                  
 12172                                  ;=============================================================================
 12173                                  ;  Temporary Data Area (pre-initialized data)
 12174                                  ;=============================================================================
 12175                                   
 12176                                  %include "tempdata.asm"
 12177                              <1> ; tempdata.asm
 12178                              <1> ;
 12179                              <1> ; some Temporary Data for Smart Boot Manager
 12180                              <1> ;
 12181                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
 12182                              <1> ;
 12183                              <1> 
 12184                              <1> ;==============================================================================
 12185                              <1> ;temp data area for hd_io.asm
 12186                              <1> ;==============================================================================
 12187                              <1> %ifndef HD_IO_TEMPDATA
 12188                              <1> %define HD_IO_TEMPDATA
 12189                              <1> 
 12190                              <1> hdio_tmp:
 12191 0000558D <res 00000008>      <1> .cdbc_cmd	resb SIZE_OF_CDBC_CMD
 12192 00005595 <res 00000042>      <1> .extparam	resb SIZE_OF_EXTPARAM
 12193 000055D7 <res 00000010>      <1> .int13ext	resb SIZE_OF_INT13EXT
 12194 000055E7 <res 0000000A>      <1> .driveinfo	resb SIZE_OF_DRIVEINFO
 12195 000055F1 <res 00000001>      <1> .disk_errno	resb 1
 12196                              <1> 
 12197                              <1> %endif
 12198                              <1> 
 12199                              <1> ;==============================================================================
 12200                              <1> ;temp data area for knl.asm
 12201                              <1> ;==============================================================================
 12202                              <1> %ifndef KNL_TEMPDATA
 12203                              <1> %define KNL_TEMPDATA
 12204                              <1> 
 12205                              <1> knl_tmp:
 12206 000055F2 <res 00000001>      <1> .good_record_num	resb 1
 12207 000055F3 <res 00000001>      <1> .max_record_num		resb 1
 12208 000055F4 <res 00000001>      <1> .part_id		resb 1
 12209 000055F5 <res 00000004>      <1> .logi_father		resd 1
 12210                              <1> 
 12211 000055F9 <res 00000001>      <1> .floppy_num		resb 1
 12212 000055FA <res 00000013>      <1> .cdemu_spec		resb SIZE_OF_CDEMU_SPEC
 12213                              <1> 
 12214 0000560D <res 00000800>      <1> .disk_buf1		resb 2048
 12215 00005E0D <res 00000800>      <1> .disk_buf2		resb 2048
 12216                              <1> 
 12217                              <1> %endif
 12218                              <1> 
 12219                              <1> ;==============================================================================
 12220                              <1> ;temp data area for ui.asm
 12221                              <1> ;==============================================================================
 12222                              <1> %ifndef UI_TEMPDATA
 12223                              <1> %define UI_TEMPDATA
 12224                              <1> 
 12225                              <1> ui_tmp:
 12226 0000660D <res 00000001>      <1> .left_col	resb  1
 12227 0000660E <res 00000001>      <1> .top_row	resb  1
 12228 0000660F <res 00000001>      <1> .right_col	resb  1
 12229 00006610 <res 00000001>      <1> .bottom_row	resb  1
 12230 00006611 <res 00000001>      <1> .frame_attr	resb  1
 12231 00006612 <res 00000001>      <1> .title_attr	resb  1
 12232 00006613 <res 00000002>      <1> .focus_win	resw  1
 12233 00006615 <res 00000002>      <1> .root_win	resw  1
 12234 00006617 <res 0000001A>      <1> .def_root_win	resb SIZE_OF_STRUC_WINDOW
 12235 00006631 <res 00000020>      <1> .tmp_msgbox	resb SIZE_OF_STRUC_MESSAGE_BOX
 12236 00006651 <res 00000029>      <1> .tmp_inputbox	resb SIZE_OF_STRUC_INPUT_BOX
 12237 0000667A <res 0000002B>      <1> .tmp_menubox	resb SIZE_OF_STRUC_MENU_BOX
 12238 000066A5 <res 00000100>      <1> .tmp_buf	resb  256
 12239 000067A5 <res 00000100>      <1> .tmp_buf1	resb  256
 12240                              <1> 
 12241                              <1> %endif
 12242                              <1> 
 12243                              <1> ;==============================================================================
 12244                              <1> ;temp data area for utils.asm
 12245                              <1> ;==============================================================================
 12246                              <1> %ifndef UTILS_TEMPDATA
 12247                              <1> %define UTILS_TEMPDATA
 12248                              <1> 
 12249                              <1> utils_tmp:
 12250 000068A5 <res 00000001>      <1> .kbd_work	       resb  1
 12251 000068A6 <res 00000001>      <1> .kbd_last_shift        resb  1
 12252 000068A7 <res 00000001>      <1> .kbd_bypass_next_shift resb 1
 12253                              <1> 
 12254                              <1> %endif
 12255                              <1> 
 12256                              <1> ;=============================================================================
 12257                              <1> ;temp data area for main.asm
 12258                              <1> ;=============================================================================
 12259                              <1> %ifndef MAIN_TEMPDATA
 12260                              <1> %define MAIN_TEMPDATA
 12261                              <1> 
 12262                              <1> main_tmp:
 12263 000068A8 <res 00000020>      <1> .good_record_list    resb MAX_RECORD_NUM
 12264                              <1> 
 12265 000068C8 <res 00000001>      <1> .time_count         resb  1                       ;
 12266 000068C9 <res 00000002>      <1> .ticks_count        resw  1                       ; used in get_key func
 12267 000068CB <res 00000001>      <1> .key_pressed        resb  1                       ;
 12268 000068CC <res 00000002>      <1> .keycode            resw  1
 12269                              <1> 
 12270 000068CE <res 00000001>      <1> .change_occured     resb  1                       ; if change occured.
 12271 000068CF <res 00000001>      <1> .root_login         resb  1                       ; root login state.
 12272                              <1> 
 12273 000068D0 <res 00000002>      <1> .last_time          resw  1
 12274                              <1> 
 12275 000068D2 <res 00000002>      <1> .schedule_begin  resw  1
 12276 000068D4 <res 00000002>      <1> .schedule_end    resw  1
 12277 000068D6 <res 00000002>      <1> .schedule_day    resw  1
 12278                              <1> 
 12279 000068D8 <res 00000002>      <1> .keystroke_ptr   resw  1
 12280 000068DA <res 00000001>      <1> .keystroke_num   resb  1
 12281 000068DB <res 00000001>      <1> .keystroke_max   resb  1
 12282 000068DC <res 0000002B>      <1> .ikbox           resb SIZE_OF_STRUC_MENU_BOX
 12283                              <1> 
 12284 00006907 <res 00000800>      <1> .records_buf     resb MAX_RECORD_NUM * SIZE_OF_BOOTRECORD
 12285 00007107 <res 00000050>      <1> .record_string   resb 80
 12286 00007157 <res 00000100>      <1> .dialog_buf      resb 256
 12287 00007257 <res 00000050>      <1> .root_buf        resb 80
 12288                              <1> 
 12289                              <1> %endif
 12290                              <1> 
 12291                              <1> %ifndef MYINT13H_TEMPDATA
 12292                              <1> %define MYINT13H_TEMPDATA
 12293                              <1> 
 12294                              <1> myint13h_tmp:
 12295 000072A7 <res 00000002>      <1> .edd30_off  resw 1
 12296 000072A9 <res 00000002>      <1> .edd30_seg  resw 1
 12297                              <1> 
 12298                              <1> %endif
 12299                                  
 12300                                  
 12301                                  
 12302                                  
 12303                                  
 12304                                  %ifndef EMULATE_PROG
 12305                                  
 12306                                   ; make the binary (Master Boot Record) 63 sectors long (don't care about the DOS emulation exec size)
 12307                                   
 12308 000072AB 00<rept>                  times 63*512-($-$$) db 0
 12309                                  
 12310                                  %endif
 12311                                  
