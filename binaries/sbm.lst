     1                                  ; 
     2                                  ; 
     3                                  ; Smart Boot Manager
     4                                  ; 
     5                                  ; 
     6                                  ;  developed by
     7                                  ;    
     8                                  ;       Peter Kleissner
     9                                  ;       Vienna Computer Products
    10                                  ;       James Su
    11                                  ;       Christopher Li
    12                                  ;       Lonius
    13                                  ;       Risko Gergely
    14                                  ;       Victor O`Muerte
    15                                  ;       Dirk Knop
    16                                  ;       Lenart Janos
    17                                  ;       Frédéric Bonnaud
    18                                  ;       brz
    19                                  ;       Manuel Clos
    20                                  ;       Benoit Mortier
    21                                  ;       Bill Hults
    22                                  ;       Andre Maldonado
    23                                  ;       Santiago Garcia Mantinan
    24                                  ;       
    25                                  ;       Thank you all.
    26                                  ;       
    27                                  
    28                                  ; asmsyntax=nasm
    29                                  ;
    30                                  ; main.asm
    31                                  ;
    32                                  ; Main programs for Smart Boot Manager
    33                                  ;
    34                                  ; Copyright (C) 2000, Suzhe. See file COPYING for details.
    35                                  ; Copyright (C) 2001, Suzhe. See file COPYING for details.
    36                                  ;
    37                                  
    38                                  ; optional Assembly:
    39                                  ; 
    40                                  ;   EMULATE_PROG
    41                                  ;       if defined, creates DOS executable Test-vesion
    42                                  ;   
    43                                  ;   THEME_ZH, THEME_DE, THEME_HU, THEME_RU, THEME_CZ, THEME_ES, THEME_FR, THEME_PT, else US
    44                                  ;       language themes
    45                                  ;   
    46                                  ;   DISABLE_CDBOOT
    47                                  ;       disables CD Boot and initialization of it
    48                                  ;   
    49                                  ;   Y2K_BUGFIX
    50                                  ;       year 2000 fix [removed since Revision 5, we write the year 2007]
    51                                  
    52                                  
    53                                  ; compile 16 bit code (Real Mode) and beware backward compatibility down to 386er
    54                                  [bits 16]
    55                                  CPU 386
    56                                  
    57                                  %include "macros.h"
    58                              <1> ; macros.h
    59                              <1> ;
    60                              <1> ; some nasm macros that simplify the coding.
    61                              <1> ;
    62                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
    63                              <1> ;
    64                              <1> 
    65                              <1> %ifndef DEFINE_MACROS
    66                              <1> %define DEFINE_MACROS
    67                              <1> 
    68                              <1> %macro retz 0
    69                              <1>        jnz %%skip
    70                              <1>        ret
    71                              <1> %%skip:
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %define jmpz  jz near
    75                              <1> %define jmpnz jnz near
    76                              <1> %define jmpe  je near
    77                              <1> %define jmpne jne near
    78                              <1> %define jmpc  jc near
    79                              <1> %define jmpnc jnc near
    80                              <1> %define jmpa  ja near
    81                              <1> %define jmpna jna near
    82                              <1> %define jmpb  jb near
    83                              <1> %define jmpnb jnb near
    84                              <1> 
    85                              <1> 
    86                              <1> %if 0
    87                              <1> %macro jmpz 1
    88                              <1>        jnz %%skip
    89                              <1>        jmp %1
    90                              <1> %%skip:
    91                              <1> %endmacro
    92                              <1> 
    93                              <1> %macro jmpnz 1
    94                              <1>        jz %%skip
    95                              <1>        jmp %1
    96                              <1> %%skip:
    97                              <1> %endmacro
    98                              <1> 
    99                              <1> %macro jmpe 1
   100                              <1>        jne %%skip
   101                              <1>        jmp %1
   102                              <1> %%skip:
   103                              <1> %endmacro
   104                              <1> 
   105                              <1> %macro jmpne 1
   106                              <1>        je %%skip
   107                              <1>        jmp %1
   108                              <1> %%skip:
   109                              <1> %endmacro
   110                              <1> 
   111                              <1> %macro jmpc 1
   112                              <1>        jnc %%skip
   113                              <1>        jmp %1
   114                              <1> %%skip:
   115                              <1> %endmacro
   116                              <1> 
   117                              <1> %macro jmpnc 1
   118                              <1>        jc %%skip
   119                              <1>        jmp %1
   120                              <1> %%skip:
   121                              <1> %endmacro
   122                              <1> 
   123                              <1> %macro jmpb 1
   124                              <1>        jnb %%skip
   125                              <1>        jmp %1
   126                              <1> %%skip:
   127                              <1> %endmacro
   128                              <1> 
   129                              <1> %macro jmpnb 1
   130                              <1>        jb %%skip
   131                              <1>        jmp %1
   132                              <1> %%skip:
   133                              <1> %endmacro
   134                              <1> 
   135                              <1> %endif
   136                              <1> 
   137                              <1> %endif
   138                                  %include "ui.h"
   139                              <1> ;
   140                              <1> ; ui.asm
   141                              <1> ;
   142                              <1> ; header file for ui.asm
   143                              <1> ;
   144                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   145                              <1> ;
   146                              <1> 
   147                              <1> ; following flags is used in struc_window.flags
   148                              <1> 
   149                              <1> %define WINFLAG_OPEN		0x01  ; set this flag when open the window
   150                              <1> %define WINFLAG_MODAL		0x02  ; Modal window
   151                              <1> %define WINFLAG_FRAMED		0x04  ; the window has frame.
   152                              <1> %define WINFLAG_NO_FOCUS	0x08  ; Cannot be focused.
   153                              <1> 
   154                              <1> %define MENUFLAG_SCROLLBAR	0x10  ; the menu has scroll bar
   155                              <1> %define MENUFLAG_SINK_WIDTH	0x20  ; reduce the width of menu area by two char
   156                              <1> %define MENUFLAG_SINK_UPPER	0x40  ; reduce the upper of menu area by one char
   157                              <1> %define MENUFLAG_SINK_BOTTOM	0x80  ; ..
   158                              <1> 
   159                              <1> %define WINFLAG_HI_RUNNING	0x01  ; unsed in hi-byte of struc_window.flags
   160                              <1> 
   161                              <1> ; following flags is used in struc_action.flags
   162                              <1> 
   163                              <1> %define ACTFLAG_CLOSE_WIN	0x01  ; close the window after doing the action
   164                              <1> %define ACTFLAG_REDRAW_BODY	0x02  ; redraw window body after doing it
   165                              <1> %define ACTFLAG_REDRAW_WIN	0x04  ; redraw entire window after doing it
   166                              <1> %define ACTFLAG_REDRAW_SCR	0x08  ; redraw entire screen after doint it
   167                              <1> 
   168                              <1> %define ACTFLAG_CHK_RECNUM	0x10  ; check good record number before do it
   169                              <1> %define ACTFLAG_AUTH_ROOT	0x20  ; confirm root password before do it
   170                              <1> %define ACTFLAG_AUTH_RECORD	0x40  ; confirm record password before do it
   171                              <1> %define ACTFLAG_AUTH_SECURITY	0x80  ; confirm password according to security
   172                              <1>                                       ; level
   173                              <1> %define ACTFLAG_AUTHS		0xF0
   174                              <1> 
   175                              <1> %define SIZE_OF_STRUC_WINDOW		struc_window.end_of_struc
   176                              <1> %define SIZE_OF_STRUC_MENU_BOX		struc_menu_box.end_of_struc
   177                              <1> %define SIZE_OF_STRUC_ACTION		struc_action.end_of_struc
   178                              <1> %define SIZE_OF_STRUC_MESSAGE_BOX	struc_message_box.end_of_struc
   179                              <1> %define SIZE_OF_STRUC_INPUT_BOX		struc_input_box.end_of_struc
   180                              <1> 
   181                              <1> struc struc_window
   182 00000000 <res 00000002>      <1> 	.flags			resw 1	; flags
   183 00000002 <res 00000002>      <1> 	.title			resw 1	; 2nd level pointer to window title
   184 00000004 <res 00000002>      <1> 	.win_attr		resw 1  ; window attribute, 
   185                              <1> 					; high = title, low = frame
   186 00000006 <res 00000002>      <1> 	.win_pos		resw 1	; window position, 
   187                              <1> 					; high = row, low = col
   188 00000008 <res 00000002>      <1> 	.win_size		resw 1	; window size,
   189                              <1> 					; high = height, low = width
   190 0000000A <res 00000002>      <1> 	.parent_win		resw 1	; pointer to parent window
   191 0000000C <res 00000002>      <1> 	.next_win		resw 1  ; pointer to next window
   192 0000000E <res 00000002>      <1> 	.previous_win		resw 1  ; pointer to previous window
   193                              <1> 
   194 00000010 <res 00000002>      <1> 	.act_num		resw 1  ; number of actions
   195 00000012 <res 00000002>      <1> 	.act_table		resw 1	; pointer to action table
   196                              <1> 
   197 00000014 <res 00000002>      <1> 	.default_event_handle	resw 1	; default key event handle
   198 00000016 <res 00000002>      <1> 	.event_handle		resw 1	; key event handle
   199 00000018 <res 00000002>      <1> 	.draw_body_proc		resw 1	; draw window body proc
   200                              <1> 	.end_of_struc
   201                              <1> endstruc
   202                              <1> 
   203                              <1> struc struc_action
   204 00000000 <res 00000001>      <1> 	.flags			resb 1	; flags
   205 00000001 <res 00000002>      <1> 	.keycode		resw 1	; keycode
   206 00000003 <res 00000002>      <1> 	.func			resw 1	; function entry
   207                              <1> 	.end_of_struc
   208                              <1> endstruc
   209                              <1> 
   210                              <1> 
   211                              <1> ; For menubox, the actions of menu items are stored in struc_window.act_table.
   212                              <1> ; First items_num actions in act_table are menu items'. Other actions are 
   213                              <1> ; hotkeys.
   214                              <1> 
   215                              <1> struc struc_menu_box
   216                              <1> ; first part is a struc_window data
   217 00000000 <res 0000001A>      <1> 	.window			resb SIZE_OF_STRUC_WINDOW
   218                              <1> 
   219                              <1> ; data member of menu box
   220 0000001A <res 00000002>      <1> 	.menu_header		resw 1	; 2nd level pointer to menu header string
   221 0000001C <res 00000001>      <1> 	.menu_header_attr	resb 1	; attribute of menu header (if have)
   222 0000001D <res 00000002>      <1> 	.menu_norm_attr		resw 1	; attribute of normal menu item, 
   223                              <1> 					; high = hotkey attr, low =normal attr
   224 0000001F <res 00000002>      <1> 	.menu_focus_attr	resw 1	; attribute of focused menu item
   225 00000021 <res 00000002>      <1> 	.menu_area_pos		resw 1	; position of menu area
   226 00000023 <res 00000002>      <1> 	.menu_area_size		resw 1	; size of menu area
   227 00000025 <res 00000001>      <1> 	.scrollbar_attr		resb 1	; attribute of scrollbar
   228                              <1> 
   229 00000026 <res 00000001>      <1> 	.items_num		resb 1	; number of menu items
   230 00000027 <res 00000001>      <1> 	.focus_item		resb 1	; focused item
   231 00000028 <res 00000001>      <1> 	.first_visible_item	resb 1	; first visible item
   232                              <1> 
   233 00000029 <res 00000002>      <1> 	.item_str_proc		resw 1	; proc of get a item's string
   234                              <1> 					; input cx = index, si -> menu
   235                              <1> 					; output si -> string
   236                              <1> 	.end_of_struc
   237                              <1> endstruc
   238                              <1> 
   239                              <1> struc struc_message_box
   240 00000000 <res 0000001A>      <1> 	.window			resb SIZE_OF_STRUC_WINDOW
   241 0000001A <res 00000002>      <1> 	.message		resw 1  ; pointer to the message
   242 0000001C <res 00000002>      <1> 	.message_attr		resw 1  ; attribute of the message
   243 0000001E <res 00000002>      <1> 	.pressed_key		resw 1  ; the key which user pressed
   244                              <1> 	.end_of_struc
   245                              <1> endstruc
   246                              <1> 
   247                              <1> struc struc_input_box
   248 00000000 <res 0000001A>      <1> 	.window			resb SIZE_OF_STRUC_WINDOW
   249 0000001A <res 00000002>      <1> 	.message		resw 1  ; pointer to the message
   250 0000001C <res 00000002>      <1> 	.message_attr		resw 1  ; attribute of the message
   251 0000001E <res 00000001>      <1> 	.input_attr		resb 1  ; attribute of input area
   252 0000001F <res 00000001>      <1> 	.input_type		resb 1	; input type, 0=normal, 1=passwd
   253 00000020 <res 00000002>      <1> 	.input_buf		resw 1	; pointer to input buffer
   254 00000022 <res 00000001>      <1> 	.input_buf_len		resb 1	; length of input buffer
   255 00000023 <res 00000001>      <1> 	.input_area_len		resb 1	; length of input area
   256 00000024 <res 00000002>      <1> 	.input_area_pos		resw 1	; position of input area (in window)
   257 00000026 <res 00000001>      <1> 	.input_startp		resb 1	; the first visible char in input buf
   258 00000027 <res 00000001>      <1> 	.input_curp		resb 1	; cursor position
   259 00000028 <res 00000001>      <1> 	.return_val		resb 1	; return val, 0 = success, 1 = cancel
   260                              <1> 	.end_of_struc
   261                              <1> endstruc
   262                              <1> 
   263                              <1> ; vi:nowrap
   264                                  %include "hd_io.h"
   265                              <1> ; hd_io.h
   266                              <1> ;
   267                              <1> ; header file for hd_io.asm
   268                              <1> ;
   269                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   270                              <1> ;
   271                              <1> 
   272                              <1> 
   273                              <1> %define DRVFLAG_DRIVEOK    0x0001       ;
   274                              <1> %define DRVFLAG_CHSVALID   0x0002       ; used in driveinfo structure
   275                              <1> %define DRVFLAG_REMOVABLE  0x0004       ; and bootrecord structure 
   276                              <1> %define DRVFLAG_EXTOK      0x0008       ;
   277                              <1> %define DRVFLAG_ISCDROM    0x0010       ; 0000,0000,0001,0000B
   278                              <1> 
   279                              <1> %define DRVFLAG_MASK       0x0015       ; 0000,0000,0001,0101B
   280                              <1> 
   281                              <1> %define INT13H_EXT_INSTCHECK 0x41
   282                              <1> %define INT13H_EXT_READ      0x42
   283                              <1> %define INT13H_EXT_WRITE     0x43
   284                              <1> %define INT13H_EXT_GETINFO   0x48
   285                              <1> %define INT13H_EXT_LOCK      0x45
   286                              <1> %define INT13H_RESET         0X00
   287                              <1> %define INT13H_READ          0X02
   288                              <1> %define INT13H_WRITE         0X03
   289                              <1> %define INT13H_GETINFO       0X08
   290                              <1> %define INT13H_GETTYPE       0x15
   291                              <1> 
   292                              <1> %define EXT_SUBSET_FIXED     0x01
   293                              <1> %define EXT_SUBSET_REMOVABLE 0x02
   294                              <1> %define EXT_SUBSET_EDD       0x04
   295                              <1> 
   296                              <1> %define DRV_TYPE_FIXED       0x03
   297                              <1> 
   298                              <1> %define MIN_HD_ID            0X80
   299                              <1> %define EXTPARAM_SIZE        0x42
   300                              <1> 
   301                              <1> %define MAX_CYLS             1023
   302                              <1> 
   303                              <1> ; Structure for calling int 13h ext Read / Write functions
   304                              <1> struc struc_int13ext
   305 00000000 <res 00000001>      <1>       .pack_size    : resb  1      ; ==16 size of struct Int13ExtData
   306 00000001 <res 00000001>      <1>       .reserved     : resb  1      ; ==0
   307 00000002 <res 00000001>      <1>       .blk_count    : resb  1      ; number of blocks to transfer <= 127
   308 00000003 <res 00000001>      <1>       .reserved1    : resb  1      ; ==0
   309 00000004 <res 00000002>      <1>       .buf_addr_off : resw  1      ; address of transfer buffer(segment:offset)
   310 00000006 <res 00000002>      <1>       .buf_addr_seg : resw  1
   311 00000008 <res 00000002>      <1>       .blk_num_low1 : resw  1      ; starting absolute block number
   312 0000000A <res 00000002>      <1>       .blk_num_low2 : resw  1
   313 0000000C <res 00000002>      <1>       .blk_num_high1: resw  1
   314 0000000E <res 00000002>      <1>       .blk_num_high2: resw  1
   315                              <1>       .end_of_struc
   316                              <1> endstruc
   317                              <1> 
   318                              <1> ; structure for calling int 13h ext get drive parameters functions (0x48)
   319                              <1> struc struc_extparam
   320 00000000 <res 00000002>      <1>       .pack_size         : resw  1
   321 00000002 <res 00000002>      <1>       .flags             : resw  1
   322 00000004 <res 00000004>      <1>       .cylinders         : resd  1
   323 00000008 <res 00000004>      <1>       .heads             : resd  1      ; <= 255
   324 0000000C <res 00000004>      <1>       .sectors           : resd  1      ; <= 63
   325 00000010 <res 00000008>      <1>       .total_sectors     : resd  2
   326 00000018 <res 00000002>      <1>       .bytes_per_sect    : resw  1
   327 0000001A <res 00000004>      <1>       .dpte_addr         : resd  1      ; device parameter table extension
   328 0000001E <res 00000002>      <1>       .dpi_key           : resw  1      ; 0xBEDD - Key, indicates presence
   329                              <1>                                         ; of Device Path Information
   330 00000020 <res 00000001>      <1>       .dpi_length        : resb  1      ; Length of Device Path Information 
   331                              <1>                                         ; including the key. = 36
   332 00000021 <res 00000001>      <1>       .reserved1         : resb  1
   333 00000022 <res 00000002>      <1>       .reserved2         : resw  1
   334 00000024 <res 00000004>      <1>       .host_bus_type     : resb  4      ; Host bus type, 4 bytes
   335                              <1>                                         ; PCI    PCI Local Bus
   336                              <1>                                         ; ISA    Legacy 16 bit fixed bus
   337 00000028 <res 00000008>      <1>       .interface_type    : resb  8      ; Interface type, 8 bytes
   338                              <1>                                         ; ATA   ATA/ATAPI-4 compliant device using ATA commands
   339                              <1>                                         ; ATAPI ATA/ATAPI-4 compliant device using ATAPI commands
   340                              <1>                                         ; SCSI  SCSI compliant device
   341                              <1>                                         ; USB   USB Mass Storage compliant device
   342                              <1>                                         ; 1394  1394 Mass Storage device
   343                              <1>                                         ; FIBRE Fibre Channel
   344 00000030 <res 00000008>      <1>       .interface_path    : resq  1
   345 00000038 <res 00000008>      <1>       .device_path       : resq  1
   346 00000040 <res 00000001>      <1>       .reserved3         : resb  1
   347 00000041 <res 00000001>      <1>       .checksum          : resb  1
   348                              <1>       .end_of_struc
   349                              <1> endstruc
   350                              <1> 
   351                              <1> ; Device parameter table extension
   352                              <1> %define SIZE_OF_DPTE struc_dpte.end_of_struc
   353                              <1> struc struc_dpte
   354 00000000 <res 00000002>      <1> 	.base_io	: resw 1
   355 00000002 <res 00000002>      <1> 	.ctrl_io	: resw 1
   356 00000004 <res 00000001>      <1> 	.flags		: resb 1
   357 00000005 <res 00000001>      <1> 	.vender_spec	: resb 1
   358 00000006 <res 00000001>      <1> 	.irq		: resb 1
   359 00000007 <res 00000001>      <1> 	.blk_count	: resb 1
   360 00000008 <res 00000001>      <1> 	.dma		: resb 1
   361 00000009 <res 00000001>      <1> 	.pio		: resb 1
   362 0000000A <res 00000002>      <1> 	.bios_spec	: resw 1
   363 0000000C <res 00000002>      <1> 	.reserved	: resw 1
   364 0000000E <res 00000001>      <1> 	.revision	: resb 1
   365 0000000F <res 00000001>      <1> 	.checksum	: resb 1
   366                              <1> 	.end_of_struc
   367                              <1> endstruc
   368                              <1> 
   369                              <1> ;Return cdrom boot catalog command packet
   370                              <1> %define SIZE_OF_CDBC_CMD struc_cdbc_cmd.end_of_struc
   371                              <1> struc struc_cdbc_cmd
   372 00000000 <res 00000001>      <1> 	.pack_size	: resb 1
   373 00000001 <res 00000001>      <1> 	.sector_count	: resb 1
   374 00000002 <res 00000002>      <1> 	.buf_addr_off	: resw 1
   375 00000004 <res 00000002>      <1> 	.buf_addr_seg	: resw 1
   376 00000006 <res 00000002>      <1> 	.begnning_sect	: resw 1
   377                              <1> 	.end_of_struc
   378                              <1> endstruc
   379                              <1> 
   380                              <1> ;CD Emulation Specification Packet
   381                              <1> %define SIZE_OF_CDEMU_SPEC struc_cdemu_spec.end_of_struc
   382                              <1> struc struc_cdemu_spec
   383 00000000 <res 00000001>      <1> 	.pack_size	: resb 1
   384 00000001 <res 00000001>      <1> 	.media_type	: resb 1
   385 00000002 <res 00000001>      <1> 	.emu_drvid	: resb 1
   386 00000003 <res 00000001>      <1> 	.controller_id	: resb 1
   387 00000004 <res 00000004>      <1> 	.image_lba	: resd 1
   388 00000008 <res 00000002>      <1> 	.device_spec	: resw 1
   389 0000000A <res 00000002>      <1> 	.user_bufseg	: resw 1
   390 0000000C <res 00000002>      <1> 	.load_seg	: resw 1
   391 0000000E <res 00000002>      <1> 	.sect_count	: resw 1
   392 00000010 <res 00000001>      <1> 	.cylinders	: resb 1
   393 00000011 <res 00000001>      <1> 	.sectors	: resb 1
   394 00000012 <res 00000001>      <1> 	.heads		: resb 1
   395                              <1> 	.end_of_struc
   396                              <1> endstruc
   397                              <1> 
   398                              <1> 
   399                              <1> ;Structure of boot catalog entry
   400                              <1> %define SIZE_OF_BOOT_CATALOG struc_boot_catalog.end_of_struc
   401                              <1> struc struc_boot_catalog
   402 00000000 <res 00000001>      <1> 	.indicator	: resb 1
   403 00000001 <res 00000001>      <1> 	.media_type	: resb 1
   404 00000002 <res 00000002>      <1> 	.load_seg	: resw 1
   405 00000004 <res 00000001>      <1> 	.sys_type	: resb 1
   406 00000005 <res 00000001>      <1> 	.reserved	: resb 1
   407 00000006 <res 00000002>      <1> 	.sect_count	: resw 1
   408 00000008 <res 00000004>      <1> 	.load_rba	: resd 1
   409 0000000C <res 00000014>      <1> 	.reserved1	: resb 20
   410                              <1> 	.end_of_struc
   411                              <1> endstruc
   412                              <1> 
   413                              <1> 
   414                              <1> ; structure for record drive informations
   415                              <1> struc struc_driveinfo
   416 00000000 <res 00000001>      <1>       .id                : resb  1
   417 00000001 <res 00000001>      <1>       .flags             : resb  1
   418 00000002 <res 00000002>      <1>       .cylinders         : resw  1
   419 00000004 <res 00000002>      <1>       .heads             : resw  1
   420 00000006 <res 00000002>      <1>       .sectors           : resw  1
   421 00000008 <res 00000002>      <1>       .sector_size       : resw  1
   422                              <1>       .end_of_struc
   423                              <1> endstruc
   424                              <1> 
   425                              <1> 
   426                              <1> 
   427                              <1> %define SIZE_OF_DRIVEINFO (struc_driveinfo.end_of_struc)
   428                              <1> %define SIZE_OF_EXTPARAM (struc_extparam.end_of_struc)
   429                              <1> %define SIZE_OF_INT13EXT (struc_int13ext.end_of_struc)
   430                              <1> 
   431                                  %include "knl.h"
   432                              <1> ; knl.h
   433                              <1> ;
   434                              <1> ; header file for knl.asm
   435                              <1> ;
   436                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   437                              <1> ;
   438                              <1> 
   439                              <1> %define MAX_NAME_LENGTH   15
   440                              <1> %define MAX_KEYSTROKES    13
   441                              <1> 
   442                              <1> %define FAT16_DRVID_OFF   0x24               ; drive id offset in fat16
   443                              <1> %define FAT16_HIDSEC_OFF  0x1C               ; hidden sector offset in fat16
   444                              <1> %define FAT16_EXTBRID_OFF 0x26               ; EXBRID offset in fat16
   445                              <1> 
   446                              <1> %define FAT32_DRVID_OFF   0x40
   447                              <1> %define FAT32_HIDSEC_OFF  0x1C
   448                              <1> %define FAT32_EXTBRID_OFF 0x42
   449                              <1> 
   450                              <1> %define EXTBRID           0x29               ; ext boot record id for fat
   451                              <1> 
   452                              <1> %define INFOFLAG_SCHEDULED  0x8000       ; 1000,0000,0000,0000B
   453                              <1> %define INFOFLAG_HAVEKEYS   0x4000       ; 0100,0000,0000,0000B
   454                              <1> %define INFOFLAG_SWAPDRVID  0x2000       ; 0010,0000,0000,0000B
   455                              <1> %define INFOFLAG_AUTOACTIVE 0x1000       ; 0001,0000,0000,0000B
   456                              <1> %define INFOFLAG_ACTIVE     0x0800       ; 0000,1000,0000,0000B
   457                              <1> %define INFOFLAG_AUTOHIDE   0x0400       ; 0000,0100,0000,0000B
   458                              <1> %define INFOFLAG_HIDDEN     0x0200       ; 0000,0010,0000,0000B
   459                              <1> %define INFOFLAG_LOGICAL    0x0100       ; 0000,0001,0000,0000B
   460                              <1> 
   461                              <1> %define INFOFLAG_ISDRIVER   0x0080       ; 0000,0000,1000,0000B
   462                              <1> %define INFOFLAG_ISSPECIAL  0X0008       ; 0000,0000,0000,1000B
   463                              <1> 
   464                              <1> %define SPREC_BOOTPREV      0
   465                              <1> %define SPREC_QUIT          1
   466                              <1> %define SPREC_POWEROFF      2
   467                              <1> %define SPREC_RESTART       3
   468                              <1> 
   469                              <1> %define NUM_OF_SPREC        4
   470                              <1> 
   471                              <1> %define NUM_OF_INFOFLAGS    9
   472                              <1> 
   473                              <1> ; structure for boot record, including removable drives and partitions
   474                              <1> struc struc_bootrecord
   475 00000000 <res 00000002>      <1>       .flags           : resw 1  ; type flags of this record, see INFOFLAG_x
   476 00000002 <res 00000001>      <1>       .drive_id        : resb 1  ; drive id = 0 to 255
   477                              <1>                                  ; partition id used in linux,
   478 00000003 <res 00000001>      <1>       .part_id         : resb 1  ; 1-4 for primary partitions,
   479                              <1>                                  ; > 5 for logical partitions,
   480                              <1>                                  ; 0 for driver or special bootrecord.
   481 00000004 <res 00000001>      <1>       .type            : resb 1  ; partition type, = 0 : not a partition
   482 00000005 <res 00000001>      <1>       .reserved        : resb 1  ;
   483 00000006 <res 00000004>      <1>       .father_abs_addr : resd 1  ; father's LBA address
   484 0000000A <res 00000004>      <1>       .abs_addr        : resd 1  ; partition's abs LBA address
   485 0000000E <res 00000004>      <1>       .password        : resd 1  ; password of this record
   486 00000012 <res 00000004>      <1>       .schedule_time   : resd 1  ; schedule time
   487 00000016 <res 00000010>      <1>       .name            : resb 16 ; name of this record, zero ending.
   488 00000026 <res 0000001A>      <1>       .keystrokes      : resw 13 ; keystrokes to be preloaded.
   489                              <1>       .end_of_struc
   490                              <1> endstruc
   491                              <1> 
   492                              <1> ; structure for partition record
   493                              <1> struc struc_partition
   494 00000000 <res 00000001>      <1>       .state           : resb 1  ; = 0 : inactive; = drive id : active
   495 00000001 <res 00000001>      <1>       .start_head      : resb 1  ; start chs address of the partition
   496 00000002 <res 00000002>      <1>       .start_cs        : resw 1  ;
   497 00000004 <res 00000001>      <1>       .type            : resb 1  ; equal to the same item in struc_bootrecord
   498 00000005 <res 00000001>      <1>       .end_head        : resb 1  ; end chs address of the partition
   499 00000006 <res 00000002>      <1>       .end_cs          : resw 1  ;
   500 00000008 <res 00000004>      <1>       .relative_addr   : resd 1  ; the relative address of this partition
   501 0000000C <res 00000004>      <1>       .sectors         : resd 1  ; the number of sectors of the partition
   502                              <1>       .end_of_struc
   503                              <1> endstruc
   504                              <1> 
   505                              <1> %define SIZE_OF_BOOTRECORD (struc_bootrecord.end_of_struc)
   506                              <1> %define SIZE_OF_PARTITION  (struc_partition.end_of_struc)
   507                              <1> 
   508                                  %include "sbm.h"
   509                              <1> ; sbm.asm
   510                              <1> ;
   511                              <1> ; header file for main.asm and loader.asm
   512                              <1> ;
   513                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   514                              <1> ;
   515                              <1> 
   516                              <1> %define MAX_SBM_SIZE    30000              ; the max size of Smart Boot Manager
   517                              <1> 
   518                              <1> %define MAX_RECORD_NUM      32
   519                              <1> %define MAX_FLOPPY_NUM      2
   520                              <1> %define MAX_PASSWORD_LENGTH 16
   521                              <1> 
   522                              <1> %define PART_OFF        0x0600             ; partition table offset
   523                              <1>                                            ; Smart Boot Manager kernel startup
   524                              <1> %define SBM_SAVE_NBLKS  5
   525                              <1> 
   526                              <1> %ifndef STRUC_SBMK_HEADER
   527                              <1> %define STRUC_SBMK_HEADER
   528                              <1> 
   529                              <1> 
   530                              <1> struc struc_block_map
   531 00000000 <res 00000001>      <1>       .n_sects         resb 1
   532 00000001 <res 00000004>      <1>       .lba_addr        resd 1
   533                              <1>       .end_of_struc
   534                              <1> endstruc
   535                              <1> 
   536                              <1> %define SIZE_OF_STRUC_BLOCK_MAP struc_block_map.end_of_struc
   537                              <1> 
   538                              <1> 
   539                              <1> %endif
   540                              <1> 
   541                                  %include "main.h"
   542                              <1> ; main.h
   543                              <1> ;
   544                              <1> ; header file for main.asm main-cmds.asm main-utils.asm
   545                              <1> ;
   546                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   547                              <1> ;
   548                              <1> 
   549                              <1> ; some flags
   550                              <1> 
   551                              <1> %define KNLFLAG_FIRSTSCAN   0x01
   552                              <1> %define KNLFLAG_SECURITY    0x02
   553                              <1> %define KNLFLAG_NOINT13EXT  0x04
   554                              <1> %define KNLFLAG_NOCDROM     0x08
   555                              <1> 
   556                              <1> %define KNLFLAG_REMLAST     0x10
   557                              <1> %define KNLFLAG_ONLYPARTS   0X20
   558                              <1> %define KNLFLAG_COMPRESSED  0x80
   559                              <1> 
   560                              <1> %define BMSTYLE_FULL        0
   561                              <1> %define BMSTYLE_NOFLAGS     1
   562                              <1> %define BMSTYLE_NONUMBER    2
   563                              <1> %define BMSTYLE_NOTYPE      3
   564                              <1> 
   565                                  %include "evtcode.h"
   566                              <1> ;
   567                              <1> ; evtcode.h
   568                              <1> ;
   569                              <1> ; definiation of event codes
   570                              <1> ;
   571                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   572                              <1> ;
   573                              <1> 
   574                              <1> %define kbEsc                0x011B
   575                              <1> %define kbAltEsc             0x0100
   576                              <1> 
   577                              <1> %define kbF1                 0x3B00
   578                              <1> %define kbAltF1              0x6800
   579                              <1> %define kbCtrlF1             0x5E00
   580                              <1> %define kbShiftF1            0x5400
   581                              <1> 
   582                              <1> %define kbF2                 0x3C00
   583                              <1> %define kbAltF2              0x6900
   584                              <1> %define kbCtrlF2             0x5F00
   585                              <1> %define kbShiftF2            0x5500
   586                              <1> 
   587                              <1> %define kbF3                 0x3D00
   588                              <1> %define kbAltF3              0x6A00
   589                              <1> %define kbCtrlF3             0x6000
   590                              <1> %define kbShiftF3            0x5600
   591                              <1> 
   592                              <1> %define kbF4                 0x3E00
   593                              <1> %define kbAltF4              0x6B00
   594                              <1> %define kbCtrlF4             0x6100
   595                              <1> %define kbShiftF4            0x5700
   596                              <1> 
   597                              <1> %define kbF5                 0x3F00
   598                              <1> %define kbAltF5              0x6C00
   599                              <1> %define kbCtrlF5             0x6200
   600                              <1> %define kbShiftF5            0x5800
   601                              <1> 
   602                              <1> %define kbF6                 0x4000
   603                              <1> %define kbAltF6              0x6D00
   604                              <1> %define kbCtrlF6             0x6300
   605                              <1> %define kbShiftF6            0x5900
   606                              <1> 
   607                              <1> %define kbF7                 0x4100
   608                              <1> %define kbAltF7              0x6E00
   609                              <1> %define kbCtrlF7             0x6400
   610                              <1> %define kbShiftF7            0x5A00
   611                              <1> 
   612                              <1> %define kbF8                 0x4200
   613                              <1> %define kbAltF8              0x6F00
   614                              <1> %define kbCtrlF8             0x6500
   615                              <1> %define kbShiftF8            0x5B00
   616                              <1> 
   617                              <1> %define kbF9                 0x4300
   618                              <1> %define kbAltF9              0x7000
   619                              <1> %define kbCtrlF9             0x6600
   620                              <1> %define kbShiftF9            0x5C00
   621                              <1> 
   622                              <1> %define kbF10                0x4400
   623                              <1> %define kbAltF10             0x7100
   624                              <1> %define kbCtrlF10            0x6700
   625                              <1> %define kbShiftF10           0x5D00
   626                              <1> 
   627                              <1> %define kbF11                0x8500
   628                              <1> %define kbAltF11             0x8B00
   629                              <1> %define kbCtrlF11            0x8900
   630                              <1> %define kbShiftF11           0x8700
   631                              <1> 
   632                              <1> %define kbF12                0x8600
   633                              <1> %define kbAltF12             0x8C00
   634                              <1> %define kbCtrlF12            0x8A00
   635                              <1> %define kbShiftF12           0x8800
   636                              <1> 
   637                              <1> %define kbTab                0x0F09
   638                              <1> %define kbAltTab             0xA500
   639                              <1> %define kbCtrlTab            0x9400
   640                              <1> %define kbShiftTab           0x0F00
   641                              <1> 
   642                              <1> %define kbBack               0x0E08
   643                              <1> %define kbAltBack            0x0E00
   644                              <1> %define kbCtrlBack           0x0E7F
   645                              <1> 
   646                              <1> %define kbEnter              0x1C0D
   647                              <1> %define kbAltEnter           0x1C00
   648                              <1> %define kbCtrlEnter          0x1C0A
   649                              <1> %define kbEnhEnter           0xE00D
   650                              <1> %define kbEnhAltEnter        0xA600
   651                              <1> %define kbEnhCtrlEnter       0xE00A
   652                              <1> 
   653                              <1> %define kbSpace              0x3920
   654                              <1> 
   655                              <1> %define kbIns                0x5200
   656                              <1> %define kbEnhIns             0x52E0
   657                              <1> %define kbCtrlIns            0x9200
   658                              <1> %define kbEnhCtrlIns         0x92E0
   659                              <1> %define kbEnhAltIns          0xA200
   660                              <1> 
   661                              <1> %define kbHome               0x4700
   662                              <1> %define kbEnhHome            0x47E0
   663                              <1> %define kbCtrlHome           0x7700
   664                              <1> %define kbEnhCtrlHome        0x77E0
   665                              <1> %define kbEnhAltHome         0x9700
   666                              <1> 
   667                              <1> %define kbPgUp               0x4900
   668                              <1> %define kbEnhPgUp            0x49E0
   669                              <1> %define kbCtrlPgUp           0x8400
   670                              <1> %define kbEnhCtrlPgUp        0x84E0
   671                              <1> %define kbEnhAltPgUp         0x9900
   672                              <1> 
   673                              <1> %define kbEnd                0x4F00
   674                              <1> %define kbEnhEnd             0x4FE0
   675                              <1> %define kbCtrlEnd            0x7500
   676                              <1> %define kbEnhCtrlEnd         0x75E0
   677                              <1> %define kbEnhAltEnd          0x9F00
   678                              <1> 
   679                              <1> %define kbDel                0x5300
   680                              <1> %define kbEnhDel             0x53E0
   681                              <1> %define kbCtrlDel            0x9300
   682                              <1> %define kbEnhCtrlDel         0x93E0
   683                              <1> %define kbEnhAltDel          0xA300
   684                              <1> 
   685                              <1> %define kbPgDn               0x5100
   686                              <1> %define kbEnhPgDn            0x51E0
   687                              <1> %define kbCtrlPgDn           0x7600
   688                              <1> %define kbEnhCtrlPgDn        0x76E0
   689                              <1> %define kbEnhAltPgDn         0xA100
   690                              <1> 
   691                              <1> %define kbUp                 0x4800
   692                              <1> %define kbCtrlUp             0x8D00
   693                              <1> %define kbEnhUp              0x48E0
   694                              <1> %define kbEnhAltUp           0x9800
   695                              <1> %define kbEnhCtrlUp          0x8DE0
   696                              <1> 
   697                              <1> %define kbDown               0x5000
   698                              <1> %define kbCtrlDown           0x9100
   699                              <1> %define kbEnhDown            0x50E0
   700                              <1> %define kbEnhAltDown         0xA000
   701                              <1> %define kbEnhCtrlDown        0x91E0
   702                              <1> 
   703                              <1> %define kbLeft               0x4b00
   704                              <1> %define kbCtrlLeft           0x7300
   705                              <1> %define kbEnhLeft            0x4BE0
   706                              <1> %define kbEnhAltLeft         0x9B00
   707                              <1> %define kbEnhCtrlLeft        0x73E0
   708                              <1> 
   709                              <1> %define kbRight              0x4d00
   710                              <1> %define kbCtrlRight          0x7400
   711                              <1> %define kbEnhRight           0x4DE0
   712                              <1> %define kbEnhAltRight        0x9D00
   713                              <1> %define kbEnhCtrlRight       0x74E0
   714                              <1> 
   715                              <1> %define kbGraySlash          0xE02F
   716                              <1> %define kbGrayStar           0x372A
   717                              <1> %define kbGrayMinus          0x4A2D
   718                              <1> %define kbGrayPlus           0x4E2B
   719                              <1> 
   720                              <1> %define kbCtrlQ              0x1011
   721                              <1> %define kbCtrlW              0x1117
   722                              <1> %define kbCtrlE              0x1205
   723                              <1> %define kbCtrlR              0x1312
   724                              <1> %define kbCtrlT              0x1414
   725                              <1> %define kbCtrlY              0x1519
   726                              <1> %define kbCtrlU              0x1615
   727                              <1> %define kbCtrlI              0x1709
   728                              <1> %define kbCtrlO              0x180F
   729                              <1> %define kbCtrlP              0x1910
   730                              <1> %define kbCtrlA              0x1E01
   731                              <1> %define kbCtrlS              0x1f13
   732                              <1> %define kbCtrlD              0x2004
   733                              <1> %define kbCtrlF              0x2106
   734                              <1> %define kbCtrlG              0x2207
   735                              <1> %define kbCtrlH              0x2308
   736                              <1> %define kbCtrlJ              0x240A
   737                              <1> %define kbCtrlK              0x250b
   738                              <1> %define kbCtrlL              0x260C
   739                              <1> %define kbCtrlZ              0x2C1A
   740                              <1> %define kbCtrlX              0x2D18
   741                              <1> %define kbCtrlC              0x2E03
   742                              <1> %define kbCtrlV              0x2F16
   743                              <1> %define kbCtrlB              0x3002
   744                              <1> %define kbCtrlN              0x310E
   745                              <1> %define kbCtrlM              0x320D
   746                              <1> 
   747                              <1> %define kbLowerY             0x1579
   748                              <1> %define kbUpperY             0x1559
   749                              <1> 
   750                              <1> %define kbSlash              0x352F
   751                              <1> %define kbQuestion           0x353F
   752                              <1> 
   753                              <1> %define kbAltS               0x1F00
   754                              <1> %define kbAltR               0x1300
   755                              <1> 
   756                              <1> %define kbOne                0x0231
   757                              <1> 
   758                              <1> %define kbRightShiftMask     0x01
   759                              <1> %define kbLeftShiftMask      0x02
   760                              <1> %define kbShiftMask          0x03
   761                              <1> %define kbCtrlMask           0x04
   762                              <1> %define kbAltMask            0x08
   763                              <1> %define kbScrollMask         0x10
   764                              <1> %define kbNumLockMask        0x20
   765                              <1> %define kbCapsLockMask       0x40
   766                              <1> %define kbInsertMask         0x80
   767                              <1> 
   768                              <1> %define kbStateKeysMask   (kbScrollMask | kbNumLockMask | kbCapsLockMask | kbInsertMask)
   769                              <1> 
   770                              <1> %define EVTCODE_COMMAND		0xF0
   771                              <1> %define EVTCODE_KEYPRESS        0x01
   772                              <1> %define EVTCODE_KEYRELEASE      0x02
   773                              <1> %define EVTCODE_BROADCAST	0x04
   774                              <1> 
   775                              <1> ; Broadcast events
   776                              <1> %define EVENT_REDRAW_ROOT  ((EVTCODE_COMMAND | EVTCODE_BROADCAST) << 8 | 0x0001)
   777                              <1> %define EVENT_BOOT_DEFAULT ((EVTCODE_COMMAND | EVTCODE_BROADCAST) << 8 | 0x0002)
   778                              <1> 
   779                              <1> ; Normal events
   780                              <1> %define EVENT_TOGGLE_MENU  ((EVTCODE_COMMAND ) << 8 | 0x0001)
   781                              <1> 
   782                              <1> ; Key press event
   783                              <1> %define EVENT_RIGHTSHIFT_PRESS    ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbRightShiftMask)
   784                              <1> %define EVENT_LEFTSHIFT_PRESS     ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbLeftShiftMask)
   785                              <1> %define EVENT_SHIFT_PRESS         ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbShiftMask)
   786                              <1> %define EVENT_CTRL_PRESS          ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbCtrlMask)
   787                              <1> %define EVENT_ALT_PRESS           ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbAltMask)
   788                              <1> %define EVENT_SCROLL_ON           ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbScrollMask)
   789                              <1> %define EVENT_NUMLOCK_ON          ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbNumLockMask)
   790                              <1> %define EVENT_CAPSLOCK_ON         ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbCapsLockMask)
   791                              <1> %define EVENT_INSERT_ON           ((EVTCODE_COMMAND | EVTCODE_KEYPRESS) << 8 | kbInsertMask)
   792                              <1> 
   793                              <1> %define EVENT_RIGHTSHIFT_RELEASE  ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbRightShiftMask)
   794                              <1> %define EVENT_LEFTSHIFT_RELEASE   ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbLeftShiftMask)
   795                              <1> %define EVENT_SHIFT_RELEASE       ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbShiftMask)
   796                              <1> %define EVENT_CTRL_RELEASE        ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbCtrlMask)
   797                              <1> %define EVENT_ALT_RELEASE         ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbAltMask)
   798                              <1> %define EVENT_SCROLL_OFF          ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbScrollMask)
   799                              <1> %define EVENT_NUMLOCK_OFF         ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbNumLockMask)
   800                              <1> %define EVENT_CAPSLOCK_OFF        ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbCapsLockMask)
   801                              <1> %define EVENT_INSERT_OFF          ((EVTCODE_COMMAND | EVTCODE_KEYRELEASE) << 8 | kbInsertMask)
   802                              <1> 
   803                              <1> 
   804                                  
   805                                  %define GOOD_RECORD_NUMBER    (main_windows_data.boot_menu + struc_menu_box.items_num)
   806                                  %define FOCUS_RECORD          (main_windows_data.boot_menu + struc_menu_box.focus_item)
   807                                  %define FIRST_VISIBLE_RECORD  (main_windows_data.boot_menu + struc_menu_box.first_visible_item)
   808                                  %define BOOT_MENU_AREA_HEIGHT (main_windows_data.boot_menu + struc_menu_box.menu_area_size + 1) 
   809                                  
   810                                  ; some data definitions
   811                                  
   812                                  %define disk_address_packet     7E00h
   813                                    %define dap                   disk_address_packet
   814                                  
   815                                    %define dap_Size      dap+00h
   816                                    %define dap_Reserved  dap+01h
   817                                    %define dap_Count     dap+02h
   818                                    %define dap_Buffer    dap+04h				; Segment:Offset value
   819                                    %define dap_LBA_low   dap+08h
   820                                    %define dap_LBA_high  dap+0Ch
   821                                  
   822                                  %define Boot_stuff              7E10h
   823                                    %define Boot_Drive            Boot_stuff+0
   824                                    %define Boot_Drive_Sector     Boot_stuff+4		; ToasterOS Standalone only
   825                                    %define Boot_Drive_Type       Boot_stuff+8		; ToasterOS Standalone only
   826                                  
   827                                  
   828                                  %ifdef EMULATE_PROG
   829                                  	org 0x100
   830                                  %else
   831                                  	org 0
   832                                  %endif
   833                                  
   834                                  
   835                                  %ifndef EMULATE_PROG
   836                                  
   837                                    ; include the load code for the low level Master Boot Record
   838                                    %include  'Bootloader.asm'
   839                              <1> ; ******************************************************
   840                              <1> 
   841                              <1> ;	Name: Bootloader
   842                              <1> ;	Autor: Peter Kleissner
   843                              <1> ;	Version: 1.02
   844                              <1> ;	Date: Wednesday, 12th April 2006
   845                              <1> ;	last Update: Monday, 17th April 2006
   846                              <1> 
   847                              <1> ;	For: ToasterOS BMS
   848                              <1> ;	         |
   849                              <1> ;                l-- MBR Version
   850                              <1> ;                l----- Standalone
   851                              <1> ;	            |         |
   852                              <1> ;                   |         l--- FAT16
   853                              <1> ;                   |         l--- FAT32
   854                              <1> ;                   l
   855                              <1> ;                   l-- ISO Version
   856                              <1> 
   857                              <1> ; ******************************************************
   858                              <1> 
   859                              <1> [bits 16]					; create a 16 Bit Code
   860                              <1> CPU 386						; Assemble instructions up to the 386 instruction set
   861                              <1> 
   862                              <1> 
   863                              <1> 
   864                              <1> ; disable Interrupts & clear the direction flag
   865 00000000 FA                  <1> cli
   866 00000001 FC                  <1> cld
   867                              <1> 
   868                              <1> 
   869                              <1> ; set the Stack to 0000h:Stack_Pointer
   870 00000002 6631DB              <1> xor ebx,ebx
   871 00000005 8ED3                <1> mov ss,bx
   872 00000007 BC007C              <1> mov sp,7C00h
   873                              <1> 
   874                              <1> ; set the Data Segments to 0000h (0000h:7C000h operating address)
   875 0000000A 31C0                <1> xor ax,ax
   876 0000000C 8ED8                <1> mov ds,ax
   877 0000000E 8EC0                <1> mov es,ax
   878 00000010 8EE0                <1> mov fs,ax
   879 00000012 8EE8                <1> mov gs,ax
   880                              <1> 
   881                              <1> 
   882                              <1> 
   883                              <1> ;(Table 00653)
   884                              <1> ;Values Bootstrap loader is called with (IBM BIOS):
   885                              <1> ;	CS:IP = 0000h:7C00h
   886                              <1> ;	DH = access
   887                              <1> ;	    bits 7-6,4-0: don't care
   888                              <1> ;	    bit 5: =0 device supported by INT 13
   889                              <1> ;	DL = boot drive
   890                              <1> ;	    00h first floppy
   891                              <1> ;	    80h first hard disk
   892                              <1> 
   893                              <1> 
   894                              <1> ; check if the drive is a floppy (since ToasterOS Server Business Edition pre deactivated)
   895 00000014 F6C280              <1> test dl,80h
   896 00000017 7446                <1> jz Drive_Error
   897                              <1> 
   898                              <1> ; check if the drive is not supported by Interrupt 13h
   899                              <1> ;test dh,00100000b
   900                              <1> ;jnz Drive_Error
   901                              <1> 
   902                              <1> ; store the boot drive
   903 00000019 668916107E          <1> mov [Boot_Drive],edx
   904                              <1> 
   905                              <1> 
   906                              <1> 
   907                              <1> 
   908                              <1> ; load the default for the disk address packet
   909 0000001E C606007E10          <1> mov [dap_Size],byte 10h
   910 00000023 881E017E            <1> mov [dap_Reserved],bl
   911                              <1> 
   912                              <1> ; [ds:si] = disk address packet
   913 00000027 BE007E              <1> mov si,disk_address_packet
   914                              <1> 
   915                              <1> 
   916                              <1> 
   917                              <1> ; load the whole Master Boot Record into memory
   918 0000002A C706027E3F00        <1> mov [dap_Count],word 63
   919 00000030 66891E147E          <1> mov [Boot_Drive_Sector],ebx
   920 00000035 66891E087E          <1> mov [dap_LBA_low],ebx
   921 0000003A 66891E0C7E          <1> mov [dap_LBA_high],ebx
   922 0000003F 66C706047E00800000  <1> mov [dap_Buffer],dword 00008000h
   923                              <1> 
   924                              <1> ; interrupt 13h, function 42h: Extended Read
   925 00000048 B442                <1> mov ah,42h
   926 0000004A CD13                <1> int 13h
   927                              <1> 
   928 0000004C 7216                <1> jc Read_Error
   929                              <1> 
   930                              <1> 
   931                              <1> 
   932                              <1> ; set the Data Segments to 8000h (0800h:0000h operating address)
   933 0000004E B80008              <1> mov ax,0800h
   934 00000051 8ED8                <1> mov ds,ax
   935 00000053 8EC0                <1> mov es,ax
   936                              <1> 
   937                              <1> 
   938                              <1> 
   939                              <1> ; jump to the Smart Boot Manager Kernel
   940 00000055 EA[2B0A]0008        <1> jmp 0800h:Smart_Boot_Manager_Kernel
   941                              <1> 
   942                              <1> 
   943                              <1> 
   944                              <1> 
   945                              <1> 
   946                              <1> 
   947                              <1> Boot_Error:
   948                              <1> 
   949                              <1> ; if boot partition isn't found
   950                              <1> 
   951 0000005A BE[9E00]            <1> mov si,MSG_Boot_Error
   952 0000005D EB08                <1> jmp Public_Error
   953                              <1> 
   954                              <1> 
   955                              <1> 
   956                              <1> Drive_Error:
   957                              <1> 
   958                              <1> ; if boot drive is a floppy
   959                              <1> 
   960 0000005F BE[8900]            <1> mov si,MSG_Drive_Error
   961 00000062 EB03                <1> jmp Public_Error
   962                              <1> 
   963                              <1> 
   964                              <1> 
   965                              <1> Read_Error:
   966                              <1> 
   967                              <1> ; if there was an read error
   968                              <1> 
   969 00000064 BE[AB00]            <1> mov si,MSG_Read_Error
   970                              <1> ;jmp Public_Error
   971                              <1> 
   972                              <1> 
   973                              <1> 
   974                              <1> 
   975                              <1> ; the public error handler (esi = specific text)
   976                              <1> Public_Error:
   977 00000067 E80F00              <1> call Print_Text
   978                              <1> 
   979 0000006A BE[B800]            <1> mov si,MSG_Reboot
   980 0000006D E80900              <1> call Print_Text
   981                              <1> 
   982                              <1> ; reboot after a key press
   983 00000070 30E4                <1> xor ah,ah					; Function 00h: Get Keystroke
   984 00000072 CD16                <1> int 16h
   985                              <1> 
   986                              <1> ; this code jumps to the BIOS reboot
   987 00000074 EA                  <1> db 0EAh
   988 00000075 0000                <1> dw 0000h
   989 00000077 FFFF                <1> dw 0FFFFh
   990                              <1> 
   991                              <1> 
   992                              <1> 
   993                              <1> 
   994                              <1> ; a function to write a text onto the screen (si = text)
   995                              <1> Print_Text:
   996                              <1> 
   997                              <1> ;mov ax,cs
   998                              <1> ;mov ds,ax					; ds = cs
   999                              <1> 
  1000 00000079 BB0700              <1> mov bx,0007h					; Page Number = 0, Attribute = 07h
  1001 0000007C B40E                <1> mov ah,0Eh					; function 0Eh: Teletype Output
  1002                              <1> 
  1003 0000007E 2EAC                <1> cs lodsb					; load the first character
  1004                              <1> 
  1005                              <1> Next_Char:
  1006 00000080 CD10                <1> int 10h
  1007 00000082 2EAC                <1> cs lodsb					; al = next character
  1008 00000084 08C0                <1> or al,al					; last letter?
  1009 00000086 75F8                <1> jnz Next_Char					; if not print next letter
  1010                              <1> 
  1011 00000088 C3                  <1> ret
  1012                              <1> 
  1013                              <1> 
  1014                              <1> 
  1015                              <1> 
  1016                              <1> ; Error Messages
  1017 00000089 0A0D496E76616C6964- <1> MSG_Drive_Error		db	10, 13, "Invalid Boot-Drive", 0
  1018 00000092 20426F6F742D447269- <1>
  1019 0000009B 766500              <1>
  1020 0000009E 0A0D426F6F74204572- <1> MSG_Boot_Error		db	10, 13, "Boot Error", 0
  1021 000000A7 726F7200            <1>
  1022 000000AB 0A0D52656164204572- <1> MSG_Read_Error		db	10, 13, "Read Error", 0
  1023 000000B4 726F7200            <1>
  1024 000000B8 0A0D50726573732061- <1> MSG_Reboot		db	10, 13, "Press a key to restart", 0
  1025 000000C1 206B657920746F2072- <1>
  1026 000000CA 65737461727400      <1>
  1027                              <1> 
  1028 000000D1 51444F53            <1> Boot_Checksum	dd	"QDOS"
  1029                              <1> 
  1030                              <1> 
  1031                              <1> 
  1032                              <1> 
  1033                              <1> 
  1034                              <1> ; Error routines entry points
  1035                              <1> 
  1036 000000D5 00<rept>            <1> times 1AFh-($-$$) db 0
  1037                              <1> 
  1038 000001AF E9A8FE              <1> jmp Boot_Error
  1039 000001B2 E9AFFE              <1> jmp Read_Error
  1040                              <1> 
  1041                              <1> 
  1042                              <1> 
  1043                              <1> ; language descriptions [unused]
  1044                              <1> 
  1045                              <1> times 1B5h-($-$$) db 0
  1046                              <1> 
  1047 000001B5 00                  <1> Error_Message_1_length	db	0
  1048 000001B6 00                  <1> Error_Message_2_length	db	0
  1049 000001B7 00                  <1> Error_Message_3_length	db	0
  1050                              <1> 
  1051                              <1> 
  1052                              <1> 
  1053                              <1> ; Disk Signature
  1054                              <1> 
  1055                              <1> times 440-($-$$) db 0
  1056                              <1> 
  1057 000001B8 00000000            <1> disk_signature		dd	0
  1058 000001BC 0000                <1> 			dw	0
  1059                              <1> 
  1060                              <1> 
  1061                              <1> 
  1062                              <1> ; Partition Table
  1063                              <1> 
  1064                              <1> times 1BEh-($-$$) db 0
  1065                              <1> 
  1066                              <1> 
  1067                              <1> Partition_1
  1068 000001BE 80                  <1>     Partition_1_bootable	db	80h
  1069 000001BF 000101              <1>     Partition_1_Start_CHS	db	00h, 01h, 01h
  1070 000001C2 04                  <1>     Partition_1_Type		db	04h
  1071 000001C3 FFFEFF              <1>     Partition_1_End_CHS		db	0FFh, 0FEh, 0FFh
  1072 000001C6 3F000000            <1>     Partition_1_Start_LBA	dd	63
  1073 000001CA 814E0000            <1>     Partition_1_Sectors		dd	20160-63
  1074                              <1> Partition_2
  1075 000001CE 00                  <1>     Partition_2_bootable	db	0
  1076 000001CF 000000              <1>     Partition_2_Start_CHS	db	0, 0, 0
  1077 000001D2 07                  <1>     Partition_2_Type		db	7h
  1078 000001D3 000000              <1>     Partition_2_End_CHS		db	0, 0, 0
  1079 000001D6 C04E0000            <1>     Partition_2_Start_LBA	dd	20160
  1080 000001DA 00A00000            <1>     Partition_2_Sectors		dd	40960
  1081                              <1> Partition_3
  1082 000001DE 00                  <1>     Partition_3_bootable	db	0
  1083 000001DF 000000              <1>     Partition_3_Start_CHS	db	0, 0, 0
  1084 000001E2 00                  <1>     Partition_3_Type		db	0
  1085 000001E3 000000              <1>     Partition_3_End_CHS		db	0, 0, 0
  1086 000001E6 00000000            <1>     Partition_3_Start_LBA	dd	0
  1087 000001EA 00000000            <1>     Partition_3_Sectors		dd	0
  1088                              <1> Partition_4
  1089 000001EE 00                  <1>     Partition_4_bootable	db	0
  1090 000001EF 000000              <1>     Partition_4_Start_CHS	db	0, 0, 0
  1091 000001F2 00                  <1>     Partition_4_Type		db	0
  1092 000001F3 000000              <1>     Partition_4_End_CHS		db	0, 0, 0
  1093 000001F6 00000000            <1>     Partition_4_Start_LBA	dd	0
  1094 000001FA 00000000            <1>     Partition_4_Sectors		dd	0
  1095                              <1>     
  1096                              <1> 
  1097                              <1> times 510-($-$$) db 0
  1098                              <1> 
  1099 000001FE 55AA                <1> Boot_Signature	dw	0AA55h
  1100                                    
  1101                                  %else
  1102                                  
  1103                                    ; include DOS Source Code
  1104                                    
  1105                                  	; set Data Segments to CS / 0000h
  1106                                  	push cs
  1107                                  	pop ax
  1108                                  	mov ds,ax
  1109                                  	mov es,ax
  1110                                  	
  1111                                  	xor ax,ax
  1112                                  	mov fs,ax
  1113                                  	mov gs,ax
  1114                                  	
  1115                                  	jmp Smart_Boot_Manager_Kernel
  1116                                  
  1117                                  %endif
  1118                                  
  1119                                  
  1120                                  
  1121                                  ;=============================================================================
  1122                                  ;  data for the Smart Boot Manager
  1123                                  ;=============================================================================
  1124                                  
  1125 00000200 <res 00000019>            ADDR_SBMK_BLOCK_MAP              resb      SIZE_OF_STRUC_BLOCK_MAP * 5
  1126 00000219 01                        ADDR_SBMK_FLAGS                  db        KNLFLAG_FIRSTSCAN
  1127 0000021A 1E                        ADDR_SBMK_DELAY_TIME             db        30
  1128 0000021B FF                        ADDR_SBMK_DIRECT_BOOT            db        0FFh
  1129 0000021C FF                        ADDR_SBMK_DEFAULT_BOOT           db        0FFh
  1130 0000021D 00000000                  ADDR_SBMK_ROOT_PASSWORD          dd        0
  1131 00000221 0000                      ADDR_SBMK_BOOTMENU_STYLE         db        0, 0
  1132                                  ; ADDR_SBMK_CDROM_IOPORTS          dw        0, 0
  1133 00000223 0E06                      ADDR_SBMK_BOOT_MENU_POS          dw        0x060E
  1134 00000225 0101                      ADDR_SBMK_MAIN_MENU_POS          dw        0x0101
  1135 00000227 0202                      ADDR_SBMK_RECORD_MENU_POS        dw        0x0202
  1136 00000229 0303                      ADDR_SBMK_SYS_MENU_POS           dw        0x0303
  1137                                  
  1138                                  
  1139                                  ; some huge data
  1140                                  
  1141 0000022B <res 00000800>            ADDR_SBMK_BOOT_RECORDS           resb      MAX_RECORD_NUM * SIZE_OF_BOOTRECORD
  1142                                  
  1143                                  
  1144                                  
  1145                                  
  1146                                  
  1147                                  ;=============================================================================
  1148                                  ;  Smart Boot Manager Kernel
  1149                                  ;=============================================================================
  1150                                  
  1151                                  Smart_Boot_Manager_Kernel:
  1152                                  
  1153                                  
  1154                                  ;; install own interrupt 13h Handler [in-removing]
  1155                                  ;mov bl,1
  1156                                  ;call install_myint13h
  1157                                  
  1158                                  ;Initializing the CD-ROMs.. [in reviewing]
  1159                                  ;%ifndef DISABLE_CDBOOT
  1160                                  ;	test byte [ADDR_SBMK_FLAGS], KNLFLAG_NOCDROM
  1161                                  ;	jnz .not_set_cdrom_ports
  1162                                  ;	mov bx, [ADDR_SBMK_CDROM_IOPORTS]
  1163                                  ;	mov cx, [ADDR_SBMK_CDROM_IOPORTS+2]
  1164                                  ;	call set_io_ports
  1165                                  ;.not_set_cdrom_ports:
  1166                                  ;%endif
  1167                                  
  1168                                  
  1169                                  %ifndef EMULATE_PROG
  1170                                  
  1171                                  ; Set "No Int 13h Extension" flag
  1172 00000A2B 30C0                    	xor al, al
  1173 00000A2D F606[1902]04            	test byte [ADDR_SBMK_FLAGS], KNLFLAG_NOINT13EXT
  1174 00000A32 7502                    	jnz .no_int13_ext
  1175 00000A34 FEC0                            inc al
  1176                                  .no_int13_ext:
  1177 00000A36 A2[9236]                	mov [use_int13_ext], al
  1178                                  
  1179                                  ; Do some initialization
  1180 00000A39 E87C07                  	call main_init_theme		; initialize the theme
  1181 00000A3C E85D08                  	call main_init_video		; initialize the video mode.
  1182 00000A3F E80F18                          call window_initialize
  1183                                  
  1184                                  ; Check if needs scan boot records.
  1185 00000A42 F606[1902]01            	test byte [ADDR_SBMK_FLAGS], KNLFLAG_FIRSTSCAN
  1186 00000A47 740D                    	jz .no_first_scan
  1187                                  
  1188 00000A49 E88C08                  	call main_init_boot_records	; if it's the first time
  1189                                  					; to run this program,
  1190                                  					; call the init_boot_records.
  1191 00000A4C E86008                  	call main_init_good_record_list
  1192                                  
  1193 00000A4F 8026[1902]FE            	and byte [ADDR_SBMK_FLAGS], ~ KNLFLAG_FIRSTSCAN
  1194 00000A54 EB3E                    	jmp short .show_menu
  1195                                  
  1196                                  .no_first_scan:
  1197                                  
  1198                                  ; go ahead!
  1199                                  
  1200                                  ; Initialize the good record list
  1201 00000A56 E85608                  	call main_init_good_record_list
  1202                                  
  1203                                  ; Initialize the keyboard shift var, and test if Ctrl is pressed down.
  1204 00000A59 B402                    	mov ah, 0x02			; test the keyboard status,
  1205 00000A5B E8F31D                  	call bioskey			; if ctrl pressed then show
  1206 00000A5E A2[6D67]                        mov [utils_tmp.kbd_last_shift], al ; Initialize the kbd stat reg.
  1207 00000A61 A804                    	test al, kbCtrlMask		; menu directly,
  1208 00000A63 752F                    	jnz .show_menu			;
  1209                                  
  1210                                  ; Check direct boot, and schedule boot
  1211 00000A65 A0[1B02]                	mov al, [ADDR_SBMK_DIRECT_BOOT]	; check if need boot directly.
  1212 00000A68 3C20                    	cmp al, MAX_RECORD_NUM		;
  1213 00000A6A 7213                    	jb .go_direct_boot
  1214                                  
  1215 00000A6C E82F0D                  	call main_do_schedule		; implement the schedule table.
  1216                                  
  1217 00000A6F 803E[1A02]00            	cmp byte [ADDR_SBMK_DELAY_TIME], 0
  1218 00000A74 751E                    	jnz .show_menu			; delay_time = 0, boot the
  1219                                  					; default record directly.
  1220 00000A76 A0[1C02]                	mov al, [ADDR_SBMK_DEFAULT_BOOT]
  1221 00000A79 3C20                    	cmp al, MAX_RECORD_NUM
  1222 00000A7B 720F                    	jb .go_def_boot
  1223 00000A7D EB15                    	jmp short .show_menu
  1224                                          
  1225                                  .go_direct_boot:
  1226 00000A7F C606[1B02]FF            	mov byte [ADDR_SBMK_DIRECT_BOOT], 0xff ; clear the direct boot sig.
  1227 00000A84 E8590D                  	call main_save_boot_manager
  1228 00000A87 7208                    	jc .disk_error
  1229                                  
  1230 00000A89 A2[1C02]                	mov [ADDR_SBMK_DEFAULT_BOOT], al
  1231                                  
  1232                                  .go_def_boot:
  1233 00000A8C E8660C                  	call main_boot_default
  1234 00000A8F EB03                    	jmp short .show_menu
  1235                                  
  1236                                  .disk_error:
  1237 00000A91 E8E80B                  	call main_show_disk_error
  1238                                  
  1239                                  %else
  1240                                   
  1241                                   ; DOS Emulation Source Code
  1242                                  
  1243                                      call main_init_video
  1244                                      call main_init_boot_records
  1245                                      call main_init_good_record_list
  1246                                      call main_do_schedule
  1247                                  
  1248                                  %endif
  1249                                  
  1250                                  
  1251                                  .show_menu:
  1252 00000A94 E87407                  	call main_init_all_menus	; initialize the command menus
  1253                                  
  1254                                  ;Initialize  time count var
  1255 00000A97 A0[1A02]                	mov al, [ADDR_SBMK_DELAY_TIME]
  1256 00000A9A 3CFF                    	cmp al, 255
  1257 00000A9C 7305                    	jae .not_count_time			; if delay_time = 255
  1258 00000A9E A2[8F67]                	mov [main_tmp.time_count], al		; then do not count time.
  1259 00000AA1 30C0                    	xor al, al
  1260                                  
  1261                                  .not_count_time:
  1262 00000AA3 A2[9267]                	mov [main_tmp.key_pressed], al
  1263                                  
  1264                                  ; Set focus bar to the default record
  1265 00000AA6 8A1E[1C02]              	mov bl, [ADDR_SBMK_DEFAULT_BOOT]
  1266 00000AAA 8D36[6F67]              	lea si, [main_tmp.good_record_list]
  1267 00000AAE 8A0E[FD42]              	mov cl, [GOOD_RECORD_NUMBER]
  1268 00000AB2 30ED                    	xor ch, ch
  1269 00000AB4 30FF                    	xor bh, bh
  1270                                          
  1271                                  .loop_search_def:
  1272 00000AB6 AC                      	lodsb
  1273 00000AB7 38D8                    	cmp al, bl
  1274 00000AB9 7406                    	je .found_def
  1275 00000ABB FEC7                    	inc bh
  1276 00000ABD E2F7                    	loop .loop_search_def
  1277 00000ABF EB14                    	jmp short .go_ahead
  1278                                  
  1279                                  .found_def:
  1280 00000AC1 883E[FE42]              	mov [FOCUS_RECORD], bh
  1281 00000AC5 3A3E[FB42]              	cmp bh, [BOOT_MENU_AREA_HEIGHT]
  1282 00000AC9 720A                    	jb .go_ahead
  1283 00000ACB FEC7                    	inc bh
  1284 00000ACD 2A3E[FB42]              	sub bh, [BOOT_MENU_AREA_HEIGHT]
  1285 00000AD1 883E[FF42]              	mov [FIRST_VISIBLE_RECORD], bh
  1286                                  
  1287                                  ; Run the UI system
  1288                                  .go_ahead:
  1289 00000AD5 BB[BD42]                        mov bx, main_windows_data.root_window
  1290 00000AD8 BE[D742]                        mov si, main_windows_data.boot_menu
  1291 00000ADB E8A817                          call window_execute
  1292                                  
  1293                                  .halt:
  1294 00000ADE EBFE                            jmp short .halt
  1295                                  
  1296                                  ;=============================================================================
  1297                                  ;  include area (mostly some commands)
  1298                                  ;=============================================================================
  1299                                  
  1300                                  %include "main-cmds.asm"
  1301                              <1> ; asmsyntax=nasm
  1302                              <1> ;
  1303                              <1> ; main-cmds.asm
  1304                              <1> ;
  1305                              <1> ; command handles for main program
  1306                              <1> ;
  1307                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
  1308                              <1> ;
  1309                              <1> 
  1310                              <1> ;=============================================================================
  1311                              <1> ;main_show_help ---- show the help window
  1312                              <1> ;=============================================================================
  1313                              <1> main_show_help:
  1314 00000AE0 8B36[6745]          <1>         mov si, [str_idx.help_content]
  1315 00000AE4 09F6                <1>         or si, si
  1316 00000AE6 740D                <1>         jz .end
  1317                              <1>         
  1318 00000AE8 A0[F044]            <1> 	mov al, [color.help_msg]
  1319 00000AEB 8B1E[EE44]          <1> 	mov bx, [color.help_win]
  1320 00000AEF BA[2545]            <1>         mov dx, str_idx.help
  1321 00000AF2 E83F11              <1>         call message_box
  1322                              <1> .end:
  1323 00000AF5 C3                  <1>         ret
  1324                              <1> 
  1325                              <1> ;=============================================================================
  1326                              <1> ;main_show_about ---- show the about window
  1327                              <1> ;=============================================================================
  1328                              <1> main_show_about:
  1329 00000AF6 8B36[6545]          <1>         mov si, [str_idx.about_content]
  1330 00000AFA 09F6                <1>         or si, si
  1331 00000AFC 740D                <1>         jz .end
  1332                              <1>         
  1333 00000AFE A0[F344]            <1>         mov al, [color.about_msg]
  1334 00000B01 8B1E[F144]          <1>         mov bx, [color.about_win]
  1335 00000B05 BA[2145]            <1>         mov dx, str_idx.about
  1336 00000B08 E82911              <1>         call message_box
  1337                              <1> .end:
  1338 00000B0B C3                  <1>         ret
  1339                              <1> 
  1340                              <1> ;=============================================================================
  1341                              <1> ;main_show_main_menu ---- show the main command menu
  1342                              <1> ;=============================================================================
  1343                              <1> main_show_main_menu:
  1344 00000B0C BE[0243]            <1> 	mov si, main_windows_data.main_menu
  1345 00000B0F E8AE17              <1> 	call window_run
  1346 00000B12 C3                  <1> 	ret
  1347                              <1> 
  1348                              <1> ;=============================================================================
  1349                              <1> ;main_show_record_menu ---- show the record command menu
  1350                              <1> ;=============================================================================
  1351                              <1> main_show_record_menu:
  1352 00000B13 BE[2D43]            <1> 	mov si, main_windows_data.record_menu
  1353 00000B16 E8A717              <1> 	call window_run
  1354 00000B19 C3                  <1> 	ret
  1355                              <1> 
  1356                              <1> ;=============================================================================
  1357                              <1> ;main_show_sys_menu ---- show the sys command menu
  1358                              <1> ;=============================================================================
  1359                              <1> main_show_sys_menu:
  1360 00000B1A BE[5843]            <1> 	mov si, main_windows_data.sys_menu
  1361 00000B1D E8A017              <1> 	call window_run
  1362 00000B20 C3                  <1> 	ret
  1363                              <1> 
  1364                              <1> ;=============================================================================
  1365                              <1> ;main_ask_save_changes ---- save boot manager to disk
  1366                              <1> ;=============================================================================
  1367                              <1> main_ask_save_changes:
  1368 00000B21 803E[9567]00        <1>         cmp byte [main_tmp.change_occured], 0
  1369 00000B26 7418                <1>         je .no_changes
  1370                              <1>         
  1371 00000B28 8B36[6D45]          <1>         mov si, [str_idx.ask_save_changes]
  1372 00000B2C E83111              <1>         call info_box
  1373 00000B2F 3D0D1C              <1>         cmp ax, kbEnter
  1374 00000B32 740D                <1>         je main_save_changes
  1375 00000B34 3A06[BE44]          <1>         cmp al, [yes_key_lower]
  1376 00000B38 7407                <1>         je main_save_changes
  1377 00000B3A 3A06[BF44]          <1>         cmp al, [yes_key_upper]
  1378 00000B3E 7401                <1>         je main_save_changes
  1379                              <1>         
  1380                              <1> .no_changes:
  1381 00000B40 C3                  <1>         ret
  1382                              <1> 
  1383                              <1> ;=============================================================================
  1384                              <1> ;main_save_changes ---- save boot manager to disk
  1385                              <1> ;=============================================================================
  1386                              <1> main_save_changes:
  1387                              <1> 
  1388                              <1> %ifndef EMULATE_PROG
  1389 00000B41 E89C0C              <1>         call main_save_boot_manager
  1390 00000B44 720D                <1>         jc .disk_error
  1391                              <1> %endif
  1392                              <1> 
  1393 00000B46 C606[9567]00        <1>         mov byte [main_tmp.change_occured], 0       ; clear change signature.
  1394                              <1> 
  1395 00000B4B 8B36[6945]          <1>         mov si, [str_idx.changes_saved]
  1396 00000B4F E80E11              <1>         call info_box
  1397 00000B52 C3                  <1>         ret
  1398                              <1> 
  1399                              <1> .disk_error:
  1400 00000B53 E8260B              <1>         call main_show_disk_error
  1401                              <1> .end:
  1402 00000B56 C3                  <1>         ret
  1403                              <1> 
  1404                              <1> %if 0
  1405                              <1> ;=============================================================================
  1406                              <1> ;main_change_video_mode ---- change the video mode
  1407                              <1> ;=============================================================================
  1408                              <1> main_change_video_mode:
  1409                              <1> 
  1410                              <1>         inc byte [change_occured]               ; some changes occured.
  1411                              <1> 
  1412                              <1>         mov al, [video_mode]
  1413                              <1>         not al
  1414                              <1>         mov [video_mode], al
  1415                              <1>         call init_video
  1416                              <1>         call draw_screen
  1417                              <1>         ret
  1418                              <1> %endif
  1419                              <1> 
  1420                              <1> ;=============================================================================
  1421                              <1> ;main_change_name ---- change the record name
  1422                              <1> ;=============================================================================
  1423                              <1> main_change_name:
  1424 00000B57 E8700B              <1>         call main_get_focus_record_pointer
  1425                              <1> 
  1426 00000B5A 89F7                <1> 	mov di, si
  1427 00000B5C 83C716              <1> 	add di, struc_bootrecord.name
  1428                              <1> 
  1429 00000B5F 0FB606[E744]        <1>         movzx ax, byte [color.input_box_msg]
  1430 00000B64 8B1E[E544]          <1>         mov bx, [color.input_box]
  1431 00000B68 B90F0F              <1> 	mov cx, (MAX_NAME_LENGTH<<8)|MAX_NAME_LENGTH
  1432 00000B6B 31D2                <1> 	xor dx, dx
  1433 00000B6D 8B36[2D45]          <1>         mov si, [str_idx.name]
  1434                              <1>         
  1435 00000B71 E8BA12              <1>         call input_box
  1436 00000B74 7204                <1>         jc .end
  1437 00000B76 FE06[9567]          <1>         inc byte [main_tmp.change_occured]          ; some changes occured.
  1438                              <1> .end:
  1439 00000B7A C3                  <1>         ret
  1440                              <1> 
  1441                              <1> 
  1442                              <1> ;=============================================================================
  1443                              <1> ;main_login_as_root ---- login as root
  1444                              <1> ;=============================================================================
  1445                              <1> main_login_as_root:
  1446 00000B7B A0[9667]            <1> 	mov al, [main_tmp.root_login]
  1447 00000B7E 08C0                <1> 	or al, al
  1448 00000B80 0F94C0              <1> 	setz al
  1449 00000B83 A2[9667]            <1> 	mov [main_tmp.root_login], al
  1450 00000B86 C3                  <1>         ret
  1451                              <1> 
  1452                              <1> 
  1453                              <1> ;=============================================================================
  1454                              <1> ;main_change_security_mode ---- change the secure mode
  1455                              <1> ;=============================================================================
  1456                              <1> main_change_security_mode:
  1457 00000B87 8036[1902]02        <1> 	xor byte [ADDR_SBMK_FLAGS], KNLFLAG_SECURITY
  1458 00000B8C FE06[9567]          <1>         inc byte [main_tmp.change_occured]
  1459 00000B90 C3                  <1>         ret
  1460                              <1> 
  1461                              <1> ;=============================================================================
  1462                              <1> ;main_change_root_password ---- change the root password
  1463                              <1> ;=============================================================================
  1464                              <1> main_change_root_password:
  1465 00000B91 B110                <1> 	mov cl, MAX_PASSWORD_LENGTH
  1466 00000B93 8B36[2F45]          <1>         mov si, [str_idx.new_root_passwd]
  1467 00000B97 E8D712              <1>         call input_password
  1468 00000B9A 7241                <1>         jc .end
  1469 00000B9C 89C3                <1>         mov bx, ax
  1470 00000B9E 89D1                <1>         mov cx, dx
  1471                              <1> 
  1472 00000BA0 53                  <1>         push bx
  1473 00000BA1 51                  <1>         push cx
  1474 00000BA2 B110                <1> 	mov cl, MAX_PASSWORD_LENGTH
  1475 00000BA4 8B36[3745]          <1>         mov si, [str_idx.retype_passwd]
  1476 00000BA8 E8C612              <1>         call input_password
  1477 00000BAB 59                  <1>         pop cx
  1478 00000BAC 5B                  <1>         pop bx
  1479 00000BAD 722E                <1>         jc .end
  1480 00000BAF 39C3                <1>         cmp bx, ax
  1481 00000BB1 7523                <1>         jne .wrong
  1482 00000BB3 39D1                <1>         cmp cx, dx
  1483 00000BB5 751F                <1>         jne .wrong
  1484                              <1> 
  1485 00000BB7 891E[1D02]          <1>         mov [ADDR_SBMK_ROOT_PASSWORD], bx
  1486 00000BBB 890E[1F02]          <1>         mov [ADDR_SBMK_ROOT_PASSWORD+2], cx
  1487                              <1> 
  1488 00000BBF C606[9667]00        <1>         mov byte [main_tmp.root_login], 0
  1489 00000BC4 8026[1902]FD        <1>         and byte [ADDR_SBMK_FLAGS], ~ KNLFLAG_SECURITY
  1490                              <1> 
  1491 00000BC9 8B36[6B45]          <1>         mov si, [str_idx.passwd_changed]
  1492 00000BCD E89010              <1>         call info_box
  1493                              <1> 
  1494 00000BD0 FE06[9567]          <1>         inc byte [main_tmp.change_occured]         ; some changes occured.
  1495 00000BD4 EB07                <1>         jmp short .end
  1496                              <1> .wrong:
  1497 00000BD6 8B36[6F45]          <1>         mov si, [str_idx.wrong_passwd]
  1498 00000BDA E87110              <1>         call error_box
  1499                              <1> .end:
  1500 00000BDD C3                  <1>         ret
  1501                              <1> 
  1502                              <1> ;=============================================================================
  1503                              <1> ;main_change_record_password ---- change the record password
  1504                              <1> ;=============================================================================
  1505                              <1> main_change_record_password:
  1506 00000BDE B110                <1> 	mov cl, MAX_PASSWORD_LENGTH
  1507 00000BE0 8B36[3345]          <1>         mov si, [str_idx.new_record_passwd]
  1508 00000BE4 E88A12              <1>         call input_password
  1509 00000BE7 7237                <1>         jc .end
  1510 00000BE9 89C3                <1>         mov bx, ax
  1511 00000BEB 89D1                <1>         mov cx, dx
  1512                              <1> 
  1513 00000BED 53                  <1>         push bx
  1514 00000BEE 51                  <1>         push cx
  1515 00000BEF B110                <1> 	mov cl, MAX_PASSWORD_LENGTH
  1516 00000BF1 8B36[3745]          <1>         mov si, [str_idx.retype_passwd]
  1517 00000BF5 E87912              <1>         call input_password
  1518 00000BF8 59                  <1>         pop cx
  1519 00000BF9 5B                  <1>         pop bx
  1520 00000BFA 7224                <1>         jc .end
  1521 00000BFC 39C3                <1>         cmp bx, ax
  1522 00000BFE 7519                <1>         jne .wrong
  1523 00000C00 39D1                <1>         cmp cx, dx
  1524 00000C02 7515                <1>         jne .wrong
  1525                              <1> 
  1526 00000C04 E8C30A              <1>         call main_get_focus_record_pointer
  1527 00000C07 895C0E              <1>         mov [si+struc_bootrecord.password], bx
  1528 00000C0A 894C10              <1>         mov [si+struc_bootrecord.password+2], cx
  1529                              <1>         
  1530 00000C0D 8B36[6B45]          <1>         mov si, [str_idx.passwd_changed]
  1531 00000C11 E84C10              <1>         call info_box
  1532                              <1> 
  1533 00000C14 FE06[9567]          <1>         inc byte [main_tmp.change_occured]         ; some changes occured.
  1534 00000C18 C3                  <1>         ret
  1535                              <1>         
  1536                              <1> .wrong:
  1537 00000C19 8B36[6F45]          <1>         mov si, [str_idx.wrong_passwd]
  1538 00000C1D E82E10              <1>         call error_box
  1539                              <1> .end:
  1540 00000C20 C3                  <1>         ret
  1541                              <1> 
  1542                              <1> ;=============================================================================
  1543                              <1> ;main_set_default_record ---- set the default boot record
  1544                              <1> ;=============================================================================
  1545                              <1> main_set_default_record:
  1546 00000C21 8A0E[FE42]          <1> 	mov cl, [FOCUS_RECORD]
  1547 00000C25 E8B50A              <1> 	call main_get_record_pointer           ; get real record index
  1548                              <1> 
  1549 00000C28 880E[1C02]          <1>         mov [ADDR_SBMK_DEFAULT_BOOT], cl
  1550 00000C2C FE06[9567]          <1>         inc byte [main_tmp.change_occured]      ; some changes occured.
  1551 00000C30 C3                  <1>         ret
  1552                              <1> 
  1553                              <1> ;=============================================================================
  1554                              <1> ;main_unset_default_record ---- unset the default boot record
  1555                              <1> ;=============================================================================
  1556                              <1> main_unset_default_record:
  1557 00000C31 C606[1C02]FF        <1>         mov byte [ADDR_SBMK_DEFAULT_BOOT], 0xFF
  1558 00000C36 FE06[9567]          <1>         inc byte [main_tmp.change_occured]      ; some changes occured.
  1559 00000C3A C3                  <1>         ret
  1560                              <1>         
  1561                              <1> ;=============================================================================
  1562                              <1> ;main_toggle_auto_active ---- toggle the auto active switch
  1563                              <1> ;=============================================================================
  1564                              <1> main_toggle_auto_active:
  1565 00000C3B E88C0A              <1>         call main_get_focus_record_pointer
  1566 00000C3E E89726              <1>         call check_allow_act
  1567 00000C41 720D                <1>         jc .end
  1568                              <1> 
  1569 00000C43 E89409              <1> 	call main_auth_record_action
  1570 00000C46 7208                <1> 	jc .end
  1571                              <1> 
  1572 00000C48 81340010            <1>         xor word [si + struc_bootrecord.flags], INFOFLAG_AUTOACTIVE
  1573 00000C4C FE06[9567]          <1>         inc byte [main_tmp.change_occured]        ; some changes occured.
  1574                              <1> .end:
  1575 00000C50 C3                  <1>         ret
  1576                              <1> 
  1577                              <1> ;=============================================================================
  1578                              <1> ;main_toggle_auto_hide ---- toggle the auto hide switch
  1579                              <1> ;=============================================================================
  1580                              <1> main_toggle_auto_hide:
  1581 00000C51 E8760A              <1>         call main_get_focus_record_pointer
  1582 00000C54 E85E26              <1>         call check_allow_hide
  1583 00000C57 720D                <1>         jc .end
  1584                              <1> 
  1585 00000C59 E87E09              <1> 	call main_auth_record_action
  1586 00000C5C 7208                <1> 	jc .end
  1587                              <1>         
  1588 00000C5E 81340004            <1>         xor word [si + struc_bootrecord.flags], INFOFLAG_AUTOHIDE
  1589 00000C62 FE06[9567]          <1>         inc byte [main_tmp.change_occured]        ; some changes occured.
  1590                              <1> 
  1591                              <1> .end:
  1592 00000C66 C3                  <1>         ret
  1593                              <1> 
  1594                              <1> ;=============================================================================
  1595                              <1> ;main_mark_active ---- mark the record active
  1596                              <1> ;=============================================================================
  1597                              <1> main_mark_active:
  1598 00000C67 E8600A              <1>         call main_get_focus_record_pointer
  1599 00000C6A E86B26              <1>         call check_allow_act
  1600 00000C6D 724F                <1>         jc .end
  1601                              <1> 
  1602 00000C6F E86809              <1> 	call main_auth_record_action
  1603 00000C72 724A                <1> 	jc .end
  1604                              <1> 
  1605 00000C74 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]
  1606                              <1> 
  1607 00000C77 56                  <1>         push si
  1608 00000C78 8D36[6F67]          <1>         lea si, [main_tmp.good_record_list]
  1609 00000C7C 8D3E[2B02]          <1>         lea di, [ADDR_SBMK_BOOT_RECORDS]
  1610                              <1> 
  1611 00000C80 0FB60E[FD42]        <1>         movzx cx, byte [GOOD_RECORD_NUMBER]
  1612 00000C85 B640                <1>         mov dh, SIZE_OF_BOOTRECORD
  1613 00000C87 6631DB              <1>         xor ebx, ebx
  1614 00000C8A FC                  <1>         cld
  1615                              <1> .loop_clear_act:                                ; clear all active marks of
  1616 00000C8B 57                  <1>         push di                                 ; the boot records in same
  1617 00000C8C AC                  <1>         lodsb                                   ; drive and father partition.
  1618 00000C8D F6E6                <1>         mul dh
  1619 00000C8F 01C7                <1>         add di, ax
  1620 00000C91 3A5502              <1>         cmp dl, [di + struc_bootrecord.drive_id]
  1621 00000C94 750A                <1>         jne .do_nothing
  1622 00000C96 66395D06            <1>         cmp [di + struc_bootrecord.father_abs_addr], ebx
  1623 00000C9A 7504                <1>         jne .do_nothing
  1624 00000C9C 8125FFF7            <1>         and word [di + struc_bootrecord.flags], ~ INFOFLAG_ACTIVE
  1625                              <1> .do_nothing:
  1626 00000CA0 5F                  <1>         pop di
  1627 00000CA1 E2E8                <1>         loop .loop_clear_act
  1628                              <1> 
  1629 00000CA3 5E                  <1>         pop si
  1630                              <1>         
  1631 00000CA4 E86A22              <1>         call mark_record_active
  1632 00000CA7 7206                <1>         jc .error                                ; mark active ok
  1633 00000CA9 E8E809              <1>         call main_recheck_same_records           ; recheck same records
  1634 00000CAC 7205                <1>         jc .disk_error
  1635 00000CAE C3                  <1>         ret
  1636                              <1> 
  1637                              <1> .error:
  1638 00000CAF 09C0                <1>         or ax, ax
  1639 00000CB1 7404                <1>         jz .cannot_act
  1640                              <1> 
  1641                              <1> .disk_error:
  1642 00000CB3 E8C609              <1>         call main_show_disk_error
  1643 00000CB6 C3                  <1>         ret
  1644                              <1> 
  1645                              <1> .cannot_act:
  1646 00000CB7 8B36[7345]          <1>         mov si, [str_idx.mark_act_failed]
  1647 00000CBB E8900F              <1>         call error_box
  1648                              <1> .end:
  1649 00000CBE C3                  <1>         ret
  1650                              <1> 
  1651                              <1> ;=============================================================================
  1652                              <1> ;main_toggle_hidden ---- toggle a record's hidden attribute
  1653                              <1> ;=============================================================================
  1654                              <1> main_toggle_hidden:
  1655 00000CBF E8080A              <1>         call main_get_focus_record_pointer
  1656 00000CC2 E8F025              <1>         call check_allow_hide
  1657 00000CC5 721F                <1>         jc .end
  1658                              <1> 
  1659 00000CC7 E81009              <1> 	call main_auth_record_action
  1660 00000CCA 721A                <1> 	jc .end
  1661                              <1> 
  1662 00000CCC E8AC22              <1>         call toggle_record_hidden
  1663 00000CCF 7206                <1>         jc .error                                 ; toggle hidden ok
  1664 00000CD1 E8C009              <1>         call main_recheck_same_records            ; recheck same records
  1665 00000CD4 7205                <1>         jc .disk_error
  1666 00000CD6 C3                  <1>         ret
  1667                              <1> 
  1668                              <1> .error:
  1669 00000CD7 09C0                <1>         or ax, ax
  1670 00000CD9 7404                <1>         jz .cannot_hide
  1671                              <1> 
  1672                              <1> .disk_error:
  1673 00000CDB E89E09              <1>         call main_show_disk_error
  1674 00000CDE C3                  <1>         ret
  1675                              <1> 
  1676                              <1> .cannot_hide:
  1677 00000CDF 8B36[7545]          <1>         mov si, [str_idx.toggle_hid_failed]
  1678 00000CE3 E8680F              <1>         call error_box
  1679                              <1> .end:
  1680 00000CE6 C3                  <1>         ret
  1681                              <1> 
  1682                              <1> ;=============================================================================
  1683                              <1> ;main_delete_record ---- delete a boot record
  1684                              <1> ;=============================================================================
  1685                              <1> main_delete_record:
  1686 00000CE7 E8E009              <1>         call main_get_focus_record_pointer
  1687 00000CEA F7040002            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_HIDDEN
  1688 00000CEE 7415                <1>         jz .del_it
  1689                              <1> 
  1690 00000CF0 E88822              <1>         call toggle_record_hidden           ; unhide it first.
  1691 00000CF3 7310                <1>         jnc .del_it                         ; unhide ok, del it.
  1692                              <1> 
  1693 00000CF5 09C0                <1>         or ax, ax
  1694 00000CF7 7404                <1>         jz .cannot_hide
  1695 00000CF9 E88009              <1>         call main_show_disk_error
  1696 00000CFC C3                  <1>         ret
  1697                              <1> 
  1698                              <1> .cannot_hide:
  1699 00000CFD 8B36[7545]          <1>         mov si, [str_idx.toggle_hid_failed]
  1700 00000D01 E84A0F              <1>         call error_box
  1701 00000D04 C3                  <1>         ret
  1702                              <1> 
  1703                              <1> .del_it:
  1704 00000D05 30C0                <1>         xor al, al
  1705 00000D07 89F7                <1>         mov di, si
  1706 00000D09 B94000              <1>         mov cx, SIZE_OF_BOOTRECORD
  1707 00000D0C FC                  <1>         cld
  1708 00000D0D F3AA                <1>         rep stosb
  1709                              <1> 
  1710 00000D0F FE06[9567]          <1>         inc byte [main_tmp.change_occured]               ; some changes occured.
  1711                              <1> 
  1712 00000D13 E89905              <1>         call main_init_good_record_list
  1713 00000D16 A0[FD42]            <1>         mov al, [GOOD_RECORD_NUMBER]
  1714 00000D19 08C0                <1>         or al, al
  1715 00000D1B 7415                <1>         jz .no_record
  1716                              <1>         
  1717 00000D1D FEC8                <1>         dec al
  1718 00000D1F 3A06[FF42]          <1>         cmp al, [FIRST_VISIBLE_RECORD]                  ; adjust the cursor
  1719 00000D23 7303                <1>         jae .check_focus_pos                            ; and menu position.
  1720 00000D25 A2[FF42]            <1>         mov [FIRST_VISIBLE_RECORD], al                  ;
  1721                              <1> .check_focus_pos:                                       ;
  1722 00000D28 3A06[FE42]          <1>         cmp al, [FOCUS_RECORD]                          ;
  1723 00000D2C 730A                <1>         jae .end                                        ;
  1724 00000D2E A2[FE42]            <1>         mov [FOCUS_RECORD], al                          ;
  1725 00000D31 C3                  <1>         ret
  1726                              <1> 
  1727                              <1> .no_record:
  1728 00000D32 A2[FF42]            <1>         mov [FIRST_VISIBLE_RECORD], al
  1729 00000D35 A2[FE42]            <1>         mov [FOCUS_RECORD], al
  1730                              <1> .end:
  1731 00000D38 C3                  <1>         ret
  1732                              <1>         
  1733                              <1> 
  1734                              <1> ;=============================================================================
  1735                              <1> ;main_rescan_all_drives ---- research all drives for boot records
  1736                              <1> ;=============================================================================
  1737                              <1> main_rescan_all_records:
  1738 00000D39 8026[1902]DF        <1>         and byte [ADDR_SBMK_FLAGS], ~ KNLFLAG_ONLYPARTS
  1739 00000D3E EB05                <1>         jmp short main_rescan_records
  1740                              <1>         
  1741                              <1> ;=============================================================================
  1742                              <1> ;rescan_fixed_drives ---- research fixed drives for boot records
  1743                              <1> ;=============================================================================
  1744                              <1> main_rescan_all_partitions:
  1745 00000D40 800E[1902]20        <1>         or byte [ADDR_SBMK_FLAGS], KNLFLAG_ONLYPARTS
  1746                              <1>         
  1747                              <1> ;=============================================================================
  1748                              <1> ;rescan_records ---- research all drives for boot records
  1749                              <1> ;=============================================================================
  1750                              <1> main_rescan_records:
  1751 00000D45 0FB60E[FD42]        <1>         movzx cx, byte [GOOD_RECORD_NUMBER]
  1752 00000D4A 08C9                <1>         or cl, cl                               ; if no good record then go to
  1753 00000D4C 7423                <1>         jz .init_it                             ; init directly.
  1754                              <1>         
  1755 00000D4E 8D3E[6F67]          <1>         lea di, [main_tmp.good_record_list]
  1756 00000D52 B240                <1>         mov dl, SIZE_OF_BOOTRECORD
  1757                              <1> 
  1758                              <1> ; unhide all hidden partition first.
  1759                              <1> .loop_unhide:
  1760 00000D54 8A05                <1>         mov al, [di]
  1761 00000D56 47                  <1>         inc di
  1762 00000D57 F6E2                <1>         mul dl
  1763 00000D59 8D36[2B02]          <1>         lea si, [ADDR_SBMK_BOOT_RECORDS]
  1764 00000D5D 01C6                <1>         add si, ax
  1765 00000D5F F7040002            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_HIDDEN
  1766 00000D63 740A                <1>         jz .not_hidden
  1767 00000D65 E81322              <1>         call toggle_record_hidden
  1768 00000D68 721A                <1>         jc .hidden_error
  1769 00000D6A E82709              <1>         call main_recheck_same_records
  1770 00000D6D 7219                <1>         jc .disk_error
  1771                              <1> 
  1772                              <1> .not_hidden:
  1773 00000D6F E2E3                <1>         loop .loop_unhide
  1774                              <1>         
  1775                              <1> .init_it:
  1776 00000D71 FE06[9567]          <1>         inc byte [main_tmp.change_occured]               ; some changes occured.
  1777                              <1> 
  1778 00000D75 E86005              <1>         call main_init_boot_records
  1779 00000D78 E83405              <1>         call main_init_good_record_list
  1780                              <1> 
  1781 00000D7B 30C0                <1>         xor al, al
  1782 00000D7D A2[FE42]            <1>         mov byte [FOCUS_RECORD], al
  1783 00000D80 A2[FF42]            <1>         mov byte [FIRST_VISIBLE_RECORD], al
  1784 00000D83 C3                  <1> 	ret
  1785                              <1>         
  1786                              <1> .hidden_error:
  1787 00000D84 09C0                <1>         or ax, ax
  1788 00000D86 7404                <1>         jz .cannot_hide
  1789                              <1> 
  1790                              <1> .disk_error:
  1791 00000D88 E8F108              <1>         call main_show_disk_error
  1792 00000D8B C3                  <1>         ret
  1793                              <1> 
  1794                              <1> .cannot_hide:
  1795 00000D8C 8B36[7545]          <1>         mov si, [str_idx.toggle_hid_failed]
  1796 00000D90 E8BB0E              <1>         call error_box
  1797                              <1> .end:
  1798 00000D93 C3                  <1>         ret
  1799                              <1> 
  1800                              <1> ;=============================================================================
  1801                              <1> ;main_set_delay_time ---- set the delay time
  1802                              <1> ;=============================================================================
  1803                              <1> main_set_delay_time:
  1804 00000D94 0FB606[E744]        <1>         movzx ax, [color.input_box_msg]
  1805 00000D99 8B1E[E544]          <1>         mov bx, [color.input_box]
  1806 00000D9D B90303              <1>         mov cx, 0x0303
  1807 00000DA0 31D2                <1> 	xor dx, dx
  1808 00000DA2 8B36[2B45]          <1>         mov si, [str_idx.delay_time]
  1809 00000DA6 BF[1E70]            <1>         mov di, main_tmp.dialog_buf
  1810 00000DA9 8835                <1>         mov [di], dh
  1811 00000DAB E88010              <1>         call input_box
  1812 00000DAE 7213                <1>         jc .end
  1813                              <1> 
  1814 00000DB0 89FE                <1>         mov si, di
  1815 00000DB2 E88E18              <1>         call atoi
  1816                              <1> 
  1817 00000DB5 3DFF00              <1>         cmp ax, 255
  1818 00000DB8 7602                <1>         jbe .set_time
  1819 00000DBA B0FF                <1>         mov al, 255
  1820                              <1> .set_time:
  1821 00000DBC A2[1A02]            <1>         mov [ADDR_SBMK_DELAY_TIME], al
  1822 00000DBF FE06[9567]          <1>         inc byte [main_tmp.change_occured]         ; some changes occured.
  1823                              <1> .end:
  1824 00000DC3 C3                  <1>         ret
  1825                              <1> 
  1826                              <1> ;=============================================================================
  1827                              <1> ;main_boot_it ---- boot the selected record
  1828                              <1> ;=============================================================================
  1829                              <1> main_boot_it:
  1830 00000DC4 8A0E[FE42]          <1> 	mov cl, [FOCUS_RECORD]
  1831 00000DC8 E81209              <1> 	call main_get_record_pointer
  1832 00000DCB 88C8                <1> 	mov al, cl
  1833 00000DCD 50                  <1> 	push ax
  1834                              <1> 
  1835 00000DCE F606[1902]10        <1>         test byte [ADDR_SBMK_FLAGS], KNLFLAG_REMLAST
  1836 00000DD3 740D                <1>         jz .no_remlast
  1837                              <1> 
  1838 00000DD5 A2[1C02]            <1>         mov [ADDR_SBMK_DEFAULT_BOOT], al
  1839                              <1>        
  1840 00000DD8 E8050A              <1>         call main_save_boot_manager
  1841 00000DDB 7308                <1>         jnc .cont_boot
  1842                              <1> 
  1843 00000DDD E89C08              <1>         call main_show_disk_error
  1844 00000DE0 EB03                <1>         jmp short .cont_boot
  1845                              <1> 
  1846                              <1> .no_remlast:
  1847 00000DE2 E83CFD              <1>         call main_ask_save_changes              ; ask if save the changes.
  1848                              <1> 
  1849                              <1> .cont_boot:
  1850 00000DE5 E8490A              <1>         call main_hide_auto_hides
  1851 00000DE8 58                  <1>         pop ax
  1852 00000DE9 7203                <1>         jc .end
  1853                              <1>  
  1854 00000DEB E82B09              <1>         call main_do_boot_record
  1855                              <1> .end:
  1856 00000DEE C3                  <1>         ret
  1857                              <1> 
  1858                              <1> ;=============================================================================
  1859                              <1> ;main_return_to_bios ---- give control back to BIOS
  1860                              <1> ;=============================================================================
  1861                              <1> main_return_to_bios:
  1862 00000DEF E82FFD              <1>         call main_ask_save_changes              ; ask if save the changes.
  1863                              <1>         
  1864 00000DF2 E82B0D              <1>         call reset_video_mode
  1865                              <1>         
  1866 00000DF5 E8DF28              <1> 	call uninstall_myint13h
  1867                              <1> %ifdef EMULATE_PROG
  1868                              <1>         mov ax, 0x4c00                          ; exit to dos
  1869                              <1>         int 0x21                                ;
  1870                              <1> %else
  1871 00000DF8 CD18                <1>         int 0x18                                ; return to BIOS
  1872                              <1> %endif
  1873                              <1> 
  1874                              <1> .end:
  1875 00000DFA C3                  <1>         ret
  1876                              <1> 
  1877                              <1> 
  1878                              <1> ;=============================================================================
  1879                              <1> ; Duplicate the boot record
  1880                              <1> ;=============================================================================
  1881                              <1> main_dup_record:
  1882 00000DFB B84000              <1>         mov ax, SIZE_OF_BOOTRECORD
  1883 00000DFE B92000              <1>         mov cx, MAX_RECORD_NUM
  1884 00000E01 BF[2B02]            <1>         mov di, ADDR_SBMK_BOOT_RECORDS
  1885                              <1> 
  1886                              <1> .search_empty_slot:
  1887 00000E04 F60509              <1>         test byte [di + struc_bootrecord.flags], DRVFLAG_DRIVEOK | INFOFLAG_ISSPECIAL
  1888 00000E07 7405                <1>         jz .found_empty
  1889 00000E09 01C7                <1>         add di, ax
  1890 00000E0B E2F7                <1>         loop .search_empty_slot
  1891 00000E0D C3                  <1> 	ret
  1892                              <1> 
  1893                              <1> .found_empty:
  1894                              <1> 
  1895 00000E0E FE06[9567]          <1>         inc byte [main_tmp.change_occured]
  1896                              <1> 
  1897 00000E12 E8B508              <1>         call main_get_focus_record_pointer
  1898 00000E15 89C1                <1>         mov cx, ax
  1899 00000E17 FC                  <1>         cld
  1900 00000E18 F3A4                <1>         rep movsb
  1901 00000E1A E89204              <1>         call main_init_good_record_list
  1902 00000E1D C3                  <1>         ret
  1903                              <1> 
  1904                              <1> 
  1905                              <1> 
  1906                              <1> ;=============================================================================
  1907                              <1> ; move the boot record down 
  1908                              <1> ;=============================================================================
  1909                              <1> main_move_record_down:
  1910 00000E1E 0FB61E[FE42]        <1>         movzx bx, byte [FOCUS_RECORD]
  1911 00000E23 8A87[6F67]          <1>         mov al, [main_tmp.good_record_list + bx]
  1912 00000E27 FEC3                <1>         inc bl
  1913 00000E29 8AA7[6F67]          <1>         mov ah, [main_tmp.good_record_list + bx]
  1914 00000E2D 3A1E[FD42]          <1>         cmp bl, [GOOD_RECORD_NUMBER]
  1915 00000E31 731C                <1>         jae .end
  1916                              <1> 
  1917 00000E33 3A06[1C02]          <1>         cmp al, [ADDR_SBMK_DEFAULT_BOOT]
  1918 00000E37 7506                <1>         jne .chknext
  1919 00000E39 8826[1C02]          <1>         mov [ADDR_SBMK_DEFAULT_BOOT], ah
  1920 00000E3D EB09                <1>         jmp short .swap_record
  1921                              <1> .chknext:
  1922 00000E3F 3A26[1C02]          <1>         cmp ah, [ADDR_SBMK_DEFAULT_BOOT]
  1923 00000E43 7503                <1>         jne .swap_record
  1924 00000E45 A2[1C02]            <1>         mov [ADDR_SBMK_DEFAULT_BOOT], al
  1925                              <1> 
  1926                              <1> .swap_record:
  1927 00000E48 881E[FE42]          <1>         mov [FOCUS_RECORD], bl
  1928 00000E4C E83100              <1>         call main_swap_records
  1929                              <1> .end:
  1930 00000E4F C3                  <1>         ret
  1931                              <1> 
  1932                              <1> ;=============================================================================
  1933                              <1> ; move the boot record up
  1934                              <1> ;=============================================================================
  1935                              <1> main_move_record_up:
  1936 00000E50 0FB61E[FE42]        <1>         movzx bx, byte [FOCUS_RECORD]
  1937 00000E55 08DB                <1>         or bl, bl
  1938 00000E57 7426                <1>         jz .end
  1939 00000E59 8A87[6F67]          <1>         mov al, [main_tmp.good_record_list + bx]
  1940 00000E5D FECB                <1>         dec bl
  1941 00000E5F 8AA7[6F67]          <1>         mov ah, [main_tmp.good_record_list + bx]
  1942                              <1> 
  1943 00000E63 3A06[1C02]          <1>         cmp al, [ADDR_SBMK_DEFAULT_BOOT]
  1944 00000E67 7506                <1>         jne .chknext
  1945 00000E69 8826[1C02]          <1>         mov [ADDR_SBMK_DEFAULT_BOOT], ah
  1946 00000E6D EB09                <1>         jmp short .swap_record
  1947                              <1> .chknext:
  1948 00000E6F 3A26[1C02]          <1>         cmp ah, [ADDR_SBMK_DEFAULT_BOOT]
  1949 00000E73 7503                <1>         jne .swap_record
  1950 00000E75 A2[1C02]            <1>         mov [ADDR_SBMK_DEFAULT_BOOT], al
  1951                              <1> 
  1952                              <1> .swap_record:
  1953                              <1>   
  1954 00000E78 E80500              <1>         call main_swap_records
  1955 00000E7B 881E[FE42]          <1>         mov [FOCUS_RECORD],bl
  1956                              <1> .end:
  1957 00000E7F C3                  <1>         ret
  1958                              <1> 
  1959                              <1> ;=============================================================================
  1960                              <1> ; swap current and previous boot record
  1961                              <1> ;=============================================================================
  1962                              <1> main_swap_records:
  1963 00000E80 60                  <1> 	pusha
  1964 00000E81 FE0E[FE42]          <1>         dec byte [FOCUS_RECORD]
  1965 00000E85 E84208              <1>         call main_get_focus_record_pointer
  1966 00000E88 89F7                <1> 	mov di, si
  1967 00000E8A FE06[FE42]          <1> 	inc byte [FOCUS_RECORD]
  1968 00000E8E E83908              <1> 	call main_get_focus_record_pointer	; si -> current  di -> prev
  1969                              <1> 
  1970 00000E91 B94000              <1>         mov cx, SIZE_OF_BOOTRECORD
  1971                              <1> 
  1972                              <1> .loop_swap:
  1973 00000E94 8A04                <1> 	mov al, [si]
  1974 00000E96 8A1D                <1> 	mov bl, [di]
  1975 00000E98 881C                <1> 	mov [si], bl
  1976 00000E9A 8805                <1> 	mov [di], al
  1977 00000E9C 46                  <1> 	inc si
  1978 00000E9D 47                  <1> 	inc di
  1979 00000E9E E2F4                <1> 	loop .loop_swap
  1980 00000EA0 61                  <1> 	popa
  1981                              <1> 
  1982 00000EA1 C3                  <1>         ret
  1983                              <1> 
  1984                              <1> ;=============================================================================
  1985                              <1> ;main_toggle_swapid ---- toggle the swap driver id flag 
  1986                              <1> ;=============================================================================
  1987                              <1> main_toggle_swapid:
  1988 00000EA2 E82508              <1> 	call main_get_focus_record_pointer
  1989 00000EA5 09F6                <1> 	or si, si
  1990 00000EA7 7416                <1> 	jz .end
  1991 00000EA9 F7041800            <1> 	test word [si + struc_bootrecord.flags], DRVFLAG_ISCDROM | INFOFLAG_ISSPECIAL
  1992 00000EAD 7510                <1> 	jnz .end
  1993                              <1> 
  1994 00000EAF E82807              <1> 	call main_auth_record_action
  1995 00000EB2 720B                <1> 	jc .end
  1996                              <1> 
  1997 00000EB4 81340020            <1>         xor word [si + struc_bootrecord.flags], INFOFLAG_SWAPDRVID
  1998 00000EB8 E8B71C              <1>         call check_bootrecord
  1999 00000EBB FE06[9567]          <1>         inc byte [main_tmp.change_occured]
  2000                              <1> .end:
  2001 00000EBF C3                  <1>         ret
  2002                              <1> 
  2003                              <1> ;=============================================================================
  2004                              <1> ;main_toggle_schedule ---- toggle the schedule of the bootrecord
  2005                              <1> ;=============================================================================
  2006                              <1> main_toggle_schedule:
  2007 00000EC0 E80708              <1>         call main_get_focus_record_pointer
  2008 00000EC3 F7040080            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_SCHEDULED
  2009 00000EC7 7512                <1>         jnz .clear_schedule
  2010                              <1> 
  2011 00000EC9 56                  <1>         push si
  2012 00000ECA E81700              <1>         call main_input_schedule_time
  2013 00000ECD 5E                  <1>         pop si
  2014 00000ECE 7213                <1>         jc .end
  2015                              <1> 
  2016 00000ED0 09D2                <1>         or dx, dx
  2017 00000ED2 7502                <1>         jnz .set_schedule
  2018 00000ED4 F7D2                <1>         not dx
  2019                              <1> 
  2020                              <1> .set_schedule:
  2021 00000ED6 E80E21              <1>         call set_record_schedule
  2022 00000ED9 EB04                <1>         jmp short .end_ok
  2023                              <1> 
  2024                              <1> .clear_schedule:
  2025 00000EDB 8124FF7F            <1>         and word [si + struc_bootrecord.flags], ~INFOFLAG_SCHEDULED
  2026                              <1> 
  2027                              <1> .end_ok:
  2028 00000EDF FE06[9567]          <1>         inc byte [main_tmp.change_occured]
  2029                              <1> .end:
  2030 00000EE3 C3                  <1>         ret
  2031                              <1> 
  2032                              <1> ;=============================================================================
  2033                              <1> ;main_input_schedule_time ---- input the schedule time
  2034                              <1> ;input:
  2035                              <1> ;      none
  2036                              <1> ;output:
  2037                              <1> ;      cf = 0 success, 
  2038                              <1> ;           ax = begin time (in minutes)
  2039                              <1> ;           bx = end time (in minutes)
  2040                              <1> ;           dx = days info (bit 0 to bit 7 indicate Mon to Sun)
  2041                              <1> ;      cf = 1 cancel
  2042                              <1> ;=============================================================================
  2043                              <1> main_input_schedule_time:
  2044 00000EE4 60                  <1>         pusha
  2045                              <1> 
  2046 00000EE5 31C0                <1>         xor ax, ax
  2047 00000EE7 B90400              <1> 	mov cx, 4
  2048 00000EEA FC                  <1> 	cld
  2049 00000EEB BF[9967]            <1> 	mov di, main_tmp.schedule_begin
  2050 00000EEE F3AB                <1> 	rep stosw
  2051                              <1> 
  2052 00000EF0 A0[E744]            <1>         mov al, [color.input_box_msg]
  2053 00000EF3 8B1E[E544]          <1>         mov bx, [color.input_box_frame]
  2054 00000EF7 B91313              <1>         mov cx, 0x1313
  2055 00000EFA 31D2                <1> 	xor dx, dx
  2056 00000EFC 8B36[3945]          <1>         mov si, [str_idx.input_schedule]
  2057 00000F00 BF[1E70]            <1>         mov di, main_tmp.dialog_buf
  2058 00000F03 C60500              <1> 	mov byte [di], 0 
  2059                              <1>         
  2060 00000F06 E8250F              <1>         call input_box
  2061 00000F09 724C                <1>         jc .exit
  2062                              <1> 
  2063                              <1> ;convert begin time
  2064 00000F0B 89FE                <1>         mov si, di
  2065 00000F0D E85400              <1> 	call main_str_to_schtime
  2066 00000F10 723D                <1> 	jc .invalid_input
  2067 00000F12 A3[9967]            <1>         mov [main_tmp.schedule_begin], ax
  2068                              <1> 
  2069                              <1> ;convert end time
  2070 00000F15 AC                  <1> 	lodsb
  2071 00000F16 3C2D                <1> 	cmp al,'-'
  2072 00000F18 7535                <1> 	jne .invalid_input
  2073                              <1> 
  2074 00000F1A E84700              <1> 	call main_str_to_schtime
  2075 00000F1D 7230                <1> 	jc .invalid_input
  2076 00000F1F A3[9B67]            <1>         mov [main_tmp.schedule_end], ax
  2077                              <1> 
  2078                              <1> ;convert day info
  2079 00000F22 AC                  <1>         lodsb
  2080 00000F23 08C0                <1>         or al, al
  2081 00000F25 7425                <1>         jz .end
  2082                              <1> 
  2083 00000F27 3C3B                <1>         cmp al, ';'
  2084 00000F29 7524                <1>         jne .invalid_input
  2085                              <1> 
  2086 00000F2B B90700              <1>         mov cx, 7
  2087 00000F2E 31D2                <1>         xor dx, dx
  2088                              <1> 
  2089                              <1> .loop_get_days:
  2090 00000F30 AC                  <1>         lodsb
  2091 00000F31 08C0                <1>         or al, al
  2092 00000F33 7413                <1>         jz .end_get_days
  2093 00000F35 2C30                <1>         sub al, '0'
  2094 00000F37 3C07                <1>         cmp al, 7
  2095 00000F39 7314                <1>         jae .invalid_input
  2096 00000F3B BB0100              <1>         mov bx, 1
  2097 00000F3E 51                  <1>         push cx
  2098 00000F3F 88C1                <1>         mov cl, al
  2099 00000F41 D3E3                <1>         shl bx, cl
  2100 00000F43 59                  <1>         pop cx
  2101 00000F44 09DA                <1>         or dx, bx
  2102 00000F46 E2E8                <1>         loop .loop_get_days
  2103                              <1> 
  2104                              <1> .end_get_days:
  2105 00000F48 8916[9D67]          <1>         mov [main_tmp.schedule_day], dx
  2106                              <1> 
  2107                              <1> .end:
  2108 00000F4C F8                  <1> 	clc
  2109 00000F4D EB08                <1> 	jmp short .exit
  2110                              <1> 
  2111                              <1> .invalid_input:
  2112 00000F4F 8B36[7B45]          <1>         mov si, [str_idx.invalid_schedule]
  2113 00000F53 E8F80C              <1>         call error_box
  2114 00000F56 F9                  <1>         stc
  2115                              <1> .exit:
  2116 00000F57 61                  <1>         popa
  2117 00000F58 A1[9967]            <1>         mov ax, [main_tmp.schedule_begin]
  2118 00000F5B 8B1E[9B67]          <1>         mov bx, [main_tmp.schedule_end]
  2119 00000F5F 8B16[9D67]          <1>         mov dx, [main_tmp.schedule_day]
  2120 00000F63 C3                  <1>         ret
  2121                              <1> 
  2122                              <1> 
  2123                              <1> ;=============================================================================
  2124                              <1> ;input ds:si -> string
  2125                              <1> ;output cf =0 ok, ax = time in minutes
  2126                              <1> ;       cf =1 fail
  2127                              <1> ;=============================================================================
  2128                              <1> main_str_to_schtime:
  2129 00000F64 31DB                <1> 	xor bx, bx
  2130 00000F66 31C9                <1> 	xor cx, cx
  2131                              <1> 
  2132 00000F68 E8D816              <1>         call atoi
  2133 00000F6B 3C18                <1>         cmp al, 24                          ; hh must be less than 24
  2134 00000F6D 771D                <1>         ja .fail
  2135                              <1> 
  2136 00000F6F 88C3                <1>         mov bl, al
  2137 00000F71 AC                  <1> 	lodsb
  2138 00000F72 3C3A                <1> 	cmp al, ':'
  2139 00000F74 7516                <1> 	jne .fail
  2140                              <1> 
  2141 00000F76 E8CA16              <1>         call atoi
  2142 00000F79 3C3C                <1>         cmp al, 60                          ; mm must be less than 60
  2143 00000F7B 730F                <1>         jae .fail
  2144 00000F7D 88C1                <1>         mov cl, al
  2145                              <1> 
  2146 00000F7F B03C                <1>         mov al, 60
  2147 00000F81 F6E3                <1>         mul bl
  2148 00000F83 01C8                <1>         add ax, cx
  2149 00000F85 3DA005              <1>         cmp ax, 24*60                       ; begin time must be no more than
  2150 00000F88 7702                <1>         ja .fail                            ; 24*60 minutes
  2151 00000F8A F8                  <1> 	clc
  2152 00000F8B C3                  <1> 	ret
  2153                              <1> .fail:
  2154 00000F8C F9                  <1> 	stc
  2155 00000F8D C3                  <1> 	ret
  2156                              <1> 
  2157                              <1> ;=============================================================================
  2158                              <1> ;main_toggle_keystrokes ---- toggle the keystrokes switch of the bootrecord
  2159                              <1> ;=============================================================================
  2160                              <1> main_toggle_keystrokes:
  2161                              <1> 
  2162 00000F8E E83907              <1>         call main_get_focus_record_pointer
  2163 00000F91 F7040040            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_HAVEKEYS
  2164 00000F95 7406                <1>         jz .input_keys
  2165                              <1> 
  2166 00000F97 8124FFBF            <1>         and word [si + struc_bootrecord.flags], ~INFOFLAG_HAVEKEYS
  2167 00000F9B EB12                <1>         jmp short .end_ok
  2168                              <1> 
  2169                              <1> .input_keys:
  2170 00000F9D 8D7C26              <1>         lea di, [si + struc_bootrecord.keystrokes]
  2171 00000FA0 B10D                <1>         mov cl, MAX_KEYSTROKES
  2172 00000FA2 56                  <1>         push si
  2173 00000FA3 E89800              <1>         call main_input_keystrokes
  2174 00000FA6 5E                  <1>         pop si
  2175 00000FA7 08ED                <1>         or ch, ch
  2176 00000FA9 7408                <1>         jz .end
  2177                              <1> 
  2178 00000FAB 810C0040            <1>         or word [si + struc_bootrecord.flags], INFOFLAG_HAVEKEYS
  2179                              <1> 
  2180                              <1> .end_ok:
  2181 00000FAF FE06[9567]          <1>         inc byte [main_tmp.change_occured]
  2182                              <1> .end:
  2183 00000FB3 C3                  <1>         ret
  2184                              <1> 
  2185                              <1> ;=============================================================================
  2186                              <1> ; main_ikbox_event_handle ---- event handle for Input keystroke box
  2187                              <1> ;=============================================================================
  2188                              <1> main_ikbox_event_handle:
  2189 00000FB4 80FCF0              <1>         cmp ah, EVTCODE_COMMAND
  2190 00000FB7 720A                <1>         jb .normal_key
  2191                              <1> 
  2192 00000FB9 3D10F2              <1>         cmp ax, EVENT_SCROLL_OFF
  2193 00000FBC 7524                <1>         jne .end
  2194                              <1> 
  2195 00000FBE E85713              <1>         call window_close
  2196 00000FC1 F8                  <1>         clc
  2197 00000FC2 C3                  <1>         ret
  2198                              <1> 
  2199                              <1> .normal_key:
  2200 00000FC3 FC                  <1>         cld
  2201 00000FC4 8B3E[9F67]          <1>         mov di, [main_tmp.keystroke_ptr]
  2202 00000FC8 0FB60E[A167]        <1>         movzx cx, [main_tmp.keystroke_num]
  2203 00000FCD 3A0E[A267]          <1>         cmp cl, [main_tmp.keystroke_max]
  2204 00000FD1 730F                <1>         jae .end
  2205                              <1> 
  2206 00000FD3 D1E1                <1>         shl cx, 1
  2207 00000FD5 01CF                <1>         add di, cx
  2208 00000FD7 AB                  <1>         stosw
  2209                              <1> 
  2210 00000FD8 FE06[A167]          <1>         inc byte [main_tmp.keystroke_num]
  2211 00000FDC E80500              <1>         call main_ikbox_prepare
  2212 00000FDF E82C11              <1>         call window_draw_body
  2213                              <1> .end:
  2214 00000FE2 F8                  <1>         clc
  2215 00000FE3 C3                  <1>         ret
  2216                              <1> 
  2217                              <1> ;=============================================================================
  2218                              <1> ;main_ikbox_prepare
  2219                              <1> ;input:
  2220                              <1> ;       ds:si -> the message_box struc
  2221                              <1> ;=============================================================================
  2222                              <1> main_ikbox_prepare:
  2223 00000FE4 C74416[B40F]        <1>         mov word [si + struc_window.event_handle],main_ikbox_event_handle
  2224 00000FE9 31C0                <1> 	xor ax, ax
  2225                              <1> 
  2226 00000FEB 56                  <1>         push si
  2227 00000FEC 8B7C1A              <1>         mov di, [si + struc_message_box.message]
  2228 00000FEF 8B36[3B45]          <1>         mov si, [str_idx.input_keystrokes]
  2229 00000FF3 57                  <1>         push di
  2230                              <1> 
  2231 00000FF4 E8C916              <1>         call strcpy
  2232 00000FF7 57                  <1>         push di
  2233 00000FF8 0FB60E[A167]        <1>         movzx cx, byte [main_tmp.keystroke_num]
  2234                              <1> 
  2235 00000FFD D1E1                <1>         shl cx,1
  2236 00000FFF 8B3E[9F67]          <1>         mov di, [main_tmp.keystroke_ptr]
  2237 00001003 01CF                <1>         add di, cx
  2238 00001005 09C9                <1> 	or cx, cx
  2239 00001007 7403                <1> 	jz .first_prepare
  2240 00001009 83EF02              <1> 	sub di, 2
  2241                              <1> .first_prepare:
  2242 0000100C 8B05                <1> 	mov ax, [di]
  2243                              <1> 
  2244 0000100E 5F                  <1>         pop di
  2245 0000100F 51                  <1>         push cx
  2246                              <1>         
  2247 00001010 B104                <1>         mov cl, 4
  2248 00001012 E8DB16              <1>         call htoa                          ; fill in the key code string
  2249 00001015 83C704              <1>         add di, 4
  2250                              <1> 
  2251 00001018 8B36[3D45]          <1>         mov si, [str_idx.key_count]
  2252 0000101C E8A116              <1>         call strcpy
  2253                              <1> 
  2254 0000101F 59                  <1>         pop cx
  2255 00001020 D1E9                <1>         shr cx, 1
  2256 00001022 0FB6C1              <1>         movzx ax, cl
  2257 00001025 B102                <1>         mov cl, 2
  2258 00001027 E8EF15              <1>         call itoa                          ; fill in the key cound string
  2259                              <1> 
  2260 0000102A 5E                  <1>         pop si
  2261                              <1> 
  2262 0000102B E80517              <1> 	call count_lines
  2263                              <1> 
  2264 0000102E 020E[C844]          <1> 	add cl, [size.box_width]
  2265 00001032 022E[C944]          <1> 	add ch, [size.box_height]
  2266                              <1> 
  2267 00001036 5E                  <1>         pop si
  2268 00001037 894C08              <1> 	mov [si + struc_window.win_size], cx
  2269 0000103A E84C13              <1> 	call window_center_window
  2270 0000103D C3                  <1>         ret
  2271                              <1> 
  2272                              <1> 
  2273                              <1> ;=============================================================================
  2274                              <1> ;main_input_keystrokes ---- input a set of key strokes
  2275                              <1> ;input:
  2276                              <1> ;      cl = max key strokes number
  2277                              <1> ;      es:di -> the buffer
  2278                              <1> ;output:
  2279                              <1> ;      es:di -> the buffer filled by key strokes
  2280                              <1> ;      ch = number of key strokes that inputed
  2281                              <1> ;=============================================================================
  2282                              <1> main_input_keystrokes:
  2283 0000103E 57                  <1>         push di
  2284                              <1> 
  2285 0000103F 31C0                <1>         xor ax, ax
  2286 00001041 893E[9F67]          <1>         mov [main_tmp.keystroke_ptr], di
  2287 00001045 880E[A267]          <1>         mov [main_tmp.keystroke_max], cl
  2288 00001049 A2[A167]            <1>         mov [main_tmp.keystroke_num], al
  2289 0000104C 8905                <1>         mov [di], ax
  2290                              <1> 
  2291 0000104E A0[E744]            <1>         mov al, [color.input_box_msg]
  2292 00001051 8B1E[E544]          <1>         mov bx, [color.input_box]
  2293 00001055 BA[2945]            <1>         mov dx, str_idx.input
  2294 00001058 BE[1E70]            <1>         mov si, main_tmp.dialog_buf
  2295 0000105B BF[A367]            <1>         mov di, main_tmp.ikbox
  2296                              <1> 
  2297 0000105E 8824                <1>         mov [si], ah
  2298 00001060 E8970B              <1>         call msgbox_prepare
  2299 00001063 89FE                <1>         mov si, di
  2300 00001065 E87CFF              <1>         call main_ikbox_prepare
  2301                              <1> 
  2302 00001068 E8180B              <1>         call turnon_scrolllock
  2303 0000106B E85212              <1>         call window_run
  2304 0000106E E8200B              <1>         call turnoff_scrolllock
  2305                              <1> 
  2306 00001071 8A2E[A167]          <1>         mov ch, [main_tmp.keystroke_num]
  2307 00001075 5F                  <1>         pop di
  2308 00001076 C3                  <1>         ret
  2309                              <1> 
  2310                              <1> ;=============================================================================
  2311                              <1> ;main_show_record_info ---- show the information of the boot record
  2312                              <1> ;=============================================================================
  2313                              <1> main_show_record_info:
  2314 00001077 E85006              <1>         call main_get_focus_record_pointer
  2315 0000107A BF[1E70]            <1>         mov di, main_tmp.dialog_buf
  2316                              <1> 
  2317 0000107D E8A61F              <1>         call get_record_schedule
  2318 00001080 52                  <1>         push dx
  2319 00001081 53                  <1>         push bx
  2320 00001082 50                  <1>         push ax
  2321                              <1> 
  2322 00001083 66FF740E            <1>         push dword [si + struc_bootrecord.password]
  2323                              <1> 
  2324 00001087 8B1C                <1>         mov bx, [si + struc_bootrecord.flags]
  2325 00001089 8B4402              <1>         mov ax, [si + struc_bootrecord.drive_id]
  2326                              <1> 
  2327 0000108C 89F2                <1>         mov dx, si
  2328 0000108E 83C616              <1>         add si, struc_bootrecord.name
  2329 00001091 56                  <1>         push si                               ; save record name pointer
  2330 00001092 52                  <1>         push dx                               ; save record pointer
  2331 00001093 50                  <1>         push ax                               ; save drive_id and part_id
  2332                              <1> 
  2333                              <1> ;write drive id
  2334 00001094 8B36[4345]          <1>         mov si, [str_idx.drive_id]
  2335 00001098 E82516              <1>         call strcpy
  2336                              <1> 
  2337 0000109B F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  2338 0000109F 7407                <1> 	jz .drvid_ok
  2339                              <1> 
  2340 000010A1 B02D                <1> 	mov al, '-'
  2341 000010A3 AA                  <1> 	stosb
  2342 000010A4 AA                  <1> 	stosb
  2343 000010A5 AA                  <1> 	stosb
  2344 000010A6 EB05                <1> 	jmp short .write_partid
  2345                              <1> 
  2346                              <1> .drvid_ok:
  2347 000010A8 88C2                <1> 	mov dl, al
  2348 000010AA E8D725              <1> 	call get_drvid_str
  2349                              <1> 
  2350                              <1> .write_partid:
  2351                              <1> ;write part id
  2352 000010AD 8B36[4545]          <1>         mov si, [str_idx.part_id]
  2353 000010B1 E80C16              <1>         call strcpy
  2354                              <1> 
  2355 000010B4 58                  <1>         pop ax                          ; ax = drive id, partition id
  2356 000010B5 F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  2357 000010B9 7406                <1> 	jz .partid_ok
  2358 000010BB B02D                <1> 	mov al, '-'
  2359 000010BD AA                  <1> 	stosb
  2360 000010BE AA                  <1> 	stosb
  2361 000010BF EB0B                <1> 	jmp short .write_rectype
  2362                              <1> 
  2363                              <1> .partid_ok:
  2364 000010C1 0FB6C4              <1>         movzx ax, ah
  2365 000010C4 B90200              <1>         mov cx, 2
  2366 000010C7 E84F15              <1>         call itoa
  2367 000010CA 01CF                <1>         add di, cx
  2368                              <1> 
  2369                              <1> .write_rectype:
  2370                              <1> ;write record type
  2371 000010CC 8B36[4745]          <1>         mov si, [str_idx.record_type]
  2372 000010D0 E8ED15              <1>         call strcpy
  2373                              <1> 
  2374 000010D3 89FE                <1>         mov si, di
  2375 000010D5 E88F15              <1>         call strlen
  2376                              <1> 
  2377 000010D8 89C8                <1>         mov ax, cx
  2378 000010DA 5E                  <1>         pop si                          ; si -> record pointer
  2379 000010DB E8261D              <1>         call get_record_typestr
  2380 000010DE 89FE                <1>         mov si, di
  2381 000010E0 E88415              <1>         call strlen
  2382 000010E3 29C1                <1>         sub cx, ax
  2383 000010E5 01CF                <1>         add di, cx
  2384                              <1> 
  2385                              <1> ;write record name 
  2386 000010E7 8B36[4945]          <1>         mov si, [str_idx.record_name]
  2387 000010EB E8D215              <1>         call strcpy
  2388 000010EE 5E                  <1>         pop si
  2389 000010EF E8CE15              <1>         call strcpy
  2390                              <1> 
  2391                              <1> ;write flags
  2392 000010F2 B90700              <1> 	mov cx, 7
  2393 000010F5 89DA                <1> 	mov dx, bx
  2394 000010F7 31DB                <1> 	xor bx, bx
  2395                              <1> .loop_copy_flags:
  2396 000010F9 8BB7[4B45]          <1> 	mov si, [str_idx.auto_active + bx]
  2397 000010FD 8B87[5D11]          <1> 	mov ax, [.flag_val + bx]
  2398 00001101 E84400              <1> 	call .copy_flag_stat
  2399 00001104 43                  <1> 	inc bx
  2400 00001105 43                  <1> 	inc bx
  2401 00001106 E2F1                <1> 	loop .loop_copy_flags
  2402                              <1> 
  2403                              <1> ;write password flag
  2404 00001108 8B36[5945]          <1>         mov si, [str_idx.password]
  2405 0000110C E8B115              <1>         call strcpy
  2406 0000110F 6659                <1>         pop ecx
  2407 00001111 6609C9              <1>         or ecx, ecx
  2408 00001114 7406                <1>         jz .no_pswd
  2409 00001116 8B36[5D45]          <1>         mov si, [str_idx.yes]
  2410 0000111A EB04                <1>         jmp short .pswd
  2411                              <1> .no_pswd:
  2412 0000111C 8B36[5F45]          <1>         mov si, [str_idx.no]
  2413                              <1> .pswd:
  2414 00001120 E89D15              <1>         call strcpy
  2415                              <1> 
  2416                              <1> ;write schedule time
  2417 00001123 8B36[5B45]          <1>         mov si, [str_idx.schedule]
  2418 00001127 E89615              <1>         call strcpy
  2419 0000112A 89D1                <1>         mov cx, dx
  2420                              <1> 
  2421 0000112C 58                  <1>         pop ax
  2422 0000112D 5B                  <1>         pop bx
  2423 0000112E 5A                  <1>         pop dx
  2424                              <1> 
  2425 0000112F F7C10080            <1>         test cx, INFOFLAG_SCHEDULED
  2426 00001133 7405                <1>         jz .no_sched
  2427 00001135 E8181F              <1>         call schedule_to_str
  2428 00001138 EB07                <1>         jmp short .show_info
  2429                              <1> 
  2430                              <1> .no_sched:
  2431 0000113A 8B36[5F45]          <1>         mov si, [str_idx.no]
  2432 0000113E E87F15              <1>         call strcpy
  2433                              <1> 
  2434                              <1> .show_info:
  2435 00001141 BE[1E70]            <1>         mov si, main_tmp.dialog_buf
  2436 00001144 E8190B              <1>         call info_box
  2437                              <1> .end:
  2438 00001147 C3                  <1>         ret
  2439                              <1> 
  2440                              <1> ; si -> flag string
  2441                              <1> ; ax = flag
  2442                              <1> .copy_flag_stat:
  2443 00001148 E87515              <1> 	call strcpy
  2444 0000114B 85C2                <1>         test dx, ax
  2445 0000114D 7406                <1>         jz .no_this_flag
  2446 0000114F 8B36[5D45]          <1>         mov si, [str_idx.yes] 
  2447 00001153 EB04                <1>         jmp short .copy_flag
  2448                              <1> .no_this_flag:
  2449 00001155 8B36[5F45]          <1>         mov si, [str_idx.no]
  2450                              <1> .copy_flag:
  2451 00001159 E86415              <1>         call strcpy
  2452 0000115C C3                  <1> 	ret
  2453                              <1> 
  2454 0000115D 001000080004000200- <1> .flag_val	dw INFOFLAG_AUTOACTIVE, INFOFLAG_ACTIVE, INFOFLAG_AUTOHIDE, INFOFLAG_HIDDEN, INFOFLAG_SWAPDRVID
  2455 00001166 20                  <1>
  2456 00001167 00010040            <1> 		dw INFOFLAG_LOGICAL, INFOFLAG_HAVEKEYS
  2457                              <1> 
  2458                              <1> 
  2459                              <1> 
  2460                              <1> ;=============================================================================
  2461                              <1> ;  Shutdown ---- Shutdown the Computer via APM
  2462                              <1> ;=============================================================================
  2463                              <1> Shutdown:
  2464                              <1> 
  2465 0000116B 60                  <1> pusha
  2466                              <1> 
  2467                              <1> 
  2468                              <1> ; check if Advanced Power Management is supported / present
  2469                              <1> 
  2470                              <1> ; APM Installation Check
  2471                              <1> ;   AH = 53h  APM
  2472                              <1> ;   AL = 00h  Installation Check
  2473                              <1> ;   BX = Power Device ID
  2474                              <1> ;        0000h  APM BIOS
  2475                              <1> ;
  2476                              <1> ;   If function successful:
  2477                              <1> ;     CF = 0   APM is supported by the BIOS
  2478                              <1> ;     AH = APM major version number (in BCD format)
  2479                              <1> ;     AL = APM minor version number (in BCD format)
  2480                              <1> ;     BX = "PM"
  2481                              <1> ;     CX = some APM flags
  2482                              <1> ;             Bit 0 = 1 16-bit protected mode interface supported
  2483                              <1> 
  2484 0000116C B80053              <1> mov ax,5300h
  2485 0000116F 31DB                <1> xor bx,bx
  2486 00001171 CD15                <1> int 15h
  2487 00001173 7220                <1> jc Shutdown_Exit
  2488                              <1> 
  2489 00001175 81FB504D            <1> cmp bx,"PM"
  2490 00001179 751A                <1> jne Shutdown_Exit
  2491                              <1> 
  2492 0000117B F7C10100            <1> test cx,1
  2493 0000117F 7414                <1> jz Shutdown_Exit
  2494                              <1> 
  2495                              <1> 
  2496                              <1> ; connect to the APM Real Mode Interface
  2497                              <1> 
  2498                              <1> ; APM Real Mode Interface Connect
  2499                              <1> ;   AH = 53h  APM
  2500                              <1> ;   AL = 01h  Real mode interface connect
  2501                              <1> ;   BX = Power Device ID
  2502                              <1> ;        0000h  APM BIOS
  2503                              <1> ;
  2504                              <1> ;   If function successful:
  2505                              <1> ;     CF = 0
  2506                              <1> 
  2507 00001181 B80153              <1> mov ax,5301h
  2508 00001184 31DB                <1> xor bx,bx
  2509 00001186 CD15                <1> int 15h
  2510 00001188 720B                <1> jc Shutdown_Exit
  2511                              <1> 
  2512                              <1> 
  2513                              <1> ; Shutdown all devices (including the Computer itself)
  2514                              <1> 
  2515                              <1> ; APM Set Power State
  2516                              <1> ;   AH = 53h  APM
  2517                              <1> ;   AL = 07h  Set Power State
  2518                              <1> ;   BX = Power Device ID
  2519                              <1> ;        0001h  All devices power managed by the APM BIOS
  2520                              <1> ;   CX = Power state
  2521                              <1> ;        0000h  APM Enabled
  2522                              <1> ;        0001h  Standby
  2523                              <1> ;        0002h  Suspend
  2524                              <1> ;        0003h  Off
  2525                              <1> 
  2526 0000118A B80753              <1> mov ax,5307h
  2527 0000118D BB0100              <1> mov bx,0001h
  2528 00001190 B90300              <1> mov cx,0003h
  2529 00001193 CD15                <1> int 15h
  2530                              <1> 
  2531                              <1> 
  2532                              <1> Shutdown_Exit:
  2533 00001195 61                  <1> popa
  2534                              <1> 
  2535 00001196 C3                  <1> ret
  2536                              <1> 
  2537                              <1> 
  2538                              <1> 
  2539                              <1> 
  2540                              <1> 
  2541                              <1> ;=============================================================================
  2542                              <1> ;main_change_bootmenu_style ---- change the boot menu's draw style
  2543                              <1> ;=============================================================================
  2544                              <1> main_change_bootmenu_style:
  2545 00001197 A0[2102]            <1> 	mov al, [ADDR_SBMK_BOOTMENU_STYLE]
  2546 0000119A FEC0                <1> 	inc al
  2547 0000119C 3C04                <1> 	cmp al, 4
  2548 0000119E 7202                <1> 	jb .ok
  2549 000011A0 30C0                <1> 	xor al, al
  2550                              <1> 
  2551                              <1> .ok:
  2552 000011A2 A2[2102]            <1> 	mov [ADDR_SBMK_BOOTMENU_STYLE], al
  2553 000011A5 E8B100              <1> 	call main_init_boot_menu
  2554                              <1> 
  2555 000011A8 FE06[9567]          <1>         inc byte [main_tmp.change_occured]
  2556 000011AC C3                  <1>         ret
  2557                              <1> 
  2558                              <1> ;=============================================================================
  2559                              <1> ;main_toggle_rem_last ---- toggle the remember last switch.
  2560                              <1> ;=============================================================================
  2561                              <1> main_toggle_rem_last:
  2562 000011AD 8036[1902]10        <1>         xor byte [ADDR_SBMK_FLAGS], KNLFLAG_REMLAST
  2563 000011B2 FE06[9567]          <1>         inc byte [main_tmp.change_occured]
  2564 000011B6 C3                  <1>         ret
  2565                              <1> 
  2566                              <1> 
  2567                              <1> ;=============================================================================
  2568                              <1> ;main_boot_prev_in_menu ---- boot previous MBR in command menu
  2569                              <1> ;=============================================================================
  2570                              <1> ;main_boot_prev_in_menu:
  2571                              <1> ;	call check_prev_mbr
  2572                              <1> ;	jc .end
  2573                              <1> ;
  2574                              <1> ;        call main_confirm_root_passwd
  2575                              <1> ;        jc .end
  2576                              <1> ;
  2577                              <1> ;	call main_boot_prev_mbr
  2578                              <1> ;.end:
  2579                              <1> ;	ret
  2580                              <1> 
  2581                              <1> 
  2582                              <1> ;=============================================================================
  2583                              <1> ; main_toggle_int13ext
  2584                              <1> ;=============================================================================
  2585                              <1> ;main_toggle_int13ext:
  2586                              <1> ;        mov al, [ADDR_SBMK_FLAGS]
  2587                              <1> ;        xor al, KNLFLAG_NOINT13EXT
  2588                              <1> ;        mov [ADDR_SBMK_FLAGS], al
  2589                              <1> ;
  2590                              <1> ;        test al, KNLFLAG_NOINT13EXT
  2591                              <1> ;        jnz .no_int13ext
  2592                              <1> ;        mov byte [use_int13_ext], 1
  2593                              <1> ;        jmp short .endok
  2594                              <1> ;
  2595                              <1> ;.no_int13ext:
  2596                              <1> ;        mov byte [use_int13_ext], 0
  2597                              <1> ;.endok:
  2598                              <1> ;        inc byte [main_tmp.change_occured]
  2599                              <1> ;        ret
  2600                              <1> 
  2601                              <1> ;=============================================================================
  2602                              <1> ; main_set_cdrom_ioports
  2603                              <1> ;=============================================================================
  2604                              <1> 
  2605                              <1> ;main_set_cdrom_ioports:
  2606                              <1> ;%ifndef DISABLE_CDBOOT
  2607                              <1> ;	test byte [ADDR_SBMK_FLAGS], KNLFLAG_NOCDROM
  2608                              <1> ;	jnz .end
  2609                              <1> ;
  2610                              <1> ;        call main_confirm_root_passwd
  2611                              <1> ;        jc .end
  2612                              <1> ;
  2613                              <1> ;        lea di, [main_tmp.dialog_buf]
  2614                              <1> ;	push di
  2615                              <1> ;	mov byte [di], 0 
  2616                              <1> ;	mov ax, [ADDR_SBMK_CDROM_IOPORTS]
  2617                              <1> ;	or ax, ax
  2618                              <1> ;	jz .no_ports
  2619                              <1> ;	mov cl, 4
  2620                              <1> ;	call htoa
  2621                              <1> ;	add di, 4
  2622                              <1> ;	mov al, ','
  2623                              <1> ;	stosb
  2624                              <1> ;	mov ax, [ADDR_SBMK_CDROM_IOPORTS+2]
  2625                              <1> ;	call htoa
  2626                              <1> ;.no_ports:
  2627                              <1> ;	pop di
  2628                              <1> ;
  2629                              <1> ;        movzx ax, [color.input_box_msg]
  2630                              <1> ;        mov bx, [color.input_box]
  2631                              <1> ;        mov cx, 0x0909
  2632                              <1> ;        xor dx, dx
  2633                              <1> ;        mov si, [str_idx.io_port]
  2634                              <1> ;	
  2635                              <1> ;        call input_box
  2636                              <1> ;        jc .end
  2637                              <1> ;
  2638                              <1> ;        mov si, di
  2639                              <1> ;	call atoh
  2640                              <1> ;	cmp byte [si], ','
  2641                              <1> ;	jne .invalid
  2642                              <1> ;	mov bx, ax
  2643                              <1> ;	inc si
  2644                              <1> ;	call atoh
  2645                              <1> ;	cmp byte [si], 0
  2646                              <1> ;	jne .invalid
  2647                              <1> ;
  2648                              <1> ;	mov cx, ax
  2649                              <1> ;	mov [ADDR_SBMK_CDROM_IOPORTS], bx
  2650                              <1> ;	mov [ADDR_SBMK_CDROM_IOPORTS+2], cx
  2651                              <1> ;
  2652                              <1> ;        inc byte [main_tmp.change_occured]               ; some changes occured.
  2653                              <1> ;	call set_io_ports
  2654                              <1> ;	jmp short .end
  2655                              <1> ;
  2656                              <1> ;.invalid:
  2657                              <1> ;	mov si, [str_idx.invalid_ioports]
  2658                              <1> ;	call error_box
  2659                              <1> ;	jmp .end
  2660                              <1> ;.end:
  2661                              <1> ;%endif
  2662                              <1> ;        ret
  2663                              <1> 
  2664                              <1> ;=============================================================================
  2665                              <1> ;main_set_y2k_year
  2666                              <1> ;=============================================================================
  2667                              <1> 
  2668                              <1> main_set_y2k_year:
  2669                              <1> %ifdef Y2K_BUGFIX
  2670                              <1>         lea di, [main_tmp.dialog_buf]
  2671                              <1> 	mov byte [di], 0 
  2672                              <1> 	mov cl,4
  2673                              <1> 	mov ax,[ADDR_SBMK_Y2K_LAST_YEAR]
  2674                              <1> 	or ax,ax
  2675                              <1> 	jz .nofix
  2676                              <1> 	call bcd_to_str
  2677                              <1> .nofix:
  2678                              <1>         movzx ax, [color.input_box_msg]
  2679                              <1>         mov bx, [color.input_box]
  2680                              <1>         mov si, [str_idx.year]
  2681                              <1>         mov ch, cl
  2682                              <1> 	xor dx, dx
  2683                              <1> 
  2684                              <1>         call input_box
  2685                              <1>         jc .end
  2686                              <1> 
  2687                              <1> 	xor bx,bx
  2688                              <1> 	or ch,ch
  2689                              <1> 	jz .set
  2690                              <1> 
  2691                              <1>         mov si,di
  2692                              <1> .loop:
  2693                              <1> 	shl bx,cl
  2694                              <1> 	lodsb
  2695                              <1> 	sub al,'0'
  2696                              <1> 	or bl,al
  2697                              <1> 	dec ch
  2698                              <1> 	jnz .loop
  2699                              <1> 
  2700                              <1> 	mov ah,4
  2701                              <1> 	int 0x1a
  2702                              <1> 	jc .end
  2703                              <1> 
  2704                              <1> 	mov cx,bx
  2705                              <1> 	mov ah,5
  2706                              <1> 	int 0x1a
  2707                              <1> .set:
  2708                              <1> 	mov [ADDR_SBMK_Y2K_LAST_YEAR],bx
  2709                              <1>         inc byte [main_tmp.change_occured]               ; some changes occured.
  2710                              <1> .end:
  2711                              <1> %endif
  2712 000011B7 C3                  <1>         ret
  2713                              <1> 
  2714                                  %include "main-utils.asm"
  2715                              <1> ; asmsyntax=nasm
  2716                              <1> ;
  2717                              <1> ; main-utils.asm
  2718                              <1> ;
  2719                              <1> ; utility functions for main program
  2720                              <1> ;
  2721                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
  2722                              <1> ;
  2723                              <1> 
  2724                              <1> 
  2725                              <1> ;=============================================================================
  2726                              <1> ; >>>>>>>>>>>>>>>>>>>>>>>>> Initialization Functions <<<<<<<<<<<<<<<<<<<<<<<<<
  2727                              <1> ;=============================================================================
  2728                              <1> 
  2729                              <1> ;=============================================================================
  2730                              <1> ; main_init_theme ---- initialize the theme data.
  2731                              <1> ;=============================================================================
  2732                              <1> main_init_theme:
  2733 000011B8 8B1E[0045]          <1>         mov bx, [icon.brand]
  2734 000011BC 09DB                <1>         or bx, bx
  2735 000011BE 7406                <1>         jz .adjust_bkgnd                            ; no brand icon
  2736 000011C0 8106[0045][AA44]    <1>         add word [icon.brand], theme_start          ;
  2737                              <1> .adjust_bkgnd:
  2738 000011C6 8B1E[0445]          <1>         mov bx, [icon.background]
  2739 000011CA 09DB                <1>         or bx, bx
  2740 000011CC 7406                <1>         jz .adjust_font                             ; no background icon
  2741 000011CE 8106[0445][AA44]    <1>         add word [icon.background], theme_start
  2742                              <1> .adjust_font:
  2743 000011D4 8B1E[0845]          <1>         mov bx, [font.data]
  2744 000011D8 09DB                <1>         or bx, bx
  2745 000011DA 7406                <1>         jz .adjust_keymap
  2746 000011DC 8106[0845][AA44]    <1>         add word [font.data], theme_start
  2747                              <1> .adjust_keymap:
  2748 000011E2 8B1E[1545]          <1>         mov bx, [keymap.data]
  2749 000011E6 09DB                <1>         or bx, bx
  2750 000011E8 7406                <1>         jz .adjust_str
  2751 000011EA 8106[1545][AA44]    <1>         add word [keymap.data], theme_start
  2752                              <1> 
  2753                              <1> .adjust_str:
  2754 000011F0 8D36[1745]          <1>         lea si, [str_idx]
  2755 000011F4 B97800              <1>         mov cx, (end_of_str_idx - str_idx)/2
  2756                              <1>         
  2757                              <1> .loop_adjust:
  2758 000011F7 8B1C                <1>         mov bx, [si]
  2759 000011F9 81C3[AA44]          <1>         add bx, theme_start
  2760 000011FD 891C                <1>         mov [si], bx
  2761 000011FF 83C602              <1>         add si, 2
  2762 00001202 E2F3                <1>         loop .loop_adjust
  2763                              <1> 
  2764 00001204 B010                <1>         mov al, 0x10
  2765 00001206 2006[BB44]          <1>         and [keyboard_type], al
  2766                              <1> 
  2767 0000120A C3                  <1>         ret
  2768                              <1>         
  2769                              <1> ;=============================================================================
  2770                              <1> ; main_init_all_menus ---- initialize the menus
  2771                              <1> ;=============================================================================
  2772                              <1> main_init_all_menus:
  2773 0000120B BE[D544]            <1>         mov si, color.cmd_menu
  2774                              <1> ;initialize main menu
  2775 0000120E BF[0243]            <1>         mov di, main_windows_data.main_menu
  2776 00001211 E82800              <1>         call main_init_menu
  2777 00001214 A1[2502]            <1> 	mov ax, [ADDR_SBMK_MAIN_MENU_POS]
  2778 00001217 A3[0843]            <1> 	mov [main_windows_data.main_menu + struc_window.win_pos], ax
  2779                              <1> ;initialize record menu
  2780 0000121A BF[2D43]            <1>         mov di, main_windows_data.record_menu
  2781 0000121D E81C00              <1>         call main_init_menu
  2782 00001220 A1[2702]            <1> 	mov ax, [ADDR_SBMK_RECORD_MENU_POS]
  2783 00001223 A3[3343]            <1> 	mov [main_windows_data.record_menu + struc_window.win_pos], ax
  2784                              <1> ;initialize system menu
  2785 00001226 BF[5843]            <1>         mov di, main_windows_data.sys_menu
  2786 00001229 E81000              <1>         call main_init_menu
  2787 0000122C A1[2902]            <1> 	mov ax, [ADDR_SBMK_SYS_MENU_POS]
  2788 0000122F A3[5E43]            <1> 	mov [main_windows_data.sys_menu + struc_window.win_pos], ax
  2789                              <1> ;initialize boot menu
  2790 00001232 A1[2302]            <1> 	mov ax, [ADDR_SBMK_BOOT_MENU_POS]
  2791 00001235 A3[DD42]            <1> 	mov [main_windows_data.boot_menu + struc_window.win_pos], ax
  2792 00001238 E81E00              <1>         call main_init_boot_menu
  2793 0000123B C3                  <1>         ret
  2794                              <1> 
  2795                              <1> ;=============================================================================
  2796                              <1> ; main_init_menu
  2797                              <1> ;input:
  2798                              <1> ;       ds:si -> colors
  2799                              <1> ;       ds:di -> struc_menu_box
  2800                              <1> ;=============================================================================
  2801                              <1> main_init_menu:
  2802 0000123C 56                  <1>         push si
  2803 0000123D FC                  <1>         cld
  2804 0000123E AD                  <1>         lodsw
  2805 0000123F 894504              <1>         mov [di + struc_window.win_attr], ax
  2806 00001242 AC                  <1>         lodsb
  2807 00001243 88451C              <1>         mov [di + struc_menu_box.menu_header_attr], al
  2808 00001246 AD                  <1>         lodsw
  2809 00001247 89451D              <1>         mov [di + struc_menu_box.menu_norm_attr], ax
  2810 0000124A AD                  <1>         lodsw
  2811 0000124B 89451F              <1>         mov [di + struc_menu_box.menu_focus_attr], ax
  2812 0000124E AC                  <1>         lodsb
  2813 0000124F 884525              <1>         mov [di + struc_menu_box.scrollbar_attr], al
  2814 00001252 89FE                <1>         mov si, di
  2815 00001254 E8400C              <1>         call menubox_adjust_geometry
  2816 00001257 5E                  <1>         pop si
  2817 00001258 C3                  <1>         ret
  2818                              <1> 
  2819                              <1> ;=============================================================================
  2820                              <1> ; main_init_boot_menu
  2821                              <1> ;=============================================================================
  2822                              <1> main_init_boot_menu:
  2823 00001259 60                  <1>         pusha
  2824                              <1> ;initialize boot menu
  2825 0000125A BF[D742]            <1>         mov di, main_windows_data.boot_menu
  2826 0000125D A0[CA44]            <1>         mov al, [size.boot_menu_win_height]
  2827 00001260 884509              <1>         mov [di + struc_window.win_size + 1], al        ; set boot menu height
  2828                              <1> 
  2829                              <1> ;set boot menu header
  2830 00001263 0FB606[2102]        <1>         movzx ax, byte [ADDR_SBMK_BOOTMENU_STYLE]
  2831 00001268 BB[1945]            <1>         mov bx, str_idx.boot_menu_header
  2832 0000126B 3C03                <1>         cmp al, 3
  2833 0000126D 7602                <1>         jbe .bmstyle_ok
  2834 0000126F 30C0                <1>         xor al, al
  2835                              <1> 
  2836                              <1> .bmstyle_ok:
  2837 00001271 D0E0                <1>         shl al, 1
  2838 00001273 01C3                <1>         add bx, ax
  2839 00001275 895D1A              <1>         mov [di + struc_menu_box.menu_header], bx
  2840                              <1> 
  2841                              <1> ;init the color and geometry of boot menu
  2842 00001278 BE[CD44]            <1>         mov si, color.boot_menu
  2843 0000127B E8BEFF              <1>         call main_init_menu
  2844                              <1> 
  2845                              <1> ; set position of boot menu window 
  2846                              <1> 
  2847 0000127E 8B4506              <1>         mov ax, [di + struc_window.win_pos]
  2848 00001281 88C3                <1>         mov bl, al
  2849                              <1> 
  2850 00001283 025D08              <1>         add bl, [di + struc_window.win_size]
  2851 00001286 80C302              <1>         add bl, 2
  2852 00001289 3A1E[4625]          <1>         cmp bl, [ui_screen_width]
  2853 0000128D 7208                <1>         jb .bmpos_ok
  2854                              <1> 
  2855 0000128F A0[4625]            <1>         mov al, [ui_screen_width]
  2856 00001292 2A4508              <1>         sub al, [di + struc_window.win_size]
  2857 00001295 2C02                <1>         sub al, 2
  2858                              <1> 
  2859                              <1> .bmpos_ok:
  2860 00001297 894506              <1>         mov [di + struc_window.win_pos], ax
  2861 0000129A 61                  <1>         popa
  2862 0000129B C3                  <1>         ret
  2863                              <1> 
  2864                              <1> ;=============================================================================
  2865                              <1> ;main_init_video ---- init the video mode
  2866                              <1> ;input:
  2867                              <1> ;      none
  2868                              <1> ;output:
  2869                              <1> ;      none
  2870                              <1> ;=============================================================================
  2871                              <1> main_init_video:
  2872 0000129C 60                  <1> 	pusha
  2873 0000129D A0[BA44]            <1>         mov al, [video_mode]
  2874 000012A0 B308                <1>         mov bl, 8
  2875 000012A2 8B2E[0845]          <1>         mov bp, [font.data]
  2876 000012A6 8B0E[0645]          <1>         mov cx, [font.number]
  2877                              <1>         
  2878 000012AA E8B607              <1>         call set_video_mode
  2879 000012AD 61                  <1> 	popa
  2880 000012AE C3                  <1>         ret
  2881                              <1> 
  2882                              <1> ;=============================================================================
  2883                              <1> ;main_init_good_record_list ---- init the good boot record list
  2884                              <1> ;input:
  2885                              <1> ;      none
  2886                              <1> ;output:
  2887                              <1> ;      cf = 0 sucess
  2888                              <1> ;      cf = 1 failed, no good record
  2889                              <1> ;=============================================================================
  2890                              <1> main_init_good_record_list:
  2891 000012AF FC                  <1>         cld
  2892 000012B0 60                  <1>         pusha
  2893 000012B1 B92000              <1>         mov cx, MAX_RECORD_NUM
  2894 000012B4 8D3E[6F67]          <1>         lea di, [main_tmp.good_record_list]
  2895 000012B8 8D36[2B02]          <1>         lea si, [ADDR_SBMK_BOOT_RECORDS]
  2896 000012BC 31C0                <1>         xor ax, ax
  2897                              <1> 
  2898                              <1> .loop_check:
  2899 000012BE E8B118              <1>         call check_bootrecord                   ; check if it's valid
  2900 000012C1 7203                <1>         jc .check_next
  2901 000012C3 AA                  <1>         stosb                                   ; store it's index to buffer
  2902 000012C4 FEC4                <1>         inc ah
  2903                              <1>         
  2904                              <1> .check_next:
  2905 000012C6 FEC0                <1>         inc al
  2906 000012C8 83C640              <1>         add si, SIZE_OF_BOOTRECORD
  2907 000012CB E2F1                <1>         loop .loop_check
  2908                              <1> 
  2909 000012CD 8826[FD42]          <1>         mov [GOOD_RECORD_NUMBER], ah
  2910 000012D1 08E4                <1>         or ah, ah
  2911 000012D3 7501                <1>         jnz .ok
  2912 000012D5 F9                  <1>         stc
  2913                              <1> .ok:
  2914 000012D6 61                  <1>         popa
  2915 000012D7 C3                  <1>         ret
  2916                              <1> 
  2917                              <1> ;=============================================================================
  2918                              <1> ;init_boot_records ---- init the boot records list
  2919                              <1> ;input:
  2920                              <1> ;      none
  2921                              <1> ;output:
  2922                              <1> ;      none
  2923                              <1> ;=============================================================================
  2924                              <1> main_init_boot_records:
  2925 000012D8 60                  <1>         pusha
  2926 000012D9 FE06[9567]          <1>         inc byte [main_tmp.change_occured]         ; some changes occured.
  2927                              <1> 
  2928 000012DD FC                  <1>         cld
  2929 000012DE BE[2B02]            <1>         mov si, ADDR_SBMK_BOOT_RECORDS
  2930 000012E1 BF[CE67]            <1>         mov di, main_tmp.records_buf
  2931                              <1> 
  2932 000012E4 B90008              <1> 	mov cx, MAX_RECORD_NUM * SIZE_OF_BOOTRECORD
  2933 000012E7 E84F17              <1> 	call clear_memory
  2934                              <1> 
  2935 000012EA B84000              <1>         mov ax, SIZE_OF_BOOTRECORD        ; ax = size of bootrecord
  2936 000012ED B92000              <1>         mov cx, MAX_RECORD_NUM            ; cx = max record number
  2937                              <1> 
  2938 000012F0 88CB                <1>         mov bl, cl
  2939                              <1> 
  2940 000012F2 56                  <1>         push si
  2941 000012F3 51                  <1>         push cx                           ; cx = MAX_RECORD_NUM
  2942                              <1> .bkp_good_records:
  2943 000012F4 E87B18              <1>         call check_bootrecord
  2944 000012F7 720A                <1>         jc .bad_record
  2945                              <1> 
  2946 000012F9 56                  <1>         push si
  2947 000012FA 51                  <1>         push cx
  2948 000012FB 89C1                <1>         mov cx, ax
  2949 000012FD F3A4                <1>         rep movsb
  2950 000012FF 59                  <1>         pop cx
  2951 00001300 5E                  <1>         pop si
  2952                              <1> 
  2953 00001301 FECB                <1>         dec bl
  2954                              <1>         
  2955                              <1> .bad_record:
  2956 00001303 01C6                <1>         add si, ax
  2957 00001305 E2ED                <1>         loop .bkp_good_records
  2958                              <1> 
  2959 00001307 59                  <1>         pop cx                           ; cx = MAX_RECORD_NUM
  2960 00001308 5E                  <1>         pop si                           ; si -> boot_records
  2961 00001309 87F7                <1>         xchg si, di                      ; di -> boot_records
  2962                              <1> 
  2963 0000130B 57                  <1>         push di
  2964 0000130C 50                  <1> 	push ax
  2965 0000130D 30D2                <1>         xor dl, dl
  2966 0000130F F606[1902]20        <1>         test byte [ADDR_SBMK_FLAGS], KNLFLAG_ONLYPARTS
  2967 00001314 0F95C0              <1> 	setnz al
  2968 00001317 E8A21A              <1>         call search_records
  2969 0000131A 58                  <1> 	pop ax
  2970 0000131B 5F                  <1>         pop di
  2971                              <1> 
  2972                              <1> ;search finished, find out new records
  2973 0000131C B92000              <1>         mov cx, MAX_RECORD_NUM
  2974 0000131F 87F7                <1>         xchg si, di                      ; si -> boot_records
  2975                              <1> 
  2976 00001321 56                  <1>         push si
  2977                              <1> 
  2978 00001322 08DB                <1>         or bl, bl
  2979 00001324 741C                <1>         jz .no_space
  2980                              <1> 
  2981                              <1> .search_news:
  2982 00001326 57                  <1>         push di
  2983 00001327 BF[CE67]            <1>         mov di, main_tmp.records_buf
  2984 0000132A E82000              <1>         call main_find_record_in_buf
  2985 0000132D 5F                  <1>         pop di
  2986                              <1> 
  2987 0000132E 730A                <1>         jnc .found
  2988                              <1> 
  2989 00001330 51                  <1>         push cx
  2990 00001331 56                  <1>         push si
  2991 00001332 89C1                <1>         mov cx, ax
  2992 00001334 F3A4                <1>         rep movsb
  2993 00001336 5E                  <1>         pop si
  2994 00001337 59                  <1>         pop cx
  2995                              <1> 
  2996 00001338 FECB                <1>         dec bl
  2997                              <1> 
  2998                              <1> .found:
  2999 0000133A 08DB                <1>         or bl, bl
  3000 0000133C 7404                <1>         jz .no_space
  3001 0000133E 01C6                <1>         add si, ax
  3002 00001340 E2E4                <1>         loop .search_news
  3003                              <1> 
  3004                              <1> .no_space:
  3005                              <1> 
  3006 00001342 5F                  <1>         pop di
  3007 00001343 BE[CE67]            <1>         mov si, main_tmp.records_buf
  3008 00001346 B90008              <1> 	mov cx, MAX_RECORD_NUM * SIZE_OF_BOOTRECORD
  3009 00001349 F3A4                <1>         rep movsb
  3010                              <1> 
  3011 0000134B 61                  <1>         popa
  3012 0000134C C3                  <1>         ret
  3013                              <1> 
  3014                              <1> ;=============================================================================
  3015                              <1> ; main_find_record_in_buf ---- find a record in a buffer
  3016                              <1> ; input:
  3017                              <1> ;      ds:si -> the record
  3018                              <1> ;      es:di -> the buffer
  3019                              <1> ; output:
  3020                              <1> ;      cf = 1 not found
  3021                              <1> ;=============================================================================
  3022                              <1> main_find_record_in_buf:
  3023 0000134D 60                  <1>         pusha
  3024 0000134E 8B1C                <1> 	mov bx, [si]				; flags
  3025 00001350 F7C30900            <1>         test bx, DRVFLAG_DRIVEOK|INFOFLAG_ISSPECIAL
  3026                              <1> 
  3027 00001354 7442                <1>         jz .not_found
  3028                              <1> 
  3029 00001356 B92000              <1>         mov cx, MAX_RECORD_NUM
  3030                              <1> 
  3031                              <1> .compare_next:
  3032 00001359 F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  3033 0000135D 7408                <1> 	jz .normal_rec
  3034 0000135F F7050800            <1> 	test word [di], INFOFLAG_ISSPECIAL
  3035 00001363 7524                <1> 	jnz .special_rec
  3036 00001365 EB2C                <1> 	jmp short .not_same
  3037                              <1> 
  3038                              <1> .normal_rec:
  3039 00001367 F7050100            <1> 	test word [di], DRVFLAG_DRIVEOK
  3040 0000136B 7426                <1> 	jz .not_same
  3041 0000136D 8B4502              <1>         mov ax, [di + struc_bootrecord.drive_id]
  3042 00001370 394402              <1>         cmp [si + struc_bootrecord.drive_id], ax
  3043 00001373 751E                <1>         jne .not_same
  3044 00001375 668B4506            <1>         mov eax, [di + struc_bootrecord.father_abs_addr]
  3045 00001379 66394406            <1>         cmp [si + struc_bootrecord.father_abs_addr], eax
  3046 0000137D 7514                <1>         jne .not_same
  3047 0000137F 668B450A            <1>         mov eax, [di + struc_bootrecord.abs_addr]
  3048 00001383 6639440A            <1>         cmp [si + struc_bootrecord.abs_addr], eax
  3049 00001387 750A                <1>         jne .not_same
  3050                              <1> 
  3051                              <1> .special_rec:
  3052 00001389 8A4504              <1>         mov al, [di + struc_bootrecord.type]
  3053 0000138C 384404              <1>         cmp [si + struc_bootrecord.type], al
  3054 0000138F 7502                <1>         jne .not_same
  3055                              <1> 
  3056 00001391 EB08                <1>         jmp short .found_same
  3057                              <1> 
  3058                              <1> .not_same:
  3059 00001393 83C740              <1>         add di, SIZE_OF_BOOTRECORD
  3060 00001396 E2C1                <1>         loop .compare_next
  3061                              <1> 
  3062                              <1> .not_found:
  3063 00001398 F9                  <1>         stc
  3064 00001399 61                  <1>         popa
  3065 0000139A C3                  <1>         ret
  3066                              <1> 
  3067                              <1> .found_same:
  3068 0000139B F8                  <1>         clc
  3069 0000139C 61                  <1>         popa
  3070 0000139D C3                  <1>         ret
  3071                              <1> 
  3072                              <1> 
  3073                              <1> ;=============================================================================
  3074                              <1> ; >>>>>>>>>>>>>>>>>>>>>>>>> User Interface Functions <<<<<<<<<<<<<<<<<<<<<<<<<
  3075                              <1> ;=============================================================================
  3076                              <1> 
  3077                              <1> ;=============================================================================
  3078                              <1> ;root_window_draw_body_proc ---- draw the root window
  3079                              <1> ;input:
  3080                              <1> ;      none
  3081                              <1> ;output:
  3082                              <1> ;      none
  3083                              <1> ;=============================================================================
  3084                              <1> root_window_draw_body_proc:
  3085 0000139E 8A3E[F544]          <1>         mov bh, [color.background]              ;
  3086 000013A2 8B36[0445]          <1>         mov si, [icon.background]               ; draw background
  3087 000013A6 8B0E[0245]          <1>         mov cx, [icon.background_size]          ;
  3088 000013AA E8A507              <1>         call draw_background                    ;
  3089                              <1> 
  3090 000013AD 31D2                <1>         xor dx, dx                              ;
  3091 000013AF 8B1E[F644]          <1>         mov bx, [color.copyright]               ;
  3092 000013B3 A0[4625]            <1>         mov al, [ui_screen_width]               ; draw copyright message
  3093 000013B6 50                  <1>         push ax                                 ; save screen width
  3094 000013B7 8A0E[C644]          <1>         mov cl, [size.copyright]
  3095 000013BB F6E1                <1>         mul cl
  3096 000013BD 89C1                <1>         mov cx, ax
  3097 000013BF B020                <1>         mov al, ' '                             ;
  3098 000013C1 E82A05              <1>         call draw_char                          ;
  3099 000013C4 8B36[6145]          <1>         mov si, [str_idx.copyright]
  3100 000013C8 E8FC04              <1>         call draw_string_hl
  3101                              <1>         
  3102 000013CB 8B1E[F844]          <1>         mov bx, [color.hint]                    ;
  3103 000013CF 8A36[4725]          <1>         mov dh, [ui_screen_height]              ;
  3104 000013D3 8A0E[C744]          <1>         mov cl, [size.hint]                     ;
  3105 000013D7 28CE                <1>         sub dh, cl                              ; draw hint message
  3106 000013D9 58                  <1>         pop ax                                  ; get screen width
  3107 000013DA F6E1                <1>         mul cl                                  ;
  3108 000013DC 89C1                <1>         mov cx, ax                              ;
  3109 000013DE B020                <1>         mov al, ' '                             ;
  3110 000013E0 E80B05              <1>         call draw_char                          ;
  3111 000013E3 8B36[6345]          <1>         mov si, [str_idx.hint]                  ;
  3112 000013E7 E8DD04              <1>         call draw_string_hl                     ;
  3113                              <1> 
  3114 000013EA 8B16[C044]          <1>         mov dx, [position.brand]                ; draw brand icon
  3115 000013EE 8B0E[FE44]          <1>         mov cx, [icon.brand_size]               ;
  3116 000013F2 80FAFF              <1>         cmp dl, 0xFF                            ;
  3117 000013F5 7506                <1>         jne .not_justify                        ;
  3118 000013F7 8A16[4625]          <1>         mov dl, [ui_screen_width]               ; right justify
  3119 000013FB 28CA                <1>         sub dl, cl                              ;
  3120                              <1> .not_justify:                                   ;
  3121 000013FD 8B36[0045]          <1>         mov si, [icon.brand]                    ;
  3122 00001401 E82707              <1>         call draw_icon                          ;
  3123                              <1> 
  3124 00001404 E80A00              <1>         call root_window_draw_date
  3125 00001407 E82000              <1>         call root_window_draw_time
  3126 0000140A E8CD00              <1>         call root_window_draw_delay_time
  3127 0000140D E83300              <1>         call root_window_draw_knl_flags
  3128                              <1> 
  3129 00001410 C3                  <1>         ret
  3130                              <1>         
  3131                              <1> ;=============================================================================
  3132                              <1> ;root_window_draw_date ---- draw the date string
  3133                              <1> ;input:
  3134                              <1> ;      none
  3135                              <1> ;output:
  3136                              <1> ;      none
  3137                              <1> ;=============================================================================
  3138                              <1> root_window_draw_date:
  3139 00001411 60                  <1>         pusha
  3140 00001412 BF[1E71]            <1>         mov di, main_tmp.root_buf               ; draw date
  3141 00001415 A0[BC44]            <1>         mov al, [show_date_method]              ;
  3142 00001418 E86915              <1>         call get_current_date_string            ;
  3143 0000141B 89FE                <1>         mov si, di                              ;
  3144 0000141D 8A1E[FC44]          <1>         mov bl, [color.date]                    ;
  3145 00001421 8B16[C244]          <1>         mov dx, [position.date]                 ;
  3146 00001425 E89F04              <1>         call draw_string                        ;
  3147 00001428 61                  <1>         popa
  3148 00001429 C3                  <1>         ret
  3149                              <1> 
  3150                              <1> ;=============================================================================
  3151                              <1> ;draw_time ---- draw the time string
  3152                              <1> ;input:
  3153                              <1> ;      none
  3154                              <1> ;output:
  3155                              <1> ;      none
  3156                              <1> ;=============================================================================
  3157                              <1> root_window_draw_time:
  3158 0000142A 60                  <1>         pusha
  3159 0000142B BF[1E71]            <1>         mov di, main_tmp.root_buf               ; draw date
  3160 0000142E A0[BD44]            <1>         mov al, [show_time_method]              ;
  3161 00001431 E82915              <1>         call get_current_time_string            ;
  3162 00001434 89FE                <1>         mov si, di                              ;
  3163 00001436 8A1E[FD44]          <1>         mov bl, [color.time]                    ;
  3164 0000143A 8B16[C444]          <1>         mov dx, [position.time]                 ;
  3165 0000143E E88604              <1>         call draw_string                        ;
  3166 00001441 61                  <1>         popa
  3167 00001442 C3                  <1>         ret
  3168                              <1> 
  3169                              <1> ;=============================================================================
  3170                              <1> ;root_window_draw_knl_flags ---- draw root passwd, login, secure mode, 
  3171                              <1> ;                                remember last and int13 ext flags.
  3172                              <1> ;=============================================================================
  3173                              <1> root_window_draw_knl_flags:
  3174 00001443 8B16[4625]          <1>         mov dx, [ui_screen_size]
  3175 00001447 81EA1301            <1>         sub dx, 0x0113
  3176 0000144B B90100              <1>         mov cx, 1
  3177                              <1> 
  3178                              <1> ; draw seperators
  3179 0000144E 8A1E[F844]          <1>         mov bl, [color.hint]
  3180 00001452 B07C                <1>         mov al, '|'
  3181 00001454 E89704              <1>         call draw_char
  3182 00001457 80C204              <1> 	add dl,4
  3183 0000145A E89104              <1> 	call draw_char
  3184 0000145D 80C206              <1> 	add dl,6
  3185 00001460 E88B04              <1> 	call draw_char
  3186 00001463 80EA09              <1> 	sub dl,9
  3187                              <1> 
  3188                              <1> ; draw driver id
  3189 00001466 BF[1E71]            <1>         mov di, main_tmp.root_buf
  3190 00001469 57                  <1> 	push di
  3191 0000146A 52                  <1> 	push dx
  3192 0000146B 8A16107E            <1> 	mov dl, [Boot_Drive]
  3193 0000146F E81222              <1> 	call get_drvid_str
  3194 00001472 5A                  <1> 	pop dx
  3195 00001473 5E                  <1> 	pop si
  3196                              <1> 
  3197 00001474 8A1E[FB44]          <1>         mov bl, [color.knl_drvid]
  3198                              <1> 
  3199 00001478 E84C04              <1>         call draw_string
  3200 0000147B 80C204              <1>         add dl, 4
  3201                              <1> 
  3202                              <1> ; draw flags
  3203 0000147E 8A1E[FA44]          <1>         mov bl, [color.knl_flags]
  3204 00001482 66833E[1D02]00      <1>         cmp dword [ADDR_SBMK_ROOT_PASSWORD], 0
  3205 00001488 7404                <1>         jz .no_root_password
  3206                              <1>         
  3207 0000148A B050                <1>         mov al, 'P'
  3208 0000148C EB02                <1>         jmp short .draw_pwd
  3209                              <1> .no_root_password:
  3210 0000148E B02D                <1>         mov al, '-'
  3211                              <1> .draw_pwd:
  3212 00001490 E85B04              <1>         call draw_char
  3213 00001493 FEC2                <1>         inc dl
  3214                              <1> 
  3215 00001495 8A26[1902]          <1> 	mov ah, [ADDR_SBMK_FLAGS]
  3216                              <1> 
  3217 00001499 F6C402              <1>         test ah, KNLFLAG_SECURITY
  3218 0000149C 7404                <1>         jz .no_security
  3219                              <1> 
  3220 0000149E B053                <1>         mov al, 'S'
  3221 000014A0 EB02                <1>         jmp short .draw_security
  3222                              <1> .no_security:
  3223 000014A2 B02D                <1>         mov al, '-'
  3224                              <1> .draw_security:
  3225 000014A4 E84704              <1>         call draw_char
  3226 000014A7 FEC2                <1>         inc dl
  3227                              <1> 
  3228 000014A9 803E[9667]00        <1>         cmp byte [main_tmp.root_login],0
  3229 000014AE 7404                <1>         jz .no_root_login
  3230                              <1> 
  3231 000014B0 B041                <1>         mov al, 'A'
  3232 000014B2 EB02                <1>         jmp short .draw_login
  3233                              <1> .no_root_login:
  3234 000014B4 B02D                <1>         mov al, '-'
  3235                              <1> .draw_login:
  3236 000014B6 E83504              <1>         call draw_char
  3237                              <1> 
  3238 000014B9 FEC2                <1>         inc dl
  3239                              <1> 
  3240 000014BB F6C410              <1>         test ah, KNLFLAG_REMLAST
  3241 000014BE 7404                <1>         jz .no_remlast
  3242 000014C0 B04C                <1>         mov al, 'L'
  3243 000014C2 EB02                <1>         jmp short .draw_remlast
  3244                              <1> .no_remlast:
  3245 000014C4 B02D                <1>         mov al, '-'
  3246                              <1> .draw_remlast:
  3247 000014C6 E82504              <1>         call draw_char
  3248                              <1> 
  3249 000014C9 FEC2                <1>         inc dl
  3250                              <1> 
  3251 000014CB F6C404              <1>         test ah, KNLFLAG_NOINT13EXT
  3252 000014CE 7504                <1>         jnz .no_int13ext
  3253 000014D0 B045                <1>         mov al, 'E'
  3254 000014D2 EB02                <1>         jmp .draw_int13ext
  3255                              <1> .no_int13ext:
  3256 000014D4 B02D                <1>         mov al, '-'
  3257                              <1> .draw_int13ext:
  3258 000014D6 E81504              <1>         call draw_char
  3259 000014D9 C3                  <1>         ret
  3260                              <1> 
  3261                              <1> ;=============================================================================
  3262                              <1> ;root_window_draw_delay_time ---- draw the delay_time and time_count
  3263                              <1> ;=============================================================================
  3264                              <1> root_window_draw_delay_time:
  3265 000014DA 0FB606[8F67]        <1>         movzx ax, byte [main_tmp.time_count]
  3266 000014DF B90300              <1>         mov cx, 3
  3267 000014E2 BF[1E71]            <1>         mov di, main_tmp.root_buf
  3268 000014E5 E83111              <1>         call itoa
  3269                              <1>         
  3270 000014E8 8A1E[F444]          <1>         mov bl, [color.delay_time]
  3271 000014EC 8B16[4625]          <1>         mov dx, [ui_screen_size]
  3272 000014F0 81EA0801            <1>         sub dx, 0x0108
  3273 000014F4 89FE                <1>         mov si, di
  3274 000014F6 E8CE03              <1>         call draw_string
  3275                              <1> 
  3276 000014F9 0FB606[1A02]        <1>         movzx ax, byte [ADDR_SBMK_DELAY_TIME]
  3277 000014FE B90300              <1>         mov cx, 3
  3278 00001501 E81511              <1>         call itoa
  3279                              <1> 
  3280 00001504 B03A                <1>         mov al, ':'
  3281 00001506 B101                <1>         mov cl, 1
  3282 00001508 80C203              <1>         add dl, 3
  3283 0000150B E8E003              <1>         call draw_char
  3284 0000150E FEC2                <1>         inc dl
  3285 00001510 E8B403              <1>         call draw_string
  3286 00001513 B020                <1>         mov al, ' '
  3287 00001515 80C203              <1>         add dl, 3
  3288 00001518 E8D303              <1>         call draw_char
  3289 0000151B C3                  <1>         ret
  3290                              <1> 
  3291                              <1> 
  3292                              <1> ;=============================================================================
  3293                              <1> ; boot_menu_item_str_proc ---- get item string of boot menu
  3294                              <1> ; input:
  3295                              <1> ;	cx = index
  3296                              <1> ; output:
  3297                              <1> ;	ds:si -> item string
  3298                              <1> ;=============================================================================
  3299                              <1> boot_menu_item_str_proc:
  3300 0000151C E8BE01              <1> 	call main_get_record_pointer
  3301                              <1> 
  3302 0000151F FC                  <1> 	cld
  3303 00001520 8D3E[CE6F]          <1>         lea di, [main_tmp.record_string]
  3304 00001524 57                  <1> 	push di
  3305                              <1> 
  3306 00001525 3A0E[1C02]          <1> 	cmp cl, [ADDR_SBMK_DEFAULT_BOOT]
  3307 00001529 7502                <1> 	jne .not_def
  3308 0000152B B02A                <1> 	mov al, '*'
  3309                              <1> .not_def:
  3310 0000152D AA                  <1> 	stosb
  3311                              <1> 
  3312 0000152E A0[2102]            <1>         mov al, [ADDR_SBMK_BOOTMENU_STYLE]
  3313 00001531 E83C19              <1>         call get_record_string
  3314 00001534 5E                  <1> 	pop si
  3315 00001535 C3                  <1> 	ret
  3316                              <1> 
  3317                              <1> ;=============================================================================
  3318                              <1> ; main_menu_item_str_proc ---- get item string of main menu
  3319                              <1> ; input:
  3320                              <1> ;	cx = index
  3321                              <1> ; output:
  3322                              <1> ;	ds:si -> item string
  3323                              <1> ;=============================================================================
  3324                              <1> main_menu_item_str_proc:
  3325 00001536 BE[9145]            <1> 	mov si, str_idx.main_menu_strings
  3326 00001539 EB0A                <1> 	jmp short main_get_cmd_menu_item_str
  3327                              <1> 
  3328                              <1> ;=============================================================================
  3329                              <1> ; record_menu_item_str_proc ---- get item string of record menu
  3330                              <1> ; input:
  3331                              <1> ;	cx = index
  3332                              <1> ; output:
  3333                              <1> ;	ds:si -> item string
  3334                              <1> ;=============================================================================
  3335                              <1> record_menu_item_str_proc:
  3336 0000153B BE[A945]            <1> 	mov si, str_idx.record_menu_strings
  3337 0000153E EB05                <1> 	jmp short main_get_cmd_menu_item_str
  3338                              <1> 
  3339                              <1> ;=============================================================================
  3340                              <1> ; sys_menu_item_str_proc ---- get item string of sys menu
  3341                              <1> ; input:
  3342                              <1> ;	cx = index
  3343                              <1> ; output:
  3344                              <1> ;	ds:si -> item string
  3345                              <1> ;=============================================================================
  3346                              <1> sys_menu_item_str_proc:
  3347 00001540 BE[CB45]            <1> 	mov si, str_idx.sys_menu_strings
  3348 00001543 EB00                <1> 	jmp short main_get_cmd_menu_item_str
  3349                              <1> 
  3350                              <1> ;=============================================================================
  3351                              <1> ; main_get_cmd_menu_item_str ---- get item string of a command menu
  3352                              <1> ; input:
  3353                              <1> ;	cx = index
  3354                              <1> ;	ds:si -> str_idx
  3355                              <1> ; output:
  3356                              <1> ;	ds:si -> item string
  3357                              <1> ;=============================================================================
  3358                              <1> main_get_cmd_menu_item_str:
  3359 00001545 D1E1                <1> 	shl cx,1
  3360 00001547 01CE                <1> 	add si, cx
  3361 00001549 8B34                <1> 	mov si, [si]
  3362 0000154B C3                  <1> 	ret
  3363                              <1> 
  3364                              <1> ;=============================================================================
  3365                              <1> ;main_check_update_time ---- check if the time message needs update.
  3366                              <1> ;output:
  3367                              <1> ;	cf = 0 not changed
  3368                              <1> ;	cf = 1 changed
  3369                              <1> ;=============================================================================
  3370                              <1> main_check_update_time:
  3371 0000154C 50                  <1> 	push ax
  3372 0000154D B402                <1>         mov ah, 0x02
  3373 0000154F CD1A                <1>         int 0x1a
  3374                              <1> 
  3375 00001551 390E[9767]          <1>         cmp [main_tmp.last_time], cx
  3376 00001555 7407                <1>         je .end
  3377                              <1> 
  3378 00001557 890E[9767]          <1>         mov [main_tmp.last_time], cx
  3379 0000155B F9                  <1> 	stc
  3380 0000155C 58                  <1> 	pop ax
  3381 0000155D C3                  <1> 	ret
  3382                              <1> .end:
  3383 0000155E F8                  <1> 	clc
  3384 0000155F 58                  <1> 	pop ax
  3385 00001560 C3                  <1>         ret
  3386                              <1> 
  3387                              <1> 
  3388                              <1> ;=============================================================================
  3389                              <1> ;main_check_delay_time ---- check if the delay time is up
  3390                              <1> ; output:
  3391                              <1> ;	cf = 0 not zero
  3392                              <1> ;	cf = 1 zero
  3393                              <1> ;=============================================================================
  3394                              <1> main_check_delay_time:
  3395 00001561 30E4                <1>         xor ah, ah                                      ; get time ticks
  3396 00001563 CD1A                <1>         int 0x1a                                        ;
  3397                              <1> 
  3398 00001565 3B16[9067]          <1>         cmp dx, [main_tmp.ticks_count]
  3399 00001569 7304                <1>         jae .next_time                                  ; dx must greater than
  3400 0000156B 8916[9067]          <1>         mov [main_tmp.ticks_count], dx                  ; ticks_count
  3401                              <1> .next_time:
  3402 0000156F 31C0                <1> 	xor ax, ax
  3403 00001571 89D1                <1>         mov cx, dx                                      ; every 18 ticks approxmiately
  3404 00001573 2B0E[9067]          <1>         sub cx, [main_tmp.ticks_count]                  ; equal to 1 second,
  3405 00001577 83F912              <1>         cmp cx, 18                                      ; decrease time_count
  3406 0000157A 7609                <1>         jbe .not_add                                    ; until to zero.
  3407 0000157C 8916[9067]          <1>         mov [main_tmp.ticks_count], dx
  3408 00001580 FE0E[8F67]          <1>         dec byte [main_tmp.time_count]
  3409 00001584 40                  <1> 	inc ax
  3410                              <1> .not_add:
  3411 00001585 803E[8F67]00        <1>         cmp byte [main_tmp.time_count], 0               ; if time is up, then
  3412 0000158A 7502                <1>         jne .no_up                                      ; send ESC key.
  3413 0000158C F9                  <1> 	stc
  3414 0000158D C3                  <1> 	ret
  3415                              <1> 
  3416                              <1> .no_up:
  3417 0000158E F8                  <1> 	clc
  3418 0000158F C3                  <1> 	ret
  3419                              <1> 
  3420                              <1> ;=============================================================================
  3421                              <1> ;get_event ---- get a event, if no key is pressed then count down the 
  3422                              <1> ;               delay time until to zero and send an EVENT_BOOT_DEFAULT event
  3423                              <1> ;input:
  3424                              <1> ;      none
  3425                              <1> ;output:
  3426                              <1> ;      ax = the key code
  3427                              <1> ;=============================================================================
  3428                              <1> get_event:
  3429 00001590 60                  <1> 	pusha
  3430                              <1> 
  3431 00001591 31C0                <1> 	xor ax, ax
  3432                              <1> 
  3433                              <1> .loop_get_event:
  3434 00001593 E8B6FF              <1> 	call main_check_update_time
  3435 00001596 7305                <1> 	jnc .no_update_time
  3436                              <1> 
  3437 00001598 B801F4              <1> 	mov ax, EVENT_REDRAW_ROOT
  3438 0000159B EB31                <1> 	jmp short .cont_loop
  3439                              <1> 
  3440                              <1> .no_update_time:
  3441                              <1> 
  3442 0000159D 803E[1A02]00        <1> 	cmp byte [ADDR_SBMK_DELAY_TIME], 0
  3443 000015A2 741E                <1> 	je .no_count
  3444 000015A4 803E[9267]00        <1> 	cmp byte [main_tmp.key_pressed], 0
  3445 000015A9 7517                <1> 	jne .no_count
  3446                              <1> 
  3447 000015AB E8B3FF              <1> 	call main_check_delay_time
  3448 000015AE 7309                <1> 	jnc .has_delay
  3449 000015B0 B802F4              <1> 	mov ax, EVENT_BOOT_DEFAULT
  3450 000015B3 FE06[9267]          <1> 	inc byte [main_tmp.key_pressed]
  3451 000015B7 EB15                <1> 	jmp short .cont_loop
  3452                              <1> 
  3453                              <1> .has_delay
  3454 000015B9 09C0                <1> 	or ax, ax
  3455 000015BB 7405                <1> 	jz .no_count
  3456 000015BD B801F4              <1> 	mov ax, EVENT_REDRAW_ROOT
  3457 000015C0 EB0C                <1> 	jmp short .cont_loop
  3458                              <1> 
  3459                              <1> .no_count:
  3460 000015C2 E8D212              <1> 	call check_keyevent
  3461 000015C5 09C0                <1> 	or ax, ax
  3462 000015C7 7405                <1> 	jz .cont_loop
  3463                              <1> 
  3464                              <1> .key_pressed:
  3465 000015C9 C606[9267]01        <1> 	mov byte [main_tmp.key_pressed], 1
  3466                              <1> 
  3467                              <1> .cont_loop:
  3468 000015CE 09C0                <1> 	or ax, ax
  3469 000015D0 74C1                <1> 	jz .loop_get_event
  3470                              <1> 
  3471 000015D2 A3[9367]            <1> 	mov [main_tmp.keycode], ax
  3472 000015D5 61                  <1> 	popa
  3473 000015D6 A1[9367]            <1> 	mov ax, [main_tmp.keycode]
  3474 000015D9 C3                  <1> 	ret
  3475                              <1>         
  3476                              <1> 
  3477                              <1> ;=============================================================================
  3478                              <1> ; main_auth_record_action
  3479                              <1> ;=============================================================================
  3480                              <1> main_auth_record_action:
  3481 000015DA B0D0                <1> 	mov al, ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
  3482                              <1> 
  3483                              <1> ;=============================================================================
  3484                              <1> ; main_auth_action  ---- auth an action
  3485                              <1> ; input:
  3486                              <1> ;	al = auth type
  3487                              <1> ; output:
  3488                              <1> ;	cf = 0, success
  3489                              <1> ;	cf = 1, failed
  3490                              <1> ;=============================================================================
  3491                              <1> main_auth_action:
  3492 000015DC 60                  <1> 	pusha
  3493                              <1> 
  3494 000015DD A810                <1> 	test al, ACTFLAG_CHK_RECNUM
  3495 000015DF 7407                <1> 	jz .test_security
  3496                              <1> 
  3497 000015E1 803E[FD42]00        <1> 	cmp byte [GOOD_RECORD_NUMBER], 0
  3498 000015E6 7427                <1> 	jz .auth_failed
  3499                              <1> 
  3500                              <1> .test_security:
  3501 000015E8 803E[9667]00        <1>         cmp byte [main_tmp.root_login], 0
  3502 000015ED 7514                <1>         jnz .auth_ok
  3503                              <1> 
  3504 000015EF F606[1902]02        <1> 	test byte [ADDR_SBMK_FLAGS], KNLFLAG_SECURITY
  3505 000015F4 7404                <1> 	jz .test_root
  3506                              <1> 
  3507 000015F6 A880                <1> 	test al, ACTFLAG_AUTH_SECURITY
  3508 000015F8 7504                <1> 	jnz .auth_root
  3509                              <1> 
  3510                              <1> .test_root:
  3511 000015FA A820                <1> 	test al, ACTFLAG_AUTH_ROOT
  3512 000015FC 7408                <1> 	jz .test_record
  3513                              <1> 
  3514                              <1> .auth_root:
  3515 000015FE E81100              <1> 	call main_confirm_root_passwd
  3516 00001601 720C                <1> 	jc .auth_failed
  3517                              <1> 
  3518                              <1> .auth_ok:
  3519 00001603 F8                  <1> 	clc
  3520 00001604 61                  <1> 	popa
  3521 00001605 C3                  <1> 	ret
  3522                              <1> 
  3523                              <1> .test_record:
  3524 00001606 A840                <1> 	test al, ACTFLAG_AUTH_RECORD
  3525 00001608 74F9                <1> 	jz .auth_ok
  3526 0000160A E82100              <1> 	call main_confirm_record_passwd
  3527 0000160D 73F4                <1> 	jnc .auth_ok
  3528                              <1> 
  3529                              <1> .auth_failed:
  3530 0000160F F9                  <1> 	stc
  3531 00001610 61                  <1> 	popa
  3532 00001611 C3                  <1> 	ret
  3533                              <1> 
  3534                              <1> 	
  3535                              <1> ;=============================================================================
  3536                              <1> ;main_confirm_root_passwd ---- confirm the root password
  3537                              <1> ;input:
  3538                              <1> ;      none
  3539                              <1> ;output:
  3540                              <1> ;      cf = 0 success
  3541                              <1> ;      cf = 1 failed or cancel
  3542                              <1> ;=============================================================================
  3543                              <1> main_confirm_root_passwd:
  3544 00001612 60                  <1>         pusha
  3545 00001613 8B1E[1D02]          <1>         mov bx, [ADDR_SBMK_ROOT_PASSWORD]
  3546 00001617 8B0E[1F02]          <1>         mov cx, [ADDR_SBMK_ROOT_PASSWORD+2]
  3547 0000161B 09DB                <1>         or bx, bx
  3548 0000161D 7506                <1>         jnz .have_password
  3549 0000161F 09C9                <1>         or cx, cx
  3550 00001621 7502                <1>         jnz .have_password
  3551 00001623 EB07                <1>         jmp short .auth_ok
  3552                              <1>         
  3553                              <1> .have_password:                                     
  3554 00001625 8B36[3145]          <1>         mov si, [str_idx.root_passwd]               ; check root
  3555 00001629 E81F00              <1>         call main_confirm_passwd                    ; password
  3556                              <1> .auth_ok:
  3557 0000162C 61                  <1>         popa
  3558 0000162D C3                  <1>         ret
  3559                              <1> 
  3560                              <1> ;=============================================================================
  3561                              <1> ;main_confirm_record_passwd ---- confirm the record password
  3562                              <1> ;=============================================================================
  3563                              <1> main_confirm_record_passwd:
  3564 0000162E 60                  <1>         pusha
  3565 0000162F E89800              <1>         call main_get_focus_record_pointer
  3566 00001632 8B5C0E              <1>         mov bx, [si + struc_bootrecord.password]
  3567 00001635 8B4C10              <1>         mov cx, [si + struc_bootrecord.password+2]
  3568 00001638 09DB                <1>         or bx, bx
  3569 0000163A 7506                <1>         jnz .have_password
  3570 0000163C 09C9                <1>         or cx, cx
  3571 0000163E 7502                <1>         jnz .have_password
  3572 00001640 EB07                <1>         jmp short .auth_ok
  3573                              <1>         
  3574                              <1> .have_password:
  3575 00001642 8B36[3545]          <1>         mov si, [str_idx.record_passwd]             ; check record
  3576 00001646 E80200              <1>         call main_confirm_passwd                    ; password
  3577                              <1> .auth_ok:
  3578 00001649 61                  <1>         popa
  3579 0000164A C3                  <1>         ret
  3580                              <1> 
  3581                              <1> ;=============================================================================
  3582                              <1> ;main_confirm_passwd ---- let user input a password and confirm it.
  3583                              <1> ;input:
  3584                              <1> ;      bx:cx = password
  3585                              <1> ;      ds:si -> message string
  3586                              <1> ;output:
  3587                              <1> ;      cf = 0 success
  3588                              <1> ;      cf = 1 failed or cancel
  3589                              <1> ;=============================================================================
  3590                              <1> main_confirm_passwd:
  3591 0000164B 803E[9667]00        <1>         cmp byte [main_tmp.root_login],0       ; check if root has logined
  3592 00001650 751F                <1>         jnz .ok
  3593                              <1> 
  3594 00001652 51                  <1> 	push cx
  3595 00001653 B110                <1> 	mov cl, MAX_PASSWORD_LENGTH
  3596 00001655 E81908              <1>         call input_password
  3597 00001658 59                  <1> 	pop cx
  3598 00001659 721F                <1>         jc .cancel
  3599                              <1> 
  3600 0000165B 39C3                <1>         cmp bx, ax
  3601 0000165D 7506                <1>         jne .cmp_root
  3602 0000165F 39D1                <1>         cmp cx, dx
  3603 00001661 7502                <1>         jne .cmp_root
  3604 00001663 EB0C                <1>         jmp .ok
  3605                              <1>         
  3606                              <1> .cmp_root:
  3607 00001665 3906[1D02]          <1>         cmp [ADDR_SBMK_ROOT_PASSWORD], ax
  3608 00001669 7508                <1>         jne .failed
  3609 0000166B 3916[1F02]          <1>         cmp [ADDR_SBMK_ROOT_PASSWORD+2], dx
  3610 0000166F 7502                <1>         jne .failed
  3611                              <1> .ok:
  3612 00001671 F8                  <1>         clc
  3613 00001672 C3                  <1>         ret
  3614                              <1>         
  3615                              <1> .failed:
  3616 00001673 8B36[6F45]          <1>         mov si, [str_idx.wrong_passwd]
  3617 00001677 E8D405              <1>         call error_box
  3618                              <1>         
  3619                              <1> .cancel:
  3620 0000167A F9                  <1>         stc
  3621 0000167B C3                  <1>         ret
  3622                              <1> 
  3623                              <1> ;=============================================================================
  3624                              <1> ; main_show_disk_error ---- show the disk error box.
  3625                              <1> ;=============================================================================
  3626                              <1> main_show_disk_error:
  3627 0000167C 8B36[7145]          <1>         mov si, [str_idx.disk_error]
  3628 00001680 BF[1E70]            <1>         mov di, main_tmp.dialog_buf
  3629 00001683 57                  <1>         push di
  3630 00001684 E83910              <1>         call strcpy
  3631 00001687 E8F61F              <1> 	call get_last_disk_errno
  3632 0000168A B102                <1>         mov cl, 2
  3633 0000168C E86110              <1>         call htoa
  3634 0000168F 5E                  <1>         pop si
  3635 00001690 E8BB05              <1>         call error_box
  3636 00001693 C3                  <1>         ret
  3637                              <1> 
  3638                              <1> 
  3639                              <1> ;=============================================================================
  3640                              <1> ;>>>>>>>>>>>>>>>>>>>>>>>>>> Miscellaneous Functions <<<<<<<<<<<<<<<<<<<<<<<<<<
  3641                              <1> ;=============================================================================
  3642                              <1> 
  3643                              <1> ;=============================================================================
  3644                              <1> ;main_recheck_same_records ---- recheck all records that same as given record
  3645                              <1> ;input:
  3646                              <1> ;      ds:si -> record
  3647                              <1> ;output:
  3648                              <1> ;      cf = 0  success
  3649                              <1> ;      cf = 1  failed
  3650                              <1> ;=============================================================================
  3651                              <1> main_recheck_same_records:
  3652 00001694 60                  <1>         pusha
  3653 00001695 8B4402              <1>         mov ax, [si + struc_bootrecord.drive_id]
  3654 00001698 668B5C06            <1>         mov ebx, [si + struc_bootrecord.father_abs_addr]
  3655 0000169C 668B540A            <1>         mov edx, [si + struc_bootrecord.abs_addr]
  3656                              <1> 
  3657 000016A0 8D36[2B02]          <1>         lea si, [ADDR_SBMK_BOOT_RECORDS]
  3658 000016A4 B92000              <1>         mov cx, MAX_RECORD_NUM
  3659                              <1> 
  3660                              <1> .loop_check:
  3661 000016A7 F60401              <1>         test byte [si + struc_bootrecord.flags], DRVFLAG_DRIVEOK
  3662 000016AA 7416                <1>         jz .check_next
  3663 000016AC 394402              <1>         cmp [si + struc_bootrecord.drive_id], ax
  3664 000016AF 7511                <1>         jne .check_next
  3665 000016B1 66395C06            <1>         cmp [si + struc_bootrecord.father_abs_addr], ebx
  3666 000016B5 750B                <1>         jne .check_next
  3667 000016B7 6639540A            <1>         cmp [si + struc_bootrecord.abs_addr], edx
  3668 000016BB 7505                <1>         jne .check_next
  3669                              <1> 
  3670 000016BD E8B214              <1>         call check_bootrecord
  3671 000016C0 7206                <1>         jc .end
  3672                              <1> 
  3673                              <1> .check_next:
  3674 000016C2 83C640              <1>         add si, SIZE_OF_BOOTRECORD
  3675 000016C5 E2E0                <1>         loop .loop_check
  3676 000016C7 F8                  <1>         clc
  3677                              <1> .end:
  3678 000016C8 61                  <1>         popa
  3679 000016C9 C3                  <1>         ret
  3680                              <1> 
  3681                              <1> ;=============================================================================
  3682                              <1> ;main_get_focus_record_pointer ---- get current boot record's pointer
  3683                              <1> ;input:
  3684                              <1> ;	none
  3685                              <1> ;output:
  3686                              <1> ;       ds:si -> record pointer
  3687                              <1> ;=============================================================================
  3688                              <1> main_get_focus_record_pointer:
  3689 000016CA 31F6                <1>         xor si, si
  3690 000016CC 803E[FD42]00        <1>         cmp byte [GOOD_RECORD_NUMBER], 0
  3691 000016D1 7409                <1>         jz .end
  3692 000016D3 51                  <1> 	push cx
  3693 000016D4 8A0E[FE42]          <1> 	mov cl, [FOCUS_RECORD]
  3694 000016D8 E80200              <1> 	call main_get_record_pointer
  3695 000016DB 59                  <1> 	pop cx
  3696                              <1> .end:
  3697 000016DC C3                  <1> 	ret
  3698                              <1> 
  3699                              <1> ;=============================================================================
  3700                              <1> ;main_get_record_pointer ---- get boot record's pointer
  3701                              <1> ;input:
  3702                              <1> ;      cl = record index in good record list
  3703                              <1> ;output:
  3704                              <1> ;      cl = real index in boot_records list
  3705                              <1> ;      ds:si -> record pointer
  3706                              <1> ;=============================================================================
  3707                              <1> main_get_record_pointer:
  3708 000016DD 50                  <1>         push ax
  3709 000016DE 30ED                <1>         xor ch, ch
  3710 000016E0 BE[6F67]            <1>         mov si, main_tmp.good_record_list       ;
  3711 000016E3 01CE                <1>         add si, cx                              ;
  3712 000016E5 AC                  <1>         lodsb                                   ;
  3713 000016E6 50                  <1> 	push ax
  3714                              <1> 
  3715 000016E7 B140                <1>         mov cl, SIZE_OF_BOOTRECORD              ; get the pointer to
  3716 000016E9 F6E1                <1>         mul cl                                  ; the record.
  3717 000016EB BE[2B02]            <1>         mov si, ADDR_SBMK_BOOT_RECORDS          ;
  3718 000016EE 01C6                <1>         add si, ax                              ;
  3719 000016F0 59                  <1> 	pop cx
  3720 000016F1 30ED                <1> 	xor ch, ch
  3721 000016F3 58                  <1>         pop ax
  3722 000016F4 C3                  <1>         ret
  3723                              <1> 
  3724                              <1> ;=============================================================================
  3725                              <1> ;main_boot_default ---- boot the default record
  3726                              <1> ;=============================================================================
  3727                              <1> main_boot_default:
  3728 000016F5 8A26[1C02]          <1>         mov ah, [ADDR_SBMK_DEFAULT_BOOT]
  3729 000016F9 BE[6F67]            <1>         mov si, main_tmp.good_record_list
  3730 000016FC 0FB60E[FD42]        <1>         movzx cx, [GOOD_RECORD_NUMBER]
  3731 00001701 08C9                <1>         or cl, cl
  3732 00001703 7408                <1>         jz .no_default
  3733 00001705 FC                  <1>         cld
  3734                              <1> 
  3735                              <1> .loop_search:
  3736 00001706 AC                  <1>         lodsb
  3737 00001707 38E0                <1>         cmp al, ah
  3738 00001709 7403                <1>         je .found_it
  3739 0000170B E2F9                <1>         loop .loop_search
  3740                              <1>         
  3741                              <1> .no_default:                                ; no default record, do nothing.
  3742 0000170D C3                  <1>         ret
  3743                              <1>         
  3744                              <1> .found_it:
  3745 0000170E 50                  <1> 	push ax
  3746 0000170F E81F01              <1> 	call main_hide_auto_hides
  3747 00001712 58                  <1> 	pop ax
  3748 00001713 30E4                <1> 	xor ah, ah
  3749 00001715 E80100              <1>         call main_do_boot_record
  3750 00001718 C3                  <1>         ret
  3751                              <1>         
  3752                              <1> ;=============================================================================
  3753                              <1> ;main_do_boot_record ---- really boot the given record.
  3754                              <1> ;input:
  3755                              <1> ;      ax =  the boot record number.
  3756                              <1> ;=============================================================================
  3757                              <1> main_do_boot_record:
  3758 00001719 B340                <1>         mov bl, SIZE_OF_BOOTRECORD
  3759 0000171B F6E3                <1>         mul bl
  3760                              <1> 
  3761 0000171D BE[2B02]            <1>         mov si, ADDR_SBMK_BOOT_RECORDS
  3762 00001720 01C6                <1>         add si, ax
  3763                              <1> 
  3764 00001722 8B1C                <1> 	mov bx, [si + struc_bootrecord.flags]
  3765                              <1> 
  3766 00001724 F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  3767 00001728 7405                <1> 	jz .boot_drv_part
  3768                              <1> 
  3769 0000172A E85A00              <1> 	call main_do_special_record
  3770 0000172D EB57                <1> 	jmp short .end
  3771                              <1> 
  3772                              <1> .boot_drv_part:
  3773                              <1> %ifndef DISABLE_CDBOOT
  3774 0000172F F7C31000            <1> 	test bx, DRVFLAG_ISCDROM
  3775 00001733 743C                <1> 	jz .normal_boot
  3776                              <1> 
  3777 00001735 8A5402              <1> 	mov dl, [si + struc_bootrecord.drive_id]
  3778 00001738 BF[D45C]            <1> 	mov di, knl_tmp.disk_buf2
  3779 0000173B E81A1F              <1> 	call get_cdrom_boot_catalog
  3780 0000173E 723B                <1> 	jc .disk_error
  3781                              <1> 
  3782 00001740 56                  <1> 	push si
  3783 00001741 89FE                <1> 	mov si, di
  3784 00001743 BF[D454]            <1> 	mov di, knl_tmp.disk_buf1
  3785 00001746 E8931A              <1> 	call find_cdboot_catalog
  3786 00001749 5E                  <1> 	pop si
  3787                              <1> 
  3788 0000174A 09C9                <1> 	or cx, cx
  3789 0000174C 7431                <1> 	jz .no_system
  3790 0000174E 83F901              <1> 	cmp cx, 1
  3791 00001751 740F                <1> 	je .go_boot_cdrom
  3792                              <1> 
  3793 00001753 56                  <1> 	push si
  3794 00001754 89FE                <1> 	mov si, di
  3795 00001756 E81E01              <1> 	call main_choose_cdimg
  3796 00001759 5E                  <1> 	pop si
  3797 0000175A 722A                <1> 	jc .end
  3798                              <1> 
  3799 0000175C B120                <1> 	mov cl, SIZE_OF_BOOT_CATALOG
  3800 0000175E F6E1                <1> 	mul cl
  3801                              <1> 
  3802 00001760 01C7                <1> 	add di, ax
  3803                              <1> 
  3804                              <1> .go_boot_cdrom:
  3805 00001762 52                  <1> 	push dx
  3806 00001763 57                  <1> 	push di
  3807 00001764 E8AD1A              <1>         call preload_keystrokes     ; preload the keystrokes into key buffer.
  3808 00001767 E8B603              <1>         call reset_video_mode
  3809 0000176A 5F                  <1> 	pop di
  3810 0000176B 5A                  <1> 	pop dx
  3811 0000176C E80E1A              <1> 	call boot_cdrom
  3812 0000176F EB03                <1> 	jmp short .boot_fail
  3813                              <1> 
  3814                              <1> %endif
  3815                              <1> 
  3816                              <1> .normal_boot:
  3817 00001771 E84919              <1>         call boot_normal_record
  3818                              <1> 
  3819                              <1> .boot_fail:
  3820 00001774 E825FB              <1> 	call main_init_video
  3821                              <1> 
  3822 00001777 08C0                <1>         or al, al
  3823 00001779 7404                <1>         jz .no_system
  3824                              <1> 
  3825                              <1> .disk_error:
  3826 0000177B E8FEFE              <1>         call main_show_disk_error
  3827 0000177E C3                  <1>         ret
  3828                              <1> 
  3829                              <1> .no_system:
  3830 0000177F 8B36[7745]          <1>         mov si, [str_idx.no_system]
  3831 00001783 E8C804              <1>         call error_box
  3832                              <1> 
  3833                              <1> .end:
  3834 00001786 C3                  <1>         ret
  3835                              <1>         
  3836                              <1> 
  3837                              <1> ;=============================================================================
  3838                              <1> ;main_do_special_record ---- execute a special boot record.
  3839                              <1> ;input:
  3840                              <1> ;      si ->  the boot record.
  3841                              <1> ;=============================================================================
  3842                              <1> main_do_special_record:
  3843 00001787 E89603              <1> 	call reset_video_mode
  3844 0000178A 8A4404              <1> 	mov al, [si + struc_bootrecord.type]
  3845                              <1> 
  3846 0000178D 3C02                <1> 	cmp al, SPREC_POWEROFF
  3847 0000178F 7503                <1> 	jne .chk_rst
  3848 00001791 E8D7F9              <1> 	call Shutdown
  3849                              <1> 
  3850                              <1> .chk_rst:
  3851 00001794 3C03                <1> 	cmp al, SPREC_RESTART
  3852 00001796 7503                <1> 	jne .chk_quit
  3853 00001798 E8A610              <1> 	call reboot
  3854                              <1> 
  3855                              <1> .chk_quit:
  3856                              <1> ;	cmp al, SPREC_QUIT
  3857                              <1> ;	jne .chk_bootprev
  3858                              <1> 
  3859                              <1> %ifdef EMULATE_PROG
  3860                              <1>         mov ax, 0x4c00                          ; exit to dos
  3861                              <1>         int 0x21                                ;
  3862                              <1> %else
  3863 0000179B CD18                <1>         int 0x18                                ; return to BIOS
  3864                              <1> %endif
  3865                              <1> 
  3866                              <1> ;.chk_bootprev:
  3867                              <1> ;	cmp al, SPREC_BOOTPREV
  3868                              <1> ;	jne .end
  3869                              <1> ;	call main_boot_prev_mbr
  3870                              <1> 
  3871                              <1> .end:
  3872 0000179D C3                  <1> 	ret
  3873                              <1> 
  3874                              <1> ;=============================================================================
  3875                              <1> ;main_do_schedule ---- implement the schedule table
  3876                              <1> ;input:
  3877                              <1> ;      none
  3878                              <1> ;output:
  3879                              <1> ;      default_boot set to the scheduled record
  3880                              <1> ;=============================================================================
  3881                              <1> main_do_schedule:
  3882 0000179E 60                  <1>         pusha
  3883 0000179F E87411              <1>         call get_realtime
  3884 000017A2 723A                <1>         jc .end
  3885                              <1> 
  3886 000017A4 A3[9967]            <1>         mov [main_tmp.schedule_begin], ax
  3887 000017A7 8916[9D67]          <1>         mov [main_tmp.schedule_day], dx
  3888 000017AB 31C9                <1>         xor cx, cx
  3889 000017AD BE[2B02]            <1>         mov si, ADDR_SBMK_BOOT_RECORDS
  3890                              <1> 
  3891                              <1> .loop_check:
  3892 000017B0 F7040080            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_SCHEDULED
  3893 000017B4 741E                <1>         jz .check_next
  3894                              <1> 
  3895 000017B6 E8B913              <1>         call check_bootrecord
  3896 000017B9 7219                <1>         jc .check_next
  3897                              <1> 
  3898 000017BB E86818              <1>         call get_record_schedule
  3899                              <1> 
  3900 000017BE 3906[9967]          <1>         cmp [main_tmp.schedule_begin], ax 
  3901 000017C2 7210                <1>         jb .check_next
  3902 000017C4 391E[9967]          <1>         cmp [main_tmp.schedule_begin], bx
  3903 000017C8 770A                <1>         ja .check_next
  3904                              <1> 
  3905 000017CA 8516[9D67]          <1>         test dx, [main_tmp.schedule_day]
  3906 000017CE 7404                <1>         jz .check_next
  3907                              <1> 
  3908 000017D0 880E[1C02]          <1>         mov [ADDR_SBMK_DEFAULT_BOOT], cl
  3909                              <1> 
  3910                              <1> .check_next:
  3911 000017D4 FEC1                <1>         inc cl
  3912 000017D6 83C640              <1>         add si, SIZE_OF_BOOTRECORD
  3913 000017D9 80F920              <1>         cmp cl, MAX_RECORD_NUM
  3914 000017DC 72D2                <1>         jb .loop_check
  3915                              <1> 
  3916                              <1> .end:
  3917 000017DE 61                  <1>         popa
  3918 000017DF C3                  <1>         ret
  3919                              <1> 
  3920                              <1> ;=============================================================================
  3921                              <1> ;main_save_boot_manager ---- save boot manager to disk.
  3922                              <1> ;input:
  3923                              <1> ;      none
  3924                              <1> ;output:
  3925                              <1> ;      cf = 0 success
  3926                              <1> ;      cf = 1 failed
  3927                              <1> ;=============================================================================
  3928                              <1> main_save_boot_manager:
  3929 000017E0 60                  <1> 	pusha
  3930 000017E1 06                  <1> 	push es
  3931 000017E2 1E                  <1> 	push ds
  3932                              <1> 
  3933                              <1> ; Backup the menus' pos
  3934 000017E3 A1[DD42]            <1> 	mov ax, [main_windows_data.boot_menu + struc_window.win_pos]
  3935 000017E6 A3[2302]            <1> 	mov [ADDR_SBMK_BOOT_MENU_POS], ax
  3936 000017E9 A1[0843]            <1> 	mov ax, [main_windows_data.main_menu + struc_window.win_pos]
  3937 000017EC A3[2502]            <1> 	mov [ADDR_SBMK_MAIN_MENU_POS], ax
  3938 000017EF A1[3343]            <1> 	mov ax, [main_windows_data.record_menu + struc_window.win_pos]
  3939 000017F2 A3[2702]            <1> 	mov [ADDR_SBMK_RECORD_MENU_POS], ax
  3940 000017F5 A1[5E43]            <1> 	mov ax, [main_windows_data.sys_menu + struc_window.win_pos]
  3941 000017F8 A3[2902]            <1> 	mov [ADDR_SBMK_SYS_MENU_POS], ax
  3942                              <1> 
  3943                              <1> ; ;calculate checksum
  3944                              <1> ; 	push es
  3945                              <1> ; 	pop ds
  3946                              <1> ; 
  3947                              <1> ; 	xor si, si
  3948                              <1> ; 	mov cx, end_of_kernel - start_of_kernel
  3949                              <1> ; 	mov byte [ADDR_SBMK_CHECKSUM], 0
  3950                              <1> ; 	call calc_checksum                      ; calculate the checksum.
  3951                              <1> ; 	neg bl
  3952                              <1> ; 	mov [ADDR_SBMK_CHECKSUM], bl
  3953                              <1> 
  3954 000017FB 8A16107E            <1> 	mov dl, [Boot_Drive]
  3955 000017FF 8D36[0002]          <1> 	lea si, [ADDR_SBMK_BLOCK_MAP]
  3956 00001803 B90500              <1> 	mov cx, SBM_SAVE_NBLKS
  3957 00001806 31FF                <1> 	xor di, di
  3958                              <1> 
  3959 00001808 1F                  <1> 	pop ds
  3960                              <1> 
  3961                              <1> .loop_save_blk:
  3962 00001809 51                  <1> 	push cx
  3963                              <1> 
  3964 0000180A AC                  <1> 	lodsb
  3965 0000180B 88C1                <1> 	mov cl, al			; number of sectors for this block
  3966 0000180D 66AD                <1> 	lodsd
  3967 0000180F 6689C3              <1> 	mov ebx,eax			; lba address for this block
  3968                              <1>         
  3969 00001812 B80103              <1> 	mov ax, ( INT13H_WRITE << 8 ) | 1 
  3970                              <1> 
  3971 00001815 F8                  <1> 	clc
  3972 00001816 09C9                <1> 	or cx, cx
  3973 00001818 7413                <1> 	jz .write_end
  3974                              <1> 
  3975                              <1> .loop_write:
  3976 0000181A E81E1E              <1> 	call disk_access
  3977 0000181D 720E                <1> 	jc .write_end
  3978                              <1>         
  3979                              <1>         ; next sector or something
  3980 0000181F 81C70002            <1> 	add di, 512
  3981 00001823 6643                <1> 	inc ebx
  3982 00001825 E2F3                <1> 	loop .loop_write
  3983                              <1> 
  3984 00001827 59                  <1> 	pop cx
  3985 00001828 E2DF                <1> 	loop .loop_save_blk
  3986                              <1> 
  3987 0000182A F8                  <1> 	clc
  3988 0000182B EB01                <1> 	jmp short .end
  3989                              <1> 
  3990                              <1> .write_end:
  3991 0000182D 59                  <1> 	pop cx
  3992                              <1> 
  3993                              <1> .end:
  3994 0000182E 07                  <1> 	pop es
  3995 0000182F 61                  <1> 	popa
  3996 00001830 C3                  <1> 	ret
  3997                              <1> 
  3998                              <1> 
  3999                              <1> ;=============================================================================
  4000                              <1> ;main_hide_auto_hides ---- hide all partitions that marked auto hide,
  4001                              <1> ;                          except the focus record.
  4002                              <1> ;input:
  4003                              <1> ;      none
  4004                              <1> ;output:
  4005                              <1> ;      cf = 0 success
  4006                              <1> ;      cf = 1 failed
  4007                              <1> ;=============================================================================
  4008                              <1> main_hide_auto_hides:
  4009 00001831 0FB60E[FD42]        <1>         movzx cx, byte [GOOD_RECORD_NUMBER]
  4010 00001836 08C9                <1>         or cl, cl                               ; if no good record then go to
  4011 00001838 7429                <1>         jz .end_ok                              ; init directly.
  4012                              <1> 
  4013 0000183A 86E9                <1> 	xchg ch, cl
  4014                              <1>         
  4015                              <1> ; hide all auto hide partitions.
  4016                              <1> .loop_hide:
  4017 0000183C 3A0E[FE42]          <1>         cmp cl, [FOCUS_RECORD]                  ; do not hide the focus record.
  4018 00001840 741B                <1>         je .not_hide
  4019                              <1> 
  4020 00001842 51                  <1> 	push cx
  4021 00001843 E897FE              <1> 	call main_get_record_pointer
  4022 00001846 59                  <1> 	pop cx
  4023                              <1> 
  4024 00001847 8B04                <1>         mov ax, [si + struc_bootrecord.flags]
  4025 00001849 A90004              <1>         test ax, INFOFLAG_AUTOHIDE
  4026 0000184C 740F                <1>         jz .not_hide
  4027 0000184E A90002              <1>         test ax, INFOFLAG_HIDDEN
  4028 00001851 750A                <1>         jnz .not_hide
  4029                              <1> 
  4030 00001853 E82517              <1>         call toggle_record_hidden
  4031 00001856 720D                <1>         jc .hidden_error
  4032                              <1> 
  4033 00001858 E839FE              <1>         call main_recheck_same_records
  4034 0000185B 720C                <1>         jc .disk_error
  4035                              <1> 
  4036                              <1> .not_hide:
  4037 0000185D FEC1                <1>         inc cl
  4038 0000185F 38E9                <1>         cmp cl, ch
  4039 00001861 72D9                <1>         jb .loop_hide
  4040                              <1>         
  4041                              <1> .end_ok:
  4042 00001863 F8                  <1>         clc
  4043 00001864 C3                  <1>         ret
  4044                              <1>         
  4045                              <1> .hidden_error:
  4046 00001865 09C0                <1>         or ax, ax
  4047 00001867 7405                <1>         jz .cannot_hide
  4048                              <1> 
  4049                              <1> .disk_error:
  4050 00001869 E810FE              <1>         call main_show_disk_error
  4051 0000186C EB07                <1>         jmp short .end
  4052                              <1> 
  4053                              <1> .cannot_hide:
  4054 0000186E 8B36[7545]          <1>         mov si, [str_idx.toggle_hid_failed]
  4055 00001872 E8D903              <1>         call error_box
  4056                              <1> .end:
  4057 00001875 F9                  <1>         stc
  4058 00001876 C3                  <1>         ret
  4059                              <1> 
  4060                              <1> ;=============================================================================
  4061                              <1> ; main_boot_prev_mbr ---- boot previous MBR
  4062                              <1> ;=============================================================================
  4063                              <1> ;main_boot_prev_mbr:
  4064                              <1> ; read partition table
  4065                              <1> ;        push es
  4066                              <1> ;        xor ebx, ebx
  4067                              <1> ;        mov es, bx
  4068                              <1> ;        mov dl, [Boot_Drive]
  4069                              <1> ;        mov di, 7C00h
  4070                              <1> ;        mov ax, (INT13H_READ << 8) | 0x01
  4071                              <1> ;        call disk_access
  4072                              <1> ;        pop es
  4073                              <1> ;        jc .disk_failed
  4074                              <1> ;
  4075                              <1> ;        push dx
  4076                              <1> ;        push di
  4077                              <1> ;        call main_ask_save_changes
  4078                              <1> ;        call main_hide_auto_hides
  4079                              <1> ;        call reset_video_mode
  4080                              <1> ;        pop di
  4081                              <1> ;        pop dx
  4082                              <1> ;
  4083                              <1> ;	call uninstall_myint13h
  4084                              <1> ;
  4085                              <1> ;; copy previous mbr to Boot Offset 0x7c00
  4086                              <1> ;        cld
  4087                              <1> ;;        mov cx, SIZE_OF_MBR
  4088                              <1> ;;        lea si, [ADDR_SBMK_PREVIOUS_MBR]
  4089                              <1> ;        xor ax, ax
  4090                              <1> ;        push ax
  4091                              <1> ;        pop es
  4092                              <1> ;        rep movsb
  4093                              <1> ;
  4094                              <1> ;        push ax
  4095                              <1> ;        pop ds
  4096                              <1> ;
  4097                              <1> ;        xor bp, bp                          ; might help some boot problems
  4098                              <1> ;        ;mov ax, BR_GOOD_FLAG                ; boot signature (just in case ...)
  4099                              <1> ;        jmp 0:7C00h                         ; jump to the  boot sector
  4100                              <1> ;
  4101                              <1> ;.disk_failed:
  4102                              <1> ;        call main_show_disk_error
  4103                              <1> ;.end:
  4104                              <1> ;        ret
  4105                              <1> 
  4106                              <1> 
  4107                              <1> ;==============================================================================
  4108                              <1> ; CD-ROM Boot Stuff
  4109                              <1> ;==============================================================================
  4110                              <1> 
  4111                              <1> %ifndef DISABLE_CDBOOT
  4112                              <1> ;==============================================================================
  4113                              <1> ;main_choose_cdimg ---- let user choose a cdimg to boot
  4114                              <1> ;input ds:si -> buffer to store boot catalogs
  4115                              <1> ;      cl = number of entries
  4116                              <1> ;output cf =0 ok, al = user choice
  4117                              <1> ;       cf =1 cancel
  4118                              <1> ;==============================================================================
  4119                              <1> main_choose_cdimg:
  4120 00001877 53                  <1> 	push bx
  4121 00001878 51                  <1> 	push cx
  4122 00001879 52                  <1> 	push dx
  4123 0000187A 56                  <1> 	push si
  4124                              <1> 
  4125 0000187B 31D2                <1> 	xor dx, dx
  4126 0000187D 8936[C518]          <1> 	mov [.catalogs_buf], si
  4127 00001881 8A2E[CB44]          <1> 	mov ch, [size.list_box_win_height]
  4128 00001885 BB[EF45]            <1> 	mov bx, str_idx.cdimg_menu_title
  4129                              <1> 
  4130 00001888 BE[9518]            <1> 	mov si, .item_str_proc
  4131 0000188B E84D08              <1> 	call list_box
  4132 0000188E 88C8                <1> 	mov al, cl
  4133                              <1> 
  4134 00001890 5E                  <1> 	pop si
  4135 00001891 5A                  <1> 	pop dx
  4136 00001892 59                  <1> 	pop cx
  4137 00001893 5B                  <1> 	pop bx
  4138 00001894 C3                  <1> 	ret
  4139                              <1> 
  4140                              <1> .item_str_proc:
  4141 00001895 8B36[C518]          <1> 	mov si, [.catalogs_buf]
  4142 00001899 BF[1E70]            <1> 	mov di, main_tmp.dialog_buf
  4143 0000189C 57                  <1> 	push di
  4144 0000189D B82000              <1> 	mov ax, SIZE_OF_BOOT_CATALOG
  4145 000018A0 F6E1                <1> 	mul cl
  4146 000018A2 01C6                <1> 	add si, ax
  4147                              <1> 
  4148 000018A4 89C8                <1> 	mov ax, cx
  4149 000018A6 B102                <1> 	mov cl, 2
  4150 000018A8 E86E0D              <1> 	call itoa
  4151 000018AB 83C702              <1> 	add di, 2
  4152 000018AE B82E20              <1> 	mov ax, '. '
  4153 000018B1 FC                  <1> 	cld
  4154 000018B2 AB                  <1> 	stosw
  4155                              <1> 
  4156 000018B3 0FB64401            <1> 	movzx ax, [si + struc_boot_catalog.media_type]
  4157                              <1> 
  4158 000018B7 D0E0                <1> 	shl al, 1
  4159                              <1> 
  4160 000018B9 BE[F145]            <1> 	mov si, str_idx.cdimg_menu_strings
  4161 000018BC 01C6                <1> 	add si, ax
  4162 000018BE 8B34                <1> 	mov si, [si]
  4163 000018C0 E8FD0D              <1> 	call strcpy
  4164 000018C3 5E                  <1> 	pop si
  4165 000018C4 C3                  <1> 	ret
  4166                              <1> 
  4167 000018C5 0000                <1> .catalogs_buf dw 0
  4168                              <1> 
  4169                              <1> %endif
  4170                                  %include "ui.asm"
  4171                              <1> ; asmsyntax=nasm
  4172                              <1> ;
  4173                              <1> ; ui.asm
  4174                              <1> ;
  4175                              <1> ; Functions for User Interface
  4176                              <1> ;
  4177                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
  4178                              <1> ;
  4179                              <1> 
  4180                              <1> %define DIRECT_DRAW
  4181                              <1> 
  4182                              <1> %define SCR_BUF_SEG0    0xB800
  4183                              <1> %define SCR_BUF_SEG1    0xB900
  4184                              <1> %define SCR_BUF_SEG2    0xBA00
  4185                              <1> %define SCR_PAGE_SEGS   0x0100
  4186                              <1> 
  4187                              <1> %define SCR_BAK_SEG     0x0900
  4188                              <1> %define BIOS_DATA_SEG   0x0040
  4189                              <1> 
  4190                              <1> %define BIOS_KEYSTAT_OFF 0x0017
  4191                              <1> 
  4192                              <1> %define WINDOW_DEF_ACTION_NUM  (window_def_action_table.end_of_table - window_def_action_table) / SIZE_OF_STRUC_ACTION
  4193                              <1> %define MENUBOX_DEF_ACTION_NUM  (menubox_def_action_table.end_of_table - menubox_def_action_table) / SIZE_OF_STRUC_ACTION
  4194                              <1> %define LISTBOX_ACTION_NUM  (listbox_action_table.end_of_table - listbox_action_table) / SIZE_OF_STRUC_ACTION
  4195                              <1> %define INPUTBOX_ACTION_NUM  (inputbox_action_table.end_of_table - inputbox_action_table) / SIZE_OF_STRUC_ACTION
  4196                              <1>       bits 16
  4197                              <1> 
  4198                              <1> 
  4199                              <1> ;=============================================================================
  4200                              <1> ; <<<<<<<<<<<<<<<<<<< Basic Drawing and Screen functions >>>>>>>>>>>>>>>>>>>>>
  4201                              <1> ;=============================================================================
  4202                              <1> 
  4203                              <1> %if 1
  4204                              <1> ;=============================================================================
  4205                              <1> ;draw_string_hl ---- Draw a zero ending string with highlighted characters 
  4206                              <1> ;                    at special position
  4207                              <1> ;input:
  4208                              <1> ;      bl = attribute for normal characters
  4209                              <1> ;           high 4 bit Background color and low 4 bit Foreground color
  4210                              <1> ;      bh = attribute for hightlight characters
  4211                              <1> ;      dh = start row
  4212                              <1> ;      dl = start column
  4213                              <1> ;      ds:si -> the string to be displayed
  4214                              <1> ;output:
  4215                              <1> ;      none
  4216                              <1> ;=============================================================================
  4217                              <1> draw_string:
  4218                              <1> draw_string_hl:
  4219 000018C7 60                  <1>         pusha
  4220 000018C8 52                  <1>         push dx
  4221 000018C9 B90100              <1>         mov cx,1
  4222 000018CC FC                  <1>         cld
  4223                              <1> .start:
  4224                              <1> 
  4225 000018CD AC                  <1>         lodsb
  4226 000018CE 08C0                <1>         or al,al
  4227 000018D0 7419                <1>         jz .end
  4228                              <1> 
  4229 000018D2 3C0D                <1>         cmp al,0x0d                ; if need Change row
  4230 000018D4 7506                <1>         jne .no_cr
  4231 000018D6 5A                  <1>         pop dx
  4232 000018D7 FEC6                <1>         inc dh
  4233 000018D9 52                  <1>         push dx
  4234 000018DA EBF1                <1>         jmp short .start
  4235                              <1> 
  4236                              <1> .no_cr:
  4237 000018DC 3C7E                <1>         cmp al, '~'
  4238 000018DE 7504                <1>         jne .draw_it
  4239 000018E0 86FB                <1>         xchg bh, bl
  4240 000018E2 EB05                <1>         jmp short .next_char
  4241                              <1> 
  4242                              <1> .draw_it:
  4243 000018E4 E80700              <1>         call draw_char
  4244                              <1> 
  4245 000018E7 FEC2                <1>         inc dl
  4246                              <1> .next_char:
  4247 000018E9 EBE2                <1>         jmp short .start
  4248                              <1> .end:
  4249 000018EB 5A                  <1>         pop dx
  4250 000018EC 61                  <1>         popa
  4251 000018ED C3                  <1>         ret
  4252                              <1> ;=============================================================================
  4253                              <1> %endif
  4254                              <1> 
  4255                              <1> %if 0
  4256                              <1> ;=============================================================================
  4257                              <1> ;draw_string ---- Draw a zero ending string at special position
  4258                              <1> ;input:
  4259                              <1> ;      bl = high 4 bit Background color and low 4 bit Foreground color
  4260                              <1> ;      dh = start row
  4261                              <1> ;      dl = start column
  4262                              <1> ;      ds:si -> the string to be displayed
  4263                              <1> ;output:
  4264                              <1> ;      none
  4265                              <1> ;=============================================================================
  4266                              <1> draw_string_hl:
  4267                              <1> draw_string:
  4268                              <1>         pusha
  4269                              <1>         push dx
  4270                              <1>         mov cx,1
  4271                              <1>         cld
  4272                              <1> .start:
  4273                              <1> 
  4274                              <1>         lodsb
  4275                              <1>         or al,al
  4276                              <1>         jz .end
  4277                              <1> 
  4278                              <1>         cmp al,0x0d                ; if need Change row
  4279                              <1>         jne .no_cr
  4280                              <1>         pop dx
  4281                              <1>         inc dh
  4282                              <1>         push dx
  4283                              <1>         jmp short .start
  4284                              <1> 
  4285                              <1> .no_cr:
  4286                              <1>         call draw_char
  4287                              <1> 
  4288                              <1>         inc dl
  4289                              <1>         jmp short .start
  4290                              <1> .end:
  4291                              <1>         pop dx
  4292                              <1>         popa
  4293                              <1>         ret
  4294                              <1> ;=============================================================================
  4295                              <1> %endif
  4296                              <1> 
  4297                              <1> ;=============================================================================
  4298                              <1> ;draw_char ---- Draw chars at special position
  4299                              <1> ;input:
  4300                              <1> ;      bl = high 4 bit Background color and low 4 bit Foreground color
  4301                              <1> ;      dh = start row
  4302                              <1> ;      dl = start column
  4303                              <1> ;      al = the char to be displayed
  4304                              <1> ;      cx = repeat times
  4305                              <1> ;output:
  4306                              <1> ;      none
  4307                              <1> ;=============================================================================
  4308                              <1> draw_char:
  4309                              <1> %ifdef DIRECT_DRAW                            ; directly write to video buffer
  4310 000018EE 60                  <1>         pusha
  4311 000018EF 06                  <1>         push es
  4312 000018F0 FC                  <1> 	cld
  4313                              <1> 
  4314 000018F1 88DC                <1>         mov ah, bl
  4315 000018F3 50                  <1>         push ax
  4316                              <1> 
  4317 000018F4 FF36[4825]          <1> 	push word [ui_screen_bufseg]
  4318 000018F8 07                  <1> 	pop es
  4319                              <1> 
  4320 000018F9 A0[4625]            <1>         mov al, [ui_screen_width]
  4321 000018FC F6E6                <1>         mul dh
  4322 000018FE 30F6                <1>         xor dh, dh
  4323 00001900 01D0                <1>         add ax, dx
  4324 00001902 D1E0                <1>         shl ax, 1
  4325 00001904 89C7                <1>         mov di, ax
  4326                              <1> 
  4327 00001906 58                  <1>         pop ax
  4328 00001907 F3AB                <1>         rep stosw
  4329 00001909 07                  <1>         pop es
  4330 0000190A 61                  <1>         popa
  4331                              <1> %else
  4332                              <1>         push bx
  4333                              <1>         mov ah,2
  4334                              <1>         mov bh, [ui_screen_page]
  4335                              <1>         int 0x10
  4336                              <1>         mov ah,0x09
  4337                              <1>         int 0x10
  4338                              <1>         pop bx
  4339                              <1> %endif
  4340 0000190B C3                  <1>         ret
  4341                              <1> ;=============================================================================
  4342                              <1> 
  4343                              <1> ;=============================================================================
  4344                              <1> ;clear_screen ---- clear a screen area
  4345                              <1> ;input:
  4346                              <1> ;      ch = row of top left corner
  4347                              <1> ;      cl = column of top left corner
  4348                              <1> ;      dh = row of bottom right corner
  4349                              <1> ;      dl = column of bottom right corner
  4350                              <1> ;      bh = attribute
  4351                              <1> ;output:
  4352                              <1> ;      none
  4353                              <1> ;=============================================================================
  4354                              <1> clear_screen:
  4355 0000190C 60                  <1>         pusha
  4356                              <1> %ifdef DIRECT_DRAW
  4357 0000190D 06                  <1>         push es
  4358 0000190E FC                  <1> 	cld
  4359                              <1> 
  4360 0000190F 88FC                <1>         mov ah, bh
  4361 00001911 B020                <1>         mov al, ' '
  4362                              <1> 
  4363 00001913 FF36[4825]          <1> 	push word [ui_screen_bufseg]
  4364 00001917 07                  <1> 	pop es
  4365                              <1> 
  4366 00001918 28CA                <1>         sub dl, cl
  4367 0000191A FEC2                <1>         inc dl
  4368                              <1> 
  4369                              <1> .loop_fill:
  4370 0000191C 51                  <1>         push cx
  4371 0000191D 50                  <1>         push ax
  4372                              <1> 
  4373 0000191E A0[4625]            <1>         mov al, [ui_screen_width]
  4374 00001921 F6E5                <1>         mul ch
  4375 00001923 30ED                <1>         xor ch, ch
  4376 00001925 01C8                <1>         add ax, cx
  4377 00001927 D1E0                <1>         shl ax, 1
  4378 00001929 89C7                <1>         mov di, ax
  4379 0000192B 88D1                <1>         mov cl, dl
  4380                              <1> 
  4381 0000192D 58                  <1>         pop ax
  4382 0000192E F3AB                <1>         rep stosw
  4383 00001930 59                  <1>         pop cx
  4384 00001931 FEC5                <1>         inc ch
  4385 00001933 38F5                <1>         cmp ch, dh
  4386 00001935 76E5                <1>         jbe .loop_fill
  4387                              <1> 
  4388 00001937 07                  <1>         pop es
  4389                              <1> %else
  4390                              <1>         mov ax, 0x0600
  4391                              <1>         int 0x10
  4392                              <1> %endif
  4393 00001938 61                  <1>         popa
  4394 00001939 C3                  <1>         ret
  4395                              <1> 
  4396                              <1> ;=============================================================================
  4397                              <1> ;read_scrchar ---- read a char from the screen
  4398                              <1> ;input:
  4399                              <1> ;       dh = row
  4400                              <1> ;       dl = column
  4401                              <1> ;output:
  4402                              <1> ;       ax = char with attribute
  4403                              <1> ;=============================================================================
  4404                              <1> read_scrchar:
  4405                              <1> %ifdef DIRECT_DRAW
  4406 0000193A 1E                  <1>         push ds
  4407 0000193B 52                  <1>         push dx
  4408 0000193C 56                  <1>         push si
  4409                              <1> 
  4410 0000193D A0[4625]            <1>         mov al, [ui_screen_width]
  4411 00001940 F6E6                <1>         mul dh
  4412 00001942 30F6                <1>         xor dh, dh
  4413 00001944 01D0                <1>         add ax, dx
  4414 00001946 D1E0                <1>         shl ax, 1
  4415 00001948 89C6                <1>         mov si, ax
  4416                              <1> 
  4417 0000194A FF36[4825]          <1> 	push word [ui_screen_bufseg]
  4418 0000194E 1F                  <1> 	pop ds
  4419                              <1> 
  4420 0000194F AD                  <1>         lodsw
  4421 00001950 5E                  <1>         pop si
  4422 00001951 5A                  <1>         pop dx
  4423 00001952 1F                  <1>         pop ds
  4424                              <1> %else
  4425                              <1>         push bx
  4426                              <1>         mov bh, [ui_screen_page]
  4427                              <1>         mov ah,0x02
  4428                              <1>         int 0x10
  4429                              <1>         mov ah,0x08
  4430                              <1>         int 0x10
  4431                              <1>         pop bx
  4432                              <1> %endif
  4433 00001953 C3                  <1>         ret
  4434                              <1> 
  4435                              <1> %if 0
  4436                              <1> ;=============================================================================
  4437                              <1> ;draw_string_tty ---- Draw a string ending by zero ( tty mode )
  4438                              <1> ;input:
  4439                              <1> ;      ds:si -> string
  4440                              <1> ;output:
  4441                              <1> ;      none
  4442                              <1> ;=============================================================================
  4443                              <1> draw_string_tty:
  4444                              <1>         pusha
  4445                              <1>         cld
  4446                              <1> .draw1:
  4447                              <1>         lodsb
  4448                              <1>         or al, al
  4449                              <1>         jz .end
  4450                              <1>         mov bx,7
  4451                              <1>         mov ah,0x0e
  4452                              <1>         int 0x10
  4453                              <1>         jmp short .draw1
  4454                              <1> .end:
  4455                              <1>         popa
  4456                              <1>         ret
  4457                              <1> ;=============================================================================
  4458                              <1> %endif
  4459                              <1> 
  4460                              <1> ;=============================================================================
  4461                              <1> ;draw_window ---- Draw a framed window
  4462                              <1> ;input:
  4463                              <1> ;      ch = row of top left corner
  4464                              <1> ;      cl = column of top left corner
  4465                              <1> ;      dh = row of bottom right corner
  4466                              <1> ;      dl = column of bottom right corner
  4467                              <1> ;      bl = high 4 bit Background color and low 4 bit Foreground color
  4468                              <1> ;      bh = title attribute (define same as bl)
  4469                              <1> ;      ds:si -> title
  4470                              <1> ;output:
  4471                              <1> ;      none
  4472                              <1> ;=============================================================================
  4473                              <1> draw_window:
  4474 00001954 60                  <1>         pusha
  4475 00001955 890E[D464]          <1>         mov [ui_tmp.left_col], cx          ;
  4476 00001959 8916[D664]          <1>         mov [ui_tmp.right_col], dx         ; save window pos and attribute
  4477 0000195D 891E[D864]          <1>         mov [ui_tmp.frame_attr], bx        ;
  4478                              <1> 
  4479                              <1> ;Clear frame background
  4480 00001961 86FB                <1>         xchg bh,bl
  4481 00001963 E8A6FF              <1>         call clear_screen
  4482                              <1> 
  4483 00001966 87D1                <1>         xchg dx,cx
  4484 00001968 B90100              <1>         mov cx,1
  4485                              <1> 
  4486                              <1> ;Draw four corners
  4487 0000196B 8A1E[D864]          <1>         mov bl, [ui_tmp.frame_attr]
  4488 0000196F 803E[1245]02        <1>         cmp byte [draw_frame_method], 2             ; check draw method.
  4489 00001974 7204                <1>         jb .draw_top_corner
  4490 00001976 8A1E[D964]          <1>         mov bl, [ui_tmp.title_attr]
  4491                              <1> .draw_top_corner:
  4492 0000197A A0[0E45]            <1>         mov al, [frame_char.tl_corner]
  4493 0000197D E86EFF              <1>         call draw_char
  4494                              <1> 
  4495 00001980 8A16[D664]          <1>         mov dl, [ui_tmp.right_col]
  4496 00001984 A0[0F45]            <1>         mov al, [frame_char.tr_corner]
  4497 00001987 E864FF              <1>         call draw_char
  4498                              <1> 
  4499 0000198A 8A1E[D864]          <1>         mov bl, [ui_tmp.frame_attr]
  4500 0000198E 8A36[D764]          <1>         mov dh, [ui_tmp.bottom_row]
  4501 00001992 A0[1145]            <1>         mov al, [frame_char.br_corner]
  4502 00001995 E856FF              <1>         call draw_char
  4503                              <1>   
  4504 00001998 8A16[D464]          <1>         mov dl, [ui_tmp.left_col]
  4505 0000199C A0[1045]            <1>         mov al, [frame_char.bl_corner]
  4506 0000199F E84CFF              <1>         call draw_char
  4507                              <1> 
  4508                              <1> ;Draw bottom horizontal line
  4509 000019A2 FEC2                <1>         inc dl
  4510 000019A4 8A0E[D664]          <1>         mov cl, [ui_tmp.right_col]
  4511 000019A8 28D1                <1>         sub cl, dl
  4512 000019AA A0[0B45]            <1>         mov al, [frame_char.bottom]
  4513 000019AD E83EFF              <1>         call draw_char
  4514                              <1> 
  4515                              <1> ;Draw top horizontal line
  4516 000019B0 8A1E[D864]          <1>         mov bl, [ui_tmp.frame_attr]
  4517 000019B4 803E[1245]01        <1>         cmp byte [draw_frame_method], 1             ; check draw method.
  4518 000019B9 7204                <1>         jb .draw_top_line
  4519 000019BB 8A1E[D964]          <1>         mov bl, [ui_tmp.title_attr]
  4520                              <1> .draw_top_line:
  4521 000019BF 8A36[D564]          <1>         mov dh, [ui_tmp.top_row]
  4522 000019C3 A0[0A45]            <1>         mov al, [frame_char.top]
  4523 000019C6 E825FF              <1>         call draw_char
  4524                              <1> 
  4525                              <1> ;Draw title
  4526 000019C9 E89B0C              <1>         call strlen
  4527 000019CC 09C9                <1>         or cx,cx
  4528 000019CE 741E                <1>         jz .no_title
  4529                              <1> 
  4530 000019D0 A0[D664]            <1>         mov al, [ui_tmp.right_col]
  4531 000019D3 2A06[D464]          <1>         sub al, [ui_tmp.left_col]
  4532 000019D7 28C8                <1>         sub al, cl
  4533 000019D9 FEC0                <1>         inc al
  4534 000019DB D0E8                <1>         shr al,1
  4535 000019DD 8A16[D464]          <1>         mov dl, [ui_tmp.left_col]
  4536 000019E1 00C2                <1>         add dl,al
  4537 000019E3 8A36[D564]          <1>         mov dh, [ui_tmp.top_row]
  4538                              <1> 
  4539 000019E7 8A1E[D964]          <1>         mov bl, [ui_tmp.title_attr]
  4540 000019EB E8D9FE              <1>         call draw_string
  4541                              <1> 
  4542                              <1> .no_title:
  4543                              <1> 
  4544                              <1> ;Draw vertical line
  4545 000019EE 8A1E[D864]          <1>         mov bl, [ui_tmp.frame_attr]
  4546 000019F2 8A36[D564]          <1>         mov dh, [ui_tmp.top_row]
  4547 000019F6 FEC6                <1>         inc dh
  4548                              <1> 
  4549 000019F8 B90100              <1>         mov cx,1
  4550                              <1> 
  4551                              <1> .draw_vert_line:
  4552 000019FB A0[0C45]            <1>         mov al, [frame_char.left]
  4553 000019FE 8A16[D464]          <1>         mov dl, [ui_tmp.left_col]
  4554 00001A02 E8E9FE              <1>         call draw_char
  4555 00001A05 A0[0D45]            <1>         mov al, [frame_char.right]
  4556 00001A08 8A16[D664]          <1>         mov dl, [ui_tmp.right_col]
  4557 00001A0C E8DFFE              <1>         call draw_char
  4558                              <1> 
  4559 00001A0F FEC6                <1>         inc dh
  4560 00001A11 3A36[D764]          <1>         cmp dh, [ui_tmp.bottom_row]
  4561 00001A15 72E4                <1>         jb .draw_vert_line
  4562                              <1> 
  4563                              <1> ;Draw shadow
  4564 00001A17 B308                <1>         mov bl, 0x08
  4565 00001A19 8A2E[D764]          <1>         mov ch, [ui_tmp.bottom_row]
  4566 00001A1D 8A0E[D464]          <1>         mov cl, [ui_tmp.left_col]
  4567 00001A21 FEC5                <1>         inc ch
  4568 00001A23 80C102              <1> 	add cl, 2
  4569 00001A26 8A36[D764]          <1>         mov dh, [ui_tmp.bottom_row]
  4570 00001A2A 8A16[D664]          <1>         mov dl, [ui_tmp.right_col]
  4571 00001A2E FEC6                <1>         inc dh
  4572 00001A30 E81400              <1>         call draw_shadow
  4573 00001A33 8A2E[D564]          <1>         mov ch, [ui_tmp.top_row]
  4574 00001A37 8A0E[D664]          <1>         mov cl, [ui_tmp.right_col]
  4575 00001A3B FEC5                <1>         inc ch
  4576 00001A3D FEC1                <1>         inc cl
  4577 00001A3F 80C202              <1> 	add dl, 2
  4578 00001A42 E80200              <1>         call draw_shadow
  4579                              <1> 
  4580 00001A45 61                  <1>         popa
  4581 00001A46 C3                  <1>         ret
  4582                              <1> ;=============================================================================
  4583                              <1> 
  4584                              <1> ;=============================================================================
  4585                              <1> ;draw_shadow ---- Draw shadow block
  4586                              <1> ;input:
  4587                              <1> ;      ch = row of top left corner
  4588                              <1> ;      cl = column of top left corner
  4589                              <1> ;      dh = row of bottom right corner
  4590                              <1> ;      dl = column of bottom right corner
  4591                              <1> ;      bl = high 4 bit Background color and low 4 bit Foreground color
  4592                              <1> ;output:
  4593                              <1> ;      none
  4594                              <1> ;=============================================================================
  4595                              <1> draw_shadow:
  4596 00001A47 60                  <1>         pusha
  4597                              <1> .loop_row:
  4598 00001A48 52                  <1>         push dx
  4599                              <1> .loop_col:
  4600 00001A49 51                  <1>         push cx
  4601 00001A4A B90100              <1>         mov cx,1
  4602 00001A4D E8EAFE              <1>         call read_scrchar
  4603 00001A50 E89BFE              <1>         call draw_char
  4604 00001A53 59                  <1>         pop cx
  4605 00001A54 FECA                <1>         dec dl
  4606 00001A56 38D1                <1>         cmp cl, dl
  4607 00001A58 76EF                <1>         jbe .loop_col
  4608 00001A5A 5A                  <1>         pop dx
  4609 00001A5B FECE                <1>         dec dh
  4610 00001A5D 38F5                <1>         cmp ch, dh
  4611 00001A5F 76E7                <1>         jbe .loop_row
  4612                              <1> 
  4613 00001A61 61                  <1>         popa
  4614 00001A62 C3                  <1>         ret
  4615                              <1> ;=============================================================================
  4616                              <1> 
  4617                              <1> 
  4618                              <1> ;=============================================================================
  4619                              <1> ;set_video_mode ---- Set the Alphabet Video Mode
  4620                              <1> ;input:
  4621                              <1> ;      al = 0 , set screen resolution to 90x25,
  4622                              <1> ;           otherwise set to 80x25
  4623                              <1> ;      bl = character bit size ( 8 or 9 )
  4624                              <1> ;      cx = fonts number
  4625                              <1> ;      es:bp -> fonts data
  4626                              <1> ;output:
  4627                              <1> ;      none
  4628                              <1> ;=============================================================================
  4629                              <1> BIOS_CRT_COLS        equ 0x4A
  4630                              <1> BIOS_ADDR_6845       equ 0x63
  4631                              <1> 
  4632                              <1> set_video_mode:
  4633 00001A63 06                  <1>         push es
  4634 00001A64 53                  <1>         push bx
  4635 00001A65 50                  <1>         push ax
  4636                              <1> 
  4637 00001A66 E8B700              <1>         call reset_video_mode
  4638                              <1> 
  4639                              <1> ;Establish CRTC vertical timing and cursor position in character matrix
  4640                              <1> ;and set user fonts table
  4641 00001A69 09C9                <1>         or cx, cx
  4642 00001A6B 741D                <1>         jz .set_res                          ; no font data
  4643 00001A6D 09ED                <1>         or bp, bp
  4644 00001A6F 7419                <1>         jz .set_res                          ; no font data
  4645                              <1>         
  4646                              <1> .loop_set_fonts:                             ; set user defined chars
  4647 00001A71 51                  <1>         push cx
  4648 00001A72 31C9                <1>         xor cx,cx
  4649 00001A74 FEC1                <1>         inc cl
  4650 00001A76 260FB65600          <1>         movzx dx, byte [es:bp]
  4651 00001A7B 45                  <1>         inc bp
  4652 00001A7C B80011              <1>         mov ax,0x1100
  4653 00001A7F BB0010              <1>         mov bx,0x1000
  4654 00001A82 CD10                <1>         int 0x10
  4655 00001A84 59                  <1>         pop cx
  4656 00001A85 83C510              <1>         add bp, 16
  4657 00001A88 E2E7                <1>         loop .loop_set_fonts
  4658                              <1> 
  4659                              <1> .set_res:
  4660 00001A8A C606[4625]50        <1>         mov byte [ui_screen_width], 80
  4661 00001A8F C606[4725]19        <1>         mov byte [ui_screen_height], 25
  4662                              <1> 
  4663 00001A94 B84000              <1>         mov ax,0x40
  4664 00001A97 8EC0                <1>         mov es,ax
  4665 00001A99 58                  <1>         pop ax
  4666                              <1> 
  4667 00001A9A 08C0                <1>         or al,al
  4668 00001A9C 7540                <1>         jnz .skip_res_set
  4669                              <1> 
  4670 00001A9E 268B166300          <1>         mov dx,[es:BIOS_ADDR_6845]                   ; CRTC I/O port
  4671                              <1> 
  4672                              <1> ;Enable I/O writes to CRTC registers
  4673 00001AA3 B011                <1>         mov al,0x11
  4674 00001AA5 EE                  <1>         out dx,al
  4675 00001AA6 42                  <1>         inc dx
  4676 00001AA7 EC                  <1>         in al,dx
  4677 00001AA8 4A                  <1>         dec dx
  4678 00001AA9 88C4                <1>         mov ah,al
  4679 00001AAB B011                <1>         mov al,0x11
  4680 00001AAD 50                  <1>         push ax
  4681 00001AAE 80E47F              <1>         and ah,01111111b
  4682 00001AB1 EF                  <1>         out dx,ax
  4683                              <1> 
  4684                              <1> ;Establish CRTC horizontal timing
  4685 00001AB2 8D36[3825]          <1>         lea si, [ui_VideoHorizParams]
  4686                              <1> 
  4687 00001AB6 B90700              <1>         mov cx,7
  4688                              <1>         
  4689 00001AB9 FC                  <1>         cld
  4690                              <1> .set_CRTC:
  4691 00001ABA AD                  <1>         lodsw
  4692 00001ABB EF                  <1>         out dx,ax
  4693 00001ABC E2FC                <1>         loop .set_CRTC
  4694                              <1> 
  4695                              <1> ;write-protect CRTC registers
  4696 00001ABE 58                  <1>         pop ax
  4697 00001ABF EF                  <1>         out dx,ax
  4698                              <1> 
  4699                              <1> ;Program the Sequencer and Attribute Controller for 9 dots per character
  4700                              <1>         
  4701 00001AC0 BAC403              <1>         mov dx, 0x3c4
  4702 00001AC3 B80001              <1>         mov ax, 0x0100
  4703 00001AC6 FA                  <1>         cli
  4704 00001AC7 EF                  <1>         out dx,ax
  4705                              <1> 
  4706 00001AC8 B80101              <1>         mov ax,0x0101
  4707 00001ACB EF                  <1>         out dx,ax
  4708 00001ACC B80003              <1>         mov ax,0x0300
  4709 00001ACF EF                  <1>         out dx,ax
  4710 00001AD0 FB                  <1>         sti
  4711                              <1> 
  4712 00001AD1 BB1300              <1>         mov bx,0x0013
  4713 00001AD4 B80010              <1>         mov ax,0x1000
  4714 00001AD7 CD10                <1>         int 0x10
  4715                              <1> 
  4716 00001AD9 C606[4625]5A        <1>         mov byte [ui_screen_width], 90
  4717                              <1> .skip_res_set:
  4718                              <1> 
  4719                              <1> ;Program the Attribute Controller for 8- or 9-bit character codes
  4720 00001ADE B80010              <1>         mov ax,0x1000
  4721 00001AE1 BB120F              <1>         mov bx,0x0f12
  4722 00001AE4 5A                  <1>         pop dx
  4723 00001AE5 80FA08              <1>         cmp dl,8
  4724 00001AE8 7402                <1>         je .svm01
  4725 00001AEA B707                <1>         mov bh,7
  4726                              <1> .svm01:
  4727 00001AEC CD10                <1>         int 0x10
  4728                              <1> 
  4729                              <1> ;Update video BIOS data area
  4730 00001AEE A0[4625]            <1>         mov al,[ui_screen_width]
  4731 00001AF1 26A24A00            <1>         mov [es:BIOS_CRT_COLS],al
  4732                              <1> 
  4733                              <1> ;Set background highlight attribute
  4734 00001AF5 07                  <1>         pop es
  4735 00001AF6 B80310              <1>         mov ax,0x1003
  4736 00001AF9 30DB                <1>         xor bl,bl
  4737 00001AFB CD10                <1>         int 0x10
  4738 00001AFD E80C00              <1>         call hide_cursor
  4739                              <1> 
  4740 00001B00 C3                  <1>         ret
  4741                              <1> ;=============================================================================
  4742                              <1> 
  4743                              <1> ;=============================================================================
  4744                              <1> ;set_cursor ---- move the cursor
  4745                              <1> ;input:
  4746                              <1> ;       dh = row
  4747                              <1> ;       dl = column
  4748                              <1> ;=============================================================================
  4749                              <1> set_cursor:
  4750 00001B01 60                  <1> 	pusha
  4751 00001B02 8A3E[4A25]          <1>         mov bh, [ui_screen_page]
  4752 00001B06 B402                <1>         mov ah, 0x02
  4753 00001B08 CD10                <1>         int 0x10
  4754 00001B0A 61                  <1> 	popa
  4755 00001B0B C3                  <1>         ret
  4756                              <1> 
  4757                              <1> ;=============================================================================
  4758                              <1> ;hide_cursor ---- Hide the cursor
  4759                              <1> ;input:
  4760                              <1> ;      none
  4761                              <1> ;output:
  4762                              <1> ;      none
  4763                              <1> ;=============================================================================
  4764                              <1> hide_cursor:
  4765 00001B0C 60                  <1>         pusha
  4766 00001B0D B401                <1>         mov ah,1
  4767 00001B0F B9006F              <1>         mov cx,0x6f00
  4768 00001B12 CD10                <1>         int 0x10
  4769 00001B14 61                  <1>         popa
  4770 00001B15 C3                  <1>         ret
  4771                              <1> ;=============================================================================
  4772                              <1> 
  4773                              <1> ;=============================================================================
  4774                              <1> ;show_cursor ---- Show the cursor
  4775                              <1> ;input:
  4776                              <1> ;      none
  4777                              <1> ;output:
  4778                              <1> ;      none
  4779                              <1> ;=============================================================================
  4780                              <1> show_cursor:
  4781 00001B16 60                  <1>         pusha
  4782 00001B17 B401                <1>         mov ah,1
  4783 00001B19 B90F0E              <1>         mov cx,0x0e0f
  4784 00001B1C CD10                <1>         int 0x10
  4785 00001B1E 61                  <1>         popa
  4786 00001B1F C3                  <1>         ret
  4787                              <1> ;=============================================================================
  4788                              <1> 
  4789                              <1> ;=============================================================================
  4790                              <1> ;reset_video_mode ---- Reset the VideoMode
  4791                              <1> ;input:
  4792                              <1> ;      none
  4793                              <1> ;output:
  4794                              <1> ;      none
  4795                              <1> ;=============================================================================
  4796                              <1> reset_video_mode
  4797 00001B20 60                  <1>         pusha
  4798 00001B21 B80300              <1>         mov ax,3
  4799 00001B24 CD10                <1>         int 0x10
  4800 00001B26 E8EDFF              <1>         call show_cursor
  4801 00001B29 61                  <1>         popa
  4802 00001B2A C3                  <1>         ret
  4803                              <1> ;=============================================================================
  4804                              <1> 
  4805                              <1> 
  4806                              <1> ;=============================================================================
  4807                              <1> ;draw_icon ---- Draw a icon at special position
  4808                              <1> ;input:
  4809                              <1> ;      dh = start row
  4810                              <1> ;      dl = start column
  4811                              <1> ;      ch = number of row
  4812                              <1> ;      cl = number of column
  4813                              <1> ;      ds:si -> icon data , which is a two dim word array, each elements
  4814                              <1> ;               indicates a char. high byte is the attribute, low byte is
  4815                              <1> ;               is the char code.
  4816                              <1> ;output:
  4817                              <1> ;      none
  4818                              <1> ;=============================================================================
  4819                              <1> draw_icon:
  4820 00001B2B 09F6                <1>         or si, si
  4821 00001B2D 7422                <1>         jz .end
  4822 00001B2F 09C9                <1>         or cx, cx
  4823 00001B31 741E                <1>         jz .end
  4824                              <1>         
  4825 00001B33 60                  <1>         pusha
  4826 00001B34 FC                  <1>         cld
  4827                              <1> .loop_row:
  4828 00001B35 52                  <1>         push dx
  4829 00001B36 51                  <1>         push cx
  4830                              <1> .loop_col:
  4831 00001B37 51                  <1>         push cx
  4832 00001B38 B90100              <1>         mov cx,1
  4833 00001B3B AD                  <1>         lodsw
  4834 00001B3C 86E3                <1>         xchg ah,bl
  4835 00001B3E E8ADFD              <1>         call draw_char
  4836                              <1>         
  4837 00001B41 59                  <1>         pop cx
  4838 00001B42 FEC2                <1>         inc dl
  4839 00001B44 FEC9                <1>         dec cl
  4840 00001B46 75EF                <1>         jnz .loop_col
  4841                              <1>         
  4842 00001B48 59                  <1>         pop cx
  4843 00001B49 5A                  <1>         pop dx
  4844 00001B4A FEC6                <1>         inc dh
  4845 00001B4C FECD                <1>         dec ch
  4846 00001B4E 75E5                <1>         jnz .loop_row
  4847                              <1> 
  4848 00001B50 61                  <1>         popa
  4849                              <1> .end:
  4850 00001B51 C3                  <1>         ret
  4851                              <1> ;=============================================================================
  4852                              <1> 
  4853                              <1> ;=============================================================================
  4854                              <1> ;draw_background ---- Draw the background using specified icon
  4855                              <1> ;input:
  4856                              <1> ;      bh = background color when no icon
  4857                              <1> ;      cx = icon size (ch = row, cl = col)
  4858                              <1> ;      ds:si -> icon data , which is a two dim word array, each elements
  4859                              <1> ;               indicates a char. high byte is the attribute, low byte is
  4860                              <1> ;               is the char code.
  4861                              <1> ;output:
  4862                              <1> ;      none
  4863                              <1> ;=============================================================================
  4864                              <1> draw_background:
  4865 00001B52 60                  <1>         pusha
  4866 00001B53 09F6                <1>         or si,si
  4867 00001B55 7513                <1>         jnz .normal_bg
  4868                              <1> 
  4869                              <1> ;no icon. clear background.
  4870 00001B57 31C9                <1>         xor cx,cx
  4871 00001B59 8A36[4725]          <1>         mov dh,[ui_screen_height]
  4872 00001B5D 8A16[4625]          <1>         mov dl,[ui_screen_width]
  4873 00001B61 FECE                <1>         dec dh
  4874 00001B63 FECA                <1>         dec dl
  4875 00001B65 E8A4FD              <1>         call clear_screen
  4876 00001B68 61                  <1>         popa
  4877 00001B69 C3                  <1>         ret
  4878                              <1> 
  4879                              <1> .normal_bg:
  4880 00001B6A 31D2                <1>         xor dx,dx
  4881                              <1> 
  4882                              <1> .loop_row:
  4883 00001B6C 52                  <1>         push dx
  4884                              <1> .loop_col:
  4885 00001B6D E8BBFF              <1>         call draw_icon
  4886 00001B70 00CA                <1>         add dl, cl
  4887 00001B72 3A16[4625]          <1>         cmp dl, [ui_screen_width]
  4888 00001B76 72F5                <1>         jb .loop_col
  4889 00001B78 5A                  <1>         pop dx
  4890 00001B79 00EE                <1>         add dh, ch
  4891 00001B7B 3A36[4725]          <1>         cmp dh, [ui_screen_height]
  4892 00001B7F 72EB                <1>         jb .loop_row
  4893 00001B81 61                  <1>         popa
  4894 00001B82 C3                  <1>         ret
  4895                              <1> ;=============================================================================
  4896                              <1> 
  4897                              <1> ;=============================================================================
  4898                              <1> ;turnon_scrolllock ---- turn on the scroll lock key
  4899                              <1> ;input: none
  4900                              <1> ;output: none
  4901                              <1> ;=============================================================================
  4902                              <1> turnon_scrolllock:
  4903 00001B83 60                  <1>         pusha
  4904 00001B84 06                  <1>         push es
  4905 00001B85 6A40                <1>         push word BIOS_DATA_SEG
  4906 00001B87 07                  <1> 	pop es
  4907 00001B88 26800E170010        <1>         or byte [es: BIOS_KEYSTAT_OFF], kbScrollMask
  4908 00001B8E 07                  <1>         pop es
  4909 00001B8F 61                  <1>         popa
  4910 00001B90 C3                  <1>         ret
  4911                              <1> 
  4912                              <1> ;=============================================================================
  4913                              <1> ;turnoff_scrolllock ---- turn off the scroll lock key
  4914                              <1> ;input: none
  4915                              <1> ;output: none
  4916                              <1> ;=============================================================================
  4917                              <1> turnoff_scrolllock:
  4918 00001B91 60                  <1>         pusha
  4919 00001B92 06                  <1>         push es
  4920 00001B93 6A40                <1>         push word BIOS_DATA_SEG
  4921 00001B95 07                  <1> 	pop es
  4922 00001B96 2680261700EF        <1>         and byte [es: BIOS_KEYSTAT_OFF], ~ kbScrollMask
  4923 00001B9C 07                  <1>         pop es
  4924 00001B9D 61                  <1>         popa
  4925 00001B9E C3                  <1>         ret
  4926                              <1> 
  4927                              <1> ;=============================================================================
  4928                              <1> ;lock_screen ---- lock the screen, any output will be stored in SCR_BAK_SEG
  4929                              <1> ;=============================================================================
  4930                              <1> lock_screen:
  4931 00001B9F 60                  <1> 	pusha 
  4932 00001BA0 803E[4B25]00        <1> 	cmp byte [ui_screen_lock], 0
  4933 00001BA5 7518                <1> 	jnz .no_swap_page
  4934                              <1> 
  4935 00001BA7 A0[4A25]            <1>         mov al, [ui_screen_page]
  4936 00001BAA 3402                <1>         xor al, 0x02
  4937 00001BAC C706[4825]00B8      <1>         mov word [ui_screen_bufseg], SCR_BUF_SEG0
  4938 00001BB2 08C0                <1>         or al, al
  4939 00001BB4 7406                <1>         jz .set_seg0
  4940 00001BB6 C706[4825]00BA      <1>         mov word [ui_screen_bufseg], SCR_BUF_SEG2
  4941                              <1> .set_seg0:
  4942 00001BBC A2[4A25]            <1>         mov [ui_screen_page], al
  4943                              <1> 
  4944                              <1> .no_swap_page:
  4945 00001BBF FE06[4B25]          <1> 	inc byte [ui_screen_lock]
  4946 00001BC3 61                  <1> 	popa
  4947 00001BC4 C3                  <1>         ret
  4948                              <1> 
  4949                              <1> ;=============================================================================
  4950                              <1> ;unlock_screen ---- unlock the screen, copy SCR_BAK_SEG to SCR_BUF_SEG
  4951                              <1> ;=============================================================================
  4952                              <1> unlock_screen:
  4953 00001BC5 60                  <1> 	pusha
  4954 00001BC6 FE0E[4B25]          <1> 	dec byte [ui_screen_lock]
  4955 00001BCA 7507                <1> 	jnz .no_swap_page
  4956                              <1> 
  4957 00001BCC B405                <1>         mov ah, 0x05
  4958 00001BCE A0[4A25]            <1>         mov al, [ui_screen_page]
  4959 00001BD1 CD10                <1>         int 0x10
  4960                              <1> .no_swap_page:
  4961 00001BD3 61                  <1> 	popa
  4962 00001BD4 C3                  <1>         ret
  4963                              <1> 
  4964                              <1> 
  4965                              <1> ;=============================================================================
  4966                              <1> ;<<<<<<<<<<<<<<<<<<<<<<<<< Standard Dialog functions >>>>>>>>>>>>>>>>>>>>>>>>>
  4967                              <1> ;=============================================================================
  4968                              <1> 
  4969                              <1> ;=============================================================================
  4970                              <1> ; msgbox_draw_body_proc ---- draw body proc of message box
  4971                              <1> ; input:
  4972                              <1> ;	ds:si -> the window
  4973                              <1> ; output:
  4974                              <1> ;	none
  4975                              <1> ;=============================================================================
  4976                              <1> msgbox_draw_body_proc:
  4977 00001BD5 60                  <1> 	pusha
  4978 00001BD6 89F7                <1> 	mov di, si
  4979 00001BD8 8B5C1C              <1> 	mov bx, [si + struc_message_box.message_attr]
  4980 00001BDB BA0302              <1> 	mov dx, 0x0203
  4981 00001BDE 8B741A              <1> 	mov si, [si + struc_message_box.message]
  4982 00001BE1 E8BB05              <1> 	call window_draw_string
  4983 00001BE4 61                  <1> 	popa
  4984 00001BE5 C3                  <1> 	ret
  4985                              <1> 
  4986                              <1> ;=============================================================================
  4987                              <1> ; msgbox_default_event_handle ---- default event handle for message box
  4988                              <1> ; input:
  4989                              <1> ;	ax    -> event
  4990                              <1> ;	ds:si -> the window
  4991                              <1> ; output:
  4992                              <1> ;	none
  4993                              <1> ;=============================================================================
  4994                              <1> msgbox_default_event_handle:
  4995 00001BE6 E8B507              <1> 	call window_default_event_handle
  4996 00001BE9 730D                <1> 	jnc .end
  4997                              <1> 
  4998 00001BEB 80FCF0              <1> 	cmp ah, EVTCODE_COMMAND
  4999 00001BEE 7202                <1> 	jb .exit
  5000                              <1> 
  5001 00001BF0 F9                  <1> 	stc
  5002 00001BF1 C3                  <1> 	ret
  5003                              <1> 
  5004                              <1> .exit:
  5005 00001BF2 89441E              <1> 	mov [si + struc_message_box.pressed_key], ax
  5006 00001BF5 E82007              <1> 	call window_close
  5007                              <1> .end:
  5008 00001BF8 F8                  <1> 	clc
  5009 00001BF9 C3                  <1> 	ret
  5010                              <1> 
  5011                              <1> ;=============================================================================
  5012                              <1> ; msgbox_prepare ---- prepare a message box
  5013                              <1> ; input:
  5014                              <1> ;	al    =  message attribute
  5015                              <1> ;	bx    =  window attribute
  5016                              <1> ;	ds:dx -> 2nd level pointer to title
  5017                              <1> ;	ds:si -> message
  5018                              <1> ;	ds:di -> pointer to the struc_message_box
  5019                              <1> ; output:
  5020                              <1> ;	none
  5021                              <1> ;=============================================================================
  5022                              <1> msgbox_prepare:
  5023 00001BFA 60                  <1> 	pusha
  5024 00001BFB B92000              <1> 	mov cx, SIZE_OF_STRUC_MESSAGE_BOX
  5025 00001BFE E8380E              <1> 	call clear_memory
  5026                              <1> 
  5027 00001C01 89751A              <1> 	mov [di + struc_message_box.message], si
  5028 00001C04 89451C              <1> 	mov [di + struc_message_box.message_attr], ax
  5029 00001C07 895D04              <1> 	mov [di + struc_window.win_attr], bx
  5030 00001C0A 895502              <1> 	mov [di + struc_window.title], dx
  5031                              <1> 
  5032 00001C0D E8230B              <1> 	call count_lines
  5033                              <1> 
  5034 00001C10 020E[C844]          <1> 	add cl, [size.box_width]
  5035 00001C14 022E[C944]          <1> 	add ch, [size.box_height]
  5036 00001C18 894D08              <1> 	mov [di + struc_window.win_size], cx
  5037 00001C1B 87F7                <1> 	xchg si, di
  5038 00001C1D E86907              <1> 	call window_center_window
  5039                              <1> 
  5040 00001C20 C60406              <1> 	mov byte [si], WINFLAG_FRAMED | WINFLAG_MODAL
  5041                              <1> 
  5042 00001C23 C74414[E61B]        <1> 	mov word [si + struc_window.default_event_handle], msgbox_default_event_handle
  5043 00001C28 C74416[AA23]        <1> 	mov word [si + struc_window.event_handle], window_event_handle
  5044 00001C2D C74418[D51B]        <1> 	mov word [si + struc_window.draw_body_proc], msgbox_draw_body_proc
  5045 00001C32 61                  <1> 	popa
  5046 00001C33 C3                  <1> 	ret
  5047                              <1> 
  5048                              <1> 
  5049                              <1> ;=============================================================================
  5050                              <1> ;message_box ---- Show a message box
  5051                              <1> ;input:
  5052                              <1> ;	al = message attribute
  5053                              <1> ;	bx = window attribute
  5054                              <1> ;	ds:dx -> 2nd level pointer to title
  5055                              <1> ;	ds:si -> message
  5056                              <1> ;output:
  5057                              <1> ;	ax = user pressed key
  5058                              <1> ;=============================================================================
  5059                              <1> message_box:
  5060 00001C34 56                  <1> 	push si
  5061 00001C35 57                  <1> 	push di
  5062 00001C36 BF[F864]            <1> 	mov di, ui_tmp.tmp_msgbox
  5063 00001C39 87F7                <1> 	xchg si, di
  5064 00001C3B E84708              <1> 	call winlist_remove
  5065 00001C3E 87F7                <1> 	xchg si, di
  5066 00001C40 E8B7FF              <1> 	call msgbox_prepare
  5067 00001C43 87F7                <1> 	xchg si, di
  5068 00001C45 E87806              <1> 	call window_run
  5069 00001C48 8B441E              <1> 	mov ax, [si + struc_message_box.pressed_key]
  5070 00001C4B 5F                  <1> 	pop di
  5071 00001C4C 5E                  <1> 	pop si
  5072 00001C4D C3                  <1>         ret
  5073                              <1> ;=============================================================================
  5074                              <1> 
  5075                              <1> ;=============================================================================
  5076                              <1> ;error_box ---- draw error message box.
  5077                              <1> ;input:
  5078                              <1> ;      ds:si -> error message
  5079                              <1> ;output:
  5080                              <1> ;      ax = return keycode
  5081                              <1> ;=============================================================================
  5082                              <1> error_box:
  5083 00001C4E 53                  <1>         push bx
  5084 00001C4F 52                  <1>         push dx
  5085 00001C50 A0[EA44]            <1>         mov al, [color.error_box_msg]
  5086 00001C53 8B1E[E844]          <1>         mov bx, [color.error_box_frame]
  5087 00001C57 BA[2345]            <1>         mov dx, str_idx.error
  5088 00001C5A E8D7FF              <1>         call message_box
  5089 00001C5D 5A                  <1>         pop dx
  5090 00001C5E 5B                  <1>         pop bx
  5091 00001C5F C3                  <1>         ret
  5092                              <1> 
  5093                              <1> ;=============================================================================
  5094                              <1> ;info_box ---- draw infomation message box.
  5095                              <1> ;input:
  5096                              <1> ;      ds:si -> infomation message
  5097                              <1> ;output:
  5098                              <1> ;      ax = return keycode
  5099                              <1> ;=============================================================================
  5100                              <1> info_box:
  5101 00001C60 53                  <1>         push bx
  5102 00001C61 52                  <1>         push dx
  5103 00001C62 A0[ED44]            <1>         mov al, [color.info_box_msg]
  5104 00001C65 8B1E[EB44]          <1>         mov bx, [color.info_box_frame]
  5105 00001C69 BA[2745]            <1>         mov dx, str_idx.info
  5106 00001C6C E8C5FF              <1>         call message_box
  5107 00001C6F 5A                  <1>         pop dx
  5108 00001C70 5B                  <1>         pop bx
  5109 00001C71 C3                  <1>         ret
  5110                              <1> 
  5111                              <1> ;=============================================================================
  5112                              <1> ; inputbox_set_cursor
  5113                              <1> ; input:
  5114                              <1> ;	ds:si -> input box
  5115                              <1> ; output:
  5116                              <1> ;	none
  5117                              <1> ;=============================================================================
  5118                              <1> inputbox_set_cursor:
  5119 00001C72 8B5424              <1> 	mov dx, [si + struc_input_box.input_area_pos]
  5120 00001C75 025427              <1> 	add dl, [si + struc_input_box.input_curp]
  5121 00001C78 2A5426              <1> 	sub dl, [si + struc_input_box.input_startp]
  5122 00001C7B E80505              <1> 	call window_set_cursor
  5123 00001C7E E895FE              <1> 	call show_cursor
  5124 00001C81 C3                  <1> 	ret
  5125                              <1> 	
  5126                              <1> ;=============================================================================
  5127                              <1> ; inputbox_draw_body_proc ---- draw_body_proc of input box
  5128                              <1> ; input:
  5129                              <1> ;	ds:si -> pointer to struc_input_box
  5130                              <1> ; output:
  5131                              <1> ;	none
  5132                              <1> ;=============================================================================
  5133                              <1> inputbox_draw_body_proc:
  5134 00001C82 60                  <1> 	pusha
  5135 00001C83 89F7                <1> 	mov di, si
  5136 00001C85 8B5C1C              <1> 	mov bx, [si + struc_input_box.message_attr]
  5137 00001C88 BA0202              <1> 	mov dx, 0x0202
  5138 00001C8B 8B741A              <1> 	mov si, [si + struc_input_box.message]
  5139 00001C8E E80E05              <1> 	call window_draw_string
  5140 00001C91 61                  <1> 	popa
  5141 00001C92 E80400              <1> 	call inputbox_draw_input_area
  5142 00001C95 E8DAFF              <1> 	call inputbox_set_cursor
  5143 00001C98 C3                  <1> 	ret
  5144                              <1> 
  5145                              <1> ;=============================================================================
  5146                              <1> ; inputbox_draw_input_area ---- draw the input area of a input box
  5147                              <1> ; input:
  5148                              <1> ;	ds:si -> pointer to struc_input_box
  5149                              <1> ; output:
  5150                              <1> ;	none
  5151                              <1> ;=============================================================================
  5152                              <1> inputbox_draw_input_area:
  5153 00001C99 60                  <1> 	pusha
  5154 00001C9A 0FB64C23            <1> 	movzx cx, byte [si + struc_input_box.input_area_len]
  5155 00001C9E 8B5424              <1> 	mov dx, [si + struc_input_box.input_area_pos]
  5156 00001CA1 B020                <1> 	mov al, 0x20
  5157 00001CA3 8A5C1E              <1> 	mov bl, [si + struc_input_box.input_attr]
  5158 00001CA6 E8E804              <1> 	call window_draw_char
  5159                              <1> 
  5160 00001CA9 0FB64426            <1> 	movzx ax, byte [si + struc_input_box.input_startp]
  5161 00001CAD 8B7C20              <1> 	mov di, [si + struc_input_box.input_buf]
  5162 00001CB0 01C7                <1> 	add di, ax
  5163 00001CB2 8A7C1F              <1> 	mov bh, [si + struc_input_box.input_type]
  5164                              <1> 
  5165                              <1> .loop_draw:
  5166 00001CB5 8A05                <1> 	mov al, [di]
  5167 00001CB7 08C0                <1> 	or al, al
  5168 00001CB9 7412                <1> 	jz .end_draw
  5169 00001CBB 08FF                <1> 	or bh, bh
  5170 00001CBD 7402                <1> 	jz .draw_normal
  5171 00001CBF B02A                <1> 	mov al, '*'
  5172                              <1> .draw_normal:
  5173 00001CC1 51                  <1> 	push cx
  5174 00001CC2 B101                <1> 	mov cl, 1
  5175 00001CC4 E8CA04              <1> 	call window_draw_char
  5176 00001CC7 59                  <1> 	pop cx
  5177 00001CC8 FEC2                <1> 	inc dl
  5178 00001CCA 47                  <1> 	inc di
  5179 00001CCB E2E8                <1> 	loop .loop_draw
  5180                              <1> 
  5181                              <1> .end_draw:
  5182 00001CCD 61                  <1> 	popa
  5183 00001CCE C3                  <1> 	ret
  5184                              <1> 
  5185                              <1> 
  5186                              <1> ;=============================================================================
  5187                              <1> ; inputbox_get_strlen 
  5188                              <1> ; input:
  5189                              <1> ;	ds:si -> input box
  5190                              <1> ; output:
  5191                              <1> ;	cx = input buf strlen
  5192                              <1> ;=============================================================================
  5193                              <1> inputbox_get_strlen:
  5194 00001CCF 56                  <1> 	push si
  5195 00001CD0 8B7420              <1> 	mov si, [si + struc_input_box.input_buf]
  5196 00001CD3 E89109              <1> 	call strlen
  5197 00001CD6 5E                  <1> 	pop si
  5198 00001CD7 C3                  <1> 	ret
  5199                              <1> 
  5200                              <1> ;=============================================================================
  5201                              <1> ; inputbox_delete_char
  5202                              <1> ; input:
  5203                              <1> ;	ds:si -> input box
  5204                              <1> ;	cl = position to be deleted
  5205                              <1> ; output:
  5206                              <1> ;	none
  5207                              <1> ;=============================================================================
  5208                              <1> inputbox_delete_char:
  5209 00001CD8 60                  <1> 	pusha
  5210 00001CD9 30ED                <1> 	xor ch, ch
  5211 00001CDB 8B7C20              <1> 	mov di, [si + struc_input_box.input_buf]
  5212 00001CDE 01CF                <1> 	add di, cx
  5213 00001CE0 89FE                <1> 	mov si, di
  5214 00001CE2 803C00              <1> 	cmp byte [si], 0
  5215 00001CE5 7406                <1> 	jz .end
  5216 00001CE7 46                  <1> 	inc si
  5217 00001CE8 B1FF                <1> 	mov cl, 255
  5218 00001CEA E8B909              <1> 	call strncpy
  5219                              <1> .end:
  5220 00001CED 61                  <1> 	popa
  5221 00001CEE C3                  <1> 	ret
  5222                              <1> 
  5223                              <1> ;=============================================================================
  5224                              <1> ; inputbox_post_input
  5225                              <1> ;=============================================================================
  5226                              <1> inputbox_post_input:
  5227 00001CEF 8A4427              <1> 	mov al, [si + struc_input_box.input_curp]
  5228 00001CF2 8A4C26              <1> 	mov cl, [si + struc_input_box.input_startp]
  5229 00001CF5 38C1                <1> 	cmp cl, al
  5230 00001CF7 7205                <1> 	jb .below_cur
  5231 00001CF9 884426              <1> 	mov [si + struc_input_box.input_startp], al
  5232 00001CFC EB0D                <1> 	jmp short .end
  5233                              <1> 
  5234                              <1> .below_cur:
  5235 00001CFE 28C8                <1> 	sub al, cl
  5236 00001D00 3A4423              <1> 	cmp al, [si + struc_input_box.input_area_len]
  5237 00001D03 7606                <1> 	jbe .end
  5238 00001D05 2A4423              <1> 	sub al, [si + struc_input_box.input_area_len]
  5239 00001D08 004426              <1> 	add [si + struc_input_box.input_startp], al
  5240                              <1> .end:
  5241 00001D0B C3                  <1> 	ret
  5242                              <1> 
  5243                              <1> ;=============================================================================
  5244                              <1> ; inputbox_backspace 
  5245                              <1> ;=============================================================================
  5246                              <1> inputbox_backspace:
  5247 00001D0C E8C0FF              <1> 	call inputbox_get_strlen
  5248 00001D0F 09C9                <1> 	or cx, cx
  5249 00001D11 7412                <1> 	jz .end
  5250 00001D13 8A4C27              <1> 	mov cl, [si + struc_input_box.input_curp]
  5251 00001D16 08C9                <1> 	or cl, cl
  5252 00001D18 740B                <1> 	jz .end
  5253 00001D1A FEC9                <1> 	dec cl
  5254 00001D1C 884C27              <1> 	mov [si + struc_input_box.input_curp], cl
  5255 00001D1F E8B6FF              <1> 	call inputbox_delete_char
  5256 00001D22 E8CAFF              <1> 	call inputbox_post_input
  5257                              <1> .end:
  5258 00001D25 C3                  <1> 	ret
  5259                              <1> 
  5260                              <1> ;=============================================================================
  5261                              <1> ; inputbox_delete
  5262                              <1> ;=============================================================================
  5263                              <1> inputbox_delete:
  5264 00001D26 E8A6FF              <1> 	call inputbox_get_strlen
  5265 00001D29 09C9                <1> 	or cx, cx
  5266 00001D2B 7409                <1> 	jz .end
  5267 00001D2D 8A4C27              <1> 	mov cl, [si + struc_input_box.input_curp]
  5268 00001D30 E8A5FF              <1> 	call inputbox_delete_char
  5269 00001D33 E8B9FF              <1> 	call inputbox_post_input
  5270                              <1> .end:
  5271 00001D36 C3                  <1> 	ret
  5272                              <1> 
  5273                              <1> ;=============================================================================
  5274                              <1> ; inputbox_right_arrow
  5275                              <1> ;=============================================================================
  5276                              <1> inputbox_right_arrow:
  5277 00001D37 E895FF              <1> 	call inputbox_get_strlen
  5278 00001D3A 3A4C27              <1> 	cmp cl, [si + struc_input_box.input_curp]
  5279 00001D3D 7606                <1> 	jbe .end
  5280                              <1> 
  5281 00001D3F FE4427              <1> 	inc byte [si + struc_input_box.input_curp]
  5282 00001D42 E8AAFF              <1> 	call inputbox_post_input
  5283                              <1> .end:
  5284 00001D45 C3                  <1> 	ret
  5285                              <1> 
  5286                              <1> ;=============================================================================
  5287                              <1> ; inputbox_left_arrow
  5288                              <1> ;=============================================================================
  5289                              <1> inputbox_left_arrow:
  5290 00001D46 807C2700            <1> 	cmp byte [si + struc_input_box.input_curp], 0
  5291 00001D4A 7406                <1> 	jz .end
  5292                              <1> 
  5293 00001D4C FE4C27              <1> 	dec byte [si + struc_input_box.input_curp]
  5294 00001D4F E89DFF              <1> 	call inputbox_post_input
  5295                              <1> .end:
  5296 00001D52 C3                  <1> 	ret
  5297                              <1> 
  5298                              <1> ;=============================================================================
  5299                              <1> ; inputbox_end_key
  5300                              <1> ;=============================================================================
  5301                              <1> inputbox_end_key:
  5302 00001D53 E879FF              <1> 	call inputbox_get_strlen
  5303 00001D56 884C27              <1> 	mov [si + struc_input_box.input_curp], cl
  5304 00001D59 E893FF              <1> 	call inputbox_post_input
  5305 00001D5C C3                  <1> 	ret
  5306                              <1> 
  5307                              <1> ;=============================================================================
  5308                              <1> ; inputbox_home_key
  5309                              <1> ;=============================================================================
  5310                              <1> inputbox_home_key:
  5311 00001D5D C6442700            <1> 	mov byte [si + struc_input_box.input_curp], 0
  5312 00001D61 E88BFF              <1> 	call inputbox_post_input
  5313 00001D64 C3                  <1> 	ret
  5314                              <1> 
  5315                              <1> 
  5316                              <1> ;=============================================================================
  5317                              <1> ; inputbox_cancel
  5318                              <1> ;=============================================================================
  5319                              <1> inputbox_cancel:
  5320 00001D65 C6442801            <1> 	mov byte [si + struc_input_box.return_val], 1
  5321 00001D69 E8A0FD              <1> 	call hide_cursor
  5322 00001D6C C3                  <1> 	ret
  5323                              <1> 
  5324                              <1> ;=============================================================================
  5325                              <1> ; inputbox_enter
  5326                              <1> ;=============================================================================
  5327                              <1> inputbox_enter:
  5328 00001D6D C6442800            <1> 	mov byte [si + struc_input_box.return_val], 0
  5329 00001D71 E898FD              <1> 	call hide_cursor
  5330 00001D74 C3                  <1> 	ret
  5331                              <1> 
  5332                              <1> ;=============================================================================
  5333                              <1> ; inputbox_insert_char
  5334                              <1> ; input:
  5335                              <1> ;	al = char
  5336                              <1> ;	cl = position
  5337                              <1> ;	ds:si -> input box
  5338                              <1> ;=============================================================================
  5339                              <1> inputbox_insert_char:
  5340 00001D75 60                  <1> 	pusha
  5341 00001D76 30ED                <1> 	xor ch, ch
  5342 00001D78 51                  <1> 	push cx
  5343 00001D79 E853FF              <1> 	call inputbox_get_strlen
  5344 00001D7C 8B7420              <1> 	mov si, [si + struc_input_box.input_buf]
  5345 00001D7F 01CE                <1> 	add si, cx
  5346 00001D81 5A                  <1> 	pop dx
  5347 00001D82 29D1                <1> 	sub cx, dx
  5348 00001D84 09C9                <1> 	or cx, cx
  5349 00001D86 7408                <1> 	jz .no_move
  5350                              <1> 
  5351                              <1> .loop_move:
  5352 00001D88 8A24                <1> 	mov ah, [si]
  5353 00001D8A 886401              <1> 	mov [si + 1], ah
  5354 00001D8D 4E                  <1> 	dec si
  5355 00001D8E E2F8                <1> 	loop .loop_move
  5356                              <1> 
  5357                              <1> .no_move:
  5358 00001D90 8A24                <1> 	mov ah, [si]
  5359 00001D92 8904                <1> 	mov [si], ax
  5360 00001D94 61                  <1> 	popa
  5361 00001D95 C3                  <1> 	ret
  5362                              <1> 	
  5363                              <1> ;=============================================================================
  5364                              <1> ; inputbox_default_event_handle
  5365                              <1> ; input:
  5366                              <1> ;	ax = event code
  5367                              <1> ;	ds:si -> input box
  5368                              <1> ; output:
  5369                              <1> ;	none
  5370                              <1> ;=============================================================================
  5371                              <1> inputbox_default_event_handle:
  5372 00001D96 E80506              <1> 	call window_default_event_handle
  5373 00001D99 732C                <1> 	jnc .end
  5374 00001D9B 08C0                <1> 	or al, al
  5375 00001D9D 7427                <1> 	jz .no_action
  5376 00001D9F 80FCF0              <1> 	cmp ah, EVTCODE_COMMAND
  5377 00001DA2 7322                <1> 	jae .no_action
  5378 00001DA4 3C20                <1> 	cmp al, 0x20
  5379 00001DA6 721E                <1> 	jb .no_action
  5380 00001DA8 3CE0                <1> 	cmp al, 0xE0
  5381 00001DAA 741A                <1> 	je .no_action
  5382                              <1> 
  5383 00001DAC E820FF              <1> 	call inputbox_get_strlen
  5384 00001DAF 2A4C22              <1> 	sub cl, [si + struc_input_box.input_buf_len]
  5385 00001DB2 08C9                <1> 	or cl, cl
  5386 00001DB4 7411                <1> 	jz .end
  5387                              <1> 
  5388 00001DB6 8A4C27              <1> 	mov cl, [si + struc_input_box.input_curp]
  5389 00001DB9 E8B9FF              <1> 	call inputbox_insert_char
  5390 00001DBC FE4427              <1> 	inc byte [si + struc_input_box.input_curp]
  5391 00001DBF E82DFF              <1> 	call inputbox_post_input
  5392 00001DC2 E84903              <1> 	call window_draw_body
  5393 00001DC5 C3                  <1> 	ret
  5394                              <1> 
  5395                              <1> .no_action:
  5396 00001DC6 F9                  <1> 	stc
  5397                              <1> .end:
  5398 00001DC7 C3                  <1> 	ret
  5399                              <1> 
  5400                              <1> ;=============================================================================
  5401                              <1> ; inputbox_prepare
  5402                              <1> ; input:
  5403                              <1> ;	ah = input method ( 0 = normal, 1 = security )
  5404                              <1> ;	al = message attribute
  5405                              <1> ;	bh = title attribute
  5406                              <1> ;	bl = frame attribute
  5407                              <1> ;	ch = input area length
  5408                              <1> ;	cl = max input length
  5409                              <1> ;	ds:si -> message ( no more than one line )
  5410                              <1> ;	ds:di -> pointer to struc_input_box
  5411                              <1> ;	ds:dx -> buffer to store input string
  5412                              <1> ;=============================================================================
  5413                              <1> inputbox_prepare:
  5414 00001DC8 60                  <1> 	pusha
  5415 00001DC9 08ED                <1> 	or ch, ch
  5416 00001DCB 7502                <1> 	jnz .go_prepare
  5417 00001DCD 88CD                <1> 	mov ch, cl
  5418                              <1> .go_prepare:
  5419                              <1> 
  5420 00001DCF 51                  <1> 	push cx
  5421 00001DD0 B92900              <1> 	mov cx, SIZE_OF_STRUC_INPUT_BOX
  5422 00001DD3 E8630C              <1> 	call clear_memory
  5423 00001DD6 59                  <1> 	pop cx
  5424                              <1> 
  5425 00001DD7 C60506              <1> 	mov byte [di], WINFLAG_FRAMED | WINFLAG_MODAL		; win flag
  5426 00001DDA C74502[2945]        <1> 	mov word [di + struc_window.title], str_idx.input	; win title
  5427 00001DDF 895D04              <1> 	mov [di + struc_window.win_attr], bx			; win attr
  5428 00001DE2 89751A              <1> 	mov [di + struc_input_box.message], si
  5429 00001DE5 88451C              <1> 	mov [di + struc_input_box.message_attr], al
  5430 00001DE8 B00F                <1> 	mov al, 0x0F
  5431 00001DEA 89451E              <1> 	mov [di + struc_input_box.input_attr], ax
  5432 00001DED 895520              <1> 	mov [di + struc_input_box.input_buf], dx
  5433 00001DF0 894D22              <1> 	mov [di + struc_input_box.input_buf_len], cx		; input buf 
  5434                              <1> 								; and area len
  5435                              <1> 
  5436 00001DF3 8B1E[C844]          <1> 	mov bx, [size.box_width]
  5437 00001DF7 FEC7                <1> 	inc bh
  5438 00001DF9 00EB                <1> 	add bl, ch
  5439                              <1> 
  5440 00001DFB E86908              <1> 	call strlen
  5441 00001DFE 00CB                <1> 	add bl, cl
  5442 00001E00 895D08              <1> 	mov [di + struc_window.win_size], bx			; win size
  5443 00001E03 894D24              <1> 	mov [di + struc_input_box.input_area_pos],cx		; input area pos
  5444 00001E06 8145240202          <1> 	add word [di + struc_input_box.input_area_pos], 0x0202
  5445                              <1> 
  5446 00001E0B C745100E00          <1> 	mov word [di + struc_window.act_num], INPUTBOX_ACTION_NUM
  5447 00001E10 C74512[9225]        <1> 	mov word [di + struc_window.act_table], inputbox_action_table
  5448 00001E15 C74514[961D]        <1> 	mov word [di + struc_window.default_event_handle], inputbox_default_event_handle
  5449 00001E1A C74516[AA23]        <1> 	mov word [di + struc_window.event_handle], window_event_handle
  5450 00001E1F C74518[821C]        <1> 	mov word [di + struc_window.draw_body_proc], inputbox_draw_body_proc
  5451                              <1> 
  5452 00001E24 FE4528              <1> 	inc byte [di + struc_input_box.return_val]
  5453                              <1> 
  5454 00001E27 89FE                <1> 	mov si, di
  5455 00001E29 E85D05              <1> 	call window_center_window
  5456 00001E2C 61                  <1> 	popa
  5457 00001E2D C3                  <1> 	ret
  5458                              <1> 
  5459                              <1> ;=============================================================================
  5460                              <1> ;input_box ---- draw a input box and input a string
  5461                              <1> ;input:
  5462                              <1> ;      ah = input method ( 0 = normal, 1 = security )
  5463                              <1> ;      al = message attribute
  5464                              <1> ;      bh = title attribute
  5465                              <1> ;      bl = frame attribute
  5466                              <1> ;      ch = input area length
  5467                              <1> ;      cl = max input length
  5468                              <1> ;      ds:si -> message ( no more than one line )
  5469                              <1> ;      ds:di -> buffer to store input text
  5470                              <1> ;      ds:dx -> parent window
  5471                              <1> ;output:
  5472                              <1> ;      cf = 0 , ah = 0 ok, ch = number of inputed character
  5473                              <1> ;      cf = 1 , ah != 0 cancel, ch = 0
  5474                              <1> ;=============================================================================
  5475                              <1> input_box:
  5476 00001E2E 56                  <1> 	push si
  5477 00001E2F 57                  <1> 	push di
  5478 00001E30 57                  <1> 	push di
  5479 00001E31 52                  <1> 	push dx
  5480                              <1> 
  5481 00001E32 BA[6C65]            <1> 	mov dx, ui_tmp.tmp_buf
  5482 00001E35 BF[1865]            <1> 	mov di, ui_tmp.tmp_inputbox
  5483 00001E38 87F7                <1> 	xchg si, di
  5484 00001E3A E84806              <1> 	call winlist_remove
  5485 00001E3D 87F7                <1> 	xchg si, di
  5486 00001E3F E886FF              <1> 	call inputbox_prepare
  5487                              <1> 
  5488 00001E42 8F450A              <1> 	pop word [di + struc_window.parent_win]
  5489 00001E45 87FA                <1> 	xchg di, dx
  5490 00001E47 5E                  <1> 	pop si
  5491                              <1> 
  5492 00001E48 06                  <1> 	push es
  5493 00001E49 1E                  <1> 	push ds
  5494 00001E4A 07                  <1> 	pop es
  5495                              <1> 
  5496 00001E4B 56                  <1> 	push si
  5497 00001E4C 57                  <1> 	push di
  5498                              <1> 
  5499 00001E4D E87008              <1> 	call strcpy
  5500                              <1> 	
  5501 00001E50 89D6                <1> 	mov si, dx
  5502 00001E52 E86B04              <1> 	call window_run
  5503 00001E55 8A6428              <1> 	mov ah, [si + struc_input_box.return_val]
  5504 00001E58 E874FE              <1> 	call inputbox_get_strlen
  5505 00001E5B 88CD                <1> 	mov ch, cl
  5506 00001E5D 8A4C22              <1> 	mov cl, [si + struc_input_box.input_buf_len]
  5507 00001E60 08E4                <1> 	or ah, ah
  5508                              <1> 
  5509 00001E62 5E                  <1> 	pop si
  5510 00001E63 5F                  <1> 	pop di
  5511 00001E64 7403                <1> 	jz .ok
  5512 00001E66 F9                  <1> 	stc
  5513 00001E67 EB04                <1> 	jmp short .end
  5514                              <1> .ok:
  5515 00001E69 E85408              <1> 	call strcpy
  5516 00001E6C F8                  <1> 	clc
  5517                              <1> .end:
  5518 00001E6D 07                  <1> 	pop es
  5519 00001E6E 5F                  <1> 	pop di
  5520 00001E6F 5E                  <1> 	pop si
  5521 00001E70 C3                  <1> 	ret
  5522                              <1> 
  5523                              <1> ;=============================================================================
  5524                              <1> ;input_password ---- input a password
  5525                              <1> ;input:
  5526                              <1> ;      cl = max password length
  5527                              <1> ;      ds:si -> message string
  5528                              <1> ;output:
  5529                              <1> ;      cf = 0 success, ax:dx = password
  5530                              <1> ;      cf = 1 cancel
  5531                              <1> ;=============================================================================
  5532                              <1> input_password:
  5533 00001E71 53                  <1>         push bx
  5534 00001E72 51                  <1>         push cx
  5535                              <1>         
  5536 00001E73 B401                <1>         mov ah, 1
  5537 00001E75 A0[E744]            <1>         mov al, [color.input_box_msg]
  5538 00001E78 8B1E[E544]          <1>         mov bx, [color.input_box_frame]
  5539 00001E7C 88CD                <1>         mov ch, cl
  5540 00001E7E 31D2                <1>         xor dx, dx
  5541 00001E80 BF[6C66]            <1>         mov di, ui_tmp.tmp_buf1
  5542                              <1> 
  5543 00001E83 C60500              <1>         mov byte [di], 0
  5544                              <1> 
  5545 00001E86 E8A5FF              <1>         call input_box
  5546 00001E89 7209                <1>         jc .cancel_input
  5547                              <1> 
  5548 00001E8B 89FE                <1>         mov si, di
  5549 00001E8D 0FB6CD              <1>         movzx cx, ch
  5550 00001E90 E83A08              <1>         call calc_password
  5551 00001E93 F8                  <1>         clc
  5552                              <1> 
  5553                              <1> .cancel_input:
  5554 00001E94 59                  <1>         pop cx
  5555 00001E95 5B                  <1>         pop bx
  5556 00001E96 C3                  <1>         ret
  5557                              <1> ;=============================================================================
  5558                              <1> 
  5559                              <1> ;=============================================================================
  5560                              <1> ; menubox_adjust_geometry ---- adjust the size and position of the menu box
  5561                              <1> ; input:
  5562                              <1> ;	ds:si -> pointer to struc_menu_box
  5563                              <1> ; output:
  5564                              <1> ;	none
  5565                              <1> ;=============================================================================
  5566                              <1> menubox_adjust_geometry:
  5567 00001E97 E80400              <1> 	call menubox_adjust_menu_area
  5568 00001E9A E86E00              <1> 	call menubox_adjust_win_width
  5569 00001E9D C3                  <1> 	ret
  5570                              <1> 
  5571                              <1> ;=============================================================================
  5572                              <1> ; menubox_adjust_menu_area ---- adjust the size and position of the menu area
  5573                              <1> ; input:
  5574                              <1> ;	ds:si -> pointer to struc_menu_box
  5575                              <1> ; output:
  5576                              <1> ;	none
  5577                              <1> ;=============================================================================
  5578                              <1> menubox_adjust_menu_area:
  5579 00001E9E 60                  <1> 	pusha
  5580                              <1> 
  5581                              <1> ;adjust menu area position
  5582 00001E9F B90101              <1> 	mov cx, 0x0101
  5583 00001EA2 8A04                <1> 	mov al, [si]
  5584 00001EA4 A840                <1> 	test al, MENUFLAG_SINK_UPPER
  5585 00001EA6 7402                <1> 	jz .no_sink_upper
  5586 00001EA8 FEC5                <1> 	inc ch
  5587                              <1> .no_sink_upper:
  5588 00001EAA 837C1A00            <1> 	cmp word [si + struc_menu_box.menu_header], 0
  5589 00001EAE 7402                <1> 	jz .no_header
  5590 00001EB0 FEC5                <1> 	inc ch
  5591                              <1> .no_header:
  5592 00001EB2 A820                <1> 	test al, MENUFLAG_SINK_WIDTH
  5593 00001EB4 7402                <1> 	jz .no_sink_width
  5594 00001EB6 FEC1                <1> 	inc cl
  5595                              <1> .no_sink_width:
  5596 00001EB8 894C21              <1> 	mov [si + struc_menu_box.menu_area_pos], cx
  5597                              <1> 
  5598                              <1> ;adjust menu area size
  5599 00001EBB 8B5408              <1> 	mov dx, [si + struc_window.win_size]
  5600 00001EBE 28EE                <1> 	sub dh, ch
  5601 00001EC0 FECE                <1> 	dec dh
  5602 00001EC2 A880                <1> 	test al, MENUFLAG_SINK_BOTTOM
  5603 00001EC4 7402                <1> 	jz .no_sink_bottom
  5604 00001EC6 FECE                <1> 	dec dh
  5605                              <1> .no_sink_bottom:
  5606                              <1> 
  5607 00001EC8 30D2                <1> 	xor dl, dl
  5608 00001ECA 0FB64C26            <1> 	movzx cx, byte [si + struc_menu_box.items_num]
  5609 00001ECE 09C9                <1> 	or cx, cx
  5610 00001ED0 741D                <1> 	jz .end_calc
  5611 00001ED2 8B5C29              <1> 	mov bx, [si + struc_menu_box.item_str_proc]
  5612 00001ED5 09DB                <1> 	or bx, bx
  5613 00001ED7 7416                <1> 	jz .end_calc
  5614                              <1> 
  5615                              <1> .loop_calc_item_width:
  5616 00001ED9 56                  <1> 	push si
  5617 00001EDA 53                  <1> 	push bx
  5618 00001EDB 51                  <1> 	push cx
  5619 00001EDC 49                  <1> 	dec cx
  5620                              <1> 
  5621 00001EDD 52                  <1> 	push dx
  5622 00001EDE FFD3                <1> 	call bx
  5623 00001EE0 5A                  <1> 	pop dx
  5624                              <1> 
  5625 00001EE1 E89607              <1> 	call strlen_hl
  5626 00001EE4 38CA                <1> 	cmp dl, cl
  5627 00001EE6 7302                <1> 	jae .cont_calc
  5628 00001EE8 88CA                <1> 	mov dl, cl
  5629                              <1> .cont_calc:
  5630 00001EEA 59                  <1> 	pop cx
  5631 00001EEB 5B                  <1> 	pop bx
  5632 00001EEC 5E                  <1> 	pop si
  5633 00001EED E2EA                <1> 	loop .loop_calc_item_width
  5634                              <1> 
  5635                              <1> .end_calc:
  5636                              <1> 
  5637 00001EEF 56                  <1> 	push si
  5638 00001EF0 8B741A              <1> 	mov si, [si + struc_menu_box.menu_header]
  5639 00001EF3 09F6                <1> 	or si, si
  5640 00001EF5 740B                <1> 	jz .no_header_len
  5641 00001EF7 8B34                <1> 	mov si, [si]
  5642 00001EF9 E87E07              <1> 	call strlen_hl
  5643 00001EFC 38CA                <1> 	cmp dl, cl
  5644 00001EFE 7302                <1> 	jae .header_short
  5645 00001F00 88CA                <1> 	mov dl, cl
  5646                              <1> .header_short:
  5647                              <1> .no_header_len:
  5648 00001F02 80C202              <1> 	add dl, 2
  5649 00001F05 5E                  <1> 	pop si
  5650 00001F06 895423              <1> 	mov [si + struc_menu_box.menu_area_size], dx
  5651                              <1> 
  5652 00001F09 61                  <1> 	popa
  5653 00001F0A C3                  <1> 	ret
  5654                              <1> 
  5655                              <1> 
  5656                              <1> ;=============================================================================
  5657                              <1> ; menubox_adjust_win_width ---- adjust the width the menu window. 
  5658                              <1> ; input:
  5659                              <1> ;	ds:si -> pointer to struc_menu_box
  5660                              <1> ; output:
  5661                              <1> ;	none
  5662                              <1> ;=============================================================================
  5663                              <1> menubox_adjust_win_width:
  5664 00001F0B 60                  <1> 	pusha
  5665 00001F0C 8A04                <1> 	mov al, [si]
  5666 00001F0E 8B5C23              <1> 	mov bx, [si + struc_menu_box.menu_area_size]
  5667                              <1> 
  5668                              <1> ; calculate window width
  5669 00001F11 80C302              <1> 	add bl, 2
  5670                              <1> 
  5671 00001F14 A820                <1> 	test al, MENUFLAG_SINK_WIDTH
  5672 00001F16 7403                <1> 	jz .no_sink_width
  5673 00001F18 80C302              <1> 	add bl, 2
  5674                              <1> .no_sink_width:
  5675 00001F1B A810                <1> 	test al, MENUFLAG_SCROLLBAR
  5676 00001F1D 7402                <1> 	jz .no_scrollbar
  5677 00001F1F FEC3                <1> 	inc bl
  5678                              <1> .no_scrollbar:
  5679 00001F21 885C08              <1> 	mov [si + struc_window.win_size], bl
  5680 00001F24 8A0E[4625]          <1> 	mov cl, [ui_screen_width]
  5681 00001F28 28D9                <1> 	sub cl, bl
  5682 00001F2A 80E902              <1> 	sub cl, 2
  5683                              <1> 
  5684 00001F2D 384C06              <1> 	cmp [si + struc_window.win_pos], cl
  5685 00001F30 7603                <1> 	jbe .no_adjust_pos
  5686 00001F32 884C06              <1> 	mov [si + struc_window.win_pos], cl
  5687                              <1> .no_adjust_pos:
  5688 00001F35 61                  <1> 	popa
  5689 00001F36 C3                  <1> 	ret
  5690                              <1> 
  5691                              <1> ;=============================================================================
  5692                              <1> ; menubox_draw_body_proc ---- draw the window body of a menu box
  5693                              <1> ; input:
  5694                              <1> ;	ds:si -> pointer to struc_menu_box
  5695                              <1> ; output:
  5696                              <1> ;	none
  5697                              <1> ;=============================================================================
  5698                              <1> menubox_draw_body_proc:
  5699 00001F37 60                  <1> 	pusha
  5700 00001F38 E82700              <1> 	call menubox_draw_menu
  5701 00001F3B 837C1A00            <1> 	cmp word [si + struc_menu_box.menu_header], 0
  5702 00001F3F 7403                <1> 	jz .no_header
  5703 00001F41 E87D00              <1> 	call menubox_draw_header
  5704                              <1> .no_header:
  5705 00001F44 F60410              <1> 	test byte [si], MENUFLAG_SCROLLBAR
  5706 00001F47 7403                <1> 	jz .no_scrollbar
  5707 00001F49 E80200              <1> 	call menubox_draw_scrollbar
  5708                              <1> .no_scrollbar:
  5709 00001F4C 61                  <1> 	popa
  5710 00001F4D C3                  <1> 	ret
  5711                              <1> 
  5712                              <1> 
  5713                              <1> ;=============================================================================
  5714                              <1> ; menubox_draw_scrollbar ---- draw the scrollbar
  5715                              <1> ; input:
  5716                              <1> ;	ds:si -> pointer to struc_menu_box
  5717                              <1> ; output:
  5718                              <1> ;	none
  5719                              <1> ;=============================================================================
  5720                              <1> menubox_draw_scrollbar:
  5721 00001F4E 8B4426              <1> 	mov ax, [si + struc_menu_box.items_num]
  5722 00001F51 8A5C25              <1> 	mov bl, [si + struc_menu_box.scrollbar_attr]
  5723 00001F54 8B4C21              <1> 	mov cx, [si + struc_menu_box.menu_area_pos]
  5724 00001F57 8B5423              <1> 	mov dx, [si + struc_menu_box.menu_area_size]
  5725 00001F5A 00D1                <1> 	add cl, dl
  5726 00001F5C 30D2                <1> 	xor dl, dl
  5727 00001F5E E84C02              <1> 	call window_draw_scrollbar
  5728 00001F61 C3                  <1> 	ret
  5729                              <1> 
  5730                              <1> ;=============================================================================
  5731                              <1> ; menubox_draw_menu ---- draw the menu area
  5732                              <1> ; input:
  5733                              <1> ;	ds:si -> pointer to struc_menu_box
  5734                              <1> ; output:
  5735                              <1> ;	none
  5736                              <1> ;=============================================================================
  5737                              <1> menubox_draw_menu:
  5738 00001F62 60                  <1> 	pusha
  5739 00001F63 8B4C21              <1> 	mov cx, [si + struc_menu_box.menu_area_pos]
  5740 00001F66 8B5423              <1> 	mov dx, [si + struc_menu_box.menu_area_size]
  5741 00001F69 52                  <1> 	push dx
  5742 00001F6A 51                  <1> 	push cx
  5743 00001F6B 034C06              <1> 	add cx, [si + struc_window.win_pos]
  5744 00001F6E 01CA                <1> 	add dx, cx
  5745                              <1> 
  5746 00001F70 81EA0101            <1> 	sub dx, 0x0101
  5747 00001F74 8A7C1D              <1> 	mov bh, [si + struc_menu_box.menu_norm_attr]
  5748 00001F77 E892F9              <1> 	call clear_screen
  5749                              <1> 
  5750 00001F7A 5A                  <1> 	pop dx
  5751 00001F7B 58                  <1> 	pop ax
  5752                              <1> 
  5753 00001F7C 0FB64C28            <1> 	movzx cx, [si + struc_menu_box.first_visible_item]
  5754 00001F80 807C2600            <1> 	cmp byte [si + struc_menu_box.items_num], 0
  5755 00001F84 7439                <1> 	je .end
  5756                              <1> 
  5757 00001F86 89F7                <1> 	mov di, si
  5758                              <1> 
  5759                              <1> .loop_draw_item:
  5760 00001F88 3A4C27              <1> 	cmp cl, [si + struc_menu_box.focus_item]
  5761 00001F8B 7405                <1> 	je .focused
  5762 00001F8D 8B5C1D              <1> 	mov bx, [si + struc_menu_box.menu_norm_attr]
  5763 00001F90 EB03                <1> 	jmp short .draw_item
  5764                              <1> .focused:
  5765 00001F92 8B5C1F              <1> 	mov bx, [si + struc_menu_box.menu_focus_attr]
  5766                              <1> .draw_item:
  5767 00001F95 60                  <1> 	pusha
  5768 00001F96 51                  <1> 	push cx
  5769 00001F97 88C1                <1> 	mov cl, al
  5770 00001F99 B020                <1> 	mov al, ' '
  5771 00001F9B E8F301              <1> 	call window_draw_char
  5772 00001F9E 59                  <1> 	pop cx
  5773 00001F9F FEC2                <1> 	inc dl
  5774 00001FA1 53                  <1> 	push bx
  5775 00001FA2 52                  <1> 	push dx
  5776 00001FA3 57                  <1> 	push di
  5777 00001FA4 FF5429              <1> 	call word [si + struc_menu_box.item_str_proc]
  5778 00001FA7 5F                  <1> 	pop di
  5779 00001FA8 5A                  <1> 	pop dx
  5780 00001FA9 5B                  <1> 	pop bx
  5781 00001FAA E8F201              <1> 	call window_draw_string
  5782 00001FAD 61                  <1> 	popa
  5783 00001FAE FEC6                <1> 	inc dh
  5784 00001FB0 FEC1                <1> 	inc cl
  5785 00001FB2 FECC                <1> 	dec ah
  5786 00001FB4 3A4C26              <1> 	cmp cl, [si + struc_menu_box.items_num]
  5787 00001FB7 7306                <1> 	jae .end
  5788 00001FB9 08E4                <1> 	or ah, ah
  5789 00001FBB 7402                <1> 	jz .end
  5790 00001FBD EBC9                <1> 	jmp short .loop_draw_item
  5791                              <1> .end:
  5792 00001FBF 61                  <1> 	popa
  5793 00001FC0 C3                  <1> 	ret
  5794                              <1> 
  5795                              <1> ;=============================================================================
  5796                              <1> ; menubox_draw_header ---- draw the menu header
  5797                              <1> ; input:
  5798                              <1> ;	ds:si -> pointer to struc_menu_box
  5799                              <1> ; output:
  5800                              <1> ;	none
  5801                              <1> ;=============================================================================
  5802                              <1> menubox_draw_header:
  5803 00001FC1 60                  <1> 	pusha
  5804 00001FC2 8B5C1C              <1> 	mov bx, [si + struc_menu_box.menu_header_attr]
  5805 00001FC5 8B5421              <1> 	mov dx, [si + struc_menu_box.menu_area_pos]
  5806 00001FC8 FECE                <1> 	dec dh
  5807 00001FCA 0FB64C23            <1> 	movzx cx, byte [si + struc_menu_box.menu_area_size]
  5808 00001FCE B020                <1> 	mov al, ' '
  5809 00001FD0 F60410              <1> 	test byte [si], MENUFLAG_SCROLLBAR
  5810 00001FD3 7402                <1> 	jz .no_scrollbar
  5811 00001FD5 FEC1                <1> 	inc cl
  5812                              <1> .no_scrollbar:
  5813 00001FD7 E8B701              <1> 	call window_draw_char
  5814 00001FDA 89F7                <1> 	mov di, si
  5815 00001FDC 8B741A              <1> 	mov si, [si + struc_menu_box.menu_header]
  5816 00001FDF 8B34                <1> 	mov si, [si]
  5817 00001FE1 FEC2                <1> 	inc dl
  5818 00001FE3 E8B901              <1> 	call window_draw_string
  5819 00001FE6 61                  <1> 	popa
  5820 00001FE7 C3                  <1> 	ret
  5821                              <1> 
  5822                              <1> ;=============================================================================
  5823                              <1> ; menubox_do_focus ---- do the focused menu item, get the pointer of item action
  5824                              <1> ;                    from action_table, then call window_do_action to do it.
  5825                              <1> ; input:
  5826                              <1> ;	ds:si -> pointer to struc_menu_box
  5827                              <1> ; output:
  5828                              <1> ;	none
  5829                              <1> ;=============================================================================
  5830                              <1> menubox_do_focus:
  5831 00001FE8 8B5C12              <1> 	mov bx, [si + struc_window.act_table]
  5832 00001FEB B005                <1> 	mov al, SIZE_OF_STRUC_ACTION
  5833 00001FED 8A4C27              <1> 	mov cl, [si + struc_menu_box.focus_item]
  5834 00001FF0 F6E1                <1> 	mul cl
  5835 00001FF2 01C3                <1> 	add bx, ax
  5836 00001FF4 8B4701              <1> 	mov ax, [bx + struc_action.keycode]
  5837 00001FF7 E80004              <1> 	call window_do_action
  5838 00001FFA C3                  <1> 	ret
  5839                              <1> 	
  5840                              <1> 
  5841                              <1> ;=============================================================================
  5842                              <1> ; menubox_adjust_visible_boundary
  5843                              <1> ;input:
  5844                              <1> ;	ds:si -> pointer to struc_menu_box
  5845                              <1> ;=============================================================================
  5846                              <1> menubox_adjust_visible_boundary:
  5847 00001FFB 8B4427              <1> 	mov ax, [si + struc_menu_box.focus_item] ; al = focus_item, ah = first_visible_item
  5848                              <1> 
  5849                              <1> .check_upper:
  5850 00001FFE 38E0                <1> 	cmp al, ah
  5851 00002000 7303                <1> 	jae .check_bottom
  5852 00002002 884428              <1> 	mov [si + struc_menu_box.first_visible_item], al
  5853                              <1> .check_bottom:
  5854 00002005 026424              <1> 	add ah, [si + struc_menu_box.menu_area_size + 1]
  5855 00002008 38E0                <1> 	cmp al, ah
  5856 0000200A 7207                <1> 	jb .end
  5857 0000200C 28E0                <1> 	sub al, ah
  5858 0000200E FEC0                <1> 	inc al
  5859 00002010 004428              <1> 	add [si + struc_menu_box.first_visible_item], al
  5860                              <1> .end:	
  5861 00002013 C3                  <1> 	ret
  5862                              <1> 
  5863                              <1> ;=============================================================================
  5864                              <1> ; menubox_focus_up ---- move the focus bar up one line
  5865                              <1> ; input:
  5866                              <1> ;	ds:si -> pointer to struc_menu_box
  5867                              <1> ; output:
  5868                              <1> ;	none
  5869                              <1> ;=============================================================================
  5870                              <1> menubox_focus_up:
  5871 00002014 8B4426              <1> 	mov ax, [si + struc_menu_box.items_num]	;al = items_num, ah = focus_item
  5872 00002017 08E4                <1> 	or ah, ah
  5873 00002019 7502                <1> 	jnz .up
  5874 0000201B 88C4                <1> 	mov ah, al
  5875                              <1> .up:
  5876 0000201D FECC                <1> 	dec ah
  5877 0000201F 886427              <1> 	mov [si + struc_menu_box.focus_item], ah
  5878 00002022 E8D6FF              <1> 	call menubox_adjust_visible_boundary
  5879 00002025 C3                  <1> 	ret
  5880                              <1> 
  5881                              <1> ;=============================================================================
  5882                              <1> ; menu_focus_pageup ---- move the focus bar up one page
  5883                              <1> ; input:
  5884                              <1> ;	ds:si -> pointer to struc_menu_box
  5885                              <1> ; output:
  5886                              <1> ;	none
  5887                              <1> ;=============================================================================
  5888                              <1> menubox_focus_pageup:
  5889 00002026 8A4427              <1> 	mov al, [si + struc_menu_box.focus_item]
  5890 00002029 8A4C24              <1> 	mov cl, byte [si + struc_menu_box.menu_area_size+1]
  5891 0000202C FEC9                <1> 	dec cl
  5892 0000202E 38C1                <1> 	cmp cl, al
  5893 00002030 7206                <1> 	jb .loop_up
  5894                              <1> 
  5895 00002032 88C1                <1> 	mov cl, al
  5896 00002034 08C9                <1> 	or cl, cl
  5897 00002036 7407                <1> 	jz .end
  5898                              <1> 
  5899                              <1> .loop_up:
  5900 00002038 30ED                <1> 	xor ch, ch
  5901 0000203A E8D7FF              <1> 	call menubox_focus_up
  5902 0000203D E2F9                <1> 	loop .loop_up
  5903                              <1> .end:
  5904 0000203F C3                  <1> 	ret
  5905                              <1> 
  5906                              <1> ;=============================================================================
  5907                              <1> ; menu_focus_down ---- move the focus bar down one line
  5908                              <1> ; input:
  5909                              <1> ;	ds:si -> pointer to struc_menu_box
  5910                              <1> ; output:
  5911                              <1> ;	none
  5912                              <1> ;=============================================================================
  5913                              <1> menubox_focus_down:
  5914 00002040 8B4426              <1> 	mov ax, [si + struc_menu_box.items_num]	;al = items_num, ah = focus_item
  5915 00002043 FEC4                <1> 	inc ah
  5916 00002045 38C4                <1> 	cmp ah, al
  5917 00002047 7202                <1> 	jb .down
  5918 00002049 30E4                <1> 	xor ah, ah
  5919                              <1> .down:
  5920 0000204B 886427              <1> 	mov [si + struc_menu_box.focus_item], ah
  5921 0000204E E8AAFF              <1> 	call menubox_adjust_visible_boundary
  5922 00002051 C3                  <1> 	ret
  5923                              <1> 
  5924                              <1> ;=============================================================================
  5925                              <1> ; menu_focus_pagedown ---- move the focus bar down one page
  5926                              <1> ; input:
  5927                              <1> ;	ds:si -> pointer to struc_menu_box
  5928                              <1> ; output:
  5929                              <1> ;	none
  5930                              <1> ;=============================================================================
  5931                              <1> menubox_focus_pagedown:
  5932 00002052 8B4426              <1> 	mov ax, [si + struc_menu_box.items_num]
  5933 00002055 08C0                <1> 	or al, al
  5934 00002057 741A                <1> 	jz .end
  5935                              <1> 
  5936 00002059 28E0                <1> 	sub al, ah
  5937 0000205B FEC8                <1> 	dec al
  5938                              <1> 
  5939 0000205D 8A4C24              <1> 	mov cl, byte [si + struc_menu_box.menu_area_size+1]
  5940 00002060 FEC9                <1> 	dec cl
  5941                              <1> 
  5942 00002062 38C1                <1> 	cmp cl, al
  5943 00002064 7206                <1> 	jb .loop_down
  5944 00002066 88C1                <1> 	mov cl, al
  5945 00002068 08C9                <1> 	or cl, cl
  5946 0000206A 7407                <1> 	jz .end
  5947                              <1> 
  5948                              <1> .loop_down:
  5949 0000206C 30ED                <1> 	xor ch, ch
  5950 0000206E E8CFFF              <1> 	call menubox_focus_down
  5951 00002071 E2F9                <1> 	loop .loop_down
  5952                              <1> .end:
  5953 00002073 C3                  <1> 	ret
  5954                              <1> 
  5955                              <1> ;=============================================================================
  5956                              <1> ;menubox_default_event_handle
  5957                              <1> ;=============================================================================
  5958                              <1> menubox_default_event_handle:
  5959 00002074 60                  <1> 	pusha
  5960 00002075 B90A00              <1> 	mov cx, MENUBOX_DEF_ACTION_NUM
  5961 00002078 BB[E725]            <1> 	mov bx, menubox_def_action_table
  5962 0000207B E84603              <1> 	call window_generic_event_handle
  5963 0000207E 7303                <1> 	jnc .end
  5964 00002080 E81B03              <1> 	call window_default_event_handle
  5965                              <1> .end:
  5966 00002083 61                  <1> 	popa
  5967 00002084 C3                  <1> 	ret
  5968                              <1> ;=============================================================================
  5969                              <1> 
  5970                              <1> ;=============================================================================
  5971                              <1> ; listbox_prepare ---- prepare a list box
  5972                              <1> ; input:
  5973                              <1> ;	cl = number of items
  5974                              <1> ;	ch = height of list box
  5975                              <1> ;	ds:bx -> 2nd level pointer to title
  5976                              <1> ;	ds:dx -> 2nd level pointer to header
  5977                              <1> ;	ds:si -> items string proc
  5978                              <1> ;	ds:di -> struc_menu_box
  5979                              <1> ;=============================================================================
  5980                              <1> listbox_prepare:
  5981 00002085 60                  <1> 	pusha
  5982 00002086 51                  <1> 	push cx
  5983 00002087 B92B00              <1> 	mov cx, SIZE_OF_STRUC_MENU_BOX
  5984 0000208A E8AC09              <1> 	call clear_memory
  5985 0000208D 59                  <1> 	pop cx
  5986                              <1> 
  5987 0000208E C60516              <1> 	mov byte [di], WINFLAG_FRAMED | WINFLAG_MODAL | MENUFLAG_SCROLLBAR
  5988 00002091 895D02              <1> 	mov [di + struc_window.title], bx
  5989 00002094 89551A              <1> 	mov [di + struc_menu_box.menu_header], dx
  5990 00002097 897529              <1> 	mov [di + struc_menu_box.item_str_proc], si
  5991                              <1> 
  5992 0000209A BE[DD44]            <1> 	mov si, color.list_box
  5993 0000209D FC                  <1> 	cld
  5994 0000209E AD                  <1> 	lodsw
  5995 0000209F 894504              <1> 	mov word [di + struc_window.win_attr], ax
  5996 000020A2 AC                  <1> 	lodsb
  5997 000020A3 88451C              <1> 	mov byte [di + struc_menu_box.menu_header_attr], al
  5998 000020A6 AD                  <1> 	lodsw
  5999 000020A7 89451D              <1> 	mov word [di + struc_menu_box.menu_norm_attr], ax
  6000 000020AA AD                  <1> 	lodsw
  6001 000020AB 89451F              <1> 	mov word [di + struc_menu_box.menu_focus_attr], ax
  6002 000020AE AC                  <1> 	lodsb
  6003 000020AF 884525              <1> 	mov byte [di + struc_menu_box.scrollbar_attr], al
  6004                              <1> 
  6005 000020B2 884D26              <1> 	mov [di + struc_menu_box.items_num], cl
  6006 000020B5 886D09              <1> 	mov [di + struc_window.win_size + 1], ch
  6007 000020B8 C745100300          <1> 	mov word [di + struc_window.act_num], LISTBOX_ACTION_NUM
  6008 000020BD C74512[D825]        <1> 	mov word [di + struc_window.act_table], listbox_action_table
  6009 000020C2 C74514[7420]        <1> 	mov word [di + struc_window.default_event_handle], menubox_default_event_handle
  6010 000020C7 C74516[AA23]        <1> 	mov word [di + struc_window.event_handle], window_event_handle
  6011 000020CC C74518[371F]        <1> 	mov word [di + struc_window.draw_body_proc], menubox_draw_body_proc
  6012                              <1> 
  6013 000020D1 89FE                <1> 	mov si, di
  6014 000020D3 E8C1FD              <1> 	call menubox_adjust_geometry
  6015 000020D6 E8B002              <1> 	call window_center_window
  6016 000020D9 61                  <1> 	popa
  6017 000020DA C3                  <1> 	ret
  6018                              <1> 	
  6019                              <1> ;=============================================================================
  6020                              <1> ; list_box ---- run a list box
  6021                              <1> ; input:
  6022                              <1> ;	cl = number of items
  6023                              <1> ;	ch = height of list box
  6024                              <1> ;	ds:bx -> 2nd level pointer to title
  6025                              <1> ;	ds:dx -> 2nd level pointer to header
  6026                              <1> ;	ds:si -> items string proc
  6027                              <1> ; output:
  6028                              <1> ;	cl = selected item, 0xff means canceled
  6029                              <1> ;	cf = 0 success, cf = 1 canceled
  6030                              <1> ;=============================================================================
  6031                              <1> list_box:
  6032 000020DB 60                  <1> 	pusha
  6033 000020DC BF[4165]            <1> 	mov di, ui_tmp.tmp_menubox
  6034 000020DF E8A3FF              <1> 	call listbox_prepare
  6035 000020E2 89FE                <1> 	mov si, di
  6036 000020E4 E8D901              <1> 	call window_run
  6037 000020E7 61                  <1> 	popa
  6038 000020E8 8A0E[6865]          <1> 	mov cl, [ui_tmp.tmp_menubox + struc_menu_box.focus_item]
  6039 000020EC 80F9FF              <1> 	cmp cl, 0xFF
  6040 000020EF 7402                <1> 	je .cancel
  6041 000020F1 F8                  <1> 	clc
  6042 000020F2 C3                  <1> 	ret
  6043                              <1> .cancel:
  6044 000020F3 F9                  <1> 	stc
  6045 000020F4 C3                  <1> 	ret
  6046                              <1> 
  6047                              <1> ;=============================================================================
  6048                              <1> ; listbox_cancel
  6049                              <1> ;=============================================================================
  6050                              <1> listbox_cancel:
  6051 000020F5 C64427FF            <1> 	mov byte [si + struc_menu_box.focus_item], 0xFF
  6052 000020F9 C3                  <1> 	ret
  6053                              <1> ;=============================================================================
  6054                              <1> 
  6055                              <1> 
  6056                              <1> 
  6057                              <1> ;=============================================================================
  6058                              <1> ;<<<<<<<<<<<<<<<<<<<<<<<<<< Window System functions >>>>>>>>>>>>>>>>>>>>>>>>>>
  6059                              <1> ;=============================================================================
  6060                              <1> 
  6061                              <1> ;=============================================================================
  6062                              <1> ; window_draw_all ---- draw all windows
  6063                              <1> ; input:
  6064                              <1> ;	none
  6065                              <1> ; output:
  6066                              <1> ;	none
  6067                              <1> ;=============================================================================
  6068                              <1> window_draw_all:
  6069 000020FA 60                  <1> 	pusha
  6070 000020FB 8B36[DC64]          <1> 	mov si, [ui_tmp.root_win]
  6071 000020FF 09F6                <1> 	or si, si
  6072 00002101 7409                <1> 	jz .end
  6073 00002103 E899FA              <1> 	call lock_screen
  6074 00002106 E82600              <1> 	call window_draw_window
  6075 00002109 E8B9FA              <1> 	call unlock_screen
  6076                              <1> .end:
  6077 0000210C 61                  <1> 	popa
  6078 0000210D C3                  <1> 	ret
  6079                              <1> 
  6080                              <1> ;=============================================================================
  6081                              <1> ; window_draw_body ---- draw the window body
  6082                              <1> ; input:
  6083                              <1> ;	ds:si -> pointer to struc_window
  6084                              <1> ; output:
  6085                              <1> ;	none
  6086                              <1> ;=============================================================================
  6087                              <1> window_draw_body:
  6088 0000210E 60                  <1> 	pusha
  6089 0000210F 09F6                <1> 	or si, si
  6090 00002111 741A                <1> 	jz .no_win
  6091                              <1> 
  6092 00002113 F60401              <1> 	test byte [si], WINFLAG_OPEN
  6093 00002116 7415                <1> 	jz .no_win
  6094                              <1> 
  6095 00002118 8B5C18              <1> 	mov bx, [si + struc_window.draw_body_proc]
  6096 0000211B 09DB                <1> 	or bx, bx
  6097 0000211D 740E                <1> 	jz .no_win
  6098                              <1> 
  6099 0000211F 56                  <1> 	push si
  6100 00002120 FFD3                <1> 	call bx
  6101 00002122 5E                  <1> 	pop si
  6102                              <1> 
  6103 00002123 8B740C              <1> 	mov si, [si + struc_window.next_win]
  6104 00002126 09F6                <1> 	or si, si
  6105 00002128 7403                <1> 	jz .no_win
  6106 0000212A E80200              <1> 	call window_draw_window		; draw top windows.
  6107                              <1> 
  6108                              <1> .no_win:
  6109 0000212D 61                  <1> 	popa
  6110 0000212E C3                  <1> 	ret
  6111                              <1> ;=============================================================================
  6112                              <1> ; window_draw_window ---- draw the window and window body
  6113                              <1> ; input:
  6114                              <1> ;	ds:si -> pointer to struc_window
  6115                              <1> ; output:
  6116                              <1> ;	none
  6117                              <1> ;=============================================================================
  6118                              <1> window_draw_window:
  6119 0000212F 60                  <1> 	pusha
  6120                              <1> 
  6121 00002130 E8D9F9              <1> 	call hide_cursor
  6122                              <1> 
  6123 00002133 09F6                <1> 	or si, si
  6124 00002135 7422                <1> 	jz .no_next_win
  6125                              <1> 
  6126 00002137 F60401              <1> 	test byte [si], WINFLAG_OPEN
  6127 0000213A 7413                <1> 	jz .no_body
  6128 0000213C F60404              <1> 	test byte [si], WINFLAG_FRAMED
  6129 0000213F 7403                <1> 	jz .no_frame
  6130 00002141 E81700              <1> 	call window_draw_frame
  6131                              <1> .no_frame:
  6132 00002144 8B5C18              <1> 	mov bx, [si + struc_window.draw_body_proc]
  6133 00002147 09DB                <1> 	or bx, bx
  6134 00002149 7404                <1> 	jz .no_body
  6135 0000214B 56                  <1>         push si
  6136 0000214C FFD3                <1> 	call bx
  6137 0000214E 5E                  <1>         pop si
  6138                              <1> .no_body:
  6139 0000214F 8B740C              <1> 	mov si, [si + struc_window.next_win]
  6140 00002152 09F6                <1> 	or si, si
  6141 00002154 7403                <1> 	jz .no_next_win
  6142 00002156 E8D6FF              <1> 	call window_draw_window		; draw top windows.
  6143                              <1> 
  6144                              <1> .no_next_win:
  6145 00002159 61                  <1> 	popa
  6146 0000215A C3                  <1> 	ret
  6147                              <1> 
  6148                              <1> ;=============================================================================
  6149                              <1> ; window_draw_frame ---- draw the window frame and clear the window body
  6150                              <1> ; input:
  6151                              <1> ;	ds:si -> pointer to struc_window
  6152                              <1> ; output:
  6153                              <1> ;	none
  6154                              <1> ;=============================================================================
  6155                              <1> window_draw_frame:
  6156 0000215B 60                  <1> 	pusha
  6157 0000215C 8B4C06              <1> 	mov cx, [si + struc_window.win_pos]	; window position
  6158 0000215F 8B5408              <1> 	mov dx, [si + struc_window.win_size]	;
  6159 00002162 01CA                <1> 	add dx, cx				; calculate window bottom
  6160 00002164 81EA0101            <1> 	sub dx, 0x0101				; right corner.
  6161                              <1> 
  6162 00002168 8B5C04              <1> 	mov bx, [si + struc_window.win_attr]	; window attribute
  6163                              <1> 
  6164 0000216B 3B36[DA64]          <1> 	cmp si, [ui_tmp.focus_win]
  6165 0000216F 7404                <1> 	je .focused
  6166                              <1> 
  6167 00002171 8A3E[CC44]          <1> 	mov bh, [color.win_title_inactive]	; use another title attr for 
  6168                              <1> 						; inactive window.
  6169                              <1> .focused:
  6170 00002175 8B7402              <1> 	mov si, [si + struc_window.title]	; get window title pointer
  6171 00002178 09F6                <1> 	or si, si
  6172 0000217A 7402                <1> 	jz .no_title
  6173 0000217C 8B34                <1> 	mov si, [si]
  6174                              <1> .no_title:
  6175 0000217E E8D3F7              <1> 	call draw_window
  6176 00002181 61                  <1> 	popa
  6177 00002182 C3                  <1> 	ret
  6178                              <1> 
  6179                              <1> ;=============================================================================
  6180                              <1> ; window_set_cursor
  6181                              <1> ; input:
  6182                              <1> ;	dx = cursor position
  6183                              <1> ;	ds:si -> window
  6184                              <1> ; output:
  6185                              <1> ;	none
  6186                              <1> ;=============================================================================
  6187                              <1> window_set_cursor:
  6188 00002183 52                  <1> 	push dx
  6189 00002184 F60401              <1> 	test byte [si], WINFLAG_OPEN
  6190 00002187 7406                <1> 	jz .no_cursor
  6191                              <1> 
  6192 00002189 035406              <1> 	add dx, [si + struc_window.win_pos]
  6193 0000218C E872F9              <1> 	call set_cursor
  6194                              <1> 
  6195                              <1> .no_cursor:
  6196 0000218F 5A                  <1> 	pop dx
  6197 00002190 C3                  <1> 	ret
  6198                              <1> 
  6199                              <1> ;=============================================================================
  6200                              <1> ; window_draw_char ---- Draw chars at special position in a window
  6201                              <1> ;input:
  6202                              <1> ;      bl = high 4 bit Background color and low 4 bit Foreground color
  6203                              <1> ;      dh = start row
  6204                              <1> ;      dl = start column
  6205                              <1> ;      al = the char to be displayed
  6206                              <1> ;      cx = repeat times
  6207                              <1> ;      ds:si -> the window
  6208                              <1> ;output:
  6209                              <1> ;      none
  6210                              <1> ;=============================================================================
  6211                              <1> window_draw_char:
  6212 00002191 52                  <1> 	push dx
  6213 00002192 F60401              <1> 	test byte [si], WINFLAG_OPEN
  6214 00002195 7406                <1> 	jz .not_draw
  6215                              <1> 
  6216 00002197 035406              <1> 	add dx, [si + struc_window.win_pos]
  6217 0000219A E851F7              <1> 	call draw_char
  6218                              <1> 
  6219                              <1> .not_draw:
  6220 0000219D 5A                  <1> 	pop dx
  6221 0000219E C3                  <1> 	ret
  6222                              <1> 
  6223                              <1> ;=============================================================================
  6224                              <1> ;window_draw_string ---- Draw a zero ending string in a window 
  6225                              <1> ;                    at special position
  6226                              <1> ;input:
  6227                              <1> ;      bl = attribute for normal characters
  6228                              <1> ;           high 4 bit Background color and low 4 bit Foreground color
  6229                              <1> ;      bh = attribute for hightlight characters
  6230                              <1> ;      dh = start row
  6231                              <1> ;      dl = start column
  6232                              <1> ;      ds:si -> the string to be displayed
  6233                              <1> ;      ds:di -> the window
  6234                              <1> ;output:
  6235                              <1> ;      none
  6236                              <1> ;=============================================================================
  6237                              <1> window_draw_string:
  6238 0000219F 60                  <1> 	pusha
  6239 000021A0 F60501              <1> 	test byte [di], WINFLAG_OPEN
  6240 000021A3 7406                <1> 	jz .not_draw
  6241                              <1> 
  6242 000021A5 035506              <1> 	add dx, [di + struc_window.win_pos]
  6243 000021A8 E81CF7              <1> 	call draw_string
  6244                              <1> .not_draw:
  6245 000021AB 61                  <1> 	popa
  6246 000021AC C3                  <1> 	ret
  6247                              <1> 
  6248                              <1> ;=============================================================================
  6249                              <1> ; window_draw_scrollbar ---- draw a scroll bar in a window
  6250                              <1> ; input:
  6251                              <1> ;	ds:si -> pointer to struc_window
  6252                              <1> ;	al    -> total amount
  6253                              <1> ;	ah    -> current value
  6254                              <1> ;	bl    -> attribute 
  6255                              <1> ;	ch    -> row of top of the scroll bar (relative to window position)
  6256                              <1> ;	cl    -> col of top of the scroll bar (relative to window position)
  6257                              <1> ;	dh    -> height of the scroll bar ( vertical bar, dl = 0 )
  6258                              <1> ;	dl    -> length of the scroll bar ( horizontal bar, dh = 0 )
  6259                              <1> ; output:
  6260                              <1> ;	none
  6261                              <1> ;=============================================================================
  6262                              <1> window_draw_scrollbar:
  6263 000021AD 60                  <1> 	pusha
  6264                              <1> 
  6265                              <1> ; ================== do some initialization. ==================
  6266 000021AE 51                  <1> 	push cx
  6267 000021AF 31C9                <1> 	xor cx, cx
  6268 000021B1 880E[4F22]          <1> 	mov [.bar_type], cl
  6269 000021B5 FEC1                <1> 	inc cl
  6270                              <1> 
  6271 000021B7 08F6                <1> 	or dh, dh
  6272 000021B9 7406                <1> 	jz .horiz1
  6273 000021BB 880E[4F22]          <1> 	mov [.bar_type], cl
  6274 000021BF 86D6                <1> 	xchg dl, dh
  6275                              <1> .horiz1:
  6276                              <1> 
  6277 000021C1 8816[5022]          <1> 	mov [.bar_length], dl
  6278 000021C5 5A                  <1> 	pop dx
  6279                              <1> 
  6280 000021C6 50                  <1> 	push ax
  6281 000021C7 52                  <1> 	push dx
  6282                              <1> 
  6283                              <1> ; ==================== draw blank bar =================
  6284 000021C8 8A26[5022]          <1> 	mov ah, [.bar_length]
  6285 000021CC B020                <1> 	mov al, ' '
  6286                              <1> 
  6287                              <1> .loop_draw_blank:
  6288 000021CE E8C0FF              <1> 	call window_draw_char
  6289 000021D1 FECC                <1> 	dec ah
  6290                              <1> 
  6291 000021D3 803E[4F22]00        <1> 	cmp byte [.bar_type], 0
  6292 000021D8 7405                <1> 	jz .horiz2
  6293 000021DA FEC6                <1> 	inc dh
  6294 000021DC E90200              <1> 	jmp near .cont_draw_blank
  6295                              <1> .horiz2:
  6296 000021DF FEC2                <1> 	inc dl
  6297                              <1> 
  6298                              <1> .cont_draw_blank:
  6299 000021E1 08E4                <1> 	or ah, ah
  6300 000021E3 75E9                <1> 	jnz .loop_draw_blank
  6301                              <1> 
  6302 000021E5 803E[4F22]00        <1> 	cmp byte [.bar_type], 0
  6303 000021EA 7406                <1> 	jz .horiz3
  6304 000021EC B81E1F              <1> 	mov ax, 0x1f1e
  6305 000021EF E90300              <1> 	jmp near .draw_arrow
  6306                              <1> .horiz3:
  6307 000021F2 B83C3E              <1> 	mov ax, '<>'
  6308                              <1> 
  6309                              <1> .draw_arrow:
  6310 000021F5 5A                  <1> 	pop dx
  6311 000021F6 52                  <1> 	push dx
  6312                              <1> 
  6313 000021F7 E897FF              <1> 	call window_draw_char
  6314 000021FA 86C4                <1> 	xchg al, ah
  6315                              <1> 
  6316 000021FC 803E[4F22]00        <1> 	cmp byte [.bar_type], 0
  6317 00002201 7409                <1> 	jz .horiz4
  6318 00002203 0236[5022]          <1> 	add dh, [.bar_length]
  6319 00002207 FECE                <1> 	dec dh
  6320 00002209 E90600              <1> 	jmp near .draw_end_arrow
  6321                              <1> .horiz4:
  6322 0000220C 0216[5022]          <1> 	add dl, [.bar_length]
  6323 00002210 FECA                <1> 	dec dl
  6324                              <1> .draw_end_arrow:
  6325                              <1> 
  6326 00002212 E87CFF              <1> 	call window_draw_char
  6327 00002215 5A                  <1> 	pop dx
  6328                              <1> 
  6329                              <1> ; ================= draw scroll block ===============
  6330 00002216 59                  <1> 	pop cx
  6331 00002217 380E[5022]          <1> 	cmp [.bar_length], cl
  6332 0000221B 7330                <1> 	jae .no_cursor
  6333 0000221D 803E[5022]03        <1> 	cmp byte [.bar_length], 3
  6334 00002222 7229                <1> 	jb .no_cursor
  6335                              <1> 
  6336 00002224 0FB6C5              <1> 	movzx ax, ch			; block position =
  6337 00002227 8A2E[5022]          <1> 	mov ch, [.bar_length]		; cur value * bar length / value max
  6338 0000222B 80ED02              <1> 	sub ch, 2			; 
  6339 0000222E F6E5                <1> 	mul ch				;
  6340 00002230 F6F1                <1> 	div cl				;
  6341                              <1> 
  6342 00002232 803E[4F22]00        <1> 	cmp byte [.bar_type], 0
  6343 00002237 7407                <1> 	jz .horiz5
  6344 00002239 00C6                <1> 	add dh, al
  6345 0000223B FEC6                <1> 	inc dh
  6346 0000223D E90400              <1> 	jmp near .draw_scroll_block
  6347                              <1> .horiz5:
  6348 00002240 00C2                <1> 	add dl, al
  6349 00002242 FEC2                <1> 	inc dl
  6350                              <1> 
  6351                              <1> .draw_scroll_block:
  6352 00002244 B04F                <1> 	mov al, 'O'
  6353 00002246 31C9                <1> 	xor cx, cx
  6354 00002248 FEC1                <1> 	inc cl
  6355 0000224A E844FF              <1> 	call window_draw_char
  6356                              <1> 
  6357                              <1> .no_cursor:
  6358 0000224D 61                  <1> 	popa
  6359 0000224E C3                  <1> 	ret
  6360                              <1> 
  6361 0000224F 00                  <1> .bar_type	db 0		; 1 = vertical, 0 =horizontal
  6362 00002250 00                  <1> .bar_length	db 0
  6363                              <1> 
  6364                              <1> 
  6365                              <1> ;=============================================================================
  6366                              <1> ; window_initialize ---- initialize the window system.
  6367                              <1> ; input:
  6368                              <1> ;	none
  6369                              <1> ; output:
  6370                              <1> ;	none
  6371                              <1> ;=============================================================================
  6372                              <1> window_initialize:
  6373 00002251 60                  <1> 	pusha
  6374 00002252 30C0                <1> 	xor al, al
  6375 00002254 BF[DE64]            <1> 	mov di, ui_tmp.def_root_win
  6376 00002257 B91A00              <1> 	mov cx, SIZE_OF_STRUC_WINDOW
  6377 0000225A E8DC07              <1> 	call clear_memory
  6378 0000225D C60509              <1> 	mov byte [di], WINFLAG_OPEN | WINFLAG_NO_FOCUS
  6379 00002260 C74518[7122]        <1> 	mov word [di + struc_window.draw_body_proc], window_clear_win_area
  6380 00002265 A1[4625]            <1> 	mov ax, [ui_screen_size]
  6381 00002268 894508              <1> 	mov [di + struc_window.win_size], ax
  6382                              <1> 
  6383 0000226B 893E[DC64]          <1> 	mov [ui_tmp.root_win], di
  6384 0000226F 61                  <1> 	popa
  6385 00002270 C3                  <1> 	ret
  6386                              <1> 
  6387                              <1> 
  6388                              <1> ;=============================================================================
  6389                              <1> ; window_clear_win_area:
  6390                              <1> ; input:
  6391                              <1> ;	ds:si -> root win
  6392                              <1> ; output:
  6393                              <1> ;	none
  6394                              <1> ;=============================================================================
  6395                              <1> window_clear_win_area:
  6396 00002271 60                  <1> 	pusha
  6397 00002272 8B4C06              <1> 	mov cx, [si + struc_window.win_pos]
  6398 00002275 8B5408              <1> 	mov dx, [si + struc_window.win_size]
  6399 00002278 01CA                <1> 	add dx, cx
  6400 0000227A 81EA0101            <1> 	sub dx, 0x0101
  6401 0000227E 8A7C04              <1> 	mov bh, [si + struc_window.win_attr]
  6402 00002281 E888F6              <1> 	call clear_screen
  6403 00002284 61                  <1> 	popa
  6404 00002285 C3                  <1> 	ret
  6405                              <1> 
  6406                              <1> ;=============================================================================
  6407                              <1> ; window_execute ---- execute the  window system, no return.
  6408                              <1> ; input:
  6409                              <1> ;	ds:bx -> pointer to root window
  6410                              <1> ;	ds:si -> pointer to current window
  6411                              <1> ; output:
  6412                              <1> ;	none
  6413                              <1> ;=============================================================================
  6414                              <1> window_execute:
  6415 00002286 09DB                <1> 	or bx, bx
  6416 00002288 7503                <1> 	jnz .has_root
  6417 0000228A BB[DE64]            <1> 	mov bx, ui_tmp.def_root_win
  6418                              <1> .has_root:
  6419 0000228D 09F6                <1> 	or si, si
  6420 0000228F 742E                <1> 	jz .end
  6421                              <1> 
  6422 00002291 87F3                <1> 	xchg si, bx
  6423 00002293 E8B001              <1> 	call winlist_setroot
  6424 00002296 E896FE              <1> 	call window_draw_window
  6425 00002299 87F3                <1> 	xchg si, bx
  6426                              <1> 
  6427                              <1> .loop_exec:
  6428 0000229B F60408              <1> 	test byte [si], WINFLAG_NO_FOCUS
  6429 0000229E 7510                <1> 	jnz .find_focusable
  6430                              <1> 
  6431 000022A0 E81D00              <1> 	call window_run
  6432 000022A3 8B36[DA64]          <1> 	mov si, [ui_tmp.focus_win]
  6433 000022A7 09F6                <1> 	or si, si
  6434 000022A9 7414                <1> 	jz .end
  6435                              <1> 
  6436 000022AB E84D02              <1> 	call winlist_findwin
  6437 000022AE 7208                <1> 	jc .reset_focus
  6438                              <1> 
  6439                              <1> .find_focusable:
  6440 000022B0 E85E02              <1> 	call winlist_find_focusable
  6441 000022B3 09F6                <1> 	or si, si
  6442 000022B5 75E4                <1> 	jnz .loop_exec
  6443 000022B7 C3                  <1> 	ret
  6444                              <1> 
  6445                              <1> .reset_focus:
  6446 000022B8 E8FA01              <1> 	call winlist_findtop
  6447 000022BB 89FE                <1> 	mov si, di
  6448 000022BD EBDC                <1> 	jmp short .loop_exec
  6449                              <1> .end:
  6450 000022BF C3                  <1> 	ret
  6451                              <1> 
  6452                              <1> ;=============================================================================
  6453                              <1> ; window_run ---- run a window, open it, and loop get key until the window
  6454                              <1> ;                 is closed (WINFLAG_OPEN is cleared). It passes the key to 
  6455                              <1> ;                 function window_event_handle. If window_event_handle failed
  6456                              <1> ;                 to handle this key, then the key will be passed to its 
  6457                              <1> ;                 parent window.
  6458                              <1> ; input:
  6459                              <1> ;	ds:si -> pointer to struc_window
  6460                              <1> ; output:
  6461                              <1> ;	none
  6462                              <1> ;=============================================================================
  6463                              <1> window_run:
  6464 000022C0 E83802              <1> 	call winlist_findwin
  6465 000022C3 720E                <1> 	jc .run_this_win
  6466                              <1> 
  6467 000022C5 F6440101            <1> 	test byte [si + 1], WINFLAG_HI_RUNNING
  6468 000022C9 7408                <1> 	jz .run_this_win
  6469                              <1> 
  6470 000022CB 8936[DA64]          <1> 	mov [ui_tmp.focus_win], si
  6471 000022CF E8F501              <1> 	call winlist_raise
  6472 000022D2 C3                  <1> 	ret
  6473                              <1> 
  6474                              <1> .run_this_win:
  6475 000022D3 60                  <1> 	pusha
  6476 000022D4 804C0101            <1> 	or byte [si + 1], WINFLAG_HI_RUNNING
  6477                              <1> 
  6478 000022D8 FF36[DA64]          <1> 	push word [ui_tmp.focus_win]
  6479 000022DC E82D00              <1> 	call window_open
  6480                              <1> 
  6481                              <1> .loop_run:	
  6482 000022DF 3936[DA64]          <1> 	cmp [ui_tmp.focus_win], si		; if current win is switched
  6483 000022E3 7520                <1> 	jne .end_run				; just return.
  6484                              <1> 
  6485 000022E5 E8A8F2              <1> 	call get_event
  6486 000022E8 80FCF0              <1> 	cmp ah, EVTCODE_COMMAND
  6487 000022EB 720A                <1> 	jb .keycode
  6488 000022ED F6C404              <1> 	test ah, EVTCODE_BROADCAST
  6489 000022F0 7405                <1> 	jz .keycode
  6490 000022F2 E83002              <1> 	call winlist_broadcast_event
  6491 000022F5 EB03                <1> 	jmp short .cont_run
  6492                              <1> .keycode:
  6493 000022F7 E8E300              <1> 	call window_event_dispatcher
  6494                              <1> .cont_run:
  6495 000022FA F60401              <1> 	test byte [si], WINFLAG_OPEN
  6496 000022FD 75E0                <1> 	jnz .loop_run
  6497                              <1> 
  6498 000022FF 8F06[DA64]          <1> 	pop word [ui_tmp.focus_win]		; if window is closed, restore
  6499 00002303 EB01                <1> 	jmp short .end				; focus_win and return.
  6500                              <1> 
  6501                              <1> .end_run:
  6502 00002305 58                  <1> 	pop ax
  6503                              <1> .end:
  6504 00002306 806401FE            <1> 	and byte [si + 1], ~ WINFLAG_HI_RUNNING
  6505 0000230A 61                  <1> 	popa
  6506 0000230B C3                  <1> 	ret
  6507                              <1> 
  6508                              <1> 
  6509                              <1> ;=============================================================================
  6510                              <1> ; window_open ---- open a window, draw the window and set flag WINFLAG_OPEN, 
  6511                              <1> ;                  and insert it into the windows list.
  6512                              <1> ; input:
  6513                              <1> ;	ds:si -> pointer to struc_window
  6514                              <1> ; output:
  6515                              <1> ;	none
  6516                              <1> ;=============================================================================
  6517                              <1> window_open:
  6518 0000230C 60                  <1> 	pusha
  6519 0000230D E8B701              <1> 	call winlist_raise
  6520 00002310 800C01              <1> 	or byte [si], WINFLAG_OPEN
  6521 00002313 E8B801              <1> 	call winlist_set_focus_win
  6522 00002316 61                  <1> 	popa
  6523 00002317 C3                  <1> 	ret
  6524                              <1> 
  6525                              <1> ;=============================================================================
  6526                              <1> ; window_close ---- close a window, clear flag WINFLAG_OPEN, and remove it
  6527                              <1> ;                   from the windows list.
  6528                              <1> ; input:
  6529                              <1> ;	ds:si -> pointer to struc_window
  6530                              <1> ; output:
  6531                              <1> ;	none
  6532                              <1> ;=============================================================================
  6533                              <1> window_close:
  6534 00002318 60                  <1> 	pusha
  6535 00002319 E86901              <1> 	call winlist_remove
  6536 0000231C 8024FE              <1> 	and byte [si], ~ WINFLAG_OPEN
  6537 0000231F E8D8FD              <1> 	call window_draw_all
  6538 00002322 61                  <1> 	popa
  6539 00002323 C3                  <1> 	ret
  6540                              <1> 
  6541                              <1> ;=============================================================================
  6542                              <1> ; window_move_up ---- move the window up one row
  6543                              <1> ; input:
  6544                              <1> ;	ds:si -> pointer to struc_window
  6545                              <1> ; output:
  6546                              <1> ;	none
  6547                              <1> ;=============================================================================
  6548                              <1> window_move_up:
  6549 00002324 50                  <1> 	push ax
  6550 00002325 8A4407              <1> 	mov al, [si + struc_window.win_pos + 1]
  6551 00002328 08C0                <1> 	or al, al
  6552 0000232A 7405                <1> 	jz .no_move
  6553 0000232C FEC8                <1> 	dec al
  6554 0000232E 884407              <1> 	mov [si + struc_window.win_pos + 1], al
  6555                              <1> .no_move:
  6556 00002331 58                  <1> 	pop ax
  6557 00002332 C3                  <1> 	ret
  6558                              <1> 
  6559                              <1> ;=============================================================================
  6560                              <1> ; window_move_down ---- move the window down one row
  6561                              <1> ; input:
  6562                              <1> ;	ds:si -> pointer to struc_window
  6563                              <1> ; output:
  6564                              <1> ;	none
  6565                              <1> ;=============================================================================
  6566                              <1> window_move_down:
  6567 00002333 50                  <1> 	push ax
  6568 00002334 8A4407              <1> 	mov al, [si + struc_window.win_pos + 1]
  6569 00002337 8A26[4725]          <1> 	mov ah, [ui_screen_height]
  6570 0000233B FECC                <1> 	dec ah
  6571                              <1> 
  6572 0000233D 38E0                <1> 	cmp al, ah
  6573 0000233F 7305                <1> 	jae .no_move
  6574 00002341 FEC0                <1> 	inc al
  6575 00002343 884407              <1> 	mov [si + struc_window.win_pos + 1], al
  6576                              <1> .no_move:
  6577 00002346 58                  <1> 	pop ax
  6578 00002347 C3                  <1> 	ret
  6579                              <1> 
  6580                              <1> 
  6581                              <1> ;=============================================================================
  6582                              <1> ; window_move_left ---- move the window left one column
  6583                              <1> ; input:
  6584                              <1> ;	ds:si -> pointer to struc_window
  6585                              <1> ; output:
  6586                              <1> ;	none
  6587                              <1> ;=============================================================================
  6588                              <1> window_move_left:
  6589 00002348 50                  <1> 	push ax
  6590 00002349 8A4406              <1> 	mov al, [si + struc_window.win_pos]
  6591 0000234C 08C0                <1> 	or al, al
  6592 0000234E 7405                <1> 	jz .no_move
  6593 00002350 FEC8                <1> 	dec al
  6594 00002352 884406              <1> 	mov [si + struc_window.win_pos], al
  6595                              <1> .no_move:
  6596 00002355 58                  <1> 	pop ax
  6597 00002356 C3                  <1> 	ret
  6598                              <1> 
  6599                              <1> 
  6600                              <1> ;=============================================================================
  6601                              <1> ; window_move_right ---- move the window right one column
  6602                              <1> ; input:
  6603                              <1> ;	ds:si -> pointer to struc_window
  6604                              <1> ; output:
  6605                              <1> ;	none
  6606                              <1> ;=============================================================================
  6607                              <1> window_move_right:
  6608 00002357 50                  <1> 	push ax
  6609 00002358 8A4406              <1> 	mov al, [si + struc_window.win_pos]
  6610 0000235B 8A26[4625]          <1> 	mov ah, [ui_screen_width]
  6611 0000235F 2A6408              <1> 	sub ah, [si + struc_window.win_size]
  6612 00002362 80EC02              <1> 	sub ah, 2
  6613                              <1> 
  6614 00002365 38E0                <1> 	cmp al, ah
  6615 00002367 7305                <1> 	jae .no_move
  6616 00002369 FEC0                <1> 	inc al
  6617 0000236B 884406              <1> 	mov [si + struc_window.win_pos], al
  6618                              <1> .no_move:
  6619 0000236E 58                  <1> 	pop ax
  6620 0000236F C3                  <1> 	ret
  6621                              <1> 
  6622                              <1> 
  6623                              <1> ;=============================================================================
  6624                              <1> ; window_switch_window ---- switch to the next window
  6625                              <1> ; input:
  6626                              <1> ;	ds:si -> pointer to current window
  6627                              <1> ; output:
  6628                              <1> ;	none
  6629                              <1> ;=============================================================================
  6630                              <1> window_switch_window:
  6631 00002370 60                  <1> 	pusha
  6632 00002371 F60402              <1> 	test byte [si], WINFLAG_MODAL
  6633 00002374 7511                <1> 	jnz .no_switch
  6634 00002376 E88201              <1> 	call winlist_findwin
  6635 00002379 720C                <1> 	jc .no_switch
  6636 0000237B 8B36[DC64]          <1> 	mov si, [ui_tmp.root_win]
  6637 0000237F 09F6                <1> 	or si, si
  6638 00002381 7404                <1> 	jz .no_switch
  6639                              <1> 
  6640 00002383 8936[DA64]          <1> 	mov [ui_tmp.focus_win], si
  6641                              <1> 
  6642                              <1> .no_switch:
  6643 00002387 61                  <1> 	popa
  6644 00002388 C3                  <1> 	ret
  6645                              <1> 
  6646                              <1> ;=============================================================================
  6647                              <1> ; move a window to center of the screen.
  6648                              <1> ;input:
  6649                              <1> ;	ds:si -> pointer to window
  6650                              <1> ;output:
  6651                              <1> ;	none
  6652                              <1> ;=============================================================================
  6653                              <1> window_center_window:
  6654 00002389 60                  <1> 	pusha
  6655 0000238A 8B5408              <1> 	mov dx, [si + struc_window.win_size]
  6656 0000238D 8B0E[4625]          <1> 	mov cx, [ui_screen_size]                   ; calculate the coordinate
  6657                              <1> 
  6658 00002391 28F5                <1> 	sub ch, dh                              ; of input box.
  6659 00002393 D0ED                <1> 	shr ch, 1                               ; cx = top left pos
  6660 00002395 28D1                <1> 	sub cl, dl                              ; 
  6661 00002397 D0E9                <1> 	shr cl, 1                               ;
  6662                              <1> 
  6663 00002399 894C06              <1> 	mov [si + struc_window.win_pos], cx
  6664 0000239C 61                  <1> 	popa
  6665 0000239D C3                  <1> 	ret
  6666                              <1> 
  6667                              <1> 
  6668                              <1> ;=============================================================================
  6669                              <1> ; window_default_event_handle ---- default event handle for a normal window, it
  6670                              <1> ;                           handles some normal events, such as move window.
  6671                              <1> ; input:
  6672                              <1> ;	ax    -> keycode
  6673                              <1> ;	ds:si -> pointer to struc_window
  6674                              <1> ; output:
  6675                              <1> ;	cf = 0, success
  6676                              <1> ;	cf = 1, fail, no such action
  6677                              <1> ;=============================================================================
  6678                              <1> window_default_event_handle:
  6679 0000239E 60                  <1> 	pusha
  6680 0000239F B90E00              <1> 	mov cx, WINDOW_DEF_ACTION_NUM
  6681 000023A2 BB[4C25]            <1> 	mov bx, window_def_action_table
  6682 000023A5 E81C00              <1> 	call window_generic_event_handle
  6683 000023A8 61                  <1> 	popa
  6684 000023A9 C3                  <1> 	ret
  6685                              <1> 
  6686                              <1> ;=============================================================================
  6687                              <1> ; window_event_handle ----  event handle for a normal window, it finds 
  6688                              <1> ;                           the corresponding action for a key event from
  6689                              <1> ;                           action_table then call window_do_action to run it.
  6690                              <1> ;                           If the event is not in action_table, then
  6691                              <1> ;                           .defkey_handle will be called to handle it.
  6692                              <1> ; input:
  6693                              <1> ;	ax    -> keycode
  6694                              <1> ;	ds:si -> pointer to struc_window
  6695                              <1> ; output:
  6696                              <1> ;	cf = 0, success
  6697                              <1> ;	cf = 1, fail, no such action
  6698                              <1> ;=============================================================================
  6699                              <1> window_event_handle:
  6700 000023AA 60                  <1> 	pusha
  6701 000023AB 8B5C12              <1> 	mov bx, [si + struc_window.act_table]
  6702 000023AE 8B4C10              <1> 	mov cx, [si + struc_window.act_num]
  6703 000023B1 E81000              <1> 	call window_generic_event_handle
  6704 000023B4 730C                <1> 	jnc .success
  6705 000023B6 8B5C14              <1> 	mov bx, [si + struc_window.default_event_handle]
  6706 000023B9 09DB                <1> 	or bx, bx
  6707 000023BB 7404                <1> 	jz .failed
  6708 000023BD FFD3                <1> 	call bx
  6709 000023BF 7301                <1> 	jnc .success
  6710                              <1> .failed:
  6711 000023C1 F9                  <1> 	stc
  6712                              <1> .success:
  6713 000023C2 61                  <1> 	popa
  6714 000023C3 C3                  <1> 	ret
  6715                              <1> 
  6716                              <1> ;=============================================================================
  6717                              <1> ; window_generic_event_handle ---- generic event handle, it find a key from 
  6718                              <1> ;                                  an action list, then run it.
  6719                              <1> ; input:
  6720                              <1> ;	ax    -> keycode
  6721                              <1> ;	ds:si -> pointer to struc_window
  6722                              <1> ;	ds:bx -> action list
  6723                              <1> ;	cx    -> action number
  6724                              <1> ; output:
  6725                              <1> ;	cf = 0, success
  6726                              <1> ;	cf = 1, fail, no such action
  6727                              <1> ;=============================================================================
  6728                              <1> window_generic_event_handle:
  6729 000023C4 09C9                <1> 	or cx, cx
  6730 000023C6 7413                <1> 	jz .no_action
  6731 000023C8 09DB                <1> 	or bx, bx
  6732 000023CA 740F                <1> 	jz .no_action
  6733                              <1> 
  6734                              <1> .loop_find_act:
  6735 000023CC 394701              <1> 	cmp [bx + struc_action.keycode], ax
  6736 000023CF 7505                <1> 	jne .cont_find
  6737 000023D1 E82600              <1> 	call window_do_action
  6738 000023D4 F8                  <1> 	clc
  6739 000023D5 C3                  <1> 	ret
  6740                              <1> 
  6741                              <1> .cont_find:
  6742 000023D6 83C305              <1> 	add bx, SIZE_OF_STRUC_ACTION
  6743 000023D9 E2F1                <1> 	loop .loop_find_act
  6744                              <1> 
  6745                              <1> .no_action:
  6746 000023DB F9                  <1> 	stc
  6747 000023DC C3                  <1> 	ret
  6748                              <1> 
  6749                              <1> ;=============================================================================
  6750                              <1> ; window_event_dispatcher ---- dispatch event to event handle 
  6751                              <1> ; input:
  6752                              <1> ;	ax    -> keycode
  6753                              <1> ;	ds:si -> pointer to struc_window
  6754                              <1> ; output:
  6755                              <1> ;	cf = 0, success
  6756                              <1> ;	cf = 1, fail, no such action
  6757                              <1> ;=============================================================================
  6758                              <1> window_event_dispatcher:
  6759 000023DD 60                  <1> 	pusha
  6760 000023DE 8B5C16              <1> 	mov bx, [si + struc_window.event_handle]
  6761 000023E1 09DB                <1> 	or bx, bx
  6762 000023E3 7406                <1> 	jz .no_event_handle
  6763                              <1> 
  6764 000023E5 56                  <1> 	push si
  6765 000023E6 FFD3                <1> 	call bx
  6766 000023E8 5E                  <1> 	pop si
  6767                              <1> 
  6768 000023E9 730D                <1> 	jnc .action_ok
  6769                              <1> 
  6770                              <1> .no_event_handle:
  6771 000023EB 8B740A              <1> 	mov si, [si + struc_window.parent_win]
  6772 000023EE 09F6                <1> 	or si, si
  6773 000023F0 7405                <1> 	jz .no_parent
  6774 000023F2 E8E8FF              <1> 	call window_event_dispatcher
  6775 000023F5 7301                <1> 	jnc .action_ok
  6776                              <1> 
  6777                              <1> .no_parent:
  6778 000023F7 F9                  <1> 	stc
  6779                              <1> 
  6780                              <1> .action_ok:
  6781 000023F8 61                  <1> 	popa
  6782 000023F9 C3                  <1> 	ret
  6783                              <1> 
  6784                              <1> ;=============================================================================
  6785                              <1> ; window_do_action ---- do a window action
  6786                              <1> ; input:
  6787                              <1> ;	ax    =  event code
  6788                              <1> ;	ds:si -> pointer to struc_window
  6789                              <1> ;	ds:bx -> pointer to struc_action
  6790                              <1> ; output:
  6791                              <1> ;	none
  6792                              <1> ;=============================================================================
  6793                              <1> window_do_action:
  6794 000023FA 60                  <1> 	pusha
  6795                              <1> 
  6796 000023FB 09F6                <1> 	or si, si
  6797 000023FD 7445                <1> 	jz .end
  6798 000023FF 09DB                <1> 	or bx, bx
  6799 00002401 7441                <1> 	jz .end
  6800                              <1> 
  6801 00002403 8A17                <1> 	mov dl, [bx]
  6802                              <1> 
  6803 00002405 F6C2F0              <1> 	test dl, ACTFLAG_AUTHS		; check action flags
  6804 00002408 7409                <1> 	jz .no_auth
  6805                              <1> 
  6806 0000240A 60                  <1> 	pusha
  6807 0000240B 88D0                <1> 	mov al, dl
  6808 0000240D E8CCF1              <1> 	call main_auth_action		; check if the action is ready to do
  6809                              <1> 					; al = auth type
  6810 00002410 61                  <1> 	popa
  6811 00002411 720B                <1> 	jc .no_action
  6812                              <1> 
  6813                              <1> .no_auth:
  6814 00002413 8B5F03              <1> 	mov bx, [bx + struc_action.func]
  6815 00002416 09DB                <1> 	or bx, bx
  6816 00002418 7404                <1> 	jz .no_action
  6817                              <1> 
  6818 0000241A 60                  <1> 	pusha
  6819 0000241B FFD3                <1> 	call bx				; do the action
  6820 0000241D 61                  <1> 	popa
  6821                              <1> 
  6822                              <1> .no_action:
  6823                              <1> 
  6824 0000241E F6C201              <1> 	test dl, ACTFLAG_CLOSE_WIN
  6825 00002421 7405                <1> 	jz .no_close
  6826 00002423 E8F2FE              <1> 	call window_close
  6827 00002426 EB1C                <1> 	jmp short .end
  6828                              <1> .no_close:
  6829 00002428 F6C202              <1> 	test dl, ACTFLAG_REDRAW_BODY
  6830 0000242B 7405                <1> 	jz .no_redraw_body
  6831 0000242D E8DEFC              <1> 	call window_draw_body
  6832 00002430 EB12                <1> 	jmp short .end
  6833                              <1> .no_redraw_body:
  6834 00002432 F6C204              <1> 	test dl, ACTFLAG_REDRAW_WIN
  6835 00002435 7405                <1> 	jz .no_redraw_win
  6836 00002437 E8F5FC              <1> 	call window_draw_window
  6837 0000243A EB08                <1> 	jmp short .end
  6838                              <1> .no_redraw_win:
  6839 0000243C F6C208              <1> 	test dl, ACTFLAG_REDRAW_SCR
  6840 0000243F 7403                <1> 	jz .end
  6841 00002441 E8B6FC              <1> 	call window_draw_all
  6842                              <1> .end:
  6843 00002444 61                  <1> 	popa
  6844 00002445 C3                  <1> 	ret
  6845                              <1> 
  6846                              <1> ;=============================================================================
  6847                              <1> ; winlist_setroot ---- set root window
  6848                              <1> ; input:
  6849                              <1> ;	ds:si -> pointer to root window
  6850                              <1> ; output:
  6851                              <1> ;	none
  6852                              <1> ;=============================================================================
  6853                              <1> winlist_setroot:
  6854 00002446 53                  <1> 	push bx
  6855                              <1> 
  6856 00002447 09F6                <1> 	or si, si
  6857 00002449 741A                <1> 	jz .invalid_root
  6858                              <1> 
  6859 0000244B 8B1E[DC64]          <1> 	mov bx, [ui_tmp.root_win]
  6860 0000244F 09DB                <1> 	or bx, bx
  6861 00002451 7403                <1> 	jz .no_root
  6862 00002453 8B5F0C              <1> 	mov bx, [bx + struc_window.next_win]
  6863                              <1> 
  6864                              <1> .no_root:
  6865 00002456 8936[DC64]          <1> 	mov [ui_tmp.root_win], si
  6866 0000245A 895C0C              <1> 	mov [si + struc_window.next_win], bx
  6867 0000245D 31DB                <1> 	xor bx, bx
  6868 0000245F 895C0E              <1> 	mov [si + struc_window.previous_win], bx
  6869 00002462 895C0A              <1> 	mov [si + struc_window.parent_win], bx
  6870                              <1> 
  6871                              <1> .invalid_root:
  6872 00002465 5B                  <1> 	pop bx
  6873 00002466 C3                  <1> 	ret
  6874                              <1> 
  6875                              <1> ;=============================================================================
  6876                              <1> ; winlist_insert ---- insert a window
  6877                              <1> ; input:
  6878                              <1> ;	ds:si -> pointer to the window
  6879                              <1> ; output:
  6880                              <1> ;	none
  6881                              <1> ;=============================================================================
  6882                              <1> winlist_insert:
  6883 00002467 57                  <1> 	push di
  6884 00002468 09F6                <1> 	or si, si
  6885 0000246A 7417                <1> 	jz .invalid_win
  6886 0000246C E88C00              <1> 	call winlist_findwin
  6887 0000246F 7312                <1> 	jnc .invalid_win
  6888                              <1> 
  6889 00002471 E84100              <1> 	call winlist_findtop
  6890 00002474 09FF                <1> 	or di, di
  6891 00002476 740B                <1> 	jz .invalid_win
  6892                              <1> 
  6893 00002478 89750C              <1> 	mov [di + struc_window.next_win], si
  6894 0000247B 897C0E              <1> 	mov [si + struc_window.previous_win], di
  6895 0000247E 31FF                <1> 	xor di, di
  6896 00002480 897C0C              <1> 	mov [si + struc_window.next_win], di
  6897                              <1> 
  6898                              <1> .invalid_win:
  6899 00002483 5F                  <1> 	pop di
  6900 00002484 C3                  <1> 	ret
  6901                              <1> 
  6902                              <1> ;=============================================================================
  6903                              <1> ; winlist_remove ---- remove a window
  6904                              <1> ; input:
  6905                              <1> ;	ds:si -> pointer to the window
  6906                              <1> ; output:
  6907                              <1> ;	none
  6908                              <1> ;=============================================================================
  6909                              <1> winlist_remove:
  6910 00002485 09F6                <1> 	or si, si
  6911 00002487 742B                <1> 	jz .invalid_win
  6912 00002489 3936[DC64]          <1> 	cmp [ui_tmp.root_win], si
  6913 0000248D 7425                <1> 	je .invalid_win
  6914 0000248F E86900              <1> 	call winlist_findwin
  6915 00002492 7220                <1> 	jc .invalid_win
  6916                              <1> 
  6917 00002494 53                  <1> 	push bx
  6918 00002495 56                  <1> 	push si
  6919 00002496 8B5C0C              <1> 	mov bx, [si + struc_window.next_win]
  6920 00002499 8B740E              <1> 	mov si ,[si + struc_window.previous_win]
  6921 0000249C 09DB                <1> 	or bx, bx
  6922 0000249E 7403                <1> 	jz .no_next
  6923 000024A0 89770E              <1> 	mov [bx + struc_window.previous_win], si
  6924                              <1> .no_next:
  6925 000024A3 09F6                <1> 	or si, si
  6926 000024A5 7403                <1> 	jz .no_previous
  6927 000024A7 895C0C              <1> 	mov [si + struc_window.next_win], bx
  6928                              <1> .no_previous:
  6929 000024AA 5E                  <1> 	pop si
  6930 000024AB 31DB                <1> 	xor bx, bx
  6931 000024AD 895C0C              <1> 	mov [si + struc_window.next_win], bx
  6932 000024B0 895C0E              <1> 	mov [si + struc_window.previous_win], bx
  6933 000024B3 5B                  <1> 	pop bx
  6934                              <1> 
  6935                              <1> .invalid_win:
  6936 000024B4 C3                  <1> 	ret
  6937                              <1> 
  6938                              <1> ;=============================================================================
  6939                              <1> ; winlist_findtop ---- find the top window
  6940                              <1> ; input:
  6941                              <1> ;	none
  6942                              <1> ; output:
  6943                              <1> ;	ds:di -> the top window
  6944                              <1> ;=============================================================================
  6945                              <1> winlist_findtop:
  6946 000024B5 50                  <1> 	push ax
  6947 000024B6 8B3E[DC64]          <1> 	mov di, [ui_tmp.root_win]
  6948                              <1> 
  6949                              <1> .loop_find:
  6950 000024BA 8B450C              <1> 	mov ax, [di + struc_window.next_win]
  6951 000024BD 09C0                <1> 	or ax, ax
  6952 000024BF 7404                <1> 	jz .find_it
  6953 000024C1 89C7                <1> 	mov di, ax
  6954 000024C3 EBF5                <1> 	jmp short .loop_find
  6955                              <1> 
  6956                              <1> .find_it:
  6957 000024C5 58                  <1> 	pop ax
  6958 000024C6 C3                  <1> 	ret
  6959                              <1> 
  6960                              <1> ;=============================================================================
  6961                              <1> ; winlist_raise ---- raise a window to top
  6962                              <1> ; input:
  6963                              <1> ;	ds:si -> the window
  6964                              <1> ; output:
  6965                              <1> ;	none
  6966                              <1> ;=============================================================================
  6967                              <1> winlist_raise:
  6968 000024C7 E8BBFF              <1> 	call winlist_remove
  6969 000024CA E89AFF              <1> 	call winlist_insert
  6970 000024CD C3                  <1> 	ret
  6971                              <1> 
  6972                              <1> ;=============================================================================
  6973                              <1> ; winlist_set_focus_win ---- set the focus window
  6974                              <1> ; input:
  6975                              <1> ;	ds:si -> the window
  6976                              <1> ; output:
  6977                              <1> ;	none
  6978                              <1> ;=============================================================================
  6979                              <1> winlist_set_focus_win:
  6980 000024CE 53                  <1> 	push bx
  6981 000024CF 56                  <1> 	push si
  6982 000024D0 8B36[DA64]          <1> 	mov si, [ui_tmp.focus_win]
  6983 000024D4 89F3                <1> 	mov bx, si
  6984 000024D6 E82200              <1> 	call winlist_findwin
  6985 000024D9 5E                  <1> 	pop si
  6986 000024DA 720A                <1> 	jc .ok
  6987                              <1> 
  6988 000024DC F60402              <1> 	test byte [si], WINFLAG_MODAL
  6989 000024DF 7505                <1> 	jnz .ok
  6990 000024E1 F60702              <1> 	test byte [bx], WINFLAG_MODAL
  6991 000024E4 7509                <1> 	jnz .end
  6992                              <1> 
  6993                              <1> .ok:
  6994 000024E6 E81200              <1> 	call winlist_findwin
  6995 000024E9 7204                <1> 	jc .end
  6996 000024EB 8936[DA64]          <1> 	mov [ui_tmp.focus_win], si
  6997                              <1> .end:
  6998 000024EF 8B36[DA64]          <1> 	mov si, [ui_tmp.focus_win]
  6999 000024F3 E8D1FF              <1> 	call winlist_raise
  7000 000024F6 E801FC              <1> 	call window_draw_all
  7001 000024F9 5B                  <1> 	pop bx
  7002 000024FA C3                  <1> 	ret
  7003                              <1> 
  7004                              <1> ;=============================================================================
  7005                              <1> ; winlist_findwin ---- find a window in winlist
  7006                              <1> ; input:
  7007                              <1> ;	ds:si -> the window
  7008                              <1> ; output:
  7009                              <1> ;	cf = 0  found
  7010                              <1> ;	cf = 1  not found
  7011                              <1> ;=============================================================================
  7012                              <1> winlist_findwin:
  7013 000024FB 53                  <1> 	push bx
  7014 000024FC 8B1E[DC64]          <1> 	mov bx, [ui_tmp.root_win]
  7015                              <1> .loop_find:
  7016 00002500 39F3                <1> 	cmp bx, si
  7017 00002502 740A                <1> 	je .found
  7018 00002504 8B5F0C              <1> 	mov bx, [bx + struc_window.next_win]
  7019 00002507 09DB                <1> 	or bx, bx
  7020 00002509 75F5                <1> 	jnz .loop_find
  7021 0000250B F9                  <1> 	stc
  7022 0000250C 5B                  <1> 	pop bx
  7023 0000250D C3                  <1> 	ret
  7024                              <1> .found:
  7025 0000250E F8                  <1> 	clc
  7026 0000250F 5B                  <1> 	pop bx
  7027 00002510 C3                  <1> 	ret
  7028                              <1> 
  7029                              <1> ;=============================================================================
  7030                              <1> ; winlist_find_focusable ---- find a focusable window
  7031                              <1> ; input:
  7032                              <1> ;	ds:si -> the first win
  7033                              <1> ; output:
  7034                              <1> ;	ds:si -> the focusable win
  7035                              <1> ;=============================================================================
  7036                              <1> winlist_find_focusable:
  7037 00002511 E8E7FF              <1> 	call winlist_findwin
  7038 00002514 720C                <1> 	jc .failed
  7039                              <1> 
  7040                              <1> .loop_find:
  7041 00002516 F60408              <1> 	test byte [si], WINFLAG_NO_FOCUS
  7042 00002519 7409                <1> 	jz .found
  7043 0000251B 8B740C              <1> 	mov si, [si + struc_window.next_win]
  7044 0000251E 09F6                <1> 	or si, si
  7045 00002520 75F4                <1> 	jnz .loop_find
  7046                              <1> .failed:
  7047 00002522 31F6                <1> 	xor si, si
  7048                              <1> .found:
  7049 00002524 C3                  <1> 	ret
  7050                              <1> 
  7051                              <1> 
  7052                              <1> ;=============================================================================
  7053                              <1> ; winlist_broadcast_event ---- broadcast an event to all opened windows
  7054                              <1> ; input:
  7055                              <1> ;	ax = event code
  7056                              <1> ; output:
  7057                              <1> ;	none
  7058                              <1> ;=============================================================================
  7059                              <1> winlist_broadcast_event:
  7060 00002525 60                  <1> 	pusha
  7061 00002526 8B36[DC64]          <1> 	mov si, [ui_tmp.root_win]
  7062                              <1> 
  7063                              <1> .loop_broadcast:
  7064 0000252A E8B0FE              <1> 	call window_event_dispatcher
  7065 0000252D 7307                <1> 	jnc .end
  7066 0000252F 8B740C              <1> 	mov si, [si + struc_window.next_win]
  7067 00002532 09F6                <1> 	or si, si
  7068 00002534 75F4                <1> 	jnz .loop_broadcast
  7069                              <1> .end:
  7070 00002536 61                  <1> 	popa
  7071 00002537 C3                  <1> 	ret
  7072                              <1> 
  7073                              <1> 
  7074                              <1> 
  7075                              <1> 
  7076                              <1> ;=============================================================================
  7077                              <1> ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Private Data Area >>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  7078                              <1> ;=============================================================================
  7079 00002538 006B0159025A038E04- <1> ui_VideoHorizParams dw 0x6B00,0x5901,0x5A02,0x8E03,0x5F04,0x8C05,0x2D13 ;8-wide
  7080 00002541 5F058C132D          <1>
  7081                              <1> 
  7082                              <1> ui_screen_size:
  7083 00002546 5A                  <1> ui_screen_width     db     90
  7084 00002547 19                  <1> ui_screen_height    db     25
  7085                              <1> 
  7086 00002548 00B8                <1> ui_screen_bufseg     dw     SCR_BUF_SEG0
  7087 0000254A 00                  <1> ui_screen_page       db     0
  7088 0000254B 00                  <1> ui_screen_lock       db     0
  7089                              <1> 
  7090                              <1> 
  7091                              <1> window_def_action_table:
  7092 0000254C 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7093 0000254D 008D                <1> 	dw	kbCtrlUp
  7094 0000254F [2423]              <1> 	dw	window_move_up
  7095                              <1> 
  7096 00002551 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7097 00002552 E08D                <1> 	dw	kbEnhCtrlUp
  7098 00002554 [2423]              <1> 	dw	window_move_up
  7099                              <1> 
  7100 00002556 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7101 00002557 E047                <1> 	dw	kbEnhHome
  7102 00002559 [2423]              <1> 	dw	window_move_up
  7103                              <1> 
  7104 0000255B 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7105 0000255C 0091                <1> 	dw	kbCtrlDown
  7106 0000255E [3323]              <1> 	dw	window_move_down
  7107                              <1> 
  7108 00002560 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7109 00002561 E091                <1> 	dw	kbEnhCtrlDown
  7110 00002563 [3323]              <1> 	dw	window_move_down
  7111                              <1> 
  7112 00002565 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7113 00002566 E04F                <1> 	dw	kbEnhEnd
  7114 00002568 [3323]              <1> 	dw	window_move_down
  7115                              <1> 
  7116 0000256A 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7117 0000256B 0073                <1> 	dw	kbCtrlLeft
  7118 0000256D [4823]              <1> 	dw	window_move_left
  7119                              <1> 
  7120 0000256F 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7121 00002570 E073                <1> 	dw	kbEnhCtrlLeft
  7122 00002572 [4823]              <1> 	dw	window_move_left
  7123                              <1> 
  7124 00002574 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7125 00002575 E053                <1> 	dw	kbEnhDel
  7126 00002577 [4823]              <1> 	dw	window_move_left
  7127                              <1> 
  7128 00002579 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7129 0000257A 0074                <1> 	dw	kbCtrlRight
  7130 0000257C [5723]              <1> 	dw	window_move_right
  7131                              <1> 
  7132 0000257E 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7133 0000257F E074                <1> 	dw	kbEnhCtrlRight
  7134 00002581 [5723]              <1> 	dw	window_move_right
  7135                              <1> 
  7136 00002583 08                  <1> 	db	ACTFLAG_REDRAW_SCR
  7137 00002584 E051                <1> 	dw	kbEnhPgDn
  7138 00002586 [5723]              <1> 	dw	window_move_right
  7139                              <1> 
  7140 00002588 00                  <1> 	db	0
  7141 00002589 0094                <1> 	dw	kbCtrlTab
  7142 0000258B [7023]              <1> 	dw	window_switch_window
  7143                              <1> 
  7144 0000258D 00                  <1> 	db	0
  7145 0000258E 00A5                <1> 	dw	kbAltTab
  7146 00002590 [7023]              <1> 	dw	window_switch_window
  7147                              <1> .end_of_table
  7148                              <1> 
  7149                              <1> inputbox_action_table:
  7150 00002592 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7151 00002593 080E                <1> 	dw	kbBack
  7152 00002595 [0C1D]              <1> 	dw	inputbox_backspace
  7153                              <1> 
  7154 00002597 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7155 00002598 0053                <1> 	dw	kbDel
  7156 0000259A [261D]              <1> 	dw	inputbox_delete
  7157                              <1> 
  7158 0000259C 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7159 0000259D E053                <1> 	dw	kbEnhDel
  7160 0000259F [261D]              <1> 	dw	inputbox_delete
  7161                              <1> 
  7162 000025A1 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7163 000025A2 0047                <1> 	dw	kbHome
  7164 000025A4 [5D1D]              <1> 	dw	inputbox_home_key
  7165                              <1> 
  7166 000025A6 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7167 000025A7 E047                <1> 	dw	kbEnhHome
  7168 000025A9 [5D1D]              <1> 	dw	inputbox_home_key
  7169                              <1> 
  7170 000025AB 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7171 000025AC 004F                <1> 	dw	kbEnd
  7172 000025AE [531D]              <1> 	dw	inputbox_end_key
  7173                              <1> 
  7174 000025B0 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7175 000025B1 E04F                <1> 	dw	kbEnhEnd
  7176 000025B3 [531D]              <1> 	dw	inputbox_end_key
  7177                              <1> 
  7178 000025B5 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7179 000025B6 004B                <1> 	dw	kbLeft
  7180 000025B8 [461D]              <1> 	dw	inputbox_left_arrow
  7181                              <1> 
  7182 000025BA 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7183 000025BB E04B                <1> 	dw	kbEnhLeft
  7184 000025BD [461D]              <1> 	dw	inputbox_left_arrow
  7185                              <1> 
  7186 000025BF 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7187 000025C0 004D                <1> 	dw	kbRight
  7188 000025C2 [371D]              <1> 	dw	inputbox_right_arrow
  7189                              <1> 
  7190 000025C4 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7191 000025C5 E04D                <1> 	dw	kbEnhRight
  7192 000025C7 [371D]              <1> 	dw	inputbox_right_arrow
  7193                              <1> 
  7194 000025C9 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7195 000025CA 1B01                <1> 	dw	kbEsc
  7196 000025CC [651D]              <1> 	dw	inputbox_cancel
  7197                              <1> 
  7198 000025CE 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7199 000025CF 0D1C                <1> 	dw	kbEnter
  7200 000025D1 [6D1D]              <1> 	dw	inputbox_enter
  7201                              <1> 
  7202 000025D3 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7203 000025D4 0DE0                <1> 	dw	kbEnhEnter
  7204 000025D6 [6D1D]              <1> 	dw	inputbox_enter
  7205                              <1> 
  7206                              <1> .end_of_table
  7207                              <1> 
  7208                              <1> listbox_action_table:
  7209 000025D8 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7210 000025D9 0D1C                <1> 	dw	kbEnter
  7211 000025DB 0000                <1> 	dw	0
  7212                              <1> 
  7213 000025DD 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7214 000025DE 0DE0                <1> 	dw	kbEnhEnter
  7215 000025E0 0000                <1> 	dw	0
  7216                              <1> 
  7217 000025E2 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7218 000025E3 1B01                <1> 	dw	kbEsc
  7219 000025E5 [F520]              <1> 	dw	listbox_cancel
  7220                              <1> .end_of_table
  7221                              <1> 
  7222                              <1> menubox_def_action_table:
  7223 000025E7 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7224 000025E8 0048                <1> 	dw	kbUp
  7225 000025EA [1420]              <1> 	dw	menubox_focus_up
  7226                              <1> 
  7227 000025EC 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7228 000025ED E048                <1> 	dw	kbEnhUp
  7229 000025EF [1420]              <1> 	dw	menubox_focus_up
  7230                              <1> 
  7231 000025F1 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7232 000025F2 0050                <1> 	dw	kbDown
  7233 000025F4 [4020]              <1> 	dw	menubox_focus_down
  7234                              <1> 
  7235 000025F6 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7236 000025F7 E050                <1> 	dw	kbEnhDown
  7237 000025F9 [4020]              <1> 	dw	menubox_focus_down
  7238                              <1> 
  7239 000025FB 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7240 000025FC 0049                <1> 	dw	kbPgUp
  7241 000025FE [2620]              <1> 	dw	menubox_focus_pageup
  7242                              <1> 
  7243 00002600 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7244 00002601 0051                <1> 	dw	kbPgDn
  7245 00002603 [5220]              <1> 	dw	menubox_focus_pagedown
  7246                              <1> 
  7247 00002605 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7248 00002606 0D1C                <1> 	dw	kbEnter
  7249 00002608 [E81F]              <1> 	dw	menubox_do_focus
  7250                              <1> 
  7251 0000260A 02                  <1> 	db	ACTFLAG_REDRAW_BODY
  7252 0000260B 0DE0                <1> 	dw	kbEnhEnter
  7253 0000260D [E81F]              <1> 	dw	menubox_do_focus
  7254                              <1> 
  7255 0000260F 01                  <1> 	db	ACTFLAG_CLOSE_WIN
  7256 00002610 1B01                <1> 	dw	kbEsc
  7257 00002612 0000                <1> 	dw	0
  7258                              <1> 
  7259 00002614 01                  <1>         db      ACTFLAG_CLOSE_WIN
  7260 00002615 08F2                <1>         dw      EVENT_ALT_RELEASE
  7261 00002617 0000                <1>         dw      0
  7262                              <1> .end_of_table
  7263                              <1> 
  7264                              <1> 
  7265                              <1> 
  7266                              <1> ; ===========================================================================
  7267                              <1> 
  7268                              <1> ; vi:nowrap
  7269                                  %include "utils.asm"
  7270                              <1> ; asmsyntax=nasm
  7271                              <1> ;
  7272                              <1> ; utils.asm
  7273                              <1> ;
  7274                              <1> ; Some utility functions
  7275                              <1> ;
  7276                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
  7277                              <1> ;
  7278                              <1> 
  7279                              <1> ;=============================================================================
  7280                              <1> ;itoa ---- convert integer to ascii string (the string is zero ending)
  7281                              <1> ;input:
  7282                              <1> ;      ax = the integer to be converted
  7283                              <1> ;      cl = max length of the integer
  7284                              <1> ;      es:di -> buffer
  7285                              <1> ;output:
  7286                              <1> ;      none
  7287                              <1> ;=============================================================================
  7288                              <1> itoa:
  7289 00002619 60                  <1>         pusha
  7290 0000261A 30ED                <1>         xor ch, ch
  7291 0000261C 01CF                <1>         add di, cx
  7292 0000261E C60500              <1>         mov byte [di], 0
  7293 00002621 BB0A00              <1>         mov bx, 10
  7294                              <1> .loop_itoa:
  7295 00002624 31D2                <1>         xor dx, dx
  7296 00002626 4F                  <1>         dec di
  7297 00002627 F7F3                <1>         div bx
  7298 00002629 80C230              <1>         add dl, '0'
  7299 0000262C 8815                <1>         mov [di], dl
  7300 0000262E 49                  <1>         dec cx
  7301 0000262F 09C0                <1>         or ax, ax
  7302 00002631 7404                <1>         jz .end_itoa
  7303 00002633 09C9                <1>         or cx, cx
  7304 00002635 75ED                <1>         jnz .loop_itoa
  7305                              <1> .end_itoa:
  7306 00002637 09C9                <1>         or cx, cx
  7307 00002639 7406                <1>         jz .end
  7308                              <1> .loop_fillspace:
  7309 0000263B 4F                  <1>         dec di
  7310 0000263C C60520              <1>         mov byte [di], ' '
  7311 0000263F E2FA                <1>         loop .loop_fillspace
  7312                              <1> .end:
  7313 00002641 61                  <1>         popa
  7314 00002642 C3                  <1>         ret
  7315                              <1> 
  7316                              <1> ;=============================================================================
  7317                              <1> ;atoi ---- convert ascii string to integer (the string is zero ending)
  7318                              <1> ;input:
  7319                              <1> ;      ds:si -> buffer
  7320                              <1> ;output:
  7321                              <1> ;      ax = convert result ( <= 65535 )
  7322                              <1> ;=============================================================================
  7323                              <1> atoi:
  7324 00002643 53                  <1> 	push bx
  7325 00002644 51                  <1> 	push cx
  7326                              <1> 
  7327 00002645 31DB                <1> 	xor bx, bx
  7328 00002647 31C0                <1> 	xor ax, ax
  7329                              <1> 
  7330                              <1> .loop_conv:
  7331 00002649 AC                  <1> 	lodsb
  7332 0000264A 08C0                <1> 	or al, al
  7333 0000264C 7413                <1> 	jz .end
  7334 0000264E 2C30                <1> 	sub al, '0'
  7335 00002650 3C0A                <1> 	cmp al, 10
  7336 00002652 730D                <1> 	jae .end
  7337                              <1> 
  7338 00002654 89D9                <1> 	mov cx, bx
  7339 00002656 C1E303              <1>         shl bx, 3                   ; bx = bx * 10
  7340 00002659 D1E1                <1>         shl cx, 1                   ;
  7341 0000265B 01CB                <1>         add bx, cx                  ;
  7342 0000265D 01C3                <1> 	add bx, ax
  7343 0000265F EBE8                <1> 	jmp short .loop_conv
  7344                              <1> 
  7345                              <1> .end:
  7346 00002661 89D8                <1> 	mov ax, bx
  7347 00002663 4E                  <1> 	dec si
  7348 00002664 59                  <1> 	pop cx
  7349 00002665 5B                  <1> 	pop bx
  7350 00002666 C3                  <1> 	ret
  7351                              <1> 
  7352                              <1> ;=============================================================================
  7353                              <1> ;strlen ---- Count Length of a zero ending string
  7354                              <1> ;input:
  7355                              <1> ;      ds:si -> string
  7356                              <1> ;output:
  7357                              <1> ;      cx = length (not include the ending zero)
  7358                              <1> ;=============================================================================
  7359                              <1> strlen:
  7360 00002667 50                  <1>         push ax
  7361 00002668 31C9                <1>         xor cx,cx
  7362                              <1> 
  7363 0000266A 09F6                <1>         or si,si
  7364 0000266C 740A                <1>         jz .end
  7365                              <1> 
  7366 0000266E 56                  <1>         push si
  7367 0000266F FC                  <1>         cld
  7368                              <1> .loop_count:
  7369 00002670 41                  <1>         inc cx
  7370 00002671 AC                  <1>         lodsb
  7371 00002672 08C0                <1>         or al, al
  7372 00002674 75FA                <1>         jnz .loop_count
  7373                              <1> 
  7374 00002676 49                  <1>         dec cx
  7375 00002677 5E                  <1>         pop si
  7376                              <1> 
  7377                              <1> .end:
  7378 00002678 58                  <1>         pop ax
  7379 00002679 C3                  <1>         ret
  7380                              <1> 
  7381                              <1> ;=============================================================================
  7382                              <1> ;strlen_hl ---- Count Length of a zero ending string (ignore ~ chars)
  7383                              <1> ;input:
  7384                              <1> ;      ds:si -> string
  7385                              <1> ;output:
  7386                              <1> ;      cx = length (not include the ending zero)
  7387                              <1> ;=============================================================================
  7388                              <1> strlen_hl:
  7389 0000267A 50                  <1>         push ax
  7390 0000267B 31C9                <1>         xor cx,cx
  7391                              <1> 
  7392 0000267D 09F6                <1>         or si,si
  7393 0000267F 740E                <1>         jz .end
  7394                              <1> 
  7395 00002681 56                  <1>         push si
  7396 00002682 FC                  <1>         cld
  7397                              <1> .loop_count:
  7398 00002683 41                  <1>         inc cx
  7399                              <1> 
  7400                              <1> .loop_nocount:
  7401 00002684 AC                  <1>         lodsb
  7402 00002685 3C7E                <1>         cmp al, '~'
  7403 00002687 74FB                <1>         je .loop_nocount
  7404 00002689 08C0                <1>         or al, al
  7405 0000268B 75F6                <1>         jnz .loop_count
  7406                              <1> 
  7407 0000268D 49                  <1>         dec cx
  7408 0000268E 5E                  <1>         pop si
  7409                              <1> 
  7410                              <1> .end:
  7411 0000268F 58                  <1>         pop ax
  7412 00002690 C3                  <1>         ret
  7413                              <1> 
  7414                              <1> ;=============================================================================
  7415                              <1> ;strchr ---- search a char in a string
  7416                              <1> ;input:
  7417                              <1> ;      al = the char to be searched
  7418                              <1> ;      cx = length of the string
  7419                              <1> ;      es:di -> string
  7420                              <1> ;output:
  7421                              <1> ;      cf = 0 the char was found
  7422                              <1> ;            cx = offset of the char
  7423                              <1> ;      cf = 1 the char was not found
  7424                              <1> ;            cx = length of the string
  7425                              <1> ;=============================================================================
  7426                              <1> strchr:
  7427 00002691 53                  <1>         push bx
  7428 00002692 57                  <1>         push di
  7429 00002693 89CB                <1>         mov bx,cx
  7430 00002695 FC                  <1>         cld
  7431 00002696 F2AE                <1>         repnz scasb
  7432 00002698 5F                  <1>         pop di
  7433 00002699 87D9                <1>         xchg bx, cx
  7434 0000269B 7506                <1>         jnz .not_found
  7435 0000269D 29D9                <1>         sub cx, bx
  7436 0000269F 49                  <1>         dec cx
  7437 000026A0 5B                  <1>         pop bx
  7438 000026A1 F8                  <1>         clc
  7439 000026A2 C3                  <1>         ret
  7440                              <1> .not_found:
  7441 000026A3 5B                  <1>         pop bx
  7442 000026A4 F9                  <1>         stc
  7443 000026A5 C3                  <1>         ret
  7444                              <1> 
  7445                              <1> ;=============================================================================
  7446                              <1> ;strncpy ---- copy strings
  7447                              <1> ;input:
  7448                              <1> ;      cx = max number of chars to be copied
  7449                              <1> ;      ds:si -> source string
  7450                              <1> ;      es:di -> dest string
  7451                              <1> ;output:
  7452                              <1> ;      cx = number of chars actually copied (not include the ending zero char)
  7453                              <1> ;      es:di -> point to next char of the end of dest string and set it to
  7454                              <1> ;               zero
  7455                              <1> ;=============================================================================
  7456                              <1> strncpy:
  7457 000026A6 56                  <1>         push si
  7458 000026A7 50                  <1>         push ax
  7459 000026A8 53                  <1>         push bx
  7460 000026A9 89CB                <1>         mov bx, cx
  7461 000026AB FC                  <1>         cld
  7462                              <1> .loop_copy:
  7463 000026AC AC                  <1>         lodsb
  7464 000026AD AA                  <1>         stosb
  7465 000026AE 08C0                <1>         or al, al
  7466 000026B0 7405                <1>         jz .end
  7467 000026B2 E2F8                <1>         loop .loop_copy
  7468 000026B4 30C0                <1>         xor al, al
  7469 000026B6 AA                  <1>         stosb
  7470                              <1> .end:
  7471 000026B7 4F                  <1>         dec di
  7472 000026B8 87D9                <1>         xchg bx, cx
  7473 000026BA 29D9                <1>         sub cx, bx
  7474 000026BC 5B                  <1>         pop bx
  7475 000026BD 58                  <1>         pop ax
  7476 000026BE 5E                  <1>         pop si
  7477 000026BF C3                  <1>         ret
  7478                              <1> 
  7479                              <1> ;=============================================================================
  7480                              <1> ;strcpy ---- copy strings
  7481                              <1> ;input:
  7482                              <1> ;      ds:si -> source string
  7483                              <1> ;      es:di -> dest string
  7484                              <1> ;output:
  7485                              <1> ;      es:di -> point to next char of the end of dest string and set it to
  7486                              <1> ;               zero
  7487                              <1> ;=============================================================================
  7488                              <1> strcpy:
  7489 000026C0 56                  <1>         push si
  7490 000026C1 50                  <1>         push ax
  7491                              <1> 
  7492 000026C2 FC                  <1>         cld
  7493                              <1> .loop_copy:
  7494 000026C3 AC                  <1>         lodsb
  7495 000026C4 AA                  <1>         stosb
  7496 000026C5 08C0                <1>         or al, al
  7497 000026C7 75FA                <1> 	jnz .loop_copy
  7498                              <1> 
  7499 000026C9 4F                  <1>         dec di
  7500 000026CA 58                  <1>         pop ax
  7501 000026CB 5E                  <1>         pop si
  7502 000026CC C3                  <1>         ret
  7503                              <1> 
  7504                              <1> 
  7505                              <1> ;=============================================================================
  7506                              <1> ;calc_password ---- calculate the password
  7507                              <1> ;input:
  7508                              <1> ;      ds:si -> the pasword string (zero ending)
  7509                              <1> ;      cx = max length of the password
  7510                              <1> ;output:
  7511                              <1> ;      dx:ax = the encrypted password (32 bits)
  7512                              <1> ;=============================================================================
  7513                              <1> calc_password:
  7514 000026CD 56                  <1>         push si
  7515 000026CE 6631D2              <1>         xor edx, edx
  7516 000026D1 6631C0              <1>         xor eax, eax
  7517 000026D4 FC                  <1>         cld
  7518                              <1> .loop_calc:
  7519 000026D5 AC                  <1>         lodsb
  7520 000026D6 08C0                <1>         or al, al
  7521 000026D8 740E                <1>         jz .end
  7522 000026DA F6D0                <1>         not al
  7523 000026DC C0C004              <1>         rol al, 4
  7524 000026DF 6601C2              <1>         add edx, eax
  7525 000026E2 66C1C202            <1>         rol edx, 2
  7526 000026E6 E2ED                <1>         loop .loop_calc
  7527                              <1> .end:
  7528 000026E8 89D0                <1>         mov ax, dx
  7529 000026EA 66C1CA10            <1>         ror edx, 16
  7530 000026EE 5E                  <1>         pop si
  7531 000026EF C3                  <1>         ret
  7532                              <1> 
  7533                              <1> ;=============================================================================
  7534                              <1> ;htoa ---- hex to ascii
  7535                              <1> ;input:
  7536                              <1> ;     ax = hex number
  7537                              <1> ;     cl = length of hex number (1 to 4)
  7538                              <1> ;     es:di -> buffer to store ascii string
  7539                              <1> ;output:
  7540                              <1> ;     es:di -> ascii string
  7541                              <1> ;=============================================================================
  7542                              <1> htoa:
  7543 000026F0 60                  <1>         pusha
  7544 000026F1 30ED                <1>         xor ch, ch
  7545 000026F3 01CF                <1>         add di, cx
  7546 000026F5 C60500              <1>         mov byte [di], 0
  7547                              <1> 
  7548                              <1> .loop_conv:
  7549 000026F8 50                  <1> 	push ax                 ;Save AX
  7550 000026F9 240F                <1> 	and al,0Fh              ;Keep 4 bits
  7551 000026FB 3C0A                <1> 	cmp al,0Ah              ;Compute the hex digit,
  7552 000026FD 1C69                <1> 	sbb al,69h              ;using Improved Allison's Algorithm
  7553 000026FF 2F                  <1> 	das
  7554 00002700 4F                  <1> 	dec di
  7555 00002701 8805                <1> 	mov [di], al
  7556 00002703 58                  <1> 	pop ax                  ;Restore AX
  7557 00002704 C1E804              <1> 	shr ax,4                ;Shift it over
  7558 00002707 E2EF                <1>         loop .loop_conv
  7559                              <1> 
  7560 00002709 61                  <1>         popa
  7561 0000270A C3                  <1>         ret
  7562                              <1> 
  7563                              <1> ;=============================================================================
  7564                              <1> ;atoh ---- ascii to hex
  7565                              <1> ;input:
  7566                              <1> ;     ds:si -> buffer
  7567                              <1> ;output:
  7568                              <1> ;     ax = hex
  7569                              <1> ;     ds:si -> end of the hex number
  7570                              <1> ;=============================================================================
  7571                              <1> atoh:
  7572 0000270B 53                  <1> 	push bx
  7573                              <1> 
  7574 0000270C 31DB                <1> 	xor bx, bx
  7575 0000270E 31C0                <1> 	xor ax, ax
  7576                              <1> .loop_conv:
  7577 00002710 AC                  <1> 	lodsb
  7578 00002711 08C0                <1> 	or al, al
  7579 00002713 7419                <1> 	jz .end
  7580                              <1> 
  7581 00002715 2C30                <1> 	sub al, '0'
  7582 00002717 3C0A                <1> 	cmp al, 10
  7583 00002719 720C                <1> 	jb .ok
  7584 0000271B 2C07                <1> 	sub al, 'A'-'0'-10
  7585 0000271D 3C10                <1> 	cmp al, 16
  7586 0000271F 7206                <1> 	jb .ok
  7587 00002721 2C20                <1> 	sub al, 'a'-'A'
  7588 00002723 3C10                <1> 	cmp al, 16
  7589 00002725 7307                <1> 	jae .end
  7590                              <1> 
  7591                              <1> .ok:
  7592 00002727 C1E304              <1> 	shl bx, 4
  7593 0000272A 01C3                <1> 	add bx, ax
  7594 0000272C EBE2                <1> 	jmp .loop_conv
  7595                              <1> 
  7596                              <1> .end:
  7597 0000272E 4E                  <1> 	dec si
  7598 0000272F 89D8                <1> 	mov ax, bx
  7599 00002731 5B                  <1>         pop bx
  7600 00002732 C3                  <1>         ret
  7601                              <1> 
  7602                              <1> ;=============================================================================
  7603                              <1> ;count_lines ---- count how many lines in a string.
  7604                              <1> ;input:
  7605                              <1> ;      ds:si -> string
  7606                              <1> ;output:
  7607                              <1> ;      ch = number of lines
  7608                              <1> ;      cl = max line length
  7609                              <1> ;=============================================================================
  7610                              <1> count_lines:
  7611 00002733 56                  <1>         push si
  7612 00002734 53                  <1>         push bx
  7613 00002735 50                  <1>         push ax
  7614                              <1> 
  7615 00002736 FC                  <1>         cld
  7616                              <1> 
  7617 00002737 31C9                <1>         xor cx, cx
  7618 00002739 31DB                <1>         xor bx, bx
  7619                              <1> 
  7620 0000273B 09F6                <1>         or si, si
  7621 0000273D 7423                <1>         jz .end
  7622                              <1> 
  7623 0000273F FEC5                <1>         inc ch
  7624                              <1> .loop_count:
  7625 00002741 AC                  <1>         lodsb
  7626 00002742 08C0                <1>         or al, al
  7627 00002744 7416                <1>         jz .ending
  7628                              <1> 
  7629 00002746 3C0D                <1>         cmp al, 0x0d
  7630 00002748 7404                <1>         je .new_line
  7631                              <1> 
  7632 0000274A FEC3                <1>         inc bl
  7633 0000274C EBF3                <1>         jmp short .loop_count
  7634                              <1> 
  7635                              <1> .new_line:
  7636 0000274E FEC5                <1>         inc ch
  7637                              <1> 
  7638 00002750 88DF                <1>         mov bh, bl
  7639 00002752 30DB                <1>         xor bl, bl
  7640 00002754 38CF                <1>         cmp bh, cl
  7641 00002756 76E9                <1>         jbe .loop_count
  7642 00002758 88F9                <1>         mov cl, bh
  7643 0000275A EBE5                <1>         jmp short .loop_count
  7644                              <1> 
  7645                              <1> .ending:
  7646 0000275C 38CB                <1>         cmp bl, cl
  7647 0000275E 7602                <1>         jbe .end
  7648 00002760 88D9                <1>         mov cl, bl
  7649                              <1> 
  7650                              <1> .end:
  7651 00002762 58                  <1>         pop ax
  7652 00002763 5B                  <1>         pop bx
  7653 00002764 5E                  <1>         pop si
  7654 00002765 C3                  <1>         ret
  7655                              <1> 
  7656                              <1> 
  7657                              <1> ;=============================================================================
  7658                              <1> ; leap_year ---- check if a year is leap a year
  7659                              <1> ; input:
  7660                              <1> ;      ax = year
  7661                              <1> ; output:
  7662                              <1> ;      cf = 1, it's a leap year
  7663                              <1> ;      cf = 0, not a leap year
  7664                              <1> ;=============================================================================
  7665                              <1> leap_year:
  7666 00002766 60                  <1>        pusha
  7667 00002767 B99001              <1>        mov cx, 400
  7668 0000276A 31D2                <1>        xor dx, dx 
  7669 0000276C 50                  <1>        push ax
  7670 0000276D F7F1                <1>        div cx
  7671 0000276F 58                  <1>        pop ax
  7672 00002770 09D2                <1>        or dx, dx
  7673 00002772 741B                <1>        jz .isleap
  7674                              <1> 
  7675 00002774 B96400              <1>        mov cx, 100
  7676 00002777 31D2                <1>        xor dx, dx
  7677 00002779 50                  <1>        push ax
  7678 0000277A F7F1                <1>        div cx
  7679 0000277C 58                  <1>        pop ax
  7680 0000277D 09D2                <1>        or dx, dx
  7681 0000277F 740B                <1>        jz .noleap
  7682                              <1> 
  7683 00002781 31D2                <1>        xor dx, dx
  7684 00002783 B90400              <1>        mov cx, 4
  7685 00002786 F7F1                <1>        div cx
  7686 00002788 09D2                <1>        or dx, dx
  7687 0000278A 7403                <1>        jz .isleap
  7688                              <1> 
  7689                              <1> .noleap:
  7690 0000278C F8                  <1>        clc
  7691 0000278D 61                  <1>        popa
  7692 0000278E C3                  <1>        ret
  7693                              <1> 
  7694                              <1> .isleap:
  7695 0000278F F9                  <1>        stc
  7696 00002790 61                  <1>        popa
  7697 00002791 C3                  <1>        ret
  7698                              <1> 
  7699                              <1> ;=============================================================================
  7700                              <1> ; day_in_week
  7701                              <1> ; input:
  7702                              <1> ;      ax = year
  7703                              <1> ;      dh = month
  7704                              <1> ;      dl = day
  7705                              <1> ; output:
  7706                              <1> ;      cx = day in week
  7707                              <1> ;=============================================================================
  7708                              <1> day_in_week:
  7709 00002792 50                  <1> 	push ax
  7710 00002793 53                  <1> 	push bx
  7711 00002794 52                  <1> 	push dx
  7712                              <1> 
  7713 00002795 52                  <1> 	push dx
  7714                              <1> 
  7715 00002796 48                  <1> 	dec ax
  7716 00002797 89C1                <1> 	mov cx, ax
  7717 00002799 31D2                <1> 	xor dx, dx
  7718 0000279B 50                  <1> 	push ax
  7719 0000279C BB0400              <1> 	mov bx, 4
  7720 0000279F F7F3                <1> 	div bx
  7721 000027A1 01C1                <1> 	add cx, ax
  7722 000027A3 58                  <1> 	pop ax
  7723                              <1> 
  7724 000027A4 31D2                <1> 	xor dx, dx
  7725 000027A6 50                  <1> 	push ax
  7726 000027A7 BB6400              <1> 	mov bx, 100
  7727 000027AA F7F3                <1> 	div bx
  7728 000027AC 29C1                <1> 	sub cx, ax
  7729 000027AE 58                  <1> 	pop ax
  7730                              <1> 
  7731 000027AF 31D2                <1> 	xor dx, dx
  7732 000027B1 50                  <1> 	push ax
  7733 000027B2 BB9001              <1> 	mov bx, 400
  7734 000027B5 F7F3                <1> 	div bx
  7735 000027B7 01C1                <1> 	add cx, ax
  7736 000027B9 58                  <1> 	pop ax
  7737                              <1> 
  7738 000027BA 40                  <1> 	inc ax
  7739 000027BB 5A                  <1> 	pop dx
  7740                              <1> 
  7741 000027BC 0FB6DE              <1> 	movzx bx, dh
  7742 000027BF 8A9F[E227]          <1> 	mov bl, [days_in_month_norm-1+bx]
  7743 000027C3 01D9                <1> 	add cx, bx 
  7744                              <1> 
  7745 000027C5 E89EFF              <1> 	call leap_year
  7746 000027C8 7306                <1> 	jnc .norm
  7747 000027CA 80FE03              <1> 	cmp dh, 3
  7748                              <1> 
  7749 000027CD 7201                <1> 	jb .norm
  7750 000027CF 41                  <1> 	inc cx
  7751                              <1> 
  7752                              <1> .norm:
  7753 000027D0 30F6                <1> 	xor dh, dh
  7754 000027D2 01D1                <1> 	add cx, dx
  7755                              <1> 
  7756 000027D4 89C8                <1> 	mov ax, cx
  7757 000027D6 31D2                <1> 	xor dx, dx
  7758 000027D8 B90700              <1> 	mov cx, 7
  7759 000027DB F7F1                <1> 	div cx
  7760 000027DD 89D1                <1> 	mov cx, dx
  7761                              <1> 
  7762 000027DF 5A                  <1> 	pop dx
  7763 000027E0 5B                  <1> 	pop bx
  7764 000027E1 58                  <1> 	pop ax
  7765 000027E2 C3                  <1> 	ret
  7766                              <1> 
  7767 000027E3 000303060104060205- <1> days_in_month_norm db  0, 3, 3, 6, 1, 4, 6, 2, 5, 0, 3, 5
  7768 000027EC 000305              <1>
  7769                              <1> 
  7770                              <1> ;=============================================================================
  7771                              <1> ; bcd_to_bin ---- convert bcd to binary
  7772                              <1> ; input: ax = bcd number
  7773                              <1> ; output: ax = binary number
  7774                              <1> ;=============================================================================
  7775                              <1> bcd_to_bin:
  7776 000027EF 53                  <1>        push bx
  7777 000027F0 51                  <1>        push cx
  7778 000027F1 52                  <1>        push dx
  7779 000027F2 56                  <1>        push si
  7780                              <1> 
  7781 000027F3 8D36[1528]          <1>        lea si, [.mul_num]
  7782 000027F7 B90400              <1>        mov cx, 4
  7783 000027FA 31DB                <1>        xor bx, bx
  7784                              <1> 
  7785                              <1> .loop_conv:
  7786 000027FC 50                  <1>        push ax
  7787 000027FD 83E00F              <1>        and ax, 0x000f
  7788 00002800 8B14                <1>        mov dx, [si]
  7789 00002802 F7E2                <1>        mul dx
  7790 00002804 01C3                <1>        add bx, ax
  7791 00002806 58                  <1>        pop ax
  7792 00002807 C1E804              <1>        shr ax, 4
  7793 0000280A 46                  <1>        inc si
  7794 0000280B 46                  <1>        inc si
  7795 0000280C E2EE                <1>        loop .loop_conv
  7796                              <1> 
  7797 0000280E 89D8                <1>        mov ax, bx
  7798                              <1> 
  7799 00002810 5E                  <1>        pop si
  7800 00002811 5A                  <1>        pop dx
  7801 00002812 59                  <1>        pop cx
  7802 00002813 5B                  <1>        pop bx
  7803 00002814 C3                  <1>        ret
  7804                              <1> 
  7805 00002815 01000A006400E803    <1> .mul_num  dw 1, 10, 100, 1000
  7806                              <1> 
  7807                              <1> ;=============================================================================
  7808                              <1> ; bcd_to_str ---- convert bcd to string
  7809                              <1> ; input: ax = bcd number
  7810                              <1> ;        cl = length (0 to 4)
  7811                              <1> ;        es:di -> buffer
  7812                              <1> ; output: none
  7813                              <1> ;=============================================================================
  7814                              <1> bcd_to_str:
  7815 0000281D 60                  <1>        pusha
  7816 0000281E 51                  <1>        push cx
  7817 0000281F 89C3                <1>        mov bx, ax
  7818 00002821 B004                <1>        mov al, 4
  7819 00002823 F6E1                <1>        mul cl
  7820 00002825 88C1                <1>        mov cl, al
  7821 00002827 D3CB                <1>        ror bx, cl
  7822 00002829 59                  <1>        pop cx
  7823                              <1> 
  7824                              <1> .loop_conv:
  7825 0000282A 08C9                <1>        or cl, cl
  7826 0000282C 740E                <1>        jz .end
  7827 0000282E C1C304              <1>        rol bx, 4
  7828 00002831 89D8                <1>        mov ax, bx
  7829 00002833 240F                <1>        and al, 0x0f
  7830 00002835 0430                <1>        add al, '0'
  7831 00002837 AA                  <1>        stosb
  7832 00002838 FEC9                <1>        dec cl
  7833 0000283A EBEE                <1>        jmp .loop_conv
  7834                              <1> 
  7835                              <1> .end:
  7836 0000283C 30C0                <1>        xor al, al
  7837 0000283E AA                  <1>        stosb
  7838 0000283F 61                  <1>        popa
  7839 00002840 C3                  <1>        ret
  7840                              <1> 
  7841                              <1> ;=============================================================================
  7842                              <1> ; reboot ---- reboot the computer
  7843                              <1> ; input:
  7844                              <1> ;	none
  7845                              <1> ;=============================================================================
  7846                              <1> reboot:
  7847 00002841 BB4000              <1>        mov bx, 0x40
  7848 00002844 53                  <1>        push bx
  7849 00002845 1F                  <1>        pop ds
  7850 00002846 B83412              <1>        mov ax, 0x1234
  7851 00002849 A37200              <1>        mov [0x0072], ax
  7852 0000284C EA0000FFFF          <1>        jmp 0xFFFF:0x0000
  7853                              <1> 
  7854                              <1> ;=============================================================================
  7855                              <1> ; bioskey ---- BIOS keyboard func
  7856                              <1> ;=============================================================================
  7857                              <1> bioskey:
  7858 00002851 C606[6C67]00        <1>        mov byte [utils_tmp.kbd_work], 0
  7859 00002856 08E4                <1>        or ah, ah
  7860 00002858 740F                <1>        je .post_trans
  7861 0000285A 80FC01              <1>        cmp ah, 0x01
  7862 0000285D 740A                <1>        je .post_trans
  7863 0000285F 80FC10              <1>        cmp ah, 0x10
  7864 00002862 7405                <1>        je .post_trans
  7865 00002864 80FC11              <1>        cmp ah, 0x11
  7866 00002867 7504                <1>        jne .call_int16
  7867                              <1> 
  7868                              <1> .post_trans:
  7869 00002869 FE06[6C67]          <1>        inc byte [utils_tmp.kbd_work]
  7870                              <1> 
  7871                              <1> .call_int16:
  7872 0000286D CD16                <1>        int 0x16
  7873 0000286F 9C                  <1>        pushf
  7874                              <1> 
  7875 00002870 803E[6C67]00        <1>        cmp byte [utils_tmp.kbd_work], 0
  7876 00002875 741E                <1>        jz .end
  7877                              <1> 
  7878 00002877 51                  <1>        push cx
  7879 00002878 56                  <1>        push si
  7880 00002879 8B0E[1345]          <1>        mov cx, [keymap.number]
  7881 0000287D 8B36[1545]          <1>        mov si, [keymap.data]
  7882 00002881 09C9                <1>        or cx, cx
  7883 00002883 740E                <1>        jz .end_trans
  7884                              <1> 
  7885                              <1> .loop_trans:
  7886 00002885 3B04                <1>        cmp ax, [si]
  7887 00002887 7505                <1>        jne .loop_next
  7888 00002889 8B4402              <1>        mov ax, [si+2]
  7889 0000288C EB05                <1>        jmp short .end_trans
  7890                              <1> .loop_next:
  7891 0000288E 83C604              <1>        add si, 4
  7892 00002891 E2F2                <1>        loop .loop_trans
  7893                              <1> .end_trans:
  7894 00002893 5E                  <1>        pop si
  7895 00002894 59                  <1>        pop cx
  7896                              <1> .end:
  7897 00002895 9D                  <1>        popf       
  7898 00002896 C3                  <1>        ret
  7899                              <1> 
  7900                              <1> ;=============================================================================
  7901                              <1> ; check_keyevent ---- check if keyboard is pressed
  7902                              <1> ; input:
  7903                              <1> ;	none
  7904                              <1> ; output:
  7905                              <1> ;	ax = keyevent (0 = no key)
  7906                              <1> ;=============================================================================
  7907                              <1> check_keyevent:
  7908 00002897 53                  <1> 	push bx
  7909                              <1> 
  7910 00002898 8A3E[6D67]          <1> 	mov bh, [utils_tmp.kbd_last_shift]
  7911 0000289C E85200              <1> 	call .check_stat_key
  7912 0000289F 88C3                <1> 	mov bl, al
  7913 000028A1 A2[6D67]            <1> 	mov [utils_tmp.kbd_last_shift], al
  7914                              <1> 
  7915 000028A4 E85600              <1> 	call .check_norm_key
  7916 000028A7 09C0                <1> 	or ax, ax
  7917 000028A9 7407                <1> 	jz .no_norm_key
  7918                              <1> 
  7919 000028AB C606[6E67]01        <1> 	mov byte [utils_tmp.kbd_bypass_next_shift], 1
  7920                              <1> .end:
  7921 000028B0 5B                  <1> 	pop bx
  7922 000028B1 C3                  <1> 	ret
  7923                              <1> 
  7924                              <1> .no_norm_key:
  7925 000028B2 31C0                <1> 	xor ax, ax
  7926 000028B4 38FB                <1> 	cmp bl, bh
  7927 000028B6 74F8                <1> 	je .end
  7928                              <1> 
  7929 000028B8 51                  <1> 	push cx
  7930 000028B9 B90101              <1> 	mov cx, 0x0101
  7931                              <1> 
  7932                              <1> .loop_check_keys:
  7933 000028BC 53                  <1> 	push bx
  7934 000028BD 21CB                <1> 	and bx, cx
  7935 000028BF 38DF                <1> 	cmp bh, bl
  7936 000028C1 5B                  <1> 	pop bx
  7937                              <1> 
  7938 000028C2 740E                <1> 	je .no_this_key
  7939                              <1> 
  7940 000028C4 84CB                <1> 	test bl, cl
  7941 000028C6 7404                <1> 	jz .release
  7942 000028C8 B4F1                <1> 	mov ah, (EVTCODE_COMMAND | EVTCODE_KEYPRESS)
  7943 000028CA EB02                <1> 	jmp short .key_ok
  7944                              <1> 
  7945                              <1> .release:
  7946 000028CC B4F2                <1> 	mov ah, (EVTCODE_COMMAND | EVTCODE_KEYRELEASE)
  7947                              <1> 
  7948                              <1> .key_ok:
  7949 000028CE 88C8                <1> 	mov al, cl
  7950 000028D0 EB06                <1> 	jmp short .end_check_keys
  7951                              <1> 
  7952                              <1> .no_this_key:
  7953 000028D2 D1E1                <1> 	shl cx, 1
  7954 000028D4 08C9                <1> 	or cl, cl
  7955 000028D6 75E4                <1> 	jnz .loop_check_keys
  7956                              <1> 
  7957                              <1> .end_check_keys:
  7958 000028D8 09C0                <1> 	or ax, ax
  7959 000028DA 7412                <1> 	jz .end_stat
  7960                              <1> 
  7961 000028DC A8F0                <1> 	test al, kbStateKeysMask
  7962 000028DE 7509                <1> 	jnz .dont_bypass
  7963                              <1> 
  7964 000028E0 803E[6E67]00        <1> 	cmp byte [utils_tmp.kbd_bypass_next_shift], 0
  7965 000028E5 7407                <1> 	jz .end_stat
  7966                              <1> 
  7967 000028E7 31C0                <1> 	xor ax, ax
  7968                              <1> 
  7969                              <1> .dont_bypass:
  7970 000028E9 C606[6E67]00        <1> 	mov byte [utils_tmp.kbd_bypass_next_shift], 0
  7971                              <1> 
  7972                              <1> .end_stat:
  7973 000028EE 59                  <1> 	pop cx
  7974 000028EF 5B                  <1> 	pop bx
  7975 000028F0 C3                  <1> 	ret
  7976                              <1> 
  7977                              <1> .check_stat_key:
  7978 000028F1 53                  <1> 	push bx
  7979 000028F2 B402                <1> 	mov ah, 2
  7980 000028F4 0A26[BB44]          <1> 	or ah, [keyboard_type]
  7981 000028F8 E856FF              <1> 	call bioskey
  7982 000028FB 5B                  <1> 	pop bx
  7983 000028FC C3                  <1> 	ret
  7984                              <1> 
  7985                              <1> .check_norm_key:
  7986 000028FD 53                  <1> 	push bx
  7987 000028FE B401                <1>         mov ah,1                                        ; if no key pressed
  7988 00002900 0A26[BB44]          <1>         or ah, [keyboard_type]
  7989 00002904 E84AFF              <1>         call bioskey                                    ; go back to check
  7990 00002907 7409                <1> 	jz .no_key
  7991 00002909 8A26[BB44]          <1> 	mov ah, [keyboard_type]
  7992 0000290D E841FF              <1> 	call bioskey
  7993 00002910 5B                  <1> 	pop bx
  7994 00002911 C3                  <1> 	ret
  7995                              <1> 
  7996                              <1> .no_key:
  7997 00002912 31C0                <1> 	xor ax, ax
  7998 00002914 5B                  <1> 	pop bx
  7999 00002915 C3                  <1> 	ret
  8000                              <1> 
  8001                              <1> ;=============================================================================
  8002                              <1> ;get_realtime ---- get the machine real time in minutes
  8003                              <1> ;input:
  8004                              <1> ;      none
  8005                              <1> ;output:
  8006                              <1> ;      cf = 0 success, ax = real time in minutes, dx = day (set a bit)
  8007                              <1> ;      cf = 1 failed
  8008                              <1> ;=============================================================================
  8009                              <1> get_realtime:
  8010 00002916 53                  <1>         push bx
  8011 00002917 51                  <1>         push cx
  8012                              <1> 
  8013 00002918 B404                <1>         mov ah, 0x04
  8014 0000291A CD1A                <1>         int 0x1a
  8015 0000291C 723C                <1>         jc .end
  8016                              <1> 
  8017 0000291E 0FB6C6              <1>         movzx ax, dh
  8018 00002921 E8CBFE              <1>         call bcd_to_bin
  8019 00002924 88C6                <1>         mov dh, al
  8020 00002926 88D0                <1>         mov al, dl
  8021 00002928 E8C4FE              <1>         call bcd_to_bin
  8022 0000292B 88C2                <1>         mov dl, al
  8023                              <1> 
  8024 0000292D 89C8                <1>         mov ax, cx
  8025 0000292F E8BDFE              <1>         call bcd_to_bin
  8026                              <1> 
  8027 00002932 E85DFE              <1>         call day_in_week
  8028                              <1> 
  8029 00002935 BA0100              <1>         mov dx, 1
  8030 00002938 D3E2                <1>         shl dx, cl
  8031                              <1> 
  8032 0000293A 52                  <1>         push dx
  8033 0000293B B402                <1>         mov ah, 0x02
  8034 0000293D CD1A                <1>         int 0x1a
  8035 0000293F 5A                  <1>         pop dx
  8036 00002940 7218                <1>         jc .end
  8037                              <1> 
  8038 00002942 0FB6C5              <1>         movzx ax, ch
  8039 00002945 E8A7FE              <1>         call bcd_to_bin
  8040 00002948 88C5                <1>         mov ch, al
  8041                              <1> 
  8042 0000294A 88C8                <1>         mov al, cl
  8043 0000294C E8A0FE              <1>         call bcd_to_bin
  8044 0000294F 88C1                <1>         mov cl, al
  8045                              <1> 
  8046                              <1> ;convert hour and minute into minute
  8047 00002951 B03C                <1>         mov al, 60
  8048 00002953 F6E5                <1>         mul ch
  8049 00002955 30ED                <1>         xor ch, ch
  8050 00002957 01C8                <1>         add ax, cx
  8051                              <1> 
  8052 00002959 F8                  <1>         clc
  8053                              <1> .end:
  8054 0000295A 59                  <1>         pop cx
  8055 0000295B 5B                  <1>         pop bx
  8056                              <1> 
  8057 0000295C C3                  <1>         ret
  8058                              <1> 
  8059                              <1> 
  8060                              <1> ;=============================================================================
  8061                              <1> ; get_current_time_string ---- get current time string
  8062                              <1> ; input: al = show method, es:di -> buffer
  8063                              <1> ;=============================================================================
  8064                              <1> get_current_time_string:
  8065 0000295D 60                  <1>        pusha
  8066 0000295E 08C0                <1>        or al, al
  8067 00002960 741D                <1>        jz .end
  8068                              <1> 
  8069 00002962 B402                <1>        mov ah, 0x02
  8070 00002964 CD1A                <1>        int 0x1a
  8071 00002966 7217                <1>        jc .end
  8072                              <1> 
  8073 00002968 89CB                <1>        mov bx, cx
  8074                              <1> 
  8075 0000296A B90200              <1>        mov cx, 2
  8076                              <1> 
  8077 0000296D 0FB6C7              <1>        movzx ax, bh
  8078 00002970 E8AAFE              <1>        call bcd_to_str
  8079 00002973 01CF                <1>        add di, cx
  8080 00002975 B03A                <1>        mov al, ':'
  8081 00002977 AA                  <1>        stosb
  8082                              <1> 
  8083 00002978 88D8                <1>        mov al, bl
  8084 0000297A E8A0FE              <1>        call bcd_to_str
  8085 0000297D 01CF                <1>        add di, cx
  8086                              <1>        
  8087                              <1> .end:
  8088 0000297F 30C0                <1>        xor al, al
  8089 00002981 AA                  <1>        stosb
  8090 00002982 61                  <1>        popa
  8091 00002983 C3                  <1>        ret      
  8092                              <1> 
  8093                              <1> 
  8094                              <1> ;=============================================================================
  8095                              <1> ; get_current_date_string ---- get current date string
  8096                              <1> ; input: al = show method, es:di -> buffer
  8097                              <1> ;        the method of show date:
  8098                              <1> ;           0 = don't show date
  8099                              <1> ;           1 = day mm-dd-yyyy
  8100                              <1> ;           2 = day yyyy-mm-dd
  8101                              <1> ;           3 = day dd-mm-yyyy
  8102                              <1> ; output: none
  8103                              <1> ;=============================================================================
  8104                              <1> get_current_date_string:
  8105 00002984 60                  <1>        pusha
  8106                              <1> 
  8107 00002985 08C0                <1>        or al, al
  8108 00002987 7443                <1>        jz .end
  8109                              <1> 
  8110 00002989 50                  <1>        push ax
  8111 0000298A B404                <1>        mov ah, 0x04
  8112 0000298C CD1A                <1>        int 0x1a
  8113 0000298E 58                  <1>        pop ax
  8114 0000298F 723B                <1>        jc .end
  8115                              <1> 
  8116 00002991 50                  <1>        push ax
  8117 00002992 51                  <1>        push cx
  8118 00002993 52                  <1>        push dx
  8119                              <1> 
  8120 00002994 0FB6C6              <1>        movzx ax, dh
  8121 00002997 E855FE              <1>        call bcd_to_bin
  8122 0000299A 88C6                <1>        mov dh, al
  8123 0000299C 88D0                <1>        mov al, dl
  8124 0000299E E84EFE              <1>        call bcd_to_bin
  8125 000029A1 88C2                <1>        mov dl, al
  8126                              <1> 
  8127 000029A3 89C8                <1>        mov ax, cx
  8128 000029A5 E847FE              <1>        call bcd_to_bin
  8129                              <1> 
  8130 000029A8 E8E7FD              <1>        call day_in_week
  8131                              <1> 
  8132 000029AB 89CB                <1>        mov bx, cx
  8133 000029AD D1E3                <1>        shl bx, 1
  8134 000029AF 8BB7[F945]          <1>        mov si, [str_idx.sunday+bx]
  8135                              <1> 
  8136 000029B3 E80AFD              <1>        call strcpy
  8137 000029B6 B020                <1>        mov al, ' '
  8138 000029B8 AA                  <1>        stosb
  8139                              <1> 
  8140 000029B9 5A                  <1>        pop dx
  8141 000029BA 5B                  <1>        pop bx
  8142 000029BB 58                  <1>        pop ax
  8143                              <1> 
  8144 000029BC 31C9                <1>        xor cx, cx
  8145                              <1> 
  8146 000029BE 3C01                <1>        cmp al, 1
  8147 000029C0 740F                <1>        je .mmddyy
  8148 000029C2 3C02                <1>        cmp al, 2
  8149 000029C4 741E                <1>        je .yymmdd
  8150 000029C6 3C03                <1>        cmp al, 3
  8151 000029C8 742D                <1>        je .ddmmyy
  8152 000029CA EB00                <1>        jmp .end
  8153                              <1> 
  8154                              <1> .end:       
  8155 000029CC 30C0                <1>        xor al, al
  8156 000029CE AA                  <1>        stosb
  8157 000029CF 61                  <1>        popa
  8158 000029D0 C3                  <1>        ret
  8159                              <1> 
  8160                              <1> .mmddyy:
  8161 000029D1 B02D                <1>        mov al, '-'
  8162 000029D3 50                  <1>        push ax
  8163 000029D4 E83300              <1>        call .write_mm
  8164 000029D7 58                  <1>        pop ax
  8165 000029D8 AA                  <1>        stosb
  8166 000029D9 50                  <1>        push ax
  8167 000029DA E83800              <1>        call .write_dd
  8168 000029DD 58                  <1>        pop ax
  8169 000029DE AA                  <1>        stosb
  8170 000029DF E83E00              <1>        call .write_yy
  8171                              <1> 
  8172 000029E2 EBE8                <1>        jmp .end
  8173                              <1> 
  8174                              <1> .yymmdd:
  8175 000029E4 B02D                <1>        mov al, '-'
  8176 000029E6 50                  <1>        push ax
  8177 000029E7 E83600              <1>        call .write_yy
  8178 000029EA 58                  <1>        pop ax
  8179 000029EB AA                  <1>        stosb
  8180 000029EC 50                  <1>        push ax
  8181 000029ED E81A00              <1>        call .write_mm
  8182 000029F0 58                  <1>        pop ax
  8183 000029F1 AA                  <1>        stosb
  8184 000029F2 E82000              <1>        call .write_dd
  8185                              <1> 
  8186 000029F5 EBD5                <1>        jmp .end
  8187                              <1> 
  8188                              <1> .ddmmyy:
  8189 000029F7 B02D                <1>        mov al, '-'
  8190 000029F9 50                  <1>        push ax
  8191 000029FA E81800              <1>        call .write_dd
  8192 000029FD 58                  <1>        pop ax
  8193 000029FE AA                  <1>        stosb
  8194 000029FF 50                  <1>        push ax
  8195 00002A00 E80700              <1>        call .write_mm
  8196 00002A03 58                  <1>        pop ax
  8197 00002A04 AA                  <1>        stosb
  8198 00002A05 E81800              <1>        call .write_yy
  8199                              <1> 
  8200 00002A08 EBC2                <1>        jmp .end
  8201                              <1> 
  8202                              <1> .write_mm:
  8203 00002A0A 0FB6C6              <1>        movzx ax, dh
  8204 00002A0D B102                <1>        mov cl, 2
  8205 00002A0F E80BFE              <1>        call bcd_to_str
  8206 00002A12 01CF                <1>        add di, cx
  8207 00002A14 C3                  <1>        ret
  8208                              <1> 
  8209                              <1> .write_dd:
  8210 00002A15 0FB6C2              <1>        movzx ax, dl
  8211 00002A18 B102                <1>        mov cl, 2
  8212 00002A1A E800FE              <1>        call bcd_to_str
  8213 00002A1D 01CF                <1>        add di, cx
  8214 00002A1F C3                  <1>        ret
  8215                              <1> 
  8216                              <1> .write_yy:
  8217 00002A20 89D8                <1>        mov ax, bx
  8218 00002A22 B104                <1>        mov cl, 4
  8219 00002A24 E8F6FD              <1>        call bcd_to_str
  8220 00002A27 01CF                <1>        add di, cx
  8221 00002A29 C3                  <1>        ret
  8222                              <1> 
  8223                              <1> ;=============================================================================
  8224                              <1> ;calc_checksum ---- calculate the checksum of a data block.
  8225                              <1> ;input:
  8226                              <1> ;      ds:si -> start of the checksum area
  8227                              <1> ;      cx = checksum size
  8228                              <1> ;output:
  8229                              <1> ;      bl = the checksum value.
  8230                              <1> ;=============================================================================
  8231                              <1> calc_checksum:
  8232 00002A2A 51                  <1>         push cx
  8233 00002A2B 50                  <1>         push ax
  8234 00002A2C 56                  <1>         push si
  8235 00002A2D 30DB                <1>         xor bl, bl
  8236 00002A2F FC                  <1>         cld
  8237                              <1> .loop_calc:
  8238 00002A30 AC                  <1>         lodsb
  8239 00002A31 00C3                <1>         add bl, al
  8240 00002A33 E2FB                <1>         loop .loop_calc
  8241 00002A35 5E                  <1>         pop si
  8242 00002A36 58                  <1>         pop ax
  8243 00002A37 59                  <1>         pop cx
  8244 00002A38 C3                  <1>         ret
  8245                              <1> 
  8246                              <1> ;=============================================================================
  8247                              <1> ; clear_memory ---- clear a memory block to zero
  8248                              <1> ; input:
  8249                              <1> ;	cx = size
  8250                              <1> ;	ds:di -> memory
  8251                              <1> ;=============================================================================
  8252                              <1> clear_memory:
  8253 00002A39 60                  <1> 	pusha
  8254 00002A3A 06                  <1> 	push es
  8255 00002A3B 1E                  <1> 	push ds
  8256 00002A3C 07                  <1> 	pop es
  8257 00002A3D 30C0                <1> 	xor al, al
  8258 00002A3F F3AA                <1> 	rep stosb
  8259 00002A41 07                  <1> 	pop es
  8260 00002A42 61                  <1> 	popa
  8261 00002A43 C3                  <1> 	ret 
  8262                              <1> 
  8263                                  %include "knl.asm"
  8264                              <1> ; asmsyntax=nasm
  8265                              <1> ;
  8266                              <1> ; knl.asm
  8267                              <1> ;
  8268                              <1> ; kernel functions for partition list
  8269                              <1> ;
  8270                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
  8271                              <1> ;
  8272                              <1> 
  8273                              <1> %define LIMIT_FLOPPY_NUMBER
  8274                              <1> 
  8275                              <1> %define NUM_OF_ID       (part_type.str_tbl - part_type.id_tbl)
  8276                              <1> %define NUM_OF_LOG_DENY (part_type.auto_act_tbl - part_type.log_deny_tbl)
  8277                              <1> %define NUM_OF_PRI_DENY (part_type.auto_act_tbl - part_type.pri_deny_tbl)
  8278                              <1> %define NUM_OF_AUTO_ACT (part_type.hidden_tbl - part_type.auto_act_tbl)
  8279                              <1> %define NUM_OF_HIDDEN   (part_type.end_of_tbl - part_type.hidden_tbl)
  8280                              <1> %define NUM_OF_ALLOW_HIDE (part_type.hidden_tbl - part_type.allow_hide_tbl)
  8281                              <1> 
  8282                              <1> ;%define NUM_OF_EXT      (part_type.log_deny_tbl - part_type.ext_tbl)
  8283                              <1> 
  8284                              <1> %define MAX_FLOPPY_NUM  2
  8285                              <1> 
  8286                              <1> ;==============================================================================
  8287                              <1> ;fill_bootrecord ---- fill the boot record for a partition
  8288                              <1> ;input:
  8289                              <1> ;      ebx   =  father's abs LBA address
  8290                              <1> ;      dh    =  partition id
  8291                              <1> ;      dl    =  drive id
  8292                              <1> ;      ds:si -> source partition record
  8293                              <1> ;      es:di -> buffer to store the boot record
  8294                              <1> ;output:
  8295                              <1> ;      es:di -> filled with boot record
  8296                              <1> ;==============================================================================
  8297                              <1> fill_bootrecord:
  8298 00002A44 6660                <1>         pushad
  8299 00002A46 FC                  <1>         cld
  8300                              <1> 
  8301 00002A47 57                  <1>         push di                                  ; clear the boot record
  8302 00002A48 30C0                <1>         xor al, al                               ;
  8303 00002A4A B94000              <1>         mov cx, SIZE_OF_BOOTRECORD               ;
  8304 00002A4D F3AA                <1>         rep stosb                                ;
  8305 00002A4F 5F                  <1>         pop di                                   ;
  8306                              <1>         
  8307 00002A50 895502              <1>         mov [di + struc_bootrecord.drive_id], dx ; fill the drive_id and
  8308                              <1>                                                  ; part_id
  8309 00002A53 6689D9              <1>         mov ecx, ebx
  8310 00002A56 66894D06            <1>         mov [di + struc_bootrecord.father_abs_addr], ecx
  8311                              <1> 
  8312 00002A5A 8A7C04              <1>         mov bh, [si + struc_partition.type]
  8313                              <1> 
  8314 00002A5D E81D0B              <1>         call get_drive_flags
  8315                              <1> 
  8316 00002A60 83E015              <1>         and ax, DRVFLAG_MASK                     ; set flags
  8317                              <1>         
  8318 00002A63 08F6                <1>         or dh, dh                                ; check if it's a driver record
  8319 00002A65 7507                <1>         jnz .is_partition
  8320 00002A67 0D8000              <1>         or ax, INFOFLAG_ISDRIVER
  8321 00002A6A 30FF                <1>         xor bh, bh
  8322 00002A6C EB0F                <1>         jmp short .set_other_flags
  8323                              <1> 
  8324                              <1> .is_partition:
  8325 00002A6E 6609C9              <1>         or ecx,ecx                               ;
  8326 00002A71 7403                <1>         jz .not_logical                          ;
  8327 00002A73 0D0001              <1>         or ax, INFOFLAG_LOGICAL                  ;
  8328                              <1>         
  8329                              <1> .not_logical:
  8330 00002A76 3A14                <1>         cmp dl, [si + struc_partition.state]     ; test if it's active
  8331                              <1>                                                  ; should changed to
  8332                              <1>                                                  ; cmp 0x80, [xxx] ? 
  8333 00002A78 7503                <1>         jne .set_other_flags
  8334 00002A7A 0D0008              <1>         or ax, INFOFLAG_ACTIVE
  8335                              <1> 
  8336                              <1> .set_other_flags:
  8337                              <1> 
  8338 00002A7D 51                  <1>         push cx                                  ;
  8339 00002A7E 57                  <1>         push di                                  ;
  8340                              <1> 
  8341 00002A7F A98000              <1>         test ax, INFOFLAG_ISDRIVER
  8342 00002A82 752E                <1>         jnz .not_hidden                          ;
  8343                              <1> 
  8344 00002A84 A90001              <1>         test ax, INFOFLAG_LOGICAL                ; ah = record flags
  8345 00002A87 7513                <1>         jnz .not_auto_act                        ;
  8346                              <1> 
  8347 00002A89 50                  <1>         push ax                                  ; check if it should
  8348 00002A8A 8D3E[6B34]          <1>         lea di, [part_type.auto_act_tbl]         ; be marked as
  8349 00002A8E B90800              <1>         mov cx, NUM_OF_AUTO_ACT                  ; auto active.
  8350 00002A91 88F8                <1>         mov al, bh
  8351 00002A93 E8FBFB              <1>         call strchr                              ;
  8352 00002A96 58                  <1>         pop ax                                   ;
  8353 00002A97 7203                <1>         jc .not_auto_act                         ;
  8354                              <1> 
  8355 00002A99 0D0010              <1>         or ax, INFOFLAG_AUTOACTIVE
  8356                              <1>         
  8357                              <1> .not_auto_act:                                   ;
  8358 00002A9C 50                  <1>         push ax                                  ; check if it's a
  8359 00002A9D 8D3E[7334]          <1>         lea di, [part_type.hidden_tbl]           ; hidden partition.
  8360 00002AA1 B90700              <1>         mov cx, NUM_OF_HIDDEN                    ;
  8361 00002AA4 88F8                <1>         mov al, bh
  8362 00002AA6 E8E8FB              <1>         call strchr                              ;
  8363 00002AA9 58                  <1>         pop ax                                   ;
  8364 00002AAA 7206                <1>         jc .not_hidden                           ;
  8365                              <1> 
  8366 00002AAC 0D0002              <1>         or ax, INFOFLAG_HIDDEN                   ; set the hidden flag
  8367 00002AAF 80E70F              <1>         and bh, 0x0F                             ; clear the hidden signature
  8368                              <1>         
  8369                              <1> .not_hidden:
  8370 00002AB2 5F                  <1>         pop di
  8371 00002AB3 59                  <1>         pop cx
  8372                              <1> 
  8373 00002AB4 8905                <1>         mov [di + struc_bootrecord.flags], ax    ; fill the flags and type
  8374 00002AB6 887D04              <1>         mov [di + struc_bootrecord.type], bh
  8375                              <1> 
  8376 00002AB9 A98000              <1>         test ax, INFOFLAG_ISDRIVER
  8377 00002ABC 7507                <1>         jnz .no_abs_addr                         ; if it's floppy, abs_addr = 0
  8378                              <1>         
  8379 00002ABE 668B5C08            <1>         mov ebx, [si + struc_partition.relative_addr]    ;
  8380                              <1> 
  8381 00002AC2 6601D9              <1>         add ecx, ebx                                     ; ecx = abs_address
  8382                              <1>         
  8383                              <1> .no_abs_addr:
  8384 00002AC5 66894D0A            <1>         mov [di + struc_bootrecord.abs_addr], ecx
  8385                              <1> 
  8386 00002AC9 A98000              <1>         test ax, INFOFLAG_ISDRIVER
  8387 00002ACC 7511                <1>         jnz .isdriver
  8388                              <1> 
  8389 00002ACE A90001              <1>         test ax, INFOFLAG_LOGICAL
  8390 00002AD1 7406                <1>         jz .primary
  8391 00002AD3 8D36[1933]          <1>         lea si, [knl_strings.logical]               ; it's logical partition
  8392 00002AD7 EB2B                <1>         jmp short .fill_name                              ;
  8393                              <1> .primary:
  8394 00002AD9 8D36[1133]          <1>         lea si, [knl_strings.primary]               ; it's primary partition
  8395 00002ADD EB25                <1>         jmp short .fill_name
  8396                              <1> 
  8397                              <1> .isdriver:
  8398 00002ADF 80FA80              <1>         cmp dl, MIN_HD_ID
  8399 00002AE2 721C                <1>         jb .floppy
  8400                              <1> 
  8401 00002AE4 A90400              <1>         test ax, DRVFLAG_REMOVABLE
  8402 00002AE7 7411                <1>         jz .harddisk
  8403                              <1> 
  8404 00002AE9 A91000              <1> 	test ax, DRVFLAG_ISCDROM
  8405 00002AEC 7406                <1> 	jz .removable
  8406                              <1> 
  8407 00002AEE 8D36[3433]          <1> 	lea si, [knl_strings.cdrom]
  8408 00002AF2 EB10                <1> 	jmp short .fill_name
  8409                              <1> 
  8410                              <1> .removable:
  8411 00002AF4 8D36[2133]          <1>         lea si, [knl_strings.removable]
  8412 00002AF8 EB0A                <1>         jmp short .fill_name
  8413                              <1> 
  8414                              <1> .harddisk:
  8415 00002AFA 8D36[2B33]          <1>         lea si, [knl_strings.harddisk]              ; it's hard drive
  8416 00002AFE EB04                <1>         jmp short .fill_name
  8417                              <1> 
  8418                              <1> .floppy:
  8419 00002B00 8D36[0A33]          <1>         lea si, [knl_strings.floppy]                ; it's floppy drive
  8420                              <1> 
  8421                              <1> .fill_name:
  8422 00002B04 83C716              <1>         add di, struc_bootrecord.name
  8423 00002B07 B90F00              <1>         mov cx, 15
  8424 00002B0A E899FB              <1>         call strncpy
  8425                              <1> 
  8426 00002B0D A98000              <1>         test ax, INFOFLAG_ISDRIVER
  8427 00002B10 7509                <1>         jnz .end
  8428                              <1> 
  8429 00002B12 88F0                <1>         mov al, dh                                  ; append partition id
  8430 00002B14 30E4                <1>         xor ah, ah                                  ; at the end of the
  8431 00002B16 B103                <1>         mov cl, 3                                   ; name
  8432 00002B18 E8FEFA              <1>         call itoa                                   ;
  8433                              <1> 
  8434                              <1> .end:
  8435 00002B1B 6661                <1>         popad
  8436 00002B1D C3                  <1>         ret
  8437                              <1> 
  8438                              <1> ;==============================================================================
  8439                              <1> ;fill_special_record ---- fill the boot record for a special command
  8440                              <1> ;input:
  8441                              <1> ;      al = command id
  8442                              <1> ;      es:di -> buffer to store the boot record
  8443                              <1> ;output:
  8444                              <1> ;      es:di -> filled with boot record
  8445                              <1> ;==============================================================================
  8446                              <1> fill_special_record:
  8447 00002B1E 60                  <1> 	pusha
  8448 00002B1F FC                  <1>         cld
  8449                              <1> 
  8450 00002B20 50                  <1> 	push ax
  8451 00002B21 57                  <1>         push di                                  ; clear the boot record
  8452 00002B22 30C0                <1>         xor al, al                               ;
  8453 00002B24 B94000              <1>         mov cx, SIZE_OF_BOOTRECORD               ;
  8454 00002B27 F3AA                <1>         rep stosb                                ;
  8455 00002B29 5F                  <1>         pop di                                   ;
  8456 00002B2A 58                  <1> 	pop ax
  8457                              <1> 
  8458 00002B2B 830D08              <1> 	or word [di + struc_bootrecord.flags], INFOFLAG_ISSPECIAL
  8459 00002B2E 884504              <1> 	mov byte [di + struc_bootrecord.type], al
  8460 00002B31 83C716              <1> 	add di, struc_bootrecord.name
  8461                              <1> 
  8462 00002B34 31F6                <1> 	xor si, si
  8463                              <1> 
  8464 00002B36 3C02                <1> 	cmp al, SPREC_POWEROFF
  8465 00002B38 7503                <1> 	jne .not_poweroff
  8466 00002B3A BE[4333]            <1> 	mov si, knl_strings.poweroff
  8467                              <1> 
  8468                              <1> .not_poweroff:
  8469 00002B3D 3C03                <1> 	cmp al, SPREC_RESTART
  8470 00002B3F 7503                <1> 	jne .not_restart
  8471 00002B41 BE[4D33]            <1> 	mov si, knl_strings.restart
  8472                              <1> 
  8473                              <1> .not_restart:
  8474 00002B44 3C01                <1> 	cmp al, SPREC_QUIT
  8475 00002B46 7503                <1> 	jne .not_quit
  8476 00002B48 BE[5433]            <1> 	mov si, knl_strings.quit
  8477                              <1> 
  8478                              <1> .not_quit:
  8479 00002B4B 3C00                <1> 	cmp al, SPREC_BOOTPREV
  8480 00002B4D 7503                <1> 	jne .not_bootprev
  8481 00002B4F BE[6133]            <1> 	mov si, knl_strings.bootprev
  8482                              <1> 
  8483                              <1> .not_bootprev:
  8484 00002B52 B90F00              <1> 	mov cx, 15
  8485 00002B55 E84EFB              <1> 	call strncpy
  8486 00002B58 61                  <1> 	popa
  8487 00002B59 C3                  <1> 	ret
  8488                              <1> 
  8489                              <1> ;==============================================================================
  8490                              <1> ;get_parttype_str ---- get partition type string
  8491                              <1> ;input:
  8492                              <1> ;      al = partition type
  8493                              <1> ;output:
  8494                              <1> ;      ds:si -> partition type string
  8495                              <1> ;==============================================================================
  8496                              <1> get_parttype_str:
  8497 00002B5A 57                  <1>         push di
  8498 00002B5B 51                  <1>         push cx
  8499 00002B5C 8D3E[7533]          <1>         lea di, [part_type.id_tbl]
  8500 00002B60 B91A00              <1>         mov cx, NUM_OF_ID
  8501 00002B63 E82BFB              <1>         call strchr
  8502 00002B66 C1E103              <1>         shl cx, 3                   ; cx = cx * 8
  8503 00002B69 8D36[8F33]          <1>         lea si, [part_type.str_tbl]
  8504 00002B6D 01CE                <1>         add si, cx
  8505 00002B6F 59                  <1>         pop cx
  8506 00002B70 5F                  <1>         pop di
  8507 00002B71 C3                  <1>         ret
  8508                              <1> 
  8509                              <1> ;==============================================================================
  8510                              <1> ;check_bootrecord ---- check if the boot record is ok
  8511                              <1> ;input:
  8512                              <1> ;      ds:si -> boot record
  8513                              <1> ;output:
  8514                              <1> ;      cf = 0 the boot record is ok
  8515                              <1> ;      cf = 1 the boot record cannot boot
  8516                              <1> ;==============================================================================
  8517                              <1> check_bootrecord:
  8518 00002B72 6660                <1>         pushad                           ; save registers
  8519 00002B74 09F6                <1> 	or si, si
  8520 00002B76 0F84F500            <1> 	jmpz .bad_record
  8521                              <1> 
  8522 00002B7A FC                  <1>         cld
  8523                              <1> 
  8524                              <1> ;============= check special record ===========
  8525 00002B7B 8B04                <1>         mov ax, [si + struc_bootrecord.flags]        ; get record flags
  8526 00002B7D A90800              <1> 	test ax, INFOFLAG_ISSPECIAL
  8527 00002B80 0F842100            <1> 	jmpz .normal_record
  8528                              <1> 
  8529 00002B84 8A5C04              <1> 	mov bl, [si + struc_bootrecord.type]
  8530 00002B87 80FB04              <1> 	cmp bl, NUM_OF_SPREC
  8531 00002B8A 0F83E100            <1> 	jmpnb .bad_record
  8532                              <1> 
  8533 00002B8E 80FB02              <1> 	cmp bl, SPREC_POWEROFF
  8534 00002B91 0F850300            <1> 	jmpne .check_prev
  8535                              <1> 
  8536                              <1> 	;call check_apm_bios
  8537 00002B95 E9D800              <1> 	jmp .end
  8538                              <1> 
  8539                              <1> .check_prev:
  8540 00002B98 80FB00              <1> 	cmp bl, SPREC_BOOTPREV
  8541 00002B9B 0F85CD00            <1> 	jmpne .good_record
  8542                              <1> 
  8543 00002B9F E84D07              <1> 	call check_prev_mbr
  8544 00002BA2 E9CB00              <1> 	jmp .end
  8545                              <1> 
  8546                              <1> .normal_record:
  8547                              <1> ;============= check driver ===================
  8548 00002BA5 8B5402              <1>         mov dx, [si + struc_bootrecord.drive_id]     ; get drive id and part id
  8549 00002BA8 8D3E[AE54]          <1>         lea di, [hdio_tmp.driveinfo]
  8550 00002BAC E8E808              <1>         call get_drive_info                          ; check if the drive ok
  8551 00002BAF 0F82BC00            <1>         jmpc .bad_record
  8552                              <1> 
  8553 00002BB3 50                  <1>         push ax
  8554 00002BB4 8A6501              <1>         mov ah, [di + struc_driveinfo.flags]         ;
  8555 00002BB7 251515              <1>         and ax, ( DRVFLAG_MASK << 8) | DRVFLAG_MASK  ; check if the flags was
  8556 00002BBA 38E0                <1>         cmp al, ah                                   ; changed
  8557 00002BBC 58                  <1>         pop ax                                       ;
  8558 00002BBD 0F85AE00            <1>         jmpne .bad_record
  8559                              <1> 
  8560 00002BC1 A98000              <1>         test ax, INFOFLAG_ISDRIVER                   ; if it's a driver then ok
  8561 00002BC4 0F85A400            <1>         jmpnz .good_record
  8562                              <1> 
  8563                              <1> ;============ check partition =================
  8564                              <1> ; now we know it's a partiton!
  8565 00002BC8 8A5C04              <1>         mov bl, [si + struc_bootrecord.type]
  8566 00002BCB 08DB                <1>         or bl, bl                                    
  8567 00002BCD 0F849E00            <1>         jmpz .bad_record                               ; it's free, bad!
  8568                              <1> 
  8569                              <1> .not_free:
  8570 00002BD1 A90001              <1>         test ax, INFOFLAG_LOGICAL                    ; it's logical partition
  8571 00002BD4 7509                <1>         jnz .logical_part                            ;
  8572                              <1> 
  8573 00002BD6 B90400              <1>         mov cx, NUM_OF_PRI_DENY                      ;
  8574 00002BD9 8D3E[6734]          <1>         lea di, [part_type.pri_deny_tbl]             ;
  8575 00002BDD EB07                <1>         jmp short .check_type                        ; check if the partition
  8576                              <1> 
  8577                              <1> .logical_part:                                       ; type is in the deny
  8578 00002BDF B90400              <1>         mov cx, NUM_OF_LOG_DENY                      ; table
  8579 00002BE2 8D3E[6734]          <1>         lea di, [part_type.log_deny_tbl]             ;
  8580                              <1> 
  8581                              <1> .check_type:                                         ;
  8582 00002BE6 50                  <1>         push ax
  8583 00002BE7 88D8                <1>         mov al, bl                                   ; al = partition type
  8584 00002BE9 E8A5FA              <1>         call strchr                                  ;
  8585 00002BEC 58                  <1>         pop ax
  8586 00002BED 0F837E00            <1>         jmpnc .bad_record                              ; this type is denied!
  8587                              <1> 
  8588                              <1> ;================ check in father ===================        
  8589                              <1> ; read father's partition table into buffer and check it
  8590 00002BF1 50                  <1>         push ax                                      ; save flags
  8591                              <1> 
  8592 00002BF2 668B5C06            <1>         mov ebx, [si + struc_bootrecord.father_abs_addr]
  8593                              <1> 
  8594 00002BF6 B80102              <1>         mov ax, (INT13H_READ << 8 ) | 0x01           ; read the first sector
  8595 00002BF9 8D3E[D454]          <1>         lea di, [knl_tmp.disk_buf1]                           ; into buffer
  8596 00002BFD E83B0A              <1>         call disk_access                             ;
  8597 00002C00 58                  <1>         pop ax                                       ; load flags
  8598 00002C01 0F826A00            <1>         jmpc .bad_record
  8599                              <1> 
  8600 00002C05 81BDFE0155AA        <1>         cmp word [di + 510], 0AA55h    ; check if the father is
  8601 00002C0B 7562                <1>         jne .bad_record                              ; good
  8602                              <1> 
  8603 00002C0D 668B4C0A            <1>         mov ecx, [si + struc_bootrecord.abs_addr]    ; get partition's abs addr
  8604 00002C11 6629D9              <1>         sub ecx, ebx                                 ; calculate relative address
  8605 00002C14 6689CB              <1> 	mov ebx, ecx
  8606                              <1> 
  8607 00002C17 81C7BE01            <1>         add di, 1BEh                         ; point to father's partition
  8608                              <1>                                                      ; table
  8609 00002C1B B90400              <1>         mov cx, 4
  8610                              <1>         
  8611                              <1> .search_in_father:                                   ; find the record in
  8612 00002C1E 807D0400            <1> 	cmp byte [di + struc_partition.type], 0      ;
  8613 00002C22 7406                <1> 	je .invalid_entry
  8614 00002C24 66395D08            <1>         cmp [di + struc_partition.relative_addr], ebx; father's partition
  8615 00002C28 7407                <1>         je .found_it     
  8616                              <1> .invalid_entry:                                      ; table
  8617 00002C2A 83C710              <1>         add di, SIZE_OF_PARTITION                    ;
  8618 00002C2D E2EF                <1>         loop .search_in_father                       ;
  8619 00002C2F EB3E                <1>         jmp .bad_record                        ; not found! it's bad.
  8620                              <1>         
  8621                              <1> .found_it:
  8622                              <1> 
  8623                              <1> ;adjust some flags of the boot record.
  8624                              <1> ;there is no other place to suit these codes,
  8625                              <1> ;so I place them here :-(
  8626                              <1> 
  8627 00002C31 50                  <1>         push ax                                      ;
  8628 00002C32 57                  <1>         push di                                      ; hidden partition
  8629 00002C33 8A5D04              <1>         mov bl, [di + struc_partition.type]          ; check if it's a
  8630 00002C36 88D8                <1>         mov al, bl                                   ;
  8631 00002C38 8D3E[7334]          <1>         lea di, [part_type.hidden_tbl]               ;
  8632 00002C3C B90700              <1>         mov cx, NUM_OF_HIDDEN                        ;
  8633 00002C3F E84FFA              <1>         call strchr                                  ;
  8634 00002C42 5F                  <1>         pop di                                       ;
  8635 00002C43 58                  <1>         pop ax                                       ;
  8636 00002C44 7208                <1>         jc .not_hidden                               ;
  8637 00002C46 80E30F              <1>         and bl, 0x0F
  8638 00002C49 0D0002              <1>         or ax, INFOFLAG_HIDDEN                       ; set hidden flag.
  8639 00002C4C EB03                <1>         jmp short .validate_type
  8640                              <1> 
  8641                              <1> .not_hidden:
  8642 00002C4E 25FFFD              <1>         and ax, ~ INFOFLAG_HIDDEN                    ; clear hidden flag.
  8643                              <1> 
  8644                              <1> .validate_type:
  8645                              <1> 
  8646                              <1> %ifdef STRICT_PART_CHECK
  8647                              <1>         cmp bl, [si + struc_bootrecord.type]         ; check the partition type
  8648                              <1>         jne .bad_record                              ; wrong type!
  8649                              <1> %else
  8650 00002C51 885C04              <1> 	mov [si + struc_bootrecord.type], bl         ; set partition type
  8651                              <1> %endif
  8652                              <1> 
  8653                              <1> .type_ok:
  8654 00002C54 52                  <1>         push dx
  8655 00002C55 A90020              <1>         test ax, INFOFLAG_SWAPDRVID                  ; check if swap driver id
  8656 00002C58 7403                <1>         jz .no_swapid
  8657 00002C5A 80E280              <1>         and dl, 0x80
  8658                              <1> 
  8659                              <1> .no_swapid:
  8660 00002C5D 3A15                <1>         cmp dl, [di + struc_partition.state]         ; check if the partition
  8661 00002C5F 5A                  <1>         pop dx
  8662 00002C60 7505                <1>         jne .not_active                              ; is active.
  8663 00002C62 0D0008              <1>         or ax, INFOFLAG_ACTIVE                       ; should change to
  8664 00002C65 EB03                <1>         jmp short .adjust_flags                      ; cmp 0x80, byte [state] ?
  8665                              <1> 
  8666                              <1> .not_active:
  8667 00002C67 25FFF7              <1>         and ax, ~ INFOFLAG_ACTIVE
  8668                              <1> 
  8669                              <1> .adjust_flags:
  8670 00002C6A 8904                <1>         mov [si + struc_bootrecord.flags], ax
  8671                              <1> 
  8672                              <1> ;==================  check partition itself ==============
  8673                              <1> .check_inside:                                       ; check partition itself
  8674                              <1> 
  8675                              <1> %ifdef STRICT_PART_CHECK
  8676                              <1>         mov ebx, [si + struc_bootrecord.abs_addr]
  8677                              <1> 
  8678                              <1>         lea di, [knl_tmp.disk_buf1]
  8679                              <1>         mov ax, (INT13H_READ << 8 ) | 0x01           ; read the first sector
  8680                              <1>         call disk_access                             ; into buffer
  8681                              <1>         jc .bad_record                               ; read error!
  8682                              <1>         
  8683                              <1>         cmp word [di + 510], 0AA55h    ; check if the paritition
  8684                              <1>         jne .bad_record                              ; is good
  8685                              <1> %endif
  8686                              <1> 
  8687                              <1> .good_record:
  8688 00002C6C F8                  <1>         clc
  8689 00002C6D EB01                <1>         jmp short .end
  8690                              <1> 
  8691                              <1> .bad_record:
  8692 00002C6F F9                  <1>         stc
  8693                              <1> .end:
  8694 00002C70 6661                <1>         popad
  8695 00002C72 C3                  <1>         ret
  8696                              <1> 
  8697                              <1> ;==============================================================================
  8698                              <1> ;search_drv_records ---- search all driver records 
  8699                              <1> ;input:
  8700                              <1> ;      dl = beginning driver id.
  8701                              <1> ;      cl = max number of boot records could be searched
  8702                              <1> ;      es:di -> buffer to store boot records. 
  8703                              <1> ;output:
  8704                              <1> ;      ch = number of the valid boot records have searched
  8705                              <1> ;==============================================================================
  8706                              <1> search_drv_records:
  8707 00002C73 30ED                <1>        xor ch, ch
  8708 00002C75 882E[B954]          <1>        mov [knl_tmp.good_record_num], ch
  8709 00002C79 880E[BA54]          <1>        mov [knl_tmp.max_record_num], cl
  8710 00002C7D 882E[C054]          <1>        mov [knl_tmp.floppy_num], ch
  8711 00002C81 08C9                <1>        or cl, cl 
  8712 00002C83 7501                <1>        jnz .can_search_more
  8713 00002C85 C3                  <1>        ret
  8714                              <1> 
  8715                              <1> .can_search_more:
  8716 00002C86 60                  <1>        pusha
  8717 00002C87 6631DB              <1>        xor ebx, ebx
  8718 00002C8A 30F6                <1>        xor dh, dh
  8719                              <1> 
  8720                              <1> .loop_search:
  8721 00002C8C E8EE08              <1>        call get_drive_flags
  8722 00002C8F 722C                <1>        jc .search_next
  8723                              <1> 
  8724 00002C91 A801                <1>        test al, DRVFLAG_DRIVEOK
  8725 00002C93 7228                <1>        jc .search_next
  8726                              <1> 
  8727                              <1> %ifdef LIMIT_FLOPPY_NUMBER
  8728 00002C95 80FA80              <1>        cmp dl, MIN_HD_ID
  8729 00002C98 730F                <1>        jae .isharddisk
  8730 00002C9A A804                <1>        test al, DRVFLAG_REMOVABLE
  8731 00002C9C 740B                <1>        jz .isharddisk
  8732                              <1> 
  8733 00002C9E FE06[C054]          <1>        inc byte [knl_tmp.floppy_num]
  8734 00002CA2 803E[C054]02        <1>        cmp byte [knl_tmp.floppy_num], MAX_FLOPPY_NUM
  8735 00002CA7 7714                <1>        ja .search_next
  8736                              <1> 
  8737                              <1> .isharddisk:
  8738                              <1> %endif
  8739                              <1> 
  8740 00002CA9 E898FD              <1>        call fill_bootrecord
  8741 00002CAC FE06[B954]          <1>        inc byte [knl_tmp.good_record_num]
  8742 00002CB0 8A26[B954]          <1>        mov ah, [knl_tmp.good_record_num]                ; check if there are any
  8743 00002CB4 3A26[BA54]          <1>        cmp ah, [knl_tmp.max_record_num]                 ; more space.
  8744 00002CB8 7309                <1>        jae .end
  8745                              <1> 
  8746 00002CBA 83C740              <1>        add di, SIZE_OF_BOOTRECORD
  8747                              <1> 
  8748                              <1> .search_next:
  8749 00002CBD FEC2                <1>        inc dl
  8750 00002CBF 08D2                <1>        or dl, dl
  8751 00002CC1 75C9                <1>        jnz .loop_search
  8752                              <1> 
  8753                              <1> .end:
  8754 00002CC3 61                  <1>        popa
  8755 00002CC4 8A2E[B954]          <1>        mov ch, [knl_tmp.good_record_num]
  8756 00002CC8 C3                  <1>        ret
  8757                              <1> 
  8758                              <1> 
  8759                              <1> ;==============================================================================
  8760                              <1> ;search_part_records ---- search all boot records in a drive
  8761                              <1> ;input:
  8762                              <1> ;      dl = drive id
  8763                              <1> ;      cl = max number of boot records could be searched
  8764                              <1> ;      es:di -> buffer to store boot records
  8765                              <1> ;output:
  8766                              <1> ;      ch = number of the valid boot records have searched
  8767                              <1> ;==============================================================================
  8768                              <1> search_part_records:
  8769 00002CC9 30ED                <1>         xor ch, ch
  8770 00002CCB 882E[B954]          <1>         mov [knl_tmp.good_record_num], ch
  8771 00002CCF 880E[BA54]          <1>         mov [knl_tmp.max_record_num], cl
  8772 00002CD3 08C9                <1>         or cl, cl
  8773 00002CD5 7501                <1>         jnz .can_search_more                         ; check if there are any
  8774 00002CD7 C3                  <1>         ret                                          ; space to search more.
  8775                              <1>         
  8776                              <1> .can_search_more:
  8777 00002CD8 60                  <1>         pusha
  8778                              <1> 
  8779 00002CD9 6631DB              <1>         xor ebx, ebx                                 ; clear some stuff
  8780 00002CDC 30F6                <1>         xor dh, dh                                   ;
  8781                              <1> 
  8782 00002CDE E89C08              <1>         call get_drive_flags                         ; get the drive flags.
  8783 00002CE1 0F82A400            <1>         jmpc .end
  8784                              <1>         
  8785 00002CE5 A804                <1>         test al, DRVFLAG_REMOVABLE                  ; check if it's a floppy
  8786 00002CE7 0F859E00            <1>         jmpnz .end
  8787 00002CEB A810                <1> 	test al, DRVFLAG_ISCDROM
  8788 00002CED 0F859800            <1> 	jmpnz .end
  8789                              <1> 
  8790                              <1> ;search partitions
  8791                              <1> .search_partitions:
  8792 00002CF1 57                  <1>         push di
  8793 00002CF2 8D3E[D45C]          <1>         lea di, [knl_tmp.disk_buf2]
  8794 00002CF6 89FE                <1>         mov si, di
  8795 00002CF8 B80102              <1>         mov ax, (INT13H_READ << 8 ) | 0x01           ; read the first sector
  8796 00002CFB E83D09              <1>         call disk_access                             ; into buffer
  8797 00002CFE 5F                  <1>         pop di
  8798 00002CFF 0F828600            <1>         jmpc .end
  8799                              <1>         
  8800 00002D03 81BCFE0155AA        <1>         cmp word [si + 510], 0AA55h    ; check if the partition
  8801 00002D09 0F857C00            <1>         jmpne .end                                   ; table is good
  8802                              <1>         
  8803 00002D0D 81C6BE01            <1>         add si, 1BEh                         ; point to partition table
  8804                              <1>         
  8805 00002D11 30C0                <1>         xor al, al
  8806                              <1> 
  8807                              <1> .loop_search_part:
  8808 00002D13 FEC0                <1>         inc al
  8809                              <1> 
  8810 00002D15 6609DB              <1>         or ebx, ebx                                  ; check if it's primary
  8811 00002D18 7508                <1>         jnz .logical_part
  8812                              <1>         
  8813 00002D1A 88C6                <1>         mov dh, al                                   ;
  8814 00002D1C 8836[BB54]          <1>         mov [knl_tmp.part_id], dh                        ;
  8815 00002D20 EB04                <1>         jmp short .cont_fill_it                      ; get the partition id
  8816                              <1>                                                      ;
  8817                              <1> .logical_part:                                       ;
  8818 00002D22 8A36[BB54]          <1>         mov dh, [knl_tmp.part_id]                        ;
  8819                              <1>         
  8820                              <1> .cont_fill_it:
  8821 00002D26 E81BFD              <1>         call fill_bootrecord                         ; fill the boot record
  8822 00002D29 87F7                <1>         xchg si, di
  8823 00002D2B E844FE              <1>         call check_bootrecord                        ; check if it's valid
  8824 00002D2E 87F7                <1>         xchg si, di
  8825 00002D30 7211                <1>         jc .cont_search_part
  8826                              <1> 
  8827                              <1> ; find a valid boot record!
  8828                              <1> 
  8829 00002D32 FE06[B954]          <1>         inc byte [knl_tmp.good_record_num]
  8830 00002D36 8A26[B954]          <1>         mov ah, [knl_tmp.good_record_num]                ; check if there are any
  8831 00002D3A 3A26[BA54]          <1>         cmp ah, [knl_tmp.max_record_num]                 ; more space.
  8832 00002D3E 7349                <1>         jae .end
  8833                              <1> 
  8834 00002D40 83C740              <1>         add di, SIZE_OF_BOOTRECORD                   ; move the pointer to
  8835                              <1> 
  8836                              <1> .cont_search_part:
  8837 00002D43 83C610              <1>         add si, SIZE_OF_PARTITION
  8838 00002D46 3C04                <1>         cmp al, 4
  8839 00002D48 72C9                <1>         jb .loop_search_part
  8840                              <1>         
  8841 00002D4A 83EE40              <1>         sub si, SIZE_OF_PARTITION * 4
  8842                              <1>         
  8843                              <1> ;now go ahead to search logical partitons
  8844 00002D4D 30E4                <1>         xor ah, ah
  8845                              <1> 
  8846                              <1> .loop_search_ext:
  8847 00002D4F FEC4                <1>         inc ah
  8848 00002D51 8A4404              <1>         mov al, [si + struc_partition.type]
  8849                              <1>         
  8850 00002D54 3C05                <1>         cmp al, 0x05                                 ; check if it's
  8851 00002D56 7412                <1>         je .found_ext                                ; extended
  8852 00002D58 3C0F                <1>         cmp al, 0x0F                                 ; partition
  8853 00002D5A 740E                <1>         je .found_ext                                ;
  8854 00002D5C 3C85                <1>         cmp al, 0x85                                 ;
  8855 00002D5E 740A                <1>         je .found_ext                                ;
  8856                              <1> 
  8857 00002D60 83C610              <1>         add si, SIZE_OF_PARTITION
  8858 00002D63 80FC04              <1>         cmp ah, 4
  8859 00002D66 72E7                <1>         jb .loop_search_ext
  8860 00002D68 EB1F                <1>         jmp short .end
  8861                              <1> 
  8862                              <1> ;there are some extended partitions, find inside it!
  8863                              <1> .found_ext:
  8864 00002D6A FE06[BB54]          <1>         inc byte [knl_tmp.part_id]                       ; increase the partition id.
  8865 00002D6E 668B4C08            <1> 	mov ecx, [si + struc_partition.relative_addr]
  8866                              <1> 
  8867 00002D72 6609DB              <1>         or ebx, ebx                                  ; all of the later logical
  8868 00002D75 7407                <1>         jz .first_ext                                ; extended partitions' relative
  8869 00002D77 668B1E[BC54]        <1>         mov ebx, [knl_tmp.logi_father]                   ; address are based on the
  8870 00002D7C EB05                <1>         jmp short .calc_next_father                  ; first primary extended
  8871                              <1>                                                      ; partition
  8872                              <1> .first_ext:
  8873 00002D7E 66890E[BC54]        <1>         mov [knl_tmp.logi_father], ecx
  8874                              <1> 
  8875                              <1> .calc_next_father:
  8876 00002D83 6601CB              <1>         add ebx, ecx                                 ; calculate the next
  8877                              <1>                                                      ; father's abs
  8878                              <1>                                                      ; address
  8879                              <1>         
  8880 00002D86 E968FF              <1>         jmp .search_partitions                       ; continue search
  8881                              <1> 
  8882                              <1> .end:
  8883 00002D89 61                  <1>         popa
  8884 00002D8A 8A2E[B954]          <1>         mov ch, [knl_tmp.good_record_num]
  8885 00002D8E C3                  <1>         ret
  8886                              <1>         
  8887                              <1> ;==============================================================================
  8888                              <1> ;search_specials ---- search all special boot records
  8889                              <1> ;input:
  8890                              <1> ;      cl = max number of boot records could be searched
  8891                              <1> ;      es:di -> buffer to store boot records
  8892                              <1> ;output:
  8893                              <1> ;      ch = number of the valid boot records have searched
  8894                              <1> ;==============================================================================
  8895                              <1> search_specials:
  8896 00002D8F 50                  <1> 	push ax
  8897 00002D90 52                  <1> 	push dx
  8898 00002D91 56                  <1> 	push si
  8899                              <1> 
  8900 00002D92 88CC                <1> 	mov ah, cl
  8901 00002D94 80FC04              <1> 	cmp ah, NUM_OF_SPREC
  8902 00002D97 7202                <1> 	jb .do_search
  8903 00002D99 B404                <1> 	mov ah, NUM_OF_SPREC
  8904                              <1> 
  8905                              <1> .do_search:
  8906 00002D9B 30ED                <1> 	xor ch, ch
  8907 00002D9D 30C0                <1> 	xor al, al
  8908 00002D9F 08E4                <1> 	or ah, ah
  8909 00002DA1 7415                <1> 	jz .end
  8910                              <1> 
  8911                              <1> .loop_search:
  8912 00002DA3 E878FD              <1> 	call fill_special_record
  8913 00002DA6 89FE                <1> 	mov si, di
  8914 00002DA8 E8C7FD              <1> 	call check_bootrecord
  8915 00002DAB 7205                <1> 	jc .search_next
  8916 00002DAD 83C740              <1> 	add di, SIZE_OF_BOOTRECORD
  8917 00002DB0 FEC5                <1> 	inc ch
  8918                              <1> .search_next:
  8919 00002DB2 FEC0                <1> 	inc al
  8920 00002DB4 38E0                <1> 	cmp al, ah
  8921 00002DB6 72EB                <1> 	jb .loop_search
  8922                              <1> .end:
  8923 00002DB8 5E                  <1> 	pop si
  8924 00002DB9 5A                  <1> 	pop dx
  8925 00002DBA 58                  <1> 	pop ax
  8926 00002DBB C3                  <1> 	ret
  8927                              <1> 
  8928                              <1> ;==============================================================================
  8929                              <1> ;search_records ---- search all boot records
  8930                              <1> ;input:
  8931                              <1> ;      al = 0 all records, al = 1 only partitions
  8932                              <1> ;      cl = max number of boot records could be searched
  8933                              <1> ;      es:di -> buffer to store boot records
  8934                              <1> ;output:
  8935                              <1> ;      ch = number of the valid boot records have searched
  8936                              <1> ;==============================================================================
  8937                              <1> search_records:
  8938 00002DBC 57                  <1> 	push di
  8939 00002DBD 52                  <1> 	push dx
  8940 00002DBE 53                  <1> 	push bx
  8941 00002DBF 50                  <1> 	push ax
  8942                              <1> 
  8943 00002DC0 31D2                <1>         xor dx, dx
  8944                              <1> 
  8945 00002DC2 08C0                <1> 	or al, al
  8946 00002DC4 7516                <1> 	jnz .search_parts
  8947                              <1> 
  8948 00002DC6 E8C6FF              <1> 	call search_specials
  8949 00002DC9 28E9                <1> 	sub cl, ch
  8950 00002DCB 88EE                <1> 	mov dh, ch
  8951                              <1> 
  8952 00002DCD B340                <1>         mov bl, SIZE_OF_BOOTRECORD
  8953                              <1> 
  8954 00002DCF E8A1FE              <1>         call search_drv_records
  8955 00002DD2 28E9                <1>         sub cl, ch
  8956 00002DD4 88E8                <1>         mov al, ch
  8957 00002DD6 00EE                <1> 	add dh, ch
  8958 00002DD8 F6E3                <1>         mul bl
  8959 00002DDA 01C7                <1>         add di, ax
  8960                              <1> 
  8961                              <1> .search_parts:
  8962 00002DDC E80700              <1> 	call search_all_partitions
  8963 00002DDF 00F5                <1> 	add ch, dh
  8964 00002DE1 58                  <1> 	pop ax
  8965 00002DE2 5B                  <1> 	pop bx
  8966 00002DE3 5A                  <1> 	pop dx
  8967 00002DE4 5F                  <1> 	pop di
  8968 00002DE5 C3                  <1> 	ret
  8969                              <1> 
  8970                              <1> ;==============================================================================
  8971                              <1> ;search_all_partitions ---- search all partitions in all drives
  8972                              <1> ;input:
  8973                              <1> ;      cl = max number of boot records could be searched
  8974                              <1> ;      dl = lowest drive id to be searched
  8975                              <1> ;      es:di -> buffer to store boot records
  8976                              <1> ;output:
  8977                              <1> ;      ch = number of the valid boot records have searched
  8978                              <1> ;==============================================================================
  8979                              <1> search_all_partitions:
  8980 00002DE6 50                  <1>         push ax
  8981 00002DE7 52                  <1> 	push dx
  8982 00002DE8 30F6                <1> 	xor dh, dh
  8983 00002DEA B340                <1>         mov bl, SIZE_OF_BOOTRECORD
  8984                              <1> 
  8985                              <1> .loop_search:
  8986 00002DEC E8DAFE              <1>         call search_part_records
  8987 00002DEF 28E9                <1>         sub cl, ch
  8988 00002DF1 00EE                <1>         add dh, ch                                   ; count the searched boot
  8989                              <1>                                                      ; records
  8990 00002DF3 88E8                <1>         mov al, ch                                   ;
  8991 00002DF5 F6E3                <1>         mul bl                                       ; adjust the pointer (di)
  8992 00002DF7 01C7                <1>         add di, ax                                   ;
  8993 00002DF9 FEC2                <1>         inc dl
  8994 00002DFB 08D2                <1>         or dl, dl
  8995 00002DFD 75ED                <1>         jnz .loop_search
  8996 00002DFF 88F5                <1>         mov ch, dh
  8997 00002E01 5A                  <1> 	pop dx
  8998 00002E02 58                  <1>         pop ax
  8999 00002E03 C3                  <1>         ret
  9000                              <1> 
  9001                              <1> 
  9002                              <1> ;==============================================================================
  9003                              <1> ;get_record_typestr ---- get a record's type string
  9004                              <1> ;input:
  9005                              <1> ;      ds:si -> the record
  9006                              <1> ;      es:di -> the buffer to store the type string
  9007                              <1> ;output:
  9008                              <1> ;      none
  9009                              <1> ;==============================================================================
  9010                              <1> get_record_typestr:
  9011 00002E04 60                  <1>         pusha
  9012 00002E05 8B04                <1>         mov ax, [si + struc_bootrecord.flags]
  9013 00002E07 8A5C04              <1>         mov bl, [si + struc_bootrecord.type]
  9014 00002E0A 8B5402              <1>         mov dx, [si + struc_bootrecord.drive_id]
  9015                              <1> 
  9016 00002E0D A90800              <1> 	test ax, INFOFLAG_ISSPECIAL
  9017 00002E10 751A                <1> 	jnz .special
  9018                              <1> 
  9019 00002E12 A98000              <1>         test ax, INFOFLAG_ISDRIVER
  9020 00002E15 7430                <1>         jz .partition
  9021                              <1> 
  9022 00002E17 A90400              <1>         test ax, DRVFLAG_REMOVABLE
  9023 00002E1A 741C                <1>         jz .harddisk
  9024                              <1> 
  9025 00002E1C F6C280              <1>         test dl, 0x80
  9026 00002E1F 741D                <1>         jz .floppy
  9027                              <1> 
  9028 00002E21 A91000              <1> 	test ax, DRVFLAG_ISCDROM
  9029 00002E24 740C                <1> 	jz .removable
  9030                              <1> 
  9031 00002E26 8D36[3433]          <1> 	lea si, [knl_strings.cdrom]
  9032 00002E2A EB16                <1> 	jmp short .filldrv
  9033                              <1> 
  9034                              <1> .special:
  9035 00002E2C 8D36[3B33]          <1> 	lea si, [knl_strings.special]
  9036 00002E30 EB10                <1> 	jmp short .filldrv
  9037                              <1> 
  9038                              <1> .removable:
  9039 00002E32 8D36[2133]          <1>         lea si, [knl_strings.removable]
  9040 00002E36 EB0A                <1>         jmp short .filldrv
  9041                              <1> 
  9042                              <1> .harddisk:
  9043 00002E38 8D36[2B33]          <1>         lea si, [knl_strings.harddisk]
  9044 00002E3C EB04                <1>         jmp short .filldrv
  9045                              <1> 
  9046                              <1> .floppy:
  9047 00002E3E 8D36[0A33]          <1>         lea si, [knl_strings.floppy]
  9048                              <1> 
  9049                              <1> .filldrv:
  9050 00002E42 E87BF8              <1>         call strcpy
  9051 00002E45 EB27                <1>         jmp short .end
  9052                              <1> 
  9053                              <1> .partition:
  9054 00002E47 A90001              <1>         test ax, INFOFLAG_LOGICAL
  9055 00002E4A 7406                <1>         jz short .primary
  9056                              <1> 
  9057 00002E4C 8D36[1933]          <1>         lea si, [knl_strings.logical]
  9058 00002E50 EB04                <1>         jmp short .fillpart
  9059                              <1> 
  9060                              <1> .primary:
  9061 00002E52 8D36[1133]          <1>         lea si, [knl_strings.primary]
  9062                              <1> 
  9063                              <1> .fillpart:
  9064 00002E56 E867F8              <1>         call strcpy
  9065                              <1> 
  9066 00002E59 C7052028            <1>         mov word [di], ' ('
  9067 00002E5D 47                  <1>         inc di
  9068 00002E5E 47                  <1>         inc di
  9069                              <1> 
  9070 00002E5F 88D8                <1>         mov al, bl
  9071 00002E61 E8F6FC              <1>         call get_parttype_str
  9072 00002E64 E859F8              <1>         call strcpy
  9073 00002E67 C60529              <1>         mov byte [di], ')'
  9074 00002E6A 47                  <1>         inc di
  9075 00002E6B 30C0                <1>         xor al, al
  9076 00002E6D AA                  <1>         stosb
  9077                              <1> 
  9078                              <1> .end:
  9079 00002E6E 61                  <1>         popa
  9080 00002E6F C3                  <1>         ret
  9081                              <1> 
  9082                              <1> ;==============================================================================
  9083                              <1> ;get_record_string ---- get a record's string
  9084                              <1> ;input:
  9085                              <1> ;      ds:si -> the record
  9086                              <1> ;      es:di -> buffer to store the string
  9087                              <1> ;      al =1    don't draw flags
  9088                              <1> ;      al =2    don't draw flags and number
  9089                              <1> ;      al =3    don't draw flags and type
  9090                              <1> ;
  9091                              <1> ;output:
  9092                              <1> ;      none
  9093                              <1> ;
  9094                              <1> ;notes:
  9095                              <1> ; the string layout is:
  9096                              <1> ; pSkXaAhHlD  128 01  (Type )  Partition Name.
  9097                              <1> ; where :
  9098                              <1> ; p  is password flag, means have password.
  9099                              <1> ; S  is schedule flag, means have boot schedule set.
  9100                              <1> ; k  is keystrokes flag, means have keystrokes set.
  9101                              <1> ; X  is swap driver id flag, means the driver id will be swap to the bootable
  9102                              <1> ;    id when boot this record.
  9103                              <1> ; aA is active flags, a means auto active, A means active
  9104                              <1> ; hH is hidden flags, h means auto hide, H means hidden
  9105                              <1> ; lD is other flags, L means it's Logical Partition, D means it's Disk Driver 
  9106                              <1> ; 128 is the drive id
  9107                              <1> ; 01 is the partition id
  9108                              <1> ; (Type ) is the type of this partition, 7 bytes
  9109                              <1> ; Partition Name is the name of this partition, 15 bytes
  9110                              <1> ;==============================================================================
  9111                              <1> get_record_string:
  9112 00002E70 60                  <1>         pusha
  9113 00002E71 FC                  <1>         cld
  9114                              <1> 
  9115 00002E72 668B4C0E            <1>         mov ecx, [si + struc_bootrecord.password]
  9116 00002E76 8B1C                <1>         mov bx, [si + struc_bootrecord.flags]
  9117                              <1> 
  9118 00002E78 88C4                <1> 	mov ah, al
  9119                              <1> 
  9120 00002E7A B020                <1> 	mov al, ' '
  9121 00002E7C AA                  <1> 	stosb
  9122                              <1> 
  9123 00002E7D 08E4                <1>         or ah, ah
  9124 00002E7F 752C                <1>         jnz .no_flags
  9125 00002E81 50                  <1> 	push ax
  9126                              <1> 
  9127                              <1> ;show flags
  9128                              <1> 
  9129 00002E82 B02D                <1>         mov al, '-'
  9130                              <1> 
  9131 00002E84 50                  <1>         push ax
  9132 00002E85 6609C9              <1>         or ecx, ecx                                 ; check if has password.
  9133 00002E88 7402                <1>         jz .no_password
  9134 00002E8A B070                <1>         mov al, 'p'                                 ; has password, draw a 'p'.
  9135                              <1> .no_password:
  9136 00002E8C AA                  <1>         stosb
  9137 00002E8D 58                  <1>         pop ax
  9138                              <1> 
  9139 00002E8E 56                  <1>         push si
  9140 00002E8F BA0080              <1>         mov dx, INFOFLAG_SCHEDULED
  9141 00002E92 B90900              <1>         mov cx, NUM_OF_INFOFLAGS
  9142 00002E95 8D36[0033]          <1>         lea si, [infoflag_chars]
  9143                              <1> 
  9144                              <1> .loop_show_flags:
  9145 00002E99 50                  <1>         push ax
  9146 00002E9A 85D3                <1>         test bx, dx
  9147 00002E9C 7402                <1>         jz .no_thisflag
  9148 00002E9E 8A04                <1>         mov al, [si]
  9149                              <1> .no_thisflag:
  9150 00002EA0 AA                  <1>         stosb
  9151 00002EA1 58                  <1>         pop ax
  9152 00002EA2 46                  <1>         inc si
  9153 00002EA3 D1EA                <1>         shr dx, 1
  9154 00002EA5 E2F2                <1>         loop .loop_show_flags
  9155 00002EA7 5E                  <1>         pop si
  9156                              <1> 
  9157 00002EA8 B020                <1>         mov al, ' '
  9158 00002EAA AA                  <1>         stosb
  9159 00002EAB AA                  <1>         stosb
  9160                              <1> 
  9161 00002EAC 58                  <1> 	pop ax
  9162                              <1> 
  9163                              <1> .no_flags:
  9164 00002EAD 80FC01              <1> 	cmp ah, 1
  9165 00002EB0 7728                <1> 	ja .no_number
  9166                              <1> 
  9167 00002EB2 50                  <1> 	push ax
  9168                              <1> 
  9169 00002EB3 8B5402              <1>         mov dx, [si + struc_bootrecord.drive_id]
  9170 00002EB6 F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  9171 00002EBA 740A                <1> 	jz .get_drvid
  9172                              <1> 
  9173 00002EBC 56                  <1> 	push si
  9174 00002EBD BE[6E33]            <1> 	mov si, knl_strings.invalid_id
  9175 00002EC0 E8FDF7              <1> 	call strcpy
  9176 00002EC3 5E                  <1> 	pop si
  9177                              <1> 
  9178 00002EC4 EB0F                <1> 	jmp short .draw_type
  9179                              <1> 
  9180                              <1> .get_drvid:
  9181 00002EC6 E8BB07              <1> 	call get_drvid_str
  9182                              <1> 
  9183 00002EC9 88F0                <1>         mov al, dh                                  ; fill partition id
  9184 00002ECB 30E4                <1> 	xor ah, ah
  9185 00002ECD B103                <1>         mov cl, 3                                   ;
  9186 00002ECF E847F7              <1>         call itoa                                   ;
  9187                              <1> 
  9188 00002ED2 83C703              <1>         add di, 3
  9189                              <1> 
  9190                              <1> .draw_type:
  9191 00002ED5 B020                <1>         mov al, ' '
  9192 00002ED7 AA                  <1>         stosb
  9193 00002ED8 AA                  <1>         stosb
  9194                              <1> 
  9195 00002ED9 58                  <1> 	pop ax
  9196                              <1> 
  9197                              <1> .no_number:
  9198 00002EDA 80FC02              <1> 	cmp ah, 2
  9199 00002EDD 771A                <1> 	ja .no_type
  9200                              <1> 
  9201 00002EDF 56                  <1>         push si                                     ; save the boot record pointer
  9202                              <1> 
  9203 00002EE0 30C0                <1> 	xor al, al
  9204 00002EE2 F7C30800            <1> 	test bx, INFOFLAG_ISSPECIAL
  9205 00002EE6 7503                <1> 	jnz .is_special
  9206 00002EE8 8A4404              <1>         mov al, [si + struc_bootrecord.type]
  9207                              <1> .is_special:
  9208                              <1> 
  9209 00002EEB E86CFC              <1>         call get_parttype_str
  9210 00002EEE B90800              <1>         mov  cx, 8
  9211 00002EF1 E8B2F7              <1>         call strncpy
  9212 00002EF4 5E                  <1>         pop si
  9213                              <1>         
  9214 00002EF5 B020                <1>         mov al, ' '
  9215 00002EF7 AA                  <1>         stosb
  9216 00002EF8 AA                  <1>         stosb
  9217                              <1> 
  9218                              <1> .no_type:
  9219 00002EF9 83C616              <1>         add si, struc_bootrecord.name
  9220 00002EFC B90F00              <1>         mov cx, 15
  9221 00002EFF 51                  <1> 	push cx
  9222 00002F00 E8A3F7              <1>         call strncpy                                ; fill record name
  9223 00002F03 89C8                <1> 	mov ax, cx
  9224 00002F05 59                  <1> 	pop cx
  9225 00002F06 29C1                <1> 	sub cx, ax
  9226 00002F08 B020                <1> 	mov al, ' '
  9227 00002F0A F3AA                <1> 	rep stosb
  9228 00002F0C 30C0                <1> 	xor al, al
  9229 00002F0E AA                  <1> 	stosb
  9230 00002F0F 61                  <1>         popa
  9231 00002F10 C3                  <1>         ret
  9232                              <1> 
  9233                              <1> ;==============================================================================
  9234                              <1> ;mark_record_active ---- mark the boot record active.
  9235                              <1> ;input:
  9236                              <1> ;      ds:si -> the record
  9237                              <1> ;output:
  9238                              <1> ;      cf = 0 success
  9239                              <1> ;      cf = 1 failed, ax = 0 cannot mark active, otherwise disk error occured.
  9240                              <1> ;==============================================================================
  9241                              <1> mark_record_active:
  9242 00002F11 60                  <1>         pusha
  9243 00002F12 E8C303              <1>         call check_allow_act
  9244 00002F15 725D                <1>         jc .cannot_active
  9245                              <1>         
  9246 00002F17 B80102              <1>         mov ax, (INT13H_READ << 8 ) | 0x01                  ; read father's
  9247 00002F1A 668B5C06            <1>         mov ebx, [si + struc_bootrecord.father_abs_addr]    ; partition table.
  9248 00002F1E 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]            ;
  9249                              <1>                                                             ;
  9250 00002F21 8D3E[D454]          <1>         lea di, [knl_tmp.disk_buf1]                                  ;
  9251 00002F25 E81307              <1>         call disk_access                                    ;
  9252 00002F28 724F                <1>         jc .disk_error                                      ;
  9253                              <1> 
  9254 00002F2A 52                  <1>         push dx
  9255 00002F2B 6653                <1>         push ebx
  9256 00002F2D 57                  <1>         push di
  9257                              <1>         
  9258 00002F2E 81C7BE01            <1>         add di, 1BEh
  9259                              <1> 
  9260 00002F32 668B4C0A            <1>         mov ecx, [si + struc_bootrecord.abs_addr]    ; abs addr -> ecx
  9261                              <1> 
  9262 00002F36 6629D9              <1>         sub ecx, ebx                                 ; relative addr -> ebx
  9263 00002F39 6689CB              <1> 	mov ebx, ecx
  9264 00002F3C B90400              <1>         mov cx, 4
  9265                              <1> 
  9266 00002F3F F7040020            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_SWAPDRVID  ; check if need swap id
  9267 00002F43 7403                <1>         jz .no_swapid
  9268                              <1> 
  9269 00002F45 80E2F0              <1>         and dl, 0xF0                                 ; use 0x80 as active flag if swap id is on.
  9270                              <1> .no_swapid:
  9271                              <1> 
  9272 00002F48 30E4                <1>         xor ah, ah
  9273                              <1> .search_in_father:                                   ;
  9274 00002F4A 30C0                <1>         xor al, al                                   ;
  9275 00002F4C 66395D08            <1>         cmp [di + struc_partition.relative_addr], ebx; find the record in
  9276 00002F50 7504                <1>         jne .not_it                                  ; father's partition
  9277 00002F52 88D0                <1>         mov al, dl                                   ; table
  9278 00002F54 FEC4                <1>         inc ah                                       ;
  9279                              <1> .not_it:                                             ;
  9280 00002F56 8805                <1>         mov byte [di  + struc_partition.state], al   ;
  9281 00002F58 83C710              <1>         add di, SIZE_OF_PARTITION                    ;
  9282 00002F5B E2ED                <1>         loop .search_in_father                       ;
  9283                              <1> 
  9284 00002F5D 5F                  <1>         pop di                                       ;
  9285 00002F5E 665B                <1>         pop ebx                                       ;
  9286 00002F60 5A                  <1>         pop dx
  9287                              <1> 
  9288 00002F61 08E4                <1>         or ah, ah
  9289 00002F63 740F                <1>         jz .cannot_active                            ; can not found the partition record
  9290                              <1>         
  9291 00002F65 B80103              <1>         mov ax , (INT13H_WRITE << 8 ) | 0x01         ; write the partition
  9292 00002F68 E8D006              <1>         call disk_access                             ; table back.
  9293 00002F6B 720C                <1>         jc .disk_error
  9294                              <1> 
  9295 00002F6D 810C0008            <1>         or word [si + struc_bootrecord.flags], INFOFLAG_ACTIVE ; set active flag
  9296 00002F71 61                  <1>         popa
  9297 00002F72 F8                  <1>         clc
  9298 00002F73 C3                  <1>         ret
  9299                              <1>         
  9300                              <1> .cannot_active:
  9301 00002F74 61                  <1>         popa
  9302 00002F75 31C0                <1>         xor ax, ax
  9303 00002F77 F9                  <1>         stc
  9304 00002F78 C3                  <1>         ret
  9305                              <1> .disk_error:
  9306 00002F79 61                  <1>         popa
  9307 00002F7A C3                  <1>         ret
  9308                              <1> 
  9309                              <1> 
  9310                              <1> 
  9311                              <1> ;==============================================================================
  9312                              <1> ;toggle_record_hidden ---- toggle a boot record's hidden attribute
  9313                              <1> ;input:
  9314                              <1> ;      ds:si -> the record
  9315                              <1> ;output:
  9316                              <1> ;      cf = 0 success
  9317                              <1> ;      cf = 1 failed, ax = 0 cannot hide, otherwise disk error occured.
  9318                              <1> ;==============================================================================
  9319                              <1> toggle_record_hidden:
  9320 00002F7B 60                  <1>         pusha
  9321                              <1>         
  9322 00002F7C E83603              <1>         call check_allow_hide
  9323 00002F7F 725F                <1>         jc .cannot_hide
  9324                              <1>         
  9325 00002F81 B80102              <1>         mov ax, (INT13H_READ << 8 ) | 0x01                  ; read father's
  9326 00002F84 668B5C06            <1>         mov ebx, [si + struc_bootrecord.father_abs_addr]    ; partition table.
  9327 00002F88 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]            ;
  9328                              <1>                                                             ;
  9329 00002F8B 8D3E[D454]          <1>         lea di, [knl_tmp.disk_buf1]                                  ;
  9330 00002F8F E8A906              <1>         call disk_access                                    ;
  9331 00002F92 7251                <1>         jc .disk_error                                      ;
  9332                              <1> 
  9333 00002F94 6653                <1>         push ebx
  9334 00002F96 57                  <1>         push di
  9335                              <1>         
  9336 00002F97 81C7BE01            <1>         add di, 1BEh
  9337                              <1> 
  9338 00002F9B 668B4C0A            <1>         mov ecx, [si + struc_bootrecord.abs_addr]    ; abs addr -> ebx
  9339                              <1> 
  9340 00002F9F 6629D9              <1>         sub ecx, ebx                                 ; relative addr -> ebx
  9341 00002FA2 6689CB              <1> 	mov ebx, ecx
  9342                              <1> 
  9343 00002FA5 B90400              <1>         mov cx, 4
  9344                              <1> 
  9345 00002FA8 8B04                <1>         mov ax, [si + struc_bootrecord.flags]        ; get flags and type
  9346 00002FAA 8A7404              <1>         mov dh, [si + struc_bootrecord.type]
  9347 00002FAD 80E60F              <1>         and dh, 0x0F
  9348 00002FB0 A90002              <1>         test ax, INFOFLAG_HIDDEN
  9349 00002FB3 7503                <1>         jnz .unhide_it
  9350 00002FB5 80CE10              <1>         or dh, 0x10                                  ; hide the partition
  9351                              <1> 
  9352                              <1> .unhide_it:
  9353 00002FB8 30C0                <1>         xor al, al
  9354                              <1>         
  9355                              <1> .search_in_father:                                   ;
  9356 00002FBA 66395D08            <1>         cmp [di + struc_partition.relative_addr], ebx; find the record in
  9357 00002FBE 7505                <1>         jne .not_it                                  ; father's partition
  9358 00002FC0 FEC0                <1>         inc al
  9359 00002FC2 887504              <1>         mov byte [di  + struc_partition.type], dh    ; set partition type.
  9360                              <1> .not_it:                                             ;
  9361 00002FC5 83C710              <1>         add di, SIZE_OF_PARTITION                    ;
  9362 00002FC8 E2F0                <1>         loop .search_in_father                       ;
  9363                              <1> 
  9364 00002FCA 5F                  <1>         pop di                                       ;
  9365 00002FCB 665B                <1>         pop ebx                                      ;
  9366                              <1> 
  9367 00002FCD 08C0                <1>         or al, al
  9368 00002FCF 740F                <1>         jz .cannot_hide                              ; can not found the partition record
  9369                              <1>         
  9370 00002FD1 B80103              <1>         mov ax , (INT13H_WRITE << 8 ) | 0x01         ; write the partition
  9371 00002FD4 E86406              <1>         call disk_access                             ; table back.
  9372 00002FD7 720C                <1>         jc .disk_error
  9373                              <1> 
  9374 00002FD9 81340002            <1>         xor word [si + struc_bootrecord.flags], INFOFLAG_HIDDEN ; toggle hidden flag.
  9375 00002FDD 61                  <1>         popa
  9376 00002FDE F8                  <1>         clc
  9377 00002FDF C3                  <1>         ret
  9378                              <1>         
  9379                              <1> .cannot_hide:
  9380 00002FE0 61                  <1>         popa
  9381 00002FE1 31C0                <1>         xor ax, ax
  9382 00002FE3 F9                  <1>         stc
  9383 00002FE4 C3                  <1>         ret
  9384                              <1> .disk_error:
  9385 00002FE5 61                  <1>         popa
  9386 00002FE6 C3                  <1>         ret
  9387                              <1> 
  9388                              <1> ;==============================================================================
  9389                              <1> ;set_record_schedule ---- set the record's schedule time
  9390                              <1> ;input:
  9391                              <1> ;      ds:si -> the record
  9392                              <1> ;      ax = begin time (in minutes)
  9393                              <1> ;      bx = end time (in minutes)
  9394                              <1> ;      dx = week info (bit 0 to bit 6 indicate Mon to Sun, zero means all days)
  9395                              <1> ;output:
  9396                              <1> ;      none
  9397                              <1> ;==============================================================================
  9398                              <1> set_record_schedule:
  9399 00002FE7 60                  <1>        pusha
  9400 00002FE8 09C0                <1>        or ax, ax
  9401 00002FEA 750E                <1>        jnz .timeok
  9402 00002FEC 09DB                <1>        or bx, bx
  9403 00002FEE 750A                <1>        jnz .timeok
  9404 00002FF0 09D2                <1>        or dx, dx
  9405 00002FF2 7506                <1>        jnz .timeok
  9406                              <1> 
  9407 00002FF4 8124FF7F            <1>        and word [si + struc_bootrecord.flags], ~ INFOFLAG_SCHEDULED
  9408 00002FF8 61                  <1>        popa
  9409 00002FF9 C3                  <1>        ret
  9410                              <1> 
  9411                              <1> .timeok:
  9412 00002FFA 6681E3FF0F0000      <1>        and ebx, 0x00000fff
  9413 00003001 6625FF0F0000        <1>        and eax, 0x00000fff
  9414 00003007 66C1E30C            <1>        shl ebx, 12
  9415 0000300B 6609D8              <1>        or  eax, ebx
  9416 0000300E 6681E2FF000000      <1>        and edx, 0x000000ff
  9417 00003015 66C1E218            <1>        shl edx, 24
  9418 00003019 6609D0              <1>        or  eax, edx
  9419                              <1> 
  9420 0000301C 66894412            <1>        mov [si + struc_bootrecord.schedule_time], eax
  9421 00003020 810C0080            <1>        or word [si + struc_bootrecord.flags], INFOFLAG_SCHEDULED
  9422                              <1> 
  9423 00003024 61                  <1>        popa
  9424 00003025 C3                  <1>        ret
  9425                              <1> 
  9426                              <1> ;==============================================================================
  9427                              <1> ;get_record_schedule ---- set the record's schedule time
  9428                              <1> ;input:
  9429                              <1> ;      ds:si -> the record
  9430                              <1> ;output:
  9431                              <1> ;      ax = begin time (in minutes)
  9432                              <1> ;      bx = end time (in minutes)
  9433                              <1> ;      dx = week info (bit 0 to bit 6 indicate Mon to Sun, zero means all days)
  9434                              <1> ;==============================================================================
  9435                              <1> get_record_schedule:
  9436 00003026 31C0                <1>        xor ax, ax
  9437 00003028 31DB                <1>        xor bx, bx
  9438 0000302A 31D2                <1>        xor dx, dx
  9439                              <1> 
  9440 0000302C F7040080            <1>        test word [si + struc_bootrecord.flags], INFOFLAG_SCHEDULED
  9441 00003030 741D                <1>        jz .end
  9442                              <1> 
  9443 00003032 668B4412            <1>        mov eax, [si + struc_bootrecord.schedule_time]
  9444 00003036 6689C3              <1>        mov ebx, eax
  9445 00003039 6689C2              <1>        mov edx, eax
  9446                              <1> 
  9447 0000303C 25FF0F              <1>        and ax, 0x0fff
  9448 0000303F 66C1EB0C            <1>        shr ebx, 12
  9449 00003043 81E3FF0F            <1>        and bx, 0x0fff
  9450 00003047 66C1EA18            <1>        shr edx, 24
  9451 0000304B 81E2FF00            <1>        and dx, 0x00ff
  9452                              <1> 
  9453                              <1> .end:
  9454 0000304F C3                  <1>        ret
  9455                              <1> 
  9456                              <1> ;=============================================================================
  9457                              <1> ;schedule_to_str ---- convert schedule time to string
  9458                              <1> ;input:
  9459                              <1> ;       ax = start time
  9460                              <1> ;       bx = stop time
  9461                              <1> ;       dx = days info
  9462                              <1> ;       es:di -> buffer
  9463                              <1> ;output:
  9464                              <1> ;       none
  9465                              <1> ;=============================================================================
  9466                              <1> schedule_to_str:
  9467 00003050 60                  <1>         pusha
  9468 00003051 FC                  <1>         cld
  9469 00003052 E83700              <1>         call sch_time_to_str
  9470 00003055 89FE                <1>         mov si, di
  9471 00003057 E80DF6              <1>         call strlen
  9472 0000305A 01CF                <1>         add di, cx
  9473 0000305C B02D                <1>         mov al, '-'
  9474 0000305E AA                  <1>         stosb
  9475 0000305F 89D8                <1>         mov ax, bx
  9476 00003061 E82800              <1>         call sch_time_to_str
  9477 00003064 89FE                <1>         mov si, di
  9478 00003066 E8FEF5              <1>         call strlen
  9479 00003069 01CF                <1>         add di, cx
  9480 0000306B B03B                <1>         mov al, ';'
  9481 0000306D AA                  <1>         stosb
  9482 0000306E E80200              <1>         call sch_days_to_str
  9483 00003071 61                  <1>         popa
  9484 00003072 C3                  <1>         ret
  9485                              <1> 
  9486                              <1> ;=============================================================================
  9487                              <1> ;sch_days_to_str ---- convert days info string 0123456
  9488                              <1> ;input:
  9489                              <1> ;       dx = day bits
  9490                              <1> ;       es:di -> buffer
  9491                              <1> ;output:
  9492                              <1> ;       none
  9493                              <1> ;=============================================================================
  9494                              <1> sch_days_to_str:
  9495 00003073 60                  <1>         pusha
  9496 00003074 B90700              <1>         mov cx, 7
  9497 00003077 B030                <1>         mov al, '0'
  9498 00003079 BB0100              <1>         mov bx, 1
  9499                              <1> 
  9500                              <1> .loop_chk:
  9501 0000307C 85DA                <1>         test dx, bx
  9502 0000307E 7401                <1>         jz .nothisday
  9503 00003080 AA                  <1>         stosb
  9504                              <1> .nothisday:
  9505 00003081 D1E3                <1>         shl bx, 1
  9506 00003083 FEC0                <1>         inc al
  9507 00003085 E2F5                <1>         loop .loop_chk
  9508                              <1> 
  9509 00003087 30C0                <1>         xor al, al
  9510 00003089 AA                  <1>         stosb
  9511                              <1> 
  9512 0000308A 61                  <1>         popa
  9513 0000308B C3                  <1>         ret
  9514                              <1> 
  9515                              <1> ;=============================================================================
  9516                              <1> ;sch_time_to_str ---- convert time in minute info string hh:mm
  9517                              <1> ;input:
  9518                              <1> ;       ax = time
  9519                              <1> ;       es:di -> buffer
  9520                              <1> ;output:
  9521                              <1> ;       none
  9522                              <1> ;=============================================================================
  9523                              <1> sch_time_to_str:
  9524 0000308C 60                  <1>         pusha
  9525                              <1> 
  9526 0000308D B23C                <1>         mov dl, 60
  9527 0000308F F6F2                <1>         div dl
  9528 00003091 50                  <1>         push ax
  9529                              <1> 
  9530 00003092 30E4                <1>         xor ah, ah
  9531 00003094 3C0A                <1>         cmp al, 10
  9532 00003096 7205                <1>         jb .hlten
  9533 00003098 B90200              <1>         mov cx, 2
  9534 0000309B EB03                <1>         jmp short .showh
  9535                              <1> .hlten:
  9536 0000309D B90100              <1>         mov cx,1
  9537                              <1> .showh:
  9538 000030A0 E876F5              <1>         call itoa
  9539                              <1> 
  9540 000030A3 B03A                <1>         mov al,':'
  9541 000030A5 01CF                <1>         add di, cx
  9542 000030A7 AA                  <1>         stosb
  9543                              <1> 
  9544 000030A8 58                  <1>         pop ax
  9545 000030A9 0FB6C4              <1>         movzx ax, ah
  9546 000030AC 3C0A                <1>         cmp al, 10
  9547 000030AE 7205                <1>         jb .mlten
  9548 000030B0 B90200              <1>         mov cx, 2
  9549 000030B3 EB03                <1>         jmp short .showm
  9550                              <1> .mlten:
  9551 000030B5 B90100              <1>         mov cx,1
  9552                              <1> .showm:
  9553 000030B8 E85EF5              <1>         call itoa
  9554                              <1> 
  9555 000030BB 61                  <1>         popa
  9556 000030BC C3                  <1>         ret
  9557                              <1> 
  9558                              <1> ;==============================================================================
  9559                              <1> ;boot_normal_record ---- boot a normal record
  9560                              <1> ;input:
  9561                              <1> ;      ds:si -> the record
  9562                              <1> ;output:
  9563                              <1> ;      will not return when successfully boot.
  9564                              <1> ;      if return then al != 0 disk error; al = 0 no operation system.
  9565                              <1> ;==============================================================================
  9566                              <1> boot_normal_record:
  9567 000030BD 06                  <1>         push es
  9568                              <1> 
  9569 000030BE 8B1C                <1>         mov bx, [si + struc_bootrecord.flags]
  9570 000030C0 F7C30010            <1>         test bx, INFOFLAG_AUTOACTIVE
  9571 000030C4 7403                <1>         jz .no_need_act
  9572 000030C6 E848FE              <1>         call mark_record_active             ; active the partition
  9573                              <1> 
  9574                              <1> .no_need_act:
  9575 000030C9 F7C30002            <1>         test bx, INFOFLAG_HIDDEN
  9576 000030CD 7403                <1>         jz .not_hidden
  9577 000030CF E8A9FE              <1>         call toggle_record_hidden           ; unhide the partition
  9578                              <1> 
  9579                              <1> .not_hidden:
  9580                              <1> 
  9581 000030D2 53                  <1>         push bx                             ; save the flags
  9582 000030D3 8D3E[D454]          <1>         lea di, [knl_tmp.disk_buf1]         ; load boot sector into knl_tmp.disk_buf1.
  9583 000030D7 B80102              <1>         mov ax, (INT13H_READ << 8 ) | 0x01
  9584 000030DA 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]
  9585 000030DD 668B5C0A            <1>         mov ebx, [si + struc_bootrecord.abs_addr]
  9586                              <1> 
  9587 000030E1 E85705              <1>         call disk_access                    ; read the first sector of the
  9588                              <1>                                             ; partition / floppy into
  9589                              <1>                                             ; memory.
  9590 000030E4 5B                  <1>         pop bx
  9591 000030E5 0F829200            <1>         jmpc .disk_error
  9592                              <1> 
  9593 000030E9 81BDFE0155AA        <1>         cmp word [di + 510], 0AA55h
  9594 000030EF 0F858600            <1>         jmpne .no_system
  9595                              <1> 
  9596 000030F3 F7C38000            <1>         test bx, INFOFLAG_ISDRIVER          ; if it's driver, skip loading the
  9597                              <1>                                             ; partition table.
  9598 000030F7 7517                <1>         jnz .do_boot
  9599                              <1> 
  9600 000030F9 53                  <1>         push bx                             ; save the flags 
  9601 000030FA 8D3E[D45C]          <1>         lea di, [knl_tmp.disk_buf2]    ; load part table into knl_tmp.disk_buf2
  9602                              <1> 
  9603 000030FE 668B5C06            <1>         mov ebx, [si + struc_bootrecord.father_abs_addr]
  9604                              <1> 
  9605 00003102 E83605              <1>         call disk_access                    ; load part table into memory.
  9606 00003105 5B                  <1>         pop bx
  9607 00003106 7273                <1>         jc .disk_error
  9608                              <1> 
  9609 00003108 81BDFE0155AA        <1>         cmp word [di + 510], 0AA55h
  9610 0000310E 7569                <1>         jne .no_system                      ; bad partition table, treated as
  9611                              <1>                                             ; no operating system.
  9612                              <1> 
  9613                              <1> .do_boot:
  9614                              <1> %ifndef EMULATE_PROG
  9615                              <1> 
  9616 00003110 F7C30020            <1>         test bx, INFOFLAG_SWAPDRVID         ; check if need swap id
  9617 00003114 7413                <1>         jz .no_swapid
  9618                              <1> 
  9619                              <1> ;================ swap the driver id ========================================
  9620 00003116 88D6                <1>         mov dh, dl
  9621 00003118 80E680              <1>         and dh, 0x80                        ; set driver id to the bootable id
  9622                              <1> 
  9623 0000311B 89D3                <1> 	mov bx, dx
  9624 0000311D 86F2                <1> 	xchg dh, dl
  9625 0000311F 89D1                <1> 	mov cx, dx
  9626                              <1> 
  9627 00003121 E8CF05              <1> 	call set_drive_map
  9628                              <1> 
  9629 00003124 885402              <1>         mov [si + struc_bootrecord.drive_id], dl  ; write new driver id back
  9630 00003127 EB03                <1> 	jmp short .swap_ok
  9631                              <1> 
  9632                              <1> .no_swapid:
  9633 00003129 E8AB05              <1> 	call uninstall_myint13h
  9634                              <1> 
  9635                              <1> .swap_ok:
  9636 0000312C E80901              <1>         call prepare_boot                   ; prepare to boot.
  9637 0000312F 7248                <1>         jc .no_system                       ; preparation failed.
  9638                              <1>         
  9639                              <1> %endif
  9640 00003131 E8E000              <1>         call preload_keystrokes     ; preload the keystrokes into key buffer.
  9641 00003134 E8E9E9              <1>         call reset_video_mode
  9642                              <1> 
  9643                              <1> %ifndef EMULATE_PROG
  9644                              <1> 
  9645 00003137 56                  <1>         push si
  9646 00003138 FC                  <1>         cld
  9647                              <1> 
  9648 00003139 31C0                <1>         xor ax, ax
  9649 0000313B 50                  <1>         push ax
  9650 0000313C 07                  <1>         pop es
  9651 0000313D B90002              <1>         mov cx, 512
  9652                              <1> 
  9653 00003140 F7048000            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_ISDRIVER
  9654                              <1>                                             ; if it's driver, no partition
  9655 00003144 750B                <1>         jnz .boot_driver                    ; table to load.
  9656                              <1>         
  9657 00003146 8D36[D45C]          <1>         lea si, [knl_tmp.disk_buf2]
  9658 0000314A BF0006              <1>         mov di, PART_OFF
  9659                              <1> 
  9660 0000314D 51                  <1>         push cx
  9661 0000314E F3A4                <1>         rep movsb                           ; move mbr (partition table) to
  9662                              <1>                                             ; 0000:0600
  9663 00003150 59                  <1>         pop cx
  9664                              <1>         
  9665                              <1> .boot_driver:
  9666 00003151 8D36[D454]          <1>         lea si, [knl_tmp.disk_buf1]
  9667 00003155 BF007C              <1>         mov di, 7C00h
  9668 00003158 F3A4                <1>         rep movsb                           ; move boot sector to 0000:7C00
  9669                              <1> 
  9670 0000315A 5E                  <1>         pop si
  9671                              <1> 
  9672 0000315B 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id] ; drive id -> dl
  9673 0000315E 30F6                <1>         xor dh, dh
  9674                              <1> 
  9675                              <1> ; boot code from lilo :-)
  9676                              <1> 
  9677 00003160 89DE                <1>         mov si, bx                          ; ds:si , es:di point to the
  9678 00003162 81C6BE07            <1>         add si, PART_OFF + 1BEh     ; partition record.
  9679 00003166 56                  <1>         push si                             ;
  9680 00003167 5F                  <1>         pop di                              ;
  9681                              <1> 
  9682 00003168 50                  <1>         push ax                             ; ds = 0 ( es already set to 0 ).
  9683 00003169 1F                  <1>         pop ds                              ;
  9684                              <1>         
  9685                              <1> %if 0
  9686                              <1>         xor bp, bp                          ; might help some boot problems
  9687                              <1>         mov ax, 0AA55h                ; boot signature (just in case ...)
  9688                              <1>         jmp 0:7C00h                         ; start boot sector
  9689                              <1> %else
  9690                              <1> ;boot code from the OS2 Boot Manager
  9691 0000316A BB007C              <1>         mov bx, 7C00h
  9692                              <1>     
  9693 0000316D 8ED0                <1>         mov ss,ax                           ; on all processors since the 186
  9694 0000316F 89DC                <1>         mov sp,bx                           ; these instructions are locked
  9695                              <1>     
  9696 00003171 89F5                <1>         mov bp, si
  9697 00003173 50                  <1>         push    ax
  9698 00003174 53                  <1>         push    bx
  9699 00003175 B855AA              <1>         mov ax, 0AA55h
  9700 00003178 CB                  <1>         retf                                ; start boot sector
  9701                              <1> %endif
  9702                              <1>         
  9703                              <1> %else
  9704                              <1> 	call uninstall_myint13h
  9705                              <1>         mov ax, 0x4c00                      ; return to dos.
  9706                              <1>         int 0x21                            ;
  9707                              <1> %endif
  9708                              <1> 
  9709                              <1> .no_system:
  9710 00003179 30C0                <1>         xor al, al
  9711                              <1> .disk_error:
  9712 0000317B 07                  <1>         pop es
  9713 0000317C C3                  <1>         ret
  9714                              <1> 
  9715                              <1> %ifndef DISABLE_CDBOOT
  9716                              <1> ;==============================================================================
  9717                              <1> ; boot_cdrom ---- boot cdrom driver
  9718                              <1> ; input: ds:di -> boot catalog
  9719                              <1> ;        dl = cdrom drvid
  9720                              <1> ;==============================================================================
  9721                              <1> boot_cdrom:
  9722 0000317D 8A4501              <1> 	mov al, [di+1]
  9723 00003180 240F                <1> 	and al, 0x0f
  9724                              <1> 
  9725 00003182 BE[C154]            <1> 	mov si, knl_tmp.cdemu_spec
  9726 00003185 C60413              <1> 	mov byte [si], SIZE_OF_CDEMU_SPEC
  9727 00003188 884401              <1> 	mov [si + struc_cdemu_spec.media_type], al
  9728                              <1> 
  9729 0000318B 30E4                <1> 	xor ah, ah
  9730 0000318D 08C0                <1> 	or al, al
  9731 0000318F 7502                <1> 	jnz .floppy_emu
  9732 00003191 88D4                <1> 	mov ah, dl
  9733                              <1> .floppy_emu: 
  9734                              <1> 
  9735 00003193 886402              <1> 	mov byte [si + struc_cdemu_spec.emu_drvid], ah
  9736 00003196 668B5D08            <1> 	mov ebx, [di+0x08]
  9737 0000319A 66895C04            <1> 	mov [si + struc_cdemu_spec.image_lba], ebx
  9738 0000319E 8B5D02              <1> 	mov bx, [di+0x02]
  9739 000031A1 895C0C              <1> 	mov [si + struc_cdemu_spec.load_seg], bx
  9740 000031A4 8B5D06              <1> 	mov bx, [di+0x06]
  9741 000031A7 895C0E              <1> 	mov [si + struc_cdemu_spec.sect_count], bx
  9742 000031AA C6441050            <1> 	mov byte [si + struc_cdemu_spec.cylinders], 0x50
  9743 000031AE C6441202            <1> 	mov byte [si + struc_cdemu_spec.heads], 2
  9744                              <1> 
  9745 000031B2 88C3                <1> 	mov bl, al
  9746 000031B4 30FF                <1> 	xor bh, bh
  9747 000031B6 8AA7[D831]          <1> 	mov ah, [.sect_nums + bx]
  9748                              <1> 
  9749 000031BA 886411              <1> 	mov byte [si + struc_cdemu_spec.sectors], ah
  9750 000031BD 31C0                <1> 	xor ax, ax
  9751 000031BF 89440A              <1> 	mov [si + struc_cdemu_spec.user_bufseg], ax
  9752                              <1> 
  9753                              <1> ;Boot it!
  9754 000031C2 B8004A              <1> 	mov ax, 0x4a00
  9755 000031C5 CD13                <1> 	int 0x13
  9756 000031C7 8826[B854]          <1> 	mov [hdio_tmp.disk_errno],ah
  9757 000031CB 720A                <1> 	jc .end
  9758                              <1> 
  9759                              <1> ;If the cd-rom is accessed via BIOS, then uninstall my int13h.
  9760 000031CD E80705              <1> 	call uninstall_myint13h
  9761                              <1> 
  9762 000031D0 B8004C              <1> 	mov ax, 0x4c00
  9763 000031D3 CD13                <1> 	int 0x13
  9764 000031D5 31C0                <1> 	xor ax, ax
  9765                              <1> .end:
  9766 000031D7 C3                  <1> 	ret
  9767                              <1> 
  9768 000031D8 000F1224            <1> .sect_nums  db  0, 0x0f, 0x12, 0x24
  9769                              <1> 
  9770                              <1> 
  9771                              <1> ;==============================================================================
  9772                              <1> ;find_cdboot_catalog ---- find boot catalog entry from buffer
  9773                              <1> ;input: ds:si -> buffer  es:di -> entries buffer
  9774                              <1> ;return: cx = number of entries
  9775                              <1> ;==============================================================================
  9776                              <1> find_cdboot_catalog:
  9777 000031DC 56                  <1> 	push si
  9778 000031DD 57                  <1> 	push di
  9779 000031DE 50                  <1> 	push ax
  9780 000031DF FC                  <1> 	cld
  9781                              <1> 
  9782 000031E0 31C9                <1> 	xor cx, cx
  9783                              <1> 
  9784 000031E2 833C01              <1> 	cmp word [si], 0x0001
  9785 000031E5 7529                <1> 	jne .end
  9786 000031E7 817C1E55AA          <1> 	cmp word [si+0x1e], 0xaa55
  9787 000031EC 7522                <1> 	jne .end
  9788                              <1> 
  9789                              <1> .loop_find:
  9790 000031EE 8A04                <1> 	mov al, [si + struc_boot_catalog.indicator]
  9791 000031F0 08C0                <1> 	or al, al
  9792 000031F2 741C                <1> 	jz .end
  9793                              <1> 
  9794 000031F4 3C88                <1> 	cmp al, 0x88
  9795 000031F6 7513                <1> 	jne .loop_next
  9796                              <1> 
  9797 000031F8 8A4401              <1> 	mov al, [si + struc_boot_catalog.media_type]
  9798 000031FB 240F                <1> 	and al, 0x0f
  9799 000031FD 3C04                <1> 	cmp al , 4
  9800 000031FF 730A                <1> 	jae .loop_next
  9801                              <1> 
  9802 00003201 51                  <1> 	push cx
  9803 00003202 56                  <1> 	push si
  9804 00003203 B92000              <1> 	mov cx, SIZE_OF_BOOT_CATALOG
  9805 00003206 F3A4                <1> 	rep movsb
  9806 00003208 5E                  <1> 	pop si
  9807 00003209 59                  <1> 	pop cx
  9808 0000320A 41                  <1> 	inc cx
  9809                              <1> 
  9810                              <1> .loop_next:
  9811 0000320B 83C620              <1> 	add si, SIZE_OF_BOOT_CATALOG
  9812 0000320E EBDE                <1> 	jmp short .loop_find
  9813                              <1> 
  9814                              <1> .end:
  9815 00003210 58                  <1> 	pop ax
  9816 00003211 5F                  <1> 	pop di
  9817 00003212 5E                  <1> 	pop si
  9818 00003213 C3                  <1> 	ret
  9819                              <1> 
  9820                              <1> %endif
  9821                              <1> 
  9822                              <1> ;==============================================================================
  9823                              <1> ;preload_keystrokes ---- preload the keystrokes into key buffer.
  9824                              <1> ;input:
  9825                              <1> ;      ds:si -> boot record
  9826                              <1> ;output:
  9827                              <1> ;      none
  9828                              <1> ;==============================================================================
  9829                              <1> preload_keystrokes:
  9830 00003214 60                  <1>         pusha
  9831 00003215 FC                  <1>         cld
  9832 00003216 F7040040            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_HAVEKEYS
  9833 0000321A 741A                <1>         jz .end
  9834                              <1> 
  9835 0000321C B90D00              <1>         mov cx, MAX_KEYSTROKES
  9836 0000321F 83C626              <1>         add si, struc_bootrecord.keystrokes
  9837                              <1> 
  9838                              <1> .loop_load:
  9839 00003222 AD                  <1>         lodsw
  9840 00003223 09C0                <1>         or ax, ax
  9841 00003225 740F                <1>         jz .end
  9842                              <1> 
  9843 00003227 51                  <1>         push cx
  9844 00003228 89C1                <1>         mov cx, ax
  9845 0000322A B405                <1>         mov ah, 0x05
  9846 0000322C E822F6              <1>         call bioskey
  9847 0000322F 59                  <1>         pop cx
  9848 00003230 08C0                <1>         or al, al
  9849 00003232 7502                <1>         jnz .end
  9850 00003234 E2EC                <1>         loop .loop_load
  9851                              <1> .end:
  9852 00003236 61                  <1>         popa
  9853 00003237 C3                  <1>         ret
  9854                              <1> 
  9855                              <1> ;==============================================================================
  9856                              <1> ;prepare_boot ---- do some preparation before booting.
  9857                              <1> ;input:
  9858                              <1> ;      ds:si -> boot record
  9859                              <1> ;      knl_tmp.disk_buf1  -> boot sector
  9860                              <1> ;      knl_tmp.disk_buf2 -> father's first sector ( partition table ).
  9861                              <1> ;output:
  9862                              <1> ;      cf = 0 success
  9863                              <1> ;          bx = the partition record's offset in partition table.
  9864                              <1> ;      cf = 1 failed
  9865                              <1> ;==============================================================================
  9866                              <1> prepare_boot:
  9867 00003238 31C0                <1>         xor ax, ax
  9868 0000323A F7048000            <1>         test word [si + struc_bootrecord.flags], INFOFLAG_ISDRIVER
  9869 0000323E 0F856F00            <1>         jmpnz .end
  9870                              <1> 
  9871 00003242 668B5C0A            <1>         mov ebx, [si + struc_bootrecord.abs_addr]         ;
  9872                              <1> 
  9873 00003246 668B4C06            <1>         mov ecx, [si + struc_bootrecord.father_abs_addr]  ;
  9874                              <1> 
  9875 0000324A 6689D8              <1>         mov eax, ebx
  9876 0000324D 6629C8              <1>         sub eax, ecx                                      ; relative addr -> eax
  9877                              <1> 
  9878 00003250 8D3E[925E]          <1>         lea di, [knl_tmp.disk_buf2 + 1BEh]
  9879 00003254 30C9                <1>         xor cl, cl
  9880                              <1>         
  9881                              <1> .search_in_father:
  9882 00003256 66394508            <1>         cmp [di + struc_partition.relative_addr], eax
  9883 0000325A 740C                <1>         je .found
  9884 0000325C FEC1                <1>         inc cl
  9885 0000325E 83C710              <1>         add di, SIZE_OF_PARTITION
  9886 00003261 80F904              <1>         cmp cl, 4
  9887 00003264 72F0                <1>         jb .search_in_father
  9888 00003266 EB49                <1>         jmp short .failed
  9889                              <1> 
  9890                              <1> .found:
  9891 00003268 B010                <1>         mov al, SIZE_OF_PARTITION                   ; ax = offset in partition
  9892 0000326A F6E1                <1>         mul cl                                      ; table.
  9893                              <1> 
  9894 0000326C 8A5402              <1>         mov dl, [si + struc_bootrecord.drive_id]
  9895 0000326F 8815                <1>         mov [di + struc_partition.state], dl        ; store drive id into
  9896                              <1>                                                     ; partition record
  9897                              <1> 
  9898 00003271 8D3E[D454]          <1>         lea di, [knl_tmp.disk_buf1]                          ; di -> boot record
  9899 00003275 8A7404              <1>         mov dh, [si + struc_bootrecord.type]
  9900                              <1> 
  9901 00003278 80FE04              <1>         cmp dh, 0x04
  9902 0000327B 7416                <1>         je .fat16
  9903 0000327D 80FE06              <1>         cmp dh, 0x06
  9904 00003280 7411                <1>         je .fat16
  9905 00003282 80FE0E              <1>         cmp dh, 0x0e
  9906 00003285 740C                <1>         je .fat16
  9907 00003287 80FE0B              <1>         cmp dh, 0x0b
  9908 0000328A 7416                <1>         je .fat32
  9909 0000328C 80FE0C              <1>         cmp dh, 0x0c
  9910 0000328F 7411                <1>         je .fat32
  9911 00003291 EB1E                <1>         jmp short .end
  9912                              <1> .fat16:
  9913 00003293 807D2629            <1>         cmp byte [di + FAT16_EXTBRID_OFF], EXTBRID
  9914 00003297 7518                <1>         jne .end
  9915                              <1>         
  9916 00003299 885524              <1>         mov [di + FAT16_DRVID_OFF], dl              ; update the drive id.
  9917 0000329C 66895D1C            <1>         mov [di + FAT16_HIDSEC_OFF], ebx            ; update hidden sector
  9918                              <1>                                                     ; = abs_addr.
  9919 000032A0 EB0F                <1>         jmp short .end
  9920                              <1> .fat32:
  9921 000032A2 807D4229            <1>         cmp byte [di + FAT32_EXTBRID_OFF], EXTBRID
  9922 000032A6 7509                <1>         jne .end
  9923                              <1>         
  9924 000032A8 885540              <1>         mov [di + FAT32_DRVID_OFF], dl              ; update the drive id.
  9925 000032AB 66895D1C            <1>         mov [di + FAT32_HIDSEC_OFF], ebx            ; update hidden sector
  9926                              <1>                                                     ; = abs_addr.
  9927 000032AF EB00                <1>         jmp short .end
  9928                              <1>         
  9929                              <1> .failed:
  9930                              <1> ;        stc
  9931                              <1> ;        ret
  9932                              <1> .end:
  9933 000032B1 89C3                <1>         mov bx, ax          ; partition record's offset store to bx.
  9934 000032B3 F8                  <1>         clc
  9935 000032B4 C3                  <1>         ret
  9936                              <1> 
  9937                              <1> ;==============================================================================
  9938                              <1> ;check_allow_hide ---- check if the partition can be hidden.
  9939                              <1> ;input:
  9940                              <1> ;      ds:si -> the boot record
  9941                              <1> ;output:
  9942                              <1> ;      cf = 0 can be hidden
  9943                              <1> ;      cf = 1 cannot be hidden
  9944                              <1> ;==============================================================================
  9945                              <1> check_allow_hide:
  9946 000032B5 60                  <1>         pusha
  9947 000032B6 09F6                <1> 	or si, si
  9948 000032B8 741B                <1> 	jz .cannot_hide
  9949                              <1> 
  9950 000032BA 8B04                <1>         mov ax, [si + struc_bootrecord.flags]
  9951 000032BC A90100              <1>         test ax, DRVFLAG_DRIVEOK
  9952 000032BF 7414                <1>         jz .cannot_hide
  9953 000032C1 A99800              <1>         test ax, INFOFLAG_ISDRIVER | DRVFLAG_ISCDROM | INFOFLAG_ISSPECIAL
  9954 000032C4 750F                <1>         jnz .cannot_hide
  9955                              <1> 
  9956 000032C6 8A4404              <1>         mov al, [si + struc_bootrecord.type]
  9957 000032C9 B90700              <1>         mov cx, NUM_OF_ALLOW_HIDE
  9958 000032CC 8D3E[6C34]          <1>         lea di, [part_type.allow_hide_tbl]
  9959 000032D0 E8BEF3              <1>         call strchr
  9960 000032D3 61                  <1>         popa
  9961 000032D4 C3                  <1>         ret
  9962                              <1>         
  9963                              <1> .cannot_hide:
  9964 000032D5 61                  <1>         popa
  9965 000032D6 F9                  <1>         stc
  9966 000032D7 C3                  <1>         ret
  9967                              <1> 
  9968                              <1> ;==============================================================================
  9969                              <1> ;check_allow_act ---- check if the partition can be actived.
  9970                              <1> ;input:
  9971                              <1> ;      ds:si -> the boot record
  9972                              <1> ;output:
  9973                              <1> ;      cf = 0 can be actived
  9974                              <1> ;      cf = 1 cannot be actived
  9975                              <1> ;==============================================================================
  9976                              <1> check_allow_act:
  9977 000032D8 60                  <1>         pusha
  9978 000032D9 09F6                <1> 	or si, si
  9979 000032DB 740F                <1> 	jz .cannot_act
  9980                              <1> 
  9981 000032DD 8B04                <1>         mov ax, [si + struc_bootrecord.flags]   ; get flags
  9982 000032DF A90100              <1>         test ax, DRVFLAG_DRIVEOK
  9983 000032E2 7408                <1>         jz .cannot_act
  9984 000032E4 A99801              <1>         test ax, INFOFLAG_ISDRIVER | INFOFLAG_LOGICAL | DRVFLAG_ISCDROM | INFOFLAG_ISSPECIAL
  9985 000032E7 7503                <1>         jnz .cannot_act
  9986 000032E9 61                  <1>         popa
  9987 000032EA F8                  <1>         clc
  9988 000032EB C3                  <1>         ret
  9989                              <1>         
  9990                              <1> .cannot_act:
  9991 000032EC 61                  <1>         popa
  9992 000032ED F9                  <1>         stc
  9993 000032EE C3                  <1>         ret
  9994                              <1> 
  9995                              <1> ;==============================================================================
  9996                              <1> ;check_prev_mbr ---- check if the previous mbr is avaiable.
  9997                              <1> ;input:
  9998                              <1> ;      none
  9999                              <1> ;output:
 10000                              <1> ;      cf = 0 present
 10001                              <1> ;      cf = 1 absent
 10002                              <1> ;==============================================================================
 10003                              <1> check_prev_mbr:
 10004 000032EF 60                  <1> 	pusha
 10005 000032F0 8A16107E            <1> 	mov dl, [Boot_Drive]
 10006 000032F4 E88602              <1> 	call get_drive_flags
 10007 000032F7 7205                <1> 	jc .end
 10008 000032F9 A804                <1> 	test al, DRVFLAG_REMOVABLE
 10009 000032FB 7401                <1> 	jz .end
 10010 000032FD F9                  <1> 	stc
 10011                              <1> .end:
 10012 000032FE 61                  <1> 	popa
 10013 000032FF C3                  <1> 	ret
 10014                              <1> 
 10015                              <1> ;==============================================================================
 10016                              <1> ;data area
 10017                              <1> ;==============================================================================
 10018                              <1> 
 10019                              <1> ; strings used in knl.asm
 10020 00003300 536B58614168486C44- <1> infoflag_chars  db "SkXaAhHlD",0
 10021 00003309 00                  <1>
 10022                              <1> 
 10023                              <1> knl_strings:
 10024 0000330A 466C6F70707900      <1> .floppy     db "Floppy",0
 10025 00003311 5072696D61727900    <1> .primary    db "Primary",0
 10026 00003319 4C6F676963616C00    <1> .logical    db "Logical",0
 10027 00003321 52656D6F7661626C65- <1> .removable  db "Removable",0
 10028 0000332A 00                  <1>
 10029 0000332B 486172646469736B00  <1> .harddisk   db "Harddisk",0
 10030 00003334 43442D524F4D00      <1> .cdrom      db "CD-ROM",0
 10031 0000333B 5370656369616C00    <1> .special    db "Special",0
 10032 00003343 506F776572204F6666- <1> .poweroff   db "Power Off",0
 10033 0000334C 00                  <1>
 10034 0000334D 5265626F6F7400      <1> .restart    db "Reboot",0
 10035 00003354 5175697420746F2042- <1> .quit       db "Quit to BIOS",0
 10036 0000335D 494F5300            <1>
 10037 00003361 50726576696F757320- <1> .bootprev   db "Previous MBR",0
 10038 0000336A 4D425200            <1>
 10039 0000336E 2D2D2D202D2D00      <1> .invalid_id db "--- --",0
 10040                              <1> 
 10041                              <1> ; partition types and strings
 10042                              <1> part_type:
 10043                              <1> 
 10044                              <1> ; table of partition type ids
 10045                              <1> .id_tbl:
 10046 00003375 00060708090A0B0C    <1>         db 0x00, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 
 10047 0000337D 0E3C4D4E4F636581    <1> 	db 0x0E, 0x3C, 0x4D, 0x4E, 0x4F, 0x63, 0x65, 0x81, 
 10048 00003385 82838E93A5A6A9B7    <1> 	db 0x82, 0x83, 0x8E, 0x93, 0xA5, 0xA6, 0xA9, 0xB7, 
 10049 0000338D BEEB                <1> 	db 0xBE, 0xEB
 10050                              <1> 
 10051                              <1> ; table of partition type strings
 10052                              <1> .str_tbl:
 10053 0000338F 4E4F4E4520202000    <1>         db "NONE   ",0           ; No type
 10054 00003397 4641543136202000    <1>         db "FAT16  ",0           ; 0x06
 10055 0000339F 48502F4E54465300    <1>         db "HP/NTFS",0           ; 0x07
 10056 000033A7 4149582830382900    <1> 	db "AIX(08)",0           ; 0x08
 10057 000033AF 4149582830392900    <1> 	db "AIX(09)",0           ; 0x09
 10058 000033B7 4F532F3220424D00    <1> 	db "OS/2 BM",0           ; 0x0A
 10059 000033BF 4641543332202000    <1>         db "FAT32  ",0           ; 0x0B
 10060 000033C7 4641543332782000    <1>         db "FAT32x ",0           ; 0x0C
 10061 000033CF 4641543136782000    <1>         db "FAT16x ",0           ; 0x0E
 10062 000033D7 50512D426F6F7400    <1>         db "PQ-Boot",0           ; 0x3C
 10063 000033DF 514E58342E782000    <1>         db "QNX4.x ",0           ; 0x4D
 10064 000033E7 514E5834782D3200    <1>         db "QNX4x-2",0           ; 0x4E
 10065 000033EF 514E5834782D3300    <1>         db "QNX4x-3",0           ; 0x4F
 10066 000033F7 4855524420202000    <1>         db "HURD   ",0           ; 0x63
 10067 000033FF 4E6F76656C6C2000    <1>         db "Novell ",0           ; 0x65
 10068 00003407 4D696E6978202000    <1>         db "Minix  ",0           ; 0x81
 10069 0000340F 4C6E785377617000    <1>         db "LnxSwap",0           ; 0x82
 10070 00003417 4C696E7578202000    <1>         db "Linux  ",0           ; 0x83
 10071 0000341F 4C6E78204C564D00    <1> 	db "Lnx LVM",0           ; 0x8E
 10072 00003427 416D6F6562612000    <1> 	db "Amoeba ",0           ; 0x93
 10073 0000342F 4253442F33383600    <1>         db "BSD/386",0           ; 0xA5
 10074 00003437 4F70656E42534400    <1>         db "OpenBSD",0           ; 0xA6
 10075 0000343F 4E65744253442000    <1>         db "NetBSD ",0           ; 0xA9
 10076 00003447 4253446920667300    <1>         db "BSDi fs",0           ; 0xB7
 10077 0000344F 536F6C6172697300    <1>         db "Solaris",0           ; 0xBE
 10078 00003457 42654F5320202000    <1>         db "BeOS   ",0           ; 0xEB
 10079 0000345F 556E6B6E6F776E00    <1>         db "Unknown",0           ; other
 10080                              <1> 
 10081                              <1> ; logical partition types which could not boot
 10082                              <1> ; include the following pri_deny_tbl
 10083                              <1> .log_deny_tbl:
 10084                              <1> %ifdef STRICT_PART_CHECK
 10085                              <1>         db 0x01, 0x0A, 0x07, 0x17
 10086                              <1> %endif
 10087                              <1> ; primary partition types which could not boot
 10088                              <1> .pri_deny_tbl:
 10089 00003467 050F85              <1>         db 0x05, 0x0F, 0x85
 10090                              <1> %ifdef STRIC_PART_CHECK
 10091                              <1>         db 0x82, 0xA0, 0xB8, 0xE1, 0xE3, 0xF2
 10092                              <1> %endif
 10093 0000346A 00                  <1> 	db 0x00
 10094                              <1> 
 10095                              <1> ;the partition types which should be marked as auto active.
 10096                              <1> .auto_act_tbl:
 10097                              <1> ;the partition types which can be hidden.
 10098                              <1> ;the hide method is add 0x10 to the partition type.
 10099                              <1> ; ie. the type of hidden FAT16 = 0x16, etc.
 10100 0000346B BE                  <1>         db 0xBE
 10101                              <1> .allow_hide_tbl:
 10102 0000346C 010406070B0C0E      <1>         db 0x01, 0x04, 0x06, 0x07, 0x0B, 0x0C, 0x0E
 10103                              <1> 
 10104                              <1> ; the types used to hide certain partitions.
 10105                              <1> .hidden_tbl:
 10106 00003473 111416171B1C1E      <1>         db 0x11, 0x14, 0x16, 0x17, 0x1B, 0x1C, 0x1E
 10107                              <1>         
 10108                              <1> .end_of_tbl
 10109                              <1> 
 10110                                  %include "hd_io.asm"
 10111                              <1> ; asmsyntax=nasm
 10112                              <1> ; hd_io.asm
 10113                              <1> ;
 10114                              <1> ; Interface to BIOS int 0x13 functions
 10115                              <1> ;
 10116                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
 10117                              <1> ;
 10118                              <1> 
 10119                              <1> %define RETRY_TIMES     3
 10120                              <1> 
 10121                              <1>         bits 16
 10122                              <1> ;==============================================================================
 10123                              <1> ;check_int13ext ---- Check if the extension of int13h is presents for a driver.
 10124                              <1> ;input:
 10125                              <1> ;      dl = driver id
 10126                              <1> ;output:
 10127                              <1> ;      cf = 0, int13ext is presents
 10128                              <1> ;          cl = interface support bitmap.
 10129                              <1> ;      cf = 1, int13ext is not presents
 10130                              <1> ;==============================================================================
 10131                              <1> check_int13ext:
 10132 0000347A 803E[9236]00        <1>         cmp byte [use_int13_ext], 0
 10133 0000347F 7414                <1>         jz .not_present
 10134                              <1> 
 10135 00003481 BBAA55              <1>         mov bx, 0x55aa
 10136 00003484 B441                <1>         mov ah, INT13H_EXT_INSTCHECK
 10137 00003486 CD13                <1>         int 0x13                        ; Check if int13h extension is presents
 10138                              <1> ;        jc .not_present
 10139 00003488 81FB55AA            <1>         cmp bx, 0xaa55
 10140 0000348C 7507                <1>         jne .not_present
 10141 0000348E F6C105              <1>         test cl, EXT_SUBSET_FIXED | EXT_SUBSET_EDD
 10142                              <1> 					; Check if this drive supports extended
 10143 00003491 7402                <1>         jz .not_present                 ; read/write
 10144 00003493 F8                  <1>         clc
 10145 00003494 C3                  <1>         ret
 10146                              <1> .not_present:
 10147 00003495 F9                  <1>         stc
 10148 00003496 C3                  <1>         ret
 10149                              <1> 
 10150                              <1> ;==============================================================================
 10151                              <1> ;get_drive_info ---- Get drive informations
 10152                              <1> ;input:
 10153                              <1> ;      dl = drive id
 10154                              <1> ;      es:di -> buffer for drive info (struc struc_driveinfo)
 10155                              <1> ;output:
 10156                              <1> ;      cf = 0 ok
 10157                              <1> ;      cf = 1 drive is not presents
 10158                              <1> ;==============================================================================
 10159                              <1> get_drive_info:
 10160 00003497 60                  <1>         pusha
 10161                              <1>         
 10162 00003498 8815                <1>         mov [di + struc_driveinfo.id], dl
 10163 0000349A C6450100            <1>         mov byte [di + struc_driveinfo.flags], 0 ; clear the flags
 10164                              <1> 
 10165 0000349E 52                  <1>         push dx
 10166 0000349F E8D8FF              <1>         call check_int13ext
 10167 000034A2 5A                  <1>         pop dx
 10168 000034A3 7359                <1>         jnc .ext_present
 10169                              <1> 
 10170 000034A5 B415                <1>         mov ah, INT13H_GETTYPE
 10171 000034A7 52                  <1>         push dx
 10172 000034A8 CD13                <1>         int 0x13
 10173 000034AA 8826[B854]          <1>         mov [hdio_tmp.disk_errno], ah
 10174 000034AE 5A                  <1>         pop dx
 10175 000034AF 724A                <1>         jc .drive_not_present
 10176 000034B1 08E4                <1>         or ah, ah                           ; ah = drive type, = 0 no such drive
 10177 000034B3 7446                <1>         jz .drive_not_present
 10178                              <1>         
 10179 000034B5 06                  <1>         push es
 10180 000034B6 57                  <1>         push di
 10181 000034B7 50                  <1>         push ax                             ; save drive type
 10182 000034B8 B408                <1>         mov ah, INT13H_GETINFO
 10183 000034BA CD13                <1>         int 0x13
 10184 000034BC 8826[B854]          <1>         mov [hdio_tmp.disk_errno], ah
 10185 000034C0 58                  <1>         pop ax
 10186 000034C1 5F                  <1>         pop di
 10187 000034C2 07                  <1>         pop es
 10188 000034C3 7236                <1>         jc .drive_not_present
 10189                              <1> 
 10190 000034C5 50                  <1>         push ax                             ; drive type.
 10191 000034C6 53                  <1>         push bx                             ; floppy type.
 10192                              <1>         
 10193 000034C7 0FB6C1              <1>         movzx ax, cl                             ;
 10194 000034CA 243F                <1>         and al, 0x3f                             ; get sectors per track
 10195 000034CC 894506              <1>         mov [di + struc_driveinfo.sectors], ax   ;
 10196                              <1> 
 10197 000034CF 86E5                <1>         xchg ah, ch                              ;
 10198 000034D1 C1E102              <1>         shl cx, 2                                ;
 10199 000034D4 88E1                <1>         mov cl, ah                               ; get cylinders
 10200 000034D6 41                  <1>         inc cx                                   ;
 10201 000034D7 894D02              <1>         mov [di + struc_driveinfo.cylinders], cx ;
 10202                              <1> 
 10203 000034DA 0FB6C6              <1> 	movzx ax, dh                             ; get heads
 10204 000034DD 40                  <1>         inc ax                                   ;
 10205 000034DE 894504              <1>         mov [di + struc_driveinfo.heads], ax     ;
 10206                              <1> 
 10207 000034E1 5B                  <1>         pop bx
 10208 000034E2 58                  <1>         pop ax
 10209                              <1> 
 10210 000034E3 B601                <1>         mov dh, DRVFLAG_DRIVEOK
 10211 000034E5 80FC03              <1>         cmp ah, DRV_TYPE_FIXED                  ; fixed drive.
 10212 000034E8 7403                <1>         je .fixed_drive
 10213 000034EA 80CE04              <1>         or dh, DRVFLAG_REMOVABLE
 10214                              <1>         
 10215                              <1> .fixed_drive:
 10216 000034ED 80CE02              <1>         or dh, DRVFLAG_CHSVALID
 10217 000034F0 887501              <1>         mov [di + struc_driveinfo.flags], dh
 10218 000034F3 C745080002          <1> 	mov word [di + struc_driveinfo.sector_size], 0x200
 10219 000034F8 E97F00              <1>         jmp .endok
 10220                              <1> 
 10221                              <1> .drive_not_present:
 10222 000034FB 61                  <1>         popa
 10223 000034FC F9                  <1>         stc
 10224 000034FD C3                  <1>         ret
 10225                              <1> 
 10226                              <1> .ext_present:
 10227                              <1> ;Int13h ext is presents, use int13h ext to get drive info
 10228 000034FE B448                <1>         mov ah, INT13H_EXT_GETINFO
 10229 00003500 8D36[5C54]          <1>         lea si, [hdio_tmp.extparam]
 10230 00003504 C7044200            <1>         mov word [si + struc_extparam.pack_size], SIZE_OF_EXTPARAM
 10231 00003508 52                  <1>         push dx
 10232 00003509 CD13                <1>         int 0x13
 10233 0000350B 8826[B854]          <1>         mov [hdio_tmp.disk_errno], ah
 10234 0000350F 5A                  <1>         pop dx
 10235 00003510 72E9                <1>         jc .drive_not_present
 10236                              <1>         
 10237 00003512 8B4404              <1>         mov ax, [si + struc_extparam.cylinders]
 10238 00003515 894502              <1>         mov [di + struc_driveinfo.cylinders], ax
 10239 00003518 8B4408              <1>         mov ax, [si + struc_extparam.heads]
 10240 0000351B 894504              <1>         mov [di + struc_driveinfo.heads], ax
 10241 0000351E 8B440C              <1>         mov ax, [si + struc_extparam.sectors]
 10242 00003521 894506              <1>         mov [di + struc_driveinfo.sectors], ax
 10243 00003524 8B4418              <1> 	mov ax, [si + struc_extparam.bytes_per_sect]
 10244 00003527 894508              <1> 	mov [di + struc_driveinfo.sector_size], ax
 10245                              <1> 
 10246 0000352A 8A4402              <1>         mov al, [si + struc_extparam.flags]              ;
 10247 0000352D 2406                <1>         and al, (DRVFLAG_CHSVALID + DRVFLAG_REMOVABLE)   ; fill in the
 10248 0000352F 0C09                <1>         or al, DRVFLAG_EXTOK + DRVFLAG_DRIVEOK           ; struc_driveinfo.flags
 10249                              <1> 
 10250                              <1> %ifndef DISABLE_CDBOOT
 10251 00003531 803C42              <1> 	cmp byte [si + struc_extparam.pack_size], SIZE_OF_EXTPARAM
 10252 00003534 721F                <1> 	jb .no_edd30
 10253 00003536 817C1EDDBE          <1> 	cmp word [si + struc_extparam.dpi_key], 0xBEDD
 10254 0000353B 7518                <1> 	jne .no_edd30
 10255 0000353D 807C2024            <1> 	cmp byte [si + struc_extparam.dpi_length], 36
 10256 00003541 7512                <1> 	jne .no_edd30
 10257 00003543 66817C2841544150    <1> 	cmp dword [si + struc_extparam.interface_type], 'ATAP'
 10258 0000354B 752A                <1> 	jne .not_cdrom
 10259 0000354D 807C2C49            <1> 	cmp byte [si + struc_extparam.interface_type+4], 'I'
 10260 00003551 7524                <1> 	jne .not_cdrom
 10261 00003553 0C10                <1> 	or al, DRVFLAG_ISCDROM
 10262                              <1> 
 10263                              <1> .no_edd30:
 10264 00003555 803C1E              <1> 	cmp byte [si + struc_extparam.pack_size], 30
 10265 00003558 721D                <1> 	jb .not_cdrom
 10266 0000355A 8B5C1C              <1> 	mov bx, [si + struc_extparam.dpte_addr+2]
 10267 0000355D 83FBFF              <1> 	cmp bx, 0xffff
 10268 00003560 7415                <1> 	je .not_cdrom
 10269 00003562 8B741A              <1> 	mov si, [si + struc_extparam.dpte_addr]
 10270 00003565 83FEFF              <1> 	cmp si, 0xffff
 10271 00003568 740D                <1> 	je .not_cdrom
 10272 0000356A 1E                  <1> 	push ds
 10273 0000356B 8EDB                <1> 	mov ds, bx
 10274 0000356D 3EF6440A40          <1> 	test byte [ds:si + struc_dpte.bios_spec], 0x40  ; check if is atapi dev
 10275 00003572 1F                  <1> 	pop ds
 10276 00003573 7402                <1> 	jz .not_cdrom
 10277 00003575 0C10                <1> 	or al, DRVFLAG_ISCDROM
 10278                              <1> 
 10279                              <1> .not_cdrom:
 10280                              <1> %endif
 10281 00003577 884501              <1>         mov [di + struc_driveinfo.flags], al
 10282                              <1> 
 10283                              <1> .endok:
 10284 0000357A 61                  <1>         popa
 10285 0000357B F8                  <1>         clc
 10286 0000357C C3                  <1>         ret
 10287                              <1>         
 10288                              <1> ;==============================================================================
 10289                              <1> ;get_drive_flags ---- get drive flags
 10290                              <1> ;input:
 10291                              <1> ;      dl = drive id
 10292                              <1> ;output:
 10293                              <1> ;      cf = 0 ok, al = drive flags
 10294                              <1> ;      cf = 1 error, al = 0
 10295                              <1> ;==============================================================================
 10296                              <1> get_drive_flags:
 10297 0000357D 57                  <1>         push di
 10298 0000357E 8D3E[AE54]          <1>         lea di, [hdio_tmp.driveinfo]
 10299 00003582 E812FF              <1>         call get_drive_info
 10300 00003585 8A4501              <1>         mov al, [di + struc_driveinfo.flags]
 10301 00003588 5F                  <1>         pop di
 10302 00003589 C3                  <1>         ret
 10303                              <1> 
 10304                              <1> ;;;;;;;;;;;;;;;;;;; perhaps these will be used in future ;;;;;;;;;;;;;;;;;;;
 10305                              <1> %if 0
 10306                              <1> ;==============================================================================
 10307                              <1> ;init_drives_info ---- get all drives info
 10308                              <1> ;input:
 10309                              <1> ;      es:di -> buffer to store the info of each drives
 10310                              <1> ;               should have enought space to store 255 drives' info
 10311                              <1> ;output:
 10312                              <1> ;      dh = the number of drives (include the floppy)
 10313                              <1> ;==============================================================================
 10314                              <1> init_drives_info:
 10315                              <1>         push es
 10316                              <1>         push di
 10317                              <1>         mov cx, 256
 10318                              <1>         xor dx, dx
 10319                              <1> .loop_query:
 10320                              <1>         push cx
 10321                              <1>         push dx
 10322                              <1>         call get_drive_info
 10323                              <1>         pop dx
 10324                              <1>         pop cx
 10325                              <1>         jc .bad_drive
 10326                              <1>         inc dh
 10327                              <1>         
 10328                              <1> .bad_drive:
 10329                              <1>         add di, SIZE_OF_DRIVEINFO
 10330                              <1>         inc dl
 10331                              <1>         loop .loop_query
 10332                              <1>         
 10333                              <1>         pop di
 10334                              <1>         pop es
 10335                              <1>         ret
 10336                              <1> 
 10337                              <1> %endif
 10338                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10339                              <1> 
 10340                              <1> ;==============================================================================
 10341                              <1> ;lba2chs ---- lba to chs translation
 10342                              <1> ;input:
 10343                              <1> ;      ebx = lba address 
 10344                              <1> ;      ds : si -> drive info struc
 10345                              <1> ;output:
 10346                              <1> ;      cf = 0 success
 10347                              <1> ;            ch = low eight bits of cylinder number
 10348                              <1> ;            cl = sector number 1-63 (bits 0-5)
 10349                              <1> ;                 high two bits of cylinder (bits 6-7, hard disk only)
 10350                              <1> ;            dh = head number
 10351                              <1> ;      cf = 1 error ( cylinder exceed )
 10352                              <1> ;==============================================================================
 10353                              <1> lba2chs:
 10354 0000358A 50                  <1>         push ax
 10355 0000358B 6689D8              <1> 	mov eax, ebx
 10356                              <1> 
 10357 0000358E 660FB74C06          <1>         movzx ecx, word [si + struc_driveinfo.sectors] ; calculate sector:
 10358                              <1> 
 10359 00003593 09C9                <1>         or cx, cx                              ; sectors per track cannot equal
 10360 00003595 7429                <1>         jz .convert_failed                     ; to zero.
 10361                              <1>         
 10362 00003597 6631D2              <1>         xor edx, edx
 10363 0000359A 66F7F1              <1>         div ecx                                ; sector =  lba % sects_per_track + 1
 10364 0000359D 42                  <1>         inc dx                                 ; lba1 = lba / sects_per_track
 10365 0000359E 89D1                <1>         mov cx, dx                             ;
 10366                              <1> 
 10367                              <1>                                                ; calculate head and cylinder:
 10368                              <1>                                                ; head = lba1 % num_of_heads
 10369 000035A0 660FB75C04          <1>         movzx ebx, word [si + struc_driveinfo.heads] 
 10370                              <1>                                                ; cylinder = lba1 / num_of_heads
 10371                              <1> 
 10372 000035A5 08DB                <1>         or bl, bl                              ; heads cannot equal to zero.
 10373 000035A7 7417                <1>         jz .convert_failed                     ;
 10374                              <1>         
 10375 000035A9 6631D2              <1>         xor edx, edx
 10376 000035AC 66F7F3              <1>         div ebx                                ;
 10377                              <1>         
 10378 000035AF 88D6                <1>         mov dh, dl                             ; head = dl <= 255
 10379 000035B1 3DFF03              <1>         cmp ax, MAX_CYLS                       ; cylinder = ax
 10380 000035B4 770A                <1>         ja .convert_failed                     ; cylinder is too big.
 10381                              <1> 
 10382 000035B6 86C4                <1>         xchg al, ah                            ;
 10383 000035B8 C0E006              <1>         shl al, 6                              ; fill cylinder and sector into
 10384 000035BB 09C1                <1>         or cx, ax                              ; cx
 10385 000035BD 58                  <1>         pop ax
 10386 000035BE F8                  <1>         clc
 10387 000035BF C3                  <1>         ret
 10388                              <1>         
 10389                              <1> .convert_failed:
 10390 000035C0 C606[B854]FE        <1>         mov byte [hdio_tmp.disk_errno], 0xFE             ; invalid LBA address
 10391 000035C5 58                  <1>         pop ax
 10392 000035C6 F9                  <1>         stc
 10393 000035C7 C3                  <1>         ret
 10394                              <1>         
 10395                              <1> ;==============================================================================
 10396                              <1> ;disk_access_low ---- read / write sectors on disk
 10397                              <1> ;input:
 10398                              <1> ;      ah      = function id, ( 02 = read, 03 = write )
 10399                              <1> ;      al      = number of sectors to be accessed
 10400                              <1> ;      ebx     = lba address
 10401                              <1> ;      ds : si -> drive info struc
 10402                              <1> ;      es : di -> buffer to get/store data
 10403                              <1> ;output:
 10404                              <1> ;      cf = 0 success
 10405                              <1> ;      cf = 1 error
 10406                              <1> ;==============================================================================
 10407                              <1> disk_access_low:
 10408 000035C8 60                  <1>         pusha
 10409                              <1>         
 10410 000035C9 8A7401              <1>         mov dh, [si + struc_driveinfo.flags]
 10411 000035CC F6C601              <1>         test dh, DRVFLAG_DRIVEOK ; check if drive ok
 10412 000035CF 7467                <1>         jz .access_error
 10413                              <1>         
 10414 000035D1 F6C608              <1>         test dh, DRVFLAG_EXTOK
 10415 000035D4 7440                <1>         jz .no_ext
 10416                              <1>         
 10417                              <1> ;int13h extension is present, use it
 10418                              <1>         
 10419 000035D6 8A14                <1>         mov dl, [si + struc_driveinfo.id]    ; get drive id
 10420 000035D8 80C440              <1>         add ah, 0x40                         ; ext read func id = 0x42
 10421 000035DB 8D36[9E54]          <1>         lea si, [hdio_tmp.int13ext]
 10422 000035DF 6631C9              <1>         xor ecx, ecx
 10423 000035E2 C60410              <1>         mov byte [si + struc_int13ext.pack_size], 0x10 ;
 10424 000035E5 66894C0C            <1>         mov [si + struc_int13ext.blk_num_high1], ecx ; clear and set
 10425 000035E9 884C01              <1>         mov [si + struc_int13ext.reserved], cl       ; some stuff.
 10426 000035EC 884C03              <1>         mov [si + struc_int13ext.reserved1], cl      ;
 10427                              <1> 
 10428 000035EF 897C04              <1>         mov [si + struc_int13ext.buf_addr_off], di
 10429 000035F2 8C4406              <1>         mov [si + struc_int13ext.buf_addr_seg], es
 10430 000035F5 66895C08            <1>         mov [si + struc_int13ext.blk_num_low1], ebx
 10431                              <1> 
 10432                              <1> .retry_ext_read:
 10433 000035F9 884402              <1>         mov [si + struc_int13ext.blk_count], al
 10434                              <1>         
 10435 000035FC 50                  <1>         push ax
 10436 000035FD 52                  <1>         push dx
 10437 000035FE 56                  <1>         push si
 10438 000035FF CD13                <1>         int 0x13
 10439 00003601 8826[B854]          <1>         mov [hdio_tmp.disk_errno], ah
 10440 00003605 5E                  <1>         pop si
 10441 00003606 5A                  <1>         pop dx
 10442 00003607 58                  <1>         pop ax
 10443 00003608 732F                <1>         jnc .access_ok
 10444 0000360A E86C00              <1>         call reset_drive
 10445 0000360D FEC6                <1>         inc dh
 10446 0000360F 80FE03              <1>         cmp dh, RETRY_TIMES                 ; retry 3 times
 10447 00003612 72E5                <1>         jb .retry_ext_read
 10448 00003614 EB22                <1>         jmp short .access_error
 10449                              <1> 
 10450                              <1> ;int13h extension is not ok, use old int13h
 10451                              <1> .no_ext:
 10452 00003616 E871FF              <1>         call lba2chs
 10453 00003619 721D                <1>         jc .access_error
 10454 0000361B 8A14                <1>         mov dl, [si + struc_driveinfo.id]   ; dl = drive id
 10455 0000361D 89FB                <1>         mov bx, di                          ; es : bx -> buffer
 10456 0000361F 31FF                <1>         xor di, di
 10457                              <1>         
 10458                              <1> .retry_read:
 10459 00003621 50                  <1>         push ax
 10460 00003622 52                  <1>         push dx
 10461 00003623 53                  <1>         push bx
 10462 00003624 CD13                <1>         int 0x13
 10463 00003626 8826[B854]          <1>         mov [hdio_tmp.disk_errno], ah
 10464 0000362A 5B                  <1>         pop bx
 10465 0000362B 5A                  <1>         pop dx
 10466 0000362C 58                  <1>         pop ax
 10467 0000362D 730A                <1>         jnc .access_ok
 10468 0000362F E84700              <1>         call reset_drive
 10469 00003632 47                  <1>         inc di
 10470 00003633 83FF03              <1>         cmp di, RETRY_TIMES                 ; retry 3 times
 10471 00003636 72E9                <1>         jb .retry_read
 10472                              <1> 
 10473                              <1> .access_error:
 10474 00003638 F9                  <1>         stc
 10475                              <1> .access_ok:
 10476 00003639 61                  <1>         popa
 10477 0000363A C3                  <1>         ret
 10478                              <1> 
 10479                              <1> ;==============================================================================
 10480                              <1> ;disk_access ---- read / write sectors on disk
 10481                              <1> ;input:
 10482                              <1> ;      ah = function id, ( 02 = read, 03 = write )
 10483                              <1> ;      al = number of sectors to be accessed
 10484                              <1> ;      ebx = lba address
 10485                              <1> ;      dl = drive id
 10486                              <1> ;      es : di -> buffer
 10487                              <1> ;output:
 10488                              <1> ;      cf = 0 success
 10489                              <1> ;      cf = 1 error
 10490                              <1> ;==============================================================================
 10491                              <1> disk_access:
 10492 0000363B 56                  <1>         push si
 10493 0000363C 57                  <1>         push di
 10494 0000363D 6653                <1> 	push ebx
 10495                              <1> 
 10496 0000363F 06                  <1>         push es
 10497 00003640 1E                  <1>         push ds                         ; ds -> es, hdio_tmp.driveinfo is in ds segment.
 10498 00003641 07                  <1>         pop es
 10499                              <1>         
 10500 00003642 8D3E[AE54]          <1>         lea di, [hdio_tmp.driveinfo]
 10501 00003646 E84EFE              <1>         call get_drive_info
 10502                              <1>         
 10503 00003649 07                  <1>         pop es
 10504 0000364A 665B                <1> 	pop ebx
 10505 0000364C 5F                  <1>         pop di
 10506                              <1>         
 10507 0000364D 7207                <1>         jc .access_error
 10508 0000364F 8D36[AE54]          <1>         lea si, [hdio_tmp.driveinfo]
 10509 00003653 E872FF              <1>         call disk_access_low
 10510                              <1> .access_error:
 10511 00003656 5E                  <1>         pop si
 10512 00003657 C3                  <1>         ret
 10513                              <1> 
 10514                              <1> 
 10515                              <1> %if 0
 10516                              <1> ;==============================================================================
 10517                              <1> ;get_cdrom_devinfo ---- get the CDROM's device info, e.g. io port
 10518                              <1> ;input: dl = drive id
 10519                              <1> ;output: cf = 0 success, ax = base io port, bx = ctrl port,
 10520                              <1> ;        cx = device specification
 10521                              <1> ;==============================================================================
 10522                              <1> get_cdrom_devinfo:
 10523                              <1> 	push si
 10524                              <1> 	call get_drive_flags
 10525                              <1> 	test al, DRVFLAG_ISCDROM
 10526                              <1> 	jz .not_cdrom
 10527                              <1> 
 10528                              <1> 	mov si, hdio_tmp.extparam
 10529                              <1> 	mov word [si], SIZE_OF_EXTPARAM
 10530                              <1> 	mov ah, 0x48
 10531                              <1> 	int 0x13
 10532                              <1> 
 10533                              <1> 	jc .not_cdrom
 10534                              <1> 	cmp byte [si], 30
 10535                              <1> 	jb .not_cdrom
 10536                              <1> 	mov ax, [si + struc_extparam.dpte_addr + 2]
 10537                              <1> 	cmp ax, 0xffff
 10538                              <1> 	je .not_cdrom
 10539                              <1> 
 10540                              <1> 	push es
 10541                              <1> 	push di
 10542                              <1> 	mov es, ax
 10543                              <1> 	mov di, [si + struc_extparam.dpte_addr]
 10544                              <1> 	mov ax, [es:di + struc_dpte.base_io]
 10545                              <1> 	mov bx, [es:di + struc_dpte.ctrl_io]
 10546                              <1> 	pop di
 10547                              <1> 	pop es
 10548                              <1> 
 10549                              <1> 	cmp byte [si], SIZE_OF_EXTPARAM
 10550                              <1> 	jb .not_cdrom
 10551                              <1> 	mov cx, [si + struc_extparam.device_path]
 10552                              <1> 	clc
 10553                              <1> 	jmp short .ok
 10554                              <1> 
 10555                              <1> .not_cdrom:
 10556                              <1> 	stc
 10557                              <1> .ok:
 10558                              <1> 	pop si
 10559                              <1> 	ret
 10560                              <1> 
 10561                              <1> %endif
 10562                              <1> 
 10563                              <1> %ifndef DISABLE_CDBOOT
 10564                              <1> ;==============================================================================
 10565                              <1> ;get_cdrom_boot_catalog ---- get the CDROM's boot catalog
 10566                              <1> ;input:
 10567                              <1> ;	dl = drive id
 10568                              <1> ;	es:di -> buffer
 10569                              <1> ;output:
 10570                              <1> ;	cf =0 success
 10571                              <1> ;	cf =1 error
 10572                              <1> ;==============================================================================
 10573                              <1> get_cdrom_boot_catalog:
 10574 00003658 60                  <1> 	pusha
 10575 00003659 BE[5454]            <1> 	mov si, hdio_tmp.cdbc_cmd
 10576 0000365C C60408              <1> 	mov byte [si], SIZE_OF_CDBC_CMD
 10577 0000365F C6440101            <1> 	mov byte [si+struc_cdbc_cmd.sector_count], 1
 10578 00003663 897C02              <1> 	mov [si+struc_cdbc_cmd.buf_addr_off], di
 10579 00003666 8C4404              <1> 	mov [si+struc_cdbc_cmd.buf_addr_seg], es
 10580 00003669 31DB                <1> 	xor bx, bx
 10581 0000366B 895C06              <1> 	mov [si+struc_cdbc_cmd.begnning_sect], bx
 10582 0000366E B8004D              <1> 	mov ax, 0x4d00
 10583 00003671 CD13                <1> 	int 0x13
 10584 00003673 8826[B854]          <1> 	mov [hdio_tmp.disk_errno], ah
 10585 00003677 61                  <1> 	popa
 10586 00003678 C3                  <1> 	ret
 10587                              <1> %endif
 10588                              <1> 
 10589                              <1> ;==============================================================================
 10590                              <1> ;reset_drive ---- reset the drive
 10591                              <1> ;input:
 10592                              <1> ;      dl = drive id
 10593                              <1> ;output:
 10594                              <1> ;      cf = 0 success
 10595                              <1> ;      cf = 1 error
 10596                              <1> ;==============================================================================
 10597                              <1> reset_drive:
 10598 00003679 60                  <1>         pusha
 10599 0000367A 31C0                <1>         xor ax, ax
 10600 0000367C CD13                <1>         int 0x13
 10601 0000367E 61                  <1>         popa
 10602 0000367F C3                  <1>         ret
 10603                              <1> 
 10604                              <1> ;==============================================================================
 10605                              <1> ; get_last_disk_errno ---- get the last disk error number
 10606                              <1> ; input:
 10607                              <1> ;	none
 10608                              <1> ; output:
 10609                              <1> ;	ax = errno
 10610                              <1> ;==============================================================================
 10611                              <1> get_last_disk_errno:
 10612 00003680 A1[B854]            <1> 	mov ax, [hdio_tmp.disk_errno]
 10613 00003683 C3                  <1> 	ret
 10614                              <1> 
 10615                              <1> ;==============================================================================
 10616                              <1> ;get_drvid_str ---- get driver id string
 10617                              <1> ;input:
 10618                              <1> ;	dl = drive id
 10619                              <1> ;	es:di -> buffer
 10620                              <1> ;output:
 10621                              <1> ;	es:di -> point to the end of the string
 10622                              <1> ;==============================================================================
 10623                              <1> get_drvid_str:
 10624 00003684 60                  <1> 	pusha
 10625                              <1> 
 10626                              <1> %ifdef SHOW_DRV_NAME
 10627                              <1> 	call get_drive_flags
 10628                              <1> 	cmp dl, MIN_HD_ID
 10629                              <1> 	jb .floppy
 10630                              <1> 	test al, DRVFLAG_REMOVABLE
 10631                              <1> 	jz .harddisk
 10632                              <1> 	test al, DRVFLAG_ISCDROM
 10633                              <1> 	jnz .cdrom
 10634                              <1> 	mov ax, 'RD'
 10635                              <1> 	jmp short .show_drv_name
 10636                              <1> .floppy:
 10637                              <1> 	mov ax, 'FD'
 10638                              <1> 	jmp short .show_drv_name
 10639                              <1> .harddisk:
 10640                              <1> 	mov ax, 'HD'
 10641                              <1> 	jmp short .show_drv_name
 10642                              <1> .cdrom:
 10643                              <1> 	mov ax, 'CD'
 10644                              <1> .show_drv_name:
 10645                              <1> 	stosb
 10646                              <1> 	mov al, ah
 10647                              <1> 	stosb
 10648                              <1> 
 10649                              <1> 	movzx ax, dl
 10650                              <1> 	and al, 0x0F
 10651                              <1> 	mov cl, 1
 10652                              <1> 	call htoa
 10653                              <1> %else
 10654 00003685 0FB6C2              <1>         movzx ax, dl                                ; fill drive id
 10655 00003688 B103                <1>         mov cl, 3                                   ;
 10656 0000368A E88CEF              <1>         call itoa                                   ;
 10657                              <1> %endif
 10658 0000368D 61                  <1> 	popa
 10659 0000368E 83C703              <1> 	add di, 3
 10660 00003691 C3                  <1> 	ret
 10661                              <1> 
 10662 00003692 01                  <1> use_int13_ext  db 1
 10663                                  %include "myint13h.asm"
 10664                              <1> ; asmsyntax=nasm
 10665                              <1> ;
 10666                              <1> ; myint13h.asm
 10667                              <1> ;
 10668                              <1> ; install / uninstall func for my int13h
 10669                              <1> ;
 10670                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
 10671                              <1> ;
 10672                              <1> %ifndef DISABLE_CDBOOT
 10673                              <1>   %define SIZE_OF_EDD30	8	; my EDD3.0 and ATAPI driver need 6K mem
 10674                              <1> %else
 10675                              <1>   %define SIZE_OF_EDD30	1	; my SWAP Driver ID wrapper needs 1K mem
 10676                              <1> %endif
 10677                              <1> 
 10678                              <1> %ifndef DISABLE_CDBOOT
 10679                              <1>   %define EDD30_SIG1	'BM'
 10680                              <1>   %define EDD30_SIG2	'CB'
 10681                              <1> %else
 10682                              <1>   %define EDD30_SIG1	'BM'
 10683                              <1>   %define EDD30_SIG2	'SD'
 10684                              <1> %endif
 10685                              <1> 
 10686                              <1> ;=============================================================================
 10687                              <1> ;install_myint13h ---- install my int13h handler
 10688                              <1> ; bl = 0 init cdrom
 10689                              <1> ; bl = 1 don't init cdrom
 10690                              <1> ;=============================================================================
 10691                              <1> install_myint13h:
 10692 00003693 60                  <1> 	pusha
 10693 00003694 06                  <1> 	push es
 10694 00003695 31C0                <1> 	xor ax, ax
 10695 00003697 8EC0                <1> 	mov es, ax
 10696                              <1> 
 10697 00003699 E87300              <1> 	call check_myint13h
 10698 0000369C 7209                <1> 	jc .not_inst
 10699 0000369E 26A14E00            <1> 	mov ax, [es:0x13*4+2]
 10700 000036A2 A3[7071]            <1> 	mov [myint13h_tmp.edd30_seg], ax
 10701                              <1> 
 10702 000036A5 EB2D                <1> 	jmp .end
 10703                              <1> 	
 10704                              <1> .not_inst:
 10705                              <1> 
 10706                              <1> %ifndef DISABLE_CDBOOT
 10707 000036A7 53                  <1> 	push bx
 10708                              <1> %endif
 10709 000036A8 26832E130408        <1> 	sub word [es:0x413], SIZE_OF_EDD30 ; allocate memory for module edd30
 10710 000036AE CD12                <1> 	int 0x12
 10711 000036B0 C1E006              <1> 	shl ax, 6
 10712 000036B3 50                  <1> 	push ax
 10713 000036B4 07                  <1> 	pop es
 10714 000036B5 31FF                <1> 	xor di, di
 10715 000036B7 BE[2D37]            <1> 	mov si, module_edd30
 10716 000036BA B9900B              <1> 	mov cx, end_of_mod_edd30 - module_edd30
 10717 000036BD FC                  <1> 	cld
 10718 000036BE F3A4                <1> 	rep movsb
 10719                              <1> 
 10720 000036C0 A3[7071]            <1> 	mov [myint13h_tmp.edd30_seg], ax
 10721                              <1> 
 10722                              <1> %ifndef DISABLE_CDBOOT
 10723 000036C3 5B                  <1> 	pop bx
 10724 000036C4 08DB                <1> 	or bl, bl
 10725 000036C6 7506                <1> 	jnz .go_inst_int13
 10726 000036C8 B402                <1> 	mov ah, 2
 10727 000036CA FF1E[6E71]          <1> 	call far [myint13h_tmp.edd30_off]	;initialize cdrom drivers
 10728                              <1> %endif
 10729                              <1> 
 10730                              <1> .go_inst_int13:
 10731 000036CE 31C0                <1> 	xor ax, ax
 10732 000036D0 FF1E[6E71]          <1> 	call far [myint13h_tmp.edd30_off]	;install my int13h 
 10733                              <1> 
 10734                              <1> .end:
 10735 000036D4 07                  <1> 	pop es
 10736 000036D5 61                  <1> 	popa
 10737 000036D6 C3                  <1> 	ret
 10738                              <1> 
 10739                              <1> ;=============================================================================
 10740                              <1> ;uninstall_myint13h ---- uninstall my int13h handler
 10741                              <1> ;=============================================================================
 10742                              <1> uninstall_myint13h:
 10743 000036D7 60                  <1> 	pusha
 10744 000036D8 E83400              <1> 	call check_myint13h
 10745 000036DB 7214                <1> 	jc .not_inst
 10746                              <1> 
 10747 000036DD B401                <1> 	mov ah, 1
 10748 000036DF FF1E[6E71]          <1> 	call far [myint13h_tmp.edd30_off]
 10749 000036E3 720C                <1> 	jc .not_inst
 10750                              <1> 
 10751 000036E5 06                  <1> 	push es
 10752 000036E6 31C0                <1> 	xor ax, ax
 10753 000036E8 8EC0                <1> 	mov es, ax
 10754 000036EA 268306130408        <1> 	add word [es:0x413], SIZE_OF_EDD30 ; free memory
 10755 000036F0 07                  <1> 	pop es
 10756                              <1> 
 10757                              <1> .not_inst:
 10758 000036F1 61                  <1> 	popa
 10759 000036F2 C3                  <1> 	ret
 10760                              <1> 
 10761                              <1> ;=============================================================================
 10762                              <1> ;set_drive_map
 10763                              <1> ;input: bx, cx drive map
 10764                              <1> ;=============================================================================
 10765                              <1> set_drive_map:
 10766 000036F3 60                  <1> 	pusha
 10767 000036F4 E81800              <1> 	call check_myint13h
 10768 000036F7 7206                <1> 	jc .end
 10769 000036F9 B403                <1> 	mov ah, 3
 10770                              <1> 
 10771 000036FB FF1E[6E71]          <1> 	call far [myint13h_tmp.edd30_off]
 10772                              <1> .end:
 10773 000036FF 61                  <1> 	popa
 10774 00003700 C3                  <1> 	ret
 10775                              <1> 
 10776                              <1> ;=============================================================================
 10777                              <1> ;set_io_ports
 10778                              <1> ;input: bx, cx io ports
 10779                              <1> ;=============================================================================
 10780                              <1> set_io_ports:
 10781 00003701 60                  <1> 	pusha
 10782 00003702 E80A00              <1> 	call check_myint13h
 10783 00003705 7206                <1> 	jc .end
 10784 00003707 B404                <1> 	mov ah, 4
 10785                              <1> 
 10786 00003709 FF1E[6E71]          <1> 	call far [myint13h_tmp.edd30_off]
 10787                              <1> .end:
 10788 0000370D 61                  <1> 	popa
 10789 0000370E C3                  <1> 	ret
 10790                              <1> 
 10791                              <1> ;=============================================================================
 10792                              <1> ;check_myint13h ---- check if myint13h is present
 10793                              <1> ;=============================================================================
 10794                              <1> check_myint13h:
 10795 0000370F 60                  <1> 	pusha
 10796 00003710 B86666              <1> 	mov ax, 0x6666
 10797 00003713 BB424D              <1> 	mov bx, EDD30_SIG1
 10798 00003716 B94342              <1> 	mov cx, EDD30_SIG2
 10799 00003719 F8                  <1> 	clc
 10800 0000371A CD13                <1> 	int 0x13
 10801 0000371C 720C                <1> 	jc .absent
 10802 0000371E 81FB4342            <1> 	cmp bx, EDD30_SIG2
 10803 00003722 7506                <1> 	jne .absent
 10804 00003724 81F9424D            <1> 	cmp cx, EDD30_SIG1
 10805 00003728 7401                <1> 	je .end
 10806                              <1> .absent:
 10807 0000372A F9                  <1> 	stc
 10808                              <1> .end:
 10809 0000372B 61                  <1> 	popa
 10810 0000372C C3                  <1> 	ret
 10811                              <1> 
 10812                              <1> module_edd30:
 10813 0000372C <incbin>            <1> incbin "..\binaries\edd30.bin"
 10814                              <1> end_of_mod_edd30:
 10815                                  
 10816                                  ;=============================================================================
 10817                                  ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  DATA AREA  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 10818                                  ;=============================================================================
 10819                                  
 10820                                  %define ROOT_WINDOW_ACTION_NUMBER (main_action_table.end_of_root_window - main_action_table.root_window) / SIZE_OF_STRUC_ACTION
 10821                                  %define BOOT_MENU_ACTION_NUMBER (main_action_table.end_of_boot_menu - main_action_table.boot_menu) / SIZE_OF_STRUC_ACTION
 10822                                  %define MAIN_MENU_ACTION_NUMBER (main_action_table.end_of_main_menu - main_action_table.main_menu) / SIZE_OF_STRUC_ACTION
 10823                                  %define RECORD_MENU_ACTION_NUMBER (main_action_table.end_of_record_menu - main_action_table.record_menu) / SIZE_OF_STRUC_ACTION
 10824                                  %define SYS_MENU_ACTION_NUMBER (main_action_table.end_of_sys_menu - main_action_table.sys_menu) / SIZE_OF_STRUC_ACTION
 10825                                  
 10826                                  %define MAIN_MENU_ITEMS_NUMBER   11
 10827                                  %define RECORD_MENU_ITEMS_NUMBER 16
 10828                                  %define SYS_MENU_ITEMS_NUMBER    18
 10829                                  ;=============================================================================
 10830                                  ;  Windows data
 10831                                  ;=============================================================================
 10832                                  main_windows_data:
 10833                                  .root_window    istruc struc_window
 10834 000042BD 0900                    		at struc_window.flags,                  dw WINFLAG_OPEN | WINFLAG_NO_FOCUS
 10835 000042BF 0000                    		at struc_window.title,                  dw 0
 10836 000042C1 0000                    		at struc_window.win_attr,               dw 0
 10837 000042C3 0000                    		at struc_window.win_pos,                dw 0
 10838 000042C5 0000                    		at struc_window.win_size,               dw 0
 10839 000042C7 0000                    		at struc_window.parent_win,             dw 0
 10840 000042C9 0000                    		at struc_window.next_win,               dw 0
 10841 000042CB 0000                    		at struc_window.previous_win,           dw 0
 10842 000042CD 2800                    		at struc_window.act_num,                dw ROOT_WINDOW_ACTION_NUMBER
 10843 000042CF [8343]                  		at struc_window.act_table,              dw main_action_table.root_window
 10844 000042D1 [9E23]                  		at struc_window.default_event_handle,   dw window_default_event_handle
 10845 000042D3 [AA23]                  		at struc_window.event_handle,           dw window_event_handle
 10846 000042D5 [9E13]                  		at struc_window.draw_body_proc,         dw root_window_draw_body_proc
 10847                                  		iend
 10848                                  
 10849                                  .boot_menu      istruc struc_menu_box
 10850 000042D7 F400                    		at struc_window.flags,                  dw WINFLAG_FRAMED | MENUFLAG_SCROLLBAR | MENUFLAG_SINK_UPPER | MENUFLAG_SINK_WIDTH | MENUFLAG_SINK_BOTTOM
 10851 000042D9 [1745]                  		at struc_window.title,                  dw str_idx.boot_menu_title
 10852 000042DB F13F                    		at struc_window.win_attr,               dw 0x3FF1
 10853 000042DD 0000                    		at struc_window.win_pos,                dw 0
 10854 000042DF 0000                    		at struc_window.win_size,               dw 0
 10855 000042E1 [BD42]                  		at struc_window.parent_win,             dw .root_window
 10856 000042E3 0000                    		at struc_window.next_win,               dw 0
 10857 000042E5 0000                    		at struc_window.previous_win,           dw 0
 10858 000042E7 1300                    		at struc_window.act_num,                dw BOOT_MENU_ACTION_NUMBER
 10859 000042E9 [4B44]                  		at struc_window.act_table,              dw main_action_table.boot_menu
 10860 000042EB [7420]                  		at struc_window.default_event_handle,   dw menubox_default_event_handle
 10861 000042ED [AA23]                  		at struc_window.event_handle,           dw window_event_handle
 10862 000042EF [371F]                  		at struc_window.draw_body_proc,         dw menubox_draw_body_proc
 10863 000042F1 [1945]                  		at struc_menu_box.menu_header,          dw str_idx.boot_menu_header
 10864 000042F3 1F                      		at struc_menu_box.menu_header_attr,     db 0x1F
 10865 000042F4 707C                    		at struc_menu_box.menu_norm_attr,       dw 0x7C70
 10866 000042F6 0F0C                    		at struc_menu_box.menu_focus_attr,      dw 0x0C0F
 10867 000042F8 0000                                    at struc_menu_box.menu_area_pos,        dw 0
 10868 000042FA 0000                                    at struc_menu_box.menu_area_size,       dw 0
 10869 000042FC 3F                      		at struc_menu_box.scrollbar_attr,       db 0x3F
 10870 000042FD 00                      		at struc_menu_box.items_num,            db 0
 10871 000042FE 00                      		at struc_menu_box.focus_item,           db 0
 10872 000042FF 00                      		at struc_menu_box.first_visible_item,   db 0
 10873 00004300 [1C15]                  		at struc_menu_box.item_str_proc,        dw boot_menu_item_str_proc
 10874                                  		iend
 10875                                  
 10876                                  .main_menu      istruc struc_menu_box
 10877 00004302 0400                    		at struc_window.flags,                  dw WINFLAG_FRAMED
 10878 00004304 [8F45]                  		at struc_window.title,                  dw str_idx.main_menu_title
 10879 00004306 F130                    		at struc_window.win_attr,               dw 0x30F1
 10880 00004308 0101                    		at struc_window.win_pos,                dw 0x0101
 10881 0000430A 000D                    		at struc_window.win_size,               db 0, MAIN_MENU_ITEMS_NUMBER+2
 10882 0000430C [D742]                  		at struc_window.parent_win,             dw .boot_menu
 10883 0000430E 0000                    		at struc_window.next_win,               dw 0
 10884 00004310 0000                    		at struc_window.previous_win,           dw 0
 10885 00004312 0A00                    		at struc_window.act_num,                dw MAIN_MENU_ACTION_NUMBER
 10886 00004314 [8343]                  		at struc_window.act_table,              dw main_action_table.main_menu
 10887 00004316 [7420]                  		at struc_window.default_event_handle,   dw menubox_default_event_handle
 10888 00004318 [AA23]                  		at struc_window.event_handle,           dw window_event_handle
 10889 0000431A [371F]                  		at struc_window.draw_body_proc,	        dw menubox_draw_body_proc
 10890 0000431C 0000                    		at struc_menu_box.menu_header,          dw 0
 10891 0000431E 3F                      		at struc_menu_box.menu_header_attr,     db 0x3F
 10892 0000431F 303C                    		at struc_menu_box.menu_norm_attr,       dw 0x3C30
 10893 00004321 070C                    		at struc_menu_box.menu_focus_attr,      dw 0x0C07
 10894 00004323 0000                                    at struc_menu_box.menu_area_pos,        dw 0
 10895 00004325 0000                                    at struc_menu_box.menu_area_size,       dw 0
 10896 00004327 3F                      		at struc_menu_box.scrollbar_attr,       db 0x3F
 10897 00004328 0B                      		at struc_menu_box.items_num,            db MAIN_MENU_ITEMS_NUMBER
 10898 00004329 00                      		at struc_menu_box.focus_item,           db 0
 10899 0000432A 00                      		at struc_menu_box.first_visible_item,   db 0
 10900 0000432B [3615]                  		at struc_menu_box.item_str_proc,        dw main_menu_item_str_proc
 10901                                  		iend
 10902                                  
 10903                                  .record_menu    istruc struc_menu_box
 10904 0000432D 0400                    		at struc_window.flags,                  dw WINFLAG_FRAMED
 10905 0000432F [A745]                  		at struc_window.title,                  dw str_idx.record_menu_title
 10906 00004331 F130                    		at struc_window.win_attr,               dw 0x30F1
 10907 00004333 0202                    		at struc_window.win_pos,                dw 0x0202
 10908 00004335 0012                    		at struc_window.win_size,               db 0, RECORD_MENU_ITEMS_NUMBER+2
 10909 00004337 [D742]                  		at struc_window.parent_win,             dw .boot_menu
 10910 00004339 0000                    		at struc_window.next_win,               dw 0
 10911 0000433B 0000                    		at struc_window.previous_win,           dw 0
 10912 0000433D 1000                    		at struc_window.act_num,                dw RECORD_MENU_ACTION_NUMBER
 10913 0000433F [B543]                  		at struc_window.act_table,              dw main_action_table.record_menu
 10914 00004341 [7420]                  		at struc_window.default_event_handle,   dw menubox_default_event_handle
 10915 00004343 [AA23]                  		at struc_window.event_handle,           dw window_event_handle
 10916 00004345 [371F]                  		at struc_window.draw_body_proc,	        dw menubox_draw_body_proc
 10917 00004347 0000                    		at struc_menu_box.menu_header,          dw 0
 10918 00004349 3F                      		at struc_menu_box.menu_header_attr,     db 0x3F
 10919 0000434A 303C                    		at struc_menu_box.menu_norm_attr,       dw 0x3C30
 10920 0000434C 070C                    		at struc_menu_box.menu_focus_attr,      dw 0x0C07
 10921 0000434E 0000                                    at struc_menu_box.menu_area_pos,        dw 0
 10922 00004350 0000                                    at struc_menu_box.menu_area_size,       dw 0
 10923 00004352 3F                      		at struc_menu_box.scrollbar_attr,       db 0x3F
 10924 00004353 10                      		at struc_menu_box.items_num,            db RECORD_MENU_ITEMS_NUMBER
 10925 00004354 00                      		at struc_menu_box.focus_item,           db 0
 10926 00004355 00                      		at struc_menu_box.first_visible_item,   db 0
 10927 00004356 [3B15]                  		at struc_menu_box.item_str_proc,        dw record_menu_item_str_proc
 10928                                  		iend
 10929                                  
 10930                                  .sys_menu       istruc struc_menu_box
 10931 00004358 0400                    		at struc_window.flags,                  dw WINFLAG_FRAMED
 10932 0000435A [C945]                  		at struc_window.title,                  dw str_idx.sys_menu_title
 10933 0000435C F130                    		at struc_window.win_attr,               dw 0x30F1
 10934 0000435E 0303                    		at struc_window.win_pos,                dw 0x0303
 10935 00004360 0014                    		at struc_window.win_size,               db 0, SYS_MENU_ITEMS_NUMBER+2
 10936 00004362 [D742]                  		at struc_window.parent_win,             dw .boot_menu
 10937 00004364 0000                    		at struc_window.next_win,               dw 0
 10938 00004366 0000                    		at struc_window.previous_win,           dw 0
 10939 00004368 0C00                    		at struc_window.act_num,                dw SYS_MENU_ACTION_NUMBER
 10940 0000436A [0544]                  		at struc_window.act_table,              dw main_action_table.sys_menu
 10941 0000436C [7420]                  		at struc_window.default_event_handle,   dw menubox_default_event_handle
 10942 0000436E [AA23]                  		at struc_window.event_handle,           dw window_event_handle
 10943 00004370 [371F]                  		at struc_window.draw_body_proc,         dw menubox_draw_body_proc
 10944 00004372 0000                    		at struc_menu_box.menu_header,          dw 0
 10945 00004374 3F                      		at struc_menu_box.menu_header_attr,     db 0x3F
 10946 00004375 303C                    		at struc_menu_box.menu_norm_attr,       dw 0x3C30
 10947 00004377 070C                    		at struc_menu_box.menu_focus_attr,      dw 0x0C07
 10948 00004379 0000                                    at struc_menu_box.menu_area_pos,        dw 0
 10949 0000437B 0000                                    at struc_menu_box.menu_area_size,       dw 0
 10950 0000437D 3F                      		at struc_menu_box.scrollbar_attr,       db 0x3F
 10951 0000437E 12                      		at struc_menu_box.items_num,            db SYS_MENU_ITEMS_NUMBER
 10952 0000437F 00                      		at struc_menu_box.focus_item,           db 0
 10953 00004380 00                      		at struc_menu_box.first_visible_item,   db 0
 10954 00004381 [4015]                  		at struc_menu_box.item_str_proc,        dw sys_menu_item_str_proc
 10955                                  		iend
 10956                                  
 10957                                  .end_of_windows_data:
 10958                                  
 10959                                  ;=============================================================================
 10960                                  ;  Action table
 10961                                  ;=============================================================================
 10962                                  main_action_table:
 10963                                  
 10964                                  .root_window:
 10965                                  
 10966                                  .main_menu:
 10967 00004383 08                              db  ACTFLAG_REDRAW_SCR
 10968 00004384 003B                            dw  kbF1
 10969 00004386 [E00A]                          dw  main_show_help
 10970                                  
 10971 00004388 08                              db  ACTFLAG_REDRAW_SCR
 10972 00004389 005E                            dw  kbCtrlF1
 10973 0000438B [F60A]                          dw  main_show_about
 10974                                  
 10975 0000438D 88                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_SECURITY
 10976 0000438E 003C                            dw  kbF2
 10977 00004390 [410B]                          dw  main_save_changes
 10978                                  
 10979 00004392 54                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_AUTH_RECORD | ACTFLAG_CHK_RECNUM
 10980 00004393 0000                            dw  0
 10981 00004395 [C40D]                          dw  main_boot_it
 10982                                  
 10983                                          ;db  ACTFLAG_REDRAW_WIN
 10984                                          ;dw  0
 10985                                          ;dw  main_boot_prev_in_menu
 10986                                  
 10987 00004397 00                              db  0
 10988 00004398 0000                            dw  0
 10989 0000439A 0000                            dw  0
 10990                                  
 10991 0000439C 08                              db  ACTFLAG_REDRAW_SCR
 10992 0000439D 0013                            dw  kbAltR
 10993 0000439F [130B]                          dw  main_show_record_menu
 10994                                  
 10995 000043A1 08                              db  ACTFLAG_REDRAW_SCR
 10996 000043A2 001F                            dw  kbAltS
 10997 000043A4 [1A0B]                          dw  main_show_sys_menu
 10998                                  
 10999 000043A6 00                              db  0
 11000 000043A7 0000                            dw  0
 11001 000043A9 0000                            dw  0
 11002                                  
 11003 000043AB 24                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_AUTH_ROOT
 11004 000043AC 1110                            dw  kbCtrlQ
 11005 000043AE [EF0D]                          dw  main_return_to_bios
 11006                                  
 11007 000043B0 00                              db  0
 11008 000043B1 008A                            dw  kbCtrlF12
 11009 000043B3 [6B11]                          dw  Shutdown
 11010                                  
 11011                                  .end_of_main_menu
 11012                                  
 11013                                  .record_menu:
 11014 000043B5 04                              db  ACTFLAG_REDRAW_WIN
 11015 000043B6 2F35                            dw  kbSlash
 11016 000043B8 [7710]                          dw  main_show_record_info
 11017                                  
 11018 000043BA D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11019 000043BB 003D                            dw  kbF3
 11020 000043BD [570B]                          dw  main_change_name
 11021                                  
 11022 000043BF D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11023 000043C0 0043                            dw  kbF9
 11024 000043C2 [DE0B]                          dw  main_change_record_password
 11025                                  
 11026 000043C4 D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11027 000043C5 131F                            dw  kbCtrlS
 11028 000043C7 [C00E]                          dw  main_toggle_schedule
 11029                                  
 11030 000043C9 D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11031 000043CA 0B25                            dw  kbCtrlK
 11032 000043CC [8E0F]                          dw  main_toggle_keystrokes
 11033                                  
 11034 000043CE 00                              db  0
 11035 000043CF 0000                            dw  0
 11036 000043D1 0000                            dw  0
 11037                                  
 11038 000043D3 08                              db  ACTFLAG_REDRAW_SCR 
 11039 000043D4 003E                            dw  kbF4
 11040 000043D6 [670C]                          dw  main_mark_active
 11041                                  
 11042 000043D8 08                              db  ACTFLAG_REDRAW_SCR
 11043 000043D9 003F                            dw  kbF5
 11044 000043DB [BF0C]                          dw  main_toggle_hidden
 11045                                  
 11046 000043DD 08                              db  ACTFLAG_REDRAW_SCR
 11047 000043DE 0040                            dw  kbF6
 11048 000043E0 [3B0C]                          dw  main_toggle_auto_active
 11049                                  
 11050 000043E2 08                              db  ACTFLAG_REDRAW_SCR
 11051 000043E3 0041                            dw  kbF7
 11052 000043E5 [510C]                          dw  main_toggle_auto_hide
 11053                                  
 11054 000043E7 08                              db  ACTFLAG_REDRAW_SCR
 11055 000043E8 182D                            dw  kbCtrlX
 11056 000043EA [A20E]                          dw  main_toggle_swapid
 11057                                  
 11058 000043EC 00                              db  0
 11059 000043ED 0000                            dw  0
 11060 000043EF 0000                            dw  0
 11061                                  
 11062 000043F1 D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11063 000043F2 0420                            dw  kbCtrlD
 11064 000043F4 [E70C]                          dw  main_delete_record
 11065                                  
 11066 000043F6 D8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11067 000043F7 1019                            dw  kbCtrlP
 11068 000043F9 [FB0D]                          dw  main_dup_record
 11069                                  
 11070 000043FB 98                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY
 11071 000043FC 1516                            dw  kbCtrlU
 11072 000043FE [500E]                          dw  main_move_record_up
 11073                                  
 11074 00004400 98                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY
 11075 00004401 0E31                            dw  kbCtrlN
 11076 00004403 [1E0E]                          dw  main_move_record_down
 11077                                  
 11078                                  
 11079                                  .end_of_record_menu
 11080                                  
 11081                                  .sys_menu:
 11082 00004405 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11083 00004406 0044                            dw  kbF10
 11084 00004408 [910B]                          dw  main_change_root_password
 11085                                  
 11086 0000440A A8                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT | ACTFLAG_AUTH_SECURITY
 11087 0000440B 0067                            dw  kbCtrlF10
 11088 0000440D [7B0B]                          dw  main_login_as_root
 11089                                  
 11090 0000440F 88                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_SECURITY
 11091 00004410 0071                            dw  kbAltF10
 11092 00004412 [870B]                          dw  main_change_security_mode
 11093                                  
 11094 00004414 00                              db  0
 11095 00004415 0000                            dw  0
 11096 00004417 0000                            dw  0
 11097                                  
 11098 00004419 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11099 0000441A 0042                            dw  kbF8
 11100 0000441C [210C]                          dw  main_set_default_record
 11101                                  
 11102 0000441E 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11103 0000441F 005B                            dw  kbShiftF8
 11104 00004421 [310C]                          dw  main_unset_default_record
 11105                                  
 11106 00004423 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11107 00004424 1414                            dw  kbCtrlT
 11108 00004426 [940D]                          dw  main_set_delay_time
 11109                                  
 11110 00004428 08                              db  ACTFLAG_REDRAW_SCR
 11111 00004429 0621                            dw  kbCtrlF
 11112 0000442B [9711]                          dw  main_change_bootmenu_style
 11113                                  
 11114 0000442D 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11115 0000442E 0C26                            dw  kbCtrlL
 11116 00004430 [AD11]                          dw  main_toggle_rem_last
 11117                                  
 11118                                          ;db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11119                                          ;dw  0
 11120                                          ;dw  main_toggle_int13ext
 11121                                  
 11122 00004432 00                              db  0
 11123 00004433 0000                            dw  0
 11124 00004435 0000                            dw  0
 11125                                  
 11126 00004437 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11127 00004438 0917                            dw  kbCtrlI
 11128 0000443A [390D]                          dw  main_rescan_all_records
 11129                                  
 11130 0000443C 28                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11131 0000443D 0823                            dw  kbCtrlH
 11132 0000443F [400D]                          dw  main_rescan_all_partitions
 11133                                  
 11134                                          ;db  ACTFLAG_REDRAW_SCR
 11135                                          ;dw  0
 11136                                          ;dw  main_set_cdrom_ioports
 11137                                  
 11138                                          ;db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11139                                          ;dw  0
 11140                                          ;dw  main_set_y2k_year
 11141                                  
 11142                                          ;db  0
 11143                                          ;dw  0
 11144                                          ;dw  0
 11145                                  
 11146                                          ;db  ACTFLAG_REDRAW_SCR
 11147                                          ;dw  0
 11148                                          ;dw  main_install_sbm
 11149                                  
 11150                                          ;db  ACTFLAG_REDRAW_SCR | ACTFLAG_AUTH_ROOT
 11151                                          ;dw  0
 11152                                          ;dw  main_uninstall_sbm
 11153                                  
 11154                                  .end_of_sys_menu
 11155                                  
 11156 00004441 08                              db  ACTFLAG_REDRAW_SCR
 11157 00004442 01F4                            dw  EVENT_REDRAW_ROOT
 11158 00004444 0000                            dw  0
 11159                                  
 11160 00004446 18                              db  ACTFLAG_REDRAW_SCR | ACTFLAG_CHK_RECNUM
 11161 00004447 02F4                            dw  EVENT_BOOT_DEFAULT
 11162 00004449 [F516]                          dw  main_boot_default
 11163                                  
 11164                                  .end_of_root_window
 11165                                          
 11166                                  .boot_menu:
 11167 0000444B 08                              db  ACTFLAG_REDRAW_SCR
 11168 0000444C 0098                            dw  kbEnhAltUp
 11169 0000444E [1420]                          dw  menubox_focus_up
 11170                                  
 11171 00004450 08                              db  ACTFLAG_REDRAW_SCR
 11172 00004451 00A0                            dw  kbEnhAltDown
 11173 00004453 [4020]                          dw  menubox_focus_down
 11174                                  
 11175 00004455 04                              db  ACTFLAG_REDRAW_WIN
 11176 00004456 3F35                            dw  kbQuestion
 11177 00004458 [7710]                          dw  main_show_record_info
 11178                                  
 11179 0000445A D4                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11180 0000445B 003D                            dw  kbF3
 11181 0000445D [570B]                          dw  main_change_name
 11182                                  
 11183 0000445F D4                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11184 00004460 0043                            dw  kbF9
 11185 00004462 [DE0B]                          dw  main_change_record_password
 11186                                  
 11187 00004464 D4                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11188 00004465 131F                            dw  kbCtrlS
 11189 00004467 [C00E]                          dw  main_toggle_schedule
 11190                                  
 11191 00004469 D4                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11192 0000446A 0B25                            dw  kbCtrlK
 11193 0000446C [8E0F]                          dw  main_toggle_keystrokes
 11194                                  
 11195 0000446E D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11196 0000446F 003E                            dw  kbF4
 11197 00004471 [670C]                          dw  main_mark_active
 11198                                  
 11199 00004473 D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11200 00004474 003F                            dw  kbF5
 11201 00004476 [BF0C]                          dw  main_toggle_hidden
 11202                                  
 11203 00004478 D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11204 00004479 0040                            dw  kbF6
 11205 0000447B [3B0C]                          dw  main_toggle_auto_active
 11206                                  
 11207 0000447D D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11208 0000447E 0041                            dw  kbF7
 11209 00004480 [510C]                          dw  main_toggle_auto_hide
 11210                                  
 11211 00004482 D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11212 00004483 182D                            dw  kbCtrlX
 11213 00004485 [A20E]                          dw  main_toggle_swapid
 11214                                  
 11215 00004487 D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11216 00004488 0420                            dw  kbCtrlD
 11217 0000448A [E70C]                          dw  main_delete_record
 11218                                  
 11219 0000448C D2                              db  ACTFLAG_REDRAW_BODY | ACTFLAG_CHK_RECNUM | ACTFLAG_AUTH_SECURITY | ACTFLAG_AUTH_RECORD
 11220 0000448D 1019                            dw  kbCtrlP
 11221 0000448F [FB0D]                          dw  main_dup_record
 11222                                  
 11223 00004491 02                              db  ACTFLAG_REDRAW_BODY
 11224 00004492 1516                            dw  kbCtrlU
 11225 00004494 [500E]                          dw  main_move_record_up
 11226                                  
 11227 00004496 02                              db  ACTFLAG_REDRAW_BODY
 11228 00004497 0E31                            dw  kbCtrlN
 11229 00004499 [1E0E]                          dw  main_move_record_down
 11230                                  
 11231 0000449B 54                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_AUTH_RECORD | ACTFLAG_CHK_RECNUM
 11232 0000449C 0D1C                            dw  kbEnter
 11233 0000449E [C40D]                          dw  main_boot_it
 11234                                  
 11235 000044A0 14                              db  ACTFLAG_REDRAW_WIN | ACTFLAG_CHK_RECNUM
 11236 000044A1 1B01                            dw  kbEsc
 11237 000044A3 [F516]                          dw  main_boot_default
 11238                                  
 11239 000044A5 08                              db  ACTFLAG_REDRAW_SCR
 11240 000044A6 08F2                            dw  EVENT_ALT_RELEASE
 11241 000044A8 [0C0B]                          dw  main_show_main_menu
 11242                                  .end_of_boot_menu
 11243                                  
 11244                                  
 11245                                  
 11246                                  
 11247                                  ;=============================================================================
 11248                                  ;  include the language theme, specified as macro definition
 11249                                  ;=============================================================================
 11250                                  theme_start:
 11251                                  
 11252                                  %ifdef THEME_ZH
 11253                                   %include "themes/theme-zh.asm"
 11254                                  %elifdef THEME_DE
 11255                                   %include "themes/theme-de.asm"
 11256                                  %elifdef THEME_HU
 11257                                   %include "themes/theme-hu.asm"
 11258                                  %elifdef THEME_RU
 11259                                   %include "themes/theme-ru.asm"
 11260                                  %elifdef THEME_CZ
 11261                                   %include "themes/theme-cz.asm"
 11262                                  %elifdef THEME_ES
 11263                                   %include "themes/theme-es.asm"
 11264                                  %elifdef THEME_FR
 11265                                   %include "themes/theme-fr.asm"
 11266                                  %elifdef THEME_PT
 11267                                   %include "themes/theme-pt.asm"
 11268                                  %else
 11269                                   %include "themes/theme-us.asm"
 11270                              <1> ; asmsyntax=nasm
 11271                              <1> ;
 11272                              <1> ; theme-us.asm
 11273                              <1> ;
 11274                              <1> ; English theme data for Smart Boot Manager
 11275                              <1> ;
 11276                              <1> ; Copyright (C) 2001, Suzhe. See file COPYING for details.
 11277                              <1> ;
 11278                              <1> 
 11279                              <1> ; some constant used in this theme.
 11280                              <1> 
 11281                              <1> ; PLEASE DO NOT CHANGE THESE, UNLESS YOU KNOW WHAT YOU ARE DOING!
 11282                              <1> %define SBMT_MAGIC      0x544D4253         ; magic number of
 11283                              <1>                                            ; Smart Boot Manager theme.
 11284                              <1> %define SBMT_VERSION    0x035A             ; version of theme ( 3.90 ).
 11285                              <1> 
 11286                              <1> start_font              equ     219
 11287                              <1> brand_char1             equ     start_font
 11288                              <1> brand_char2             equ     start_font+1
 11289                              <1> brand_char3             equ     start_font+2
 11290                              <1> brand_char4             equ     start_font+3
 11291                              <1> 
 11292                              <1> 
 11293                              <1> start_of_theme:
 11294                              <1> 
 11295                              <1> ;!!! PLEASE DON NOT CHANGE THE SIZE AND ORDER OF FOLLOWING DATA !!!
 11296                              <1> 
 11297                              <1> ;=============================================================================
 11298                              <1> ;the header of Smart Boot Manager theme ( 16 bytes )
 11299                              <1> ;=============================================================================
 11300 000044AA 53424D54            <1> theme_magic             dd  SBMT_MAGIC ; magic number = 'SBMT', 4 bytes.
 11301                              <1>                                        ; it's abbr. of 'Smart Boot Manager Theme'
 11302 000044AE 0000                <1>                         dw  0          ;
 11303 000044B0 656E2D555300        <1> theme_lang              db  'en-US',0  ; language of this theme, 6 bytes.
 11304 000044B6 5A03                <1> theme_version           dw  SBMT_VERSION ; version, high byte is major version,
 11305                              <1>                                          ; low byte is minor version. should be
 11306                              <1>                                          ; equal to the version of Smart Boot Manager.
 11307 000044B8 AA0F                <1> theme_size              dw  (end_of_theme - start_of_theme)
 11308                              <1>                                          ; size of the theme (bytes).
 11309                              <1> 
 11310                              <1> ;=============================================================================
 11311                              <1> ; fix size data and index tables of variable size data
 11312                              <1> ;=============================================================================
 11313                              <1> 
 11314 000044BA FF                  <1> video_mode              db  0xff        ; 0 = 90x25, 0xff = 80x25
 11315                              <1>                                         ; do not use other value!!!
 11316                              <1> 
 11317 000044BB 10                  <1> keyboard_type           db  0x10        ; = 0x10 means use enhanced keyboard
 11318                              <1>                                         ; = 0x00 means use normal keyboard
 11319                              <1>                                         ; CAUTION: cannot use other value!!!
 11320                              <1> 
 11321 000044BC 01                  <1> show_date_method        db  1           ; the method of show date:
 11322                              <1>                                         ; 0 = don't show date
 11323                              <1>                                         ; 1 = day mm-dd-yyyy
 11324                              <1>                                         ; 2 = day yyyy-mm-dd
 11325                              <1>                                         ; 3 = day dd-mm-yyyy
 11326                              <1> 
 11327 000044BD 01                  <1> show_time_method        db  1           ; the method of show time:
 11328                              <1>                                         ; 0 = don't show time
 11329                              <1>                                         ; 1 = hh:mm (24 hours)
 11330                              <1> 
 11331 000044BE 79                  <1> yes_key_lower	        db  'y'
 11332 000044BF 59                  <1> yes_key_upper	        db  'Y'
 11333                              <1>  
 11334                              <1> ; position of screen elements, low byte = column, high byte = row
 11335                              <1> position:
 11336 000044C0 FF00                <1> .brand                  dw  0x00FF      ; start position of brand icon
 11337                              <1>                                         ; low = column, high = row
 11338                              <1>                                         ; if low = 255 then brand will be
 11339                              <1>                                         ; right justify in the screen.
 11340 000044C2 3700                <1> .date                   dw  0x0037
 11341                              <1> 
 11342 000044C4 4600                <1> .time                   dw  0x0046
 11343                              <1> 
 11344                              <1> ; size of screen elements
 11345                              <1> size:
 11346 000044C6 01                  <1> .copyright              db  1           ; number of rows used by copyright info
 11347 000044C7 01                  <1> .hint                   db  1           ; number of rows used by hint info
 11348 000044C8 05                  <1> .box_width              db  5           ; the minimal width of info/error/input box
 11349                              <1>                                         ; (when no info string)
 11350 000044C9 04                  <1> .box_height             db  4           ; the minimal height of info/error/input box
 11351                              <1>                                         ; (when no info string)
 11352 000044CA 0D                  <1> .boot_menu_win_height   db  13          ; the height of the boot menu window
 11353 000044CB 0A                  <1> .list_box_win_height    db  10          ; the height of the list box window
 11354                              <1> 
 11355                              <1> ;Black          = 0
 11356                              <1> ;Blue           = 1
 11357                              <1> ;Green          = 2
 11358                              <1> ;Cyan           = 3
 11359                              <1> ;Red            = 4
 11360                              <1> ;Violet         = 5
 11361                              <1> ;Yellow (brown) = 6
 11362                              <1> ;White          = 7
 11363                              <1> ;Black (gray)   = 8
 11364                              <1> ;Intense blue   = 9
 11365                              <1> ;Intense green  = a
 11366                              <1> ;Intense cyan   = b
 11367                              <1> ;Intense red    = c
 11368                              <1> ;Intense violet = d
 11369                              <1> ;Intense yellow = e
 11370                              <1> ;Intense white  = f
 11371                              <1> 
 11372                              <1> ; color of screen elements
 11373                              <1> ; high 4 bits is background color, low 4 bits is foreground color
 11374                              <1> 
 11375                              <1> color:
 11376 000044CC 70                  <1> .win_title_inactive     db  0x70        ; title attribute for inactive window.
 11377                              <1> 
 11378                              <1> .boot_menu:
 11379 000044CD 3F                  <1> .boot_menu_frame        db  0x3F        ; attributes of boot menu window
 11380 000044CE F1                  <1> .boot_menu_title        db  0xF1        ;
 11381 000044CF 1F                  <1> .boot_menu_header       db  0x1F        ;
 11382 000044D0 707C                <1> .boot_menu_normal       dw  0x7C70      ;
 11383 000044D2 0F0C                <1> .boot_menu_focus        dw  0x0C0F      ; 
 11384 000044D4 3F                  <1> .boot_menu_scrollbar    db  0x3F        ; scroll bar
 11385                              <1> 
 11386                              <1> .cmd_menu:
 11387 000044D5 30                  <1> .cmd_menu_frame         db  0x30        ;
 11388 000044D6 F1                  <1> .cmd_menu_title         db  0xF1        ; the colors used 
 11389 000044D7 3F                  <1> .cmd_menu_header        db  0x3F        ;
 11390 000044D8 303C                <1> .cmd_menu_normal        dw  0x3C30      ; in command menu
 11391 000044DA 070C                <1> .cmd_menu_focus         dw  0x0C07      ;
 11392 000044DC 3F                  <1> .cmd_menu_scrollbar     db  0x3F        ;
 11393                              <1> 
 11394                              <1> .list_box:
 11395 000044DD 30                  <1> .list_box_frame         db  0x30        ;
 11396 000044DE F1                  <1> .list_box_title         db  0xF1        ; list box
 11397 000044DF 1F                  <1> .list_box_header        db  0x1F        ;
 11398 000044E0 303C                <1> .list_box_normal        dw  0x3C30      ;
 11399 000044E2 070C                <1> .list_box_focus         dw  0x0C07      ;
 11400 000044E4 3F                  <1> .list_box_scrollbar     db  0x3F        ;
 11401                              <1> 
 11402                              <1> .input_box:
 11403 000044E5 B0                  <1> .input_box_frame        db  0xB0        ;
 11404 000044E6 F1                  <1> .input_box_title        db  0xF1        ; input box
 11405 000044E7 B0                  <1> .input_box_msg          db  0xB0        ;
 11406                              <1> 
 11407                              <1> .error_box:
 11408 000044E8 CF                  <1> .error_box_frame        db  0xCF        ;
 11409 000044E9 F1                  <1> .error_box_title        db  0xF1        ; error box
 11410 000044EA CF                  <1> .error_box_msg          db  0xCF        ;
 11411                              <1> 
 11412                              <1> .info_box:
 11413 000044EB B0                  <1> .info_box_frame         db  0xB0        ;
 11414 000044EC F1                  <1> .info_box_title         db  0xF1        ; info box
 11415 000044ED B0                  <1> .info_box_msg           db  0xB0        ;
 11416                              <1> 
 11417                              <1> .help_win:
 11418 000044EE 3F                  <1> .help_win_frame         db  0x3F        ;
 11419 000044EF F1                  <1> .help_win_title         db  0xF1        ; help window
 11420 000044F0 30                  <1> .help_msg               db  0x30        ;
 11421                              <1> 
 11422                              <1> .about_win:
 11423 000044F1 3F                  <1> .about_win_frame        db  0x3F        ;
 11424 000044F2 F1                  <1> .about_win_title        db  0xF1        ; about window
 11425 000044F3 3E                  <1> .about_msg              db  0x3E        ;
 11426                              <1> 
 11427 000044F4 70                  <1> .delay_time             db  0x70        ; delay time
 11428 000044F5 00                  <1> .background             db  0x00        ; background (if no background icon)
 11429 000044F6 7074                <1> .copyright              dw  0x7470      ; copyright string
 11430 000044F8 7074                <1> .hint                   dw  0x7470      ; hint string
 11431 000044FA 7C                  <1> .knl_flags              db  0x7C        ; the color of kernal fags.
 11432 000044FB 70                  <1> .knl_drvid              db  0x70        ; the color of kernel drive id.
 11433 000044FC 70                  <1> .date                   db  0x70        ; color of date string
 11434 000044FD 70                  <1> .time                   db  0x70        ; color of time string
 11435                              <1> 
 11436                              <1> ; icon data
 11437                              <1> icon:
 11438 000044FE 0401                <1> .brand_size         dw  0x0104              ; the size of brand icon,
 11439                              <1>                                             ; high byte = row, low byte = col.
 11440 00004500 [0746]              <1> .brand              dw  icon_data.brand     ; offset of brand icon data, set to
 11441                              <1>                                             ; zero if no brand icon.
 11442                              <1> 
 11443 00004502 0401                <1> .background_size    dw  0x0104              ; the size of background icon,
 11444                              <1>                                             ; high byte = row, low byte = col.
 11445 00004504 [0F46]              <1> .background         dw  icon_data.background; offset of background icon data,
 11446                              <1>                                             ; set to zero if no background icon.
 11447                              <1> 
 11448                              <1> ; font data
 11449                              <1> font:
 11450 00004506 0400                <1> .number             dw  (font_data.end-font_data)/17
 11451                              <1>                                             ; number of chars to be replaced,
 11452                              <1>                                             ; should <= (256 - start).
 11453 00004508 [1746]              <1> .data               dw  font_data           ; offset of font set data, set to
 11454                              <1>                                             ; zero if no font to be replaced.
 11455                              <1> 
 11456                              <1> ; chars used by window frame
 11457                              <1> frame_char:
 11458 0000450A 20                  <1> .top                db     0x20            ; top horizontal
 11459 0000450B CD                  <1> .bottom             db     0xCD            ; bottom horiztontal
 11460 0000450C BA                  <1> .left               db     0xBA            ; left vertical
 11461 0000450D BA                  <1> .right              db     0xBA            ; right vertical
 11462 0000450E C9                  <1> .tl_corner          db     0xC9            ; top left corner
 11463 0000450F BB                  <1> .tr_corner          db     0xBB            ; top right corner
 11464 00004510 C8                  <1> .bl_corner          db     0xC8            ; bottom left corner
 11465 00004511 BC                  <1> .br_corner          db     0xBC            ; bottom right corner
 11466                              <1> 
 11467                              <1> ; how to draw window frame
 11468 00004512 01                  <1> draw_frame_method   db  1          ; = 0 means draw all frame using frame attr.
 11469                              <1>                                    ; = 1 means draw top horizontal line using
 11470                              <1>                                    ;     title attr.
 11471                              <1>                                    ; = 2 means draw top corner and horizontal
 11472                              <1>                                    ;     line using title attr.
 11473                              <1> 
 11474                              <1> ; keymap data
 11475                              <1> keymap:                                  ; entry of keymap
 11476 00004513 0000                <1> .number             dw  (keymap_data.end-keymap_data)/4
 11477                              <1>                                            ; number of keymap entries
 11478 00004515 [5B46]              <1> .data               dw  keymap_data      ; pointer to keymap
 11479                              <1> 
 11480                              <1> ; index table of strings
 11481                              <1> str_idx:
 11482 00004517 [5B46]              <1> .boot_menu_title                dw  string.boot_menu_title
 11483 00004519 [6546]              <1> .boot_menu_header               dw  string.boot_menu_header
 11484 0000451B [7146]              <1> .boot_menu_header_noflags       dw  string.boot_menu_header_noflags
 11485 0000451D [7946]              <1> .boot_menu_header_nonumber      dw  string.boot_menu_header_nonumber
 11486 0000451F [8246]              <1> .boot_menu_header_notype        dw  string.boot_menu_header_notype
 11487                              <1> 
 11488 00004521 [8946]              <1> .about              dw  string.about
 11489 00004523 [8F46]              <1> .error              dw  string.error
 11490 00004525 [9546]              <1> .help               dw  string.help
 11491 00004527 [9A46]              <1> .info               dw  string.info
 11492 00004529 [A546]              <1> .input              dw  string.input
 11493                              <1> 
 11494 0000452B [AB46]              <1> .delay_time         dw  string.delay_time
 11495 0000452D [B846]              <1> .name               dw  string.name
 11496 0000452F [BF46]              <1> .new_root_passwd    dw  string.new_root_passwd
 11497 00004531 [C346]              <1> .root_passwd        dw  string.root_passwd
 11498 00004533 [D346]              <1> .new_record_passwd  dw  string.new_record_passwd
 11499 00004535 [D746]              <1> .record_passwd      dw  string.record_passwd
 11500 00004537 [E946]              <1> .retype_passwd      dw  string.retype_passwd
 11501 00004539 [FB46]              <1> .input_schedule     dw  string.input_schedule
 11502 0000453B [1947]              <1> .input_keystrokes   dw  string.input_keystrokes
 11503 0000453D [6547]              <1> .key_count          dw  string.key_count
 11504 0000453F [7347]              <1> .io_port            dw  string.io_port
 11505 00004541 [9047]              <1> .year               dw  string.year
 11506                              <1> 
 11507 00004543 [9747]              <1> .drive_id           dw  string.drive_id
 11508 00004545 [A547]              <1> .part_id            dw  string.part_id
 11509 00004547 [B247]              <1> .record_type        dw  string.record_type
 11510 00004549 [C147]              <1> .record_name        dw  string.record_name
 11511 0000454B [D047]              <1> .auto_active        dw  string.auto_active
 11512 0000454D [E047]              <1> .active             dw  string.active
 11513 0000454F [ED47]              <1> .auto_hide          dw  string.auto_hide
 11514 00004551 [FC47]              <1> .hidden             dw  string.hidden
 11515 00004553 [0948]              <1> .swap_drv           dw  string.swap_drv
 11516 00004555 [1848]              <1> .logical            dw  string.logical
 11517 00004557 [2548]              <1> .key_strokes        dw  string.key_strokes
 11518 00004559 [3548]              <1> .password           dw  string.password
 11519 0000455B [4248]              <1> .schedule           dw  string.schedule
 11520 0000455D [5148]              <1> .yes                dw  string.yes
 11521 0000455F [5548]              <1> .no                 dw  string.no
 11522                              <1> 
 11523 00004561 [5948]              <1> .copyright          dw  string.copyright
 11524 00004563 [8F48]              <1> .hint               dw  string.hint
 11525 00004565 [D648]              <1> .about_content      dw  string.about_content
 11526 00004567 [DF49]              <1> .help_content       dw  string.help_content
 11527                              <1> 
 11528 00004569 [714D]              <1> .changes_saved      dw  string.changes_saved
 11529 0000456B [804D]              <1> .passwd_changed     dw  string.passwd_changed
 11530 0000456D [924D]              <1> .ask_save_changes   dw  string.ask_save_changes
 11531                              <1> 
 11532 0000456F [AA4D]              <1> .wrong_passwd       dw  string.wrong_passwd
 11533 00004571 [BA4D]              <1> .disk_error         dw  string.disk_error
 11534 00004573 [C94D]              <1> .mark_act_failed    dw  string.mark_act_failed
 11535 00004575 [DD4D]              <1> .toggle_hid_failed  dw  string.toggle_hid_failed
 11536 00004577 [F14D]              <1> .no_system          dw  string.no_system
 11537 00004579 [244E]              <1> .invalid_record     dw  string.invalid_record
 11538 0000457B [394E]              <1> .invalid_schedule   dw  string.invalid_schedule
 11539 0000457D [504E]              <1> .inst_confirm       dw  string.inst_confirm
 11540 0000457F [7F4E]              <1> .inst_ok            dw  string.inst_ok
 11541 00004581 [9B4E]              <1> .inst_abort         dw  string.inst_abort
 11542 00004583 [B34E]              <1> .uninst_confirm     dw  string.uninst_confirm
 11543 00004585 [D94E]              <1> .uninst_ok          dw  string.uninst_ok
 11544 00004587 [134F]              <1> .uninst_abort       dw  string.uninst_abort
 11545 00004589 [2D4F]              <1> .confirm            dw  string.confirm
 11546 0000458B [564F]              <1> .no_sbml            dw  string.no_sbml
 11547 0000458D [8E4F]              <1> .invalid_ioports    dw  string.invalid_ioports
 11548                              <1> 
 11549                              <1> ; command menu str_idx
 11550                              <1> ; main menu
 11551 0000458F [A14F]              <1> .main_menu_title    dw string.main_menu_title
 11552                              <1> .main_menu_strings:
 11553 00004591 [AB4F]              <1>                     dw string.main_menu_help
 11554 00004593 [C14F]              <1>                     dw string.main_menu_about
 11555 00004595 [4550]              <1>                     dw string.main_menu_save
 11556 00004597 [D74F]              <1>                     dw string.main_menu_bootit
 11557 00004599 [DF4F]              <1>                     dw string.main_menu_bootprev
 11558 0000459B [5B50]              <1>                     dw string.main_menu_bar
 11559 0000459D [1D50]              <1>                     dw string.main_menu_recordset
 11560 0000459F [3150]              <1>                     dw string.main_menu_sysset
 11561 000045A1 [5B50]              <1>                     dw string.main_menu_bar
 11562 000045A3 [F14F]              <1>                     dw string.main_menu_quit
 11563 000045A5 [0750]              <1>                     dw string.main_menu_poweroff
 11564                              <1> 
 11565                              <1> ; record settings menu
 11566 000045A7 [6F50]              <1> .record_menu_title  dw string.record_menu_title
 11567                              <1> .record_menu_strings:
 11568 000045A9 [7F50]              <1>                     dw string.record_menu_info
 11569 000045AB [9850]              <1>                     dw string.record_menu_name
 11570 000045AD [B150]              <1>                     dw string.record_menu_passwd
 11571 000045AF [CA50]              <1>                     dw string.record_menu_schedule
 11572 000045B1 [E350]              <1>                     dw string.record_menu_keys
 11573 000045B3 [DD51]              <1>                     dw string.record_menu_bar
 11574 000045B5 [FC50]              <1>                     dw string.record_menu_act
 11575 000045B7 [1551]              <1>                     dw string.record_menu_hide
 11576 000045B9 [2E51]              <1>                     dw string.record_menu_autoact
 11577 000045BB [4751]              <1>                     dw string.record_menu_autohide
 11578 000045BD [6051]              <1>                     dw string.record_menu_swapdrv
 11579 000045BF [DD51]              <1>                     dw string.record_menu_bar
 11580 000045C1 [7951]              <1>                     dw string.record_menu_del
 11581 000045C3 [9251]              <1>                     dw string.record_menu_dup
 11582 000045C5 [AB51]              <1>                     dw string.record_menu_moveup
 11583 000045C7 [C451]              <1>                     dw string.record_menu_movedown
 11584                              <1> 
 11585                              <1> ; system setting menu
 11586 000045C9 [F451]              <1> .sys_menu_title     dw string.sys_menu_title
 11587                              <1> .sys_menu_strings:
 11588 000045CB [0452]              <1>                     dw string.sys_menu_rootpasswd
 11589 000045CD [2552]              <1>                     dw string.sys_menu_admin
 11590 000045CF [4652]              <1>                     dw string.sys_menu_security
 11591 000045D1 [CD53]              <1>                     dw string.sys_menu_bar
 11592 000045D3 [6752]              <1>                     dw string.sys_menu_setdef
 11593 000045D5 [8852]              <1>                     dw string.sys_menu_unsetdef
 11594 000045D7 [A952]              <1>                     dw string.sys_menu_delay
 11595 000045D9 [CA52]              <1>                     dw string.sys_menu_bmstyle
 11596 000045DB [EB52]              <1>                     dw string.sys_menu_remlast
 11597 000045DD [0C53]              <1>                     dw string.sys_menu_int13ext
 11598 000045DF [CD53]              <1>                     dw string.sys_menu_bar
 11599 000045E1 [2453]              <1>                     dw string.sys_menu_rescanall
 11600 000045E3 [4553]              <1>                     dw string.sys_menu_rescanpart
 11601 000045E5 [6653]              <1>                     dw string.sys_menu_set_ioports
 11602 000045E7 [7B53]              <1>                     dw string.sys_menu_set_y2kfix
 11603 000045E9 [CD53]              <1>                     dw string.sys_menu_bar
 11604 000045EB [9753]              <1>                     dw string.sys_menu_inst
 11605 000045ED [B153]              <1>                     dw string.sys_menu_uninst
 11606                              <1> 
 11607 000045EF [EC53]              <1> .cdimg_menu_title   dw string.cdimg_menu_title
 11608 000045F1 [FE53]              <1> .cdimg_menu_strings dw string.cdimg_menu_noemu
 11609 000045F3 [0B54]              <1>                     dw string.cdimg_menu_120m
 11610 000045F5 [1A54]              <1>                     dw string.cdimg_menu_144m
 11611 000045F7 [2954]              <1>                     dw string.cdimg_menu_288m
 11612                              <1> 
 11613 000045F9 [3854]              <1> .sunday             dw string.sunday
 11614 000045FB [3C54]              <1> .monday             dw string.monday
 11615 000045FD [4054]              <1> .tuesday            dw string.tuesday
 11616 000045FF [4454]              <1> .wednesday          dw string.wednesday
 11617 00004601 [4854]              <1> .thursday           dw string.thursday
 11618 00004603 [4C54]              <1> .friday             dw string.friday
 11619 00004605 [5054]              <1> .saturday           dw string.saturday
 11620                              <1> 
 11621                              <1> end_of_str_idx:
 11622                              <1> 
 11623                              <1> ;=============================================================================
 11624                              <1> ; variable size data
 11625                              <1> ;=============================================================================
 11626                              <1> 
 11627                              <1> ; icon data
 11628                              <1> 
 11629                              <1> ; two bytes corresponding to a char,
 11630                              <1> ; high byte is color, low byte is char code.
 11631                              <1> icon_data:
 11632                              <1> .brand:
 11633 00004607 DB7CDC7CDD7CDE7C    <1> db  brand_char1, 0x7C, brand_char2, 0x7C, brand_char3, 0x7C, brand_char4, 0x7C
 11634                              <1> 
 11635                              <1> .background:
 11636 0000460F B071B071B071B071    <1> db  0xB0, 0x71, 0xB0, 0x71, 0xB0, 0x71, 0xB0, 0x71
 11637                              <1> 
 11638                              <1> ; font data
 11639                              <1> ; each char occupied 17 bytes
 11640                              <1> ; the first bytes is the ascii code used by this char
 11641                              <1> ; the following 16 bytes is font data
 11642                              <1> ;
 11643                              <1> ; NOTE:
 11644                              <1> ;   Do not replace ascii char 0 and 0x0d, 0x1e and 0x1f,
 11645                              <1> ;   these chars have special use.
 11646                              <1> ;
 11647                              <1> font_data:
 11648 00004617 DB                  <1>   db  start_font
 11649 00004618 00000000070C08080C- <1>   db  0x00,0x00,0x00,0x00,0x07,0x0c,0x08,0x08,0x0c,0x07,0x00,0x00,0x00,0x00,0xfe,0x00
 11650 00004621 0700000000FE00      <1>
 11651 00004628 DC                  <1>   db  start_font+1
 11652 00004629 01010101FD011F1F03- <1>   db  0x01,0x01,0x01,0x01,0xfd,0x01,0x1f,0x1f,0x03,0xf7,0x0d,0x19,0x31,0x61,0xff,0xff
 11653 00004632 F70D193161FFFF      <1>
 11654 00004639 DD                  <1>   db  start_font+2
 11655 0000463A 80808080BF80F0F898- <1>   db  0x80,0x80,0x80,0x80,0xbf,0x80,0xf0,0xf8,0x98,0x9b,0x98,0x98,0x98,0x98,0x9e,0x9e
 11656 00004643 9B989898989E9E      <1>
 11657 0000464A DE                  <1>   db  start_font+3
 11658 0000464B 00000000FF00000000- <1>   db  0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0xf0,0x18,0x08,0x08,0x18,0xf0,0x00
 11659 00004654 F018080818F000      <1>
 11660                              <1> .end:
 11661                              <1> 
 11662                              <1> ; keymap
 11663                              <1> ; each entry has two words, the first is original keycode, 
 11664                              <1> ; the second is new keycode.
 11665                              <1> keymap_data:
 11666                              <1> %ifdef KEYMAP_AZERTY
 11667                              <1>   %include "azerty.kbd"
 11668                              <1> %elifdef KEYMAP_QWERTZ
 11669                              <1>   %include "qwertz.kbd"
 11670                              <1> %elifdef KEYMAP_DVORAK
 11671                              <1>   %include "dvorak.kbd"
 11672                              <1> %elifdef KEYMAP_DVORAK_ANSI
 11673                              <1>   %include "dvorak-ansi.kbd"
 11674                              <1> %endif
 11675                              <1> .end:
 11676                              <1> 
 11677                              <1> ; strings
 11678                              <1> ; all strings are zero ending,
 11679                              <1> ; use 0x0d to break string into multi-lines.
 11680                              <1> string:
 11681                              <1> ; used in main window and boot menu.
 11682 0000465B 426F6F74204D656E75- <1> .boot_menu_title                db  'Boot Menu',0
 11683 00004664 00                  <1>
 11684 00004665 2020202020466C6167- <1> .boot_menu_header               db  '     Flags  '
 11685 0000466E 732020              <1>
 11686 00004671 20204E756D626572    <1> .boot_menu_header_noflags       db  '  Number'
 11687 00004679 202054797065202020  <1> .boot_menu_header_nonumber      db  '  Type   '
 11688 00004682 20204E616D6500      <1> .boot_menu_header_notype        db  '  Name',0
 11689                              <1> 
 11690                              <1> ; window titles.
 11691 00004689 41626F757400        <1> .about                          db  'About',0
 11692 0000468F 4572726F7200        <1> .error                          db  'Error',0
 11693 00004695 48656C7000          <1> .help                           db  'Help',0
 11694 0000469A 496E666F6D6174696F- <1> .info                           db  'Infomation',0
 11695 000046A3 6E00                <1>
 11696 000046A5 496E70757400        <1> .input                          db  'Input',0
 11697                              <1> 
 11698                              <1> ; used in input boxes.
 11699 000046AB 44656C61792074696D- <1> .delay_time                     db  'Delay time: ',0
 11700 000046B4 653A2000            <1>
 11701 000046B8 4E616D653A2000      <1> .name                           db  'Name: ',0
 11702 000046BF 4E657720            <1> .new_root_passwd                db  'New '
 11703 000046C3 526F6F742070617373- <1> .root_passwd                    db  'Root password: ',0
 11704 000046CC 776F72643A2000      <1>
 11705 000046D3 4E657720            <1> .new_record_passwd              db  'New '
 11706 000046D7 5265636F7264207061- <1> .record_passwd                  db  'Record password: ',0
 11707 000046E0 7373776F72643A2000  <1>
 11708 000046E9 526574797065207061- <1> .retype_passwd                  db  'Retype password: ',0
 11709 000046F2 7373776F72643A2000  <1>
 11710 000046FB 5363686564756C6520- <1> .input_schedule                 db  'Schedule (hh:mm-hh:mm;days): ',0
 11711 00004704 2868683A6D6D2D6868- <1>
 11712 0000470D 3A6D6D3B6461797329- <1>
 11713 00004716 3A2000              <1>
 11714 00004719 496E707574206B6579- <1> .input_keystrokes               db  'Input keystrokes (max 13 keys)',0x0d
 11715 00004722 7374726F6B65732028- <1>
 11716 0000472B 6D6178203133206B65- <1>
 11717 00004734 7973290D            <1>
 11718 00004738 5072657373203C5363- <1>                                 db  'Press <Scroll Lock> to finish,',0x0d
 11719 00004741 726F6C6C204C6F636B- <1>
 11720 0000474A 3E20746F2066696E69- <1>
 11721 00004753 73682C0D            <1>
 11722 00004757 4B657920636F646520- <1>                                 db  'Key code = 0x',0
 11723 00004760 3D20307800          <1>
 11724 00004765 0D4B657920636F756E- <1> .key_count                      db  0x0d,'Key count = ',0
 11725 0000476E 74203D2000          <1>
 11726 00004773 492F4F204261736520- <1> .io_port                        db  'I/O Base Ports (hex1,hex2): ',0
 11727 0000477C 506F72747320286865- <1>
 11728 00004785 78312C68657832293A- <1>
 11729 0000478E 2000                <1>
 11730 00004790 596561723A2000      <1> .year                           db  'Year: ',0
 11731                              <1> 
 11732                              <1> ; used in record info box.
 11733 00004797 202020447269766520- <1> .drive_id                       db       '   Drive ID: ',0
 11734 000047A0 49443A2000          <1>
 11735 000047A5 202020506172742049- <1> .part_id                        db  '   Part ID: ',0
 11736 000047AE 443A2000            <1>
 11737 000047B2 0D5265636F72642054- <1> .record_type                    db  0x0d,'Record Type: ',0
 11738 000047BB 7970653A2000        <1>
 11739 000047C1 0D5265636F7264204E- <1> .record_name                    db  0x0d,'Record Name: ',0
 11740 000047CA 616D653A2000        <1>
 11741                              <1> 
 11742 000047D0 0D0D4175746F204163- <1> .auto_active                    db  0x0d,0x0d,'Auto Active: ',0
 11743 000047D9 746976653A2000      <1>
 11744 000047E0 202020204163746976- <1> .active                         db  '    Active: ',0
 11745 000047E9 653A2000            <1>
 11746 000047ED 0D20204175746F2048- <1> .auto_hide                      db  0x0d,'  Auto Hide: ',0
 11747 000047F6 6964653A2000        <1>
 11748 000047FC 202020204869646465- <1> .hidden                         db  '    Hidden: ',0
 11749 00004805 6E3A2000            <1>
 11750 00004809 0D5377617020647269- <1> .swap_drv                       db  0x0d,'Swap driver: ',0
 11751 00004812 7665723A2000        <1>
 11752 00004818 2020204C6F67696361- <1> .logical                        db  '   Logical: ',0
 11753 00004821 6C3A2000            <1>
 11754 00004825 0D0D4B657920537472- <1> .key_strokes                    db  0x0d,0x0d,'Key Strokes: ',0
 11755 0000482E 6F6B65733A2000      <1>
 11756 00004835 202050617373776F72- <1> .password                       db  '  Password: ',0
 11757 0000483E 643A2000            <1>
 11758 00004842 0D2020205363686564- <1> .schedule                       db  0x0d,'   Schedule: ',0
 11759 0000484B 756C653A2000        <1>
 11760                              <1> 
 11761 00004851 59657300            <1> .yes                            db  'Yes',0
 11762 00004855 4E6F2000            <1> .no                             db  'No ',0
 11763                              <1> 
 11764                              <1> ; copyright infomation, displayed at the top of the screen.
 11765 00004859 20536D61727420426F- <1> .copyright          db  ' Smart Boot Manager 3.90.1 | Copyright (C) 2001 Suzhe',0
 11766 00004862 6F74204D616E616765- <1>
 11767 0000486B 7220332E39302E3120- <1>
 11768 00004874 7C20436F7079726967- <1>
 11769 0000487D 687420284329203230- <1>
 11770 00004886 30312053757A686500  <1>
 11771                              <1> 
 11772                              <1> ; hint message, displayed at the bottom of the screen.
 11773 0000488F 207E46317E2D48656C- <1> .hint               db  ' ~F1~-Help  ~F2~-Save  ~F3~-Rename  ~F4~-Active  ~F5~-Hide  ~Tab~-Menu',0
 11774 00004898 7020207E46327E2D53- <1>
 11775 000048A1 61766520207E46337E- <1>
 11776 000048AA 2D52656E616D652020- <1>
 11777 000048B3 7E46347E2D41637469- <1>
 11778 000048BC 766520207E46357E2D- <1>
 11779 000048C5 4869646520207E5461- <1>
 11780 000048CE 627E2D4D656E7500    <1>
 11781                              <1> 
 11782                              <1> ; about infomation.
 11783 000048D6 202020202020202020- <1> .about_content      db  '           Smart Boot Manager 3.90.1',0x0d
 11784 000048DF 2020536D6172742042- <1>
 11785 000048E8 6F6F74204D616E6167- <1>
 11786 000048F1 657220332E39302E31- <1>
 11787 000048FA 0D                  <1>
 11788 000048FB 2020436F7079726967- <1>                     db  '  Copyright (C) 2001 Suzhe <su_zhe@sina.com>',0x0d,0x0d
 11789 00004904 687420284329203230- <1>
 11790 0000490D 30312053757A686520- <1>
 11791 00004916 3C73755F7A68654073- <1>
 11792 0000491F 696E612E636F6D3E0D- <1>
 11793 00004928 0D                  <1>
 11794 00004929 205468697320697320- <1>                     db  ' This is free software, you can redistribute',0x0d
 11795 00004932 6672656520736F6674- <1>
 11796 0000493B 776172652C20796F75- <1>
 11797 00004944 2063616E2072656469- <1>
 11798 0000494D 73747269627574650D  <1>
 11799 00004956 2020697420616E642F- <1>                     db  '  it and/or modify it under the terms of the',0x0d
 11800 0000495F 6F72206D6F64696679- <1>
 11801 00004968 20697420756E646572- <1>
 11802 00004971 20746865207465726D- <1>
 11803 0000497A 73206F66207468650D  <1>
 11804 00004983 2020202020474E5520- <1>                     db  '     GNU General Public License version 2.',0x0d,0x0d
 11805 0000498C 47656E6572616C2050- <1>
 11806 00004995 75626C6963204C6963- <1>
 11807 0000499E 656E73652076657273- <1>
 11808 000049A7 696F6E20322E0D0D    <1>
 11809 000049AF 546869732070726F67- <1>                     db  'This program comes with ABSOLUTELY NO WARRANTY!',0
 11810 000049B8 72616D20636F6D6573- <1>
 11811 000049C1 207769746820414253- <1>
 11812 000049CA 4F4C5554454C59204E- <1>
 11813 000049D3 4F2057415252414E54- <1>
 11814 000049DC 592100              <1>
 11815                              <1> 
 11816                              <1> ; help infomation.
 11817                              <1> .help_content:
 11818 000049DF 202020202020463120- <1>         db '      F1 = Help                  Ctrl+F1 = About',0x0d
 11819 000049E8 3D2048656C70202020- <1>
 11820 000049F1 202020202020202020- <1>
 11821 000049FA 202020202020437472- <1>
 11822 00004A03 6C2B4631203D204162- <1>
 11823 00004A0C 6F75740D            <1>
 11824 00004A10 202020202020463220- <1>         db '      F2 = Save                       F3 = Rename',0x0d
 11825 00004A19 3D2053617665202020- <1>
 11826 00004A22 202020202020202020- <1>
 11827 00004A2B 202020202020202020- <1>
 11828 00004A34 20204633203D205265- <1>
 11829 00004A3D 6E616D650D          <1>
 11830 00004A42 202020202020463420- <1>         db '      F4 = Mark active                F5 = Hide/unhide',0x0d
 11831 00004A4B 3D204D61726B206163- <1>
 11832 00004A54 746976652020202020- <1>
 11833 00004A5D 202020202020202020- <1>
 11834 00004A66 20204635203D204869- <1>
 11835 00004A6F 64652F756E68696465- <1>
 11836 00004A78 0D                  <1>
 11837 00004A79 202020202020463620- <1>         db '      F6 = Toggle auto active         F7 = Toggle auto hide',0x0d
 11838 00004A82 3D20546F67676C6520- <1>
 11839 00004A8B 6175746F2061637469- <1>
 11840 00004A94 766520202020202020- <1>
 11841 00004A9D 20204637203D20546F- <1>
 11842 00004AA6 67676C65206175746F- <1>
 11843 00004AAF 20686964650D        <1>
 11844 00004AB5 202020202020463820- <1>         db '      F8 = Set default          Shift+F8 = Unset default',0x0d
 11845 00004ABE 3D2053657420646566- <1>
 11846 00004AC7 61756C742020202020- <1>
 11847 00004AD0 202020202053686966- <1>
 11848 00004AD9 742B4638203D20556E- <1>
 11849 00004AE2 736574206465666175- <1>
 11850 00004AEB 6C740D              <1>
 11851 00004AEE 20204374726C2B4420- <1>         db '  Ctrl+D = Delete                 Ctrl+P = Duplicate',0x0d
 11852 00004AF7 3D2044656C65746520- <1>
 11853 00004B00 202020202020202020- <1>
 11854 00004B09 202020202020204374- <1>
 11855 00004B12 726C2B50203D204475- <1>
 11856 00004B1B 706C69636174650D    <1>
 11857 00004B23 20204374726C2B5520- <1>         db '  Ctrl+U = Move record up         Ctrl+N = Move record down',0x0d
 11858 00004B2C 3D204D6F7665207265- <1>
 11859 00004B35 636F72642075702020- <1>
 11860 00004B3E 202020202020204374- <1>
 11861 00004B47 726C2B4E203D204D6F- <1>
 11862 00004B50 7665207265636F7264- <1>
 11863 00004B59 20646F776E0D        <1>
 11864 00004B5F 20204374726C2B5320- <1>         db '  Ctrl+S = Set/unset schedule     Ctrl+T = Set delay time',0x0d
 11865 00004B68 3D205365742F756E73- <1>
 11866 00004B71 657420736368656475- <1>
 11867 00004B7A 6C6520202020204374- <1>
 11868 00004B83 726C2B54203D205365- <1>
 11869 00004B8C 742064656C61792074- <1>
 11870 00004B95 696D650D            <1>
 11871 00004B99 20204374726C2B4B20- <1>         db '  Ctrl+K = Set/unset keystrokes   / or ? = Show information',0x0d
 11872 00004BA2 3D205365742F756E73- <1>
 11873 00004BAB 6574206B6579737472- <1>
 11874 00004BB4 6F6B65732020202F20- <1>
 11875 00004BBD 6F72203F203D205368- <1>
 11876 00004BC6 6F7720696E666F726D- <1>
 11877 00004BCF 6174696F6E0D        <1>
 11878 00004BD5 20204374726C2B4920- <1>         db '  Ctrl+I = Rescan all records     Ctrl+H = Rescan all partitions',0x0d,
 11879 00004BDE 3D2052657363616E20- <1>
 11880 00004BE7 616C6C207265636F72- <1>
 11881 00004BF0 647320202020204374- <1>
 11882 00004BF9 726C2B48203D205265- <1>
 11883 00004C02 7363616E20616C6C20- <1>
 11884 00004C0B 706172746974696F6E- <1>
 11885 00004C14 730D                <1>
 11886 00004C16 20204374726C2B5820- <1>         db '  Ctrl+X = Toggle swap driver id  Ctrl+F = Show/hide flags',0x0d
 11887 00004C1F 3D20546F67676C6520- <1>
 11888 00004C28 737761702064726976- <1>
 11889 00004C31 657220696420204374- <1>
 11890 00004C3A 726C2B46203D205368- <1>
 11891 00004C43 6F772F686964652066- <1>
 11892 00004C4C 6C6167730D          <1>
 11893 00004C51 20204374726C2B4C20- <1>         db '  Ctrl+L = Toggle remember the last booted record',0x0d
 11894 00004C5A 3D20546F67676C6520- <1>
 11895 00004C63 72656D656D62657220- <1>
 11896 00004C6C 746865206C61737420- <1>
 11897 00004C75 626F6F746564207265- <1>
 11898 00004C7E 636F72640D          <1>
 11899 00004C83 202020202020463920- <1>         db '      F9 = Change boot record password',0x0d
 11900 00004C8C 3D204368616E676520- <1>
 11901 00004C95 626F6F74207265636F- <1>
 11902 00004C9E 72642070617373776F- <1>
 11903 00004CA7 72640D              <1>
 11904 00004CAA 202020202046313020- <1>         db '     F10 = Change root password',0x0d
 11905 00004CB3 3D204368616E676520- <1>
 11906 00004CBC 726F6F742070617373- <1>
 11907 00004CC5 776F72640D          <1>
 11908 00004CCA 4374726C2B46313020- <1>         db 'Ctrl+F10 = Enter/leave Administrator mode',0x0d
 11909 00004CD3 3D20456E7465722F6C- <1>
 11910 00004CDC 656176652041646D69- <1>
 11911 00004CE5 6E6973747261746F72- <1>
 11912 00004CEE 206D6F64650D        <1>
 11913 00004CF4 20416C742B46313020- <1>         db ' Alt+F10 = Enter/leave Security Lock mode',0x0d
 11914 00004CFD 3D20456E7465722F6C- <1>
 11915 00004D06 656176652053656375- <1>
 11916 00004D0F 72697479204C6F636B- <1>
 11917 00004D18 206D6F64650D        <1>
 11918 00004D1E 202020202054616220- <1>         db '     Tab = Popup command menu',0x0d
 11919 00004D27 3D20506F7075702063- <1>
 11920 00004D30 6F6D6D616E64206D65- <1>
 11921 00004D39 6E750D              <1>
 11922 00004D3C 20204374726C2B5120- <1>         db '  Ctrl+Q = Quit to BIOS         Ctrl+F12 = Power off',0
 11923 00004D45 3D205175697420746F- <1>
 11924 00004D4E 2042494F5320202020- <1>
 11925 00004D57 20202020204374726C- <1>
 11926 00004D60 2B463132203D20506F- <1>
 11927 00004D69 776572206F666600    <1>
 11928                              <1> 
 11929                              <1> ; normal messages.
 11930 00004D71 4368616E6765732073- <1> .changes_saved      db  'Changes saved.',0
 11931 00004D7A 617665642E00        <1>
 11932 00004D80 50617373776F726420- <1> .passwd_changed     db  'Password changed.',0
 11933 00004D89 6368616E6765642E00  <1>
 11934 00004D92 536176652074686520- <1> .ask_save_changes   db  'Save the changes (y/n)?',0
 11935 00004D9B 6368616E6765732028- <1>
 11936 00004DA4 792F6E293F00        <1>
 11937                              <1> 
 11938                              <1> ; error messages.
 11939 00004DAA 57726F6E6720706173- <1> .wrong_passwd       db  'Wrong password!',0
 11940 00004DB3 73776F72642100      <1>
 11941 00004DBA 4469736B206572726F- <1> .disk_error         db  'Disk error! 0x',0
 11942 00004DC3 722120307800        <1>
 11943 00004DC9 4D61726B2061637469- <1> .mark_act_failed    db  'Mark active failed!',0
 11944 00004DD2 7665206661696C6564- <1>
 11945 00004DDB 2100                <1>
 11946 00004DDD 486964652F756E6869- <1> .toggle_hid_failed  db  'Hide/unhide failed!',0
 11947 00004DE6 6465206661696C6564- <1>
 11948 00004DEF 2100                <1>
 11949 00004DF1 4E6F204F7065726174- <1> .no_system          db  'No Operating System!',0x0d
 11950 00004DFA 696E67205379737465- <1>
 11951 00004E03 6D210D              <1>
 11952 00004E06 5265706C6163652061- <1>                     db  'Replace a disk and try again.',0
 11953 00004E0F 206469736B20616E64- <1>
 11954 00004E18 207472792061676169- <1>
 11955 00004E21 6E2E00              <1>
 11956 00004E24 496E76616C69642062- <1> .invalid_record     db  'Invalid boot record!',0
 11957 00004E2D 6F6F74207265636F72- <1>
 11958 00004E36 642100              <1>
 11959 00004E39 496E76616C69642073- <1> .invalid_schedule   db  'Invalid schedule time!',0
 11960 00004E42 63686564756C652074- <1>
 11961 00004E4B 696D652100          <1>
 11962 00004E50 5375726520746F2069- <1> .inst_confirm       db  'Sure to install Smart BootManager ',
 11963 00004E59 6E7374616C6C20536D- <1>
 11964 00004E62 61727420426F6F744D- <1>
 11965 00004E6B 616E6167657220      <1>
 11966 00004E72 696E746F2064726976- <1>                     db  'into driver ',0
 11967 00004E7B 65722000            <1>
 11968 00004E7F 496E7374616C6C6174- <1> .inst_ok            db  'Installation is successful!',0
 11969 00004E88 696F6E206973207375- <1>
 11970 00004E91 636365737366756C21- <1>
 11971 00004E9A 00                  <1>
 11972 00004E9B 41626F727420746865- <1> .inst_abort         db  'Abort the installation.',0
 11973 00004EA4 20696E7374616C6C61- <1>
 11974 00004EAD 74696F6E2E00        <1>
 11975 00004EB3 5375726520746F2075- <1> .uninst_confirm     db  'Sure to uninstall Smart BootManager?',0x0d,0
 11976 00004EBC 6E696E7374616C6C20- <1>
 11977 00004EC5 536D61727420426F6F- <1>
 11978 00004ECE 744D616E616765723F- <1>
 11979 00004ED7 0D00                <1>
 11980 00004ED9 556E696E7374616C6C- <1> .uninst_ok          db  'Uninstallation is successful!',0x0d
 11981 00004EE2 6174696F6E20697320- <1>
 11982 00004EEB 737563636573736675- <1>
 11983 00004EF4 6C210D              <1>
 11984 00004EF7 436F6D707574657220- <1>                     db  'Computer will be restarted.',0
 11985 00004F00 77696C6C2062652072- <1>
 11986 00004F09 65737461727465642E- <1>
 11987 00004F12 00                  <1>
 11988 00004F13 41626F727420746865- <1> .uninst_abort       db  'Abort the uninstallation.',0
 11989 00004F1C 20756E696E7374616C- <1>
 11990 00004F25 6C6174696F6E2E00    <1>
 11991 00004F2D 507265737320592074- <1> .confirm            db  'Press Y to continue, other key to abort.',0
 11992 00004F36 6F20636F6E74696E75- <1>
 11993 00004F3F 652C206F7468657220- <1>
 11994 00004F48 6B657920746F206162- <1>
 11995 00004F51 6F72742E00          <1>
 11996 00004F56 536D61727420426F6F- <1> .no_sbml            db  'Smart Boot Manager Loader missing ',0x0d
 11997 00004F5F 74204D616E61676572- <1>
 11998 00004F68 204C6F61646572206D- <1>
 11999 00004F71 697373696E67200D    <1>
 12000 00004F79 6F722076657273696F- <1>                     db  'or version mismatch!',0
 12001 00004F82 6E206D69736D617463- <1>
 12002 00004F8B 682100              <1>
 12003 00004F8E 496E76616C69642049- <1> .invalid_ioports    db  'Invalid I/O Ports!',0
 12004 00004F97 2F4F20506F72747321- <1>
 12005 00004FA0 00                  <1>
 12006                              <1> 
 12007                              <1> ; command menu strings
 12008                              <1> ; main menu
 12009 00004FA1 4D61696E204D656E75- <1> .main_menu_title     db  'Main Menu',0
 12010 00004FAA 00                  <1>
 12011 00004FAB 48656C702020202020- <1> .main_menu_help      db  'Help             ~F1~',0
 12012 00004FB4 20202020202020207E- <1>
 12013 00004FBD 46317E00            <1>
 12014 00004FC1 41626F757420202020- <1> .main_menu_about     db  'About       ~Ctrl-F1~',0
 12015 00004FCA 2020207E4374726C2D- <1>
 12016 00004FD3 46317E00            <1>
 12017 00004FD7 426F6F7420697400    <1> .main_menu_bootit    db  'Boot it',0
 12018 00004FDF 426F6F742050726576- <1> .main_menu_bootprev  db  'Boot Previous MBR',0
 12019 00004FE8 696F7573204D425200  <1>
 12020 00004FF1 517569742020202020- <1> .main_menu_quit      db  'Quit         ~Ctrl-Q~',0
 12021 00004FFA 202020207E4374726C- <1>
 12022 00005003 2D517E00            <1>
 12023 00005007 506F776572204F6666- <1> .main_menu_poweroff  db  'Power Off  ~Ctrl-F12~',0
 12024 00005010 20207E4374726C2D46- <1>
 12025 00005019 31327E00            <1>
 12026 0000501D 5265636F7264205365- <1> .main_menu_recordset db  'Record Settings  ->',0
 12027 00005026 7474696E677320202D- <1>
 12028 0000502F 3E00                <1>
 12029 00005031 53797374656D205365- <1> .main_menu_sysset    db  'System Settings  ->',0
 12030 0000503A 7474696E677320202D- <1>
 12031 00005043 3E00                <1>
 12032 00005045 53617665204368616E- <1> .main_menu_save      db  'Save Changes     ~F2~',0
 12033 0000504E 67657320202020207E- <1>
 12034 00005057 46327E00            <1>
 12035 0000505B 2D2D2D2D2D2D2D2D2D- <1> .main_menu_bar       db  '-------------------',0
 12036 00005064 2D2D2D2D2D2D2D2D2D- <1>
 12037 0000506D 2D00                <1>
 12038                              <1> 
 12039                              <1> ; record settings menu
 12040 0000506F 5265636F7264205365- <1> .record_menu_title    db  'Record Settings',0
 12041 00005078 7474696E677300      <1>
 12042 0000507F 496E666F726D617469- <1> .record_menu_info     db  'Information     ~/ or ?~',0
 12043 00005088 6F6E20202020207E2F- <1>
 12044 00005091 206F72203F7E00      <1>
 12045 00005098 4E616D652020202020- <1> .record_menu_name     db  'Name                ~F3~',0
 12046 000050A1 202020202020202020- <1>
 12047 000050AA 20207E46337E00      <1>
 12048 000050B1 50617373776F726420- <1> .record_menu_passwd   db  'Password            ~F9~',0
 12049 000050BA 202020202020202020- <1>
 12050 000050C3 20207E46397E00      <1>
 12051 000050CA 5363686564756C6520- <1> .record_menu_schedule db  'Schedule        ~Ctrl-S~',0
 12052 000050D3 202020202020207E43- <1>
 12053 000050DC 74726C2D537E00      <1>
 12054 000050E3 4B65797374726F6B65- <1> .record_menu_keys     db  'Keystrokes      ~Ctrl-K~',0
 12055 000050EC 732020202020207E43- <1>
 12056 000050F5 74726C2D4B7E00      <1>
 12057 000050FC 4D61726B2041637469- <1> .record_menu_act      db  'Mark Active         ~F4~',0
 12058 00005105 766520202020202020- <1>
 12059 0000510E 20207E46347E00      <1>
 12060 00005115 486964652F756E6869- <1> .record_menu_hide     db  'Hide/unhide         ~F5~',0
 12061 0000511E 646520202020202020- <1>
 12062 00005127 20207E46357E00      <1>
 12063 0000512E 4175746F2041637469- <1> .record_menu_autoact  db  'Auto Active         ~F6~',0
 12064 00005137 766520202020202020- <1>
 12065 00005140 20207E46367E00      <1>
 12066 00005147 4175746F2048696465- <1> .record_menu_autohide db  'Auto Hide           ~F7~',0
 12067 00005150 202020202020202020- <1>
 12068 00005159 20207E46377E00      <1>
 12069 00005160 537761702044726976- <1> .record_menu_swapdrv  db  'Swap Driver ID  ~Ctrl-X~',0
 12070 00005169 657220494420207E43- <1>
 12071 00005172 74726C2D587E00      <1>
 12072 00005179 44656C657465202020- <1> .record_menu_del      db  'Delete          ~Ctrl-D~',0
 12073 00005182 202020202020207E43- <1>
 12074 0000518B 74726C2D447E00      <1>
 12075 00005192 4475706C6963617465- <1> .record_menu_dup      db  'Duplicate       ~Ctrl-P~',0
 12076 0000519B 202020202020207E43- <1>
 12077 000051A4 74726C2D507E00      <1>
 12078 000051AB 4D6F76652055702020- <1> .record_menu_moveup   db  'Move Up         ~Ctrl-U~',0
 12079 000051B4 202020202020207E43- <1>
 12080 000051BD 74726C2D557E00      <1>
 12081 000051C4 4D6F766520446F776E- <1> .record_menu_movedown db  'Move Down       ~Ctrl-N~',0
 12082 000051CD 202020202020207E43- <1>
 12083 000051D6 74726C2D4E7E00      <1>
 12084 000051DD 2D2D2D2D2D2D2D2D2D- <1> .record_menu_bar      db  '----------------------',0
 12085 000051E6 2D2D2D2D2D2D2D2D2D- <1>
 12086 000051EF 2D2D2D2D00          <1>
 12087                              <1> 
 12088                              <1> ; system setting menu
 12089 000051F4 53797374656D205365- <1> .sys_menu_title       db  'System Settings',0
 12090 000051FD 7474696E677300      <1>
 12091 00005204 526F6F742050617373- <1> .sys_menu_rootpasswd  db  'Root Password              ~F10~',0
 12092 0000520D 776F72642020202020- <1>
 12093 00005216 202020202020202020- <1>
 12094 0000521F 7E4631307E00        <1>
 12095 00005225 546F67676C65204164- <1> .sys_menu_admin       db  'Toggle Admin Mode     ~Ctrl-F10~',0
 12096 0000522E 6D696E204D6F646520- <1>
 12097 00005237 202020207E4374726C- <1>
 12098 00005240 2D4631307E00        <1>
 12099 00005246 546F67676C65205365- <1> .sys_menu_security    db  'Toggle Security Mode   ~Alt-F10~',0
 12100 0000524F 637572697479204D6F- <1>
 12101 00005258 64652020207E416C74- <1>
 12102 00005261 2D4631307E00        <1>
 12103 00005267 536574204465666175- <1> .sys_menu_setdef      db  'Set Default Record          ~F8~',0
 12104 00005270 6C74205265636F7264- <1>
 12105 00005279 202020202020202020- <1>
 12106 00005282 207E46387E00        <1>
 12107 00005288 556E73657420446566- <1> .sys_menu_unsetdef    db  'Unset Default Record  ~Shift-F8~',0
 12108 00005291 61756C74205265636F- <1>
 12109 0000529A 726420207E53686966- <1>
 12110 000052A3 742D46387E00        <1>
 12111 000052A9 5365742044656C6179- <1> .sys_menu_delay       db  'Set Delay Time          ~Ctrl-T~',0
 12112 000052B2 2054696D6520202020- <1>
 12113 000052BB 2020202020207E4374- <1>
 12114 000052C4 726C2D547E00        <1>
 12115 000052CA 4368616E676520426F- <1> .sys_menu_bmstyle     db  'Change Boot Menu Style  ~Ctrl-F~',0
 12116 000052D3 6F74204D656E752053- <1>
 12117 000052DC 74796C6520207E4374- <1>
 12118 000052E5 726C2D467E00        <1>
 12119 000052EB 546F67676C65205265- <1> .sys_menu_remlast     db  'Toggle Remember Last    ~Ctrl-L~',0
 12120 000052F4 6D656D626572204C61- <1>
 12121 000052FD 7374202020207E4374- <1>
 12122 00005306 726C2D4C7E00        <1>
 12123 0000530C 546F67676C65204578- <1> .sys_menu_int13ext    db  'Toggle Extended Int 13H',0
 12124 00005315 74656E64656420496E- <1>
 12125 0000531E 742031334800        <1>
 12126 00005324 52657363616E20416C- <1> .sys_menu_rescanall   db  'Rescan All Boot Records ~Ctrl-I~',0
 12127 0000532D 6C20426F6F74205265- <1>
 12128 00005336 636F726473207E4374- <1>
 12129 0000533F 726C2D497E00        <1>
 12130 00005345 52657363616E20416C- <1> .sys_menu_rescanpart  db  'Rescan All Partitions   ~Ctrl-H~',0
 12131 0000534E 6C2050617274697469- <1>
 12132 00005357 6F6E732020207E4374- <1>
 12133 00005360 726C2D487E00        <1>
 12134 00005366 5365742043442D524F- <1> .sys_menu_set_ioports db  'Set CD-ROM I/O Ports',0
 12135 0000536F 4D20492F4F20506F72- <1>
 12136 00005378 747300              <1>
 12137 0000537B 536574207965617220- <1> .sys_menu_set_y2kfix  db  'Set year (fix Y2K BIOS bug)',0
 12138 00005384 286669782059324B20- <1>
 12139 0000538D 42494F532062756729- <1>
 12140 00005396 00                  <1>
 12141 00005397 496E7374616C6C2053- <1> .sys_menu_inst        db  'Install Smart BootManager',0
 12142 000053A0 6D61727420426F6F74- <1>
 12143 000053A9 4D616E6167657200    <1>
 12144 000053B1 556E696E7374616C6C- <1> .sys_menu_uninst      db  'Uninstall Smart BootManager',0
 12145 000053BA 20536D61727420426F- <1>
 12146 000053C3 6F744D616E61676572- <1>
 12147 000053CC 00                  <1>
 12148 000053CD 2D2D2D2D2D2D2D2D2D- <1> .sys_menu_bar         db  '------------------------------',0
 12149 000053D6 2D2D2D2D2D2D2D2D2D- <1>
 12150 000053DF 2D2D2D2D2D2D2D2D2D- <1>
 12151 000053E8 2D2D2D00            <1>
 12152                              <1> 
 12153 000053EC 43686F6F7365206120- <1> .cdimg_menu_title     db  'Choose a CD Image',0
 12154 000053F5 434420496D61676500  <1>
 12155 000053FE 4E6F20456D756C6174- <1> .cdimg_menu_noemu     db  'No Emulation',0
 12156 00005407 696F6E00            <1>
 12157 0000540B 312E32204D20446973- <1> .cdimg_menu_120m      db  '1.2 M Diskette',0
 12158 00005414 6B6574746500        <1>
 12159 0000541A 312E34344D20446973- <1> .cdimg_menu_144m      db  '1.44M Diskette',0
 12160 00005423 6B6574746500        <1>
 12161 00005429 322E38384D20446973- <1> .cdimg_menu_288m      db  '2.88M Diskette',0
 12162 00005432 6B6574746500        <1>
 12163                              <1> 
 12164 00005438 53756E00            <1> .sunday              db 'Sun',0
 12165 0000543C 4D6F6E00            <1> .monday              db 'Mon',0
 12166 00005440 54756500            <1> .tuesday             db 'Tue',0
 12167 00005444 57656400            <1> .wednesday           db 'Wed',0
 12168 00005448 54687500            <1> .thursday            db 'Thu',0
 12169 0000544C 46726900            <1> .friday              db 'Fri',0
 12170 00005450 53617400            <1> .saturday            db 'Sat',0
 12171                              <1> 
 12172                              <1> ; END OF THEME.
 12173                              <1> end_of_theme:
 12174                              <1> 
 12175                              <1> ; vi:ts=8:et:nowrap
 12176                                  %endif
 12177                                  
 12178                                  
 12179                                  
 12180                                  
 12181                                  ;=============================================================================
 12182                                  ;  Temporary Data Area (pre-initialized data)
 12183                                  ;=============================================================================
 12184                                   
 12185                                  %include "tempdata.asm"
 12186                              <1> ; tempdata.asm
 12187                              <1> ;
 12188                              <1> ; some Temporary Data for Smart Boot Manager
 12189                              <1> ;
 12190                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING for details.
 12191                              <1> ;
 12192                              <1> 
 12193                              <1> ;==============================================================================
 12194                              <1> ;temp data area for hd_io.asm
 12195                              <1> ;==============================================================================
 12196                              <1> %ifndef HD_IO_TEMPDATA
 12197                              <1> %define HD_IO_TEMPDATA
 12198                              <1> 
 12199                              <1> hdio_tmp:
 12200 00005454 <res 00000008>      <1> .cdbc_cmd	resb SIZE_OF_CDBC_CMD
 12201 0000545C <res 00000042>      <1> .extparam	resb SIZE_OF_EXTPARAM
 12202 0000549E <res 00000010>      <1> .int13ext	resb SIZE_OF_INT13EXT
 12203 000054AE <res 0000000A>      <1> .driveinfo	resb SIZE_OF_DRIVEINFO
 12204 000054B8 <res 00000001>      <1> .disk_errno	resb 1
 12205                              <1> 
 12206                              <1> %endif
 12207                              <1> 
 12208                              <1> ;==============================================================================
 12209                              <1> ;temp data area for knl.asm
 12210                              <1> ;==============================================================================
 12211                              <1> %ifndef KNL_TEMPDATA
 12212                              <1> %define KNL_TEMPDATA
 12213                              <1> 
 12214                              <1> knl_tmp:
 12215 000054B9 <res 00000001>      <1> .good_record_num	resb 1
 12216 000054BA <res 00000001>      <1> .max_record_num		resb 1
 12217 000054BB <res 00000001>      <1> .part_id		resb 1
 12218 000054BC <res 00000004>      <1> .logi_father		resd 1
 12219                              <1> 
 12220 000054C0 <res 00000001>      <1> .floppy_num		resb 1
 12221 000054C1 <res 00000013>      <1> .cdemu_spec		resb SIZE_OF_CDEMU_SPEC
 12222                              <1> 
 12223 000054D4 <res 00000800>      <1> .disk_buf1		resb 2048
 12224 00005CD4 <res 00000800>      <1> .disk_buf2		resb 2048
 12225                              <1> 
 12226                              <1> %endif
 12227                              <1> 
 12228                              <1> ;==============================================================================
 12229                              <1> ;temp data area for ui.asm
 12230                              <1> ;==============================================================================
 12231                              <1> %ifndef UI_TEMPDATA
 12232                              <1> %define UI_TEMPDATA
 12233                              <1> 
 12234                              <1> ui_tmp:
 12235 000064D4 <res 00000001>      <1> .left_col	resb  1
 12236 000064D5 <res 00000001>      <1> .top_row	resb  1
 12237 000064D6 <res 00000001>      <1> .right_col	resb  1
 12238 000064D7 <res 00000001>      <1> .bottom_row	resb  1
 12239 000064D8 <res 00000001>      <1> .frame_attr	resb  1
 12240 000064D9 <res 00000001>      <1> .title_attr	resb  1
 12241 000064DA <res 00000002>      <1> .focus_win	resw  1
 12242 000064DC <res 00000002>      <1> .root_win	resw  1
 12243 000064DE <res 0000001A>      <1> .def_root_win	resb SIZE_OF_STRUC_WINDOW
 12244 000064F8 <res 00000020>      <1> .tmp_msgbox	resb SIZE_OF_STRUC_MESSAGE_BOX
 12245 00006518 <res 00000029>      <1> .tmp_inputbox	resb SIZE_OF_STRUC_INPUT_BOX
 12246 00006541 <res 0000002B>      <1> .tmp_menubox	resb SIZE_OF_STRUC_MENU_BOX
 12247 0000656C <res 00000100>      <1> .tmp_buf	resb  256
 12248 0000666C <res 00000100>      <1> .tmp_buf1	resb  256
 12249                              <1> 
 12250                              <1> %endif
 12251                              <1> 
 12252                              <1> ;==============================================================================
 12253                              <1> ;temp data area for utils.asm
 12254                              <1> ;==============================================================================
 12255                              <1> %ifndef UTILS_TEMPDATA
 12256                              <1> %define UTILS_TEMPDATA
 12257                              <1> 
 12258                              <1> utils_tmp:
 12259 0000676C <res 00000001>      <1> .kbd_work	       resb  1
 12260 0000676D <res 00000001>      <1> .kbd_last_shift        resb  1
 12261 0000676E <res 00000001>      <1> .kbd_bypass_next_shift resb 1
 12262                              <1> 
 12263                              <1> %endif
 12264                              <1> 
 12265                              <1> ;=============================================================================
 12266                              <1> ;temp data area for main.asm
 12267                              <1> ;=============================================================================
 12268                              <1> %ifndef MAIN_TEMPDATA
 12269                              <1> %define MAIN_TEMPDATA
 12270                              <1> 
 12271                              <1> main_tmp:
 12272 0000676F <res 00000020>      <1> .good_record_list    resb MAX_RECORD_NUM
 12273                              <1> 
 12274 0000678F <res 00000001>      <1> .time_count         resb  1                       ;
 12275 00006790 <res 00000002>      <1> .ticks_count        resw  1                       ; used in get_key func
 12276 00006792 <res 00000001>      <1> .key_pressed        resb  1                       ;
 12277 00006793 <res 00000002>      <1> .keycode            resw  1
 12278                              <1> 
 12279 00006795 <res 00000001>      <1> .change_occured     resb  1                       ; if change occured.
 12280 00006796 <res 00000001>      <1> .root_login         resb  1                       ; root login state.
 12281                              <1> 
 12282 00006797 <res 00000002>      <1> .last_time          resw  1
 12283                              <1> 
 12284 00006799 <res 00000002>      <1> .schedule_begin  resw  1
 12285 0000679B <res 00000002>      <1> .schedule_end    resw  1
 12286 0000679D <res 00000002>      <1> .schedule_day    resw  1
 12287                              <1> 
 12288 0000679F <res 00000002>      <1> .keystroke_ptr   resw  1
 12289 000067A1 <res 00000001>      <1> .keystroke_num   resb  1
 12290 000067A2 <res 00000001>      <1> .keystroke_max   resb  1
 12291 000067A3 <res 0000002B>      <1> .ikbox           resb SIZE_OF_STRUC_MENU_BOX
 12292                              <1> 
 12293 000067CE <res 00000800>      <1> .records_buf     resb MAX_RECORD_NUM * SIZE_OF_BOOTRECORD
 12294 00006FCE <res 00000050>      <1> .record_string   resb 80
 12295 0000701E <res 00000100>      <1> .dialog_buf      resb 256
 12296 0000711E <res 00000050>      <1> .root_buf        resb 80
 12297                              <1> 
 12298                              <1> %endif
 12299                              <1> 
 12300                              <1> %ifndef MYINT13H_TEMPDATA
 12301                              <1> %define MYINT13H_TEMPDATA
 12302                              <1> 
 12303                              <1> myint13h_tmp:
 12304 0000716E <res 00000002>      <1> .edd30_off  resw 1
 12305 00007170 <res 00000002>      <1> .edd30_seg  resw 1
 12306                              <1> 
 12307                              <1> %endif
 12308                                  
 12309                                  
 12310                                  
 12311                                  
 12312                                  
 12313                                  %ifndef EMULATE_PROG
 12314                                  
 12315                                   ; make the binary (Master Boot Record) 63 sectors long (don't care about the DOS emulation exec size)
 12316                                   
 12317 00007172 00<rept>                  times 63*512-($-$$) db 0
 12318                                  
 12319                                  %endif
 12320                                  
