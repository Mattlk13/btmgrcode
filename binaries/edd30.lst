     1                                  ;
     2                                  ; CD-ROM Boot Extension v 1.1 for Smart Boot Manager
     3                                  ; 
     4                                  ; Copyright (C) 2000, Christopher Li <chrisl@gnuchina.org>.
     5                                  ; Copyright (C) 2000, James Su <suzhe@gnuchina.org>
     6                                  ;
     7                                  ; This is free software, you can redistribute it and/or modify it
     8                                  ; under the terms of the GNU General Public License version 2 or above.
     9                                  ;
    10                                  ; The ATAPI driver is based on the source code of atadrv written by
    11                                  ; Hale Landis <hlandis@ibm.net>, Thanks him a lot!
    12                                  ;
    13                                  ; Without his great program, we could not implement the CD-ROM Boot feature
    14                                  ; so quickly.
    15                                  ;
    16                                  
    17                                  %include "helptool.h"
    18                              <1> %ifndef _help_tool_inc
    19                              <1> %define _help_tool_inc
    20                              <1> 
    21                              <1> ; this file define the help macros for the nasm assembers. Using those macros
    22                              <1> ; can moduler program in the assember, do not need to jmp any more.
    23                              <1> ;						--have fun!!
    24                              <1> ; 
    25                              <1> ; Copyright 2000 Christopher Li <chrisl@turbolinux.com.cn>
    26                              <1> ; 
    27                              <1> 
    28                              <1> %assign __cont__ 0
    29                              <1> %assign __break__ 0
    30                              <1> %assign __return__ 0
    31                              <1> %assign __level__ 0
    32                              <1> %assign __cndblock__ 0
    33                              <1> %macro cat_define 3
    34                              <1> %define %{1}%{2} %{3}
    35                              <1> %endmacro
    36                              <1> 
    37                              <1> %macro l_define 4
    38                              <1> %define %{1}%{2} %{3}%{4}
    39                              <1> %endmacro
    40                              <1> 
    41                              <1> %macro cat_undef 3
    42                              <1> %undef %{1}%{2}%{3}
    43                              <1> %endmacro
    44                              <1> 
    45                              <1> %macro cat_lable 2
    46                              <1> %{1}%{2}:
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> %macro linecat 3
    50                              <1> 	%1 %{2}%{3}
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro cat_jc 3
    54                              <1> 	j%+1 %{2}%{3}
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro cat_jnc 3
    58                              <1> 	j%-1 %{2}%{3}
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> %macro cat_jc_near 3
    62                              <1> 	j%+1 near %{2}%{3}
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> %macro cat_jnc_near 3
    66                              <1> 	j%-1 near %{2}%{3}
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> 
    70                              <1> %macro cat_jmp 2
    71                              <1> 	jmp short %{1}%{2}
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %macro cat_jmp_near 2
    75                              <1> 	jmp near %{1}%{2}
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> %macro jmp_near 2
    79                              <1> 	%if %1 > 0
    80                              <1> 		jmp near %2
    81                              <1> 	%else
    82                              <1> 		jmp short %2
    83                              <1> 	%endif
    84                              <1> %endmacro
    85                              <1> 
    86                              <1> %macro con_push 1
    87                              <1> 	%assign __lastlevel__ __level__
    88                              <1> 	%assign __level__ __level__ + 1
    89                              <1> 	%if __return__ > 0
    90                              <1> 		%assign con_return 1
    91                              <1> 	%else
    92                              <1> 		%assign con_return 0
    93                              <1> 	%endif
    94                              <1> 
    95                              <1> 	%if __cont__ > 0
    96                              <1> 		%assign con_cont 1
    97                              <1> 	%else
    98                              <1> 		%assign con_cont 0
    99                              <1> 	%endif
   100                              <1> 	%if __break__ > 0
   101                              <1> 		%assign con_break 1
   102                              <1> 	%else
   103                              <1> 		%assign con_break 0
   104                              <1> 	%endif
   105                              <1> ; if the contex are going to provide the lable, then we don''t provide it twice.
   106                              <1> 	%ifidn %1,proc
   107                              <1> 		%assign con_return 0
   108                              <1> 	%elifidn %1,forcx
   109                              <1> 		%assign con_break 0
   110                              <1> 	%elifidn %1,repeat
   111                              <1> 		%assign con_cont 0
   112                              <1> 		%assign con_break 0
   113                              <1> 	%elifidn %1,while
   114                              <1> 		%assign con_cont 0
   115                              <1> 		%assign con_break 0
   116                              <1> 	%endif
   117                              <1> 
   118                              <1> 	%if __cndblock__ == 1
   119                              <1> 	    l_define %$ifnot,__lastlevel__,%$ifnot,{}
   120                              <1> 	%endif
   121                              <1> 
   122                              <1> 	%push %1
   123                              <1> 	%if con_return
   124                              <1> 	    l_define %$return,__level__,%$$return,__lastlevel__
   125                              <1> 	%endif
   126                              <1> 	%if con_break
   127                              <1> 	    l_define %$break,__level__,%$$break,__lastlevel__
   128                              <1> 	%endif
   129                              <1> 	%if con_cont
   130                              <1> 	    l_define %$cont,__level__,%$$cont,__lastlevel__
   131                              <1> 	%endif
   132                              <1> 	
   133                              <1> 	%ifidn %1,andblock
   134                              <1> 	    l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
   135                              <1> 	%elifidn %1,orblock
   136                              <1> 	    l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
   137                              <1> 	%endif	
   138                              <1> %endmacro
   139                              <1> 
   140                              <1> %macro con_pop 0
   141                              <1> 	%pop
   142                              <1> 	%assign __level__ __level__ - 1
   143                              <1> %endmacro
   144                              <1> 
   145                              <1> %macro proc 1-*
   146                              <1> GLOBAL %{1}
   147                              <1> %{1}:
   148                              <1> con_push proc
   149                              <1> %assign  __return__ __return__ + 1
   150                              <1> %assign __have_frame__ 0
   151                              <1> %assign %$have_local 0
   152                              <1> %assign %$have_save  0
   153                              <1> %assign __save_all__ 0
   154                              <1> %assign %$local_args 0
   155                              <1> %assign %$proc_args 0
   156                              <1> %assign __save_args__ 0
   157                              <1> %if %0 > 1
   158                              <1> 	%assign args %0 - 1
   159                              <1> 	%assign %$bp_off 4
   160                              <1> 	%assign i 0
   161                              <1> 	%rotate 1
   162                              <1> 	%ifidn %1,withlocal
   163                              <1> 		%assign %$have_local 1
   164                              <1> 		%assign args args -1
   165                              <1> 		%rotate 1
   166                              <1> 	%endif 
   167                              <1> 	%assign %$proc_args args
   168                              <1> 	%rep args
   169                              <1> 		; define the args
   170                              <1> 		%%inputarg__%{1} EQU %$bp_off
   171                              <1> 		%undef .%1
   172                              <1> 		%define .%{1} %%inputarg__%{1}+bp
   173                              <1> 		cat_define %$proc_argv ,i,%1 
   174                              <1> 		%assign %$bp_off %$bp_off + 2
   175                              <1> 		%assign i i+1
   176                              <1> 		%rotate 1
   177                              <1> 	%endrep
   178                              <1> 	%if %$have_local==0
   179                              <1> 		enter 0,0
   180                              <1> 		%assign __have_frame__ 1
   181                              <1> 	%endif
   182                              <1> %endif
   183                              <1> %endmacro
   184                              <1> 
   185                              <1> %macro local 0-*
   186                              <1> %ifctx proc
   187                              <1> 	%if %$have_local == 1
   188                              <1> 		%assign argc %0
   189                              <1> 		%assign local_vars 0
   190                              <1> 		%assign %$have_local 2
   191                              <1> 		%assign local_off 0
   192                              <1> 		
   193                              <1> 		%assign i 0
   194                              <1> 		%rep argc
   195                              <1> 			%ifnum %2
   196                              <1> 				%assign local_off local_off+%2
   197                              <1> 				%assign token_eat 2
   198                              <1> 			%else
   199                              <1> 				%assign local_off local_off+2
   200                              <1> 				%assign token_eat 1
   201                              <1> 			%endif
   202                              <1> 
   203                              <1> 			%%local__%{1} EQU local_off
   204                              <1> 			%undef .%{1}
   205                              <1> 			%define .%{1} bp-%%local__%{1}
   206                              <1> 			cat_define %$proc_argv ,i,%1 
   207                              <1> 			%assign argc argc-token_eat
   208                              <1> 			%if argc <= 0
   209                              <1> 				%exitrep
   210                              <1> 			%endif
   211                              <1> 			%assign i i+1
   212                              <1> 			%rotate token_eat
   213                              <1> 		%endrep
   214                              <1> 		%assign %$local_args i
   215                              <1> 		enter local_off,0
   216                              <1> 		%assign __have_frame__ 1
   217                              <1> 	%else
   218                              <1> 		%error "`proc' not declear `withlocal' as the first argument"
   219                              <1> 	%endif
   220                              <1> %else
   221                              <1> 	%error "expected `proc' before `local'"
   222                              <1> %endif
   223                              <1> %endmacro
   224                              <1> 
   225                              <1> %macro invoke 1-*
   226                              <1> 	%if %0 == 2
   227                              <1> 	    push word %1
   228                              <1>     	    %assign rargc 1	 	    
   229                              <1> 	%else
   230                              <1> 	%rotate -2
   231                              <1> 	%assign argc %0-1
   232                              <1> 	%assign rargc 0
   233                              <1> 	%rep argc
   234                              <1> 	    %ifidn %1,byte
   235                              <1> 	     	push byte %2
   236                              <1> 		%rotate -1
   237                              <1> 		%assign argc argc -1
   238                              <1> 		%assign rargc rargc +1
   239                              <1> 	    %elifidn %1,word
   240                              <1> 	    	push word %2
   241                              <1> 		%rotate -1
   242                              <1> 		%assign argc argc -1
   243                              <1> 		%assign rargc rargc +1
   244                              <1> 	    %elifidn %1,dword
   245                              <1> 	        push dword %2
   246                              <1> 		%rotate -1
   247                              <1> 		%assign argc argc -1
   248                              <1> 		%assign rargc rargc +2
   249                              <1> 	    %else
   250                              <1> 	        push word %2
   251                              <1> 		%assign rargc rargc +1
   252                              <1>     	    %endif
   253                              <1> 	    %rotate -1
   254                              <1> 	    %assign argc argc -1
   255                              <1> 	    %if argc <=0 
   256                              <1> 	    	%exitrep
   257                              <1> 	    %endif
   258                              <1> 	%endrep
   259                              <1> 	%rotate 1
   260                              <1> 	%endif
   261                              <1> 	call %1
   262                              <1> 	add sp,(rargc)*2
   263                              <1> %endmacro
   264                              <1> 
   265                              <1> %macro save 1-*
   266                              <1> %ifctx proc
   267                              <1> 	%if %$have_local == 1
   268                              <1> 		%error "`save' must after `local'"
   269                              <1> 	%endif
   270                              <1> 
   271                              <1> 	%ifidn all,%1
   272                              <1> 		%assign __save_all__ 1
   273                              <1> 		%if %0 > 1
   274                              <1> 			%ifidn frame,%2
   275                              <1> 				%if __have_frame__ == 0
   276                              <1> 					enter 0,0
   277                              <1> 					%assign __have_frame__ 1
   278                              <1> 					%assign local_off 0
   279                              <1> 				%endif
   280                              <1> 			%endif
   281                              <1> 		%endif
   282                              <1> 		pusha
   283                              <1> 		%if __have_frame__ == 1
   284                              <1> 			%undef __AX
   285                              <1> 			%undef __BX
   286                              <1> 			%undef __CX
   287                              <1> 			%undef __DX
   288                              <1> 			%undef __SI
   289                              <1> 			%undef __DI
   290                              <1> 			%idefine __AX bp-local_off - 2
   291                              <1> 			%idefine __CX bp-local_off - 4
   292                              <1> 			%idefine __DX bp-local_off - 6
   293                              <1> 			%idefine __BX bp-local_off - 8
   294                              <1> 			; %idefine __SP bp-local_off - 10
   295                              <1> 			; %idefine __BP bp-local_off - 12
   296                              <1> 			%idefine __SI bp-local_off - 14
   297                              <1> 			%idefine __DI bp-local_off - 16
   298                              <1> 		%endif
   299                              <1> 	%elifidn alld,%1
   300                              <1> 		%assign __save_all__ 2
   301                              <1> 		%if %0 > 1
   302                              <1> 			%ifidn frame,%2
   303                              <1> 				%if __have_frame__ == 0
   304                              <1> 					enter 0,0
   305                              <1> 					%assign __have_frame__ 1
   306                              <1> 					%assign local_off 0
   307                              <1> 				%endif
   308                              <1> 			%endif
   309                              <1> 		%endif
   310                              <1> 		pushad
   311                              <1> 		%if __have_frame__ == 1
   312                              <1> 			%undef __EAX
   313                              <1> 			%undef __EBX
   314                              <1> 			%undef __ECX
   315                              <1> 			%undef __EDX
   316                              <1> 			%undef __ESI
   317                              <1> 			%undef __EDI
   318                              <1> 			%idefine __EAX bp-local_off - 4
   319                              <1> 			%idefine __ECX bp-local_off - 8
   320                              <1> 			%idefine __EDX bp-local_off - 12
   321                              <1> 			%idefine __EBX bp-local_off - 16
   322                              <1> 			; %idefine __SP bp-local_off - 10
   323                              <1> 			; %idefine __BP bp-local_off - 12
   324                              <1> 			%idefine __ESI bp-local_off - 18
   325                              <1> 			%idefine __EDI bp-local_off - 32
   326                              <1> 		%endif
   327                              <1> 
   328                              <1> 	%else
   329                              <1> 		%assign __save_args__ %0
   330                              <1> 		%assign __save_all__ 0
   331                              <1> 		%assign i %0
   332                              <1> 		%rep %0
   333                              <1> 			push %1
   334                              <1> 			cat_define %$save_argv ,i,%1 
   335                              <1> 			%rotate 1
   336                              <1> 			%assign i i - 1
   337                              <1> 		%endrep
   338                              <1> 	%endif
   339                              <1> %else
   340                              <1> 	%error "`save' must after `proc'"
   341                              <1> %endif
   342                              <1> %endmacro
   343                              <1> 
   344                              <1> %macro endp 0-1
   345                              <1> %ifnctx proc
   346                              <1> 	%error "expected `proc' before `endp'"
   347                              <1> %endif
   348                              <1> 	cat_lable %$return,__level__
   349                              <1> 	%if __save_all__ ==1 
   350                              <1> 		popa
   351                              <1> 	%elif __save_all__ == 2
   352                              <1> 		popad
   353                              <1> 	%elif __save_args__ > 0
   354                              <1> 		%assign i 1
   355                              <1> 		%rep __save_args__
   356                              <1> 			linecat pop, %$save_argv,i
   357                              <1> 			%assign i i+1
   358                              <1> 		%endrep
   359                              <1> 	%endif
   360                              <1> 	%if __have_frame__ > 0
   361                              <1> 	    leave
   362                              <1> 	%endif
   363                              <1> 	; cleanup proc_args
   364                              <1> 	%assign i 0
   365                              <1> 	%rep %$proc_args
   366                              <1> ;		%undef %$proc_argv1
   367                              <1> 		%assign i i+1
   368                              <1> 	%endrep
   369                              <1> 	; cleanup local_args
   370                              <1> 	%assign i 0
   371                              <1> 	%rep %$local_args
   372                              <1> ;		cat_undef %$local_argv,i
   373                              <1> 		%assign i i+1
   374                              <1> 	%endrep
   375                              <1> 	ret
   376                              <1> 	con_pop
   377                              <1> 	%assign  __return__ __return__ - 1
   378                              <1> %endmacro
   379                              <1> 
   380                              <1> %macro mov_ax 1
   381                              <1> 	%if %1 == 0
   382                              <1> 		sub ax,ax
   383                              <1> 	%else
   384                              <1> 		mov ax,%1
   385                              <1> 	%endif
   386                              <1> %endmacro
   387                              <1> 
   388                              <1> %macro return 0-*
   389                              <1>     %if %0 > 0
   390                              <1>     	%assign __near__ 0
   391                              <1>     	%assign argc %0
   392                              <1> 	%ifidn %1,near
   393                              <1> 		%assign __near__ 1
   394                              <1> 		%assign argc argc-1
   395                              <1> 		%rotate 1
   396                              <1> 	%endif
   397                              <1> 	%if argc > 0
   398                              <1> 	%ifidn %1,if
   399                              <1> 	    ; return if, {cmp ax, 0},e 
   400                              <1> 	    %rotate 1
   401                              <1> 	    %rep argc-2
   402                              <1> 		%1
   403                              <1> 		%rotate 1
   404                              <1> 	    %endrep
   405                              <1> 	    %if __near__ == 0
   406                              <1> 	    	cat_jc %1,%$return,__level__
   407                              <1> 	    %else
   408                              <1> 	    	cat_jc_near %1,%$return,__level__
   409                              <1> 	    %endif	
   410                              <1> 	%else
   411                              <1> 	    %error "expect `if' after `return'"
   412                              <1> 	%endif
   413                              <1> 	%else
   414                              <1> 	%if __near__ == 0
   415                              <1> 		cat_jmp %$return,__level__
   416                              <1> 	%else
   417                              <1> 		cat_jmp_near %$return,__level__
   418                              <1> 	%endif
   419                              <1> 	%endif
   420                              <1>     %else
   421                              <1>     	%if __have_frame__ == 0 && __save_all__ == 0 && __save_args__ == 0
   422                              <1> 		ret
   423                              <1> 	%else	
   424                              <1>     		cat_jmp %$return,__level__
   425                              <1> 	%endif	
   426                              <1>     %endif
   427                              <1> %endmacro
   428                              <1> 
   429                              <1> 
   430                              <1> 
   431                              <1> %macro forcx 0-1
   432                              <1> con_push forcx
   433                              <1> %assign  __break__ __break__ + 1
   434                              <1> %if %0 > 0
   435                              <1> 	mov	cx, %1
   436                              <1> %endif
   437                              <1> %$begin:
   438                              <1> %endmacro
   439                              <1> 
   440                              <1> %macro endforcx 0-*
   441                              <1>     %ifnctx forcx
   442                              <1> 	%error "expected `forcx' before `endfor'"
   443                              <1>     %endif
   444                              <1> 	%if %0 > 0
   445                              <1> 	    %ifidn %1,while
   446                              <1> 	    	%rotate 1
   447                              <1> 	    	cat_lable %$cont,__level__
   448                              <1> 	    	%rep %0 - 2
   449                              <1> 			%1
   450                              <1> 			%rotate 1
   451                              <1> 	    	%endrep
   452                              <1> 	    %else
   453                              <1> 	    	%error "expected `while' after `endfor'"
   454                              <1> 	    %endif
   455                              <1>             loop%+1 %$begin
   456                              <1> 	%else
   457                              <1> 	    loop %$begin
   458                              <1> 	%endif
   459                              <1> 	%$end:
   460                              <1> 	cat_lable %$break,__level__
   461                              <1> 	
   462                              <1> 	con_pop
   463                              <1> 	%assign  __break__ __break__ - 1
   464                              <1> %endmacro
   465                              <1> 
   466                              <1> ; forcx 5, e
   467                              <1> ;	mov cx,ax
   468                              <1> ;	cmp ax,bx
   469                              <1> ; endfor 
   470                              <1> ;
   471                              <1> 
   472                              <1> %macro repeat 0
   473                              <1> con_push repeat
   474                              <1> %assign  __break__ __break__ + 1
   475                              <1> %assign  __cont__ __cont__ + 1
   476                              <1> %$begin:
   477                              <1> cat_lable %$cont,__level__
   478                              <1> %endmacro
   479                              <1> 
   480                              <1> %macro until 1-*
   481                              <1>     %assign __near__ 0
   482                              <1>     %assign __argc__ %0
   483                              <1>     %ifidn near,%1
   484                              <1>     	%assign __near__ 1
   485                              <1>     	%rotate 1
   486                              <1> 	%assign __argc__ __argc__ -1
   487                              <1>     %endif	
   488                              <1>     %rep __argc__ -1
   489                              <1> 	%1
   490                              <1> 	%rotate 1
   491                              <1>     %endrep
   492                              <1>     %ifctx repeat
   493                              <1>     	%if __near__ >0
   494                              <1> 		j%-1 near %$begin
   495                              <1> 	%else
   496                              <1> 	        j%-1 %$begin
   497                              <1> 	%endif
   498                              <1> 	%$end:
   499                              <1> 	cat_lable %$break,__level__
   500                              <1>     %else
   501                              <1> 	%error "expected `repeat' before `until'"
   502                              <1>     %endif
   503                              <1> con_pop
   504                              <1> %assign  __break__ __break__ - 1
   505                              <1> %assign  __cont__ __cont__ - 1
   506                              <1> %endmacro
   507                              <1> 
   508                              <1> ; repeat
   509                              <1> ;	mov cx,ax
   510                              <1> ;	cmp ax,bx
   511                              <1> ; until e
   512                              <1> ;
   513                              <1> 
   514                              <1> %macro while 0-*
   515                              <1> con_push while
   516                              <1> %assign  __break__ __break__ + 1
   517                              <1> %assign  __cont__ __cont__ + 1
   518                              <1> %$begin:
   519                              <1> cat_lable %$cont,__level__
   520                              <1> %if %0 > 0
   521                              <1>     %rep %0 -1
   522                              <1> 	%1
   523                              <1> 	%rotate 1
   524                              <1>     %endrep
   525                              <1>     j%-1 %$end
   526                              <1> %endif
   527                              <1> %endmacro
   528                              <1> 
   529                              <1> %macro endwhile 0
   530                              <1>     %ifctx while
   531                              <1>           jmp %$begin
   532                              <1> 	  %$end:
   533                              <1> 	  cat_lable %$break,__level__
   534                              <1>     %else
   535                              <1> 	%error "expected `while' before `endwhile'"
   536                              <1>     %endif
   537                              <1> con_pop
   538                              <1> %assign  __break__ __break__ + 1
   539                              <1> %assign  __cont__ __cont__ + 1
   540                              <1> %endmacro
   541                              <1> 
   542                              <1> ; while {cmp ax, bx}, e
   543                              <1> ;   mov ax, cx
   544                              <1> ; endwhile
   545                              <1> 
   546                              <1> %macro break 0-*
   547                              <1> %if %0 > 0
   548                              <1> 	%ifidn %1,if
   549                              <1> 	    %rotate 1
   550                              <1> 	    %rep %0 - 2
   551                              <1> 	    %1
   552                              <1> 	    %rotate 1
   553                              <1> 	    %endrep
   554                              <1> 	    cat_jc %1,%$break,__level__
   555                              <1> 	%else
   556                              <1> 	    %error "expect `if' after `break'"
   557                              <1> 	%endif
   558                              <1> %else
   559                              <1> 	cat_jmp %$break,__level__
   560                              <1> %endif
   561                              <1> %endmacro
   562                              <1> 
   563                              <1> %macro continue 0-*
   564                              <1> %if %0 > 0
   565                              <1> 	%ifidn %1,if
   566                              <1> 	    %rotate 1
   567                              <1> 	    %rep %0 - 2
   568                              <1> 	    %1
   569                              <1> 	    %rotate 1
   570                              <1> 	    %endrep
   571                              <1> 	    cat_jc %1,%$cont,__level__
   572                              <1> 	%else
   573                              <1> 	    %error "expect `if' after `continue'"
   574                              <1> 	%endif
   575                              <1> %else
   576                              <1> 	cat_jmp %$cont,__level__
   577                              <1> %endif
   578                              <1> %endmacro
   579                              <1> 
   580                              <1> %macro goto 1-*
   581                              <1> %if %0 > 1
   582                              <1> 	%ifidn %2,if
   583                              <1> 	    %rotate 1
   584                              <1> 	    %rep %0 - 3
   585                              <1> 	    	%2
   586                              <1> 	    	%rotate 1
   587                              <1> 	    %endrep
   588                              <1> 	    %rotate 1
   589                              <1> 	    j%+1 %2
   590                              <1> 	%else
   591                              <1> 	    %error "expect `if' after `continue'"
   592                              <1> 	%endif
   593                              <1> %else
   594                              <1> 	jmp %1
   595                              <1> %endif
   596                              <1> %endmacro
   597                              <1> 
   598                              <1> %macro goton 1-*
   599                              <1> %if %0 > 1
   600                              <1> 	%ifidn %2,if
   601                              <1> 	    %rotate 1
   602                              <1> 	    %rep %0 - 3
   603                              <1> 	    	%2
   604                              <1> 	    	%rotate 1
   605                              <1> 	    %endrep
   606                              <1> 	    %rotate 1
   607                              <1> 	    j%+1 NEAR %2
   608                              <1> 	%else
   609                              <1> 	    %error "expect `if' after `continue'"
   610                              <1> 	%endif
   611                              <1> %else
   612                              <1> 	jmp %1
   613                              <1> %endif
   614                              <1> %endmacro
   615                              <1> 
   616                              <1> %macro if 0-*
   617                              <1>     %rep %0 -1
   618                              <1> 	%1
   619                              <1> 	%rotate 1
   620                              <1>     %endrep
   621                              <1> 
   622                              <1>     con_push if
   623                              <1> 
   624                              <1>     %if %0 > 0
   625                              <1>     	j%-1 %$ifnot
   626                              <1>     %endif
   627                              <1>     %assign %$elif_level 0
   628                              <1> %endmacro
   629                              <1> 
   630                              <1> 
   631                              <1> %macro andblock 0
   632                              <1> 	%assign __cndblock__ __cndblock__ + 1
   633                              <1> 	con_push andblock
   634                              <1> %endmacro
   635                              <1> 
   636                              <1> %macro orblock 0
   637                              <1> 	%assign __cndblock__ __cndblock__ + 1
   638                              <1> 	con_push orblock
   639                              <1> %endmacro
   640                              <1> 
   641                              <1> %macro endblock 0-1
   642                              <1> 	%ifctx orblock
   643                              <1> 		;cat_jmp %$ifnot,__level__
   644                              <1> 		%$iftrue:
   645                              <1> 	%elifctx andblock
   646                              <1> 	%else
   647                              <1> 		%error "not in andblock or orblock"
   648                              <1> 	%endif
   649                              <1> 	con_pop
   650                              <1> 	%assign __cndblock__ __cndblock__ - 1
   651                              <1> %endmacro
   652                              <1> 
   653                              <1> %macro condiction 1-*
   654                              <1> 	%rep %0 -1
   655                              <1> 		%1
   656                              <1> 		%rotate 1
   657                              <1> 	%endrep
   658                              <1> 	%ifctx andblock
   659                              <1> 		cat_jnc %1,%$ifnot,__level__
   660                              <1> 	%elifctx orblock
   661                              <1> 		j%+1 %$iftrue
   662                              <1> 	%else
   663                              <1> 		%error "not in the andblock or orblock"
   664                              <1> 	%endif
   665                              <1> %endmacro
   666                              <1> 
   667                              <1> %macro else 0-1
   668                              <1>     %assign __near__ 0
   669                              <1>     %if %0 >0
   670                              <1>     	%ifidn %1 near
   671                              <1> 		%assign __near__ 1
   672                              <1> 	%endif
   673                              <1>     %endif
   674                              <1>     %ifctx if
   675                              <1>         %repl else
   676                              <1>         jmp_near __near__,%$ifend
   677                              <1>         %$ifnot:
   678                              <1>     %elifctx elif
   679                              <1> ;	%assign elselevel %$elif_level - 1
   680                              <1> 	jmp_near __near__,%$ifend
   681                              <1> 	%$ifnot:
   682                              <1> 	%repl else
   683                              <1> 	
   684                              <1> ;	con_pop
   685                              <1> ;	%rep elselevel
   686                              <1> ;		%$ifend:
   687                              <1> ;		con_pop
   688                              <1> ;	%endrep
   689                              <1>     %else
   690                              <1>         %error "expected `if' before `else'"
   691                              <1>     %endif
   692                              <1> %endmacro
   693                              <1> 
   694                              <1> %macro elif 1-*
   695                              <1> 	%ifctx elif
   696                              <1> 		%assign level %$elif_level + 1
   697                              <1> 	%else 
   698                              <1> 		%assign level 1
   699                              <1> 	%endif
   700                              <1> 	%repl else
   701                              <1> 	jmp %$ifend
   702                              <1> 	%$ifnot:
   703                              <1> 	%rep %0 -1
   704                              <1> 		%1
   705                              <1> 		%rotate 1
   706                              <1> 	%endrep
   707                              <1> 	con_push elif
   708                              <1> 	j%-1 %$ifnot
   709                              <1> 	%assign %$elif_level level
   710                              <1> %endmacro
   711                              <1> 
   712                              <1> %macro endif 0
   713                              <1>     %assign elselevel 0
   714                              <1>     %ifctx if
   715                              <1>         %$ifnot:
   716                              <1>         con_pop
   717                              <1>     %elifctx else
   718                              <1>         %assign elselevel %$elif_level
   719                              <1>         %$ifend:
   720                              <1>         con_pop
   721                              <1>     %elifctx elif
   722                              <1> 	%assign elselevel %$elif_level
   723                              <1> 	%$ifnot:
   724                              <1> 	con_pop
   725                              <1>     %else
   726                              <1>         %error "expected `if' or `else' before `endif'"
   727                              <1>     %endif
   728                              <1> 	%rep elselevel
   729                              <1> 		%$ifend:
   730                              <1> 		con_pop
   731                              <1> 	%endrep
   732                              <1> %endmacro
   733                              <1> ;          cmp ax,bx
   734                              <1> ;          if ae
   735                              <1> ;            cmp bx,cx
   736                              <1> ;            if ae
   737                              <1> ;              mov ax,cx
   738                              <1> ;            else
   739                              <1> ;              mov ax,bx
   740                              <1> ;            endif
   741                              <1> ;          else
   742                              <1> ;            cmp ax,cx
   743                              <1> ;            if ae
   744                              <1> ;              mov ax,cx
   745                              <1> ;            endif
   746                              <1> ;          endif
   747                              <1> 
   748                              <1> %push __base__
   749                              <1> %endif
   750                                  %include "macros.h"
   751                              <1> ; macros.h
   752                              <1> ;
   753                              <1> ; some nasm macros that simplify the coding.
   754                              <1> ;
   755                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   756                              <1> ;
   757                              <1> 
   758                              <1> %ifndef DEFINE_MACROS
   759                              <1> %define DEFINE_MACROS
   760                              <1> 
   761                              <1> %macro retz 0
   762                              <1>        jnz %%skip
   763                              <1>        ret
   764                              <1> %%skip:
   765                              <1> %endmacro
   766                              <1> 
   767                              <1> %define jmpz  jz near
   768                              <1> %define jmpnz jnz near
   769                              <1> %define jmpe  je near
   770                              <1> %define jmpne jne near
   771                              <1> %define jmpc  jc near
   772                              <1> %define jmpnc jnc near
   773                              <1> %define jmpa  ja near
   774                              <1> %define jmpna jna near
   775                              <1> %define jmpb  jb near
   776                              <1> %define jmpnb jnb near
   777                              <1> 
   778                              <1> 
   779                              <1> %if 0
   780                              <1> %macro jmpz 1
   781                              <1>        jnz %%skip
   782                              <1>        jmp %1
   783                              <1> %%skip:
   784                              <1> %endmacro
   785                              <1> 
   786                              <1> %macro jmpnz 1
   787                              <1>        jz %%skip
   788                              <1>        jmp %1
   789                              <1> %%skip:
   790                              <1> %endmacro
   791                              <1> 
   792                              <1> %macro jmpe 1
   793                              <1>        jne %%skip
   794                              <1>        jmp %1
   795                              <1> %%skip:
   796                              <1> %endmacro
   797                              <1> 
   798                              <1> %macro jmpne 1
   799                              <1>        je %%skip
   800                              <1>        jmp %1
   801                              <1> %%skip:
   802                              <1> %endmacro
   803                              <1> 
   804                              <1> %macro jmpc 1
   805                              <1>        jnc %%skip
   806                              <1>        jmp %1
   807                              <1> %%skip:
   808                              <1> %endmacro
   809                              <1> 
   810                              <1> %macro jmpnc 1
   811                              <1>        jc %%skip
   812                              <1>        jmp %1
   813                              <1> %%skip:
   814                              <1> %endmacro
   815                              <1> 
   816                              <1> %macro jmpb 1
   817                              <1>        jnb %%skip
   818                              <1>        jmp %1
   819                              <1> %%skip:
   820                              <1> %endmacro
   821                              <1> 
   822                              <1> %macro jmpnb 1
   823                              <1>        jb %%skip
   824                              <1>        jmp %1
   825                              <1> %%skip:
   826                              <1> %endmacro
   827                              <1> 
   828                              <1> %endif
   829                              <1> 
   830                              <1> %endif
   831                                  %include "hd_io.h"
   832                              <1> ; hd_io.h
   833                              <1> ;
   834                              <1> ; header file for hd_io.asm
   835                              <1> ;
   836                              <1> ; Copyright (C) 2000, Suzhe. See file COPYING and CREDITS for details.
   837                              <1> ;
   838                              <1> 
   839                              <1> 
   840                              <1> %define DRVFLAG_DRIVEOK    0x0001       ;
   841                              <1> %define DRVFLAG_CHSVALID   0x0002       ; used in driveinfo structure
   842                              <1> %define DRVFLAG_REMOVABLE  0x0004       ; and bootrecord structure 
   843                              <1> %define DRVFLAG_EXTOK      0x0008       ;
   844                              <1> %define DRVFLAG_ISCDROM    0x0010       ; 0000,0000,0001,0000B
   845                              <1> 
   846                              <1> %define DRVFLAG_MASK       0x0015       ; 0000,0000,0001,0101B
   847                              <1> 
   848                              <1> %define INT13H_EXT_INSTCHECK 0x41
   849                              <1> %define INT13H_EXT_READ      0x42
   850                              <1> %define INT13H_EXT_WRITE     0x43
   851                              <1> %define INT13H_EXT_GETINFO   0x48
   852                              <1> %define INT13H_EXT_LOCK      0x45
   853                              <1> %define INT13H_RESET         0X00
   854                              <1> %define INT13H_READ          0X02
   855                              <1> %define INT13H_WRITE         0X03
   856                              <1> %define INT13H_GETINFO       0X08
   857                              <1> %define INT13H_GETTYPE       0x15
   858                              <1> 
   859                              <1> %define EXT_SUBSET_FIXED     0x01
   860                              <1> %define EXT_SUBSET_REMOVABLE 0x02
   861                              <1> %define EXT_SUBSET_EDD       0x04
   862                              <1> 
   863                              <1> %define DRV_TYPE_FIXED       0x03
   864                              <1> 
   865                              <1> %define MIN_HD_ID            0X80
   866                              <1> %define EXTPARAM_SIZE        0x42
   867                              <1> 
   868                              <1> %define MAX_CYLS             1023
   869                              <1> 
   870                              <1> ; Structure for calling int 13h ext Read / Write functions
   871                              <1> struc struc_int13ext
   872 00000000 <res 00000001>      <1>       .pack_size    : resb  1      ; ==16 size of struct Int13ExtData
   873 00000001 <res 00000001>      <1>       .reserved     : resb  1      ; ==0
   874 00000002 <res 00000001>      <1>       .blk_count    : resb  1      ; number of blocks to transfer <= 127
   875 00000003 <res 00000001>      <1>       .reserved1    : resb  1      ; ==0
   876 00000004 <res 00000002>      <1>       .buf_addr_off : resw  1      ; address of transfer buffer(segment:offset)
   877 00000006 <res 00000002>      <1>       .buf_addr_seg : resw  1
   878 00000008 <res 00000002>      <1>       .blk_num_low1 : resw  1      ; starting absolute block number
   879 0000000A <res 00000002>      <1>       .blk_num_low2 : resw  1
   880 0000000C <res 00000002>      <1>       .blk_num_high1: resw  1
   881 0000000E <res 00000002>      <1>       .blk_num_high2: resw  1
   882                              <1>       .end_of_struc
   883                              <1> endstruc
   884                              <1> 
   885                              <1> ; structure for calling int 13h ext get drive parameters functions (0x48)
   886                              <1> struc struc_extparam
   887 00000000 <res 00000002>      <1>       .pack_size         : resw  1
   888 00000002 <res 00000002>      <1>       .flags             : resw  1
   889 00000004 <res 00000004>      <1>       .cylinders         : resd  1
   890 00000008 <res 00000004>      <1>       .heads             : resd  1      ; <= 255
   891 0000000C <res 00000004>      <1>       .sectors           : resd  1      ; <= 63
   892 00000010 <res 00000008>      <1>       .total_sectors     : resd  2
   893 00000018 <res 00000002>      <1>       .bytes_per_sect    : resw  1
   894 0000001A <res 00000004>      <1>       .dpte_addr         : resd  1      ; device parameter table extension
   895 0000001E <res 00000002>      <1>       .dpi_key           : resw  1      ; 0xBEDD - Key, indicates presence
   896                              <1>                                         ; of Device Path Information
   897 00000020 <res 00000001>      <1>       .dpi_length        : resb  1      ; Length of Device Path Information 
   898                              <1>                                         ; including the key. = 36
   899 00000021 <res 00000001>      <1>       .reserved1         : resb  1
   900 00000022 <res 00000002>      <1>       .reserved2         : resw  1
   901 00000024 <res 00000004>      <1>       .host_bus_type     : resb  4      ; Host bus type, 4 bytes
   902                              <1>                                         ; PCI    PCI Local Bus
   903                              <1>                                         ; ISA    Legacy 16 bit fixed bus
   904 00000028 <res 00000008>      <1>       .interface_type    : resb  8      ; Interface type, 8 bytes
   905                              <1>                                         ; ATA   ATA/ATAPI-4 compliant device using ATA commands
   906                              <1>                                         ; ATAPI ATA/ATAPI-4 compliant device using ATAPI commands
   907                              <1>                                         ; SCSI  SCSI compliant device
   908                              <1>                                         ; USB   USB Mass Storage compliant device
   909                              <1>                                         ; 1394  1394 Mass Storage device
   910                              <1>                                         ; FIBRE Fibre Channel
   911 00000030 <res 00000008>      <1>       .interface_path    : resq  1
   912 00000038 <res 00000008>      <1>       .device_path       : resq  1
   913 00000040 <res 00000001>      <1>       .reserved3         : resb  1
   914 00000041 <res 00000001>      <1>       .checksum          : resb  1
   915                              <1>       .end_of_struc
   916                              <1> endstruc
   917                              <1> 
   918                              <1> ; Device parameter table extension
   919                              <1> %define SIZE_OF_DPTE struc_dpte.end_of_struc
   920                              <1> struc struc_dpte
   921 00000000 <res 00000002>      <1> 	.base_io	: resw 1
   922 00000002 <res 00000002>      <1> 	.ctrl_io	: resw 1
   923 00000004 <res 00000001>      <1> 	.flags		: resb 1
   924 00000005 <res 00000001>      <1> 	.vender_spec	: resb 1
   925 00000006 <res 00000001>      <1> 	.irq		: resb 1
   926 00000007 <res 00000001>      <1> 	.blk_count	: resb 1
   927 00000008 <res 00000001>      <1> 	.dma		: resb 1
   928 00000009 <res 00000001>      <1> 	.pio		: resb 1
   929 0000000A <res 00000002>      <1> 	.bios_spec	: resw 1
   930 0000000C <res 00000002>      <1> 	.reserved	: resw 1
   931 0000000E <res 00000001>      <1> 	.revision	: resb 1
   932 0000000F <res 00000001>      <1> 	.checksum	: resb 1
   933                              <1> 	.end_of_struc
   934                              <1> endstruc
   935                              <1> 
   936                              <1> ;Return cdrom boot catalog command packet
   937                              <1> %define SIZE_OF_CDBC_CMD struc_cdbc_cmd.end_of_struc
   938                              <1> struc struc_cdbc_cmd
   939 00000000 <res 00000001>      <1> 	.pack_size	: resb 1
   940 00000001 <res 00000001>      <1> 	.sector_count	: resb 1
   941 00000002 <res 00000002>      <1> 	.buf_addr_off	: resw 1
   942 00000004 <res 00000002>      <1> 	.buf_addr_seg	: resw 1
   943 00000006 <res 00000002>      <1> 	.begnning_sect	: resw 1
   944                              <1> 	.end_of_struc
   945                              <1> endstruc
   946                              <1> 
   947                              <1> ;CD Emulation Specification Packet
   948                              <1> %define SIZE_OF_CDEMU_SPEC struc_cdemu_spec.end_of_struc
   949                              <1> struc struc_cdemu_spec
   950 00000000 <res 00000001>      <1> 	.pack_size	: resb 1
   951 00000001 <res 00000001>      <1> 	.media_type	: resb 1
   952 00000002 <res 00000001>      <1> 	.emu_drvid	: resb 1
   953 00000003 <res 00000001>      <1> 	.controller_id	: resb 1
   954 00000004 <res 00000004>      <1> 	.image_lba	: resd 1
   955 00000008 <res 00000002>      <1> 	.device_spec	: resw 1
   956 0000000A <res 00000002>      <1> 	.user_bufseg	: resw 1
   957 0000000C <res 00000002>      <1> 	.load_seg	: resw 1
   958 0000000E <res 00000002>      <1> 	.sect_count	: resw 1
   959 00000010 <res 00000001>      <1> 	.cylinders	: resb 1
   960 00000011 <res 00000001>      <1> 	.sectors	: resb 1
   961 00000012 <res 00000001>      <1> 	.heads		: resb 1
   962                              <1> 	.end_of_struc
   963                              <1> endstruc
   964                              <1> 
   965                              <1> 
   966                              <1> ;Structure of boot catalog entry
   967                              <1> %define SIZE_OF_BOOT_CATALOG struc_boot_catalog.end_of_struc
   968                              <1> struc struc_boot_catalog
   969 00000000 <res 00000001>      <1> 	.indicator	: resb 1
   970 00000001 <res 00000001>      <1> 	.media_type	: resb 1
   971 00000002 <res 00000002>      <1> 	.load_seg	: resw 1
   972 00000004 <res 00000001>      <1> 	.sys_type	: resb 1
   973 00000005 <res 00000001>      <1> 	.reserved	: resb 1
   974 00000006 <res 00000002>      <1> 	.sect_count	: resw 1
   975 00000008 <res 00000004>      <1> 	.load_rba	: resd 1
   976 0000000C <res 00000014>      <1> 	.reserved1	: resb 20
   977                              <1> 	.end_of_struc
   978                              <1> endstruc
   979                              <1> 
   980                              <1> 
   981                              <1> ; structure for record drive informations
   982                              <1> struc struc_driveinfo
   983 00000000 <res 00000001>      <1>       .id                : resb  1
   984 00000001 <res 00000001>      <1>       .flags             : resb  1
   985 00000002 <res 00000002>      <1>       .cylinders         : resw  1
   986 00000004 <res 00000002>      <1>       .heads             : resw  1
   987 00000006 <res 00000002>      <1>       .sectors           : resw  1
   988 00000008 <res 00000002>      <1>       .sector_size       : resw  1
   989                              <1>       .end_of_struc
   990                              <1> endstruc
   991                              <1> 
   992                              <1> 
   993                              <1> 
   994                              <1> %define SIZE_OF_DRIVEINFO (struc_driveinfo.end_of_struc)
   995                              <1> %define SIZE_OF_EXTPARAM (struc_extparam.end_of_struc)
   996                              <1> %define SIZE_OF_INT13EXT (struc_int13ext.end_of_struc)
   997                              <1> 
   998                                  %include "atapi.h"
   999                              <1> ;********************************************************************
  1000                              <1> ; ATA LOW LEVEL I/O DRIVER -- ATAIO.H (driver's public data)
  1001                              <1> ;
  1002                              <1> ; by Hale Landis (hlandis@ibm.net)
  1003                              <1> ;
  1004                              <1> ; There is no copyright and there are no restrictions on the use
  1005                              <1> ; of this ATA Low Level I/O Driver code.  It is distributed to
  1006                              <1> ; help other programmers understand how the ATA device interface
  1007                              <1> ; works and it is distributed without any warranty.  Use this
  1008                              <1> ; code at your own risk.
  1009                              <1> ;
  1010                              <1> ; This code is based on the ATA-2, ATA-3 and ATA-4 standards and
  1011                              <1> ; on interviews with various ATA controller and drive designers.
  1012                              <1> ;
  1013                              <1> ; This code has been run on many ATA (IDE) drives and
  1014                              <1> ; MFM/RLL controllers.  This code may be a little
  1015                              <1> ; more picky about the status it sees at various times.  A real
  1016                              <1> ; BIOS probably would not check the status as carefully.
  1017                              <1> ;
  1018                              <1> ; Compile with one of the Borland C or C++ compilers.
  1019                              <1> ;
  1020                              <1> ; This C source file is the header file for the for this driver
  1021                              <1> ; and is used in the ATAIOxxx.C files and must also be used
  1022                              <1> ; by any program using this driver code.
  1023                              <1> ;********************************************************************
  1024                              <1> 
  1025                              <1> %ifndef _ATAIO_H
  1026                              <1> %define _ATAIO_H
  1027                              <1> %define ATA_DRIVER_VERSION "13J"
  1028                              <1> 
  1029                              <1> ; Global defines -- ATA register and register bits.
  1030                              <1> ;
  1031                              <1> ; command block & control block regs
  1032                              <1> ;
  1033                              <1> ; these are the offsets into pio_reg_addrs[]
  1034                              <1> 
  1035                              <1> %define CB_DATA  0   ; data reg         in/out pio_base_addr1+0
  1036                              <1> %define CB_ERR   1   ; error            in     pio_base_addr1+1
  1037                              <1> %define CB_FR    1   ; feature reg         out pio_base_addr1+1
  1038                              <1> %define CB_SC    2   ; sector count     in/out pio_base_addr1+2
  1039                              <1> %define CB_SN    3   ; sector number    in/out pio_base_addr1+3
  1040                              <1> %define CB_CL    4   ; cylinder low     in/out pio_base_addr1+4
  1041                              <1> %define CB_CH    5   ; cylinder high    in/out pio_base_addr1+5
  1042                              <1> %define CB_DH    6   ; device head      in/out pio_base_addr1+6
  1043                              <1> %define CB_STAT  7   ; primary status   in     pio_base_addr1+7
  1044                              <1> %define CB_CMD   7   ; command             out pio_base_addr1+7
  1045                              <1> %define CB_ASTAT 8   ; alternate status in     pio_base_addr2+6
  1046                              <1> %define CB_DC    8   ; device control      out pio_base_addr2+6
  1047                              <1> %define CB_DA    9   ; device address   in     pio_base_addr2+7
  1048                              <1> 
  1049                              <1> ; error reg (CB_ERR) bits
  1050                              <1> 
  1051                              <1> %define CB_ER_ICRC 0x80    ; ATA Ultra DMA bad CRC
  1052                              <1> %define CB_ER_BBK  0x80    ; ATA bad block
  1053                              <1> %define CB_ER_UNC  0x40    ; ATA uncorrected error
  1054                              <1> %define CB_ER_MC   0x20    ; ATA media change
  1055                              <1> %define CB_ER_IDNF 0x10    ; ATA id not found
  1056                              <1> %define CB_ER_MCR  0x08    ; ATA media change request
  1057                              <1> %define CB_ER_ABRT 0x04    ; ATA command aborted
  1058                              <1> %define CB_ER_NTK0 0x02    ; ATA track 0 not found
  1059                              <1> %define CB_ER_NDAM 0x01    ; ATA address mark not found
  1060                              <1> 
  1061                              <1> %define CB_ER_P_SNSKEY 0xf0   ; ATAPI sense key (mask)
  1062                              <1> %define CB_ER_P_MCR    0x08   ; ATAPI Media Change Request
  1063                              <1> %define CB_ER_P_ABRT   0x04   ; ATAPI command abort
  1064                              <1> %define CB_ER_P_EOM    0x02   ; ATAPI End of Media
  1065                              <1> %define CB_ER_P_ILI    0x01   ; ATAPI Illegal Length Indication
  1066                              <1> 
  1067                              <1> ; ATAPI Interrupt Reason bits in the Sector Count reg (CB_SC)
  1068                              <1> 
  1069                              <1> %define CB_SC_P_TAG    0xf8   ; ATAPI tag (mask)
  1070                              <1> %define CB_SC_P_REL    0x04   ; ATAPI release
  1071                              <1> %define CB_SC_P_IO     0x02   ; ATAPI I/O
  1072                              <1> %define CB_SC_P_CD     0x01   ; ATAPI C/D
  1073                              <1> 
  1074                              <1> ; bits 7-4 of the device/head (CB_DH) reg
  1075                              <1> 
  1076                              <1> %define CB_DH_DEV0 0xa0    ; select device 0
  1077                              <1> %define CB_DH_DEV1 0xb0    ; select device 1
  1078                              <1> 
  1079                              <1> ; status reg (CB_STAT and CB_ASTAT) bits
  1080                              <1> 
  1081                              <1> %define CB_STAT_BSY  0x80  ; busy
  1082                              <1> %define CB_STAT_RDY  0x40  ; ready
  1083                              <1> %define CB_STAT_DF   0x20  ; device fault
  1084                              <1> %define CB_STAT_WFT  0x20  ; write fault (old name)
  1085                              <1> %define CB_STAT_SKC  0x10  ; seek complete
  1086                              <1> %define CB_STAT_SERV 0x10  ; service
  1087                              <1> %define CB_STAT_DRQ  0x08  ; data request
  1088                              <1> %define CB_STAT_CORR 0x04  ; corrected
  1089                              <1> %define CB_STAT_IDX  0x02  ; index
  1090                              <1> %define CB_STAT_ERR  0x01  ; error
  1091                              <1> 
  1092                              <1> ; digital output reg (CB_DC) bits
  1093                              <1> 
  1094                              <1> %define CB_DC_HD15   0x08  ; bit should always be set to one
  1095                              <1> %define CB_DC_SRST   0x04  ; soft reset
  1096                              <1> %define CB_DC_NIEN   0x02  ; disable interrupts
  1097                              <1> 
  1098                              <1> ;**************************************************************
  1099                              <1> 
  1100                              <1> ; Most mandtory and optional ATA commands (from ATA-3),
  1101                              <1> 
  1102                              <1> %define CMD_CFA_ERASE_SECTORS            0xC0
  1103                              <1> %define CMD_CFA_REQUEST_EXT_ERR_CODE     0x03
  1104                              <1> %define CMD_CFA_TRANSLATE_SECTOR         0x87
  1105                              <1> %define CMD_CFA_WRITE_MULTIPLE_WO_ERASE  0xCD
  1106                              <1> %define CMD_CFA_WRITE_SECTORS_WO_ERASE   0x38
  1107                              <1> %define CMD_CHECK_POWER_MODE1            0xE5
  1108                              <1> %define CMD_CHECK_POWER_MODE2            0x98
  1109                              <1> %define CMD_DEVICE_RESET                 0x08
  1110                              <1> %define CMD_EXECUTE_DEVICE_DIAGNOSTIC    0x90
  1111                              <1> %define CMD_FLUSH_CACHE                  0xE7
  1112                              <1> %define CMD_FORMAT_TRACK                 0x50
  1113                              <1> %define CMD_IDENTIFY_DEVICE              0xEC
  1114                              <1> %define CMD_IDENTIFY_DEVICE_PACKET       0xA1
  1115                              <1> %define CMD_IDENTIFY_PACKET_DEVICE       0xA1
  1116                              <1> %define CMD_IDLE1                        0xE3
  1117                              <1> %define CMD_IDLE2                        0x97
  1118                              <1> %define CMD_IDLE_IMMEDIATE1              0xE1
  1119                              <1> %define CMD_IDLE_IMMEDIATE2              0x95
  1120                              <1> %define CMD_INITIALIZE_DRIVE_PARAMETERS  0x91
  1121                              <1> %define CMD_INITIALIZE_DEVICE_PARAMETERS 0x91
  1122                              <1> %define CMD_NOP                          0x00
  1123                              <1> %define CMD_PACKET                       0xA0
  1124                              <1> %define CMD_READ_BUFFER                  0xE4
  1125                              <1> %define CMD_READ_DMA                     0xC8
  1126                              <1> %define CMD_READ_DMA_QUEUED              0xC7
  1127                              <1> %define CMD_READ_MULTIPLE                0xC4
  1128                              <1> %define CMD_READ_SECTORS                 0x20
  1129                              <1> %define CMD_READ_VERIFY_SECTORS          0x40
  1130                              <1> %define CMD_RECALIBRATE                  0x10
  1131                              <1> %define CMD_SEEK                         0x70
  1132                              <1> %define CMD_SET_FEATURES                 0xEF
  1133                              <1> %define CMD_SET_MULTIPLE_MODE            0xC6
  1134                              <1> %define CMD_SLEEP1                       0xE6
  1135                              <1> %define CMD_SLEEP2                       0x99
  1136                              <1> %define CMD_STANDBY1                     0xE2
  1137                              <1> %define CMD_STANDBY2                     0x96
  1138                              <1> %define CMD_STANDBY_IMMEDIATE1           0xE0
  1139                              <1> %define CMD_STANDBY_IMMEDIATE2           0x94
  1140                              <1> %define CMD_WRITE_BUFFER                 0xE8
  1141                              <1> %define CMD_WRITE_DMA                    0xCA
  1142                              <1> %define CMD_WRITE_DMA_QUEUED             0xCC
  1143                              <1> %define CMD_WRITE_MULTIPLE               0xC5
  1144                              <1> %define CMD_WRITE_SECTORS                0x30
  1145                              <1> %define CMD_WRITE_VERIFY                 0x3C
  1146                              <1> 
  1147                              <1> %define REG_CONFIG_TYPE_NONE  0
  1148                              <1> %define REG_CONFIG_TYPE_UNKN  1
  1149                              <1> %define REG_CONFIG_TYPE_ATA   2
  1150                              <1> %define REG_CONFIG_TYPE_ATAPI 3
  1151                              <1> 
  1152                              <1> %define FAILBIT15 0x8000   ; extra interrupts detected
  1153                              <1> %define FAILBIT14 0x4000
  1154                              <1> %define FAILBIT13 0x2000
  1155                              <1> %define FAILBIT12 0x1000
  1156                              <1> %define FAILBIT11 0x0800
  1157                              <1> %define FAILBIT10 0x0400
  1158                              <1> %define FAILBIT9  0x0200
  1159                              <1> %define FAILBIT8  0x0100   ; SC( CD/IO bits) wrong at end of cmd
  1160                              <1> %define FAILBIT7  0x0080   ; byte count odd at data packet xfer time
  1161                              <1> %define FAILBIT6  0x0040   ; byte count wrong at data packet xfer time
  1162                              <1> %define FAILBIT5  0x0020   ; SC (IO bit) wrong at data packet xfer time
  1163                              <1> %define FAILBIT4  0x0010   ; SC (CD bit) wrong at data packet xfer time
  1164                              <1> %define FAILBIT3  0x0008   ; byte count wrong at cmd packet xfer time
  1165                              <1> %define FAILBIT2  0x0004   ; SC wrong at cmd packet xfer time
  1166                              <1> %define FAILBIT1  0x0002   ; got interrupt before cmd packet xfer
  1167                              <1> %define FAILBIT0  0x0001   ; slow setting BSY=1 or DRQ=1 after AO cmd
  1168                              <1> 
  1169                              <1> %define ATATYPE_MD 0x1     ; Direct-access device (e.g. magnetic disk)
  1170                              <1> %define ATATYPE_MT 0x1     ; Sequential-access device (e.g. magnetic tape)
  1171                              <1> %define ATATYPE_PT 0x2     ; Printer device
  1172                              <1> %define ATATYPE_PR 0x3     ; processor device
  1173                              <1> %define ATATYPE_CDR 0x4    ; Write-once device
  1174                              <1> %define ATATYPE_CD 0x5     ; CD-ROM device
  1175                              <1> %define ATATYPE_SC 0x6     ; Scanner device
  1176                              <1> %define ATATYPE_OM 0x7     ; Optical memory device
  1177                              <1> %define ATATYPE_MC 0x8     ; Medium changer device
  1178                              <1> %define ATATYPE_CT 0x9     ; Communications device
  1179                              <1> 
  1180                              <1> %define SIZE_OF_ATAPI_DEVINFO struc_atapi_devinfo.end_of_struc
  1181                              <1> 
  1182                              <1> struc struc_atapi_devinfo
  1183 00000000 <res 00000001>      <1> 	.dev_type	: resb 1
  1184 00000001 <res 00000001>      <1> 	.dev_flags	: resb 1
  1185 00000002 <res 00000008>      <1> 	.vender_id	: resb 8
  1186 0000000A <res 00000010>      <1> 	.product_id	: resb 16
  1187 0000001A <res 00000004>      <1> 	.product_rev	: resb 4
  1188 0000001E <res 00000002>      <1> 	.reserved	: resb 2
  1189                              <1> 	.end_of_struc
  1190                              <1> endstruc
  1191                              <1> 
  1192                              <1> 
  1193                              <1> %macro	outbyte	0-2
  1194                              <1> %if %0>1
  1195                              <1> 	mov	al,%2
  1196                              <1> %endif
  1197                              <1> %if %0>0
  1198                              <1> 	mov	dx,[reg_addr+%1*2]
  1199                              <1> %endif
  1200                              <1> 	out	dx,al
  1201                              <1> %endmacro
  1202                              <1> 
  1203                              <1> %macro	outword	0-2
  1204                              <1> %if %0>1
  1205                              <1> 	mov	ax,%2
  1206                              <1> %endif
  1207                              <1> %if %0>0
  1208                              <1> 	mov	dx,[reg_addr+%1*2]
  1209                              <1> %endif
  1210                              <1> 	out	dx,ax
  1211                              <1> %endmacro
  1212                              <1> 
  1213                              <1> 
  1214                              <1> %macro outbytes 2-*
  1215                              <1> %assign LAST_AL 0x1000
  1216                              <1> %rep %0 / 2
  1217                              <1>     %ifnum %2	
  1218                              <1> 	%if LAST_AL != %2
  1219                              <1> 		outbyte %1, %2
  1220                              <1> 		%assign LAST_AL %2
  1221                              <1> 	%else
  1222                              <1> 		outbyte %1
  1223                              <1> 	%endif
  1224                              <1>     %else
  1225                              <1> 	outbyte %1, %2
  1226                              <1>     %endif
  1227                              <1>     %rotate 2
  1228                              <1> %endrep
  1229                              <1> %endmacro
  1230                              <1> 
  1231                              <1> %macro inbyte 1-2
  1232                              <1> 	mov	dx,[reg_addr+%1*2]
  1233                              <1> 	in	al,dx
  1234                              <1> 	%if %0 > 1
  1235                              <1> 		mov	%2,al
  1236                              <1> 	%endif
  1237                              <1> %endmacro
  1238                              <1> 
  1239                              <1> %macro inword 1-2
  1240                              <1> 	mov	dx,[reg_addr+%1*2]
  1241                              <1> 	in	ax,dx
  1242                              <1> 	%if %0 > 1
  1243                              <1> 		mov	%2,ax
  1244                              <1> 	%endif
  1245                              <1> %endmacro
  1246                              <1> 
  1247                              <1> 
  1248                              <1> %endif
  1249                              <1> ; end ataio.h
  1250                                  
  1251                                  %undef DEBUG
  1252                                  
  1253                                  %ifdef DEBUG
  1254                                    %include "debug.h"
  1255                                  %endif
  1256                                  
  1257                                  %define DELAY_MSECS 55			; about 1 millisecond
  1258                                  
  1259                                  ;%define EDD_3_0
  1260                                  %define CDSECTOR_SIZE 0x800
  1261                                  %define sane_check
  1262                                  %define check_extra_fail
  1263                                  
  1264                                  %define MIN_CDROM_ID 0xE0
  1265                                  %define REG_ATAPI_MAX_BYTES 32768
  1266                                  
  1267                                  %ifndef DISABLE_CDBOOT
  1268                                    %define EDD30_SIG1	'BM'
  1269                                    %define EDD30_SIG2	'CB'
  1270                                  %else
  1271                                    %define EDD30_SIG1	'BM'
  1272                                    %define EDD30_SIG2	'SD'
  1273                                  %endif
  1274                                  
  1275                                  	org 0
  1276                                  	section .text
  1277 00000000 E99800                  	jmp edd30_main
  1278 00000003 90                      	nop
  1279                                  
  1280 00000004 43442D524F4D20426F-     copyright_msg	db 'CD-ROM Booting Module V1.2 for Smart BootManager, http://btmgr.sourceforge.net',0x0d,0x0a
  1281 0000000D 6F74696E67204D6F64-
  1282 00000016 756C652056312E3220-
  1283 0000001F 666F7220536D617274-
  1284 00000028 20426F6F744D616E61-
  1285 00000031 6765722C2068747470-
  1286 0000003A 3A2F2F62746D67722E-
  1287 00000043 736F75726365666F72-
  1288 0000004C 67652E6E65740D0A   
  1289 00000054 436F70797269676874-     		db 'Copyright (C) 2000 Christopher Li, James Su',0x0d,0x0a,0x0a,
  1290 0000005D 202843292032303030-
  1291 00000066 204368726973746F70-
  1292 0000006F 686572204C692C204A-
  1293 00000078 616D65732053750D0A-
  1294 00000081 0A                 
  1295 00000082 426F6F74696E672066-     		db 'Booting from CD-ROM...',0x0d,0x0a,0
  1296 0000008B 726F6D2043442D524F-
  1297 00000094 4D2E2E2E0D0A00     
  1298                                  
  1299                                  edd30_main:
  1300                                  ;input ah = 0, install my int 13h
  1301                                  ;      ah = 1, uninstall my int 13h
  1302                                  ;      ah = 2, initialize atapi
  1303                                  ;      ah = 3, set drive map
  1304                                  ;           bx , cx , drive map
  1305                                  ;      ah = 4, set atapi io ports
  1306                                  ;           bx , cx , atapi io ports
  1307                                  
  1308 0000009B 60                      	pusha
  1309                                  	
  1310 0000009C 06                      	push es
  1311 0000009D 1E                      	push ds
  1312 0000009E 0E                      	push cs
  1313 0000009F 1F                      	pop ds
  1314 000000A0 FC                      	cld
  1315                                  
  1316 000000A1 31D2                    	xor dx, dx
  1317 000000A3 8EC2                    	mov es, dx
  1318                                  
  1319 000000A5 30C0                    	xor al, al
  1320                                  
  1321 000000A7 08E4                    	or ah, ah
  1322 000000A9 7416                    	je .inst_int13h
  1323                                  
  1324 000000AB 80FC01                  	cmp ah, 1
  1325 000000AE 743F                    	je .uninst_int13h
  1326                                  
  1327                                  %ifndef DISABLE_CDBOOT
  1328 000000B0 80FC02                  	cmp ah, 2
  1329 000000B3 746F                    	je .init_atapi
  1330                                  
  1331 000000B5 80FC04                  	cmp ah, 4
  1332 000000B8 7462                    	je .set_io_ports
  1333                                  %endif
  1334                                  
  1335 000000BA 80FC03                  	cmp ah, 3
  1336 000000BD 744E                    	je .set_drvmap
  1337 000000BF EB74                    	jmp .end
  1338                                  
  1339                                  .inst_int13h:
  1340 000000C1 26813E4C00[3901]        	cmp word [es:0x13*4], new_int13h
  1341 000000C8 746B                    	je .end
  1342                                  
  1343 000000CA 06                      	push es
  1344 000000CB 0E                      	push cs
  1345 000000CC 07                      	pop es
  1346 000000CD BF[D101]                	mov di, start_of_emu_data
  1347 000000D0 B93A08                  	mov cx, end_of_emu_data - start_of_emu_data
  1348 000000D3 F3AA                    	rep stosb
  1349 000000D5 07                      	pop es
  1350                                  
  1351 000000D6 FA                      	cli
  1352 000000D7 B8[3901]                	mov ax, new_int13h
  1353 000000DA 2687064C00              	xchg ax, [es:0x13*4]
  1354 000000DF A3[9C01]                	mov [int13h_old_off], ax
  1355 000000E2 8CC8                    	mov ax, cs
  1356 000000E4 2687064E00              	xchg ax, [es:0x13*4+2]
  1357 000000E9 A3[9E01]                	mov [int13h_old_seg], ax
  1358 000000EC FB                      	sti
  1359 000000ED EB46                    	jmp short .end
  1360                                  
  1361                                  .uninst_int13h:
  1362 000000EF 26813E4C00[3901]        	cmp word [es:0x13*4], new_int13h
  1363 000000F6 753D                    	jne .end
  1364                                  
  1365                                  %ifndef DISABLE_CDBOOT
  1366 000000F8 E85F0A                  	call reset_atapi_cdroms
  1367                                  %endif
  1368                                  
  1369 000000FB FA                      	cli
  1370 000000FC A1[9C01]                	mov ax, [int13h_old_off]
  1371 000000FF 26A34C00                	mov [es:0x13*4], ax
  1372 00000103 A1[9E01]                	mov ax, [int13h_old_seg]
  1373 00000106 26A34E00                	mov [es:0x13*4+2], ax
  1374 0000010A FB                      	sti
  1375 0000010B EB28                    	jmp short .end
  1376                                  
  1377                                  .set_drvmap:
  1378 0000010D 891E[D101]              	mov [drive_map], bx
  1379 00000111 890E[D301]              	mov [drive_map+2], cx
  1380 00000115 31C0                    	xor ax, ax
  1381 00000117 A3[D501]                	mov [drive_map+4], ax
  1382 0000011A EB19                    	jmp short .end
  1383                                  
  1384                                  %ifndef DISABLE_CDBOOT
  1385                                  .set_io_ports:
  1386 0000011C 891E[1800]              	mov [reg_base_addr_append], bx
  1387 00000120 890E[1A00]              	mov [reg_base_addr_append+2], cx
  1388                                  
  1389                                  .init_atapi:
  1390 00000124 0E                      	push cs
  1391 00000125 07                      	pop es
  1392                                  
  1393 00000126 BF[0000]                	mov di, start_of_atapi_data
  1394 00000129 B9D101                  	mov cx, end_of_atapi_data - start_of_atapi_data
  1395 0000012C F3AA                    	rep stosb
  1396                                  
  1397 0000012E FF0E[0000]              	dec word [atapi_cur_dev]
  1398                                  
  1399                                  %ifdef SLOW_ATAPI_DEVICE
  1400                                  	call init_timer
  1401                                  %endif
  1402 00000132 E8E409                  	call init_atapi_cdroms
  1403                                  %endif
  1404                                  
  1405                                  .end:
  1406 00000135 1F                      	pop ds
  1407 00000136 07                      	pop es
  1408 00000137 61                      	popa
  1409 00000138 CB                      	retf
  1410                                  
  1411                                  ;=============================================================================
  1412                                  ; My New INT 13h handler starts here!
  1413                                  ;=============================================================================
  1414                                  new_int13h:
  1415 00000139 3D6666                  	cmp ax, 0x6666
  1416 0000013C 750F                    	jne .common_func
  1417 0000013E 81FB424D                	cmp bx, EDD30_SIG1
  1418 00000142 7509                    	jne .common_func
  1419 00000144 81F94342                	cmp cx, EDD30_SIG2
  1420 00000148 7503                    	jne .common_func
  1421                                  
  1422 0000014A 87D9                    	xchg bx, cx
  1423 0000014C CF                      	iret
  1424                                  
  1425                                  .common_func:
  1426                                  ;=============================================================================
  1427 0000014D FC                      	cld			; clear direction, only need one time
  1428 0000014E 50                              push    ax              ; save AX (contains function code in AH)
  1429 0000014F 55                              push    bp              ; need BP to mess with stack
  1430 00000150 89E5                            mov     bp, sp
  1431                                          ; Stack layout:
  1432                                          ;
  1433                                          ;   +8  INT flags
  1434                                          ;   +6  INT CS
  1435                                          ;   +4  INT IP
  1436                                          ;   +2  AX
  1437                                          ; BP+0 BP
  1438                                  
  1439                                  %ifndef DISABLE_CDBOOT
  1440 00000152 2E803E[0700]00          	cmp byte [cs:atapi_dev_count], 0
  1441 00000158 7423                    	jz .no_cdrom
  1442                                  
  1443 0000015A 80FAE0                  	cmp dl, MIN_CDROM_ID
  1444 0000015D 720F                    	jb .not_cdrom_drv
  1445                                  
  1446 0000015F 52                      	push dx
  1447 00000160 80EAE0                  	sub dl, MIN_CDROM_ID
  1448 00000163 2E3A16[0700]            	cmp dl, [cs:atapi_dev_count]
  1449 00000168 5A                      	pop dx
  1450 00000169 7303                    	jae .not_cdrom_drv
  1451                                  
  1452 0000016B E97701                  	jmp edd30_for_cdrom
  1453                                  
  1454                                  .not_cdrom_drv:
  1455 0000016E 2E803E[DC01]00          	cmp byte [cs:emu_disk_type], 0
  1456 00000174 7407                    	je .not_emu_drv
  1457                                  
  1458 00000176 2E3A16[EA01]            	cmp dl,[cs:edd30_cdemu_spec + struc_cdemu_spec.emu_drvid]
  1459 0000017B 7443                    	je cdemu_int13h
  1460                                  
  1461                                  .not_emu_drv:
  1462                                  
  1463                                  .no_cdrom:
  1464                                  %endif
  1465                                  
  1466 0000017D 9C                              pushf                   ; push flags (to act like interrupt)
  1467 0000017E 56                              push    si
  1468 0000017F BE[D101]                        mov     si, drive_map
  1469                                  
  1470 00000182 2E8B04                  .mapfl: mov ax, [cs:si]         ; get next entry
  1471 00000185 46                              inc si
  1472 00000186 46                              inc si
  1473 00000187 09C0                            or      ax, ax          ; at end ?
  1474 00000189 7406                            jz      .nomap          ; yes -> do not map
  1475 0000018B 38C2                            cmp     dl, al          ; match ?
  1476 0000018D 75F3                            jne     .mapfl          ; no -> continue
  1477 0000018F 88E2                            mov     dl, ah          ; map drive
  1478 00000191 5E                      .nomap: pop     si              ; restore SI
  1479 00000192 894608                          mov     [bp+8], ax      ; overwrite old flags (to remember mapping)
  1480 00000195 8B4602                          mov     ax, [bp+2]      ; restore AX
  1481 00000198 8B6E00                          mov     bp, [bp]        ; restore BP
  1482 0000019B 9A                              db      0x9a            ; CALL FAR
  1483                                  
  1484 0000019C 0000                    int13h_old_off  dw   0
  1485 0000019E 0000                    int13h_old_seg  dw   0
  1486                                  
  1487 000001A0 55                              push    bp              ; save BP again
  1488 000001A1 89E5                            mov     bp,sp
  1489                                          ; New stack layout:
  1490                                          ;
  1491                                          ;   +10 mapping (was flags)
  1492                                          ;   +8  INT CS
  1493                                          ;   +6  INT IP
  1494                                          ;   +4  AX
  1495                                          ;   +2  obsolete BP
  1496                                          ; BP+0  BP
  1497 000001A3 874604                          xchg    ax, [bp+4]      ; save AX and get command
  1498 000001A6 9C                              pushf                   ; fix driver number, if necessary
  1499 000001A7 80FC08                          cmp     ah, 8           ; do not fix
  1500 000001AA 7409                            je      done_int13
  1501 000001AC 8B460A                          mov     ax, [bp+10]     ; no mapping ?
  1502 000001AF 09C0                            or      ax, ax
  1503 000001B1 7402                            jz      done_int13
  1504 000001B3 88C2                            mov     dl, al          ; fix mapping
  1505                                  done_int13:
  1506 000001B5 8B4604                  	mov     ax, [bp+4]      ; restore AX
  1507 000001B8 8F460A                          pop     word [bp+10]    ; restore flags
  1508 000001BB 5D                              pop     bp              ; get BP
  1509 000001BC 83C404                          add     sp, 4           ; fix SP
  1510 000001BF CF                              iret                    ; done
  1511                                  
  1512                                  
  1513                                  %ifndef DISABLE_CDBOOT
  1514                                  ;=============================================================================
  1515                                  cdemu_int13h:
  1516                                  	; Stack layout:
  1517                                          ;   +8  INT flags
  1518                                          ;   +6  INT CS
  1519                                          ;   +4  INT IP
  1520                                          ;   +2  AX
  1521                                          ; BP+0 BP
  1522                                  	;   -2 ax
  1523                                  	;   -4 cx
  1524                                  	;   -6 dx
  1525                                  	;   -8 bx
  1526                                  	;   -10 sp
  1527                                  	;   -12 bp
  1528                                  	;   -14 si
  1529                                  	;   -16 di
  1530                                  	;   -18 ds
  1531                                  	;   -20 es
  1532                                  	;   -24 edx
  1533 000001C0 60                      	pusha
  1534 000001C1 1E                      	push ds
  1535 000001C2 06                      	push es
  1536 000001C3 6652                    	push edx
  1537 000001C5 0E                      	push cs
  1538 000001C6 1F                      	pop ds
  1539                                  
  1540 000001C7 50                      	push ax
  1541 000001C8 2E0FB606[DB01]          	movzx ax, byte [cs:emu_cdrom_id]
  1542 000001CE 2CE0                    	sub al, MIN_CDROM_ID 
  1543 000001D0 E8E107                  	call select_atapi
  1544 000001D3 58                      	pop ax
  1545                                  
  1546 000001D4 7305                    	jnc .sel_atapi_ok
  1547 000001D6 B4AA                    	mov ah, 0xaa
  1548 000001D8 E9E101                  	jmp edd30_for_cdrom.fail_out
  1549                                  
  1550                                  .sel_atapi_ok:
  1551 000001DB B90800                  	mov cx, (cdemu_act_table.end_of_table - cdemu_act_table)
  1552 000001DE 31FF                    	xor di, di 
  1553                                  
  1554                                  .loop_search:
  1555 000001E0 38A5[A205]              	cmp [cdemu_act_table + di], ah
  1556 000001E4 7406                    	je .found_act
  1557 000001E6 47                      	inc di
  1558 000001E7 E2F7                    	loop .loop_search
  1559 000001E9 E9CE01                  	jmp edd30_for_cdrom.invalid_cmd
  1560                                  
  1561                                  .found_act:
  1562 000001EC 8B4EFC                  	mov cx, [bp-4]		; restore cx
  1563 000001EF D1E7                    	shl di, 1
  1564 000001F1 FFA5[AA05]              	jmp [cdemu_jmp_table + di]
  1565                                  
  1566                                  ;=============================================================================
  1567                                  .stop_disk_emu:
  1568 000001F5 89F7                    	mov di, si
  1569 000001F7 FF76EE                  	push word [bp-18]
  1570 000001FA 07                      	pop es
  1571 000001FB BE[E801]                	mov si, edd30_cdemu_spec
  1572 000001FE B91300                  	mov cx, SIZE_OF_CDEMU_SPEC
  1573 00000201 F3A4                    	rep movsb
  1574 00000203 08C0                    	or al, al
  1575 00000205 0F85A901                	jnz near edd30_for_cdrom.success_out
  1576                                  
  1577                                  .terminate_emu:
  1578 00000209 A2[DC01]                	mov byte [emu_disk_type], al
  1579 0000020C E9A301                  	jmp edd30_for_cdrom.success_out
  1580                                  
  1581                                  .emu_get_param:
  1582 0000020F 8A26[DC01]              	mov ah, [emu_disk_type]
  1583 00000213 8866F8                  	mov [bp-8], ah		; bl = drive type
  1584 00000216 8B0E[F801]              	mov cx, [edd30_cdemu_spec + struc_cdemu_spec.cylinders]
  1585 0000021A 86E9                    	xchg ch, cl
  1586 0000021C FECD                    	dec ch
  1587 0000021E 80E13F                  	and cl, 0x3f
  1588 00000221 8A36[FA01]              	mov dh, [edd30_cdemu_spec + struc_cdemu_spec.heads]
  1589 00000225 FECE                    	dec dh
  1590 00000227 B202                    	mov dl, 0x02
  1591 00000229 894EFC                  	mov [bp-4], cx
  1592 0000022C 8956FA                  	mov [bp-6], dx
  1593 0000022F 31C0                    	xor ax, ax
  1594 00000231 E97E01                  	jmp edd30_for_cdrom.success_out
  1595                                  
  1596                                  .emu_get_type:
  1597 00000234 B402                    	mov ah, 0x02
  1598 00000236 E97B01                  	jmp edd30_for_cdrom.success_out_no_ah
  1599                                  
  1600                                  .emu_read:
  1601 00000239 08C0                    	or al, al
  1602 0000023B 0F84A100                	jmpz .emu_read_fail
  1603                                  
  1604 0000023F 3A36[E101]              	cmp dh, [emu_head]
  1605 00000243 0F839900                	jmpnb .emu_read_fail
  1606                                  
  1607 00000247 88CA                    	mov dl, cl		; dl = sector number
  1608 00000249 80E23F                  	and dl, 63
  1609 0000024C 08D2                    	or dl, dl
  1610 0000024E 0F848E00                	jmpz .emu_read_fail
  1611 00000252 FECA                    	dec dl
  1612                                  
  1613 00000254 3A16[DF01]              	cmp dl, [emu_sec]
  1614 00000258 0F838400                	jmpnb .emu_read_fail
  1615                                  
  1616 0000025C 0FB6CD                  	movzx cx, ch
  1617 0000025F 3B0E[DD01]              	cmp cx, [emu_cyl]
  1618 00000263 0F837900                	jmpnb .emu_read_fail
  1619                                  
  1620 00000267 89C8                    	mov ax, cx		; ax = cylinder
  1621 00000269 F626[E101]              	mul byte [emu_head]	; (cylinder*head
  1622 0000026D 88F1                    	mov cl, dh
  1623 0000026F 01C8                    	add ax, cx		; (cylinder*head + head)
  1624 00000271 88D1                    	mov cl, dl		; cl = sector
  1625 00000273 F726[DF01]              	mul word [emu_sec]	; (cylinder*head + head)*sect_per_track
  1626 00000277 01C8                    	add ax, cx		; (cyl*head + head)*sect_p_t + sector
  1627                                  
  1628 00000279 8A4E02                  	mov cl, [bp+2]		; number of sectors
  1629                                  
  1630 0000027C 8B3E[D701]              	mov di, [emu_buf_off]
  1631 00000280 6631D2                  	xor edx, edx
  1632 00000283 668916[E301]            	mov dword [emu_last_read], edx
  1633                                  
  1634                                  .emu_loop_read:
  1635 00000288 50                      	push ax
  1636 00000289 53                      	push bx
  1637 0000028A 51                      	push cx
  1638 0000028B 57                      	push di
  1639                                  
  1640 0000028C 660FB7D0                	movzx edx, ax
  1641                                  
  1642 00000290 66C1EA02                	shr edx, 2
  1643 00000294 660316[EC01]            	add edx, [edd30_cdemu_spec + struc_cdemu_spec.image_lba]
  1644                                  
  1645 00000299 663B16[E301]            	cmp edx, [emu_last_read]
  1646 0000029E 7414                    	je .emu_have_read
  1647 000002A0 668916[E301]            	mov [emu_last_read], edx
  1648                                  
  1649 000002A5 B90100                  	mov cx, 1
  1650 000002A8 06                      	push es
  1651 000002A9 FF36[D901]              	push word [emu_buf_seg]
  1652 000002AD 07                      	pop es
  1653 000002AE E82208                  	call read_atapi
  1654 000002B1 07                      	pop es
  1655 000002B2 7228                    	jc .emu_atapi_fail
  1656                                  
  1657                                  .emu_have_read:
  1658 000002B4 83E003                  	and ax, byte 3			; sector = sector % 4
  1659 000002B7 C1E009                  	shl ax, byte 9			; sector = sector * 512
  1660 000002BA 8B36[D701]              	mov si, [emu_buf_off]
  1661 000002BE 01C6                    	add si, ax
  1662 000002C0 89DF                    	mov di, bx
  1663                                  
  1664 000002C2 1E                      	push ds
  1665 000002C3 FF36[D901]              	push word [emu_buf_seg]
  1666 000002C7 1F                      	pop ds
  1667 000002C8 B90002                  	mov cx, 512
  1668 000002CB F3A4                    	rep movsb
  1669 000002CD 1F                      	pop ds
  1670                                  
  1671 000002CE 5F                      	pop di
  1672 000002CF 59                      	pop cx
  1673 000002D0 5B                      	pop bx
  1674 000002D1 58                      	pop ax
  1675 000002D2 81C30002                	add bx, 512
  1676 000002D6 40                      	inc ax
  1677 000002D7 E2AF                    	loop .emu_loop_read
  1678 000002D9 E9D600                  	jmp edd30_for_cdrom.success_out
  1679                                  
  1680                                  .emu_atapi_fail:
  1681 000002DC 5F                      	pop di
  1682 000002DD 59                      	pop cx
  1683 000002DE 5B                      	pop bx
  1684 000002DF 58                      	pop ax
  1685                                  
  1686                                  .emu_read_fail:
  1687 000002E0 B404                    	mov ah, 0x04
  1688 000002E2 E9D700                  	jmp edd30_for_cdrom.fail_out
  1689                                  
  1690                                  
  1691                                  ;=============================================================================
  1692                                  
  1693                                  edd30_for_cdrom:
  1694                                  	; Stack layout:
  1695                                          ;   +8  INT flags
  1696                                          ;   +6  INT CS
  1697                                          ;   +4  INT IP
  1698                                          ;   +2  AX
  1699                                          ; BP+0 BP
  1700                                  	;   -2 ax
  1701                                  	;   -4 cx
  1702                                  	;   -6 dx
  1703                                  	;   -8 bx
  1704                                  	;   -10 sp
  1705                                  	;   -12 bp
  1706                                  	;   -14 si
  1707                                  	;   -16 di
  1708                                  	;   -18 ds
  1709                                  	;   -20 es
  1710                                  	;   -24 edx
  1711 000002E5 60                      	pusha
  1712 000002E6 1E                      	push ds
  1713 000002E7 06                      	push es
  1714 000002E8 6652                    	push edx
  1715 000002EA 0E                      	push cs
  1716 000002EB 1F                      	pop ds
  1717                                  
  1718 000002EC 50                      	push ax
  1719 000002ED 0FB6C2                  	movzx ax, dl
  1720 000002F0 2CE0                    	sub al, MIN_CDROM_ID 
  1721 000002F2 E8BF06                  	call select_atapi
  1722 000002F5 58                      	pop ax
  1723                                  
  1724 000002F6 7305                    	jnc .sel_atapi_ok
  1725 000002F8 B4AA                    	mov ah, 0xaa
  1726 000002FA E9BF00                  	jmp .fail_out
  1727                                  
  1728                                  .sel_atapi_ok:
  1729 000002FD B91100                  	mov cx, (edd30_act_table.end_of_table - edd30_act_table)
  1730 00000300 31DB                    	xor bx, bx
  1731                                  
  1732                                  .loop_search:
  1733 00000302 38A7[BA05]              	cmp [edd30_act_table + bx], ah
  1734 00000306 7406                    	je .found_act
  1735 00000308 43                      	inc bx
  1736 00000309 E2F7                    	loop .loop_search
  1737 0000030B E9AC00                  	jmp .invalid_cmd
  1738                                  
  1739                                  .found_act:
  1740 0000030E C1E301                  	shl bx, byte 1
  1741 00000311 FFA7[CB05]              	jmp [edd30_jmp_table + bx]
  1742                                  
  1743                                  ;==================================
  1744                                  .init_disk_emu_and_boot:
  1745 00000315 E8D501                  	call edd30_init_disk_emu
  1746 00000318 0F82A000                	jc near .fail_out
  1747                                  
  1748 0000031C A1[F401]                	mov ax, [edd30_cdemu_spec + struc_cdemu_spec.load_seg]
  1749 0000031F 8EC0                    	mov es, ax
  1750 00000321 31FF                    	xor di, di
  1751 00000323 8B0E[F601]              	mov cx, [edd30_cdemu_spec + struc_cdemu_spec.sect_count]
  1752 00000327 83C103                  	add cx, 3		; convert virtual sect count
  1753 0000032A C1E902                  	shr cx, 2		; to cdrom sect count
  1754 0000032D 668B16[EC01]            	mov edx, [edd30_cdemu_spec + struc_cdemu_spec.image_lba]
  1755 00000332 E89E07                  	call read_atapi
  1756 00000335 7305                    	jnc .emu_boot_read_ok
  1757 00000337 B404                    	mov ah, 0x04
  1758 00000339 E98000                  	jmp .fail_out
  1759                                  
  1760                                  .emu_boot_read_ok:
  1761                                  
  1762 0000033C BE[0400]                	mov si, copyright_msg
  1763 0000033F E85102                  	call draw_string_tty
  1764                                  
  1765 00000342 E8A802                  	call read_bios_time
  1766 00000345 89C2                    	mov dx, ax
  1767 00000347 83C224                  	add dx, byte 18*2
  1768                                  
  1769 0000034A FB                      	sti
  1770                                  .loop_delay:
  1771 0000034B E89F02                  	call read_bios_time
  1772 0000034E 39C2                    	cmp dx, ax
  1773 00000350 77F9                    	ja .loop_delay
  1774 00000352 FA                      	cli
  1775                                  
  1776 00000353 8A16[EA01]              	mov dl, [edd30_cdemu_spec + struc_cdemu_spec.emu_drvid]
  1777 00000357 8856FA                  	mov [bp-6], dl		; set the driver id to dl
  1778 0000035A 8CC0                    	mov ax, es
  1779 0000035C C1E004                  	shl ax, byte 4
  1780 0000035F 894604                  	mov [bp+4], ax		; set new ip
  1781 00000362 31C0                    	xor ax, ax
  1782 00000364 894606                  	mov [bp+6], ax		; set new cs
  1783 00000367 894600                  	mov [bp], ax		; clear bp 
  1784 0000036A B855AA                  	mov ax, 0xaa55
  1785 0000036D 894602                  	mov [bp+2], ax
  1786 00000370 EB42                    	jmp short .success_out_no_ah
  1787                                  
  1788                                  .init_disk_emu:
  1789 00000372 E87801                  	call edd30_init_disk_emu
  1790 00000375 733B                    	jnc .success_out
  1791 00000377 EB43                    	jmp short .fail_out
  1792                                  
  1793                                  .return_boot_catalog:
  1794 00000379 E8FD00                  	call edd30_return_boot_catalog
  1795 0000037C 7334                    	jnc .success_out
  1796 0000037E EB3C                    	jmp short .fail_out
  1797                                  
  1798                                  .get_drv_param:
  1799 00000380 E88000                  	call edd30_get_cdrom_param
  1800 00000383 732D                    	jnc .success_out
  1801 00000385 EB33                    	jmp short .invalid_cmd
  1802                                  
  1803                                  .ext_write:
  1804 00000387 B403                    	mov ah, 0x03
  1805 00000389 EB31                    	jmp short .fail_out
  1806                                  
  1807                                  .ext_read:
  1808 0000038B E84100                  	call edd30_read_cdrom
  1809 0000038E 7322                    	jnc .success_out
  1810 00000390 EB2A                    	jmp short .fail_out
  1811                                  
  1812                                  .install_check:
  1813 00000392 C746F855AA              	mov word [bp-8], 0xaa55	; bx=0xaa55
  1814                                  
  1815                                  %ifdef EDD_3_0
  1816                                  	mov ah, 0x30		; ax=0x30  edd-3.0
  1817                                  %else
  1818 00000397 B421                    	mov ah, 0x21		; ax=0x21  edd-2.1
  1819                                  %endif
  1820                                  
  1821 00000399 C646FC07                	mov byte [bp-4], 0x07	; cx= 0x01 | 0x04, ext disk access and edd ok
  1822 0000039D EB15                    	jmp short .success_out_no_ah
  1823                                  
  1824                                  .get_disk_type:
  1825 0000039F B402                    	mov ah, 0x02
  1826 000003A1 EB11                    	jmp short .success_out_no_ah
  1827                                  
  1828                                  .get_last_stat:
  1829 000003A3 8A26[E701]              	mov ah, [int13_last_stat]
  1830 000003A7 EB0B                    	jmp short .success_out_no_ah
  1831                                  
  1832                                  .reset:
  1833 000003A9 E86105                  	call reg_reset
  1834 000003AC A1[0000]                	mov ax, [atapi_cur_dev]
  1835 000003AF E80A06                  	call select_atapi_force
  1836                                  
  1837                                  .success_out:
  1838 000003B2 30E4                    	xor ah,ah
  1839                                  
  1840                                  .success_out_no_ah:
  1841 000003B4 806608FE                	and byte [bp+8],0xfe
  1842 000003B8 EB06                    	jmp short .done
  1843                                  
  1844                                  .invalid_cmd:
  1845 000003BA B401                    	mov ah, 0x01
  1846                                  
  1847                                  .fail_out:
  1848 000003BC 804E0801                	or byte [bp+8],1
  1849                                  
  1850                                  .done:
  1851 000003C0 8826[E701]              	mov [int13_last_stat],ah
  1852 000003C4 886603                  	mov [bp+3], ah
  1853 000003C7 665A                    	pop edx
  1854 000003C9 07                      	pop es
  1855 000003CA 1F                      	pop ds
  1856 000003CB 61                      	popa
  1857 000003CC 5D                      	pop bp
  1858 000003CD 58                      	pop ax
  1859 000003CE CF                      	iret
  1860                                  
  1861                                  ;=============================================================================
  1862                                  edd30_read_cdrom:
  1863                                  ;return cf=0 success, cf=1 fail, ah = fail code
  1864 000003CF E87906                  	call test_atapi_ready
  1865 000003D2 7304                    	jnc .atapi_ok
  1866 000003D4 B4AA                    	mov ah, 0xaa
  1867 000003D6 EB0F                    	jmp short .fail_out
  1868                                  
  1869                                  .atapi_ok:
  1870 000003D8 1E                      	push ds
  1871 000003D9 8B46EE                  	mov ax, [bp-18]		; restore ds
  1872 000003DC 8ED8                    	mov ds, ax
  1873 000003DE 803C10                  	cmp byte [si], 16
  1874 000003E1 7406                    	je short .packet_ok
  1875 000003E3 1F                      	pop ds
  1876 000003E4 0F95C4                  	setne ah
  1877                                  .fail_out:
  1878 000003E7 F9                      	stc
  1879 000003E8 C3                      	ret
  1880                                  
  1881                                  .packet_ok:
  1882 000003E9 8B5C06                  	mov bx, [si + struc_int13ext.buf_addr_seg]
  1883 000003EC 8B4C02                  	mov cx, [si + struc_int13ext.blk_count]
  1884 000003EF 668B5408                	mov edx, [si + struc_int13ext.blk_num_low1]
  1885 000003F3 8B7C04                  	mov di, [si + struc_int13ext.buf_addr_off]
  1886 000003F6 1F                      	pop ds
  1887 000003F7 8EC3                    	mov es, bx
  1888 000003F9 E8D706                  	call read_atapi
  1889 000003FC 7201                    	jc .read_fail
  1890 000003FE C3                      	ret
  1891                                  
  1892                                  .read_fail:
  1893 000003FF B40C                    	mov ah, 0x0c
  1894 00000401 F9                      	stc
  1895 00000402 C3                      	ret
  1896                                  
  1897                                  ;=============================================================================
  1898                                  edd30_get_cdrom_param:
  1899                                  ;return cf =0 ok, cf =1 fail
  1900 00000403 1E                      	push ds
  1901 00000404 8B46EE                  	mov ax, [bp-18]		; restore ds
  1902 00000407 8ED8                    	mov ds, ax
  1903 00000409 8B04                    	mov ax, [si]
  1904 0000040B 83F81A                  	cmp ax, byte 26
  1905 0000040E 7306                    	jae .packet_ok
  1906 00000410 1F                      	pop ds
  1907 00000411 0F92C4                  	setb ah
  1908                                  .fail_out:
  1909 00000414 F9                      	stc
  1910 00000415 C3                      	ret
  1911                                  
  1912                                  .packet_ok:
  1913                                  
  1914                                  %ifdef EDD_3_0
  1915                                  	cmp ax, byte 66
  1916                                  	jb .below_3_0
  1917                                  	mov ax, 66
  1918                                  	jmp .set_packet_size
  1919                                  .below_3_0:
  1920                                  %endif
  1921                                  
  1922 00000416 83F81E                  	cmp ax, byte 30
  1923 00000419 7205                    	jb .below_2_0
  1924 0000041B B81E00                  	mov ax, 30
  1925 0000041E EB03                    	jmp .set_packet_size
  1926                                  .below_2_0:
  1927 00000420 B81A00                  	mov ax, 26
  1928                                  .set_packet_size:
  1929 00000423 8904                    	mov [si], ax
  1930 00000425 C744027400              	mov word [si+ struc_extparam.flags], 0x74  ; removable, lock, chg line
  1931 0000042A C744180008              	mov word [si+ struc_extparam.bytes_per_sect], CDSECTOR_SIZE
  1932 0000042F 31DB                    	xor bx, bx
  1933 00000431 4B                      	dec bx
  1934 00000432 895C04                  	mov [si+ struc_extparam.cylinders], bx
  1935 00000435 895C08                  	mov [si+ struc_extparam.heads], bx
  1936 00000438 895C0C                  	mov [si+ struc_extparam.sectors], bx
  1937                                  
  1938                                  %ifdef EDD_3_0
  1939                                  	cmp ax, byte 66
  1940                                  	jb .no_dpi
  1941                                  	mov word [si+ struc_extparam.dpi_key], 0xBEDD  ; dpi signature
  1942                                  	mov word [si+ struc_extparam.dpi_length], 0x24 ; dpi length
  1943                                  	mov dword [si+ struc_extparam.host_bus_type], 'ISA'
  1944                                  	mov dword [si+ struc_extparam.interface_type], 'ATAP'
  1945                                  	mov word [si+ struc_extparam.interface_type+4], 'I'
  1946                                  
  1947                                  	mov ax, [cs:atapi_cur_dev]
  1948                                  	call get_atapi_base_io
  1949                                  	mov [si+ struc_extparam.device_path], cx
  1950                                  	mov [si+ struc_extparam.interface_path], bx
  1951                                  
  1952                                  	push si
  1953                                  	add si, struc_extparam.dpi_key
  1954                                  	mov cx, struc_extparam.checksum - struc_extparam.dpi_key
  1955                                  	call edd30_checksum
  1956                                  	mov [si], ah
  1957                                  	pop si
  1958                                  .no_dpi:
  1959                                  %endif
  1960                                  
  1961 0000043B 83F81E                  	cmp ax, byte 30
  1962 0000043E 7208                    	jb .no_dpte
  1963 00000440 C7441A[FB01]                    mov word [si+ struc_extparam.dpte_addr], atapi_dpte_buffer
  1964 00000445 8C4C1C                          mov word [si+ struc_extparam.dpte_addr+2], cs
  1965                                  
  1966                                  .no_dpte:
  1967 00000448 1F                      	pop ds
  1968 00000449 A1[0000]                        mov ax, [atapi_cur_dev]
  1969 0000044C E86906                          call get_atapi_base_io
  1970 0000044F BE[FB01]                	mov si, atapi_dpte_buffer
  1971 00000452 891C                            mov [si], bx
  1972 00000454 895402                          mov [si+2], dx
  1973 00000457 B0E0                            mov al, 0xe0
  1974 00000459 C0E104                          shl cl, 4
  1975 0000045C 08C8                            or al, cl
  1976 0000045E 884404                          mov [si+struc_dpte.flags], al  ; LBA enable, bit 4 = slave drv
  1977 00000461 C6440A60                	mov byte [si+struc_dpte.bios_spec], 0x60 ;ATAPI and removable
  1978 00000465 B90F00                  	mov cx, struc_dpte.checksum
  1979 00000468 E80400                  	call edd30_checksum
  1980 0000046B 8824                    	mov [si], ah
  1981 0000046D F8                      	clc
  1982 0000046E C3                      	ret
  1983                                  
  1984                                  edd30_checksum:
  1985 0000046F 30E4                    	xor ah, ah
  1986                                  
  1987                                  .loop_checksum:
  1988 00000471 AC                      	lodsb
  1989 00000472 00C4                    	add ah, al
  1990 00000474 E2FB                    	loop .loop_checksum
  1991 00000476 F6DC                    	neg ah
  1992 00000478 C3                      	ret
  1993                                  	
  1994                                  ;=============================================================================
  1995                                  edd30_return_boot_catalog:
  1996                                  ;return cf =0 ok, cf =1 fail
  1997 00000479 E8CF05                  	call test_atapi_ready
  1998 0000047C 7304                    	jnc .atapi_ok
  1999 0000047E B4AA                    	mov ah, 0xaa
  2000 00000480 EB0F                    	jmp short .fail_out
  2001                                  
  2002                                  .atapi_ok:
  2003 00000482 1E                      	push ds
  2004 00000483 8B46EE                  	mov ax, [bp-18]		; restore ds
  2005 00000486 8ED8                    	mov ds, ax
  2006 00000488 803C08                  	cmp byte [si], 8
  2007 0000048B 1F                      	pop ds
  2008 0000048C 7305                    	jae .packet_ok
  2009 0000048E 0F92C4                  	setb ah
  2010                                  
  2011                                  .fail_out:
  2012 00000491 F9                      	stc
  2013 00000492 C3                      	ret
  2014                                  
  2015                                  .packet_ok:
  2016 00000493 0E                      	push cs
  2017 00000494 07                      	pop es
  2018 00000495 BF[0B02]                	mov di, edd30_disk_buffer
  2019 00000498 31C9                    	xor cx, cx
  2020 0000049A 41                      	inc cx
  2021 0000049B BA1100                  	mov dx, 0x11
  2022 0000049E 660FB7D2                	movzx edx,dx
  2023 000004A2 E82E06                  	call read_atapi			; read boot record volume descriptor
  2024 000004A5 7242                    	jc .read_fail
  2025 000004A7 803D00                  	cmp byte [di], 0
  2026 000004AA 753D                    	jne .non_bootable
  2027 000004AC 66817D07454C2054        	cmp dword [di+7], 'EL T'
  2028 000004B4 7533                    	jne .non_bootable
  2029 000004B6 66817D0B4F524954        	cmp dword [di+11], 'ORIT'
  2030 000004BE 7529                    	jne .non_bootable
  2031                                  
  2032 000004C0 668B5547                	mov edx, [di+0x47]
  2033 000004C4 6609D2                  	or edx, edx
  2034 000004C7 7420                    	jz .non_bootable
  2035                                  
  2036 000004C9 1E                      	push ds
  2037 000004CA 8B46EE                  	mov ax, [bp-18]		; restore ds
  2038 000004CD 8ED8                    	mov ds, ax
  2039 000004CF 660FB74406              	movzx eax, word [si + struc_cdbc_cmd.begnning_sect] ; begnning sector
  2040 000004D4 6601C2                  	add edx, eax
  2041                                  
  2042 000004D7 8A4C01                  	mov cl, [si + struc_cdbc_cmd.sector_count]
  2043 000004DA 8B5C04                  	mov bx, [si + struc_cdbc_cmd.buf_addr_seg]
  2044 000004DD 8B7C02                  	mov di, [si + struc_cdbc_cmd.buf_addr_off]
  2045 000004E0 1F                      	pop ds
  2046 000004E1 8EC3                    	mov es, bx
  2047 000004E3 E8ED05                  	call read_atapi
  2048 000004E6 7201                    	jc .read_fail
  2049 000004E8 C3                      	ret
  2050                                  
  2051                                  .non_bootable:
  2052                                  .read_fail:
  2053 000004E9 B40C                    	mov ah, 0x0c
  2054 000004EB F9                      	stc
  2055 000004EC C3                      	ret
  2056                                  
  2057                                  ;=============================================================================
  2058                                  edd30_init_disk_emu:
  2059 000004ED E85B05                  	call test_atapi_ready
  2060 000004F0 7304                    	jnc .atapi_ok
  2061 000004F2 B4AA                    	mov ah, 0xaa
  2062 000004F4 EB0F                    	jmp short .fail_out
  2063                                  
  2064                                  .atapi_ok:
  2065 000004F6 1E                      	push ds
  2066 000004F7 8B46EE                  	mov ax, [bp-18]		; restore ds
  2067 000004FA 8ED8                    	mov ds, ax
  2068 000004FC 803C13                  	cmp byte [si], SIZE_OF_CDEMU_SPEC
  2069 000004FF 7306                    	jae .packet_ok
  2070 00000501 1F                      	pop ds
  2071                                  
  2072                                  .invalid_cmd:
  2073 00000502 0F92C4                  	setb ah
  2074                                  .fail_out:
  2075 00000505 F9                      	stc
  2076 00000506 C3                      	ret
  2077                                  
  2078                                  .packet_ok:
  2079 00000507 06                      	push es
  2080 00000508 0E                      	push cs
  2081 00000509 07                      	pop es
  2082 0000050A BF[E801]                	mov di, edd30_cdemu_spec
  2083 0000050D 57                      	push di
  2084 0000050E B91300                  	mov cx, SIZE_OF_CDEMU_SPEC
  2085 00000511 F3A4                    	rep movsb
  2086 00000513 5E                      	pop si
  2087 00000514 07                      	pop es
  2088 00000515 1F                      	pop ds
  2089                                  
  2090 00000516 8816[DB01]              	mov [emu_cdrom_id], dl
  2091 0000051A 8A4402                  	mov al, [si + struc_cdemu_spec.emu_drvid]
  2092 0000051D 8A4401                  	mov al, [si + struc_cdemu_spec.media_type]
  2093 00000520 240F                    	and al, 0x0f
  2094 00000522 3C04                    	cmp al, 4
  2095 00000524 73DC                    	jae .invalid_cmd
  2096 00000526 D0E0                    	shl al, 1
  2097 00000528 A2[DC01]                	mov [emu_disk_type], al
  2098 0000052B 8B440A                  	mov ax, [si + struc_cdemu_spec.user_bufseg]
  2099 0000052E 09C0                    	or ax, ax
  2100 00000530 750C                    	jnz .has_user_buf
  2101 00000532 8C0E[D901]              	mov [emu_buf_seg], cs
  2102 00000536 B8[0B02]                	mov ax, edd30_disk_buffer
  2103 00000539 A3[D701]                	mov [emu_buf_off], ax
  2104 0000053C EB08                    	jmp short .cont
  2105                                  
  2106                                  .has_user_buf:
  2107 0000053E A3[D901]                	mov [emu_buf_seg], ax
  2108 00000541 31C0                    	xor ax, ax
  2109 00000543 A3[D701]                	mov [emu_buf_off], ax
  2110                                  .cont:
  2111 00000546 8B440C                  	mov ax, [si + struc_cdemu_spec.load_seg]
  2112 00000549 09C0                    	or ax, ax
  2113 0000054B 7505                    	jnz .has_load_seg
  2114 0000054D C7440CC007              	mov word [si + struc_cdemu_spec.load_seg], 0x07c0
  2115                                  
  2116                                  .has_load_seg:
  2117 00000552 8A6411                  	mov ah, [si + struc_cdemu_spec.sectors]
  2118 00000555 88E3                    	mov bl, ah
  2119 00000557 C0E406                  	shl ah, byte 6
  2120 0000055A 8A4410                  	mov al, [si + struc_cdemu_spec.cylinders]
  2121 0000055D A3[DD01]                	mov [emu_cyl], ax
  2122 00000560 83E33F                  	and bx, byte 63
  2123 00000563 891E[DF01]              	mov [emu_sec], bx
  2124 00000567 8A5C12                  	mov bl, [si + struc_cdemu_spec.heads]
  2125 0000056A 891E[E101]              	mov [emu_head], bx
  2126                                  
  2127                                  %if 1
  2128 0000056E 803E[DC01]00            	cmp byte [emu_disk_type], 0
  2129 00000573 741C                    	jz .no_disk_swap
  2130 00000575 807C0200                	cmp byte [si + struc_cdemu_spec.emu_drvid], 0
  2131 00000579 7516                    	jnz .no_disk_swap
  2132 0000057B 31C0                    	xor ax, ax
  2133 0000057D A3[D301]                	mov [drive_map+2], ax
  2134 00000580 FEC0                    	inc al
  2135 00000582 A3[D101]                	mov [drive_map], ax		; install the swap drive map
  2136                                  
  2137                                  ;increase the floppy number
  2138 00000585 06                      	push es
  2139 00000586 6A40                    	push word 0x0040
  2140 00000588 07                      	pop es
  2141 00000589 BB1000                  	mov bx, 0x0010
  2142 0000058C 26800F41                	or byte [es:bx], 0x41
  2143 00000590 07                      	pop es
  2144                                  
  2145                                  %endif
  2146                                  .no_disk_swap:
  2147                                  
  2148 00000591 F8                      	clc
  2149 00000592 C3                      	ret
  2150                                  
  2151                                  ;=============================================================================
  2152                                  ;draw_string_tty ---- Draw a string ending by zero ( tty mode )
  2153                                  ;input:
  2154                                  ;      ds:si -> string
  2155                                  ;output:
  2156                                  ;      none
  2157                                  ;=============================================================================
  2158                                  draw_string_tty:
  2159                                  .draw1:
  2160 00000593 AC                              lodsb
  2161 00000594 08C0                            or al, al
  2162 00000596 7409                            jz .end
  2163 00000598 BB0700                          mov bx,7
  2164 0000059B B40E                            mov ah,0x0e
  2165 0000059D CD10                            int 0x10
  2166 0000059F EBF2                            jmp short .draw1
  2167                                  .end:
  2168 000005A1 C3                              ret
  2169                                  
  2170                                  
  2171                                  cdemu_act_table:
  2172 000005A2 000102040815164B        	db 0x0, 0x1, 0x2, 0x4, 0x8, 0x15, 0x16, 0x4b
  2173                                  .end_of_table
  2174                                  
  2175                                  cdemu_jmp_table:
  2176 000005AA [B203]                  	dw edd30_for_cdrom.success_out		; 0 reset 
  2177 000005AC [A303]                  	dw edd30_for_cdrom.get_last_stat	; 1 get last state
  2178 000005AE [3902]                  	dw cdemu_int13h.emu_read		; 2 read
  2179 000005B0 [3902]                  	dw cdemu_int13h.emu_read		; 4 verify
  2180 000005B2 [0F02]                  	dw cdemu_int13h.emu_get_param		; 8 get param
  2181 000005B4 [3402]                  	dw cdemu_int13h.emu_get_type		; 0x15 get type
  2182 000005B6 [B203]                  	dw edd30_for_cdrom.success_out		; 0x16 detect disk change
  2183 000005B8 [F501]                  	dw cdemu_int13h.stop_disk_emu		; 0x4b stop disk emu
  2184                                  .end_of_table
  2185                                  
  2186                                  
  2187                                  edd30_act_table:
  2188 000005BA 000115414243444546-     	db 0x0, 0x1, 0x15, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4D, 0x4A, 0x4C, 0x4E, 0x4B
  2189 000005C3 4748494D4A4C4E4B   
  2190                                  .end_of_table
  2191                                  
  2192                                  edd30_jmp_table:
  2193 000005CB [A903]                  	dw edd30_for_cdrom.reset
  2194 000005CD [A303]                  	dw edd30_for_cdrom.get_last_stat
  2195 000005CF [9F03]                  	dw edd30_for_cdrom.get_disk_type
  2196 000005D1 [9203]                  	dw edd30_for_cdrom.install_check
  2197 000005D3 [8B03]                  	dw edd30_for_cdrom.ext_read
  2198 000005D5 [8703]                  	dw edd30_for_cdrom.ext_write
  2199 000005D7 [8B03]                  	dw edd30_for_cdrom.ext_read
  2200 000005D9 [B203]                  	dw edd30_for_cdrom.success_out		; lock / unlock
  2201 000005DB [B203]                  	dw edd30_for_cdrom.success_out		; eject
  2202 000005DD [B203]                  	dw edd30_for_cdrom.success_out		; extended seek
  2203 000005DF [8003]                  	dw edd30_for_cdrom.get_drv_param
  2204 000005E1 [B203]                  	dw edd30_for_cdrom.success_out		; check media change
  2205 000005E3 [7903]                  	dw edd30_for_cdrom.return_boot_catalog
  2206 000005E5 [7203]                  	dw edd30_for_cdrom.init_disk_emu
  2207 000005E7 [1503]                  	dw edd30_for_cdrom.init_disk_emu_and_boot
  2208 000005E9 [B203]                  	dw edd30_for_cdrom.success_out		;set hardware configuration
  2209 000005EB [F501]                  	dw cdemu_int13h.stop_disk_emu		; 0x4b stop disk emu
  2210                                  .end_of_table
  2211                                  
  2212                                  
  2213                                  ;=============================================================================
  2214                                  ; IDE ATAPI driver
  2215                                  ;=============================================================================
  2216                                  
  2217                                  ;*************************************
  2218                                  ;timer relate functions
  2219                                  ;*************************************
  2220                                  %ifdef SLOW_ATAPI_DEVICE
  2221                                  proc	init_timer
  2222                                  	call read_bios_time
  2223                                  	mov bx, ax
  2224                                  	xor ecx, ecx
  2225                                  	repeat
  2226                                  		call read_bios_time
  2227                                  		inc ecx
  2228                                  	until {cmp bx, ax}, ne
  2229                                  	mov eax, ecx
  2230                                  	xor edx, edx
  2231                                  	xor ecx, ecx
  2232                                  	mov cx, DELAY_MSECS
  2233                                  	div ecx
  2234                                  	mov [delay_repeat_num], eax
  2235                                  endp
  2236                                  %endif
  2237                                  
  2238                                  proc	read_bios_time
  2239                              <1> GLOBAL %1
  2240                              <1> %1:
  2241                              <1> con_push proc
  2242                              <2>  %assign __lastlevel__ __level__
  2243                              <2>  %assign __level__ __level__ + 1
  2244                              <2>  %if __return__ > 0
  2245                              <2>  %assign con_return 1
  2246                              <2>  %else
  2247                              <2>  %assign con_return 0
  2248                              <2>  %endif
  2249                              <2> 
  2250                              <2>  %if __cont__ > 0
  2251                              <2>  %assign con_cont 1
  2252                              <2>  %else
  2253                              <2>  %assign con_cont 0
  2254                              <2>  %endif
  2255                              <2>  %if __break__ > 0
  2256                              <2>  %assign con_break 1
  2257                              <2>  %else
  2258                              <2>  %assign con_break 0
  2259                              <2>  %endif
  2260                              <2> 
  2261                              <2>  %ifidn %1,proc
  2262                              <2>  %assign con_return 0
  2263                              <2>  %elifidn %1,forcx
  2264                              <2>  %assign con_break 0
  2265                              <2>  %elifidn %1,repeat
  2266                              <2>  %assign con_cont 0
  2267                              <2>  %assign con_break 0
  2268                              <2>  %elifidn %1,while
  2269                              <2>  %assign con_cont 0
  2270                              <2>  %assign con_break 0
  2271                              <2>  %endif
  2272                              <2> 
  2273                              <2>  %if __cndblock__ == 1
  2274                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  2275                              <2>  %endif
  2276                              <2> 
  2277                              <2>  %push %1
  2278                              <2>  %if con_return
  2279                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  2280                              <2>  %endif
  2281                              <2>  %if con_break
  2282                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  2283                              <2>  %endif
  2284                              <2>  %if con_cont
  2285                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  2286                              <2>  %endif
  2287                              <2> 
  2288                              <2>  %ifidn %1,andblock
  2289                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  2290                              <2>  %elifidn %1,orblock
  2291                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  2292                              <2>  %endif
  2293                              <1> %assign __return__ __return__ + 1
  2294                              <1> %assign __have_frame__ 0
  2295                              <1> %assign %$have_local 0
  2296                              <1> %assign %$have_save 0
  2297                              <1> %assign __save_all__ 0
  2298                              <1> %assign %$local_args 0
  2299                              <1> %assign %$proc_args 0
  2300                              <1> %assign __save_args__ 0
  2301                              <1> %if %0 > 1
  2302                              <1>  %assign args %0 - 1
  2303                              <1>  %assign %$bp_off 4
  2304                              <1>  %assign i 0
  2305                              <1>  %rotate 1
  2306                              <1>  %ifidn %1,withlocal
  2307                              <1>  %assign %$have_local 1
  2308                              <1>  %assign args args -1
  2309                              <1>  %rotate 1
  2310                              <1>  %endif
  2311                              <1>  %assign %$proc_args args
  2312                              <1>  %rep args
  2313                              <1> 
  2314                              <1>  %%inputarg__%1 EQU %$bp_off
  2315                              <1>  %undef .%1
  2316                              <1>  %define .%1 %%inputarg__%1+bp
  2317                              <1>  cat_define %$proc_argv ,i,%1
  2318                              <1>  %assign %$bp_off %$bp_off + 2
  2319                              <1>  %assign i i+1
  2320                              <1>  %rotate 1
  2321                              <1>  %endrep
  2322                              <1>  %if %$have_local==0
  2323                              <1>  enter 0,0
  2324                              <1>  %assign __have_frame__ 1
  2325                              <1>  %endif
  2326                              <1> %endif
  2327                                  ;	return dx:ax as the long time
  2328                                  	save ds
  2329                              <1> %ifctx proc
  2330                              <1>  %if %$have_local == 1
  2331                              <1>  %error "`save' must after `local'"
  2332                              <1>  %endif
  2333                              <1> 
  2334                              <1>  %ifidn all,%1
  2335                              <1>  %assign __save_all__ 1
  2336                              <1>  %if %0 > 1
  2337                              <1>  %ifidn frame,%2
  2338                              <1>  %if __have_frame__ == 0
  2339                              <1>  enter 0,0
  2340                              <1>  %assign __have_frame__ 1
  2341                              <1>  %assign local_off 0
  2342                              <1>  %endif
  2343                              <1>  %endif
  2344                              <1>  %endif
  2345                              <1>  pusha
  2346                              <1>  %if __have_frame__ == 1
  2347                              <1>  %undef __AX
  2348                              <1>  %undef __BX
  2349                              <1>  %undef __CX
  2350                              <1>  %undef __DX
  2351                              <1>  %undef __SI
  2352                              <1>  %undef __DI
  2353                              <1>  %idefine __AX bp-local_off - 2
  2354                              <1>  %idefine __CX bp-local_off - 4
  2355                              <1>  %idefine __DX bp-local_off - 6
  2356                              <1>  %idefine __BX bp-local_off - 8
  2357                              <1> 
  2358                              <1> 
  2359                              <1>  %idefine __SI bp-local_off - 14
  2360                              <1>  %idefine __DI bp-local_off - 16
  2361                              <1>  %endif
  2362                              <1>  %elifidn alld,%1
  2363                              <1>  %assign __save_all__ 2
  2364                              <1>  %if %0 > 1
  2365                              <1>  %ifidn frame,%2
  2366                              <1>  %if __have_frame__ == 0
  2367                              <1>  enter 0,0
  2368                              <1>  %assign __have_frame__ 1
  2369                              <1>  %assign local_off 0
  2370                              <1>  %endif
  2371                              <1>  %endif
  2372                              <1>  %endif
  2373                              <1>  pushad
  2374                              <1>  %if __have_frame__ == 1
  2375                              <1>  %undef __EAX
  2376                              <1>  %undef __EBX
  2377                              <1>  %undef __ECX
  2378                              <1>  %undef __EDX
  2379                              <1>  %undef __ESI
  2380                              <1>  %undef __EDI
  2381                              <1>  %idefine __EAX bp-local_off - 4
  2382                              <1>  %idefine __ECX bp-local_off - 8
  2383                              <1>  %idefine __EDX bp-local_off - 12
  2384                              <1>  %idefine __EBX bp-local_off - 16
  2385                              <1> 
  2386                              <1> 
  2387                              <1>  %idefine __ESI bp-local_off - 18
  2388                              <1>  %idefine __EDI bp-local_off - 32
  2389                              <1>  %endif
  2390                              <1> 
  2391                              <1>  %else
  2392                              <1>  %assign __save_args__ %0
  2393                              <1>  %assign __save_all__ 0
  2394                              <1>  %assign i %0
  2395                              <1>  %rep %0
  2396                              <1>  push %1
  2397                              <1>  cat_define %$save_argv ,i,%1
  2398                              <1>  %rotate 1
  2399                              <1>  %assign i i - 1
  2400                              <1>  %endrep
  2401 000005ED 1E                  <2>  push %1
  2402                              <2>  cat_define %$save_argv ,i,%1
  2403                              <3> %define %1%2 %3
  2404                              <2>  %rotate 1
  2405                              <2>  %assign i i - 1
  2406                              <1>  %endif
  2407                              <1> %else
  2408                              <1>  %error "`save' must after `proc'"
  2409                              <1> %endif
  2410 000005EE 29C0                    	sub ax,ax
  2411 000005F0 8ED8                    	mov ds,ax
  2412                                  	repeat
  2413                              <1> con_push repeat
  2414                              <2>  %assign __lastlevel__ __level__
  2415                              <2>  %assign __level__ __level__ + 1
  2416                              <2>  %if __return__ > 0
  2417                              <2>  %assign con_return 1
  2418                              <2>  %else
  2419                              <2>  %assign con_return 0
  2420                              <2>  %endif
  2421                              <2> 
  2422                              <2>  %if __cont__ > 0
  2423                              <2>  %assign con_cont 1
  2424                              <2>  %else
  2425                              <2>  %assign con_cont 0
  2426                              <2>  %endif
  2427                              <2>  %if __break__ > 0
  2428                              <2>  %assign con_break 1
  2429                              <2>  %else
  2430                              <2>  %assign con_break 0
  2431                              <2>  %endif
  2432                              <2> 
  2433                              <2>  %ifidn %1,proc
  2434                              <2>  %assign con_return 0
  2435                              <2>  %elifidn %1,forcx
  2436                              <2>  %assign con_break 0
  2437                              <2>  %elifidn %1,repeat
  2438                              <2>  %assign con_cont 0
  2439                              <2>  %assign con_break 0
  2440                              <2>  %elifidn %1,while
  2441                              <2>  %assign con_cont 0
  2442                              <2>  %assign con_break 0
  2443                              <2>  %endif
  2444                              <2> 
  2445                              <2>  %if __cndblock__ == 1
  2446                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  2447                              <2>  %endif
  2448                              <2> 
  2449                              <2>  %push %1
  2450                              <2>  %if con_return
  2451                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  2452                              <3> %define %1%2 %3%4
  2453                              <2>  %endif
  2454                              <2>  %if con_break
  2455                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  2456                              <2>  %endif
  2457                              <2>  %if con_cont
  2458                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  2459                              <2>  %endif
  2460                              <2> 
  2461                              <2>  %ifidn %1,andblock
  2462                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  2463                              <2>  %elifidn %1,orblock
  2464                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  2465                              <2>  %endif
  2466                              <1> %assign __break__ __break__ + 1
  2467                              <1> %assign __cont__ __cont__ + 1
  2468                              <1> %$begin:
  2469                              <1> cat_lable %$cont,__level__
  2470                              <2> %1%2:
  2471 000005F2 66A16C04                		mov eax,[0x46c]
  2472                                  	until {cmp eax,[0x46c]}, e
  2473                              <1>  %assign __near__ 0
  2474                              <1>  %assign __argc__ %0
  2475                              <1>  %ifidn near,%1
  2476                              <1>  %assign __near__ 1
  2477                              <1>  %rotate 1
  2478                              <1>  %assign __argc__ __argc__ -1
  2479                              <1>  %endif
  2480                              <1>  %rep __argc__ -1
  2481                              <1>  %1
  2482                              <1>  %rotate 1
  2483                              <1>  %endrep
  2484 000005F6 663B066C04          <2>  %1
  2485                              <2>  %rotate 1
  2486                              <1>  %ifctx repeat
  2487                              <1>  %if __near__ >0
  2488                              <1>  j%-1 near %$begin
  2489                              <1>  %else
  2490 000005FB 75F5                <1>  j%-1 %$begin
  2491                              <1>  %endif
  2492                              <1>  %$end:
  2493                              <1>  cat_lable %$break,__level__
  2494                              <2> %1%2:
  2495                              <1>  %else
  2496                              <1>  %error "expected `repeat' before `until'"
  2497                              <1>  %endif
  2498                              <1> con_pop
  2499                              <2>  %pop
  2500                              <2>  %assign __level__ __level__ - 1
  2501                              <1> %assign __break__ __break__ - 1
  2502                              <1> %assign __cont__ __cont__ - 1
  2503                                  endp
  2504                              <1> %ifnctx proc
  2505                              <1>  %error "expected `proc' before `endp'"
  2506                              <1> %endif
  2507                              <1>  cat_lable %$return,__level__
  2508                              <2> %1%2:
  2509                              <1>  %if __save_all__ ==1
  2510                              <1>  popa
  2511                              <1>  %elif __save_all__ == 2
  2512                              <1>  popad
  2513                              <1>  %elif __save_args__ > 0
  2514                              <1>  %assign i 1
  2515                              <1>  %rep __save_args__
  2516                              <1>  linecat pop, %$save_argv,i
  2517                              <1>  %assign i i+1
  2518                              <1>  %endrep
  2519                              <2>  linecat pop, %$save_argv,i
  2520 000005FD 1F                  <3>  %1 %2%3
  2521                              <2>  %assign i i+1
  2522                              <1>  %endif
  2523                              <1>  %if __have_frame__ > 0
  2524                              <1>  leave
  2525                              <1>  %endif
  2526                              <1> 
  2527                              <1>  %assign i 0
  2528                              <1>  %rep %$proc_args
  2529                              <1> 
  2530                              <1>  %assign i i+1
  2531                              <1>  %endrep
  2532                              <1> 
  2533                              <1>  %assign i 0
  2534                              <1>  %rep %$local_args
  2535                              <1> 
  2536                              <1>  %assign i i+1
  2537                              <1>  %endrep
  2538 000005FE C3                  <1>  ret
  2539                              <1>  con_pop
  2540                              <2>  %pop
  2541                              <2>  %assign __level__ __level__ - 1
  2542                              <1>  %assign __return__ __return__ - 1
  2543                                  
  2544                                  proc	set_timeout
  2545                              <1> GLOBAL %1
  2546                              <1> %1:
  2547                              <1> con_push proc
  2548                              <2>  %assign __lastlevel__ __level__
  2549                              <2>  %assign __level__ __level__ + 1
  2550                              <2>  %if __return__ > 0
  2551                              <2>  %assign con_return 1
  2552                              <2>  %else
  2553                              <2>  %assign con_return 0
  2554                              <2>  %endif
  2555                              <2> 
  2556                              <2>  %if __cont__ > 0
  2557                              <2>  %assign con_cont 1
  2558                              <2>  %else
  2559                              <2>  %assign con_cont 0
  2560                              <2>  %endif
  2561                              <2>  %if __break__ > 0
  2562                              <2>  %assign con_break 1
  2563                              <2>  %else
  2564                              <2>  %assign con_break 0
  2565                              <2>  %endif
  2566                              <2> 
  2567                              <2>  %ifidn %1,proc
  2568                              <2>  %assign con_return 0
  2569                              <2>  %elifidn %1,forcx
  2570                              <2>  %assign con_break 0
  2571                              <2>  %elifidn %1,repeat
  2572                              <2>  %assign con_cont 0
  2573                              <2>  %assign con_break 0
  2574                              <2>  %elifidn %1,while
  2575                              <2>  %assign con_cont 0
  2576                              <2>  %assign con_break 0
  2577                              <2>  %endif
  2578                              <2> 
  2579                              <2>  %if __cndblock__ == 1
  2580                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  2581                              <2>  %endif
  2582                              <2> 
  2583                              <2>  %push %1
  2584                              <2>  %if con_return
  2585                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  2586                              <2>  %endif
  2587                              <2>  %if con_break
  2588                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  2589                              <2>  %endif
  2590                              <2>  %if con_cont
  2591                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  2592                              <2>  %endif
  2593                              <2> 
  2594                              <2>  %ifidn %1,andblock
  2595                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  2596                              <2>  %elifidn %1,orblock
  2597                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  2598                              <2>  %endif
  2599                              <1> %assign __return__ __return__ + 1
  2600                              <1> %assign __have_frame__ 0
  2601                              <1> %assign %$have_local 0
  2602                              <1> %assign %$have_save 0
  2603                              <1> %assign __save_all__ 0
  2604                              <1> %assign %$local_args 0
  2605                              <1> %assign %$proc_args 0
  2606                              <1> %assign __save_args__ 0
  2607                              <1> %if %0 > 1
  2608                              <1>  %assign args %0 - 1
  2609                              <1>  %assign %$bp_off 4
  2610                              <1>  %assign i 0
  2611                              <1>  %rotate 1
  2612                              <1>  %ifidn %1,withlocal
  2613                              <1>  %assign %$have_local 1
  2614                              <1>  %assign args args -1
  2615                              <1>  %rotate 1
  2616                              <1>  %endif
  2617                              <1>  %assign %$proc_args args
  2618                              <1>  %rep args
  2619                              <1> 
  2620                              <1>  %%inputarg__%1 EQU %$bp_off
  2621                              <1>  %undef .%1
  2622                              <1>  %define .%1 %%inputarg__%1+bp
  2623                              <1>  cat_define %$proc_argv ,i,%1
  2624                              <1>  %assign %$bp_off %$bp_off + 2
  2625                              <1>  %assign i i+1
  2626                              <1>  %rotate 1
  2627                              <1>  %endrep
  2628                              <1>  %if %$have_local==0
  2629                              <1>  enter 0,0
  2630                              <1>  %assign __have_frame__ 1
  2631                              <1>  %endif
  2632                              <1> %endif
  2633                                  	save eax
  2634                              <1> %ifctx proc
  2635                              <1>  %if %$have_local == 1
  2636                              <1>  %error "`save' must after `local'"
  2637                              <1>  %endif
  2638                              <1> 
  2639                              <1>  %ifidn all,%1
  2640                              <1>  %assign __save_all__ 1
  2641                              <1>  %if %0 > 1
  2642                              <1>  %ifidn frame,%2
  2643                              <1>  %if __have_frame__ == 0
  2644                              <1>  enter 0,0
  2645                              <1>  %assign __have_frame__ 1
  2646                              <1>  %assign local_off 0
  2647                              <1>  %endif
  2648                              <1>  %endif
  2649                              <1>  %endif
  2650                              <1>  pusha
  2651                              <1>  %if __have_frame__ == 1
  2652                              <1>  %undef __AX
  2653                              <1>  %undef __BX
  2654                              <1>  %undef __CX
  2655                              <1>  %undef __DX
  2656                              <1>  %undef __SI
  2657                              <1>  %undef __DI
  2658                              <1>  %idefine __AX bp-local_off - 2
  2659                              <1>  %idefine __CX bp-local_off - 4
  2660                              <1>  %idefine __DX bp-local_off - 6
  2661                              <1>  %idefine __BX bp-local_off - 8
  2662                              <1> 
  2663                              <1> 
  2664                              <1>  %idefine __SI bp-local_off - 14
  2665                              <1>  %idefine __DI bp-local_off - 16
  2666                              <1>  %endif
  2667                              <1>  %elifidn alld,%1
  2668                              <1>  %assign __save_all__ 2
  2669                              <1>  %if %0 > 1
  2670                              <1>  %ifidn frame,%2
  2671                              <1>  %if __have_frame__ == 0
  2672                              <1>  enter 0,0
  2673                              <1>  %assign __have_frame__ 1
  2674                              <1>  %assign local_off 0
  2675                              <1>  %endif
  2676                              <1>  %endif
  2677                              <1>  %endif
  2678                              <1>  pushad
  2679                              <1>  %if __have_frame__ == 1
  2680                              <1>  %undef __EAX
  2681                              <1>  %undef __EBX
  2682                              <1>  %undef __ECX
  2683                              <1>  %undef __EDX
  2684                              <1>  %undef __ESI
  2685                              <1>  %undef __EDI
  2686                              <1>  %idefine __EAX bp-local_off - 4
  2687                              <1>  %idefine __ECX bp-local_off - 8
  2688                              <1>  %idefine __EDX bp-local_off - 12
  2689                              <1>  %idefine __EBX bp-local_off - 16
  2690                              <1> 
  2691                              <1> 
  2692                              <1>  %idefine __ESI bp-local_off - 18
  2693                              <1>  %idefine __EDI bp-local_off - 32
  2694                              <1>  %endif
  2695                              <1> 
  2696                              <1>  %else
  2697                              <1>  %assign __save_args__ %0
  2698                              <1>  %assign __save_all__ 0
  2699                              <1>  %assign i %0
  2700                              <1>  %rep %0
  2701                              <1>  push %1
  2702                              <1>  cat_define %$save_argv ,i,%1
  2703                              <1>  %rotate 1
  2704                              <1>  %assign i i - 1
  2705                              <1>  %endrep
  2706 000005FF 6650                <2>  push %1
  2707                              <2>  cat_define %$save_argv ,i,%1
  2708                              <3> %define %1%2 %3
  2709                              <2>  %rotate 1
  2710                              <2>  %assign i i - 1
  2711                              <1>  %endif
  2712                              <1> %else
  2713                              <1>  %error "`save' must after `proc'"
  2714                              <1> %endif
  2715 00000601 E8E9FF                  	call read_bios_time
  2716 00000604 83C05A                  	add ax, 5*18	; 20 seconds
  2717                                  	 		; FIXME: Midnight overflow
  2718 00000607 A3[0300]                	mov [time_out],ax
  2719                                  endp
  2720                              <1> %ifnctx proc
  2721                              <1>  %error "expected `proc' before `endp'"
  2722                              <1> %endif
  2723                              <1>  cat_lable %$return,__level__
  2724                              <2> %1%2:
  2725                              <1>  %if __save_all__ ==1
  2726                              <1>  popa
  2727                              <1>  %elif __save_all__ == 2
  2728                              <1>  popad
  2729                              <1>  %elif __save_args__ > 0
  2730                              <1>  %assign i 1
  2731                              <1>  %rep __save_args__
  2732                              <1>  linecat pop, %$save_argv,i
  2733                              <1>  %assign i i+1
  2734                              <1>  %endrep
  2735                              <2>  linecat pop, %$save_argv,i
  2736 0000060A 6658                <3>  %1 %2%3
  2737                              <2>  %assign i i+1
  2738                              <1>  %endif
  2739                              <1>  %if __have_frame__ > 0
  2740                              <1>  leave
  2741                              <1>  %endif
  2742                              <1> 
  2743                              <1>  %assign i 0
  2744                              <1>  %rep %$proc_args
  2745                              <1> 
  2746                              <1>  %assign i i+1
  2747                              <1>  %endrep
  2748                              <1> 
  2749                              <1>  %assign i 0
  2750                              <1>  %rep %$local_args
  2751                              <1> 
  2752                              <1>  %assign i i+1
  2753                              <1>  %endrep
  2754 0000060C C3                  <1>  ret
  2755                              <1>  con_pop
  2756                              <2>  %pop
  2757                              <2>  %assign __level__ __level__ - 1
  2758                              <1>  %assign __return__ __return__ - 1
  2759                                  
  2760                                  proc	check_timeout
  2761                              <1> GLOBAL %1
  2762                              <1> %1:
  2763                              <1> con_push proc
  2764                              <2>  %assign __lastlevel__ __level__
  2765                              <2>  %assign __level__ __level__ + 1
  2766                              <2>  %if __return__ > 0
  2767                              <2>  %assign con_return 1
  2768                              <2>  %else
  2769                              <2>  %assign con_return 0
  2770                              <2>  %endif
  2771                              <2> 
  2772                              <2>  %if __cont__ > 0
  2773                              <2>  %assign con_cont 1
  2774                              <2>  %else
  2775                              <2>  %assign con_cont 0
  2776                              <2>  %endif
  2777                              <2>  %if __break__ > 0
  2778                              <2>  %assign con_break 1
  2779                              <2>  %else
  2780                              <2>  %assign con_break 0
  2781                              <2>  %endif
  2782                              <2> 
  2783                              <2>  %ifidn %1,proc
  2784                              <2>  %assign con_return 0
  2785                              <2>  %elifidn %1,forcx
  2786                              <2>  %assign con_break 0
  2787                              <2>  %elifidn %1,repeat
  2788                              <2>  %assign con_cont 0
  2789                              <2>  %assign con_break 0
  2790                              <2>  %elifidn %1,while
  2791                              <2>  %assign con_cont 0
  2792                              <2>  %assign con_break 0
  2793                              <2>  %endif
  2794                              <2> 
  2795                              <2>  %if __cndblock__ == 1
  2796                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  2797                              <2>  %endif
  2798                              <2> 
  2799                              <2>  %push %1
  2800                              <2>  %if con_return
  2801                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  2802                              <2>  %endif
  2803                              <2>  %if con_break
  2804                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  2805                              <2>  %endif
  2806                              <2>  %if con_cont
  2807                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  2808                              <2>  %endif
  2809                              <2> 
  2810                              <2>  %ifidn %1,andblock
  2811                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  2812                              <2>  %elifidn %1,orblock
  2813                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  2814                              <2>  %endif
  2815                              <1> %assign __return__ __return__ + 1
  2816                              <1> %assign __have_frame__ 0
  2817                              <1> %assign %$have_local 0
  2818                              <1> %assign %$have_save 0
  2819                              <1> %assign __save_all__ 0
  2820                              <1> %assign %$local_args 0
  2821                              <1> %assign %$proc_args 0
  2822                              <1> %assign __save_args__ 0
  2823                              <1> %if %0 > 1
  2824                              <1>  %assign args %0 - 1
  2825                              <1>  %assign %$bp_off 4
  2826                              <1>  %assign i 0
  2827                              <1>  %rotate 1
  2828                              <1>  %ifidn %1,withlocal
  2829                              <1>  %assign %$have_local 1
  2830                              <1>  %assign args args -1
  2831                              <1>  %rotate 1
  2832                              <1>  %endif
  2833                              <1>  %assign %$proc_args args
  2834                              <1>  %rep args
  2835                              <1> 
  2836                              <1>  %%inputarg__%1 EQU %$bp_off
  2837                              <1>  %undef .%1
  2838                              <1>  %define .%1 %%inputarg__%1+bp
  2839                              <1>  cat_define %$proc_argv ,i,%1
  2840                              <1>  %assign %$bp_off %$bp_off + 2
  2841                              <1>  %assign i i+1
  2842                              <1>  %rotate 1
  2843                              <1>  %endrep
  2844                              <1>  %if %$have_local==0
  2845                              <1>  enter 0,0
  2846                              <1>  %assign __have_frame__ 1
  2847                              <1>  %endif
  2848                              <1> %endif
  2849                                  ; you need to setup the timeout first
  2850                                  %define is_timeout a
  2851                                  %define cc_nottimeout na
  2852 0000060D E8DDFF                  	call read_bios_time
  2853 00000610 3B06[0300]              	cmp ax,[time_out]
  2854                                  %ifdef DEBUG
  2855                                  	if is_timeout
  2856                                  		debug_print "timeout accord!!!"
  2857                                  	endif
  2858                                  %endif
  2859                                  endp
  2860                              <1> %ifnctx proc
  2861                              <1>  %error "expected `proc' before `endp'"
  2862                              <1> %endif
  2863                              <1>  cat_lable %$return,__level__
  2864                              <2> %1%2:
  2865                              <1>  %if __save_all__ ==1
  2866                              <1>  popa
  2867                              <1>  %elif __save_all__ == 2
  2868                              <1>  popad
  2869                              <1>  %elif __save_args__ > 0
  2870                              <1>  %assign i 1
  2871                              <1>  %rep __save_args__
  2872                              <1>  linecat pop, %$save_argv,i
  2873                              <1>  %assign i i+1
  2874                              <1>  %endrep
  2875                              <1>  %endif
  2876                              <1>  %if __have_frame__ > 0
  2877                              <1>  leave
  2878                              <1>  %endif
  2879                              <1> 
  2880                              <1>  %assign i 0
  2881                              <1>  %rep %$proc_args
  2882                              <1> 
  2883                              <1>  %assign i i+1
  2884                              <1>  %endrep
  2885                              <1> 
  2886                              <1>  %assign i 0
  2887                              <1>  %rep %$local_args
  2888                              <1> 
  2889                              <1>  %assign i i+1
  2890                              <1>  %endrep
  2891 00000614 C3                  <1>  ret
  2892                              <1>  con_pop
  2893                              <2>  %pop
  2894                              <2>  %assign __level__ __level__ - 1
  2895                              <1>  %assign __return__ __return__ - 1
  2896                                  
  2897                                  proc	sub_xfer_delay
  2898                              <1> GLOBAL %1
  2899                              <1> %1:
  2900                              <1> con_push proc
  2901                              <2>  %assign __lastlevel__ __level__
  2902                              <2>  %assign __level__ __level__ + 1
  2903                              <2>  %if __return__ > 0
  2904                              <2>  %assign con_return 1
  2905                              <2>  %else
  2906                              <2>  %assign con_return 0
  2907                              <2>  %endif
  2908                              <2> 
  2909                              <2>  %if __cont__ > 0
  2910                              <2>  %assign con_cont 1
  2911                              <2>  %else
  2912                              <2>  %assign con_cont 0
  2913                              <2>  %endif
  2914                              <2>  %if __break__ > 0
  2915                              <2>  %assign con_break 1
  2916                              <2>  %else
  2917                              <2>  %assign con_break 0
  2918                              <2>  %endif
  2919                              <2> 
  2920                              <2>  %ifidn %1,proc
  2921                              <2>  %assign con_return 0
  2922                              <2>  %elifidn %1,forcx
  2923                              <2>  %assign con_break 0
  2924                              <2>  %elifidn %1,repeat
  2925                              <2>  %assign con_cont 0
  2926                              <2>  %assign con_break 0
  2927                              <2>  %elifidn %1,while
  2928                              <2>  %assign con_cont 0
  2929                              <2>  %assign con_break 0
  2930                              <2>  %endif
  2931                              <2> 
  2932                              <2>  %if __cndblock__ == 1
  2933                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  2934                              <2>  %endif
  2935                              <2> 
  2936                              <2>  %push %1
  2937                              <2>  %if con_return
  2938                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  2939                              <2>  %endif
  2940                              <2>  %if con_break
  2941                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  2942                              <2>  %endif
  2943                              <2>  %if con_cont
  2944                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  2945                              <2>  %endif
  2946                              <2> 
  2947                              <2>  %ifidn %1,andblock
  2948                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  2949                              <2>  %elifidn %1,orblock
  2950                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  2951                              <2>  %endif
  2952                              <1> %assign __return__ __return__ + 1
  2953                              <1> %assign __have_frame__ 0
  2954                              <1> %assign %$have_local 0
  2955                              <1> %assign %$have_save 0
  2956                              <1> %assign __save_all__ 0
  2957                              <1> %assign %$local_args 0
  2958                              <1> %assign %$proc_args 0
  2959                              <1> %assign __save_args__ 0
  2960                              <1> %if %0 > 1
  2961                              <1>  %assign args %0 - 1
  2962                              <1>  %assign %$bp_off 4
  2963                              <1>  %assign i 0
  2964                              <1>  %rotate 1
  2965                              <1>  %ifidn %1,withlocal
  2966                              <1>  %assign %$have_local 1
  2967                              <1>  %assign args args -1
  2968                              <1>  %rotate 1
  2969                              <1>  %endif
  2970                              <1>  %assign %$proc_args args
  2971                              <1>  %rep args
  2972                              <1> 
  2973                              <1>  %%inputarg__%1 EQU %$bp_off
  2974                              <1>  %undef .%1
  2975                              <1>  %define .%1 %%inputarg__%1+bp
  2976                              <1>  cat_define %$proc_argv ,i,%1
  2977                              <1>  %assign %$bp_off %$bp_off + 2
  2978                              <1>  %assign i i+1
  2979                              <1>  %rotate 1
  2980                              <1>  %endrep
  2981                              <1>  %if %$have_local==0
  2982                              <1>  enter 0,0
  2983                              <1>  %assign __have_frame__ 1
  2984                              <1>  %endif
  2985                              <1> %endif
  2986                                  %ifdef SLOW_ATAPI_DEVICE
  2987                                  	save ecx
  2988                                  	pushf
  2989                                  	sti
  2990                                  	mov ecx, [delay_repeat_num]
  2991                                  	repeat
  2992                                  		call read_bios_time
  2993                                  		dec ecx
  2994                                  	until {or ecx, ecx}, z
  2995                                  	popf
  2996                                  %endif
  2997                                  endp
  2998                              <1> %ifnctx proc
  2999                              <1>  %error "expected `proc' before `endp'"
  3000                              <1> %endif
  3001                              <1>  cat_lable %$return,__level__
  3002                              <2> %1%2:
  3003                              <1>  %if __save_all__ ==1
  3004                              <1>  popa
  3005                              <1>  %elif __save_all__ == 2
  3006                              <1>  popad
  3007                              <1>  %elif __save_args__ > 0
  3008                              <1>  %assign i 1
  3009                              <1>  %rep __save_args__
  3010                              <1>  linecat pop, %$save_argv,i
  3011                              <1>  %assign i i+1
  3012                              <1>  %endrep
  3013                              <1>  %endif
  3014                              <1>  %if __have_frame__ > 0
  3015                              <1>  leave
  3016                              <1>  %endif
  3017                              <1> 
  3018                              <1>  %assign i 0
  3019                              <1>  %rep %$proc_args
  3020                              <1> 
  3021                              <1>  %assign i i+1
  3022                              <1>  %endrep
  3023                              <1> 
  3024                              <1>  %assign i 0
  3025                              <1>  %rep %$local_args
  3026                              <1> 
  3027                              <1>  %assign i i+1
  3028                              <1>  %endrep
  3029 00000615 C3                  <1>  ret
  3030                              <1>  con_pop
  3031                              <2>  %pop
  3032                              <2>  %assign __level__ __level__ - 1
  3033                              <1>  %assign __return__ __return__ - 1
  3034                                  
  3035                                  proc	sub_atapi_delay
  3036                              <1> GLOBAL %1
  3037                              <1> %1:
  3038                              <1> con_push proc
  3039                              <2>  %assign __lastlevel__ __level__
  3040                              <2>  %assign __level__ __level__ + 1
  3041                              <2>  %if __return__ > 0
  3042                              <2>  %assign con_return 1
  3043                              <2>  %else
  3044                              <2>  %assign con_return 0
  3045                              <2>  %endif
  3046                              <2> 
  3047                              <2>  %if __cont__ > 0
  3048                              <2>  %assign con_cont 1
  3049                              <2>  %else
  3050                              <2>  %assign con_cont 0
  3051                              <2>  %endif
  3052                              <2>  %if __break__ > 0
  3053                              <2>  %assign con_break 1
  3054                              <2>  %else
  3055                              <2>  %assign con_break 0
  3056                              <2>  %endif
  3057                              <2> 
  3058                              <2>  %ifidn %1,proc
  3059                              <2>  %assign con_return 0
  3060                              <2>  %elifidn %1,forcx
  3061                              <2>  %assign con_break 0
  3062                              <2>  %elifidn %1,repeat
  3063                              <2>  %assign con_cont 0
  3064                              <2>  %assign con_break 0
  3065                              <2>  %elifidn %1,while
  3066                              <2>  %assign con_cont 0
  3067                              <2>  %assign con_break 0
  3068                              <2>  %endif
  3069                              <2> 
  3070                              <2>  %if __cndblock__ == 1
  3071                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  3072                              <2>  %endif
  3073                              <2> 
  3074                              <2>  %push %1
  3075                              <2>  %if con_return
  3076                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  3077                              <2>  %endif
  3078                              <2>  %if con_break
  3079                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  3080                              <2>  %endif
  3081                              <2>  %if con_cont
  3082                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  3083                              <2>  %endif
  3084                              <2> 
  3085                              <2>  %ifidn %1,andblock
  3086                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  3087                              <2>  %elifidn %1,orblock
  3088                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  3089                              <2>  %endif
  3090                              <1> %assign __return__ __return__ + 1
  3091                              <1> %assign __have_frame__ 0
  3092                              <1> %assign %$have_local 0
  3093                              <1> %assign %$have_save 0
  3094                              <1> %assign __save_all__ 0
  3095                              <1> %assign %$local_args 0
  3096                              <1> %assign %$proc_args 0
  3097                              <1> %assign __save_args__ 0
  3098                              <1> %if %0 > 1
  3099                              <1>  %assign args %0 - 1
  3100                              <1>  %assign %$bp_off 4
  3101                              <1>  %assign i 0
  3102                              <1>  %rotate 1
  3103                              <1>  %ifidn %1,withlocal
  3104                              <1>  %assign %$have_local 1
  3105                              <1>  %assign args args -1
  3106                              <1>  %rotate 1
  3107                              <1>  %endif
  3108                              <1>  %assign %$proc_args args
  3109                              <1>  %rep args
  3110                              <1> 
  3111                              <1>  %%inputarg__%1 EQU %$bp_off
  3112                              <1>  %undef .%1
  3113                              <1>  %define .%1 %%inputarg__%1+bp
  3114                              <1>  cat_define %$proc_argv ,i,%1
  3115                              <1>  %assign %$bp_off %$bp_off + 2
  3116                              <1>  %assign i i+1
  3117                              <1>  %rotate 1
  3118                              <1>  %endrep
  3119                              <1>  %if %$have_local==0
  3120                              <1>  enter 0,0
  3121                              <1>  %assign __have_frame__ 1
  3122                              <1>  %endif
  3123                              <1> %endif
  3124                                  %ifdef SLOW_ATAPI_DEVICE
  3125                                  ; delay a few clicks
  3126                                  ;	save ecx
  3127                                  	if {cmp byte [atapi_delay_flag],0},nz 
  3128                                  ;		pushf
  3129                                  ;		sti
  3130                                  ;		mov ecx, [delay_repeat_num]
  3131                                  ;		repeat
  3132                                  ;			call read_bios_time
  3133                                  ;			dec ecx
  3134                                  ;		until {or ecx, ecx}, z
  3135                                  ;		popf
  3136                                  	call sub_xfer_delay
  3137                                  	endif
  3138                                  %endif
  3139                                  endp
  3140                              <1> %ifnctx proc
  3141                              <1>  %error "expected `proc' before `endp'"
  3142                              <1> %endif
  3143                              <1>  cat_lable %$return,__level__
  3144                              <2> %1%2:
  3145                              <1>  %if __save_all__ ==1
  3146                              <1>  popa
  3147                              <1>  %elif __save_all__ == 2
  3148                              <1>  popad
  3149                              <1>  %elif __save_args__ > 0
  3150                              <1>  %assign i 1
  3151                              <1>  %rep __save_args__
  3152                              <1>  linecat pop, %$save_argv,i
  3153                              <1>  %assign i i+1
  3154                              <1>  %endrep
  3155                              <1>  %endif
  3156                              <1>  %if __have_frame__ > 0
  3157                              <1>  leave
  3158                              <1>  %endif
  3159                              <1> 
  3160                              <1>  %assign i 0
  3161                              <1>  %rep %$proc_args
  3162                              <1> 
  3163                              <1>  %assign i i+1
  3164                              <1>  %endrep
  3165                              <1> 
  3166                              <1>  %assign i 0
  3167                              <1>  %rep %$local_args
  3168                              <1> 
  3169                              <1>  %assign i i+1
  3170                              <1>  %endrep
  3171 00000616 C3                  <1>  ret
  3172                              <1>  con_pop
  3173                              <2>  %pop
  3174                              <2>  %assign __level__ __level__ - 1
  3175                              <1>  %assign __return__ __return__ - 1
  3176                                  
  3177                                  proc	delay400ns
  3178                              <1> GLOBAL %1
  3179                              <1> %1:
  3180                              <1> con_push proc
  3181                              <2>  %assign __lastlevel__ __level__
  3182                              <2>  %assign __level__ __level__ + 1
  3183                              <2>  %if __return__ > 0
  3184                              <2>  %assign con_return 1
  3185                              <2>  %else
  3186                              <2>  %assign con_return 0
  3187                              <2>  %endif
  3188                              <2> 
  3189                              <2>  %if __cont__ > 0
  3190                              <2>  %assign con_cont 1
  3191                              <2>  %else
  3192                              <2>  %assign con_cont 0
  3193                              <2>  %endif
  3194                              <2>  %if __break__ > 0
  3195                              <2>  %assign con_break 1
  3196                              <2>  %else
  3197                              <2>  %assign con_break 0
  3198                              <2>  %endif
  3199                              <2> 
  3200                              <2>  %ifidn %1,proc
  3201                              <2>  %assign con_return 0
  3202                              <2>  %elifidn %1,forcx
  3203                              <2>  %assign con_break 0
  3204                              <2>  %elifidn %1,repeat
  3205                              <2>  %assign con_cont 0
  3206                              <2>  %assign con_break 0
  3207                              <2>  %elifidn %1,while
  3208                              <2>  %assign con_cont 0
  3209                              <2>  %assign con_break 0
  3210                              <2>  %endif
  3211                              <2> 
  3212                              <2>  %if __cndblock__ == 1
  3213                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  3214                              <2>  %endif
  3215                              <2> 
  3216                              <2>  %push %1
  3217                              <2>  %if con_return
  3218                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  3219                              <2>  %endif
  3220                              <2>  %if con_break
  3221                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  3222                              <2>  %endif
  3223                              <2>  %if con_cont
  3224                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  3225                              <2>  %endif
  3226                              <2> 
  3227                              <2>  %ifidn %1,andblock
  3228                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  3229                              <2>  %elifidn %1,orblock
  3230                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  3231                              <2>  %endif
  3232                              <1> %assign __return__ __return__ + 1
  3233                              <1> %assign __have_frame__ 0
  3234                              <1> %assign %$have_local 0
  3235                              <1> %assign %$have_save 0
  3236                              <1> %assign __save_all__ 0
  3237                              <1> %assign %$local_args 0
  3238                              <1> %assign %$proc_args 0
  3239                              <1> %assign __save_args__ 0
  3240                              <1> %if %0 > 1
  3241                              <1>  %assign args %0 - 1
  3242                              <1>  %assign %$bp_off 4
  3243                              <1>  %assign i 0
  3244                              <1>  %rotate 1
  3245                              <1>  %ifidn %1,withlocal
  3246                              <1>  %assign %$have_local 1
  3247                              <1>  %assign args args -1
  3248                              <1>  %rotate 1
  3249                              <1>  %endif
  3250                              <1>  %assign %$proc_args args
  3251                              <1>  %rep args
  3252                              <1> 
  3253                              <1>  %%inputarg__%1 EQU %$bp_off
  3254                              <1>  %undef .%1
  3255                              <1>  %define .%1 %%inputarg__%1+bp
  3256                              <1>  cat_define %$proc_argv ,i,%1
  3257                              <1>  %assign %$bp_off %$bp_off + 2
  3258                              <1>  %assign i i+1
  3259                              <1>  %rotate 1
  3260                              <1>  %endrep
  3261                              <1>  %if %$have_local==0
  3262                              <1>  enter 0,0
  3263                              <1>  %assign __have_frame__ 1
  3264                              <1>  %endif
  3265                              <1> %endif
  3266                                  	inbyte CB_ASTAT
  3267 00000617 8B16[9900]          <1>  mov dx,[reg_addr+%1*2]
  3268 0000061B EC                  <1>  in al,dx
  3269                              <1>  %if %0 > 1
  3270                              <1>  mov %2,al
  3271                              <1>  %endif
  3272                                  	%rep 3
  3273                                  	in al,dx
  3274                                  	%endrep
  3275 0000061C EC                  <1>  in al,dx
  3276 0000061D EC                  <1>  in al,dx
  3277 0000061E EC                  <1>  in al,dx
  3278                                  endp
  3279                              <1> %ifnctx proc
  3280                              <1>  %error "expected `proc' before `endp'"
  3281                              <1> %endif
  3282                              <1>  cat_lable %$return,__level__
  3283                              <2> %1%2:
  3284                              <1>  %if __save_all__ ==1
  3285                              <1>  popa
  3286                              <1>  %elif __save_all__ == 2
  3287                              <1>  popad
  3288                              <1>  %elif __save_args__ > 0
  3289                              <1>  %assign i 1
  3290                              <1>  %rep __save_args__
  3291                              <1>  linecat pop, %$save_argv,i
  3292                              <1>  %assign i i+1
  3293                              <1>  %endrep
  3294                              <1>  %endif
  3295                              <1>  %if __have_frame__ > 0
  3296                              <1>  leave
  3297                              <1>  %endif
  3298                              <1> 
  3299                              <1>  %assign i 0
  3300                              <1>  %rep %$proc_args
  3301                              <1> 
  3302                              <1>  %assign i i+1
  3303                              <1>  %endrep
  3304                              <1> 
  3305                              <1>  %assign i 0
  3306                              <1>  %rep %$local_args
  3307                              <1> 
  3308                              <1>  %assign i i+1
  3309                              <1>  %endrep
  3310 0000061F C3                  <1>  ret
  3311                              <1>  con_pop
  3312                              <2>  %pop
  3313                              <2>  %assign __level__ __level__ - 1
  3314                              <1>  %assign __return__ __return__ - 1
  3315                                  
  3316                                  proc	reg_poll_busy
  3317                              <1> GLOBAL %1
  3318                              <1> %1:
  3319                              <1> con_push proc
  3320                              <2>  %assign __lastlevel__ __level__
  3321                              <2>  %assign __level__ __level__ + 1
  3322                              <2>  %if __return__ > 0
  3323                              <2>  %assign con_return 1
  3324                              <2>  %else
  3325                              <2>  %assign con_return 0
  3326                              <2>  %endif
  3327                              <2> 
  3328                              <2>  %if __cont__ > 0
  3329                              <2>  %assign con_cont 1
  3330                              <2>  %else
  3331                              <2>  %assign con_cont 0
  3332                              <2>  %endif
  3333                              <2>  %if __break__ > 0
  3334                              <2>  %assign con_break 1
  3335                              <2>  %else
  3336                              <2>  %assign con_break 0
  3337                              <2>  %endif
  3338                              <2> 
  3339                              <2>  %ifidn %1,proc
  3340                              <2>  %assign con_return 0
  3341                              <2>  %elifidn %1,forcx
  3342                              <2>  %assign con_break 0
  3343                              <2>  %elifidn %1,repeat
  3344                              <2>  %assign con_cont 0
  3345                              <2>  %assign con_break 0
  3346                              <2>  %elifidn %1,while
  3347                              <2>  %assign con_cont 0
  3348                              <2>  %assign con_break 0
  3349                              <2>  %endif
  3350                              <2> 
  3351                              <2>  %if __cndblock__ == 1
  3352                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  3353                              <2>  %endif
  3354                              <2> 
  3355                              <2>  %push %1
  3356                              <2>  %if con_return
  3357                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  3358                              <2>  %endif
  3359                              <2>  %if con_break
  3360                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  3361                              <2>  %endif
  3362                              <2>  %if con_cont
  3363                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  3364                              <2>  %endif
  3365                              <2> 
  3366                              <2>  %ifidn %1,andblock
  3367                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  3368                              <2>  %elifidn %1,orblock
  3369                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  3370                              <2>  %endif
  3371                              <1> %assign __return__ __return__ + 1
  3372                              <1> %assign __have_frame__ 0
  3373                              <1> %assign %$have_local 0
  3374                              <1> %assign %$have_save 0
  3375                              <1> %assign __save_all__ 0
  3376                              <1> %assign %$local_args 0
  3377                              <1> %assign %$proc_args 0
  3378                              <1> %assign __save_args__ 0
  3379                              <1> %if %0 > 1
  3380                              <1>  %assign args %0 - 1
  3381                              <1>  %assign %$bp_off 4
  3382                              <1>  %assign i 0
  3383                              <1>  %rotate 1
  3384                              <1>  %ifidn %1,withlocal
  3385                              <1>  %assign %$have_local 1
  3386                              <1>  %assign args args -1
  3387                              <1>  %rotate 1
  3388                              <1>  %endif
  3389                              <1>  %assign %$proc_args args
  3390                              <1>  %rep args
  3391                              <1> 
  3392                              <1>  %%inputarg__%1 EQU %$bp_off
  3393                              <1>  %undef .%1
  3394                              <1>  %define .%1 %%inputarg__%1+bp
  3395                              <1>  cat_define %$proc_argv ,i,%1
  3396                              <1>  %assign %$bp_off %$bp_off + 2
  3397                              <1>  %assign i i+1
  3398                              <1>  %rotate 1
  3399                              <1>  %endrep
  3400                              <1>  %if %$have_local==0
  3401                              <1>  enter 0,0
  3402                              <1>  %assign __have_frame__ 1
  3403                              <1>  %endif
  3404                              <1> %endif
  3405                                  ; need to setup the timeout first
  3406                                  ;return ax=0	ok
  3407                                  ;	ax = 1	timeout
  3408                                  	while {inbyte CB_STAT},{and al,CB_STAT_BSY},nz
  3409                              <1> con_push while
  3410                              <2>  %assign __lastlevel__ __level__
  3411                              <2>  %assign __level__ __level__ + 1
  3412                              <2>  %if __return__ > 0
  3413                              <2>  %assign con_return 1
  3414                              <2>  %else
  3415                              <2>  %assign con_return 0
  3416                              <2>  %endif
  3417                              <2> 
  3418                              <2>  %if __cont__ > 0
  3419                              <2>  %assign con_cont 1
  3420                              <2>  %else
  3421                              <2>  %assign con_cont 0
  3422                              <2>  %endif
  3423                              <2>  %if __break__ > 0
  3424                              <2>  %assign con_break 1
  3425                              <2>  %else
  3426                              <2>  %assign con_break 0
  3427                              <2>  %endif
  3428                              <2> 
  3429                              <2>  %ifidn %1,proc
  3430                              <2>  %assign con_return 0
  3431                              <2>  %elifidn %1,forcx
  3432                              <2>  %assign con_break 0
  3433                              <2>  %elifidn %1,repeat
  3434                              <2>  %assign con_cont 0
  3435                              <2>  %assign con_break 0
  3436                              <2>  %elifidn %1,while
  3437                              <2>  %assign con_cont 0
  3438                              <2>  %assign con_break 0
  3439                              <2>  %endif
  3440                              <2> 
  3441                              <2>  %if __cndblock__ == 1
  3442                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  3443                              <2>  %endif
  3444                              <2> 
  3445                              <2>  %push %1
  3446                              <2>  %if con_return
  3447                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  3448                              <3> %define %1%2 %3%4
  3449                              <2>  %endif
  3450                              <2>  %if con_break
  3451                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  3452                              <2>  %endif
  3453                              <2>  %if con_cont
  3454                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  3455                              <2>  %endif
  3456                              <2> 
  3457                              <2>  %ifidn %1,andblock
  3458                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  3459                              <2>  %elifidn %1,orblock
  3460                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  3461                              <2>  %endif
  3462                              <1> %assign __break__ __break__ + 1
  3463                              <1> %assign __cont__ __cont__ + 1
  3464                              <1> %$begin:
  3465                              <1> cat_lable %$cont,__level__
  3466                              <2> %1%2:
  3467                              <1> %if %0 > 0
  3468                              <1>  %rep %0 -1
  3469                              <1>  %1
  3470                              <1>  %rotate 1
  3471                              <1>  %endrep
  3472                              <2>  %1
  3473 00000620 8B16[9700]          <3>  mov dx,[reg_addr+%1*2]
  3474 00000624 EC                  <3>  in al,dx
  3475                              <3>  %if %0 > 1
  3476                              <3>  mov %2,al
  3477                              <3>  %endif
  3478                              <2>  %rotate 1
  3479 00000625 2480                <2>  %1
  3480                              <2>  %rotate 1
  3481 00000627 7407                <1>  j%-1 %$end
  3482                              <1> %endif
  3483 00000629 E8E1FF                  		call check_timeout
  3484                                  		return if,is_timeout
  3485                              <1>  %if %0 > 0
  3486                              <1>  %assign __near__ 0
  3487                              <1>  %assign argc %0
  3488                              <1>  %ifidn %1,near
  3489                              <1>  %assign __near__ 1
  3490                              <1>  %assign argc argc-1
  3491                              <1>  %rotate 1
  3492                              <1>  %endif
  3493                              <1>  %if argc > 0
  3494                              <1>  %ifidn %1,if
  3495                              <1> 
  3496                              <1>  %rotate 1
  3497                              <1>  %rep argc-2
  3498                              <1>  %1
  3499                              <1>  %rotate 1
  3500                              <1>  %endrep
  3501                              <1>  %if __near__ == 0
  3502                              <1>  cat_jc %1,%$return,__level__
  3503 0000062C 7702                <2>  j%+1 %2%3
  3504                              <1>  %else
  3505                              <1>  cat_jc_near %1,%$return,__level__
  3506                              <1>  %endif
  3507                              <1>  %else
  3508                              <1>  %error "expect `if' after `return'"
  3509                              <1>  %endif
  3510                              <1>  %else
  3511                              <1>  %if __near__ == 0
  3512                              <1>  cat_jmp %$return,__level__
  3513                              <1>  %else
  3514                              <1>  cat_jmp_near %$return,__level__
  3515                              <1>  %endif
  3516                              <1>  %endif
  3517                              <1>  %else
  3518                              <1>  %if __have_frame__ == 0 && __save_all__ == 0 && __save_args__ == 0
  3519                              <1>  ret
  3520                              <1>  %else
  3521                              <1>  cat_jmp %$return,__level__
  3522                              <1>  %endif
  3523                              <1>  %endif
  3524                                  	endwhile
  3525                              <1>  %ifctx while
  3526 0000062E EBF0                <1>  jmp %$begin
  3527                              <1>  %$end:
  3528                              <1>  cat_lable %$break,__level__
  3529                              <2> %1%2:
  3530                              <1>  %else
  3531                              <1>  %error "expected `while' before `endwhile'"
  3532                              <1>  %endif
  3533                              <1> con_pop
  3534                              <2>  %pop
  3535                              <2>  %assign __level__ __level__ - 1
  3536                              <1> %assign __break__ __break__ + 1
  3537                              <1> %assign __cont__ __cont__ + 1
  3538                                  endp
  3539                              <1> %ifnctx proc
  3540                              <1>  %error "expected `proc' before `endp'"
  3541                              <1> %endif
  3542                              <1>  cat_lable %$return,__level__
  3543                              <2> %1%2:
  3544                              <1>  %if __save_all__ ==1
  3545                              <1>  popa
  3546                              <1>  %elif __save_all__ == 2
  3547                              <1>  popad
  3548                              <1>  %elif __save_args__ > 0
  3549                              <1>  %assign i 1
  3550                              <1>  %rep __save_args__
  3551                              <1>  linecat pop, %$save_argv,i
  3552                              <1>  %assign i i+1
  3553                              <1>  %endrep
  3554                              <1>  %endif
  3555                              <1>  %if __have_frame__ > 0
  3556                              <1>  leave
  3557                              <1>  %endif
  3558                              <1> 
  3559                              <1>  %assign i 0
  3560                              <1>  %rep %$proc_args
  3561                              <1> 
  3562                              <1>  %assign i i+1
  3563                              <1>  %endrep
  3564                              <1> 
  3565                              <1>  %assign i 0
  3566                              <1>  %rep %$local_args
  3567                              <1> 
  3568                              <1>  %assign i i+1
  3569                              <1>  %endrep
  3570 00000630 C3                  <1>  ret
  3571                              <1>  con_pop
  3572                              <2>  %pop
  3573                              <2>  %assign __level__ __level__ - 1
  3574                              <1>  %assign __return__ __return__ - 1
  3575                                  
  3576                                  proc	__reg_select_dev
  3577                              <1> GLOBAL %1
  3578                              <1> %1:
  3579                              <1> con_push proc
  3580                              <2>  %assign __lastlevel__ __level__
  3581                              <2>  %assign __level__ __level__ + 1
  3582                              <2>  %if __return__ > 0
  3583                              <2>  %assign con_return 1
  3584                              <2>  %else
  3585                              <2>  %assign con_return 0
  3586                              <2>  %endif
  3587                              <2> 
  3588                              <2>  %if __cont__ > 0
  3589                              <2>  %assign con_cont 1
  3590                              <2>  %else
  3591                              <2>  %assign con_cont 0
  3592                              <2>  %endif
  3593                              <2>  %if __break__ > 0
  3594                              <2>  %assign con_break 1
  3595                              <2>  %else
  3596                              <2>  %assign con_break 0
  3597                              <2>  %endif
  3598                              <2> 
  3599                              <2>  %ifidn %1,proc
  3600                              <2>  %assign con_return 0
  3601                              <2>  %elifidn %1,forcx
  3602                              <2>  %assign con_break 0
  3603                              <2>  %elifidn %1,repeat
  3604                              <2>  %assign con_cont 0
  3605                              <2>  %assign con_break 0
  3606                              <2>  %elifidn %1,while
  3607                              <2>  %assign con_cont 0
  3608                              <2>  %assign con_break 0
  3609                              <2>  %endif
  3610                              <2> 
  3611                              <2>  %if __cndblock__ == 1
  3612                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  3613                              <2>  %endif
  3614                              <2> 
  3615                              <2>  %push %1
  3616                              <2>  %if con_return
  3617                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  3618                              <2>  %endif
  3619                              <2>  %if con_break
  3620                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  3621                              <3> %define %1%2 %3%4
  3622                              <2>  %endif
  3623                              <2>  %if con_cont
  3624                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  3625                              <3> %define %1%2 %3%4
  3626                              <2>  %endif
  3627                              <2> 
  3628                              <2>  %ifidn %1,andblock
  3629                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  3630                              <2>  %elifidn %1,orblock
  3631                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  3632                              <2>  %endif
  3633                              <1> %assign __return__ __return__ + 1
  3634                              <1> %assign __have_frame__ 0
  3635                              <1> %assign %$have_local 0
  3636                              <1> %assign %$have_save 0
  3637                              <1> %assign __save_all__ 0
  3638                              <1> %assign %$local_args 0
  3639                              <1> %assign %$proc_args 0
  3640                              <1> %assign __save_args__ 0
  3641                              <1> %if %0 > 1
  3642                              <1>  %assign args %0 - 1
  3643                              <1>  %assign %$bp_off 4
  3644                              <1>  %assign i 0
  3645                              <1>  %rotate 1
  3646                              <1>  %ifidn %1,withlocal
  3647                              <1>  %assign %$have_local 1
  3648                              <1>  %assign args args -1
  3649                              <1>  %rotate 1
  3650                              <1>  %endif
  3651                              <1>  %assign %$proc_args args
  3652                              <1>  %rep args
  3653                              <1> 
  3654                              <1>  %%inputarg__%1 EQU %$bp_off
  3655                              <1>  %undef .%1
  3656                              <1>  %define .%1 %%inputarg__%1+bp
  3657                              <1>  cat_define %$proc_argv ,i,%1
  3658                              <1>  %assign %$bp_off %$bp_off + 2
  3659                              <1>  %assign i i+1
  3660                              <1>  %rotate 1
  3661                              <1>  %endrep
  3662                              <1>  %if %$have_local==0
  3663                              <1>  enter 0,0
  3664                              <1>  %assign __have_frame__ 1
  3665                              <1>  %endif
  3666                              <1> %endif
  3667                                  ; ax = dev
  3668                                  ; simpile version of the select dev
  3669                                  	save bx
  3670                              <1> %ifctx proc
  3671                              <1>  %if %$have_local == 1
  3672                              <1>  %error "`save' must after `local'"
  3673                              <1>  %endif
  3674                              <1> 
  3675                              <1>  %ifidn all,%1
  3676                              <1>  %assign __save_all__ 1
  3677                              <1>  %if %0 > 1
  3678                              <1>  %ifidn frame,%2
  3679                              <1>  %if __have_frame__ == 0
  3680                              <1>  enter 0,0
  3681                              <1>  %assign __have_frame__ 1
  3682                              <1>  %assign local_off 0
  3683                              <1>  %endif
  3684                              <1>  %endif
  3685                              <1>  %endif
  3686                              <1>  pusha
  3687                              <1>  %if __have_frame__ == 1
  3688                              <1>  %undef __AX
  3689                              <1>  %undef __BX
  3690                              <1>  %undef __CX
  3691                              <1>  %undef __DX
  3692                              <1>  %undef __SI
  3693                              <1>  %undef __DI
  3694                              <1>  %idefine __AX bp-local_off - 2
  3695                              <1>  %idefine __CX bp-local_off - 4
  3696                              <1>  %idefine __DX bp-local_off - 6
  3697                              <1>  %idefine __BX bp-local_off - 8
  3698                              <1> 
  3699                              <1> 
  3700                              <1>  %idefine __SI bp-local_off - 14
  3701                              <1>  %idefine __DI bp-local_off - 16
  3702                              <1>  %endif
  3703                              <1>  %elifidn alld,%1
  3704                              <1>  %assign __save_all__ 2
  3705                              <1>  %if %0 > 1
  3706                              <1>  %ifidn frame,%2
  3707                              <1>  %if __have_frame__ == 0
  3708                              <1>  enter 0,0
  3709                              <1>  %assign __have_frame__ 1
  3710                              <1>  %assign local_off 0
  3711                              <1>  %endif
  3712                              <1>  %endif
  3713                              <1>  %endif
  3714                              <1>  pushad
  3715                              <1>  %if __have_frame__ == 1
  3716                              <1>  %undef __EAX
  3717                              <1>  %undef __EBX
  3718                              <1>  %undef __ECX
  3719                              <1>  %undef __EDX
  3720                              <1>  %undef __ESI
  3721                              <1>  %undef __EDI
  3722                              <1>  %idefine __EAX bp-local_off - 4
  3723                              <1>  %idefine __ECX bp-local_off - 8
  3724                              <1>  %idefine __EDX bp-local_off - 12
  3725                              <1>  %idefine __EBX bp-local_off - 16
  3726                              <1> 
  3727                              <1> 
  3728                              <1>  %idefine __ESI bp-local_off - 18
  3729                              <1>  %idefine __EDI bp-local_off - 32
  3730                              <1>  %endif
  3731                              <1> 
  3732                              <1>  %else
  3733                              <1>  %assign __save_args__ %0
  3734                              <1>  %assign __save_all__ 0
  3735                              <1>  %assign i %0
  3736                              <1>  %rep %0
  3737                              <1>  push %1
  3738                              <1>  cat_define %$save_argv ,i,%1
  3739                              <1>  %rotate 1
  3740                              <1>  %assign i i - 1
  3741                              <1>  %endrep
  3742 00000631 53                  <2>  push %1
  3743                              <2>  cat_define %$save_argv ,i,%1
  3744                              <3> %define %1%2 %3
  3745                              <2>  %rotate 1
  3746                              <2>  %assign i i - 1
  3747                              <1>  %endif
  3748                              <1> %else
  3749                              <1>  %error "`save' must after `proc'"
  3750                              <1> %endif
  3751 00000632 89C3                    	mov bx,ax
  3752                                  	outbyte CB_DH,[bx+cmd_select_dev]
  3753                              <1> %if %0>1
  3754 00000634 8A87[0200]          <1>  mov al,%2
  3755                              <1> %endif
  3756                              <1> %if %0>0
  3757 00000638 8B16[9500]          <1>  mov dx,[reg_addr+%1*2]
  3758                              <1> %endif
  3759 0000063C EE                  <1>  out dx,al
  3760 0000063D E8D7FF                  	call delay400ns
  3761                                  endp
  3762                              <1> %ifnctx proc
  3763                              <1>  %error "expected `proc' before `endp'"
  3764                              <1> %endif
  3765                              <1>  cat_lable %$return,__level__
  3766                              <2> %1%2:
  3767                              <1>  %if __save_all__ ==1
  3768                              <1>  popa
  3769                              <1>  %elif __save_all__ == 2
  3770                              <1>  popad
  3771                              <1>  %elif __save_args__ > 0
  3772                              <1>  %assign i 1
  3773                              <1>  %rep __save_args__
  3774                              <1>  linecat pop, %$save_argv,i
  3775                              <1>  %assign i i+1
  3776                              <1>  %endrep
  3777                              <2>  linecat pop, %$save_argv,i
  3778 00000640 5B                  <3>  %1 %2%3
  3779                              <2>  %assign i i+1
  3780                              <1>  %endif
  3781                              <1>  %if __have_frame__ > 0
  3782                              <1>  leave
  3783                              <1>  %endif
  3784                              <1> 
  3785                              <1>  %assign i 0
  3786                              <1>  %rep %$proc_args
  3787                              <1> 
  3788                              <1>  %assign i i+1
  3789                              <1>  %endrep
  3790                              <1> 
  3791                              <1>  %assign i 0
  3792                              <1>  %rep %$local_args
  3793                              <1> 
  3794                              <1>  %assign i i+1
  3795                              <1>  %endrep
  3796 00000641 C3                  <1>  ret
  3797                              <1>  con_pop
  3798                              <2>  %pop
  3799                              <2>  %assign __level__ __level__ - 1
  3800                              <1>  %assign __return__ __return__ - 1
  3801                                  	
  3802                                  proc	reg_select_dev
  3803                              <1> GLOBAL %1
  3804                              <1> %1:
  3805                              <1> con_push proc
  3806                              <2>  %assign __lastlevel__ __level__
  3807                              <2>  %assign __level__ __level__ + 1
  3808                              <2>  %if __return__ > 0
  3809                              <2>  %assign con_return 1
  3810                              <2>  %else
  3811                              <2>  %assign con_return 0
  3812                              <2>  %endif
  3813                              <2> 
  3814                              <2>  %if __cont__ > 0
  3815                              <2>  %assign con_cont 1
  3816                              <2>  %else
  3817                              <2>  %assign con_cont 0
  3818                              <2>  %endif
  3819                              <2>  %if __break__ > 0
  3820                              <2>  %assign con_break 1
  3821                              <2>  %else
  3822                              <2>  %assign con_break 0
  3823                              <2>  %endif
  3824                              <2> 
  3825                              <2>  %ifidn %1,proc
  3826                              <2>  %assign con_return 0
  3827                              <2>  %elifidn %1,forcx
  3828                              <2>  %assign con_break 0
  3829                              <2>  %elifidn %1,repeat
  3830                              <2>  %assign con_cont 0
  3831                              <2>  %assign con_break 0
  3832                              <2>  %elifidn %1,while
  3833                              <2>  %assign con_cont 0
  3834                              <2>  %assign con_break 0
  3835                              <2>  %endif
  3836                              <2> 
  3837                              <2>  %if __cndblock__ == 1
  3838                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  3839                              <2>  %endif
  3840                              <2> 
  3841                              <2>  %push %1
  3842                              <2>  %if con_return
  3843                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  3844                              <2>  %endif
  3845                              <2>  %if con_break
  3846                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  3847                              <3> %define %1%2 %3%4
  3848                              <2>  %endif
  3849                              <2>  %if con_cont
  3850                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  3851                              <3> %define %1%2 %3%4
  3852                              <2>  %endif
  3853                              <2> 
  3854                              <2>  %ifidn %1,andblock
  3855                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  3856                              <2>  %elifidn %1,orblock
  3857                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  3858                              <2>  %endif
  3859                              <1> %assign __return__ __return__ + 1
  3860                              <1> %assign __have_frame__ 0
  3861                              <1> %assign %$have_local 0
  3862                              <1> %assign %$have_save 0
  3863                              <1> %assign __save_all__ 0
  3864                              <1> %assign %$local_args 0
  3865                              <1> %assign %$proc_args 0
  3866                              <1> %assign __save_args__ 0
  3867                              <1> %if %0 > 1
  3868                              <1>  %assign args %0 - 1
  3869                              <1>  %assign %$bp_off 4
  3870                              <1>  %assign i 0
  3871                              <1>  %rotate 1
  3872                              <1>  %ifidn %1,withlocal
  3873                              <1>  %assign %$have_local 1
  3874                              <1>  %assign args args -1
  3875                              <1>  %rotate 1
  3876                              <1>  %endif
  3877                              <1>  %assign %$proc_args args
  3878                              <1>  %rep args
  3879                              <1> 
  3880                              <1>  %%inputarg__%1 EQU %$bp_off
  3881                              <1>  %undef .%1
  3882                              <1>  %define .%1 %%inputarg__%1+bp
  3883                              <1>  cat_define %$proc_argv ,i,%1
  3884                              <1>  %assign %$bp_off %$bp_off + 2
  3885                              <1>  %assign i i+1
  3886                              <1>  %rotate 1
  3887                              <1>  %endrep
  3888                              <1>  %if %$have_local==0
  3889                              <1>  enter 0,0
  3890                              <1>  %assign __have_frame__ 1
  3891                              <1>  %endif
  3892                              <1> %endif
  3893                                  ; ax = dev
  3894                                  ; set_timeout first
  3895                                  	save bx
  3896                              <1> %ifctx proc
  3897                              <1>  %if %$have_local == 1
  3898                              <1>  %error "`save' must after `local'"
  3899                              <1>  %endif
  3900                              <1> 
  3901                              <1>  %ifidn all,%1
  3902                              <1>  %assign __save_all__ 1
  3903                              <1>  %if %0 > 1
  3904                              <1>  %ifidn frame,%2
  3905                              <1>  %if __have_frame__ == 0
  3906                              <1>  enter 0,0
  3907                              <1>  %assign __have_frame__ 1
  3908                              <1>  %assign local_off 0
  3909                              <1>  %endif
  3910                              <1>  %endif
  3911                              <1>  %endif
  3912                              <1>  pusha
  3913                              <1>  %if __have_frame__ == 1
  3914                              <1>  %undef __AX
  3915                              <1>  %undef __BX
  3916                              <1>  %undef __CX
  3917                              <1>  %undef __DX
  3918                              <1>  %undef __SI
  3919                              <1>  %undef __DI
  3920                              <1>  %idefine __AX bp-local_off - 2
  3921                              <1>  %idefine __CX bp-local_off - 4
  3922                              <1>  %idefine __DX bp-local_off - 6
  3923                              <1>  %idefine __BX bp-local_off - 8
  3924                              <1> 
  3925                              <1> 
  3926                              <1>  %idefine __SI bp-local_off - 14
  3927                              <1>  %idefine __DI bp-local_off - 16
  3928                              <1>  %endif
  3929                              <1>  %elifidn alld,%1
  3930                              <1>  %assign __save_all__ 2
  3931                              <1>  %if %0 > 1
  3932                              <1>  %ifidn frame,%2
  3933                              <1>  %if __have_frame__ == 0
  3934                              <1>  enter 0,0
  3935                              <1>  %assign __have_frame__ 1
  3936                              <1>  %assign local_off 0
  3937                              <1>  %endif
  3938                              <1>  %endif
  3939                              <1>  %endif
  3940                              <1>  pushad
  3941                              <1>  %if __have_frame__ == 1
  3942                              <1>  %undef __EAX
  3943                              <1>  %undef __EBX
  3944                              <1>  %undef __ECX
  3945                              <1>  %undef __EDX
  3946                              <1>  %undef __ESI
  3947                              <1>  %undef __EDI
  3948                              <1>  %idefine __EAX bp-local_off - 4
  3949                              <1>  %idefine __ECX bp-local_off - 8
  3950                              <1>  %idefine __EDX bp-local_off - 12
  3951                              <1>  %idefine __EBX bp-local_off - 16
  3952                              <1> 
  3953                              <1> 
  3954                              <1>  %idefine __ESI bp-local_off - 18
  3955                              <1>  %idefine __EDI bp-local_off - 32
  3956                              <1>  %endif
  3957                              <1> 
  3958                              <1>  %else
  3959                              <1>  %assign __save_args__ %0
  3960                              <1>  %assign __save_all__ 0
  3961                              <1>  %assign i %0
  3962                              <1>  %rep %0
  3963                              <1>  push %1
  3964                              <1>  cat_define %$save_argv ,i,%1
  3965                              <1>  %rotate 1
  3966                              <1>  %assign i i - 1
  3967                              <1>  %endrep
  3968 00000642 53                  <2>  push %1
  3969                              <2>  cat_define %$save_argv ,i,%1
  3970                              <3> %define %1%2 %3
  3971                              <2>  %rotate 1
  3972                              <2>  %assign i i - 1
  3973                              <1>  %endif
  3974                              <1> %else
  3975                              <1>  %error "`save' must after `proc'"
  3976                              <1> %endif
  3977 00000643 89C3                    	mov bx,ax
  3978                                  	if {cmp byte[reg_dev_info+bx], REG_CONFIG_TYPE_ATA},ae
  3979                              <1>  %rep %0 -1
  3980                              <1>  %1
  3981                              <1>  %rotate 1
  3982                              <1>  %endrep
  3983 00000645 80BF[0500]02        <2>  %1
  3984                              <2>  %rotate 1
  3985                              <1> 
  3986                              <1>  con_push if
  3987                              <2>  %assign __lastlevel__ __level__
  3988                              <2>  %assign __level__ __level__ + 1
  3989                              <2>  %if __return__ > 0
  3990                              <2>  %assign con_return 1
  3991                              <2>  %else
  3992                              <2>  %assign con_return 0
  3993                              <2>  %endif
  3994                              <2> 
  3995                              <2>  %if __cont__ > 0
  3996                              <2>  %assign con_cont 1
  3997                              <2>  %else
  3998                              <2>  %assign con_cont 0
  3999                              <2>  %endif
  4000                              <2>  %if __break__ > 0
  4001                              <2>  %assign con_break 1
  4002                              <2>  %else
  4003                              <2>  %assign con_break 0
  4004                              <2>  %endif
  4005                              <2> 
  4006                              <2>  %ifidn %1,proc
  4007                              <2>  %assign con_return 0
  4008                              <2>  %elifidn %1,forcx
  4009                              <2>  %assign con_break 0
  4010                              <2>  %elifidn %1,repeat
  4011                              <2>  %assign con_cont 0
  4012                              <2>  %assign con_break 0
  4013                              <2>  %elifidn %1,while
  4014                              <2>  %assign con_cont 0
  4015                              <2>  %assign con_break 0
  4016                              <2>  %endif
  4017                              <2> 
  4018                              <2>  %if __cndblock__ == 1
  4019                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  4020                              <2>  %endif
  4021                              <2> 
  4022                              <2>  %push %1
  4023                              <2>  %if con_return
  4024                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  4025                              <3> %define %1%2 %3%4
  4026                              <2>  %endif
  4027                              <2>  %if con_break
  4028                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  4029                              <3> %define %1%2 %3%4
  4030                              <2>  %endif
  4031                              <2>  %if con_cont
  4032                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  4033                              <3> %define %1%2 %3%4
  4034                              <2>  %endif
  4035                              <2> 
  4036                              <2>  %ifidn %1,andblock
  4037                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  4038                              <2>  %elifidn %1,orblock
  4039                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  4040                              <2>  %endif
  4041                              <1> 
  4042                              <1>  %if %0 > 0
  4043 0000064A 7211                <1>  j%-1 %$ifnot
  4044                              <1>  %endif
  4045                              <1>  %assign %$elif_level 0
  4046 0000064C E8D1FF                  		call reg_poll_busy
  4047                                  		return if,{or ax,ax},nz
  4048                              <1>  %if %0 > 0
  4049                              <1>  %assign __near__ 0
  4050                              <1>  %assign argc %0
  4051                              <1>  %ifidn %1,near
  4052                              <1>  %assign __near__ 1
  4053                              <1>  %assign argc argc-1
  4054                              <1>  %rotate 1
  4055                              <1>  %endif
  4056                              <1>  %if argc > 0
  4057                              <1>  %ifidn %1,if
  4058                              <1> 
  4059                              <1>  %rotate 1
  4060                              <1>  %rep argc-2
  4061                              <1>  %1
  4062                              <1>  %rotate 1
  4063                              <1>  %endrep
  4064 0000064F 09C0                <2>  %1
  4065                              <2>  %rotate 1
  4066                              <1>  %if __near__ == 0
  4067                              <1>  cat_jc %1,%$return,__level__
  4068 00000651 750D                <2>  j%+1 %2%3
  4069                              <1>  %else
  4070                              <1>  cat_jc_near %1,%$return,__level__
  4071                              <1>  %endif
  4072                              <1>  %else
  4073                              <1>  %error "expect `if' after `return'"
  4074                              <1>  %endif
  4075                              <1>  %else
  4076                              <1>  %if __near__ == 0
  4077                              <1>  cat_jmp %$return,__level__
  4078                              <1>  %else
  4079                              <1>  cat_jmp_near %$return,__level__
  4080                              <1>  %endif
  4081                              <1>  %endif
  4082                              <1>  %else
  4083                              <1>  %if __have_frame__ == 0 && __save_all__ == 0 && __save_args__ == 0
  4084                              <1>  ret
  4085                              <1>  %else
  4086                              <1>  cat_jmp %$return,__level__
  4087                              <1>  %endif
  4088                              <1>  %endif
  4089 00000653 89D8                    		mov ax,bx
  4090 00000655 E8D9FF                  		call __reg_select_dev
  4091                                  %ifndef USE_ATA
  4092 00000658 E8C5FF                  		call reg_poll_busy
  4093                                  %else
  4094                                  		while
  4095                                  			inbyte CB_STAT
  4096                                  			if {cmp byte[reg_dev_info+bx],REG_CONFIG_TYPE_ATA},e
  4097                                  				and al, CB_STAT_BSY | CB_STAT_RDY | CB_STAT_SKC
  4098                                  				return if,{cmp al,CB_STAT_RDY|CB_STAT_SKC},e
  4099                                  			else
  4100                                  				return if,{test al,CB_STAT_BSY},z
  4101                                  			endif
  4102                                  		endwhile
  4103                                  %endif 
  4104                                  	else
  4105                              <1>  %assign __near__ 0
  4106                              <1>  %if %0 >0
  4107                              <1>  %ifidn %1 near
  4108                              <1>  %assign __near__ 1
  4109                              <1>  %endif
  4110                              <1>  %endif
  4111                              <1>  %ifctx if
  4112                              <1>  %repl else
  4113                              <1>  jmp_near __near__,%$ifend
  4114                              <2>  %if %1 > 0
  4115                              <2>  jmp near %2
  4116                              <2>  %else
  4117 0000065B EB03                <2>  jmp short %2
  4118                              <2>  %endif
  4119                              <1>  %$ifnot:
  4120                              <1>  %elifctx elif
  4121                              <1> 
  4122                              <1>  jmp_near __near__,%$ifend
  4123                              <1>  %$ifnot:
  4124                              <1>  %repl else
  4125                              <1> 
  4126                              <1> 
  4127                              <1> 
  4128                              <1> 
  4129                              <1> 
  4130                              <1> 
  4131                              <1>  %else
  4132                              <1>  %error "expected `if' before `else'"
  4133                              <1>  %endif
  4134 0000065D E8D1FF                  		call __reg_select_dev
  4135                                  	endif
  4136                              <1>  %assign elselevel 0
  4137                              <1>  %ifctx if
  4138                              <1>  %$ifnot:
  4139                              <1>  con_pop
  4140                              <1>  %elifctx else
  4141                              <1>  %assign elselevel %$elif_level
  4142                              <1>  %$ifend:
  4143                              <1>  con_pop
  4144                              <2>  %pop
  4145                              <2>  %assign __level__ __level__ - 1
  4146                              <1>  %elifctx elif
  4147                              <1>  %assign elselevel %$elif_level
  4148                              <1>  %$ifnot:
  4149                              <1>  con_pop
  4150                              <1>  %else
  4151                              <1>  %error "expected `if' or `else' before `endif'"
  4152                              <1>  %endif
  4153                              <1>  %rep elselevel
  4154                              <1>  %$ifend:
  4155                              <1>  con_pop
  4156                              <1>  %endrep
  4157                                  endp
  4158                              <1> %ifnctx proc
  4159                              <1>  %error "expected `proc' before `endp'"
  4160                              <1> %endif
  4161                              <1>  cat_lable %$return,__level__
  4162                              <2> %1%2:
  4163                              <1>  %if __save_all__ ==1
  4164                              <1>  popa
  4165                              <1>  %elif __save_all__ == 2
  4166                              <1>  popad
  4167                              <1>  %elif __save_args__ > 0
  4168                              <1>  %assign i 1
  4169                              <1>  %rep __save_args__
  4170                              <1>  linecat pop, %$save_argv,i
  4171                              <1>  %assign i i+1
  4172                              <1>  %endrep
  4173                              <2>  linecat pop, %$save_argv,i
  4174 00000660 5B                  <3>  %1 %2%3
  4175                              <2>  %assign i i+1
  4176                              <1>  %endif
  4177                              <1>  %if __have_frame__ > 0
  4178                              <1>  leave
  4179                              <1>  %endif
  4180                              <1> 
  4181                              <1>  %assign i 0
  4182                              <1>  %rep %$proc_args
  4183                              <1> 
  4184                              <1>  %assign i i+1
  4185                              <1>  %endrep
  4186                              <1> 
  4187                              <1>  %assign i 0
  4188                              <1>  %rep %$local_args
  4189                              <1> 
  4190                              <1>  %assign i i+1
  4191                              <1>  %endrep
  4192 00000661 C3                  <1>  ret
  4193                              <1>  con_pop
  4194                              <2>  %pop
  4195                              <2>  %assign __level__ __level__ - 1
  4196                              <1>  %assign __return__ __return__ - 1
  4197                                  
  4198                                  proc	reg_packet,withlocal,dir,packet_seg,packet_off,packet_len
  4199                              <1> GLOBAL %1
  4200                              <1> %1:
  4201                              <1> con_push proc
  4202                              <2>  %assign __lastlevel__ __level__
  4203                              <2>  %assign __level__ __level__ + 1
  4204                              <2>  %if __return__ > 0
  4205                              <2>  %assign con_return 1
  4206                              <2>  %else
  4207                              <2>  %assign con_return 0
  4208                              <2>  %endif
  4209                              <2> 
  4210                              <2>  %if __cont__ > 0
  4211                              <2>  %assign con_cont 1
  4212                              <2>  %else
  4213                              <2>  %assign con_cont 0
  4214                              <2>  %endif
  4215                              <2>  %if __break__ > 0
  4216                              <2>  %assign con_break 1
  4217                              <2>  %else
  4218                              <2>  %assign con_break 0
  4219                              <2>  %endif
  4220                              <2> 
  4221                              <2>  %ifidn %1,proc
  4222                              <2>  %assign con_return 0
  4223                              <2>  %elifidn %1,forcx
  4224                              <2>  %assign con_break 0
  4225                              <2>  %elifidn %1,repeat
  4226                              <2>  %assign con_cont 0
  4227                              <2>  %assign con_break 0
  4228                              <2>  %elifidn %1,while
  4229                              <2>  %assign con_cont 0
  4230                              <2>  %assign con_break 0
  4231                              <2>  %endif
  4232                              <2> 
  4233                              <2>  %if __cndblock__ == 1
  4234                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  4235                              <2>  %endif
  4236                              <2> 
  4237                              <2>  %push %1
  4238                              <2>  %if con_return
  4239                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  4240                              <2>  %endif
  4241                              <2>  %if con_break
  4242                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  4243                              <3> %define %1%2 %3%4
  4244                              <2>  %endif
  4245                              <2>  %if con_cont
  4246                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  4247                              <3> %define %1%2 %3%4
  4248                              <2>  %endif
  4249                              <2> 
  4250                              <2>  %ifidn %1,andblock
  4251                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  4252                              <2>  %elifidn %1,orblock
  4253                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  4254                              <2>  %endif
  4255                              <1> %assign __return__ __return__ + 1
  4256                              <1> %assign __have_frame__ 0
  4257                              <1> %assign %$have_local 0
  4258                              <1> %assign %$have_save 0
  4259                              <1> %assign __save_all__ 0
  4260                              <1> %assign %$local_args 0
  4261                              <1> %assign %$proc_args 0
  4262                              <1> %assign __save_args__ 0
  4263                              <1> %if %0 > 1
  4264                              <1>  %assign args %0 - 1
  4265                              <1>  %assign %$bp_off 4
  4266                              <1>  %assign i 0
  4267                              <1>  %rotate 1
  4268                              <1>  %ifidn %1,withlocal
  4269                              <1>  %assign %$have_local 1
  4270                              <1>  %assign args args -1
  4271                              <1>  %rotate 1
  4272                              <1>  %endif
  4273                              <1>  %assign %$proc_args args
  4274                              <1>  %rep args
  4275                              <1> 
  4276                              <1>  %%inputarg__%1 EQU %$bp_off
  4277                              <1>  %undef .%1
  4278                              <1>  %define .%1 %%inputarg__%1+bp
  4279                              <1>  cat_define %$proc_argv ,i,%1
  4280                              <1>  %assign %$bp_off %$bp_off + 2
  4281                              <1>  %assign i i+1
  4282                              <1>  %rotate 1
  4283                              <1>  %endrep
  4284                              <2> 
  4285                              <2>  %%inputarg__%1 EQU %$bp_off
  4286                              <2>  %undef .%1
  4287                              <2>  %define .%1 %%inputarg__%1+bp
  4288                              <2>  cat_define %$proc_argv ,i,%1
  4289                              <3> %define %1%2 %3
  4290                              <2>  %assign %$bp_off %$bp_off + 2
  4291                              <2>  %assign i i+1
  4292                              <2>  %rotate 1
  4293                              <2> 
  4294                              <2>  %%inputarg__%1 EQU %$bp_off
  4295                              <2>  %undef .%1
  4296                              <2>  %define .%1 %%inputarg__%1+bp
  4297                              <2>  cat_define %$proc_argv ,i,%1
  4298                              <3> %define %1%2 %3
  4299                              <2>  %assign %$bp_off %$bp_off + 2
  4300                              <2>  %assign i i+1
  4301                              <2>  %rotate 1
  4302                              <2> 
  4303                              <2>  %%inputarg__%1 EQU %$bp_off
  4304                              <2>  %undef .%1
  4305                              <2>  %define .%1 %%inputarg__%1+bp
  4306                              <2>  cat_define %$proc_argv ,i,%1
  4307                              <3> %define %1%2 %3
  4308                              <2>  %assign %$bp_off %$bp_off + 2
  4309                              <2>  %assign i i+1
  4310                              <2>  %rotate 1
  4311                              <2> 
  4312                              <2>  %%inputarg__%1 EQU %$bp_off
  4313                              <2>  %undef .%1
  4314                              <2>  %define .%1 %%inputarg__%1+bp
  4315                              <2>  cat_define %$proc_argv ,i,%1
  4316                              <3> %define %1%2 %3
  4317                              <2>  %assign %$bp_off %$bp_off + 2
  4318                              <2>  %assign i i+1
  4319                              <2>  %rotate 1
  4320                              <1>  %if %$have_local==0
  4321                              <1>  enter 0,0
  4322                              <1>  %assign __have_frame__ 1
  4323                              <1>  %endif
  4324                              <1> %endif
  4325                                  ; input:
  4326                                  ; return ax = 0 noerror, ah = error code al= error bit
  4327                                  ;	 cx = len
  4328                                  	local status,1,reason,1,bcnt,2,pre_fail_bit7,1
  4329                              <1> %ifctx proc
  4330                              <1>  %if %$have_local == 1
  4331                              <1>  %assign argc %0
  4332                              <1>  %assign local_vars 0
  4333                              <1>  %assign %$have_local 2
  4334                              <1>  %assign local_off 0
  4335                              <1> 
  4336                              <1>  %assign i 0
  4337                              <1>  %rep argc
  4338                              <1>  %ifnum %2
  4339                              <1>  %assign local_off local_off+%2
  4340                              <1>  %assign token_eat 2
  4341                              <1>  %else
  4342                              <1>  %assign local_off local_off+2
  4343                              <1>  %assign token_eat 1
  4344                              <1>  %endif
  4345                              <1> 
  4346                              <1>  %%local__%1 EQU local_off
  4347                              <1>  %undef .%1
  4348                              <1>  %define .%1 bp-%%local__%1
  4349                              <1>  cat_define %$proc_argv ,i,%1
  4350                              <1>  %assign argc argc-token_eat
  4351                              <1>  %if argc <= 0
  4352                              <1>  %exitrep
  4353                              <1>  %endif
  4354                              <1>  %assign i i+1
  4355                              <1>  %rotate token_eat
  4356                              <1>  %endrep
  4357                              <2>  %ifnum %2
  4358                              <2>  %assign local_off local_off+%2
  4359                              <2>  %assign token_eat 2
  4360                              <2>  %else
  4361                              <2>  %assign local_off local_off+2
  4362                              <2>  %assign token_eat 1
  4363                              <2>  %endif
  4364                              <2> 
  4365                              <2>  %%local__%1 EQU local_off
  4366                              <2>  %undef .%1
  4367                              <2>  %define .%1 bp-%%local__%1
  4368                              <2>  cat_define %$proc_argv ,i,%1
  4369                              <3> %define %1%2 %3
  4370                              <2>  %assign argc argc-token_eat
  4371                              <2>  %if argc <= 0
  4372                              <2>  %exitrep
  4373                              <2>  %endif
  4374                              <2>  %assign i i+1
  4375                              <2>  %rotate token_eat
  4376                              <2>  %ifnum %2
  4377                              <2>  %assign local_off local_off+%2
  4378                              <2>  %assign token_eat 2
  4379                              <2>  %else
  4380                              <2>  %assign local_off local_off+2
  4381                              <2>  %assign token_eat 1
  4382                              <2>  %endif
  4383                              <2> 
  4384                              <2>  %%local__%1 EQU local_off
  4385                              <2>  %undef .%1
  4386                              <2>  %define .%1 bp-%%local__%1
  4387                              <2>  cat_define %$proc_argv ,i,%1
  4388                              <3> %define %1%2 %3
  4389                              <2>  %assign argc argc-token_eat
  4390                              <2>  %if argc <= 0
  4391                              <2>  %exitrep
  4392                              <2>  %endif
  4393                              <2>  %assign i i+1
  4394                              <2>  %rotate token_eat
  4395                              <2>  %ifnum %2
  4396                              <2>  %assign local_off local_off+%2
  4397                              <2>  %assign token_eat 2
  4398                              <2>  %else
  4399                              <2>  %assign local_off local_off+2
  4400                              <2>  %assign token_eat 1
  4401                              <2>  %endif
  4402                              <2> 
  4403                              <2>  %%local__%1 EQU local_off
  4404                              <2>  %undef .%1
  4405                              <2>  %define .%1 bp-%%local__%1
  4406                              <2>  cat_define %$proc_argv ,i,%1
  4407                              <3> %define %1%2 %3
  4408                              <2>  %assign argc argc-token_eat
  4409                              <2>  %if argc <= 0
  4410                              <2>  %exitrep
  4411                              <2>  %endif
  4412                              <2>  %assign i i+1
  4413                              <2>  %rotate token_eat
  4414                              <2>  %ifnum %2
  4415                              <2>  %assign local_off local_off+%2
  4416                              <2>  %assign token_eat 2
  4417                              <2>  %else
  4418                              <2>  %assign local_off local_off+2
  4419                              <2>  %assign token_eat 1
  4420                              <2>  %endif
  4421                              <2> 
  4422                              <2>  %%local__%1 EQU local_off
  4423                              <2>  %undef .%1
  4424                              <2>  %define .%1 bp-%%local__%1
  4425                              <2>  cat_define %$proc_argv ,i,%1
  4426                              <3> %define %1%2 %3
  4427                              <2>  %assign argc argc-token_eat
  4428                              <2>  %if argc <= 0
  4429                              <2>  %exitrep
  4430                              <2>  %endif
  4431                              <2>  %assign i i+1
  4432                              <2>  %rotate token_eat
  4433                              <1>  %assign %$local_args i
  4434 00000662 C8050000            <1>  enter local_off,0
  4435                              <1>  %assign __have_frame__ 1
  4436                              <1>  %else
  4437                              <1>  %error "`proc' not declear `withlocal' as the first argument"
  4438                              <1>  %endif
  4439                              <1> %else
  4440                              <1>  %error "expected `proc' before `local'"
  4441                              <1> %endif
  4442                                  	save all
  4443                              <1> %ifctx proc
  4444                              <1>  %if %$have_local == 1
  4445                              <1>  %error "`save' must after `local'"
  4446                              <1>  %endif
  4447                              <1> 
  4448                              <1>  %ifidn all,%1
  4449                              <1>  %assign __save_all__ 1
  4450                              <1>  %if %0 > 1
  4451                              <1>  %ifidn frame,%2
  4452                              <1>  %if __have_frame__ == 0
  4453                              <1>  enter 0,0
  4454                              <1>  %assign __have_frame__ 1
  4455                              <1>  %assign local_off 0
  4456                              <1>  %endif
  4457                              <1>  %endif
  4458                              <1>  %endif
  4459 00000666 60                  <1>  pusha
  4460                              <1>  %if __have_frame__ == 1
  4461                              <1>  %undef __AX
  4462                              <1>  %undef __BX
  4463                              <1>  %undef __CX
  4464                              <1>  %undef __DX
  4465                              <1>  %undef __SI
  4466                              <1>  %undef __DI
  4467                              <1>  %idefine __AX bp-local_off - 2
  4468                              <1>  %idefine __CX bp-local_off - 4
  4469                              <1>  %idefine __DX bp-local_off - 6
  4470                              <1>  %idefine __BX bp-local_off - 8
  4471                              <1> 
  4472                              <1> 
  4473                              <1>  %idefine __SI bp-local_off - 14
  4474                              <1>  %idefine __DI bp-local_off - 16
  4475                              <1>  %endif
  4476                              <1>  %elifidn alld,%1
  4477                              <1>  %assign __save_all__ 2
  4478                              <1>  %if %0 > 1
  4479                              <1>  %ifidn frame,%2
  4480                              <1>  %if __have_frame__ == 0
  4481                              <1>  enter 0,0
  4482                              <1>  %assign __have_frame__ 1
  4483                              <1>  %assign local_off 0
  4484                              <1>  %endif
  4485                              <1>  %endif
  4486                              <1>  %endif
  4487                              <1>  pushad
  4488                              <1>  %if __have_frame__ == 1
  4489                              <1>  %undef __EAX
  4490                              <1>  %undef __EBX
  4491                              <1>  %undef __ECX
  4492                              <1>  %undef __EDX
  4493                              <1>  %undef __ESI
  4494                              <1>  %undef __EDI
  4495                              <1>  %idefine __EAX bp-local_off - 4
  4496                              <1>  %idefine __ECX bp-local_off - 8
  4497                              <1>  %idefine __EDX bp-local_off - 12
  4498                              <1>  %idefine __EBX bp-local_off - 16
  4499                              <1> 
  4500                              <1> 
  4501                              <1>  %idefine __ESI bp-local_off - 18
  4502                              <1>  %idefine __EDI bp-local_off - 32
  4503                              <1>  %endif
  4504                              <1> 
  4505                              <1>  %else
  4506                              <1>  %assign __save_args__ %0
  4507                              <1>  %assign __save_all__ 0
  4508                              <1>  %assign i %0
  4509                              <1>  %rep %0
  4510                              <1>  push %1
  4511                              <1>  cat_define %$save_argv ,i,%1
  4512                              <1>  %rotate 1
  4513                              <1>  %assign i i - 1
  4514                              <1>  %endrep
  4515                              <1>  %endif
  4516                              <1> %else
  4517                              <1>  %error "`save' must after `proc'"
  4518                              <1> %endif
  4519                                  %define NON_DATA 0x80
  4520                                  %define cmd_buff atapi_cmd_buffer
  4521                                  %define cmd_buff_len 12
  4522                                  %define cmd_DC	  CB_DC_HD15 
  4523                                  %define cmd_DC_ni CB_DC_HD15 | CB_DC_NIEN
  4524 00000667 E895FF                  	call set_timeout
  4525 0000066A C646FB00                	mov byte [.pre_fail_bit7],0
  4526                                  	
  4527                                  
  4528                                  ;	outbytes CB_DC,cmd_DC_ni,CB_FR,0,CB_SC,0,CB_SN,0,
  4529                                  	outbytes CB_DC,cmd_DC,CB_FR,0,CB_SC,0,CB_SN,0,
  4530                              <1> %assign LAST_AL 0x1000
  4531                              <1> %rep %0 / 2
  4532                              <1>  %ifnum %2
  4533                              <1>  %if LAST_AL != %2
  4534                              <1>  outbyte %1, %2
  4535                              <1>  %assign LAST_AL %2
  4536                              <1>  %else
  4537                              <1>  outbyte %1
  4538                              <1>  %endif
  4539                              <1>  %else
  4540                              <1>  outbyte %1, %2
  4541                              <1>  %endif
  4542                              <1>  %rotate 2
  4543                              <1> %endrep
  4544                              <2>  %ifnum %2
  4545                              <2>  %if LAST_AL != %2
  4546                              <2>  outbyte %1, %2
  4547                              <3> %if %0>1
  4548 0000066E B008                <3>  mov al,%2
  4549                              <3> %endif
  4550                              <3> %if %0>0
  4551 00000670 8B16[9900]          <3>  mov dx,[reg_addr+%1*2]
  4552                              <3> %endif
  4553 00000674 EE                  <3>  out dx,al
  4554                              <2>  %assign LAST_AL %2
  4555                              <2>  %else
  4556                              <2>  outbyte %1
  4557                              <2>  %endif
  4558                              <2>  %else
  4559                              <2>  outbyte %1, %2
  4560                              <2>  %endif
  4561                              <2>  %rotate 2
  4562                              <2>  %ifnum %2
  4563                              <2>  %if LAST_AL != %2
  4564                              <2>  outbyte %1, %2
  4565                              <3> %if %0>1
  4566 00000675 B000                <3>  mov al,%2
  4567                              <3> %endif
  4568                              <3> %if %0>0
  4569 00000677 8B16[8B00]          <3>  mov dx,[reg_addr+%1*2]
  4570                              <3> %endif
  4571 0000067B EE                  <3>  out dx,al
  4572                              <2>  %assign LAST_AL %2
  4573                              <2>  %else
  4574                              <2>  outbyte %1
  4575                              <2>  %endif
  4576                              <2>  %else
  4577                              <2>  outbyte %1, %2
  4578                              <2>  %endif
  4579                              <2>  %rotate 2
  4580                              <2>  %ifnum %2
  4581                              <2>  %if LAST_AL != %2
  4582                              <2>  outbyte %1, %2
  4583                              <2>  %assign LAST_AL %2
  4584                              <2>  %else
  4585                              <2>  outbyte %1
  4586                              <3> %if %0>1
  4587                              <3>  mov al,%2
  4588                              <3> %endif
  4589                              <3> %if %0>0
  4590 0000067C 8B16[8D00]          <3>  mov dx,[reg_addr+%1*2]
  4591                              <3> %endif
  4592 00000680 EE                  <3>  out dx,al
  4593                              <2>  %endif
  4594                              <2>  %else
  4595                              <2>  outbyte %1, %2
  4596                              <2>  %endif
  4597                              <2>  %rotate 2
  4598                              <2>  %ifnum %2
  4599                              <2>  %if LAST_AL != %2
  4600                              <2>  outbyte %1, %2
  4601                              <2>  %assign LAST_AL %2
  4602                              <2>  %else
  4603                              <2>  outbyte %1
  4604                              <3> %if %0>1
  4605                              <3>  mov al,%2
  4606                              <3> %endif
  4607                              <3> %if %0>0
  4608 00000681 8B16[8F00]          <3>  mov dx,[reg_addr+%1*2]
  4609                              <3> %endif
  4610 00000685 EE                  <3>  out dx,al
  4611                              <2>  %endif
  4612                              <2>  %else
  4613                              <2>  outbyte %1, %2
  4614                              <2>  %endif
  4615                              <2>  %rotate 2
  4616                                  	outbytes CB_CL,[.packet_len],CB_CH,[.packet_len+1]
  4617                              <1> %assign LAST_AL 0x1000
  4618                              <1> %rep %0 / 2
  4619                              <1>  %ifnum %2
  4620                              <1>  %if LAST_AL != %2
  4621                              <1>  outbyte %1, %2
  4622                              <1>  %assign LAST_AL %2
  4623                              <1>  %else
  4624                              <1>  outbyte %1
  4625                              <1>  %endif
  4626                              <1>  %else
  4627                              <1>  outbyte %1, %2
  4628                              <1>  %endif
  4629                              <1>  %rotate 2
  4630                              <1> %endrep
  4631                              <2>  %ifnum %2
  4632                              <2>  %if LAST_AL != %2
  4633                              <2>  outbyte %1, %2
  4634                              <2>  %assign LAST_AL %2
  4635                              <2>  %else
  4636                              <2>  outbyte %1
  4637                              <2>  %endif
  4638                              <2>  %else
  4639                              <2>  outbyte %1, %2
  4640                              <3> %if %0>1
  4641 00000686 8A460A              <3>  mov al,%2
  4642                              <3> %endif
  4643                              <3> %if %0>0
  4644 00000689 8B16[9100]          <3>  mov dx,[reg_addr+%1*2]
  4645                              <3> %endif
  4646 0000068D EE                  <3>  out dx,al
  4647                              <2>  %endif
  4648                              <2>  %rotate 2
  4649                              <2>  %ifnum %2
  4650                              <2>  %if LAST_AL != %2
  4651                              <2>  outbyte %1, %2
  4652                              <2>  %assign LAST_AL %2
  4653                              <2>  %else
  4654                              <2>  outbyte %1
  4655                              <2>  %endif
  4656                              <2>  %else
  4657                              <2>  outbyte %1, %2
  4658                              <3> %if %0>1
  4659 0000068E 8A460B              <3>  mov al,%2
  4660                              <3> %endif
  4661                              <3> %if %0>0
  4662 00000691 8B16[9300]          <3>  mov dx,[reg_addr+%1*2]
  4663                              <3> %endif
  4664 00000695 EE                  <3>  out dx,al
  4665                              <2>  %endif
  4666                              <2>  %rotate 2
  4667                                  	outbyte CB_DH,[reg_cur_dev]
  4668                              <1> %if %0>1
  4669 00000696 A0[0200]            <1>  mov al,%2
  4670                              <1> %endif
  4671                              <1> %if %0>0
  4672 00000699 8B16[9500]          <1>  mov dx,[reg_addr+%1*2]
  4673                              <1> %endif
  4674 0000069D EE                  <1>  out dx,al
  4675                                  	outbyte CB_CMD,CMD_PACKET
  4676                              <1> %if %0>1
  4677 0000069E B0A0                <1>  mov al,%2
  4678                              <1> %endif
  4679                              <1> %if %0>0
  4680 000006A0 8B16[9700]          <1>  mov dx,[reg_addr+%1*2]
  4681                              <1> %endif
  4682 000006A4 EE                  <1>  out dx,al
  4683 000006A5 E86FFF                  	call delay400ns
  4684 000006A8 E86BFF                  	call sub_atapi_delay
  4685 000006AB 29DB                    	sub bx,bx
  4686                                  ;	while {inbyte CB_ASTAT},{test al,CB_STAT_BSY|CB_STAT_ERR|CB_STAT_DRQ},z
  4687                                  	while {inbyte CB_ASTAT},{test al,CB_STAT_BSY},z
  4688                              <1> con_push while
  4689                              <2>  %assign __lastlevel__ __level__
  4690                              <2>  %assign __level__ __level__ + 1
  4691                              <2>  %if __return__ > 0
  4692                              <2>  %assign con_return 1
  4693                              <2>  %else
  4694                              <2>  %assign con_return 0
  4695                              <2>  %endif
  4696                              <2> 
  4697                              <2>  %if __cont__ > 0
  4698                              <2>  %assign con_cont 1
  4699                              <2>  %else
  4700                              <2>  %assign con_cont 0
  4701                              <2>  %endif
  4702                              <2>  %if __break__ > 0
  4703                              <2>  %assign con_break 1
  4704                              <2>  %else
  4705                              <2>  %assign con_break 0
  4706                              <2>  %endif
  4707                              <2> 
  4708                              <2>  %ifidn %1,proc
  4709                              <2>  %assign con_return 0
  4710                              <2>  %elifidn %1,forcx
  4711                              <2>  %assign con_break 0
  4712                              <2>  %elifidn %1,repeat
  4713                              <2>  %assign con_cont 0
  4714                              <2>  %assign con_break 0
  4715                              <2>  %elifidn %1,while
  4716                              <2>  %assign con_cont 0
  4717                              <2>  %assign con_break 0
  4718                              <2>  %endif
  4719                              <2> 
  4720                              <2>  %if __cndblock__ == 1
  4721                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  4722                              <2>  %endif
  4723                              <2> 
  4724                              <2>  %push %1
  4725                              <2>  %if con_return
  4726                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  4727                              <3> %define %1%2 %3%4
  4728                              <2>  %endif
  4729                              <2>  %if con_break
  4730                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  4731                              <2>  %endif
  4732                              <2>  %if con_cont
  4733                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  4734                              <2>  %endif
  4735                              <2> 
  4736                              <2>  %ifidn %1,andblock
  4737                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  4738                              <2>  %elifidn %1,orblock
  4739                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  4740                              <2>  %endif
  4741                              <1> %assign __break__ __break__ + 1
  4742                              <1> %assign __cont__ __cont__ + 1
  4743                              <1> %$begin:
  4744                              <1> cat_lable %$cont,__level__
  4745                              <2> %1%2:
  4746                              <1> %if %0 > 0
  4747                              <1>  %rep %0 -1
  4748                              <1>  %1
  4749                              <1>  %rotate 1
  4750                              <1>  %endrep
  4751                              <2>  %1
  4752 000006AD 8B16[9900]          <3>  mov dx,[reg_addr+%1*2]
  4753 000006B1 EC                  <3>  in al,dx
  4754                              <3>  %if %0 > 1
  4755                              <3>  mov %2,al
  4756                              <3>  %endif
  4757                              <2>  %rotate 1
  4758 000006B2 A880                <2>  %1
  4759                              <2>  %rotate 1
  4760 000006B4 7514                <1>  j%-1 %$end
  4761                              <1> %endif
  4762                                  		if 
  4763                              <1>  %rep %0 -1
  4764                              <1>  %1
  4765                              <1>  %rotate 1
  4766                              <1>  %endrep
  4767                              <1> 
  4768                              <1>  con_push if
  4769                              <2>  %assign __lastlevel__ __level__
  4770                              <2>  %assign __level__ __level__ + 1
  4771                              <2>  %if __return__ > 0
  4772                              <2>  %assign con_return 1
  4773                              <2>  %else
  4774                              <2>  %assign con_return 0
  4775                              <2>  %endif
  4776                              <2> 
  4777                              <2>  %if __cont__ > 0
  4778                              <2>  %assign con_cont 1
  4779                              <2>  %else
  4780                              <2>  %assign con_cont 0
  4781                              <2>  %endif
  4782                              <2>  %if __break__ > 0
  4783                              <2>  %assign con_break 1
  4784                              <2>  %else
  4785                              <2>  %assign con_break 0
  4786                              <2>  %endif
  4787                              <2> 
  4788                              <2>  %ifidn %1,proc
  4789                              <2>  %assign con_return 0
  4790                              <2>  %elifidn %1,forcx
  4791                              <2>  %assign con_break 0
  4792                              <2>  %elifidn %1,repeat
  4793                              <2>  %assign con_cont 0
  4794                              <2>  %assign con_break 0
  4795                              <2>  %elifidn %1,while
  4796                              <2>  %assign con_cont 0
  4797                              <2>  %assign con_break 0
  4798                              <2>  %endif
  4799                              <2> 
  4800                              <2>  %if __cndblock__ == 1
  4801                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  4802                              <2>  %endif
  4803                              <2> 
  4804                              <2>  %push %1
  4805                              <2>  %if con_return
  4806                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  4807                              <3> %define %1%2 %3%4
  4808                              <2>  %endif
  4809                              <2>  %if con_break
  4810                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  4811                              <3> %define %1%2 %3%4
  4812                              <2>  %endif
  4813                              <2>  %if con_cont
  4814                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  4815                              <3> %define %1%2 %3%4
  4816                              <2>  %endif
  4817                              <2> 
  4818                              <2>  %ifidn %1,andblock
  4819                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  4820                              <2>  %elifidn %1,orblock
  4821                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  4822                              <2>  %endif
  4823                              <1> 
  4824                              <1>  %if %0 > 0
  4825                              <1>  j%-1 %$ifnot
  4826                              <1>  %endif
  4827                              <1>  %assign %$elif_level 0
  4828                                  		orblock
  4829                              <1>  %assign __cndblock__ __cndblock__ + 1
  4830                              <1>  con_push orblock
  4831                              <2>  %assign __lastlevel__ __level__
  4832                              <2>  %assign __level__ __level__ + 1
  4833                              <2>  %if __return__ > 0
  4834                              <2>  %assign con_return 1
  4835                              <2>  %else
  4836                              <2>  %assign con_return 0
  4837                              <2>  %endif
  4838                              <2> 
  4839                              <2>  %if __cont__ > 0
  4840                              <2>  %assign con_cont 1
  4841                              <2>  %else
  4842                              <2>  %assign con_cont 0
  4843                              <2>  %endif
  4844                              <2>  %if __break__ > 0
  4845                              <2>  %assign con_break 1
  4846                              <2>  %else
  4847                              <2>  %assign con_break 0
  4848                              <2>  %endif
  4849                              <2> 
  4850                              <2>  %ifidn %1,proc
  4851                              <2>  %assign con_return 0
  4852                              <2>  %elifidn %1,forcx
  4853                              <2>  %assign con_break 0
  4854                              <2>  %elifidn %1,repeat
  4855                              <2>  %assign con_cont 0
  4856                              <2>  %assign con_break 0
  4857                              <2>  %elifidn %1,while
  4858                              <2>  %assign con_cont 0
  4859                              <2>  %assign con_break 0
  4860                              <2>  %endif
  4861                              <2> 
  4862                              <2>  %if __cndblock__ == 1
  4863                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  4864                              <3> %define %1%2 %3%4
  4865                              <2>  %endif
  4866                              <2> 
  4867                              <2>  %push %1
  4868                              <2>  %if con_return
  4869                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  4870                              <3> %define %1%2 %3%4
  4871                              <2>  %endif
  4872                              <2>  %if con_break
  4873                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  4874                              <3> %define %1%2 %3%4
  4875                              <2>  %endif
  4876                              <2>  %if con_cont
  4877                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  4878                              <3> %define %1%2 %3%4
  4879                              <2>  %endif
  4880                              <2> 
  4881                              <2>  %ifidn %1,andblock
  4882                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  4883                              <2>  %elifidn %1,orblock
  4884                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  4885                              <3> %define %1%2 %3%4
  4886                              <2>  %endif
  4887                                  			condiction {test al, CB_STAT_DRQ}, nz
  4888                              <1>  %rep %0 -1
  4889                              <1>  %1
  4890                              <1>  %rotate 1
  4891                              <1>  %endrep
  4892 000006B6 A808                <2>  %1
  4893                              <2>  %rotate 1
  4894                              <1>  %ifctx andblock
  4895                              <1>  cat_jnc %1,%$ifnot,__level__
  4896                              <1>  %elifctx orblock
  4897 000006B8 7504                <1>  j%+1 %$iftrue
  4898                              <1>  %else
  4899                              <1>  %error "not in the andblock or orblock"
  4900                              <1>  %endif
  4901                                  			condiction {test al, CB_STAT_ERR}, nz
  4902                              <1>  %rep %0 -1
  4903                              <1>  %1
  4904                              <1>  %rotate 1
  4905                              <1>  %endrep
  4906 000006BA A801                <2>  %1
  4907                              <2>  %rotate 1
  4908                              <1>  %ifctx andblock
  4909                              <1>  cat_jnc %1,%$ifnot,__level__
  4910                              <1>  %elifctx orblock
  4911 000006BC 7500                <1>  j%+1 %$iftrue
  4912                              <1>  %else
  4913                              <1>  %error "not in the andblock or orblock"
  4914                              <1>  %endif
  4915                                  		endblock then
  4916                              <1>  %ifctx orblock
  4917                              <1> 
  4918                              <1>  %$iftrue:
  4919                              <1>  %elifctx andblock
  4920                              <1>  %else
  4921                              <1>  %error "not in andblock or orblock"
  4922                              <1>  %endif
  4923                              <1>  con_pop
  4924                              <2>  %pop
  4925                              <2>  %assign __level__ __level__ - 1
  4926                              <1>  %assign __cndblock__ __cndblock__ - 1
  4927                                  			break
  4928                              <1> %if %0 > 0
  4929                              <1>  %ifidn %1,if
  4930                              <1>  %rotate 1
  4931                              <1>  %rep %0 - 2
  4932                              <1>  %1
  4933                              <1>  %rotate 1
  4934                              <1>  %endrep
  4935                              <1>  cat_jc %1,%$break,__level__
  4936                              <1>  %else
  4937                              <1>  %error "expect `if' after `break'"
  4938                              <1>  %endif
  4939                              <1> %else
  4940                              <1>  cat_jmp %$break,__level__
  4941 000006BE EB0A                <2>  jmp short %1%2
  4942                              <1> %endif
  4943                                  		endif
  4944                              <1>  %assign elselevel 0
  4945                              <1>  %ifctx if
  4946                              <1>  %$ifnot:
  4947                              <1>  con_pop
  4948                              <2>  %pop
  4949                              <2>  %assign __level__ __level__ - 1
  4950                              <1>  %elifctx else
  4951                              <1>  %assign elselevel %$elif_level
  4952                              <1>  %$ifend:
  4953                              <1>  con_pop
  4954                              <1>  %elifctx elif
  4955                              <1>  %assign elselevel %$elif_level
  4956                              <1>  %$ifnot:
  4957                              <1>  con_pop
  4958                              <1>  %else
  4959                              <1>  %error "expected `if' or `else' before `endif'"
  4960                              <1>  %endif
  4961                              <1>  %rep elselevel
  4962                              <1>  %$ifend:
  4963                              <1>  con_pop
  4964                              <1>  %endrep
  4965 000006C0 80CB01                  		or bl,FAILBIT0
  4966                                  		break if, {call check_timeout},is_timeout
  4967                              <1> %if %0 > 0
  4968                              <1>  %ifidn %1,if
  4969                              <1>  %rotate 1
  4970                              <1>  %rep %0 - 2
  4971                              <1>  %1
  4972                              <1>  %rotate 1
  4973                              <1>  %endrep
  4974 000006C3 E847FF              <2>  %1
  4975                              <2>  %rotate 1
  4976                              <1>  cat_jc %1,%$break,__level__
  4977 000006C6 7702                <2>  j%+1 %2%3
  4978                              <1>  %else
  4979                              <1>  %error "expect `if' after `break'"
  4980                              <1>  %endif
  4981                              <1> %else
  4982                              <1>  cat_jmp %$break,__level__
  4983                              <1> %endif
  4984                                  	endwhile
  4985                              <1>  %ifctx while
  4986 000006C8 EBE3                <1>  jmp %$begin
  4987                              <1>  %$end:
  4988                              <1>  cat_lable %$break,__level__
  4989                              <2> %1%2:
  4990                              <1>  %else
  4991                              <1>  %error "expected `while' before `endwhile'"
  4992                              <1>  %endif
  4993                              <1> con_pop
  4994                              <2>  %pop
  4995                              <2>  %assign __level__ __level__ - 1
  4996                              <1> %assign __break__ __break__ + 1
  4997                              <1> %assign __cont__ __cont__ + 1
  4998                                  	
  4999                                  	while {inbyte CB_ASTAT},{test al, CB_STAT_BSY}, nz
  5000                              <1> con_push while
  5001                              <2>  %assign __lastlevel__ __level__
  5002                              <2>  %assign __level__ __level__ + 1
  5003                              <2>  %if __return__ > 0
  5004                              <2>  %assign con_return 1
  5005                              <2>  %else
  5006                              <2>  %assign con_return 0
  5007                              <2>  %endif
  5008                              <2> 
  5009                              <2>  %if __cont__ > 0
  5010                              <2>  %assign con_cont 1
  5011                              <2>  %else
  5012                              <2>  %assign con_cont 0
  5013                              <2>  %endif
  5014                              <2>  %if __break__ > 0
  5015                              <2>  %assign con_break 1
  5016                              <2>  %else
  5017                              <2>  %assign con_break 0
  5018                              <2>  %endif
  5019                              <2> 
  5020                              <2>  %ifidn %1,proc
  5021                              <2>  %assign con_return 0
  5022                              <2>  %elifidn %1,forcx
  5023                              <2>  %assign con_break 0
  5024                              <2>  %elifidn %1,repeat
  5025                              <2>  %assign con_cont 0
  5026                              <2>  %assign con_break 0
  5027                              <2>  %elifidn %1,while
  5028                              <2>  %assign con_cont 0
  5029                              <2>  %assign con_break 0
  5030                              <2>  %endif
  5031                              <2> 
  5032                              <2>  %if __cndblock__ == 1
  5033                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  5034                              <2>  %endif
  5035                              <2> 
  5036                              <2>  %push %1
  5037                              <2>  %if con_return
  5038                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  5039                              <3> %define %1%2 %3%4
  5040                              <2>  %endif
  5041                              <2>  %if con_break
  5042                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  5043                              <2>  %endif
  5044                              <2>  %if con_cont
  5045                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  5046                              <2>  %endif
  5047                              <2> 
  5048                              <2>  %ifidn %1,andblock
  5049                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5050                              <2>  %elifidn %1,orblock
  5051                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5052                              <2>  %endif
  5053                              <1> %assign __break__ __break__ + 1
  5054                              <1> %assign __cont__ __cont__ + 1
  5055                              <1> %$begin:
  5056                              <1> cat_lable %$cont,__level__
  5057                              <2> %1%2:
  5058                              <1> %if %0 > 0
  5059                              <1>  %rep %0 -1
  5060                              <1>  %1
  5061                              <1>  %rotate 1
  5062                              <1>  %endrep
  5063                              <2>  %1
  5064 000006CA 8B16[9900]          <3>  mov dx,[reg_addr+%1*2]
  5065 000006CE EC                  <3>  in al,dx
  5066                              <3>  %if %0 > 1
  5067                              <3>  mov %2,al
  5068                              <3>  %endif
  5069                              <2>  %rotate 1
  5070 000006CF A880                <2>  %1
  5071                              <2>  %rotate 1
  5072 000006D1 7410                <1>  j%-1 %$end
  5073                              <1> %endif
  5074                                  ;		inbyte CB_ASTAT
  5075                                  ;		break if, {test al,CB_STAT_BSY},z
  5076                                  		if {call check_timeout},is_timeout
  5077                              <1>  %rep %0 -1
  5078                              <1>  %1
  5079                              <1>  %rotate 1
  5080                              <1>  %endrep
  5081 000006D3 E837FF              <2>  %1
  5082                              <2>  %rotate 1
  5083                              <1> 
  5084                              <1>  con_push if
  5085                              <2>  %assign __lastlevel__ __level__
  5086                              <2>  %assign __level__ __level__ + 1
  5087                              <2>  %if __return__ > 0
  5088                              <2>  %assign con_return 1
  5089                              <2>  %else
  5090                              <2>  %assign con_return 0
  5091                              <2>  %endif
  5092                              <2> 
  5093                              <2>  %if __cont__ > 0
  5094                              <2>  %assign con_cont 1
  5095                              <2>  %else
  5096                              <2>  %assign con_cont 0
  5097                              <2>  %endif
  5098                              <2>  %if __break__ > 0
  5099                              <2>  %assign con_break 1
  5100                              <2>  %else
  5101                              <2>  %assign con_break 0
  5102                              <2>  %endif
  5103                              <2> 
  5104                              <2>  %ifidn %1,proc
  5105                              <2>  %assign con_return 0
  5106                              <2>  %elifidn %1,forcx
  5107                              <2>  %assign con_break 0
  5108                              <2>  %elifidn %1,repeat
  5109                              <2>  %assign con_cont 0
  5110                              <2>  %assign con_break 0
  5111                              <2>  %elifidn %1,while
  5112                              <2>  %assign con_cont 0
  5113                              <2>  %assign con_break 0
  5114                              <2>  %endif
  5115                              <2> 
  5116                              <2>  %if __cndblock__ == 1
  5117                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  5118                              <2>  %endif
  5119                              <2> 
  5120                              <2>  %push %1
  5121                              <2>  %if con_return
  5122                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  5123                              <3> %define %1%2 %3%4
  5124                              <2>  %endif
  5125                              <2>  %if con_break
  5126                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  5127                              <3> %define %1%2 %3%4
  5128                              <2>  %endif
  5129                              <2>  %if con_cont
  5130                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  5131                              <3> %define %1%2 %3%4
  5132                              <2>  %endif
  5133                              <2> 
  5134                              <2>  %ifidn %1,andblock
  5135                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5136                              <2>  %elifidn %1,orblock
  5137                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5138                              <2>  %endif
  5139                              <1> 
  5140                              <1>  %if %0 > 0
  5141 000006D6 7609                <1>  j%-1 %$ifnot
  5142                              <1>  %endif
  5143                              <1>  %assign %$elif_level 0
  5144 000006D8 C74604FFFF              			mov word [.dir],-1
  5145 000006DD B733                    			mov bh, 51
  5146                                  			break
  5147                              <1> %if %0 > 0
  5148                              <1>  %ifidn %1,if
  5149                              <1>  %rotate 1
  5150                              <1>  %rep %0 - 2
  5151                              <1>  %1
  5152                              <1>  %rotate 1
  5153                              <1>  %endrep
  5154                              <1>  cat_jc %1,%$break,__level__
  5155                              <1>  %else
  5156                              <1>  %error "expect `if' after `break'"
  5157                              <1>  %endif
  5158                              <1> %else
  5159                              <1>  cat_jmp %$break,__level__
  5160 000006DF EB02                <2>  jmp short %1%2
  5161                              <1> %endif
  5162                                  		endif
  5163                              <1>  %assign elselevel 0
  5164                              <1>  %ifctx if
  5165                              <1>  %$ifnot:
  5166                              <1>  con_pop
  5167                              <2>  %pop
  5168                              <2>  %assign __level__ __level__ - 1
  5169                              <1>  %elifctx else
  5170                              <1>  %assign elselevel %$elif_level
  5171                              <1>  %$ifend:
  5172                              <1>  con_pop
  5173                              <1>  %elifctx elif
  5174                              <1>  %assign elselevel %$elif_level
  5175                              <1>  %$ifnot:
  5176                              <1>  con_pop
  5177                              <1>  %else
  5178                              <1>  %error "expected `if' or `else' before `endif'"
  5179                              <1>  %endif
  5180                              <1>  %rep elselevel
  5181                              <1>  %$ifend:
  5182                              <1>  con_pop
  5183                              <1>  %endrep
  5184                                  	endwhile
  5185                              <1>  %ifctx while
  5186 000006E1 EBE7                <1>  jmp %$begin
  5187                              <1>  %$end:
  5188                              <1>  cat_lable %$break,__level__
  5189                              <2> %1%2:
  5190                              <1>  %else
  5191                              <1>  %error "expected `while' before `endwhile'"
  5192                              <1>  %endif
  5193                              <1> con_pop
  5194                              <2>  %pop
  5195                              <2>  %assign __level__ __level__ - 1
  5196                              <1> %assign __break__ __break__ + 1
  5197                              <1> %assign __cont__ __cont__ + 1
  5198                                  	
  5199                                  	goton .skip_out,if,{cmp bh,0},nz
  5200                              <1> %if %0 > 1
  5201                              <1>  %ifidn %2,if
  5202                              <1>  %rotate 1
  5203                              <1>  %rep %0 - 3
  5204                              <1>  %2
  5205                              <1>  %rotate 1
  5206                              <1>  %endrep
  5207 000006E3 80FF00              <2>  %2
  5208                              <2>  %rotate 1
  5209                              <1>  %rotate 1
  5210 000006E6 0F855A01            <1>  j%+1 NEAR %2
  5211                              <1>  %else
  5212                              <1>  %error "expect `if' after `continue'"
  5213                              <1>  %endif
  5214                              <1> %else
  5215                              <1>  jmp %1
  5216                              <1> %endif
  5217                                  	
  5218                                  	
  5219                                  	inbyte CB_STAT,[.status]
  5220 000006EA 8B16[9700]          <1>  mov dx,[reg_addr+%1*2]
  5221 000006EE EC                  <1>  in al,dx
  5222                              <1>  %if %0 > 1
  5223 000006EF 8846FF              <1>  mov %2,al
  5224                              <1>  %endif
  5225                                  	inbyte CB_SC, [.reason]
  5226 000006F2 8B16[8D00]          <1>  mov dx,[reg_addr+%1*2]
  5227 000006F6 EC                  <1>  in al,dx
  5228                              <1>  %if %0 > 1
  5229 000006F7 8846FE              <1>  mov %2,al
  5230                              <1>  %endif
  5231                                  	inbyte CB_CL, [.bcnt]
  5232 000006FA 8B16[9100]          <1>  mov dx,[reg_addr+%1*2]
  5233 000006FE EC                  <1>  in al,dx
  5234                              <1>  %if %0 > 1
  5235 000006FF 8846FC              <1>  mov %2,al
  5236                              <1>  %endif
  5237                                  	inbyte CB_CH, [.bcnt+1]
  5238 00000702 8B16[9300]          <1>  mov dx,[reg_addr+%1*2]
  5239 00000706 EC                  <1>  in al,dx
  5240                              <1>  %if %0 > 1
  5241 00000707 8846FD              <1>  mov %2,al
  5242                              <1>  %endif
  5243                                  
  5244 0000070A 8A46FF                  	mov al,[.status]
  5245 0000070D 2488                    	and al,CB_STAT_BSY | CB_STAT_DRQ
  5246                                  	if {cmp al,CB_STAT_DRQ},nz
  5247                              <1>  %rep %0 -1
  5248                              <1>  %1
  5249                              <1>  %rotate 1
  5250                              <1>  %endrep
  5251 0000070F 3C08                <2>  %1
  5252                              <2>  %rotate 1
  5253                              <1> 
  5254                              <1>  con_push if
  5255                              <2>  %assign __lastlevel__ __level__
  5256                              <2>  %assign __level__ __level__ + 1
  5257                              <2>  %if __return__ > 0
  5258                              <2>  %assign con_return 1
  5259                              <2>  %else
  5260                              <2>  %assign con_return 0
  5261                              <2>  %endif
  5262                              <2> 
  5263                              <2>  %if __cont__ > 0
  5264                              <2>  %assign con_cont 1
  5265                              <2>  %else
  5266                              <2>  %assign con_cont 0
  5267                              <2>  %endif
  5268                              <2>  %if __break__ > 0
  5269                              <2>  %assign con_break 1
  5270                              <2>  %else
  5271                              <2>  %assign con_break 0
  5272                              <2>  %endif
  5273                              <2> 
  5274                              <2>  %ifidn %1,proc
  5275                              <2>  %assign con_return 0
  5276                              <2>  %elifidn %1,forcx
  5277                              <2>  %assign con_break 0
  5278                              <2>  %elifidn %1,repeat
  5279                              <2>  %assign con_cont 0
  5280                              <2>  %assign con_break 0
  5281                              <2>  %elifidn %1,while
  5282                              <2>  %assign con_cont 0
  5283                              <2>  %assign con_break 0
  5284                              <2>  %endif
  5285                              <2> 
  5286                              <2>  %if __cndblock__ == 1
  5287                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  5288                              <2>  %endif
  5289                              <2> 
  5290                              <2>  %push %1
  5291                              <2>  %if con_return
  5292                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  5293                              <3> %define %1%2 %3%4
  5294                              <2>  %endif
  5295                              <2>  %if con_break
  5296                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  5297                              <3> %define %1%2 %3%4
  5298                              <2>  %endif
  5299                              <2>  %if con_cont
  5300                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  5301                              <3> %define %1%2 %3%4
  5302                              <2>  %endif
  5303                              <2> 
  5304                              <2>  %ifidn %1,andblock
  5305                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5306                              <2>  %elifidn %1,orblock
  5307                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5308                              <2>  %endif
  5309                              <1> 
  5310                              <1>  %if %0 > 0
  5311 00000711 7405                <1>  j%-1 %$ifnot
  5312                              <1>  %endif
  5313                              <1>  %assign %$elif_level 0
  5314 00000713 B734                    		mov bh,52
  5315                                  %ifdef DEBUG
  5316                                  		print_stat [.status],"%b %s check BSY=0 DRQ=1 now\n",bx,STAT_BUF
  5317                                  %endif
  5318                                  		goto .skip_out
  5319                              <1> %if %0 > 1
  5320                              <1>  %ifidn %2,if
  5321                              <1>  %rotate 1
  5322                              <1>  %rep %0 - 3
  5323                              <1>  %2
  5324                              <1>  %rotate 1
  5325                              <1>  %endrep
  5326                              <1>  %rotate 1
  5327                              <1>  j%+1 %2
  5328                              <1>  %else
  5329                              <1>  %error "expect `if' after `continue'"
  5330                              <1>  %endif
  5331                              <1> %else
  5332 00000715 E92C01              <1>  jmp %1
  5333                              <1> %endif
  5334                                  	endif
  5335                              <1>  %assign elselevel 0
  5336                              <1>  %ifctx if
  5337                              <1>  %$ifnot:
  5338                              <1>  con_pop
  5339                              <2>  %pop
  5340                              <2>  %assign __level__ __level__ - 1
  5341                              <1>  %elifctx else
  5342                              <1>  %assign elselevel %$elif_level
  5343                              <1>  %$ifend:
  5344                              <1>  con_pop
  5345                              <1>  %elifctx elif
  5346                              <1>  %assign elselevel %$elif_level
  5347                              <1>  %$ifnot:
  5348                              <1>  con_pop
  5349                              <1>  %else
  5350                              <1>  %error "expected `if' or `else' before `endif'"
  5351                              <1>  %endif
  5352                              <1>  %rep elselevel
  5353                              <1>  %$ifend:
  5354                              <1>  con_pop
  5355                              <1>  %endrep
  5356                                  
  5357                                  %ifdef sane_check	
  5358 00000718 8A46FE                  	mov al,[.reason]
  5359                                  	if
  5360                              <1>  %rep %0 -1
  5361                              <1>  %1
  5362                              <1>  %rotate 1
  5363                              <1>  %endrep
  5364                              <1> 
  5365                              <1>  con_push if
  5366                              <2>  %assign __lastlevel__ __level__
  5367                              <2>  %assign __level__ __level__ + 1
  5368                              <2>  %if __return__ > 0
  5369                              <2>  %assign con_return 1
  5370                              <2>  %else
  5371                              <2>  %assign con_return 0
  5372                              <2>  %endif
  5373                              <2> 
  5374                              <2>  %if __cont__ > 0
  5375                              <2>  %assign con_cont 1
  5376                              <2>  %else
  5377                              <2>  %assign con_cont 0
  5378                              <2>  %endif
  5379                              <2>  %if __break__ > 0
  5380                              <2>  %assign con_break 1
  5381                              <2>  %else
  5382                              <2>  %assign con_break 0
  5383                              <2>  %endif
  5384                              <2> 
  5385                              <2>  %ifidn %1,proc
  5386                              <2>  %assign con_return 0
  5387                              <2>  %elifidn %1,forcx
  5388                              <2>  %assign con_break 0
  5389                              <2>  %elifidn %1,repeat
  5390                              <2>  %assign con_cont 0
  5391                              <2>  %assign con_break 0
  5392                              <2>  %elifidn %1,while
  5393                              <2>  %assign con_cont 0
  5394                              <2>  %assign con_break 0
  5395                              <2>  %endif
  5396                              <2> 
  5397                              <2>  %if __cndblock__ == 1
  5398                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  5399                              <2>  %endif
  5400                              <2> 
  5401                              <2>  %push %1
  5402                              <2>  %if con_return
  5403                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  5404                              <3> %define %1%2 %3%4
  5405                              <2>  %endif
  5406                              <2>  %if con_break
  5407                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  5408                              <3> %define %1%2 %3%4
  5409                              <2>  %endif
  5410                              <2>  %if con_cont
  5411                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  5412                              <3> %define %1%2 %3%4
  5413                              <2>  %endif
  5414                              <2> 
  5415                              <2>  %ifidn %1,andblock
  5416                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5417                              <2>  %elifidn %1,orblock
  5418                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5419                              <2>  %endif
  5420                              <1> 
  5421                              <1>  %if %0 > 0
  5422                              <1>  j%-1 %$ifnot
  5423                              <1>  %endif
  5424                              <1>  %assign %$elif_level 0
  5425                                  	orblock
  5426                              <1>  %assign __cndblock__ __cndblock__ + 1
  5427                              <1>  con_push orblock
  5428                              <2>  %assign __lastlevel__ __level__
  5429                              <2>  %assign __level__ __level__ + 1
  5430                              <2>  %if __return__ > 0
  5431                              <2>  %assign con_return 1
  5432                              <2>  %else
  5433                              <2>  %assign con_return 0
  5434                              <2>  %endif
  5435                              <2> 
  5436                              <2>  %if __cont__ > 0
  5437                              <2>  %assign con_cont 1
  5438                              <2>  %else
  5439                              <2>  %assign con_cont 0
  5440                              <2>  %endif
  5441                              <2>  %if __break__ > 0
  5442                              <2>  %assign con_break 1
  5443                              <2>  %else
  5444                              <2>  %assign con_break 0
  5445                              <2>  %endif
  5446                              <2> 
  5447                              <2>  %ifidn %1,proc
  5448                              <2>  %assign con_return 0
  5449                              <2>  %elifidn %1,forcx
  5450                              <2>  %assign con_break 0
  5451                              <2>  %elifidn %1,repeat
  5452                              <2>  %assign con_cont 0
  5453                              <2>  %assign con_break 0
  5454                              <2>  %elifidn %1,while
  5455                              <2>  %assign con_cont 0
  5456                              <2>  %assign con_break 0
  5457                              <2>  %endif
  5458                              <2> 
  5459                              <2>  %if __cndblock__ == 1
  5460                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  5461                              <3> %define %1%2 %3%4
  5462                              <2>  %endif
  5463                              <2> 
  5464                              <2>  %push %1
  5465                              <2>  %if con_return
  5466                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  5467                              <3> %define %1%2 %3%4
  5468                              <2>  %endif
  5469                              <2>  %if con_break
  5470                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  5471                              <3> %define %1%2 %3%4
  5472                              <2>  %endif
  5473                              <2>  %if con_cont
  5474                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  5475                              <3> %define %1%2 %3%4
  5476                              <2>  %endif
  5477                              <2> 
  5478                              <2>  %ifidn %1,andblock
  5479                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5480                              <2>  %elifidn %1,orblock
  5481                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5482                              <3> %define %1%2 %3%4
  5483                              <2>  %endif
  5484                                  		condiction  {test al,CB_SC_P_TAG | CB_SC_P_REL | CB_SC_P_IO},nz
  5485                              <1>  %rep %0 -1
  5486                              <1>  %1
  5487                              <1>  %rotate 1
  5488                              <1>  %endrep
  5489 0000071B A8FE                <2>  %1
  5490                              <2>  %rotate 1
  5491                              <1>  %ifctx andblock
  5492                              <1>  cat_jnc %1,%$ifnot,__level__
  5493                              <1>  %elifctx orblock
  5494 0000071D 7504                <1>  j%+1 %$iftrue
  5495                              <1>  %else
  5496                              <1>  %error "not in the andblock or orblock"
  5497                              <1>  %endif
  5498                                  		condiction  {test al,CB_SC_P_CD},z
  5499                              <1>  %rep %0 -1
  5500                              <1>  %1
  5501                              <1>  %rotate 1
  5502                              <1>  %endrep
  5503 0000071F A801                <2>  %1
  5504                              <2>  %rotate 1
  5505                              <1>  %ifctx andblock
  5506                              <1>  cat_jnc %1,%$ifnot,__level__
  5507                              <1>  %elifctx orblock
  5508 00000721 7400                <1>  j%+1 %$iftrue
  5509                              <1>  %else
  5510                              <1>  %error "not in the andblock or orblock"
  5511                              <1>  %endif
  5512                                  	endblock then
  5513                              <1>  %ifctx orblock
  5514                              <1> 
  5515                              <1>  %$iftrue:
  5516                              <1>  %elifctx andblock
  5517                              <1>  %else
  5518                              <1>  %error "not in andblock or orblock"
  5519                              <1>  %endif
  5520                              <1>  con_pop
  5521                              <2>  %pop
  5522                              <2>  %assign __level__ __level__ - 1
  5523                              <1>  %assign __cndblock__ __cndblock__ - 1
  5524 00000723 80CB04                  		or bl,FAILBIT2
  5525                                  %ifdef DEBUG
  5526                                  		print_stat [.status],"%b %s %b check reason\n",bx,STAT_BUF,[.reason]
  5527                                  %endif
  5528                                  	endif
  5529                              <1>  %assign elselevel 0
  5530                              <1>  %ifctx if
  5531                              <1>  %$ifnot:
  5532                              <1>  con_pop
  5533                              <2>  %pop
  5534                              <2>  %assign __level__ __level__ - 1
  5535                              <1>  %elifctx else
  5536                              <1>  %assign elselevel %$elif_level
  5537                              <1>  %$ifend:
  5538                              <1>  con_pop
  5539                              <1>  %elifctx elif
  5540                              <1>  %assign elselevel %$elif_level
  5541                              <1>  %$ifnot:
  5542                              <1>  con_pop
  5543                              <1>  %else
  5544                              <1>  %error "expected `if' or `else' before `endif'"
  5545                              <1>  %endif
  5546                              <1>  %rep elselevel
  5547                              <1>  %$ifend:
  5548                              <1>  con_pop
  5549                              <1>  %endrep
  5550                                  	
  5551 00000726 8B46FC                  	mov ax,[.bcnt]
  5552                                  	if {cmp ax,[.packet_len]},nz
  5553                              <1>  %rep %0 -1
  5554                              <1>  %1
  5555                              <1>  %rotate 1
  5556                              <1>  %endrep
  5557 00000729 3B460A              <2>  %1
  5558                              <2>  %rotate 1
  5559                              <1> 
  5560                              <1>  con_push if
  5561                              <2>  %assign __lastlevel__ __level__
  5562                              <2>  %assign __level__ __level__ + 1
  5563                              <2>  %if __return__ > 0
  5564                              <2>  %assign con_return 1
  5565                              <2>  %else
  5566                              <2>  %assign con_return 0
  5567                              <2>  %endif
  5568                              <2> 
  5569                              <2>  %if __cont__ > 0
  5570                              <2>  %assign con_cont 1
  5571                              <2>  %else
  5572                              <2>  %assign con_cont 0
  5573                              <2>  %endif
  5574                              <2>  %if __break__ > 0
  5575                              <2>  %assign con_break 1
  5576                              <2>  %else
  5577                              <2>  %assign con_break 0
  5578                              <2>  %endif
  5579                              <2> 
  5580                              <2>  %ifidn %1,proc
  5581                              <2>  %assign con_return 0
  5582                              <2>  %elifidn %1,forcx
  5583                              <2>  %assign con_break 0
  5584                              <2>  %elifidn %1,repeat
  5585                              <2>  %assign con_cont 0
  5586                              <2>  %assign con_break 0
  5587                              <2>  %elifidn %1,while
  5588                              <2>  %assign con_cont 0
  5589                              <2>  %assign con_break 0
  5590                              <2>  %endif
  5591                              <2> 
  5592                              <2>  %if __cndblock__ == 1
  5593                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  5594                              <2>  %endif
  5595                              <2> 
  5596                              <2>  %push %1
  5597                              <2>  %if con_return
  5598                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  5599                              <3> %define %1%2 %3%4
  5600                              <2>  %endif
  5601                              <2>  %if con_break
  5602                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  5603                              <3> %define %1%2 %3%4
  5604                              <2>  %endif
  5605                              <2>  %if con_cont
  5606                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  5607                              <3> %define %1%2 %3%4
  5608                              <2>  %endif
  5609                              <2> 
  5610                              <2>  %ifidn %1,andblock
  5611                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5612                              <2>  %elifidn %1,orblock
  5613                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5614                              <2>  %endif
  5615                              <1> 
  5616                              <1>  %if %0 > 0
  5617 0000072C 7403                <1>  j%-1 %$ifnot
  5618                              <1>  %endif
  5619                              <1>  %assign %$elif_level 0
  5620 0000072E 80CB08                  		or bl,FAILBIT3
  5621                                  %ifdef DEBUG
  5622                                  		print_stat [.status],"%b %s 0x%x check packet_len\n",bx,STAT_BUF,[.bcnt]
  5623                                  %endif
  5624                                  	endif
  5625                              <1>  %assign elselevel 0
  5626                              <1>  %ifctx if
  5627                              <1>  %$ifnot:
  5628                              <1>  con_pop
  5629                              <2>  %pop
  5630                              <2>  %assign __level__ __level__ - 1
  5631                              <1>  %elifctx else
  5632                              <1>  %assign elselevel %$elif_level
  5633                              <1>  %$ifend:
  5634                              <1>  con_pop
  5635                              <1>  %elifctx elif
  5636                              <1>  %assign elselevel %$elif_level
  5637                              <1>  %$ifnot:
  5638                              <1>  con_pop
  5639                              <1>  %else
  5640                              <1>  %error "expected `if' or `else' before `endif'"
  5641                              <1>  %endif
  5642                              <1>  %rep elselevel
  5643                              <1>  %$ifend:
  5644                              <1>  con_pop
  5645                              <1>  %endrep
  5646                                  %endif
  5647                                  
  5648                                  %ifdef DEBUG
  5649                                  	debug_print "sending cmd buffer"
  5650                                  %endif
  5651 00000731 BE[9D00]                	mov si,cmd_buff
  5652 00000734 B90C00                  	mov cx,cmd_buff_len
  5653 00000737 D1E9                    	shr cx,1
  5654 00000739 8B16[8900]              	mov dx,[reg_addr+CB_DATA]
  5655 0000073D FC                      	cld
  5656 0000073E F36F                    	rep outsw
  5657                                  	
  5658 00000740 E8D4FE                  	call delay400ns
  5659                                  
  5660 00000743 29C9                    	sub cx,cx
  5661                                  	while
  5662                              <1> con_push while
  5663                              <2>  %assign __lastlevel__ __level__
  5664                              <2>  %assign __level__ __level__ + 1
  5665                              <2>  %if __return__ > 0
  5666                              <2>  %assign con_return 1
  5667                              <2>  %else
  5668                              <2>  %assign con_return 0
  5669                              <2>  %endif
  5670                              <2> 
  5671                              <2>  %if __cont__ > 0
  5672                              <2>  %assign con_cont 1
  5673                              <2>  %else
  5674                              <2>  %assign con_cont 0
  5675                              <2>  %endif
  5676                              <2>  %if __break__ > 0
  5677                              <2>  %assign con_break 1
  5678                              <2>  %else
  5679                              <2>  %assign con_break 0
  5680                              <2>  %endif
  5681                              <2> 
  5682                              <2>  %ifidn %1,proc
  5683                              <2>  %assign con_return 0
  5684                              <2>  %elifidn %1,forcx
  5685                              <2>  %assign con_break 0
  5686                              <2>  %elifidn %1,repeat
  5687                              <2>  %assign con_cont 0
  5688                              <2>  %assign con_break 0
  5689                              <2>  %elifidn %1,while
  5690                              <2>  %assign con_cont 0
  5691                              <2>  %assign con_break 0
  5692                              <2>  %endif
  5693                              <2> 
  5694                              <2>  %if __cndblock__ == 1
  5695                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  5696                              <2>  %endif
  5697                              <2> 
  5698                              <2>  %push %1
  5699                              <2>  %if con_return
  5700                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  5701                              <3> %define %1%2 %3%4
  5702                              <2>  %endif
  5703                              <2>  %if con_break
  5704                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  5705                              <2>  %endif
  5706                              <2>  %if con_cont
  5707                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  5708                              <2>  %endif
  5709                              <2> 
  5710                              <2>  %ifidn %1,andblock
  5711                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5712                              <2>  %elifidn %1,orblock
  5713                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5714                              <2>  %endif
  5715                              <1> %assign __break__ __break__ + 1
  5716                              <1> %assign __cont__ __cont__ + 1
  5717                              <1> %$begin:
  5718                              <1> cat_lable %$cont,__level__
  5719                              <2> %1%2:
  5720                              <1> %if %0 > 0
  5721                              <1>  %rep %0 -1
  5722                              <1>  %1
  5723                              <1>  %rotate 1
  5724                              <1>  %endrep
  5725                              <1>  j%-1 %$end
  5726                              <1> %endif
  5727                                  
  5728                                  %ifdef DEBUG
  5729                                  		debug_print "  data transfer ----------------------------\n"
  5730                                  %endif
  5731 00000745 E8CEFE                  		call sub_atapi_delay
  5732                                  	    
  5733                                  		while {inbyte CB_ASTAT},{test al,CB_STAT_BSY},nz
  5734                              <1> con_push while
  5735                              <2>  %assign __lastlevel__ __level__
  5736                              <2>  %assign __level__ __level__ + 1
  5737                              <2>  %if __return__ > 0
  5738                              <2>  %assign con_return 1
  5739                              <2>  %else
  5740                              <2>  %assign con_return 0
  5741                              <2>  %endif
  5742                              <2> 
  5743                              <2>  %if __cont__ > 0
  5744                              <2>  %assign con_cont 1
  5745                              <2>  %else
  5746                              <2>  %assign con_cont 0
  5747                              <2>  %endif
  5748                              <2>  %if __break__ > 0
  5749                              <2>  %assign con_break 1
  5750                              <2>  %else
  5751                              <2>  %assign con_break 0
  5752                              <2>  %endif
  5753                              <2> 
  5754                              <2>  %ifidn %1,proc
  5755                              <2>  %assign con_return 0
  5756                              <2>  %elifidn %1,forcx
  5757                              <2>  %assign con_break 0
  5758                              <2>  %elifidn %1,repeat
  5759                              <2>  %assign con_cont 0
  5760                              <2>  %assign con_break 0
  5761                              <2>  %elifidn %1,while
  5762                              <2>  %assign con_cont 0
  5763                              <2>  %assign con_break 0
  5764                              <2>  %endif
  5765                              <2> 
  5766                              <2>  %if __cndblock__ == 1
  5767                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  5768                              <2>  %endif
  5769                              <2> 
  5770                              <2>  %push %1
  5771                              <2>  %if con_return
  5772                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  5773                              <3> %define %1%2 %3%4
  5774                              <2>  %endif
  5775                              <2>  %if con_break
  5776                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  5777                              <2>  %endif
  5778                              <2>  %if con_cont
  5779                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  5780                              <2>  %endif
  5781                              <2> 
  5782                              <2>  %ifidn %1,andblock
  5783                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5784                              <2>  %elifidn %1,orblock
  5785                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5786                              <2>  %endif
  5787                              <1> %assign __break__ __break__ + 1
  5788                              <1> %assign __cont__ __cont__ + 1
  5789                              <1> %$begin:
  5790                              <1> cat_lable %$cont,__level__
  5791                              <2> %1%2:
  5792                              <1> %if %0 > 0
  5793                              <1>  %rep %0 -1
  5794                              <1>  %1
  5795                              <1>  %rotate 1
  5796                              <1>  %endrep
  5797                              <2>  %1
  5798 00000748 8B16[9900]          <3>  mov dx,[reg_addr+%1*2]
  5799 0000074C EC                  <3>  in al,dx
  5800                              <3>  %if %0 > 1
  5801                              <3>  mov %2,al
  5802                              <3>  %endif
  5803                              <2>  %rotate 1
  5804 0000074D A880                <2>  %1
  5805                              <2>  %rotate 1
  5806 0000074F 740C                <1>  j%-1 %$end
  5807                              <1> %endif
  5808 00000751 E8B9FE                  			call check_timeout
  5809                                  			if is_timeout
  5810                              <1>  %rep %0 -1
  5811                              <1>  %1
  5812                              <1>  %rotate 1
  5813                              <1>  %endrep
  5814                              <1> 
  5815                              <1>  con_push if
  5816                              <2>  %assign __lastlevel__ __level__
  5817                              <2>  %assign __level__ __level__ + 1
  5818                              <2>  %if __return__ > 0
  5819                              <2>  %assign con_return 1
  5820                              <2>  %else
  5821                              <2>  %assign con_return 0
  5822                              <2>  %endif
  5823                              <2> 
  5824                              <2>  %if __cont__ > 0
  5825                              <2>  %assign con_cont 1
  5826                              <2>  %else
  5827                              <2>  %assign con_cont 0
  5828                              <2>  %endif
  5829                              <2>  %if __break__ > 0
  5830                              <2>  %assign con_break 1
  5831                              <2>  %else
  5832                              <2>  %assign con_break 0
  5833                              <2>  %endif
  5834                              <2> 
  5835                              <2>  %ifidn %1,proc
  5836                              <2>  %assign con_return 0
  5837                              <2>  %elifidn %1,forcx
  5838                              <2>  %assign con_break 0
  5839                              <2>  %elifidn %1,repeat
  5840                              <2>  %assign con_cont 0
  5841                              <2>  %assign con_break 0
  5842                              <2>  %elifidn %1,while
  5843                              <2>  %assign con_cont 0
  5844                              <2>  %assign con_break 0
  5845                              <2>  %endif
  5846                              <2> 
  5847                              <2>  %if __cndblock__ == 1
  5848                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  5849                              <2>  %endif
  5850                              <2> 
  5851                              <2>  %push %1
  5852                              <2>  %if con_return
  5853                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  5854                              <3> %define %1%2 %3%4
  5855                              <2>  %endif
  5856                              <2>  %if con_break
  5857                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  5858                              <3> %define %1%2 %3%4
  5859                              <2>  %endif
  5860                              <2>  %if con_cont
  5861                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  5862                              <3> %define %1%2 %3%4
  5863                              <2>  %endif
  5864                              <2> 
  5865                              <2>  %ifidn %1,andblock
  5866                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5867                              <2>  %elifidn %1,orblock
  5868                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  5869                              <2>  %endif
  5870                              <1> 
  5871                              <1>  %if %0 > 0
  5872 00000754 7605                <1>  j%-1 %$ifnot
  5873                              <1>  %endif
  5874                              <1>  %assign %$elif_level 0
  5875 00000756 B736                    				mov bh,54
  5876                                  				goto .skip_out
  5877                              <1> %if %0 > 1
  5878                              <1>  %ifidn %2,if
  5879                              <1>  %rotate 1
  5880                              <1>  %rep %0 - 3
  5881                              <1>  %2
  5882                              <1>  %rotate 1
  5883                              <1>  %endrep
  5884                              <1>  %rotate 1
  5885                              <1>  j%+1 %2
  5886                              <1>  %else
  5887                              <1>  %error "expect `if' after `continue'"
  5888                              <1>  %endif
  5889                              <1> %else
  5890 00000758 E9E900              <1>  jmp %1
  5891                              <1> %endif
  5892                                  			endif
  5893                              <1>  %assign elselevel 0
  5894                              <1>  %ifctx if
  5895                              <1>  %$ifnot:
  5896                              <1>  con_pop
  5897                              <2>  %pop
  5898                              <2>  %assign __level__ __level__ - 1
  5899                              <1>  %elifctx else
  5900                              <1>  %assign elselevel %$elif_level
  5901                              <1>  %$ifend:
  5902                              <1>  con_pop
  5903                              <1>  %elifctx elif
  5904                              <1>  %assign elselevel %$elif_level
  5905                              <1>  %$ifnot:
  5906                              <1>  con_pop
  5907                              <1>  %else
  5908                              <1>  %error "expected `if' or `else' before `endif'"
  5909                              <1>  %endif
  5910                              <1>  %rep elselevel
  5911                              <1>  %$ifend:
  5912                              <1>  con_pop
  5913                              <1>  %endrep
  5914                                  		endwhile
  5915                              <1>  %ifctx while
  5916 0000075B EBEB                <1>  jmp %$begin
  5917                              <1>  %$end:
  5918                              <1>  cat_lable %$break,__level__
  5919                              <2> %1%2:
  5920                              <1>  %else
  5921                              <1>  %error "expected `while' before `endwhile'"
  5922                              <1>  %endif
  5923                              <1> con_pop
  5924                              <2>  %pop
  5925                              <2>  %assign __level__ __level__ - 1
  5926                              <1> %assign __break__ __break__ + 1
  5927                              <1> %assign __cont__ __cont__ + 1
  5928                                  
  5929                                  %ifdef DEBUG
  5930                                  		print_stat al,"%b %s wait ASTAT BSY=0\n",bx,STAT_BUF
  5931                                  %endif
  5932                                  
  5933                                  		; Data transfer loop
  5934                                  		; read the primary state register
  5935                                  		inbyte CB_STAT, [.status]
  5936 0000075D 8B16[9700]          <1>  mov dx,[reg_addr+%1*2]
  5937 00000761 EC                  <1>  in al,dx
  5938                              <1>  %if %0 > 1
  5939 00000762 8846FF              <1>  mov %2,al
  5940                              <1>  %endif
  5941                                  		inbyte CB_SC, [.reason]
  5942 00000765 8B16[8D00]          <1>  mov dx,[reg_addr+%1*2]
  5943 00000769 EC                  <1>  in al,dx
  5944                              <1>  %if %0 > 1
  5945 0000076A 8846FE              <1>  mov %2,al
  5946                              <1>  %endif
  5947                                  		inbyte CB_CL, [.bcnt]
  5948 0000076D 8B16[9100]          <1>  mov dx,[reg_addr+%1*2]
  5949 00000771 EC                  <1>  in al,dx
  5950                              <1>  %if %0 > 1
  5951 00000772 8846FC              <1>  mov %2,al
  5952                              <1>  %endif
  5953                                  		inbyte CB_CH, [.bcnt+1]
  5954 00000775 8B16[9300]          <1>  mov dx,[reg_addr+%1*2]
  5955 00000779 EC                  <1>  in al,dx
  5956                              <1>  %if %0 > 1
  5957 0000077A 8846FD              <1>  mov %2,al
  5958                              <1>  %endif
  5959                                  
  5960                                  %ifdef DEBUG
  5961                                  		print_stat [.status],"%b %s pre-data reason=%b len=%d\n",bx,STAT_BUF,[.reason],[.bcnt]
  5962                                  
  5963                                  		print_stat [.status],"  stat "
  5964                                  		debug_print "  check the device said end of command"
  5965                                  %endif
  5966                                  
  5967                                  		if {test byte[.status],CB_STAT_BSY | CB_STAT_DRQ},z
  5968                              <1>  %rep %0 -1
  5969                              <1>  %1
  5970                              <1>  %rotate 1
  5971                              <1>  %endrep
  5972 0000077D F646FF88            <2>  %1
  5973                              <2>  %rotate 1
  5974                              <1> 
  5975                              <1>  con_push if
  5976                              <2>  %assign __lastlevel__ __level__
  5977                              <2>  %assign __level__ __level__ + 1
  5978                              <2>  %if __return__ > 0
  5979                              <2>  %assign con_return 1
  5980                              <2>  %else
  5981                              <2>  %assign con_return 0
  5982                              <2>  %endif
  5983                              <2> 
  5984                              <2>  %if __cont__ > 0
  5985                              <2>  %assign con_cont 1
  5986                              <2>  %else
  5987                              <2>  %assign con_cont 0
  5988                              <2>  %endif
  5989                              <2>  %if __break__ > 0
  5990                              <2>  %assign con_break 1
  5991                              <2>  %else
  5992                              <2>  %assign con_break 0
  5993                              <2>  %endif
  5994                              <2> 
  5995                              <2>  %ifidn %1,proc
  5996                              <2>  %assign con_return 0
  5997                              <2>  %elifidn %1,forcx
  5998                              <2>  %assign con_break 0
  5999                              <2>  %elifidn %1,repeat
  6000                              <2>  %assign con_cont 0
  6001                              <2>  %assign con_break 0
  6002                              <2>  %elifidn %1,while
  6003                              <2>  %assign con_cont 0
  6004                              <2>  %assign con_break 0
  6005                              <2>  %endif
  6006                              <2> 
  6007                              <2>  %if __cndblock__ == 1
  6008                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  6009                              <2>  %endif
  6010                              <2> 
  6011                              <2>  %push %1
  6012                              <2>  %if con_return
  6013                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  6014                              <3> %define %1%2 %3%4
  6015                              <2>  %endif
  6016                              <2>  %if con_break
  6017                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  6018                              <3> %define %1%2 %3%4
  6019                              <2>  %endif
  6020                              <2>  %if con_cont
  6021                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  6022                              <3> %define %1%2 %3%4
  6023                              <2>  %endif
  6024                              <2> 
  6025                              <2>  %ifidn %1,andblock
  6026                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6027                              <2>  %elifidn %1,orblock
  6028                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6029                              <2>  %endif
  6030                              <1> 
  6031                              <1>  %if %0 > 0
  6032 00000781 7507                <1>  j%-1 %$ifnot
  6033                              <1>  %endif
  6034                              <1>  %assign %$elif_level 0
  6035 00000783 804E0480                			or byte[.dir], NON_DATA
  6036                                  			goto .skip_out
  6037                              <1> %if %0 > 1
  6038                              <1>  %ifidn %2,if
  6039                              <1>  %rotate 1
  6040                              <1>  %rep %0 - 3
  6041                              <1>  %2
  6042                              <1>  %rotate 1
  6043                              <1>  %endrep
  6044                              <1>  %rotate 1
  6045                              <1>  j%+1 %2
  6046                              <1>  %else
  6047                              <1>  %error "expect `if' after `continue'"
  6048                              <1>  %endif
  6049                              <1> %else
  6050 00000787 E9BA00              <1>  jmp %1
  6051                              <1> %endif
  6052                                  		endif
  6053                              <1>  %assign elselevel 0
  6054                              <1>  %ifctx if
  6055                              <1>  %$ifnot:
  6056                              <1>  con_pop
  6057                              <2>  %pop
  6058                              <2>  %assign __level__ __level__ - 1
  6059                              <1>  %elifctx else
  6060                              <1>  %assign elselevel %$elif_level
  6061                              <1>  %$ifend:
  6062                              <1>  con_pop
  6063                              <1>  %elifctx elif
  6064                              <1>  %assign elselevel %$elif_level
  6065                              <1>  %$ifnot:
  6066                              <1>  con_pop
  6067                              <1>  %else
  6068                              <1>  %error "expected `if' or `else' before `endif'"
  6069                              <1>  %endif
  6070                              <1>  %rep elselevel
  6071                              <1>  %$ifend:
  6072                              <1>  con_pop
  6073                              <1>  %endrep
  6074                                  
  6075                                  %ifdef DEBUG
  6076                                  		debug_print "  device want transfer data BSY = 0 DRQ =1"
  6077                                  %endif
  6078                                  
  6079                                  		if {mov al,[.status]},{and al,CB_STAT_BSY|CB_STAT_DRQ},{cmp al,CB_STAT_DRQ},nz
  6080                              <1>  %rep %0 -1
  6081                              <1>  %1
  6082                              <1>  %rotate 1
  6083                              <1>  %endrep
  6084 0000078A 8A46FF              <2>  %1
  6085                              <2>  %rotate 1
  6086 0000078D 2488                <2>  %1
  6087                              <2>  %rotate 1
  6088 0000078F 3C08                <2>  %1
  6089                              <2>  %rotate 1
  6090                              <1> 
  6091                              <1>  con_push if
  6092                              <2>  %assign __lastlevel__ __level__
  6093                              <2>  %assign __level__ __level__ + 1
  6094                              <2>  %if __return__ > 0
  6095                              <2>  %assign con_return 1
  6096                              <2>  %else
  6097                              <2>  %assign con_return 0
  6098                              <2>  %endif
  6099                              <2> 
  6100                              <2>  %if __cont__ > 0
  6101                              <2>  %assign con_cont 1
  6102                              <2>  %else
  6103                              <2>  %assign con_cont 0
  6104                              <2>  %endif
  6105                              <2>  %if __break__ > 0
  6106                              <2>  %assign con_break 1
  6107                              <2>  %else
  6108                              <2>  %assign con_break 0
  6109                              <2>  %endif
  6110                              <2> 
  6111                              <2>  %ifidn %1,proc
  6112                              <2>  %assign con_return 0
  6113                              <2>  %elifidn %1,forcx
  6114                              <2>  %assign con_break 0
  6115                              <2>  %elifidn %1,repeat
  6116                              <2>  %assign con_cont 0
  6117                              <2>  %assign con_break 0
  6118                              <2>  %elifidn %1,while
  6119                              <2>  %assign con_cont 0
  6120                              <2>  %assign con_break 0
  6121                              <2>  %endif
  6122                              <2> 
  6123                              <2>  %if __cndblock__ == 1
  6124                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  6125                              <2>  %endif
  6126                              <2> 
  6127                              <2>  %push %1
  6128                              <2>  %if con_return
  6129                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  6130                              <3> %define %1%2 %3%4
  6131                              <2>  %endif
  6132                              <2>  %if con_break
  6133                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  6134                              <3> %define %1%2 %3%4
  6135                              <2>  %endif
  6136                              <2>  %if con_cont
  6137                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  6138                              <3> %define %1%2 %3%4
  6139                              <2>  %endif
  6140                              <2> 
  6141                              <2>  %ifidn %1,andblock
  6142                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6143                              <2>  %elifidn %1,orblock
  6144                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6145                              <2>  %endif
  6146                              <1> 
  6147                              <1>  %if %0 > 0
  6148 00000791 7405                <1>  j%-1 %$ifnot
  6149                              <1>  %endif
  6150                              <1>  %assign %$elif_level 0
  6151 00000793 B737                    			mov bh,55
  6152                                  			goto .skip_out
  6153                              <1> %if %0 > 1
  6154                              <1>  %ifidn %2,if
  6155                              <1>  %rotate 1
  6156                              <1>  %rep %0 - 3
  6157                              <1>  %2
  6158                              <1>  %rotate 1
  6159                              <1>  %endrep
  6160                              <1>  %rotate 1
  6161                              <1>  j%+1 %2
  6162                              <1>  %else
  6163                              <1>  %error "expect `if' after `continue'"
  6164                              <1>  %endif
  6165                              <1> %else
  6166 00000795 E9AC00              <1>  jmp %1
  6167                              <1> %endif
  6168                                  		endif
  6169                              <1>  %assign elselevel 0
  6170                              <1>  %ifctx if
  6171                              <1>  %$ifnot:
  6172                              <1>  con_pop
  6173                              <2>  %pop
  6174                              <2>  %assign __level__ __level__ - 1
  6175                              <1>  %elifctx else
  6176                              <1>  %assign elselevel %$elif_level
  6177                              <1>  %$ifend:
  6178                              <1>  con_pop
  6179                              <1>  %elifctx elif
  6180                              <1>  %assign elselevel %$elif_level
  6181                              <1>  %$ifnot:
  6182                              <1>  con_pop
  6183                              <1>  %else
  6184                              <1>  %error "expected `if' or `else' before `endif'"
  6185                              <1>  %endif
  6186                              <1>  %rep elselevel
  6187                              <1>  %$ifend:
  6188                              <1>  con_pop
  6189                              <1>  %endrep
  6190                                  
  6191                                  %ifdef sane_check
  6192                                  %ifdef DEBUG
  6193                                  		print_stat al,"  stat "
  6194                                  		debug_print "  check: C/nD=0, IO=1 (read) or IO=0 (write)"
  6195                                  %endif
  6196                                  		if {test byte[.reason],CB_SC_P_TAG|CB_SC_P_REL|CB_SC_P_CD},nz
  6197                              <1>  %rep %0 -1
  6198                              <1>  %1
  6199                              <1>  %rotate 1
  6200                              <1>  %endrep
  6201 00000798 F646FEFD            <2>  %1
  6202                              <2>  %rotate 1
  6203                              <1> 
  6204                              <1>  con_push if
  6205                              <2>  %assign __lastlevel__ __level__
  6206                              <2>  %assign __level__ __level__ + 1
  6207                              <2>  %if __return__ > 0
  6208                              <2>  %assign con_return 1
  6209                              <2>  %else
  6210                              <2>  %assign con_return 0
  6211                              <2>  %endif
  6212                              <2> 
  6213                              <2>  %if __cont__ > 0
  6214                              <2>  %assign con_cont 1
  6215                              <2>  %else
  6216                              <2>  %assign con_cont 0
  6217                              <2>  %endif
  6218                              <2>  %if __break__ > 0
  6219                              <2>  %assign con_break 1
  6220                              <2>  %else
  6221                              <2>  %assign con_break 0
  6222                              <2>  %endif
  6223                              <2> 
  6224                              <2>  %ifidn %1,proc
  6225                              <2>  %assign con_return 0
  6226                              <2>  %elifidn %1,forcx
  6227                              <2>  %assign con_break 0
  6228                              <2>  %elifidn %1,repeat
  6229                              <2>  %assign con_cont 0
  6230                              <2>  %assign con_break 0
  6231                              <2>  %elifidn %1,while
  6232                              <2>  %assign con_cont 0
  6233                              <2>  %assign con_break 0
  6234                              <2>  %endif
  6235                              <2> 
  6236                              <2>  %if __cndblock__ == 1
  6237                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  6238                              <2>  %endif
  6239                              <2> 
  6240                              <2>  %push %1
  6241                              <2>  %if con_return
  6242                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  6243                              <3> %define %1%2 %3%4
  6244                              <2>  %endif
  6245                              <2>  %if con_break
  6246                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  6247                              <3> %define %1%2 %3%4
  6248                              <2>  %endif
  6249                              <2>  %if con_cont
  6250                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  6251                              <3> %define %1%2 %3%4
  6252                              <2>  %endif
  6253                              <2> 
  6254                              <2>  %ifidn %1,andblock
  6255                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6256                              <2>  %elifidn %1,orblock
  6257                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6258                              <2>  %endif
  6259                              <1> 
  6260                              <1>  %if %0 > 0
  6261 0000079C 7403                <1>  j%-1 %$ifnot
  6262                              <1>  %endif
  6263                              <1>  %assign %$elif_level 0
  6264 0000079E 80CB10                  			or bl,FAILBIT4
  6265                                  
  6266                                  %ifdef DEBUG
  6267                                  			print_stat al, "  FAIL:%b %s reason=%b C/nD=0, IO=1 (read) or IO=0 (write)\n",bx,STAT_BUF,[.reason],
  6268                                  %endif
  6269                                  		endif
  6270                              <1>  %assign elselevel 0
  6271                              <1>  %ifctx if
  6272                              <1>  %$ifnot:
  6273                              <1>  con_pop
  6274                              <2>  %pop
  6275                              <2>  %assign __level__ __level__ - 1
  6276                              <1>  %elifctx else
  6277                              <1>  %assign elselevel %$elif_level
  6278                              <1>  %$ifend:
  6279                              <1>  con_pop
  6280                              <1>  %elifctx elif
  6281                              <1>  %assign elselevel %$elif_level
  6282                              <1>  %$ifnot:
  6283                              <1>  con_pop
  6284                              <1>  %else
  6285                              <1>  %error "expected `if' or `else' before `endif'"
  6286                              <1>  %endif
  6287                              <1>  %rep elselevel
  6288                              <1>  %$ifend:
  6289                              <1>  con_pop
  6290                              <1>  %endrep
  6291                                  		if {test byte[.reason],CB_SC_P_IO},nz
  6292                              <1>  %rep %0 -1
  6293                              <1>  %1
  6294                              <1>  %rotate 1
  6295                              <1>  %endrep
  6296 000007A1 F646FE02            <2>  %1
  6297                              <2>  %rotate 1
  6298                              <1> 
  6299                              <1>  con_push if
  6300                              <2>  %assign __lastlevel__ __level__
  6301                              <2>  %assign __level__ __level__ + 1
  6302                              <2>  %if __return__ > 0
  6303                              <2>  %assign con_return 1
  6304                              <2>  %else
  6305                              <2>  %assign con_return 0
  6306                              <2>  %endif
  6307                              <2> 
  6308                              <2>  %if __cont__ > 0
  6309                              <2>  %assign con_cont 1
  6310                              <2>  %else
  6311                              <2>  %assign con_cont 0
  6312                              <2>  %endif
  6313                              <2>  %if __break__ > 0
  6314                              <2>  %assign con_break 1
  6315                              <2>  %else
  6316                              <2>  %assign con_break 0
  6317                              <2>  %endif
  6318                              <2> 
  6319                              <2>  %ifidn %1,proc
  6320                              <2>  %assign con_return 0
  6321                              <2>  %elifidn %1,forcx
  6322                              <2>  %assign con_break 0
  6323                              <2>  %elifidn %1,repeat
  6324                              <2>  %assign con_cont 0
  6325                              <2>  %assign con_break 0
  6326                              <2>  %elifidn %1,while
  6327                              <2>  %assign con_cont 0
  6328                              <2>  %assign con_break 0
  6329                              <2>  %endif
  6330                              <2> 
  6331                              <2>  %if __cndblock__ == 1
  6332                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  6333                              <2>  %endif
  6334                              <2> 
  6335                              <2>  %push %1
  6336                              <2>  %if con_return
  6337                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  6338                              <3> %define %1%2 %3%4
  6339                              <2>  %endif
  6340                              <2>  %if con_break
  6341                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  6342                              <3> %define %1%2 %3%4
  6343                              <2>  %endif
  6344                              <2>  %if con_cont
  6345                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  6346                              <3> %define %1%2 %3%4
  6347                              <2>  %endif
  6348                              <2> 
  6349                              <2>  %ifidn %1,andblock
  6350                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6351                              <2>  %elifidn %1,orblock
  6352                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6353                              <2>  %endif
  6354                              <1> 
  6355                              <1>  %if %0 > 0
  6356 000007A5 7409                <1>  j%-1 %$ifnot
  6357                              <1>  %endif
  6358                              <1>  %assign %$elif_level 0
  6359                                  			if {cmp byte[.dir],0},nz
  6360                              <1>  %rep %0 -1
  6361                              <1>  %1
  6362                              <1>  %rotate 1
  6363                              <1>  %endrep
  6364 000007A7 807E0400            <2>  %1
  6365                              <2>  %rotate 1
  6366                              <1> 
  6367                              <1>  con_push if
  6368                              <2>  %assign __lastlevel__ __level__
  6369                              <2>  %assign __level__ __level__ + 1
  6370                              <2>  %if __return__ > 0
  6371                              <2>  %assign con_return 1
  6372                              <2>  %else
  6373                              <2>  %assign con_return 0
  6374                              <2>  %endif
  6375                              <2> 
  6376                              <2>  %if __cont__ > 0
  6377                              <2>  %assign con_cont 1
  6378                              <2>  %else
  6379                              <2>  %assign con_cont 0
  6380                              <2>  %endif
  6381                              <2>  %if __break__ > 0
  6382                              <2>  %assign con_break 1
  6383                              <2>  %else
  6384                              <2>  %assign con_break 0
  6385                              <2>  %endif
  6386                              <2> 
  6387                              <2>  %ifidn %1,proc
  6388                              <2>  %assign con_return 0
  6389                              <2>  %elifidn %1,forcx
  6390                              <2>  %assign con_break 0
  6391                              <2>  %elifidn %1,repeat
  6392                              <2>  %assign con_cont 0
  6393                              <2>  %assign con_break 0
  6394                              <2>  %elifidn %1,while
  6395                              <2>  %assign con_cont 0
  6396                              <2>  %assign con_break 0
  6397                              <2>  %endif
  6398                              <2> 
  6399                              <2>  %if __cndblock__ == 1
  6400                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  6401                              <2>  %endif
  6402                              <2> 
  6403                              <2>  %push %1
  6404                              <2>  %if con_return
  6405                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  6406                              <3> %define %1%2 %3%4
  6407                              <2>  %endif
  6408                              <2>  %if con_break
  6409                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  6410                              <3> %define %1%2 %3%4
  6411                              <2>  %endif
  6412                              <2>  %if con_cont
  6413                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  6414                              <3> %define %1%2 %3%4
  6415                              <2>  %endif
  6416                              <2> 
  6417                              <2>  %ifidn %1,andblock
  6418                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6419                              <2>  %elifidn %1,orblock
  6420                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6421                              <2>  %endif
  6422                              <1> 
  6423                              <1>  %if %0 > 0
  6424 000007AB 7403                <1>  j%-1 %$ifnot
  6425                              <1>  %endif
  6426                              <1>  %assign %$elif_level 0
  6427 000007AD 80CB20                  				or bl,FAILBIT5
  6428                                  %ifdef DEBUG
  6429                                  				print_stat al, "  FAIL:%b %s reason=%b dir=%d\n",bx,STAT_BUF,[.reason],[.dir]
  6430                                  %endif
  6431                                  			endif
  6432                              <1>  %assign elselevel 0
  6433                              <1>  %ifctx if
  6434                              <1>  %$ifnot:
  6435                              <1>  con_pop
  6436                              <2>  %pop
  6437                              <2>  %assign __level__ __level__ - 1
  6438                              <1>  %elifctx else
  6439                              <1>  %assign elselevel %$elif_level
  6440                              <1>  %$ifend:
  6441                              <1>  con_pop
  6442                              <1>  %elifctx elif
  6443                              <1>  %assign elselevel %$elif_level
  6444                              <1>  %$ifnot:
  6445                              <1>  con_pop
  6446                              <1>  %else
  6447                              <1>  %error "expected `if' or `else' before `endif'"
  6448                              <1>  %endif
  6449                              <1>  %rep elselevel
  6450                              <1>  %$ifend:
  6451                              <1>  con_pop
  6452                              <1>  %endrep
  6453                                  		endif
  6454                              <1>  %assign elselevel 0
  6455                              <1>  %ifctx if
  6456                              <1>  %$ifnot:
  6457                              <1>  con_pop
  6458                              <2>  %pop
  6459                              <2>  %assign __level__ __level__ - 1
  6460                              <1>  %elifctx else
  6461                              <1>  %assign elselevel %$elif_level
  6462                              <1>  %$ifend:
  6463                              <1>  con_pop
  6464                              <1>  %elifctx elif
  6465                              <1>  %assign elselevel %$elif_level
  6466                              <1>  %$ifnot:
  6467                              <1>  con_pop
  6468                              <1>  %else
  6469                              <1>  %error "expected `if' or `else' before `endif'"
  6470                              <1>  %endif
  6471                              <1>  %rep elselevel
  6472                              <1>  %$ifend:
  6473                              <1>  con_pop
  6474                              <1>  %endrep
  6475                                  %endif	
  6476                                  	    ; do the slow data transfer
  6477                                  
  6478                                  %ifdef DEBUG
  6479                                  		debug_print "  do slow delay"
  6480                                  %endif
  6481                                  
  6482                                  		if {cmp byte[reg_slow_xfer_flag],0},nz
  6483                              <1>  %rep %0 -1
  6484                              <1>  %1
  6485                              <1>  %rotate 1
  6486                              <1>  %endrep
  6487 000007B0 803E[0100]00        <2>  %1
  6488                              <2>  %rotate 1
  6489                              <1> 
  6490                              <1>  con_push if
  6491                              <2>  %assign __lastlevel__ __level__
  6492                              <2>  %assign __level__ __level__ + 1
  6493                              <2>  %if __return__ > 0
  6494                              <2>  %assign con_return 1
  6495                              <2>  %else
  6496                              <2>  %assign con_return 0
  6497                              <2>  %endif
  6498                              <2> 
  6499                              <2>  %if __cont__ > 0
  6500                              <2>  %assign con_cont 1
  6501                              <2>  %else
  6502                              <2>  %assign con_cont 0
  6503                              <2>  %endif
  6504                              <2>  %if __break__ > 0
  6505                              <2>  %assign con_break 1
  6506                              <2>  %else
  6507                              <2>  %assign con_break 0
  6508                              <2>  %endif
  6509                              <2> 
  6510                              <2>  %ifidn %1,proc
  6511                              <2>  %assign con_return 0
  6512                              <2>  %elifidn %1,forcx
  6513                              <2>  %assign con_break 0
  6514                              <2>  %elifidn %1,repeat
  6515                              <2>  %assign con_cont 0
  6516                              <2>  %assign con_break 0
  6517                              <2>  %elifidn %1,while
  6518                              <2>  %assign con_cont 0
  6519                              <2>  %assign con_break 0
  6520                              <2>  %endif
  6521                              <2> 
  6522                              <2>  %if __cndblock__ == 1
  6523                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  6524                              <2>  %endif
  6525                              <2> 
  6526                              <2>  %push %1
  6527                              <2>  %if con_return
  6528                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  6529                              <3> %define %1%2 %3%4
  6530                              <2>  %endif
  6531                              <2>  %if con_break
  6532                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  6533                              <3> %define %1%2 %3%4
  6534                              <2>  %endif
  6535                              <2>  %if con_cont
  6536                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  6537                              <3> %define %1%2 %3%4
  6538                              <2>  %endif
  6539                              <2> 
  6540                              <2>  %ifidn %1,andblock
  6541                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6542                              <2>  %elifidn %1,orblock
  6543                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6544                              <2>  %endif
  6545                              <1> 
  6546                              <1>  %if %0 > 0
  6547 000007B5 7403                <1>  j%-1 %$ifnot
  6548                              <1>  %endif
  6549                              <1>  %assign %$elif_level 0
  6550 000007B7 E85BFE                  			call sub_xfer_delay
  6551                                  		endif
  6552                              <1>  %assign elselevel 0
  6553                              <1>  %ifctx if
  6554                              <1>  %$ifnot:
  6555                              <1>  con_pop
  6556                              <2>  %pop
  6557                              <2>  %assign __level__ __level__ - 1
  6558                              <1>  %elifctx else
  6559                              <1>  %assign elselevel %$elif_level
  6560                              <1>  %$ifend:
  6561                              <1>  con_pop
  6562                              <1>  %elifctx elif
  6563                              <1>  %assign elselevel %$elif_level
  6564                              <1>  %$ifnot:
  6565                              <1>  con_pop
  6566                              <1>  %else
  6567                              <1>  %error "expected `if' or `else' before `endif'"
  6568                              <1>  %endif
  6569                              <1>  %rep elselevel
  6570                              <1>  %$ifend:
  6571                              <1>  con_pop
  6572                              <1>  %endrep
  6573                                  
  6574                                  
  6575                                  %ifdef DEBUG
  6576                                  		debug_print "  check data len zero"
  6577                                  %endif
  6578                                  
  6579 000007BA 8B46FC                  		mov ax,[.bcnt]
  6580                                  		if {or ax,ax},z
  6581                              <1>  %rep %0 -1
  6582                              <1>  %1
  6583                              <1>  %rotate 1
  6584                              <1>  %endrep
  6585 000007BD 09C0                <2>  %1
  6586                              <2>  %rotate 1
  6587                              <1> 
  6588                              <1>  con_push if
  6589                              <2>  %assign __lastlevel__ __level__
  6590                              <2>  %assign __level__ __level__ + 1
  6591                              <2>  %if __return__ > 0
  6592                              <2>  %assign con_return 1
  6593                              <2>  %else
  6594                              <2>  %assign con_return 0
  6595                              <2>  %endif
  6596                              <2> 
  6597                              <2>  %if __cont__ > 0
  6598                              <2>  %assign con_cont 1
  6599                              <2>  %else
  6600                              <2>  %assign con_cont 0
  6601                              <2>  %endif
  6602                              <2>  %if __break__ > 0
  6603                              <2>  %assign con_break 1
  6604                              <2>  %else
  6605                              <2>  %assign con_break 0
  6606                              <2>  %endif
  6607                              <2> 
  6608                              <2>  %ifidn %1,proc
  6609                              <2>  %assign con_return 0
  6610                              <2>  %elifidn %1,forcx
  6611                              <2>  %assign con_break 0
  6612                              <2>  %elifidn %1,repeat
  6613                              <2>  %assign con_cont 0
  6614                              <2>  %assign con_break 0
  6615                              <2>  %elifidn %1,while
  6616                              <2>  %assign con_cont 0
  6617                              <2>  %assign con_break 0
  6618                              <2>  %endif
  6619                              <2> 
  6620                              <2>  %if __cndblock__ == 1
  6621                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  6622                              <2>  %endif
  6623                              <2> 
  6624                              <2>  %push %1
  6625                              <2>  %if con_return
  6626                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  6627                              <3> %define %1%2 %3%4
  6628                              <2>  %endif
  6629                              <2>  %if con_break
  6630                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  6631                              <3> %define %1%2 %3%4
  6632                              <2>  %endif
  6633                              <2>  %if con_cont
  6634                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  6635                              <3> %define %1%2 %3%4
  6636                              <2>  %endif
  6637                              <2> 
  6638                              <2>  %ifidn %1,andblock
  6639                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6640                              <2>  %elifidn %1,orblock
  6641                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6642                              <2>  %endif
  6643                              <1> 
  6644                              <1>  %if %0 > 0
  6645 000007BF 7508                <1>  j%-1 %$ifnot
  6646                              <1>  %endif
  6647                              <1>  %assign %$elif_level 0
  6648 000007C1 B73C                    			mov bh,60
  6649 000007C3 804E0480                			or byte[.dir],NON_DATA
  6650                                  			goto .skip_out
  6651                              <1> %if %0 > 1
  6652                              <1>  %ifidn %2,if
  6653                              <1>  %rotate 1
  6654                              <1>  %rep %0 - 3
  6655                              <1>  %2
  6656                              <1>  %rotate 1
  6657                              <1>  %endrep
  6658                              <1>  %rotate 1
  6659                              <1>  j%+1 %2
  6660                              <1>  %else
  6661                              <1>  %error "expect `if' after `continue'"
  6662                              <1>  %endif
  6663                              <1> %else
  6664 000007C7 EB7B                <1>  jmp %1
  6665                              <1> %endif
  6666                                  		endif
  6667                              <1>  %assign elselevel 0
  6668                              <1>  %ifctx if
  6669                              <1>  %$ifnot:
  6670                              <1>  con_pop
  6671                              <2>  %pop
  6672                              <2>  %assign __level__ __level__ - 1
  6673                              <1>  %elifctx else
  6674                              <1>  %assign elselevel %$elif_level
  6675                              <1>  %$ifend:
  6676                              <1>  con_pop
  6677                              <1>  %elifctx elif
  6678                              <1>  %assign elselevel %$elif_level
  6679                              <1>  %$ifnot:
  6680                              <1>  con_pop
  6681                              <1>  %else
  6682                              <1>  %error "expected `if' or `else' before `endif'"
  6683                              <1>  %endif
  6684                              <1>  %rep elselevel
  6685                              <1>  %$ifend:
  6686                              <1>  con_pop
  6687                              <1>  %endrep
  6688                                     	    
  6689                                  %ifdef DEBUG
  6690                                  		debug_print "  check the buffer len" 
  6691                                  %endif
  6692                                  
  6693                                  %ifdef sane_check 
  6694                                  		if {cmp ax,REG_ATAPI_MAX_BYTES},a
  6695                              <1>  %rep %0 -1
  6696                              <1>  %1
  6697                              <1>  %rotate 1
  6698                              <1>  %endrep
  6699 000007C9 3D0080              <2>  %1
  6700                              <2>  %rotate 1
  6701                              <1> 
  6702                              <1>  con_push if
  6703                              <2>  %assign __lastlevel__ __level__
  6704                              <2>  %assign __level__ __level__ + 1
  6705                              <2>  %if __return__ > 0
  6706                              <2>  %assign con_return 1
  6707                              <2>  %else
  6708                              <2>  %assign con_return 0
  6709                              <2>  %endif
  6710                              <2> 
  6711                              <2>  %if __cont__ > 0
  6712                              <2>  %assign con_cont 1
  6713                              <2>  %else
  6714                              <2>  %assign con_cont 0
  6715                              <2>  %endif
  6716                              <2>  %if __break__ > 0
  6717                              <2>  %assign con_break 1
  6718                              <2>  %else
  6719                              <2>  %assign con_break 0
  6720                              <2>  %endif
  6721                              <2> 
  6722                              <2>  %ifidn %1,proc
  6723                              <2>  %assign con_return 0
  6724                              <2>  %elifidn %1,forcx
  6725                              <2>  %assign con_break 0
  6726                              <2>  %elifidn %1,repeat
  6727                              <2>  %assign con_cont 0
  6728                              <2>  %assign con_break 0
  6729                              <2>  %elifidn %1,while
  6730                              <2>  %assign con_cont 0
  6731                              <2>  %assign con_break 0
  6732                              <2>  %endif
  6733                              <2> 
  6734                              <2>  %if __cndblock__ == 1
  6735                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  6736                              <2>  %endif
  6737                              <2> 
  6738                              <2>  %push %1
  6739                              <2>  %if con_return
  6740                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  6741                              <3> %define %1%2 %3%4
  6742                              <2>  %endif
  6743                              <2>  %if con_break
  6744                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  6745                              <3> %define %1%2 %3%4
  6746                              <2>  %endif
  6747                              <2>  %if con_cont
  6748                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  6749                              <3> %define %1%2 %3%4
  6750                              <2>  %endif
  6751                              <2> 
  6752                              <2>  %ifidn %1,andblock
  6753                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6754                              <2>  %elifidn %1,orblock
  6755                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6756                              <2>  %endif
  6757                              <1> 
  6758                              <1>  %if %0 > 0
  6759 000007CC 7603                <1>  j%-1 %$ifnot
  6760                              <1>  %endif
  6761                              <1>  %assign %$elif_level 0
  6762 000007CE 80CB40                  			or bl,FAILBIT6
  6763                                  		endif
  6764                              <1>  %assign elselevel 0
  6765                              <1>  %ifctx if
  6766                              <1>  %$ifnot:
  6767                              <1>  con_pop
  6768                              <2>  %pop
  6769                              <2>  %assign __level__ __level__ - 1
  6770                              <1>  %elifctx else
  6771                              <1>  %assign elselevel %$elif_level
  6772                              <1>  %$ifend:
  6773                              <1>  con_pop
  6774                              <1>  %elifctx elif
  6775                              <1>  %assign elselevel %$elif_level
  6776                              <1>  %$ifnot:
  6777                              <1>  con_pop
  6778                              <1>  %else
  6779                              <1>  %error "expected `if' or `else' before `endif'"
  6780                              <1>  %endif
  6781                              <1>  %rep elselevel
  6782                              <1>  %$ifend:
  6783                              <1>  con_pop
  6784                              <1>  %endrep
  6785                                  %endif  
  6786 000007D1 8A56FB                  		mov dl,[.pre_fail_bit7]
  6787 000007D4 08D3                    		or bl,dl
  6788 000007D6 A801                    		test al, 1
  6789 000007D8 0F9546FB                		setnz [.pre_fail_bit7]
  6790                                      
  6791                                  	   
  6792 000007DC 89CA                    		mov dx,cx 
  6793 000007DE 01C2                    		add dx,ax 
  6794                                  		if {cmp dx,[.packet_len]},a
  6795                              <1>  %rep %0 -1
  6796                              <1>  %1
  6797                              <1>  %rotate 1
  6798                              <1>  %endrep
  6799 000007E0 3B560A              <2>  %1
  6800                              <2>  %rotate 1
  6801                              <1> 
  6802                              <1>  con_push if
  6803                              <2>  %assign __lastlevel__ __level__
  6804                              <2>  %assign __level__ __level__ + 1
  6805                              <2>  %if __return__ > 0
  6806                              <2>  %assign con_return 1
  6807                              <2>  %else
  6808                              <2>  %assign con_return 0
  6809                              <2>  %endif
  6810                              <2> 
  6811                              <2>  %if __cont__ > 0
  6812                              <2>  %assign con_cont 1
  6813                              <2>  %else
  6814                              <2>  %assign con_cont 0
  6815                              <2>  %endif
  6816                              <2>  %if __break__ > 0
  6817                              <2>  %assign con_break 1
  6818                              <2>  %else
  6819                              <2>  %assign con_break 0
  6820                              <2>  %endif
  6821                              <2> 
  6822                              <2>  %ifidn %1,proc
  6823                              <2>  %assign con_return 0
  6824                              <2>  %elifidn %1,forcx
  6825                              <2>  %assign con_break 0
  6826                              <2>  %elifidn %1,repeat
  6827                              <2>  %assign con_cont 0
  6828                              <2>  %assign con_break 0
  6829                              <2>  %elifidn %1,while
  6830                              <2>  %assign con_cont 0
  6831                              <2>  %assign con_break 0
  6832                              <2>  %endif
  6833                              <2> 
  6834                              <2>  %if __cndblock__ == 1
  6835                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  6836                              <2>  %endif
  6837                              <2> 
  6838                              <2>  %push %1
  6839                              <2>  %if con_return
  6840                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  6841                              <3> %define %1%2 %3%4
  6842                              <2>  %endif
  6843                              <2>  %if con_break
  6844                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  6845                              <3> %define %1%2 %3%4
  6846                              <2>  %endif
  6847                              <2>  %if con_cont
  6848                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  6849                              <3> %define %1%2 %3%4
  6850                              <2>  %endif
  6851                              <2> 
  6852                              <2>  %ifidn %1,andblock
  6853                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6854                              <2>  %elifidn %1,orblock
  6855                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6856                              <2>  %endif
  6857                              <1> 
  6858                              <1>  %if %0 > 0
  6859 000007E3 7608                <1>  j%-1 %$ifnot
  6860                              <1>  %endif
  6861                              <1>  %assign %$elif_level 0
  6862 000007E5 B73B                    			mov bh,59
  6863 000007E7 804E0480                			or byte[.dir],NON_DATA
  6864                                  			goto .skip_out
  6865                              <1> %if %0 > 1
  6866                              <1>  %ifidn %2,if
  6867                              <1>  %rotate 1
  6868                              <1>  %rep %0 - 3
  6869                              <1>  %2
  6870                              <1>  %rotate 1
  6871                              <1>  %endrep
  6872                              <1>  %rotate 1
  6873                              <1>  j%+1 %2
  6874                              <1>  %else
  6875                              <1>  %error "expect `if' after `continue'"
  6876                              <1>  %endif
  6877                              <1> %else
  6878 000007EB EB57                <1>  jmp %1
  6879                              <1> %endif
  6880                                  		endif
  6881                              <1>  %assign elselevel 0
  6882                              <1>  %ifctx if
  6883                              <1>  %$ifnot:
  6884                              <1>  con_pop
  6885                              <2>  %pop
  6886                              <2>  %assign __level__ __level__ - 1
  6887                              <1>  %elifctx else
  6888                              <1>  %assign elselevel %$elif_level
  6889                              <1>  %$ifend:
  6890                              <1>  con_pop
  6891                              <1>  %elifctx elif
  6892                              <1>  %assign elselevel %$elif_level
  6893                              <1>  %$ifnot:
  6894                              <1>  con_pop
  6895                              <1>  %else
  6896                              <1>  %error "expected `if' or `else' before `endif'"
  6897                              <1>  %endif
  6898                              <1>  %rep elselevel
  6899                              <1>  %$ifend:
  6900                              <1>  con_pop
  6901                              <1>  %endrep
  6902                                  
  6903 000007ED 52                      		push dx
  6904 000007EE 89C1                    		mov cx,ax
  6905 000007F0 41                      		inc cx
  6906 000007F1 D1E9                    		shr cx,1
  6907 000007F3 8B16[8900]              		mov dx,[reg_addr+CB_DATA*2]
  6908 000007F7 FC                      		cld
  6909                                  		if {cmp byte[.dir],0},nz
  6910                              <1>  %rep %0 -1
  6911                              <1>  %1
  6912                              <1>  %rotate 1
  6913                              <1>  %endrep
  6914 000007F8 807E0400            <2>  %1
  6915                              <2>  %rotate 1
  6916                              <1> 
  6917                              <1>  con_push if
  6918                              <2>  %assign __lastlevel__ __level__
  6919                              <2>  %assign __level__ __level__ + 1
  6920                              <2>  %if __return__ > 0
  6921                              <2>  %assign con_return 1
  6922                              <2>  %else
  6923                              <2>  %assign con_return 0
  6924                              <2>  %endif
  6925                              <2> 
  6926                              <2>  %if __cont__ > 0
  6927                              <2>  %assign con_cont 1
  6928                              <2>  %else
  6929                              <2>  %assign con_cont 0
  6930                              <2>  %endif
  6931                              <2>  %if __break__ > 0
  6932                              <2>  %assign con_break 1
  6933                              <2>  %else
  6934                              <2>  %assign con_break 0
  6935                              <2>  %endif
  6936                              <2> 
  6937                              <2>  %ifidn %1,proc
  6938                              <2>  %assign con_return 0
  6939                              <2>  %elifidn %1,forcx
  6940                              <2>  %assign con_break 0
  6941                              <2>  %elifidn %1,repeat
  6942                              <2>  %assign con_cont 0
  6943                              <2>  %assign con_break 0
  6944                              <2>  %elifidn %1,while
  6945                              <2>  %assign con_cont 0
  6946                              <2>  %assign con_break 0
  6947                              <2>  %endif
  6948                              <2> 
  6949                              <2>  %if __cndblock__ == 1
  6950                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  6951                              <2>  %endif
  6952                              <2> 
  6953                              <2>  %push %1
  6954                              <2>  %if con_return
  6955                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  6956                              <3> %define %1%2 %3%4
  6957                              <2>  %endif
  6958                              <2>  %if con_break
  6959                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  6960                              <3> %define %1%2 %3%4
  6961                              <2>  %endif
  6962                              <2>  %if con_cont
  6963                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  6964                              <3> %define %1%2 %3%4
  6965                              <2>  %endif
  6966                              <2> 
  6967                              <2>  %ifidn %1,andblock
  6968                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6969                              <2>  %elifidn %1,orblock
  6970                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  6971                              <2>  %endif
  6972                              <1> 
  6973                              <1>  %if %0 > 0
  6974 000007FC 740D                <1>  j%-1 %$ifnot
  6975                              <1>  %endif
  6976                              <1>  %assign %$elif_level 0
  6977 000007FE 1E                      			push ds
  6978 000007FF FF7606                  			push word [.packet_seg]
  6979 00000802 1F                      			pop ds
  6980 00000803 8B7608                  			mov si,[.packet_off]
  6981 00000806 F36F                    			rep outsw
  6982 00000808 1F                      			pop ds
  6983                                  		else
  6984                              <1>  %assign __near__ 0
  6985                              <1>  %if %0 >0
  6986                              <1>  %ifidn %1 near
  6987                              <1>  %assign __near__ 1
  6988                              <1>  %endif
  6989                              <1>  %endif
  6990                              <1>  %ifctx if
  6991                              <1>  %repl else
  6992                              <1>  jmp_near __near__,%$ifend
  6993                              <2>  %if %1 > 0
  6994                              <2>  jmp near %2
  6995                              <2>  %else
  6996 00000809 EB0B                <2>  jmp short %2
  6997                              <2>  %endif
  6998                              <1>  %$ifnot:
  6999                              <1>  %elifctx elif
  7000                              <1> 
  7001                              <1>  jmp_near __near__,%$ifend
  7002                              <1>  %$ifnot:
  7003                              <1>  %repl else
  7004                              <1> 
  7005                              <1> 
  7006                              <1> 
  7007                              <1> 
  7008                              <1> 
  7009                              <1> 
  7010                              <1>  %else
  7011                              <1>  %error "expected `if' before `else'"
  7012                              <1>  %endif
  7013 0000080B 06                      			push es
  7014 0000080C FF7606                  			push word [.packet_seg]
  7015 0000080F 07                      			pop es
  7016 00000810 8B7E08                  			mov di,[.packet_off]
  7017 00000813 F36D                    			rep insw
  7018 00000815 07                      			pop es
  7019                                  		endif
  7020                              <1>  %assign elselevel 0
  7021                              <1>  %ifctx if
  7022                              <1>  %$ifnot:
  7023                              <1>  con_pop
  7024                              <1>  %elifctx else
  7025                              <1>  %assign elselevel %$elif_level
  7026                              <1>  %$ifend:
  7027                              <1>  con_pop
  7028                              <2>  %pop
  7029                              <2>  %assign __level__ __level__ - 1
  7030                              <1>  %elifctx elif
  7031                              <1>  %assign elselevel %$elif_level
  7032                              <1>  %$ifnot:
  7033                              <1>  con_pop
  7034                              <1>  %else
  7035                              <1>  %error "expected `if' or `else' before `endif'"
  7036                              <1>  %endif
  7037                              <1>  %rep elselevel
  7038                              <1>  %$ifend:
  7039                              <1>  con_pop
  7040                              <1>  %endrep
  7041 00000816 59                      		pop cx
  7042                                  
  7043 00000817 014608                  		add [.packet_off],ax
  7044 0000081A E8FAFD                  		call delay400ns
  7045                                  	endwhile	
  7046                              <1>  %ifctx while
  7047 0000081D E925FF              <1>  jmp %$begin
  7048                              <1>  %$end:
  7049                              <1>  cat_lable %$break,__level__
  7050                              <2> %1%2:
  7051                              <1>  %else
  7052                              <1>  %error "expected `while' before `endwhile'"
  7053                              <1>  %endif
  7054                              <1> con_pop
  7055                              <2>  %pop
  7056                              <2>  %assign __level__ __level__ - 1
  7057                              <1> %assign __break__ __break__ + 1
  7058                              <1> %assign __cont__ __cont__ + 1
  7059                                  	
  7060                                  	if {test byte [.dir], NON_DATA},z
  7061                              <1>  %rep %0 -1
  7062                              <1>  %1
  7063                              <1>  %rotate 1
  7064                              <1>  %endrep
  7065 00000820 F6460480            <2>  %1
  7066                              <2>  %rotate 1
  7067                              <1> 
  7068                              <1>  con_push if
  7069                              <2>  %assign __lastlevel__ __level__
  7070                              <2>  %assign __level__ __level__ + 1
  7071                              <2>  %if __return__ > 0
  7072                              <2>  %assign con_return 1
  7073                              <2>  %else
  7074                              <2>  %assign con_return 0
  7075                              <2>  %endif
  7076                              <2> 
  7077                              <2>  %if __cont__ > 0
  7078                              <2>  %assign con_cont 1
  7079                              <2>  %else
  7080                              <2>  %assign con_cont 0
  7081                              <2>  %endif
  7082                              <2>  %if __break__ > 0
  7083                              <2>  %assign con_break 1
  7084                              <2>  %else
  7085                              <2>  %assign con_break 0
  7086                              <2>  %endif
  7087                              <2> 
  7088                              <2>  %ifidn %1,proc
  7089                              <2>  %assign con_return 0
  7090                              <2>  %elifidn %1,forcx
  7091                              <2>  %assign con_break 0
  7092                              <2>  %elifidn %1,repeat
  7093                              <2>  %assign con_cont 0
  7094                              <2>  %assign con_break 0
  7095                              <2>  %elifidn %1,while
  7096                              <2>  %assign con_cont 0
  7097                              <2>  %assign con_break 0
  7098                              <2>  %endif
  7099                              <2> 
  7100                              <2>  %if __cndblock__ == 1
  7101                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  7102                              <2>  %endif
  7103                              <2> 
  7104                              <2>  %push %1
  7105                              <2>  %if con_return
  7106                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  7107                              <3> %define %1%2 %3%4
  7108                              <2>  %endif
  7109                              <2>  %if con_break
  7110                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  7111                              <3> %define %1%2 %3%4
  7112                              <2>  %endif
  7113                              <2>  %if con_cont
  7114                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  7115                              <3> %define %1%2 %3%4
  7116                              <2>  %endif
  7117                              <2> 
  7118                              <2>  %ifidn %1,andblock
  7119                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7120                              <2>  %elifidn %1,orblock
  7121                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7122                              <2>  %endif
  7123                              <1> 
  7124                              <1>  %if %0 > 0
  7125 00000824 7509                <1>  j%-1 %$ifnot
  7126                              <1>  %endif
  7127                              <1>  %assign %$elif_level 0
  7128 00000826 E8EDFD                  		call sub_atapi_delay
  7129                                  		if is_timeout
  7130                              <1>  %rep %0 -1
  7131                              <1>  %1
  7132                              <1>  %rotate 1
  7133                              <1>  %endrep
  7134                              <1> 
  7135                              <1>  con_push if
  7136                              <2>  %assign __lastlevel__ __level__
  7137                              <2>  %assign __level__ __level__ + 1
  7138                              <2>  %if __return__ > 0
  7139                              <2>  %assign con_return 1
  7140                              <2>  %else
  7141                              <2>  %assign con_return 0
  7142                              <2>  %endif
  7143                              <2> 
  7144                              <2>  %if __cont__ > 0
  7145                              <2>  %assign con_cont 1
  7146                              <2>  %else
  7147                              <2>  %assign con_cont 0
  7148                              <2>  %endif
  7149                              <2>  %if __break__ > 0
  7150                              <2>  %assign con_break 1
  7151                              <2>  %else
  7152                              <2>  %assign con_break 0
  7153                              <2>  %endif
  7154                              <2> 
  7155                              <2>  %ifidn %1,proc
  7156                              <2>  %assign con_return 0
  7157                              <2>  %elifidn %1,forcx
  7158                              <2>  %assign con_break 0
  7159                              <2>  %elifidn %1,repeat
  7160                              <2>  %assign con_cont 0
  7161                              <2>  %assign con_break 0
  7162                              <2>  %elifidn %1,while
  7163                              <2>  %assign con_cont 0
  7164                              <2>  %assign con_break 0
  7165                              <2>  %endif
  7166                              <2> 
  7167                              <2>  %if __cndblock__ == 1
  7168                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  7169                              <2>  %endif
  7170                              <2> 
  7171                              <2>  %push %1
  7172                              <2>  %if con_return
  7173                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  7174                              <3> %define %1%2 %3%4
  7175                              <2>  %endif
  7176                              <2>  %if con_break
  7177                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  7178                              <3> %define %1%2 %3%4
  7179                              <2>  %endif
  7180                              <2>  %if con_cont
  7181                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  7182                              <3> %define %1%2 %3%4
  7183                              <2>  %endif
  7184                              <2> 
  7185                              <2>  %ifidn %1,andblock
  7186                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7187                              <2>  %elifidn %1,orblock
  7188                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7189                              <2>  %endif
  7190                              <1> 
  7191                              <1>  %if %0 > 0
  7192 00000829 7604                <1>  j%-1 %$ifnot
  7193                              <1>  %endif
  7194                              <1>  %assign %$elif_level 0
  7195 0000082B B739                    			mov bh,57
  7196                                  %ifdef DEBUG
  7197                                  			debug_print "  end of command, wait for BSY=0\n"
  7198                                  %endif
  7199                                  
  7200                                  			goto .skip_out
  7201                              <1> %if %0 > 1
  7202                              <1>  %ifidn %2,if
  7203                              <1>  %rotate 1
  7204                              <1>  %rep %0 - 3
  7205                              <1>  %2
  7206                              <1>  %rotate 1
  7207                              <1>  %endrep
  7208                              <1>  %rotate 1
  7209                              <1>  j%+1 %2
  7210                              <1>  %else
  7211                              <1>  %error "expect `if' after `continue'"
  7212                              <1>  %endif
  7213                              <1> %else
  7214 0000082D EB15                <1>  jmp %1
  7215                              <1> %endif
  7216                                  		endif
  7217                              <1>  %assign elselevel 0
  7218                              <1>  %ifctx if
  7219                              <1>  %$ifnot:
  7220                              <1>  con_pop
  7221                              <2>  %pop
  7222                              <2>  %assign __level__ __level__ - 1
  7223                              <1>  %elifctx else
  7224                              <1>  %assign elselevel %$elif_level
  7225                              <1>  %$ifend:
  7226                              <1>  con_pop
  7227                              <1>  %elifctx elif
  7228                              <1>  %assign elselevel %$elif_level
  7229                              <1>  %$ifnot:
  7230                              <1>  con_pop
  7231                              <1>  %else
  7232                              <1>  %error "expected `if' or `else' before `endif'"
  7233                              <1>  %endif
  7234                              <1>  %rep elselevel
  7235                              <1>  %$ifend:
  7236                              <1>  con_pop
  7237                              <1>  %endrep
  7238                                  	endif
  7239                              <1>  %assign elselevel 0
  7240                              <1>  %ifctx if
  7241                              <1>  %$ifnot:
  7242                              <1>  con_pop
  7243                              <2>  %pop
  7244                              <2>  %assign __level__ __level__ - 1
  7245                              <1>  %elifctx else
  7246                              <1>  %assign elselevel %$elif_level
  7247                              <1>  %$ifend:
  7248                              <1>  con_pop
  7249                              <1>  %elifctx elif
  7250                              <1>  %assign elselevel %$elif_level
  7251                              <1>  %$ifnot:
  7252                              <1>  con_pop
  7253                              <1>  %else
  7254                              <1>  %error "expected `if' or `else' before `endif'"
  7255                              <1>  %endif
  7256                              <1>  %rep elselevel
  7257                              <1>  %$ifend:
  7258                              <1>  con_pop
  7259                              <1>  %endrep
  7260                                  	
  7261                                  
  7262                                  	inbyte CB_STAT, ; [.status]
  7263 0000082F 8B16[9700]          <1>  mov dx,[reg_addr+%1*2]
  7264 00000833 EC                  <1>  in al,dx
  7265                              <1>  %if %0 > 1
  7266                              <1>  mov %2,al
  7267                              <1>  %endif
  7268                                  	if {test al,CB_STAT_BSY|CB_STAT_DRQ|CB_STAT_ERR},nz 
  7269                              <1>  %rep %0 -1
  7270                              <1>  %1
  7271                              <1>  %rotate 1
  7272                              <1>  %endrep
  7273 00000834 A889                <2>  %1
  7274                              <2>  %rotate 1
  7275                              <1> 
  7276                              <1>  con_push if
  7277                              <2>  %assign __lastlevel__ __level__
  7278                              <2>  %assign __level__ __level__ + 1
  7279                              <2>  %if __return__ > 0
  7280                              <2>  %assign con_return 1
  7281                              <2>  %else
  7282                              <2>  %assign con_return 0
  7283                              <2>  %endif
  7284                              <2> 
  7285                              <2>  %if __cont__ > 0
  7286                              <2>  %assign con_cont 1
  7287                              <2>  %else
  7288                              <2>  %assign con_cont 0
  7289                              <2>  %endif
  7290                              <2>  %if __break__ > 0
  7291                              <2>  %assign con_break 1
  7292                              <2>  %else
  7293                              <2>  %assign con_break 0
  7294                              <2>  %endif
  7295                              <2> 
  7296                              <2>  %ifidn %1,proc
  7297                              <2>  %assign con_return 0
  7298                              <2>  %elifidn %1,forcx
  7299                              <2>  %assign con_break 0
  7300                              <2>  %elifidn %1,repeat
  7301                              <2>  %assign con_cont 0
  7302                              <2>  %assign con_break 0
  7303                              <2>  %elifidn %1,while
  7304                              <2>  %assign con_cont 0
  7305                              <2>  %assign con_break 0
  7306                              <2>  %endif
  7307                              <2> 
  7308                              <2>  %if __cndblock__ == 1
  7309                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  7310                              <2>  %endif
  7311                              <2> 
  7312                              <2>  %push %1
  7313                              <2>  %if con_return
  7314                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  7315                              <3> %define %1%2 %3%4
  7316                              <2>  %endif
  7317                              <2>  %if con_break
  7318                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  7319                              <3> %define %1%2 %3%4
  7320                              <2>  %endif
  7321                              <2>  %if con_cont
  7322                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  7323                              <3> %define %1%2 %3%4
  7324                              <2>  %endif
  7325                              <2> 
  7326                              <2>  %ifidn %1,andblock
  7327                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7328                              <2>  %elifidn %1,orblock
  7329                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7330                              <2>  %endif
  7331                              <1> 
  7332                              <1>  %if %0 > 0
  7333 00000836 7404                <1>  j%-1 %$ifnot
  7334                              <1>  %endif
  7335                              <1>  %assign %$elif_level 0
  7336 00000838 B73A                    		mov bh,58
  7337                                  %ifdef DEBUG
  7338                                  		debug_print "Error: final check for stat al\n"
  7339                                  %endif
  7340                                  		goto .skip_out
  7341                              <1> %if %0 > 1
  7342                              <1>  %ifidn %2,if
  7343                              <1>  %rotate 1
  7344                              <1>  %rep %0 - 3
  7345                              <1>  %2
  7346                              <1>  %rotate 1
  7347                              <1>  %endrep
  7348                              <1>  %rotate 1
  7349                              <1>  j%+1 %2
  7350                              <1>  %else
  7351                              <1>  %error "expect `if' after `continue'"
  7352                              <1>  %endif
  7353                              <1> %else
  7354 0000083A EB08                <1>  jmp %1
  7355                              <1> %endif
  7356                                  	endif
  7357                              <1>  %assign elselevel 0
  7358                              <1>  %ifctx if
  7359                              <1>  %$ifnot:
  7360                              <1>  con_pop
  7361                              <2>  %pop
  7362                              <2>  %assign __level__ __level__ - 1
  7363                              <1>  %elifctx else
  7364                              <1>  %assign elselevel %$elif_level
  7365                              <1>  %$ifend:
  7366                              <1>  con_pop
  7367                              <1>  %elifctx elif
  7368                              <1>  %assign elselevel %$elif_level
  7369                              <1>  %$ifnot:
  7370                              <1>  con_pop
  7371                              <1>  %else
  7372                              <1>  %error "expected `if' or `else' before `endif'"
  7373                              <1>  %endif
  7374                              <1>  %rep elselevel
  7375                              <1>  %$ifend:
  7376                              <1>  con_pop
  7377                              <1>  %endrep
  7378                                  	
  7379                                  	inbyte CB_SC, [.reason]
  7380 0000083C 8B16[8D00]          <1>  mov dx,[reg_addr+%1*2]
  7381 00000840 EC                  <1>  in al,dx
  7382                              <1>  %if %0 > 1
  7383 00000841 8846FE              <1>  mov %2,al
  7384                              <1>  %endif
  7385                                  .skip_out:
  7386                                  %ifdef check_extra_fail
  7387 00000844 8A46FE                  	mov al,[.reason]
  7388                                  	if
  7389                              <1>  %rep %0 -1
  7390                              <1>  %1
  7391                              <1>  %rotate 1
  7392                              <1>  %endrep
  7393                              <1> 
  7394                              <1>  con_push if
  7395                              <2>  %assign __lastlevel__ __level__
  7396                              <2>  %assign __level__ __level__ + 1
  7397                              <2>  %if __return__ > 0
  7398                              <2>  %assign con_return 1
  7399                              <2>  %else
  7400                              <2>  %assign con_return 0
  7401                              <2>  %endif
  7402                              <2> 
  7403                              <2>  %if __cont__ > 0
  7404                              <2>  %assign con_cont 1
  7405                              <2>  %else
  7406                              <2>  %assign con_cont 0
  7407                              <2>  %endif
  7408                              <2>  %if __break__ > 0
  7409                              <2>  %assign con_break 1
  7410                              <2>  %else
  7411                              <2>  %assign con_break 0
  7412                              <2>  %endif
  7413                              <2> 
  7414                              <2>  %ifidn %1,proc
  7415                              <2>  %assign con_return 0
  7416                              <2>  %elifidn %1,forcx
  7417                              <2>  %assign con_break 0
  7418                              <2>  %elifidn %1,repeat
  7419                              <2>  %assign con_cont 0
  7420                              <2>  %assign con_break 0
  7421                              <2>  %elifidn %1,while
  7422                              <2>  %assign con_cont 0
  7423                              <2>  %assign con_break 0
  7424                              <2>  %endif
  7425                              <2> 
  7426                              <2>  %if __cndblock__ == 1
  7427                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  7428                              <2>  %endif
  7429                              <2> 
  7430                              <2>  %push %1
  7431                              <2>  %if con_return
  7432                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  7433                              <3> %define %1%2 %3%4
  7434                              <2>  %endif
  7435                              <2>  %if con_break
  7436                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  7437                              <3> %define %1%2 %3%4
  7438                              <2>  %endif
  7439                              <2>  %if con_cont
  7440                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  7441                              <3> %define %1%2 %3%4
  7442                              <2>  %endif
  7443                              <2> 
  7444                              <2>  %ifidn %1,andblock
  7445                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7446                              <2>  %elifidn %1,orblock
  7447                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7448                              <2>  %endif
  7449                              <1> 
  7450                              <1>  %if %0 > 0
  7451                              <1>  j%-1 %$ifnot
  7452                              <1>  %endif
  7453                              <1>  %assign %$elif_level 0
  7454                                  	orblock
  7455                              <1>  %assign __cndblock__ __cndblock__ + 1
  7456                              <1>  con_push orblock
  7457                              <2>  %assign __lastlevel__ __level__
  7458                              <2>  %assign __level__ __level__ + 1
  7459                              <2>  %if __return__ > 0
  7460                              <2>  %assign con_return 1
  7461                              <2>  %else
  7462                              <2>  %assign con_return 0
  7463                              <2>  %endif
  7464                              <2> 
  7465                              <2>  %if __cont__ > 0
  7466                              <2>  %assign con_cont 1
  7467                              <2>  %else
  7468                              <2>  %assign con_cont 0
  7469                              <2>  %endif
  7470                              <2>  %if __break__ > 0
  7471                              <2>  %assign con_break 1
  7472                              <2>  %else
  7473                              <2>  %assign con_break 0
  7474                              <2>  %endif
  7475                              <2> 
  7476                              <2>  %ifidn %1,proc
  7477                              <2>  %assign con_return 0
  7478                              <2>  %elifidn %1,forcx
  7479                              <2>  %assign con_break 0
  7480                              <2>  %elifidn %1,repeat
  7481                              <2>  %assign con_cont 0
  7482                              <2>  %assign con_break 0
  7483                              <2>  %elifidn %1,while
  7484                              <2>  %assign con_cont 0
  7485                              <2>  %assign con_break 0
  7486                              <2>  %endif
  7487                              <2> 
  7488                              <2>  %if __cndblock__ == 1
  7489                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  7490                              <3> %define %1%2 %3%4
  7491                              <2>  %endif
  7492                              <2> 
  7493                              <2>  %push %1
  7494                              <2>  %if con_return
  7495                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  7496                              <3> %define %1%2 %3%4
  7497                              <2>  %endif
  7498                              <2>  %if con_break
  7499                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  7500                              <3> %define %1%2 %3%4
  7501                              <2>  %endif
  7502                              <2>  %if con_cont
  7503                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  7504                              <3> %define %1%2 %3%4
  7505                              <2>  %endif
  7506                              <2> 
  7507                              <2>  %ifidn %1,andblock
  7508                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7509                              <2>  %elifidn %1,orblock
  7510                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7511                              <3> %define %1%2 %3%4
  7512                              <2>  %endif
  7513                                  		condiction {test al,CB_SC_P_TAG|CB_SC_P_REL},nz
  7514                              <1>  %rep %0 -1
  7515                              <1>  %1
  7516                              <1>  %rotate 1
  7517                              <1>  %endrep
  7518 00000847 A8FC                <2>  %1
  7519                              <2>  %rotate 1
  7520                              <1>  %ifctx andblock
  7521                              <1>  cat_jnc %1,%$ifnot,__level__
  7522                              <1>  %elifctx orblock
  7523 00000849 7508                <1>  j%+1 %$iftrue
  7524                              <1>  %else
  7525                              <1>  %error "not in the andblock or orblock"
  7526                              <1>  %endif
  7527                                  		condiction {test al,CB_SC_P_IO },z
  7528                              <1>  %rep %0 -1
  7529                              <1>  %1
  7530                              <1>  %rotate 1
  7531                              <1>  %endrep
  7532 0000084B A802                <2>  %1
  7533                              <2>  %rotate 1
  7534                              <1>  %ifctx andblock
  7535                              <1>  cat_jnc %1,%$ifnot,__level__
  7536                              <1>  %elifctx orblock
  7537 0000084D 7404                <1>  j%+1 %$iftrue
  7538                              <1>  %else
  7539                              <1>  %error "not in the andblock or orblock"
  7540                              <1>  %endif
  7541                                  		condiction {test al,CB_SC_P_CD},z
  7542                              <1>  %rep %0 -1
  7543                              <1>  %1
  7544                              <1>  %rotate 1
  7545                              <1>  %endrep
  7546 0000084F A801                <2>  %1
  7547                              <2>  %rotate 1
  7548                              <1>  %ifctx andblock
  7549                              <1>  cat_jnc %1,%$ifnot,__level__
  7550                              <1>  %elifctx orblock
  7551 00000851 7400                <1>  j%+1 %$iftrue
  7552                              <1>  %else
  7553                              <1>  %error "not in the andblock or orblock"
  7554                              <1>  %endif
  7555                                  	endblock then
  7556                              <1>  %ifctx orblock
  7557                              <1> 
  7558                              <1>  %$iftrue:
  7559                              <1>  %elifctx andblock
  7560                              <1>  %else
  7561                              <1>  %error "not in andblock or orblock"
  7562                              <1>  %endif
  7563                              <1>  con_pop
  7564                              <2>  %pop
  7565                              <2>  %assign __level__ __level__ - 1
  7566                              <1>  %assign __cndblock__ __cndblock__ - 1
  7567 00000853 81CB0001                		or bx, FAILBIT8
  7568                                  %ifdef DEBUG
  7569                                  		debug_print "FAIL:final check for protocol failures C/nD=1 IO=1\n"
  7570                                  %endif
  7571                                  	endif
  7572                              <1>  %assign elselevel 0
  7573                              <1>  %ifctx if
  7574                              <1>  %$ifnot:
  7575                              <1>  con_pop
  7576                              <2>  %pop
  7577                              <2>  %assign __level__ __level__ - 1
  7578                              <1>  %elifctx else
  7579                              <1>  %assign elselevel %$elif_level
  7580                              <1>  %$ifend:
  7581                              <1>  con_pop
  7582                              <1>  %elifctx elif
  7583                              <1>  %assign elselevel %$elif_level
  7584                              <1>  %$ifnot:
  7585                              <1>  con_pop
  7586                              <1>  %else
  7587                              <1>  %error "expected `if' or `else' before `endif'"
  7588                              <1>  %endif
  7589                              <1>  %rep elselevel
  7590                              <1>  %$ifend:
  7591                              <1>  con_pop
  7592                              <1>  %endrep
  7593                                  %endif	
  7594                                  ;	outbyte CB_DC,cmd_DC
  7595                                  
  7596                                  %ifdef DEBUG
  7597                                  	debug_print " end of command, ec:failbit=%x, %d bytes data\n",bx,cx
  7598                                  %endif
  7599                                  
  7600 00000857 895EF9                  	mov [__AX],bx
  7601 0000085A 894EF7                  	mov [__CX],cx
  7602                                  endp
  7603                              <1> %ifnctx proc
  7604                              <1>  %error "expected `proc' before `endp'"
  7605                              <1> %endif
  7606                              <1>  cat_lable %$return,__level__
  7607                              <2> %1%2:
  7608                              <1>  %if __save_all__ ==1
  7609 0000085D 61                  <1>  popa
  7610                              <1>  %elif __save_all__ == 2
  7611                              <1>  popad
  7612                              <1>  %elif __save_args__ > 0
  7613                              <1>  %assign i 1
  7614                              <1>  %rep __save_args__
  7615                              <1>  linecat pop, %$save_argv,i
  7616                              <1>  %assign i i+1
  7617                              <1>  %endrep
  7618                              <1>  %endif
  7619                              <1>  %if __have_frame__ > 0
  7620 0000085E C9                  <1>  leave
  7621                              <1>  %endif
  7622                              <1> 
  7623                              <1>  %assign i 0
  7624                              <1>  %rep %$proc_args
  7625                              <1> 
  7626                              <1>  %assign i i+1
  7627                              <1>  %endrep
  7628                              <2> 
  7629                              <2>  %assign i i+1
  7630                              <2> 
  7631                              <2>  %assign i i+1
  7632                              <2> 
  7633                              <2>  %assign i i+1
  7634                              <2> 
  7635                              <2>  %assign i i+1
  7636                              <1> 
  7637                              <1>  %assign i 0
  7638                              <1>  %rep %$local_args
  7639                              <1> 
  7640                              <1>  %assign i i+1
  7641                              <1>  %endrep
  7642                              <2> 
  7643                              <2>  %assign i i+1
  7644                              <2> 
  7645                              <2>  %assign i i+1
  7646                              <2> 
  7647                              <2>  %assign i i+1
  7648 0000085F C3                  <1>  ret
  7649                              <1>  con_pop
  7650                              <2>  %pop
  7651                              <2>  %assign __level__ __level__ - 1
  7652                              <1>  %assign __return__ __return__ - 1
  7653                                  
  7654                                  proc	reg_setup_base_addr
  7655                              <1> GLOBAL %1
  7656                              <1> %1:
  7657                              <1> con_push proc
  7658                              <2>  %assign __lastlevel__ __level__
  7659                              <2>  %assign __level__ __level__ + 1
  7660                              <2>  %if __return__ > 0
  7661                              <2>  %assign con_return 1
  7662                              <2>  %else
  7663                              <2>  %assign con_return 0
  7664                              <2>  %endif
  7665                              <2> 
  7666                              <2>  %if __cont__ > 0
  7667                              <2>  %assign con_cont 1
  7668                              <2>  %else
  7669                              <2>  %assign con_cont 0
  7670                              <2>  %endif
  7671                              <2>  %if __break__ > 0
  7672                              <2>  %assign con_break 1
  7673                              <2>  %else
  7674                              <2>  %assign con_break 0
  7675                              <2>  %endif
  7676                              <2> 
  7677                              <2>  %ifidn %1,proc
  7678                              <2>  %assign con_return 0
  7679                              <2>  %elifidn %1,forcx
  7680                              <2>  %assign con_break 0
  7681                              <2>  %elifidn %1,repeat
  7682                              <2>  %assign con_cont 0
  7683                              <2>  %assign con_break 0
  7684                              <2>  %elifidn %1,while
  7685                              <2>  %assign con_cont 0
  7686                              <2>  %assign con_break 0
  7687                              <2>  %endif
  7688                              <2> 
  7689                              <2>  %if __cndblock__ == 1
  7690                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  7691                              <2>  %endif
  7692                              <2> 
  7693                              <2>  %push %1
  7694                              <2>  %if con_return
  7695                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  7696                              <2>  %endif
  7697                              <2>  %if con_break
  7698                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  7699                              <3> %define %1%2 %3%4
  7700                              <2>  %endif
  7701                              <2>  %if con_cont
  7702                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  7703                              <3> %define %1%2 %3%4
  7704                              <2>  %endif
  7705                              <2> 
  7706                              <2>  %ifidn %1,andblock
  7707                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7708                              <2>  %elifidn %1,orblock
  7709                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7710                              <2>  %endif
  7711                              <1> %assign __return__ __return__ + 1
  7712                              <1> %assign __have_frame__ 0
  7713                              <1> %assign %$have_local 0
  7714                              <1> %assign %$have_save 0
  7715                              <1> %assign __save_all__ 0
  7716                              <1> %assign %$local_args 0
  7717                              <1> %assign %$proc_args 0
  7718                              <1> %assign __save_args__ 0
  7719                              <1> %if %0 > 1
  7720                              <1>  %assign args %0 - 1
  7721                              <1>  %assign %$bp_off 4
  7722                              <1>  %assign i 0
  7723                              <1>  %rotate 1
  7724                              <1>  %ifidn %1,withlocal
  7725                              <1>  %assign %$have_local 1
  7726                              <1>  %assign args args -1
  7727                              <1>  %rotate 1
  7728                              <1>  %endif
  7729                              <1>  %assign %$proc_args args
  7730                              <1>  %rep args
  7731                              <1> 
  7732                              <1>  %%inputarg__%1 EQU %$bp_off
  7733                              <1>  %undef .%1
  7734                              <1>  %define .%1 %%inputarg__%1+bp
  7735                              <1>  cat_define %$proc_argv ,i,%1
  7736                              <1>  %assign %$bp_off %$bp_off + 2
  7737                              <1>  %assign i i+1
  7738                              <1>  %rotate 1
  7739                              <1>  %endrep
  7740                              <1>  %if %$have_local==0
  7741                              <1>  enter 0,0
  7742                              <1>  %assign __have_frame__ 1
  7743                              <1>  %endif
  7744                              <1> %endif
  7745                                  ; input:  bx = base addr pointer
  7746                                  	save all
  7747                              <1> %ifctx proc
  7748                              <1>  %if %$have_local == 1
  7749                              <1>  %error "`save' must after `local'"
  7750                              <1>  %endif
  7751                              <1> 
  7752                              <1>  %ifidn all,%1
  7753                              <1>  %assign __save_all__ 1
  7754                              <1>  %if %0 > 1
  7755                              <1>  %ifidn frame,%2
  7756                              <1>  %if __have_frame__ == 0
  7757                              <1>  enter 0,0
  7758                              <1>  %assign __have_frame__ 1
  7759                              <1>  %assign local_off 0
  7760                              <1>  %endif
  7761                              <1>  %endif
  7762                              <1>  %endif
  7763 00000860 60                  <1>  pusha
  7764                              <1>  %if __have_frame__ == 1
  7765                              <1>  %undef __AX
  7766                              <1>  %undef __BX
  7767                              <1>  %undef __CX
  7768                              <1>  %undef __DX
  7769                              <1>  %undef __SI
  7770                              <1>  %undef __DI
  7771                              <1>  %idefine __AX bp-local_off - 2
  7772                              <1>  %idefine __CX bp-local_off - 4
  7773                              <1>  %idefine __DX bp-local_off - 6
  7774                              <1>  %idefine __BX bp-local_off - 8
  7775                              <1> 
  7776                              <1> 
  7777                              <1>  %idefine __SI bp-local_off - 14
  7778                              <1>  %idefine __DI bp-local_off - 16
  7779                              <1>  %endif
  7780                              <1>  %elifidn alld,%1
  7781                              <1>  %assign __save_all__ 2
  7782                              <1>  %if %0 > 1
  7783                              <1>  %ifidn frame,%2
  7784                              <1>  %if __have_frame__ == 0
  7785                              <1>  enter 0,0
  7786                              <1>  %assign __have_frame__ 1
  7787                              <1>  %assign local_off 0
  7788                              <1>  %endif
  7789                              <1>  %endif
  7790                              <1>  %endif
  7791                              <1>  pushad
  7792                              <1>  %if __have_frame__ == 1
  7793                              <1>  %undef __EAX
  7794                              <1>  %undef __EBX
  7795                              <1>  %undef __ECX
  7796                              <1>  %undef __EDX
  7797                              <1>  %undef __ESI
  7798                              <1>  %undef __EDI
  7799                              <1>  %idefine __EAX bp-local_off - 4
  7800                              <1>  %idefine __ECX bp-local_off - 8
  7801                              <1>  %idefine __EDX bp-local_off - 12
  7802                              <1>  %idefine __EBX bp-local_off - 16
  7803                              <1> 
  7804                              <1> 
  7805                              <1>  %idefine __ESI bp-local_off - 18
  7806                              <1>  %idefine __EDI bp-local_off - 32
  7807                              <1>  %endif
  7808                              <1> 
  7809                              <1>  %else
  7810                              <1>  %assign __save_args__ %0
  7811                              <1>  %assign __save_all__ 0
  7812                              <1>  %assign i %0
  7813                              <1>  %rep %0
  7814                              <1>  push %1
  7815                              <1>  cat_define %$save_argv ,i,%1
  7816                              <1>  %rotate 1
  7817                              <1>  %assign i i - 1
  7818                              <1>  %endrep
  7819                              <1>  %endif
  7820                              <1> %else
  7821                              <1>  %error "`save' must after `proc'"
  7822                              <1> %endif
  7823 00000861 FC                      	cld
  7824 00000862 BF[8900]                	mov di,reg_addr
  7825 00000865 8B07                    	mov ax, [bx]
  7826                                  	forcx 8
  7827                              <1> con_push forcx
  7828                              <2>  %assign __lastlevel__ __level__
  7829                              <2>  %assign __level__ __level__ + 1
  7830                              <2>  %if __return__ > 0
  7831                              <2>  %assign con_return 1
  7832                              <2>  %else
  7833                              <2>  %assign con_return 0
  7834                              <2>  %endif
  7835                              <2> 
  7836                              <2>  %if __cont__ > 0
  7837                              <2>  %assign con_cont 1
  7838                              <2>  %else
  7839                              <2>  %assign con_cont 0
  7840                              <2>  %endif
  7841                              <2>  %if __break__ > 0
  7842                              <2>  %assign con_break 1
  7843                              <2>  %else
  7844                              <2>  %assign con_break 0
  7845                              <2>  %endif
  7846                              <2> 
  7847                              <2>  %ifidn %1,proc
  7848                              <2>  %assign con_return 0
  7849                              <2>  %elifidn %1,forcx
  7850                              <2>  %assign con_break 0
  7851                              <2>  %elifidn %1,repeat
  7852                              <2>  %assign con_cont 0
  7853                              <2>  %assign con_break 0
  7854                              <2>  %elifidn %1,while
  7855                              <2>  %assign con_cont 0
  7856                              <2>  %assign con_break 0
  7857                              <2>  %endif
  7858                              <2> 
  7859                              <2>  %if __cndblock__ == 1
  7860                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  7861                              <2>  %endif
  7862                              <2> 
  7863                              <2>  %push %1
  7864                              <2>  %if con_return
  7865                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  7866                              <3> %define %1%2 %3%4
  7867                              <2>  %endif
  7868                              <2>  %if con_break
  7869                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  7870                              <2>  %endif
  7871                              <2>  %if con_cont
  7872                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  7873                              <3> %define %1%2 %3%4
  7874                              <2>  %endif
  7875                              <2> 
  7876                              <2>  %ifidn %1,andblock
  7877                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7878                              <2>  %elifidn %1,orblock
  7879                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  7880                              <2>  %endif
  7881                              <1> %assign __break__ __break__ + 1
  7882                              <1> %if %0 > 0
  7883 00000867 B90800              <1>  mov cx, %1
  7884                              <1> %endif
  7885                              <1> %$begin:
  7886 0000086A AB                      		stosw
  7887 0000086B 40                      		inc ax
  7888                                  	endforcx
  7889                              <1>  %ifnctx forcx
  7890                              <1>  %error "expected `forcx' before `endfor'"
  7891                              <1>  %endif
  7892                              <1>  %if %0 > 0
  7893                              <1>  %ifidn %1,while
  7894                              <1>  %rotate 1
  7895                              <1>  cat_lable %$cont,__level__
  7896                              <1>  %rep %0 - 2
  7897                              <1>  %1
  7898                              <1>  %rotate 1
  7899                              <1>  %endrep
  7900                              <1>  %else
  7901                              <1>  %error "expected `while' after `endfor'"
  7902                              <1>  %endif
  7903                              <1>  loop%+1 %$begin
  7904                              <1>  %else
  7905 0000086C E2FC                <1>  loop %$begin
  7906                              <1>  %endif
  7907                              <1>  %$end:
  7908                              <1>  cat_lable %$break,__level__
  7909                              <2> %1%2:
  7910                              <1> 
  7911                              <1>  con_pop
  7912                              <2>  %pop
  7913                              <2>  %assign __level__ __level__ - 1
  7914                              <1>  %assign __break__ __break__ - 1
  7915 0000086E 8B4702                  	mov ax, [bx+2]
  7916 00000871 AB                      	stosw
  7917 00000872 40                      	inc ax
  7918 00000873 AB                      	stosw
  7919                                  endp
  7920                              <1> %ifnctx proc
  7921                              <1>  %error "expected `proc' before `endp'"
  7922                              <1> %endif
  7923                              <1>  cat_lable %$return,__level__
  7924                              <2> %1%2:
  7925                              <1>  %if __save_all__ ==1
  7926 00000874 61                  <1>  popa
  7927                              <1>  %elif __save_all__ == 2
  7928                              <1>  popad
  7929                              <1>  %elif __save_args__ > 0
  7930                              <1>  %assign i 1
  7931                              <1>  %rep __save_args__
  7932                              <1>  linecat pop, %$save_argv,i
  7933                              <1>  %assign i i+1
  7934                              <1>  %endrep
  7935                              <1>  %endif
  7936                              <1>  %if __have_frame__ > 0
  7937                              <1>  leave
  7938                              <1>  %endif
  7939                              <1> 
  7940                              <1>  %assign i 0
  7941                              <1>  %rep %$proc_args
  7942                              <1> 
  7943                              <1>  %assign i i+1
  7944                              <1>  %endrep
  7945                              <1> 
  7946                              <1>  %assign i 0
  7947                              <1>  %rep %$local_args
  7948                              <1> 
  7949                              <1>  %assign i i+1
  7950                              <1>  %endrep
  7951 00000875 C3                  <1>  ret
  7952                              <1>  con_pop
  7953                              <2>  %pop
  7954                              <2>  %assign __level__ __level__ - 1
  7955                              <1>  %assign __return__ __return__ - 1
  7956                                  
  7957                                  proc	reg_probe_dev_exist
  7958                              <1> GLOBAL %1
  7959                              <1> %1:
  7960                              <1> con_push proc
  7961                              <2>  %assign __lastlevel__ __level__
  7962                              <2>  %assign __level__ __level__ + 1
  7963                              <2>  %if __return__ > 0
  7964                              <2>  %assign con_return 1
  7965                              <2>  %else
  7966                              <2>  %assign con_return 0
  7967                              <2>  %endif
  7968                              <2> 
  7969                              <2>  %if __cont__ > 0
  7970                              <2>  %assign con_cont 1
  7971                              <2>  %else
  7972                              <2>  %assign con_cont 0
  7973                              <2>  %endif
  7974                              <2>  %if __break__ > 0
  7975                              <2>  %assign con_break 1
  7976                              <2>  %else
  7977                              <2>  %assign con_break 0
  7978                              <2>  %endif
  7979                              <2> 
  7980                              <2>  %ifidn %1,proc
  7981                              <2>  %assign con_return 0
  7982                              <2>  %elifidn %1,forcx
  7983                              <2>  %assign con_break 0
  7984                              <2>  %elifidn %1,repeat
  7985                              <2>  %assign con_cont 0
  7986                              <2>  %assign con_break 0
  7987                              <2>  %elifidn %1,while
  7988                              <2>  %assign con_cont 0
  7989                              <2>  %assign con_break 0
  7990                              <2>  %endif
  7991                              <2> 
  7992                              <2>  %if __cndblock__ == 1
  7993                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  7994                              <2>  %endif
  7995                              <2> 
  7996                              <2>  %push %1
  7997                              <2>  %if con_return
  7998                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  7999                              <2>  %endif
  8000                              <2>  %if con_break
  8001                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  8002                              <3> %define %1%2 %3%4
  8003                              <2>  %endif
  8004                              <2>  %if con_cont
  8005                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  8006                              <3> %define %1%2 %3%4
  8007                              <2>  %endif
  8008                              <2> 
  8009                              <2>  %ifidn %1,andblock
  8010                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8011                              <2>  %elifidn %1,orblock
  8012                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8013                              <2>  %endif
  8014                              <1> %assign __return__ __return__ + 1
  8015                              <1> %assign __have_frame__ 0
  8016                              <1> %assign %$have_local 0
  8017                              <1> %assign %$have_save 0
  8018                              <1> %assign __save_all__ 0
  8019                              <1> %assign %$local_args 0
  8020                              <1> %assign %$proc_args 0
  8021                              <1> %assign __save_args__ 0
  8022                              <1> %if %0 > 1
  8023                              <1>  %assign args %0 - 1
  8024                              <1>  %assign %$bp_off 4
  8025                              <1>  %assign i 0
  8026                              <1>  %rotate 1
  8027                              <1>  %ifidn %1,withlocal
  8028                              <1>  %assign %$have_local 1
  8029                              <1>  %assign args args -1
  8030                              <1>  %rotate 1
  8031                              <1>  %endif
  8032                              <1>  %assign %$proc_args args
  8033                              <1>  %rep args
  8034                              <1> 
  8035                              <1>  %%inputarg__%1 EQU %$bp_off
  8036                              <1>  %undef .%1
  8037                              <1>  %define .%1 %%inputarg__%1+bp
  8038                              <1>  cat_define %$proc_argv ,i,%1
  8039                              <1>  %assign %$bp_off %$bp_off + 2
  8040                              <1>  %assign i i+1
  8041                              <1>  %rotate 1
  8042                              <1>  %endrep
  8043                              <1>  %if %$have_local==0
  8044                              <1>  enter 0,0
  8045                              <1>  %assign __have_frame__ 1
  8046                              <1>  %endif
  8047                              <1> %endif
  8048                                  ; input ax=dev
  8049                                  ; return ax = 1: exist
  8050 00000876 E8B8FD                  	call __reg_select_dev
  8051                                  	outbytes CB_SC,0x55,CB_SN,0xaa,CB_SC,0xaa,CB_SN,0x55,CB_SC,0x55
  8052                              <1> %assign LAST_AL 0x1000
  8053                              <1> %rep %0 / 2
  8054                              <1>  %ifnum %2
  8055                              <1>  %if LAST_AL != %2
  8056                              <1>  outbyte %1, %2
  8057                              <1>  %assign LAST_AL %2
  8058                              <1>  %else
  8059                              <1>  outbyte %1
  8060                              <1>  %endif
  8061                              <1>  %else
  8062                              <1>  outbyte %1, %2
  8063                              <1>  %endif
  8064                              <1>  %rotate 2
  8065                              <1> %endrep
  8066                              <2>  %ifnum %2
  8067                              <2>  %if LAST_AL != %2
  8068                              <2>  outbyte %1, %2
  8069                              <3> %if %0>1
  8070 00000879 B055                <3>  mov al,%2
  8071                              <3> %endif
  8072                              <3> %if %0>0
  8073 0000087B 8B16[8D00]          <3>  mov dx,[reg_addr+%1*2]
  8074                              <3> %endif
  8075 0000087F EE                  <3>  out dx,al
  8076                              <2>  %assign LAST_AL %2
  8077                              <2>  %else
  8078                              <2>  outbyte %1
  8079                              <2>  %endif
  8080                              <2>  %else
  8081                              <2>  outbyte %1, %2
  8082                              <2>  %endif
  8083                              <2>  %rotate 2
  8084                              <2>  %ifnum %2
  8085                              <2>  %if LAST_AL != %2
  8086                              <2>  outbyte %1, %2
  8087                              <3> %if %0>1
  8088 00000880 B0AA                <3>  mov al,%2
  8089                              <3> %endif
  8090                              <3> %if %0>0
  8091 00000882 8B16[8F00]          <3>  mov dx,[reg_addr+%1*2]
  8092                              <3> %endif
  8093 00000886 EE                  <3>  out dx,al
  8094                              <2>  %assign LAST_AL %2
  8095                              <2>  %else
  8096                              <2>  outbyte %1
  8097                              <2>  %endif
  8098                              <2>  %else
  8099                              <2>  outbyte %1, %2
  8100                              <2>  %endif
  8101                              <2>  %rotate 2
  8102                              <2>  %ifnum %2
  8103                              <2>  %if LAST_AL != %2
  8104                              <2>  outbyte %1, %2
  8105                              <2>  %assign LAST_AL %2
  8106                              <2>  %else
  8107                              <2>  outbyte %1
  8108                              <3> %if %0>1
  8109                              <3>  mov al,%2
  8110                              <3> %endif
  8111                              <3> %if %0>0
  8112 00000887 8B16[8D00]          <3>  mov dx,[reg_addr+%1*2]
  8113                              <3> %endif
  8114 0000088B EE                  <3>  out dx,al
  8115                              <2>  %endif
  8116                              <2>  %else
  8117                              <2>  outbyte %1, %2
  8118                              <2>  %endif
  8119                              <2>  %rotate 2
  8120                              <2>  %ifnum %2
  8121                              <2>  %if LAST_AL != %2
  8122                              <2>  outbyte %1, %2
  8123                              <3> %if %0>1
  8124 0000088C B055                <3>  mov al,%2
  8125                              <3> %endif
  8126                              <3> %if %0>0
  8127 0000088E 8B16[8F00]          <3>  mov dx,[reg_addr+%1*2]
  8128                              <3> %endif
  8129 00000892 EE                  <3>  out dx,al
  8130                              <2>  %assign LAST_AL %2
  8131                              <2>  %else
  8132                              <2>  outbyte %1
  8133                              <2>  %endif
  8134                              <2>  %else
  8135                              <2>  outbyte %1, %2
  8136                              <2>  %endif
  8137                              <2>  %rotate 2
  8138                              <2>  %ifnum %2
  8139                              <2>  %if LAST_AL != %2
  8140                              <2>  outbyte %1, %2
  8141                              <2>  %assign LAST_AL %2
  8142                              <2>  %else
  8143                              <2>  outbyte %1
  8144                              <3> %if %0>1
  8145                              <3>  mov al,%2
  8146                              <3> %endif
  8147                              <3> %if %0>0
  8148 00000893 8B16[8D00]          <3>  mov dx,[reg_addr+%1*2]
  8149                              <3> %endif
  8150 00000897 EE                  <3>  out dx,al
  8151                              <2>  %endif
  8152                              <2>  %else
  8153                              <2>  outbyte %1, %2
  8154                              <2>  %endif
  8155                              <2>  %rotate 2
  8156                                  	outbyte CB_SN ,0xaa 
  8157                              <1> %if %0>1
  8158 00000898 B0AA                <1>  mov al,%2
  8159                              <1> %endif
  8160                              <1> %if %0>0
  8161 0000089A 8B16[8F00]          <1>  mov dx,[reg_addr+%1*2]
  8162                              <1> %endif
  8163 0000089E EE                  <1>  out dx,al
  8164                                  	inbyte CB_SC,ah
  8165 0000089F 8B16[8D00]          <1>  mov dx,[reg_addr+%1*2]
  8166 000008A3 EC                  <1>  in al,dx
  8167                              <1>  %if %0 > 1
  8168 000008A4 88C4                <1>  mov %2,al
  8169                              <1>  %endif
  8170                                  	inbyte CB_SN
  8171 000008A6 8B16[8F00]          <1>  mov dx,[reg_addr+%1*2]
  8172 000008AA EC                  <1>  in al,dx
  8173                              <1>  %if %0 > 1
  8174                              <1>  mov %2,al
  8175                              <1>  %endif
  8176 000008AB 3DAA55                  	cmp ax, 0x55aa
  8177 000008AE 0F94C0                  	sete al
  8178                                  endp
  8179                              <1> %ifnctx proc
  8180                              <1>  %error "expected `proc' before `endp'"
  8181                              <1> %endif
  8182                              <1>  cat_lable %$return,__level__
  8183                              <2> %1%2:
  8184                              <1>  %if __save_all__ ==1
  8185                              <1>  popa
  8186                              <1>  %elif __save_all__ == 2
  8187                              <1>  popad
  8188                              <1>  %elif __save_args__ > 0
  8189                              <1>  %assign i 1
  8190                              <1>  %rep __save_args__
  8191                              <1>  linecat pop, %$save_argv,i
  8192                              <1>  %assign i i+1
  8193                              <1>  %endrep
  8194                              <1>  %endif
  8195                              <1>  %if __have_frame__ > 0
  8196                              <1>  leave
  8197                              <1>  %endif
  8198                              <1> 
  8199                              <1>  %assign i 0
  8200                              <1>  %rep %$proc_args
  8201                              <1> 
  8202                              <1>  %assign i i+1
  8203                              <1>  %endrep
  8204                              <1> 
  8205                              <1>  %assign i 0
  8206                              <1>  %rep %$local_args
  8207                              <1> 
  8208                              <1>  %assign i i+1
  8209                              <1>  %endrep
  8210 000008B1 C3                  <1>  ret
  8211                              <1>  con_pop
  8212                              <2>  %pop
  8213                              <2>  %assign __level__ __level__ - 1
  8214                              <1>  %assign __return__ __return__ - 1
  8215                                  
  8216                                  proc	reg_probe_exist
  8217                              <1> GLOBAL %1
  8218                              <1> %1:
  8219                              <1> con_push proc
  8220                              <2>  %assign __lastlevel__ __level__
  8221                              <2>  %assign __level__ __level__ + 1
  8222                              <2>  %if __return__ > 0
  8223                              <2>  %assign con_return 1
  8224                              <2>  %else
  8225                              <2>  %assign con_return 0
  8226                              <2>  %endif
  8227                              <2> 
  8228                              <2>  %if __cont__ > 0
  8229                              <2>  %assign con_cont 1
  8230                              <2>  %else
  8231                              <2>  %assign con_cont 0
  8232                              <2>  %endif
  8233                              <2>  %if __break__ > 0
  8234                              <2>  %assign con_break 1
  8235                              <2>  %else
  8236                              <2>  %assign con_break 0
  8237                              <2>  %endif
  8238                              <2> 
  8239                              <2>  %ifidn %1,proc
  8240                              <2>  %assign con_return 0
  8241                              <2>  %elifidn %1,forcx
  8242                              <2>  %assign con_break 0
  8243                              <2>  %elifidn %1,repeat
  8244                              <2>  %assign con_cont 0
  8245                              <2>  %assign con_break 0
  8246                              <2>  %elifidn %1,while
  8247                              <2>  %assign con_cont 0
  8248                              <2>  %assign con_break 0
  8249                              <2>  %endif
  8250                              <2> 
  8251                              <2>  %if __cndblock__ == 1
  8252                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  8253                              <2>  %endif
  8254                              <2> 
  8255                              <2>  %push %1
  8256                              <2>  %if con_return
  8257                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  8258                              <2>  %endif
  8259                              <2>  %if con_break
  8260                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  8261                              <3> %define %1%2 %3%4
  8262                              <2>  %endif
  8263                              <2>  %if con_cont
  8264                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  8265                              <3> %define %1%2 %3%4
  8266                              <2>  %endif
  8267                              <2> 
  8268                              <2>  %ifidn %1,andblock
  8269                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8270                              <2>  %elifidn %1,orblock
  8271                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8272                              <2>  %endif
  8273                              <1> %assign __return__ __return__ + 1
  8274                              <1> %assign __have_frame__ 0
  8275                              <1> %assign %$have_local 0
  8276                              <1> %assign %$have_save 0
  8277                              <1> %assign __save_all__ 0
  8278                              <1> %assign %$local_args 0
  8279                              <1> %assign %$proc_args 0
  8280                              <1> %assign __save_args__ 0
  8281                              <1> %if %0 > 1
  8282                              <1>  %assign args %0 - 1
  8283                              <1>  %assign %$bp_off 4
  8284                              <1>  %assign i 0
  8285                              <1>  %rotate 1
  8286                              <1>  %ifidn %1,withlocal
  8287                              <1>  %assign %$have_local 1
  8288                              <1>  %assign args args -1
  8289                              <1>  %rotate 1
  8290                              <1>  %endif
  8291                              <1>  %assign %$proc_args args
  8292                              <1>  %rep args
  8293                              <1> 
  8294                              <1>  %%inputarg__%1 EQU %$bp_off
  8295                              <1>  %undef .%1
  8296                              <1>  %define .%1 %%inputarg__%1+bp
  8297                              <1>  cat_define %$proc_argv ,i,%1
  8298                              <1>  %assign %$bp_off %$bp_off + 2
  8299                              <1>  %assign i i+1
  8300                              <1>  %rotate 1
  8301                              <1>  %endrep
  8302                              <1>  %if %$have_local==0
  8303                              <1>  enter 0,0
  8304                              <1>  %assign __have_frame__ 1
  8305                              <1>  %endif
  8306                              <1> %endif
  8307                                  ; new fixed
  8308                                  	outbyte CB_DC, cmd_DC
  8309                              <1> %if %0>1
  8310 000008B2 B008                <1>  mov al,%2
  8311                              <1> %endif
  8312                              <1> %if %0>0
  8313 000008B4 8B16[9900]          <1>  mov dx,[reg_addr+%1*2]
  8314                              <1> %endif
  8315 000008B8 EE                  <1>  out dx,al
  8316                                  
  8317                                  	mov_ax 0
  8318                              <1>  %if %1 == 0
  8319 000008B9 29C0                <1>  sub ax,ax
  8320                              <1>  %else
  8321                              <1>  mov ax,%1
  8322                              <1>  %endif
  8323 000008BB E8B8FF                  	call reg_probe_dev_exist
  8324 000008BE A2[0500]                	mov [reg_dev_info],al
  8325 000008C1 B80100                  	mov ax,1
  8326 000008C4 E8AFFF                  	call reg_probe_dev_exist
  8327 000008C7 A2[0600]                	mov [reg_dev_info+1],al
  8328                                  endp
  8329                              <1> %ifnctx proc
  8330                              <1>  %error "expected `proc' before `endp'"
  8331                              <1> %endif
  8332                              <1>  cat_lable %$return,__level__
  8333                              <2> %1%2:
  8334                              <1>  %if __save_all__ ==1
  8335                              <1>  popa
  8336                              <1>  %elif __save_all__ == 2
  8337                              <1>  popad
  8338                              <1>  %elif __save_args__ > 0
  8339                              <1>  %assign i 1
  8340                              <1>  %rep __save_args__
  8341                              <1>  linecat pop, %$save_argv,i
  8342                              <1>  %assign i i+1
  8343                              <1>  %endrep
  8344                              <1>  %endif
  8345                              <1>  %if __have_frame__ > 0
  8346                              <1>  leave
  8347                              <1>  %endif
  8348                              <1> 
  8349                              <1>  %assign i 0
  8350                              <1>  %rep %$proc_args
  8351                              <1> 
  8352                              <1>  %assign i i+1
  8353                              <1>  %endrep
  8354                              <1> 
  8355                              <1>  %assign i 0
  8356                              <1>  %rep %$local_args
  8357                              <1> 
  8358                              <1>  %assign i i+1
  8359                              <1>  %endrep
  8360 000008CA C3                  <1>  ret
  8361                              <1>  con_pop
  8362                              <2>  %pop
  8363                              <2>  %assign __level__ __level__ - 1
  8364                              <1>  %assign __return__ __return__ - 1
  8365                                  
  8366                                  proc	reg_check_dev_type
  8367                              <1> GLOBAL %1
  8368                              <1> %1:
  8369                              <1> con_push proc
  8370                              <2>  %assign __lastlevel__ __level__
  8371                              <2>  %assign __level__ __level__ + 1
  8372                              <2>  %if __return__ > 0
  8373                              <2>  %assign con_return 1
  8374                              <2>  %else
  8375                              <2>  %assign con_return 0
  8376                              <2>  %endif
  8377                              <2> 
  8378                              <2>  %if __cont__ > 0
  8379                              <2>  %assign con_cont 1
  8380                              <2>  %else
  8381                              <2>  %assign con_cont 0
  8382                              <2>  %endif
  8383                              <2>  %if __break__ > 0
  8384                              <2>  %assign con_break 1
  8385                              <2>  %else
  8386                              <2>  %assign con_break 0
  8387                              <2>  %endif
  8388                              <2> 
  8389                              <2>  %ifidn %1,proc
  8390                              <2>  %assign con_return 0
  8391                              <2>  %elifidn %1,forcx
  8392                              <2>  %assign con_break 0
  8393                              <2>  %elifidn %1,repeat
  8394                              <2>  %assign con_cont 0
  8395                              <2>  %assign con_break 0
  8396                              <2>  %elifidn %1,while
  8397                              <2>  %assign con_cont 0
  8398                              <2>  %assign con_break 0
  8399                              <2>  %endif
  8400                              <2> 
  8401                              <2>  %if __cndblock__ == 1
  8402                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  8403                              <2>  %endif
  8404                              <2> 
  8405                              <2>  %push %1
  8406                              <2>  %if con_return
  8407                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  8408                              <2>  %endif
  8409                              <2>  %if con_break
  8410                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  8411                              <3> %define %1%2 %3%4
  8412                              <2>  %endif
  8413                              <2>  %if con_cont
  8414                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  8415                              <3> %define %1%2 %3%4
  8416                              <2>  %endif
  8417                              <2> 
  8418                              <2>  %ifidn %1,andblock
  8419                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8420                              <2>  %elifidn %1,orblock
  8421                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8422                              <2>  %endif
  8423                              <1> %assign __return__ __return__ + 1
  8424                              <1> %assign __have_frame__ 0
  8425                              <1> %assign %$have_local 0
  8426                              <1> %assign %$have_save 0
  8427                              <1> %assign __save_all__ 0
  8428                              <1> %assign %$local_args 0
  8429                              <1> %assign %$proc_args 0
  8430                              <1> %assign __save_args__ 0
  8431                              <1> %if %0 > 1
  8432                              <1>  %assign args %0 - 1
  8433                              <1>  %assign %$bp_off 4
  8434                              <1>  %assign i 0
  8435                              <1>  %rotate 1
  8436                              <1>  %ifidn %1,withlocal
  8437                              <1>  %assign %$have_local 1
  8438                              <1>  %assign args args -1
  8439                              <1>  %rotate 1
  8440                              <1>  %endif
  8441                              <1>  %assign %$proc_args args
  8442                              <1>  %rep args
  8443                              <1> 
  8444                              <1>  %%inputarg__%1 EQU %$bp_off
  8445                              <1>  %undef .%1
  8446                              <1>  %define .%1 %%inputarg__%1+bp
  8447                              <1>  cat_define %$proc_argv ,i,%1
  8448                              <1>  %assign %$bp_off %$bp_off + 2
  8449                              <1>  %assign i i+1
  8450                              <1>  %rotate 1
  8451                              <1>  %endrep
  8452                              <1>  %if %$have_local==0
  8453                              <1>  enter 0,0
  8454                              <1>  %assign __have_frame__ 1
  8455                              <1>  %endif
  8456                              <1> %endif
  8457                                  ; input ax=dev
  8458                                  ; call after a reset
  8459 000008CB E863FD                  	call __reg_select_dev
  8460                                  	inbyte CB_SC, ah
  8461 000008CE 8B16[8D00]          <1>  mov dx,[reg_addr+%1*2]
  8462 000008D2 EC                  <1>  in al,dx
  8463                              <1>  %if %0 > 1
  8464 000008D3 88C4                <1>  mov %2,al
  8465                              <1>  %endif
  8466                                  	inbyte CB_SN
  8467 000008D5 8B16[8F00]          <1>  mov dx,[reg_addr+%1*2]
  8468 000008D9 EC                  <1>  in al,dx
  8469                              <1>  %if %0 > 1
  8470                              <1>  mov %2,al
  8471                              <1>  %endif
  8472                                  
  8473                                  	if {cmp ax, 0x0101}, ne
  8474                              <1>  %rep %0 -1
  8475                              <1>  %1
  8476                              <1>  %rotate 1
  8477                              <1>  %endrep
  8478 000008DA 3D0101              <2>  %1
  8479                              <2>  %rotate 1
  8480                              <1> 
  8481                              <1>  con_push if
  8482                              <2>  %assign __lastlevel__ __level__
  8483                              <2>  %assign __level__ __level__ + 1
  8484                              <2>  %if __return__ > 0
  8485                              <2>  %assign con_return 1
  8486                              <2>  %else
  8487                              <2>  %assign con_return 0
  8488                              <2>  %endif
  8489                              <2> 
  8490                              <2>  %if __cont__ > 0
  8491                              <2>  %assign con_cont 1
  8492                              <2>  %else
  8493                              <2>  %assign con_cont 0
  8494                              <2>  %endif
  8495                              <2>  %if __break__ > 0
  8496                              <2>  %assign con_break 1
  8497                              <2>  %else
  8498                              <2>  %assign con_break 0
  8499                              <2>  %endif
  8500                              <2> 
  8501                              <2>  %ifidn %1,proc
  8502                              <2>  %assign con_return 0
  8503                              <2>  %elifidn %1,forcx
  8504                              <2>  %assign con_break 0
  8505                              <2>  %elifidn %1,repeat
  8506                              <2>  %assign con_cont 0
  8507                              <2>  %assign con_break 0
  8508                              <2>  %elifidn %1,while
  8509                              <2>  %assign con_cont 0
  8510                              <2>  %assign con_break 0
  8511                              <2>  %endif
  8512                              <2> 
  8513                              <2>  %if __cndblock__ == 1
  8514                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  8515                              <2>  %endif
  8516                              <2> 
  8517                              <2>  %push %1
  8518                              <2>  %if con_return
  8519                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  8520                              <3> %define %1%2 %3%4
  8521                              <2>  %endif
  8522                              <2>  %if con_break
  8523                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  8524                              <3> %define %1%2 %3%4
  8525                              <2>  %endif
  8526                              <2>  %if con_cont
  8527                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  8528                              <3> %define %1%2 %3%4
  8529                              <2>  %endif
  8530                              <2> 
  8531                              <2>  %ifidn %1,andblock
  8532                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8533                              <2>  %elifidn %1,orblock
  8534                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8535                              <2>  %endif
  8536                              <1> 
  8537                              <1>  %if %0 > 0
  8538 000008DD 7404                <1>  j%-1 %$ifnot
  8539                              <1>  %endif
  8540                              <1>  %assign %$elif_level 0
  8541 000008DF B80100                  		mov ax, 1
  8542                                  		return
  8543                              <1>  %if %0 > 0
  8544                              <1>  %assign __near__ 0
  8545                              <1>  %assign argc %0
  8546                              <1>  %ifidn %1,near
  8547                              <1>  %assign __near__ 1
  8548                              <1>  %assign argc argc-1
  8549                              <1>  %rotate 1
  8550                              <1>  %endif
  8551                              <1>  %if argc > 0
  8552                              <1>  %ifidn %1,if
  8553                              <1> 
  8554                              <1>  %rotate 1
  8555                              <1>  %rep argc-2
  8556                              <1>  %1
  8557                              <1>  %rotate 1
  8558                              <1>  %endrep
  8559                              <1>  %if __near__ == 0
  8560                              <1>  cat_jc %1,%$return,__level__
  8561                              <1>  %else
  8562                              <1>  cat_jc_near %1,%$return,__level__
  8563                              <1>  %endif
  8564                              <1>  %else
  8565                              <1>  %error "expect `if' after `return'"
  8566                              <1>  %endif
  8567                              <1>  %else
  8568                              <1>  %if __near__ == 0
  8569                              <1>  cat_jmp %$return,__level__
  8570                              <1>  %else
  8571                              <1>  cat_jmp_near %$return,__level__
  8572                              <1>  %endif
  8573                              <1>  %endif
  8574                              <1>  %else
  8575                              <1>  %if __have_frame__ == 0 && __save_all__ == 0 && __save_args__ == 0
  8576 000008E2 C3                  <1>  ret
  8577                              <1>  %else
  8578                              <1>  cat_jmp %$return,__level__
  8579                              <1>  %endif
  8580                              <1>  %endif
  8581                                  	endif
  8582                              <1>  %assign elselevel 0
  8583                              <1>  %ifctx if
  8584                              <1>  %$ifnot:
  8585                              <1>  con_pop
  8586                              <2>  %pop
  8587                              <2>  %assign __level__ __level__ - 1
  8588                              <1>  %elifctx else
  8589                              <1>  %assign elselevel %$elif_level
  8590                              <1>  %$ifend:
  8591                              <1>  con_pop
  8592                              <1>  %elifctx elif
  8593                              <1>  %assign elselevel %$elif_level
  8594                              <1>  %$ifnot:
  8595                              <1>  con_pop
  8596                              <1>  %else
  8597                              <1>  %error "expected `if' or `else' before `endif'"
  8598                              <1>  %endif
  8599                              <1>  %rep elselevel
  8600                              <1>  %$ifend:
  8601                              <1>  con_pop
  8602                              <1>  %endrep
  8603                                  
  8604                                  	inbyte CB_CL,ah
  8605 000008E3 8B16[9100]          <1>  mov dx,[reg_addr+%1*2]
  8606 000008E7 EC                  <1>  in al,dx
  8607                              <1>  %if %0 > 1
  8608 000008E8 88C4                <1>  mov %2,al
  8609                              <1>  %endif
  8610                                  	inbyte CB_CH
  8611 000008EA 8B16[9300]          <1>  mov dx,[reg_addr+%1*2]
  8612 000008EE EC                  <1>  in al,dx
  8613                              <1>  %if %0 > 1
  8614                              <1>  mov %2,al
  8615                              <1>  %endif
  8616                                  
  8617                                  	if {cmp ax, 0x14eb}, e
  8618                              <1>  %rep %0 -1
  8619                              <1>  %1
  8620                              <1>  %rotate 1
  8621                              <1>  %endrep
  8622 000008EF 3DEB14              <2>  %1
  8623                              <2>  %rotate 1
  8624                              <1> 
  8625                              <1>  con_push if
  8626                              <2>  %assign __lastlevel__ __level__
  8627                              <2>  %assign __level__ __level__ + 1
  8628                              <2>  %if __return__ > 0
  8629                              <2>  %assign con_return 1
  8630                              <2>  %else
  8631                              <2>  %assign con_return 0
  8632                              <2>  %endif
  8633                              <2> 
  8634                              <2>  %if __cont__ > 0
  8635                              <2>  %assign con_cont 1
  8636                              <2>  %else
  8637                              <2>  %assign con_cont 0
  8638                              <2>  %endif
  8639                              <2>  %if __break__ > 0
  8640                              <2>  %assign con_break 1
  8641                              <2>  %else
  8642                              <2>  %assign con_break 0
  8643                              <2>  %endif
  8644                              <2> 
  8645                              <2>  %ifidn %1,proc
  8646                              <2>  %assign con_return 0
  8647                              <2>  %elifidn %1,forcx
  8648                              <2>  %assign con_break 0
  8649                              <2>  %elifidn %1,repeat
  8650                              <2>  %assign con_cont 0
  8651                              <2>  %assign con_break 0
  8652                              <2>  %elifidn %1,while
  8653                              <2>  %assign con_cont 0
  8654                              <2>  %assign con_break 0
  8655                              <2>  %endif
  8656                              <2> 
  8657                              <2>  %if __cndblock__ == 1
  8658                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  8659                              <2>  %endif
  8660                              <2> 
  8661                              <2>  %push %1
  8662                              <2>  %if con_return
  8663                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  8664                              <3> %define %1%2 %3%4
  8665                              <2>  %endif
  8666                              <2>  %if con_break
  8667                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  8668                              <3> %define %1%2 %3%4
  8669                              <2>  %endif
  8670                              <2>  %if con_cont
  8671                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  8672                              <3> %define %1%2 %3%4
  8673                              <2>  %endif
  8674                              <2> 
  8675                              <2>  %ifidn %1,andblock
  8676                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8677                              <2>  %elifidn %1,orblock
  8678                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8679                              <2>  %endif
  8680                              <1> 
  8681                              <1>  %if %0 > 0
  8682 000008F2 7504                <1>  j%-1 %$ifnot
  8683                              <1>  %endif
  8684                              <1>  %assign %$elif_level 0
  8685 000008F4 B80300                  		mov ax, REG_CONFIG_TYPE_ATAPI
  8686                                  		return
  8687                              <1>  %if %0 > 0
  8688                              <1>  %assign __near__ 0
  8689                              <1>  %assign argc %0
  8690                              <1>  %ifidn %1,near
  8691                              <1>  %assign __near__ 1
  8692                              <1>  %assign argc argc-1
  8693                              <1>  %rotate 1
  8694                              <1>  %endif
  8695                              <1>  %if argc > 0
  8696                              <1>  %ifidn %1,if
  8697                              <1> 
  8698                              <1>  %rotate 1
  8699                              <1>  %rep argc-2
  8700                              <1>  %1
  8701                              <1>  %rotate 1
  8702                              <1>  %endrep
  8703                              <1>  %if __near__ == 0
  8704                              <1>  cat_jc %1,%$return,__level__
  8705                              <1>  %else
  8706                              <1>  cat_jc_near %1,%$return,__level__
  8707                              <1>  %endif
  8708                              <1>  %else
  8709                              <1>  %error "expect `if' after `return'"
  8710                              <1>  %endif
  8711                              <1>  %else
  8712                              <1>  %if __near__ == 0
  8713                              <1>  cat_jmp %$return,__level__
  8714                              <1>  %else
  8715                              <1>  cat_jmp_near %$return,__level__
  8716                              <1>  %endif
  8717                              <1>  %endif
  8718                              <1>  %else
  8719                              <1>  %if __have_frame__ == 0 && __save_all__ == 0 && __save_args__ == 0
  8720 000008F7 C3                  <1>  ret
  8721                              <1>  %else
  8722                              <1>  cat_jmp %$return,__level__
  8723                              <1>  %endif
  8724                              <1>  %endif
  8725                                  	endif
  8726                              <1>  %assign elselevel 0
  8727                              <1>  %ifctx if
  8728                              <1>  %$ifnot:
  8729                              <1>  con_pop
  8730                              <2>  %pop
  8731                              <2>  %assign __level__ __level__ - 1
  8732                              <1>  %elifctx else
  8733                              <1>  %assign elselevel %$elif_level
  8734                              <1>  %$ifend:
  8735                              <1>  con_pop
  8736                              <1>  %elifctx elif
  8737                              <1>  %assign elselevel %$elif_level
  8738                              <1>  %$ifnot:
  8739                              <1>  con_pop
  8740                              <1>  %else
  8741                              <1>  %error "expected `if' or `else' before `endif'"
  8742                              <1>  %endif
  8743                              <1>  %rep elselevel
  8744                              <1>  %$ifend:
  8745                              <1>  con_pop
  8746                              <1>  %endrep
  8747                                  
  8748                                  	if {or al,al},z
  8749                              <1>  %rep %0 -1
  8750                              <1>  %1
  8751                              <1>  %rotate 1
  8752                              <1>  %endrep
  8753 000008F8 08C0                <2>  %1
  8754                              <2>  %rotate 1
  8755                              <1> 
  8756                              <1>  con_push if
  8757                              <2>  %assign __lastlevel__ __level__
  8758                              <2>  %assign __level__ __level__ + 1
  8759                              <2>  %if __return__ > 0
  8760                              <2>  %assign con_return 1
  8761                              <2>  %else
  8762                              <2>  %assign con_return 0
  8763                              <2>  %endif
  8764                              <2> 
  8765                              <2>  %if __cont__ > 0
  8766                              <2>  %assign con_cont 1
  8767                              <2>  %else
  8768                              <2>  %assign con_cont 0
  8769                              <2>  %endif
  8770                              <2>  %if __break__ > 0
  8771                              <2>  %assign con_break 1
  8772                              <2>  %else
  8773                              <2>  %assign con_break 0
  8774                              <2>  %endif
  8775                              <2> 
  8776                              <2>  %ifidn %1,proc
  8777                              <2>  %assign con_return 0
  8778                              <2>  %elifidn %1,forcx
  8779                              <2>  %assign con_break 0
  8780                              <2>  %elifidn %1,repeat
  8781                              <2>  %assign con_cont 0
  8782                              <2>  %assign con_break 0
  8783                              <2>  %elifidn %1,while
  8784                              <2>  %assign con_cont 0
  8785                              <2>  %assign con_break 0
  8786                              <2>  %endif
  8787                              <2> 
  8788                              <2>  %if __cndblock__ == 1
  8789                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  8790                              <2>  %endif
  8791                              <2> 
  8792                              <2>  %push %1
  8793                              <2>  %if con_return
  8794                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  8795                              <3> %define %1%2 %3%4
  8796                              <2>  %endif
  8797                              <2>  %if con_break
  8798                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  8799                              <3> %define %1%2 %3%4
  8800                              <2>  %endif
  8801                              <2>  %if con_cont
  8802                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  8803                              <3> %define %1%2 %3%4
  8804                              <2>  %endif
  8805                              <2> 
  8806                              <2>  %ifidn %1,andblock
  8807                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8808                              <2>  %elifidn %1,orblock
  8809                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8810                              <2>  %endif
  8811                              <1> 
  8812                              <1>  %if %0 > 0
  8813 000008FA 750D                <1>  j%-1 %$ifnot
  8814                              <1>  %endif
  8815                              <1>  %assign %$elif_level 0
  8816                                  	    inbyte CB_STAT
  8817 000008FC 8B16[9700]          <1>  mov dx,[reg_addr+%1*2]
  8818 00000900 EC                  <1>  in al,dx
  8819                              <1>  %if %0 > 1
  8820                              <1>  mov %2,al
  8821                              <1>  %endif
  8822                                  		if {or al, al}, nz
  8823                              <1>  %rep %0 -1
  8824                              <1>  %1
  8825                              <1>  %rotate 1
  8826                              <1>  %endrep
  8827 00000901 08C0                <2>  %1
  8828                              <2>  %rotate 1
  8829                              <1> 
  8830                              <1>  con_push if
  8831                              <2>  %assign __lastlevel__ __level__
  8832                              <2>  %assign __level__ __level__ + 1
  8833                              <2>  %if __return__ > 0
  8834                              <2>  %assign con_return 1
  8835                              <2>  %else
  8836                              <2>  %assign con_return 0
  8837                              <2>  %endif
  8838                              <2> 
  8839                              <2>  %if __cont__ > 0
  8840                              <2>  %assign con_cont 1
  8841                              <2>  %else
  8842                              <2>  %assign con_cont 0
  8843                              <2>  %endif
  8844                              <2>  %if __break__ > 0
  8845                              <2>  %assign con_break 1
  8846                              <2>  %else
  8847                              <2>  %assign con_break 0
  8848                              <2>  %endif
  8849                              <2> 
  8850                              <2>  %ifidn %1,proc
  8851                              <2>  %assign con_return 0
  8852                              <2>  %elifidn %1,forcx
  8853                              <2>  %assign con_break 0
  8854                              <2>  %elifidn %1,repeat
  8855                              <2>  %assign con_cont 0
  8856                              <2>  %assign con_break 0
  8857                              <2>  %elifidn %1,while
  8858                              <2>  %assign con_cont 0
  8859                              <2>  %assign con_break 0
  8860                              <2>  %endif
  8861                              <2> 
  8862                              <2>  %if __cndblock__ == 1
  8863                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  8864                              <2>  %endif
  8865                              <2> 
  8866                              <2>  %push %1
  8867                              <2>  %if con_return
  8868                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  8869                              <3> %define %1%2 %3%4
  8870                              <2>  %endif
  8871                              <2>  %if con_break
  8872                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  8873                              <3> %define %1%2 %3%4
  8874                              <2>  %endif
  8875                              <2>  %if con_cont
  8876                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  8877                              <3> %define %1%2 %3%4
  8878                              <2>  %endif
  8879                              <2> 
  8880                              <2>  %ifidn %1,andblock
  8881                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8882                              <2>  %elifidn %1,orblock
  8883                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  8884                              <2>  %endif
  8885                              <1> 
  8886                              <1>  %if %0 > 0
  8887 00000903 7404                <1>  j%-1 %$ifnot
  8888                              <1>  %endif
  8889                              <1>  %assign %$elif_level 0
  8890 00000905 B80200                  			mov ax, REG_CONFIG_TYPE_ATA
  8891                                  			return
  8892                              <1>  %if %0 > 0
  8893                              <1>  %assign __near__ 0
  8894                              <1>  %assign argc %0
  8895                              <1>  %ifidn %1,near
  8896                              <1>  %assign __near__ 1
  8897                              <1>  %assign argc argc-1
  8898                              <1>  %rotate 1
  8899                              <1>  %endif
  8900                              <1>  %if argc > 0
  8901                              <1>  %ifidn %1,if
  8902                              <1> 
  8903                              <1>  %rotate 1
  8904                              <1>  %rep argc-2
  8905                              <1>  %1
  8906                              <1>  %rotate 1
  8907                              <1>  %endrep
  8908                              <1>  %if __near__ == 0
  8909                              <1>  cat_jc %1,%$return,__level__
  8910                              <1>  %else
  8911                              <1>  cat_jc_near %1,%$return,__level__
  8912                              <1>  %endif
  8913                              <1>  %else
  8914                              <1>  %error "expect `if' after `return'"
  8915                              <1>  %endif
  8916                              <1>  %else
  8917                              <1>  %if __near__ == 0
  8918                              <1>  cat_jmp %$return,__level__
  8919                              <1>  %else
  8920                              <1>  cat_jmp_near %$return,__level__
  8921                              <1>  %endif
  8922                              <1>  %endif
  8923                              <1>  %else
  8924                              <1>  %if __have_frame__ == 0 && __save_all__ == 0 && __save_args__ == 0
  8925 00000908 C3                  <1>  ret
  8926                              <1>  %else
  8927                              <1>  cat_jmp %$return,__level__
  8928                              <1>  %endif
  8929                              <1>  %endif
  8930                                  		endif
  8931                              <1>  %assign elselevel 0
  8932                              <1>  %ifctx if
  8933                              <1>  %$ifnot:
  8934                              <1>  con_pop
  8935                              <2>  %pop
  8936                              <2>  %assign __level__ __level__ - 1
  8937                              <1>  %elifctx else
  8938                              <1>  %assign elselevel %$elif_level
  8939                              <1>  %$ifend:
  8940                              <1>  con_pop
  8941                              <1>  %elifctx elif
  8942                              <1>  %assign elselevel %$elif_level
  8943                              <1>  %$ifnot:
  8944                              <1>  con_pop
  8945                              <1>  %else
  8946                              <1>  %error "expected `if' or `else' before `endif'"
  8947                              <1>  %endif
  8948                              <1>  %rep elselevel
  8949                              <1>  %$ifend:
  8950                              <1>  con_pop
  8951                              <1>  %endrep
  8952                                  	endif
  8953                              <1>  %assign elselevel 0
  8954                              <1>  %ifctx if
  8955                              <1>  %$ifnot:
  8956                              <1>  con_pop
  8957                              <2>  %pop
  8958                              <2>  %assign __level__ __level__ - 1
  8959                              <1>  %elifctx else
  8960                              <1>  %assign elselevel %$elif_level
  8961                              <1>  %$ifend:
  8962                              <1>  con_pop
  8963                              <1>  %elifctx elif
  8964                              <1>  %assign elselevel %$elif_level
  8965                              <1>  %$ifnot:
  8966                              <1>  con_pop
  8967                              <1>  %else
  8968                              <1>  %error "expected `if' or `else' before `endif'"
  8969                              <1>  %endif
  8970                              <1>  %rep elselevel
  8971                              <1>  %$ifend:
  8972                              <1>  con_pop
  8973                              <1>  %endrep
  8974 00000909 B80100                  	mov ax, REG_CONFIG_TYPE_UNKN
  8975                                  endp
  8976                              <1> %ifnctx proc
  8977                              <1>  %error "expected `proc' before `endp'"
  8978                              <1> %endif
  8979                              <1>  cat_lable %$return,__level__
  8980                              <2> %1%2:
  8981                              <1>  %if __save_all__ ==1
  8982                              <1>  popa
  8983                              <1>  %elif __save_all__ == 2
  8984                              <1>  popad
  8985                              <1>  %elif __save_args__ > 0
  8986                              <1>  %assign i 1
  8987                              <1>  %rep __save_args__
  8988                              <1>  linecat pop, %$save_argv,i
  8989                              <1>  %assign i i+1
  8990                              <1>  %endrep
  8991                              <1>  %endif
  8992                              <1>  %if __have_frame__ > 0
  8993                              <1>  leave
  8994                              <1>  %endif
  8995                              <1> 
  8996                              <1>  %assign i 0
  8997                              <1>  %rep %$proc_args
  8998                              <1> 
  8999                              <1>  %assign i i+1
  9000                              <1>  %endrep
  9001                              <1> 
  9002                              <1>  %assign i 0
  9003                              <1>  %rep %$local_args
  9004                              <1> 
  9005                              <1>  %assign i i+1
  9006                              <1>  %endrep
  9007 0000090C C3                  <1>  ret
  9008                              <1>  con_pop
  9009                              <2>  %pop
  9010                              <2>  %assign __level__ __level__ - 1
  9011                              <1>  %assign __return__ __return__ - 1
  9012                                  
  9013                                  proc	reg_reset
  9014                              <1> GLOBAL %1
  9015                              <1> %1:
  9016                              <1> con_push proc
  9017                              <2>  %assign __lastlevel__ __level__
  9018                              <2>  %assign __level__ __level__ + 1
  9019                              <2>  %if __return__ > 0
  9020                              <2>  %assign con_return 1
  9021                              <2>  %else
  9022                              <2>  %assign con_return 0
  9023                              <2>  %endif
  9024                              <2> 
  9025                              <2>  %if __cont__ > 0
  9026                              <2>  %assign con_cont 1
  9027                              <2>  %else
  9028                              <2>  %assign con_cont 0
  9029                              <2>  %endif
  9030                              <2>  %if __break__ > 0
  9031                              <2>  %assign con_break 1
  9032                              <2>  %else
  9033                              <2>  %assign con_break 0
  9034                              <2>  %endif
  9035                              <2> 
  9036                              <2>  %ifidn %1,proc
  9037                              <2>  %assign con_return 0
  9038                              <2>  %elifidn %1,forcx
  9039                              <2>  %assign con_break 0
  9040                              <2>  %elifidn %1,repeat
  9041                              <2>  %assign con_cont 0
  9042                              <2>  %assign con_break 0
  9043                              <2>  %elifidn %1,while
  9044                              <2>  %assign con_cont 0
  9045                              <2>  %assign con_break 0
  9046                              <2>  %endif
  9047                              <2> 
  9048                              <2>  %if __cndblock__ == 1
  9049                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  9050                              <2>  %endif
  9051                              <2> 
  9052                              <2>  %push %1
  9053                              <2>  %if con_return
  9054                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  9055                              <2>  %endif
  9056                              <2>  %if con_break
  9057                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  9058                              <3> %define %1%2 %3%4
  9059                              <2>  %endif
  9060                              <2>  %if con_cont
  9061                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  9062                              <3> %define %1%2 %3%4
  9063                              <2>  %endif
  9064                              <2> 
  9065                              <2>  %ifidn %1,andblock
  9066                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9067                              <2>  %elifidn %1,orblock
  9068                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9069                              <2>  %endif
  9070                              <1> %assign __return__ __return__ + 1
  9071                              <1> %assign __have_frame__ 0
  9072                              <1> %assign %$have_local 0
  9073                              <1> %assign %$have_save 0
  9074                              <1> %assign __save_all__ 0
  9075                              <1> %assign %$local_args 0
  9076                              <1> %assign %$proc_args 0
  9077                              <1> %assign __save_args__ 0
  9078                              <1> %if %0 > 1
  9079                              <1>  %assign args %0 - 1
  9080                              <1>  %assign %$bp_off 4
  9081                              <1>  %assign i 0
  9082                              <1>  %rotate 1
  9083                              <1>  %ifidn %1,withlocal
  9084                              <1>  %assign %$have_local 1
  9085                              <1>  %assign args args -1
  9086                              <1>  %rotate 1
  9087                              <1>  %endif
  9088                              <1>  %assign %$proc_args args
  9089                              <1>  %rep args
  9090                              <1> 
  9091                              <1>  %%inputarg__%1 EQU %$bp_off
  9092                              <1>  %undef .%1
  9093                              <1>  %define .%1 %%inputarg__%1+bp
  9094                              <1>  cat_define %$proc_argv ,i,%1
  9095                              <1>  %assign %$bp_off %$bp_off + 2
  9096                              <1>  %assign i i+1
  9097                              <1>  %rotate 1
  9098                              <1>  %endrep
  9099                              <1>  %if %$have_local==0
  9100                              <1>  enter 0,0
  9101                              <1>  %assign __have_frame__ 1
  9102                              <1>  %endif
  9103                              <1> %endif
  9104                                  ; call after reg_probe_exist
  9105                                  	save all
  9106                              <1> %ifctx proc
  9107                              <1>  %if %$have_local == 1
  9108                              <1>  %error "`save' must after `local'"
  9109                              <1>  %endif
  9110                              <1> 
  9111                              <1>  %ifidn all,%1
  9112                              <1>  %assign __save_all__ 1
  9113                              <1>  %if %0 > 1
  9114                              <1>  %ifidn frame,%2
  9115                              <1>  %if __have_frame__ == 0
  9116                              <1>  enter 0,0
  9117                              <1>  %assign __have_frame__ 1
  9118                              <1>  %assign local_off 0
  9119                              <1>  %endif
  9120                              <1>  %endif
  9121                              <1>  %endif
  9122 0000090D 60                  <1>  pusha
  9123                              <1>  %if __have_frame__ == 1
  9124                              <1>  %undef __AX
  9125                              <1>  %undef __BX
  9126                              <1>  %undef __CX
  9127                              <1>  %undef __DX
  9128                              <1>  %undef __SI
  9129                              <1>  %undef __DI
  9130                              <1>  %idefine __AX bp-local_off - 2
  9131                              <1>  %idefine __CX bp-local_off - 4
  9132                              <1>  %idefine __DX bp-local_off - 6
  9133                              <1>  %idefine __BX bp-local_off - 8
  9134                              <1> 
  9135                              <1> 
  9136                              <1>  %idefine __SI bp-local_off - 14
  9137                              <1>  %idefine __DI bp-local_off - 16
  9138                              <1>  %endif
  9139                              <1>  %elifidn alld,%1
  9140                              <1>  %assign __save_all__ 2
  9141                              <1>  %if %0 > 1
  9142                              <1>  %ifidn frame,%2
  9143                              <1>  %if __have_frame__ == 0
  9144                              <1>  enter 0,0
  9145                              <1>  %assign __have_frame__ 1
  9146                              <1>  %assign local_off 0
  9147                              <1>  %endif
  9148                              <1>  %endif
  9149                              <1>  %endif
  9150                              <1>  pushad
  9151                              <1>  %if __have_frame__ == 1
  9152                              <1>  %undef __EAX
  9153                              <1>  %undef __EBX
  9154                              <1>  %undef __ECX
  9155                              <1>  %undef __EDX
  9156                              <1>  %undef __ESI
  9157                              <1>  %undef __EDI
  9158                              <1>  %idefine __EAX bp-local_off - 4
  9159                              <1>  %idefine __ECX bp-local_off - 8
  9160                              <1>  %idefine __EDX bp-local_off - 12
  9161                              <1>  %idefine __EBX bp-local_off - 16
  9162                              <1> 
  9163                              <1> 
  9164                              <1>  %idefine __ESI bp-local_off - 18
  9165                              <1>  %idefine __EDI bp-local_off - 32
  9166                              <1>  %endif
  9167                              <1> 
  9168                              <1>  %else
  9169                              <1>  %assign __save_args__ %0
  9170                              <1>  %assign __save_all__ 0
  9171                              <1>  %assign i %0
  9172                              <1>  %rep %0
  9173                              <1>  push %1
  9174                              <1>  cat_define %$save_argv ,i,%1
  9175                              <1>  %rotate 1
  9176                              <1>  %assign i i - 1
  9177                              <1>  %endrep
  9178                              <1>  %endif
  9179                              <1> %else
  9180                              <1>  %error "`save' must after `proc'"
  9181                              <1> %endif
  9182                                  
  9183                                  ;	mov_ax 0
  9184                                  ;	call __reg_select_dev
  9185                                  
  9186 0000090E B008                    	mov al,cmd_DC
  9187 00000910 0C04                    	or al,CB_DC_SRST
  9188                                  	outbyte CB_DC
  9189                              <1> %if %0>1
  9190                              <1>  mov al,%2
  9191                              <1> %endif
  9192                              <1> %if %0>0
  9193 00000912 8B16[9900]          <1>  mov dx,[reg_addr+%1*2]
  9194                              <1> %endif
  9195 00000916 EE                  <1>  out dx,al
  9196 00000917 E8FDFC                  	call delay400ns
  9197                                  	outbyte CB_DC, cmd_DC
  9198                              <1> %if %0>1
  9199 0000091A B008                <1>  mov al,%2
  9200                              <1> %endif
  9201                              <1> %if %0>0
  9202 0000091C 8B16[9900]          <1>  mov dx,[reg_addr+%1*2]
  9203                              <1> %endif
  9204 00000920 EE                  <1>  out dx,al
  9205 00000921 E8F3FC                  	call delay400ns
  9206                                  
  9207 00000924 E8D8FC                  	call set_timeout
  9208                                  	if {cmp byte [reg_dev_info],REG_CONFIG_TYPE_NONE},ne
  9209                              <1>  %rep %0 -1
  9210                              <1>  %1
  9211                              <1>  %rotate 1
  9212                              <1>  %endrep
  9213 00000927 803E[0500]00        <2>  %1
  9214                              <2>  %rotate 1
  9215                              <1> 
  9216                              <1>  con_push if
  9217                              <2>  %assign __lastlevel__ __level__
  9218                              <2>  %assign __level__ __level__ + 1
  9219                              <2>  %if __return__ > 0
  9220                              <2>  %assign con_return 1
  9221                              <2>  %else
  9222                              <2>  %assign con_return 0
  9223                              <2>  %endif
  9224                              <2> 
  9225                              <2>  %if __cont__ > 0
  9226                              <2>  %assign con_cont 1
  9227                              <2>  %else
  9228                              <2>  %assign con_cont 0
  9229                              <2>  %endif
  9230                              <2>  %if __break__ > 0
  9231                              <2>  %assign con_break 1
  9232                              <2>  %else
  9233                              <2>  %assign con_break 0
  9234                              <2>  %endif
  9235                              <2> 
  9236                              <2>  %ifidn %1,proc
  9237                              <2>  %assign con_return 0
  9238                              <2>  %elifidn %1,forcx
  9239                              <2>  %assign con_break 0
  9240                              <2>  %elifidn %1,repeat
  9241                              <2>  %assign con_cont 0
  9242                              <2>  %assign con_break 0
  9243                              <2>  %elifidn %1,while
  9244                              <2>  %assign con_cont 0
  9245                              <2>  %assign con_break 0
  9246                              <2>  %endif
  9247                              <2> 
  9248                              <2>  %if __cndblock__ == 1
  9249                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  9250                              <2>  %endif
  9251                              <2> 
  9252                              <2>  %push %1
  9253                              <2>  %if con_return
  9254                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  9255                              <3> %define %1%2 %3%4
  9256                              <2>  %endif
  9257                              <2>  %if con_break
  9258                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  9259                              <3> %define %1%2 %3%4
  9260                              <2>  %endif
  9261                              <2>  %if con_cont
  9262                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  9263                              <3> %define %1%2 %3%4
  9264                              <2>  %endif
  9265                              <2> 
  9266                              <2>  %ifidn %1,andblock
  9267                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9268                              <2>  %elifidn %1,orblock
  9269                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9270                              <2>  %endif
  9271                              <1> 
  9272                              <1>  %if %0 > 0
  9273 0000092C 7406                <1>  j%-1 %$ifnot
  9274                              <1>  %endif
  9275                              <1>  %assign %$elif_level 0
  9276 0000092E E8E5FC                  		call sub_atapi_delay
  9277 00000931 E8ECFC                  		call reg_poll_busy
  9278                                  	endif
  9279                              <1>  %assign elselevel 0
  9280                              <1>  %ifctx if
  9281                              <1>  %$ifnot:
  9282                              <1>  con_pop
  9283                              <2>  %pop
  9284                              <2>  %assign __level__ __level__ - 1
  9285                              <1>  %elifctx else
  9286                              <1>  %assign elselevel %$elif_level
  9287                              <1>  %$ifend:
  9288                              <1>  con_pop
  9289                              <1>  %elifctx elif
  9290                              <1>  %assign elselevel %$elif_level
  9291                              <1>  %$ifnot:
  9292                              <1>  con_pop
  9293                              <1>  %else
  9294                              <1>  %error "expected `if' or `else' before `endif'"
  9295                              <1>  %endif
  9296                              <1>  %rep elselevel
  9297                              <1>  %$ifend:
  9298                              <1>  con_pop
  9299                              <1>  %endrep
  9300                                  	if {cmp byte [reg_dev_info+1],REG_CONFIG_TYPE_NONE},ne
  9301                              <1>  %rep %0 -1
  9302                              <1>  %1
  9303                              <1>  %rotate 1
  9304                              <1>  %endrep
  9305 00000934 803E[0600]00        <2>  %1
  9306                              <2>  %rotate 1
  9307                              <1> 
  9308                              <1>  con_push if
  9309                              <2>  %assign __lastlevel__ __level__
  9310                              <2>  %assign __level__ __level__ + 1
  9311                              <2>  %if __return__ > 0
  9312                              <2>  %assign con_return 1
  9313                              <2>  %else
  9314                              <2>  %assign con_return 0
  9315                              <2>  %endif
  9316                              <2> 
  9317                              <2>  %if __cont__ > 0
  9318                              <2>  %assign con_cont 1
  9319                              <2>  %else
  9320                              <2>  %assign con_cont 0
  9321                              <2>  %endif
  9322                              <2>  %if __break__ > 0
  9323                              <2>  %assign con_break 1
  9324                              <2>  %else
  9325                              <2>  %assign con_break 0
  9326                              <2>  %endif
  9327                              <2> 
  9328                              <2>  %ifidn %1,proc
  9329                              <2>  %assign con_return 0
  9330                              <2>  %elifidn %1,forcx
  9331                              <2>  %assign con_break 0
  9332                              <2>  %elifidn %1,repeat
  9333                              <2>  %assign con_cont 0
  9334                              <2>  %assign con_break 0
  9335                              <2>  %elifidn %1,while
  9336                              <2>  %assign con_cont 0
  9337                              <2>  %assign con_break 0
  9338                              <2>  %endif
  9339                              <2> 
  9340                              <2>  %if __cndblock__ == 1
  9341                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  9342                              <2>  %endif
  9343                              <2> 
  9344                              <2>  %push %1
  9345                              <2>  %if con_return
  9346                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  9347                              <3> %define %1%2 %3%4
  9348                              <2>  %endif
  9349                              <2>  %if con_break
  9350                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  9351                              <3> %define %1%2 %3%4
  9352                              <2>  %endif
  9353                              <2>  %if con_cont
  9354                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  9355                              <3> %define %1%2 %3%4
  9356                              <2>  %endif
  9357                              <2> 
  9358                              <2>  %ifidn %1,andblock
  9359                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9360                              <2>  %elifidn %1,orblock
  9361                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9362                              <2>  %endif
  9363                              <1> 
  9364                              <1>  %if %0 > 0
  9365 00000939 7424                <1>  j%-1 %$ifnot
  9366                              <1>  %endif
  9367                              <1>  %assign %$elif_level 0
  9368 0000093B E8D8FC                  		call sub_atapi_delay
  9369                                  		while
  9370                              <1> con_push while
  9371                              <2>  %assign __lastlevel__ __level__
  9372                              <2>  %assign __level__ __level__ + 1
  9373                              <2>  %if __return__ > 0
  9374                              <2>  %assign con_return 1
  9375                              <2>  %else
  9376                              <2>  %assign con_return 0
  9377                              <2>  %endif
  9378                              <2> 
  9379                              <2>  %if __cont__ > 0
  9380                              <2>  %assign con_cont 1
  9381                              <2>  %else
  9382                              <2>  %assign con_cont 0
  9383                              <2>  %endif
  9384                              <2>  %if __break__ > 0
  9385                              <2>  %assign con_break 1
  9386                              <2>  %else
  9387                              <2>  %assign con_break 0
  9388                              <2>  %endif
  9389                              <2> 
  9390                              <2>  %ifidn %1,proc
  9391                              <2>  %assign con_return 0
  9392                              <2>  %elifidn %1,forcx
  9393                              <2>  %assign con_break 0
  9394                              <2>  %elifidn %1,repeat
  9395                              <2>  %assign con_cont 0
  9396                              <2>  %assign con_break 0
  9397                              <2>  %elifidn %1,while
  9398                              <2>  %assign con_cont 0
  9399                              <2>  %assign con_break 0
  9400                              <2>  %endif
  9401                              <2> 
  9402                              <2>  %if __cndblock__ == 1
  9403                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  9404                              <2>  %endif
  9405                              <2> 
  9406                              <2>  %push %1
  9407                              <2>  %if con_return
  9408                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  9409                              <3> %define %1%2 %3%4
  9410                              <2>  %endif
  9411                              <2>  %if con_break
  9412                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  9413                              <2>  %endif
  9414                              <2>  %if con_cont
  9415                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  9416                              <2>  %endif
  9417                              <2> 
  9418                              <2>  %ifidn %1,andblock
  9419                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9420                              <2>  %elifidn %1,orblock
  9421                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9422                              <2>  %endif
  9423                              <1> %assign __break__ __break__ + 1
  9424                              <1> %assign __cont__ __cont__ + 1
  9425                              <1> %$begin:
  9426                              <1> cat_lable %$cont,__level__
  9427                              <2> %1%2:
  9428                              <1> %if %0 > 0
  9429                              <1>  %rep %0 -1
  9430                              <1>  %1
  9431                              <1>  %rotate 1
  9432                              <1>  %endrep
  9433                              <1>  j%-1 %$end
  9434                              <1> %endif
  9435 0000093E B80100                  			mov ax,1
  9436 00000941 E8EDFC                  			call __reg_select_dev
  9437 00000944 E8D0FC                  			call delay400ns
  9438                                  			inbyte CB_SC,ah
  9439 00000947 8B16[8D00]          <1>  mov dx,[reg_addr+%1*2]
  9440 0000094B EC                  <1>  in al,dx
  9441                              <1>  %if %0 > 1
  9442 0000094C 88C4                <1>  mov %2,al
  9443                              <1>  %endif
  9444                                  			inbyte CB_SN
  9445 0000094E 8B16[8F00]          <1>  mov dx,[reg_addr+%1*2]
  9446 00000952 EC                  <1>  in al,dx
  9447                              <1>  %if %0 > 1
  9448                              <1>  mov %2,al
  9449                              <1>  %endif
  9450                                  			break if,{cmp ax,0x0101},e
  9451                              <1> %if %0 > 0
  9452                              <1>  %ifidn %1,if
  9453                              <1>  %rotate 1
  9454                              <1>  %rep %0 - 2
  9455                              <1>  %1
  9456                              <1>  %rotate 1
  9457                              <1>  %endrep
  9458 00000953 3D0101              <2>  %1
  9459                              <2>  %rotate 1
  9460                              <1>  cat_jc %1,%$break,__level__
  9461 00000956 7407                <2>  j%+1 %2%3
  9462                              <1>  %else
  9463                              <1>  %error "expect `if' after `break'"
  9464                              <1>  %endif
  9465                              <1> %else
  9466                              <1>  cat_jmp %$break,__level__
  9467                              <1> %endif
  9468 00000958 E8B2FC                  			call check_timeout
  9469                                  			break if,is_timeout
  9470                              <1> %if %0 > 0
  9471                              <1>  %ifidn %1,if
  9472                              <1>  %rotate 1
  9473                              <1>  %rep %0 - 2
  9474                              <1>  %1
  9475                              <1>  %rotate 1
  9476                              <1>  %endrep
  9477                              <1>  cat_jc %1,%$break,__level__
  9478 0000095B 7702                <2>  j%+1 %2%3
  9479                              <1>  %else
  9480                              <1>  %error "expect `if' after `break'"
  9481                              <1>  %endif
  9482                              <1> %else
  9483                              <1>  cat_jmp %$break,__level__
  9484                              <1> %endif
  9485                                  		endwhile 
  9486                              <1>  %ifctx while
  9487 0000095D EBDF                <1>  jmp %$begin
  9488                              <1>  %$end:
  9489                              <1>  cat_lable %$break,__level__
  9490                              <2> %1%2:
  9491                              <1>  %else
  9492                              <1>  %error "expected `while' before `endwhile'"
  9493                              <1>  %endif
  9494                              <1> con_pop
  9495                              <2>  %pop
  9496                              <2>  %assign __level__ __level__ - 1
  9497                              <1> %assign __break__ __break__ + 1
  9498                              <1> %assign __cont__ __cont__ + 1
  9499                                  	endif
  9500                              <1>  %assign elselevel 0
  9501                              <1>  %ifctx if
  9502                              <1>  %$ifnot:
  9503                              <1>  con_pop
  9504                              <2>  %pop
  9505                              <2>  %assign __level__ __level__ - 1
  9506                              <1>  %elifctx else
  9507                              <1>  %assign elselevel %$elif_level
  9508                              <1>  %$ifend:
  9509                              <1>  con_pop
  9510                              <1>  %elifctx elif
  9511                              <1>  %assign elselevel %$elif_level
  9512                              <1>  %$ifnot:
  9513                              <1>  con_pop
  9514                              <1>  %else
  9515                              <1>  %error "expected `if' or `else' before `endif'"
  9516                              <1>  %endif
  9517                              <1>  %rep elselevel
  9518                              <1>  %$ifend:
  9519                              <1>  con_pop
  9520                              <1>  %endrep
  9521                                  endp
  9522                              <1> %ifnctx proc
  9523                              <1>  %error "expected `proc' before `endp'"
  9524                              <1> %endif
  9525                              <1>  cat_lable %$return,__level__
  9526                              <2> %1%2:
  9527                              <1>  %if __save_all__ ==1
  9528 0000095F 61                  <1>  popa
  9529                              <1>  %elif __save_all__ == 2
  9530                              <1>  popad
  9531                              <1>  %elif __save_args__ > 0
  9532                              <1>  %assign i 1
  9533                              <1>  %rep __save_args__
  9534                              <1>  linecat pop, %$save_argv,i
  9535                              <1>  %assign i i+1
  9536                              <1>  %endrep
  9537                              <1>  %endif
  9538                              <1>  %if __have_frame__ > 0
  9539                              <1>  leave
  9540                              <1>  %endif
  9541                              <1> 
  9542                              <1>  %assign i 0
  9543                              <1>  %rep %$proc_args
  9544                              <1> 
  9545                              <1>  %assign i i+1
  9546                              <1>  %endrep
  9547                              <1> 
  9548                              <1>  %assign i 0
  9549                              <1>  %rep %$local_args
  9550                              <1> 
  9551                              <1>  %assign i i+1
  9552                              <1>  %endrep
  9553 00000960 C3                  <1>  ret
  9554                              <1>  con_pop
  9555                              <2>  %pop
  9556                              <2>  %assign __level__ __level__ - 1
  9557                              <1>  %assign __return__ __return__ - 1
  9558                                  
  9559                                  proc	reg_probe
  9560                              <1> GLOBAL %1
  9561                              <1> %1:
  9562                              <1> con_push proc
  9563                              <2>  %assign __lastlevel__ __level__
  9564                              <2>  %assign __level__ __level__ + 1
  9565                              <2>  %if __return__ > 0
  9566                              <2>  %assign con_return 1
  9567                              <2>  %else
  9568                              <2>  %assign con_return 0
  9569                              <2>  %endif
  9570                              <2> 
  9571                              <2>  %if __cont__ > 0
  9572                              <2>  %assign con_cont 1
  9573                              <2>  %else
  9574                              <2>  %assign con_cont 0
  9575                              <2>  %endif
  9576                              <2>  %if __break__ > 0
  9577                              <2>  %assign con_break 1
  9578                              <2>  %else
  9579                              <2>  %assign con_break 0
  9580                              <2>  %endif
  9581                              <2> 
  9582                              <2>  %ifidn %1,proc
  9583                              <2>  %assign con_return 0
  9584                              <2>  %elifidn %1,forcx
  9585                              <2>  %assign con_break 0
  9586                              <2>  %elifidn %1,repeat
  9587                              <2>  %assign con_cont 0
  9588                              <2>  %assign con_break 0
  9589                              <2>  %elifidn %1,while
  9590                              <2>  %assign con_cont 0
  9591                              <2>  %assign con_break 0
  9592                              <2>  %endif
  9593                              <2> 
  9594                              <2>  %if __cndblock__ == 1
  9595                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  9596                              <2>  %endif
  9597                              <2> 
  9598                              <2>  %push %1
  9599                              <2>  %if con_return
  9600                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  9601                              <2>  %endif
  9602                              <2>  %if con_break
  9603                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  9604                              <3> %define %1%2 %3%4
  9605                              <2>  %endif
  9606                              <2>  %if con_cont
  9607                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  9608                              <3> %define %1%2 %3%4
  9609                              <2>  %endif
  9610                              <2> 
  9611                              <2>  %ifidn %1,andblock
  9612                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9613                              <2>  %elifidn %1,orblock
  9614                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9615                              <2>  %endif
  9616                              <1> %assign __return__ __return__ + 1
  9617                              <1> %assign __have_frame__ 0
  9618                              <1> %assign %$have_local 0
  9619                              <1> %assign %$have_save 0
  9620                              <1> %assign __save_all__ 0
  9621                              <1> %assign %$local_args 0
  9622                              <1> %assign %$proc_args 0
  9623                              <1> %assign __save_args__ 0
  9624                              <1> %if %0 > 1
  9625                              <1>  %assign args %0 - 1
  9626                              <1>  %assign %$bp_off 4
  9627                              <1>  %assign i 0
  9628                              <1>  %rotate 1
  9629                              <1>  %ifidn %1,withlocal
  9630                              <1>  %assign %$have_local 1
  9631                              <1>  %assign args args -1
  9632                              <1>  %rotate 1
  9633                              <1>  %endif
  9634                              <1>  %assign %$proc_args args
  9635                              <1>  %rep args
  9636                              <1> 
  9637                              <1>  %%inputarg__%1 EQU %$bp_off
  9638                              <1>  %undef .%1
  9639                              <1>  %define .%1 %%inputarg__%1+bp
  9640                              <1>  cat_define %$proc_argv ,i,%1
  9641                              <1>  %assign %$bp_off %$bp_off + 2
  9642                              <1>  %assign i i+1
  9643                              <1>  %rotate 1
  9644                              <1>  %endrep
  9645                              <1>  %if %$have_local==0
  9646                              <1>  enter 0,0
  9647                              <1>  %assign __have_frame__ 1
  9648                              <1>  %endif
  9649                              <1> %endif
  9650                                  ; return cx = number of atapi devices
  9651                                  	save ax, bx, si, di 
  9652                              <1> %ifctx proc
  9653                              <1>  %if %$have_local == 1
  9654                              <1>  %error "`save' must after `local'"
  9655                              <1>  %endif
  9656                              <1> 
  9657                              <1>  %ifidn all,%1
  9658                              <1>  %assign __save_all__ 1
  9659                              <1>  %if %0 > 1
  9660                              <1>  %ifidn frame,%2
  9661                              <1>  %if __have_frame__ == 0
  9662                              <1>  enter 0,0
  9663                              <1>  %assign __have_frame__ 1
  9664                              <1>  %assign local_off 0
  9665                              <1>  %endif
  9666                              <1>  %endif
  9667                              <1>  %endif
  9668                              <1>  pusha
  9669                              <1>  %if __have_frame__ == 1
  9670                              <1>  %undef __AX
  9671                              <1>  %undef __BX
  9672                              <1>  %undef __CX
  9673                              <1>  %undef __DX
  9674                              <1>  %undef __SI
  9675                              <1>  %undef __DI
  9676                              <1>  %idefine __AX bp-local_off - 2
  9677                              <1>  %idefine __CX bp-local_off - 4
  9678                              <1>  %idefine __DX bp-local_off - 6
  9679                              <1>  %idefine __BX bp-local_off - 8
  9680                              <1> 
  9681                              <1> 
  9682                              <1>  %idefine __SI bp-local_off - 14
  9683                              <1>  %idefine __DI bp-local_off - 16
  9684                              <1>  %endif
  9685                              <1>  %elifidn alld,%1
  9686                              <1>  %assign __save_all__ 2
  9687                              <1>  %if %0 > 1
  9688                              <1>  %ifidn frame,%2
  9689                              <1>  %if __have_frame__ == 0
  9690                              <1>  enter 0,0
  9691                              <1>  %assign __have_frame__ 1
  9692                              <1>  %assign local_off 0
  9693                              <1>  %endif
  9694                              <1>  %endif
  9695                              <1>  %endif
  9696                              <1>  pushad
  9697                              <1>  %if __have_frame__ == 1
  9698                              <1>  %undef __EAX
  9699                              <1>  %undef __EBX
  9700                              <1>  %undef __ECX
  9701                              <1>  %undef __EDX
  9702                              <1>  %undef __ESI
  9703                              <1>  %undef __EDI
  9704                              <1>  %idefine __EAX bp-local_off - 4
  9705                              <1>  %idefine __ECX bp-local_off - 8
  9706                              <1>  %idefine __EDX bp-local_off - 12
  9707                              <1>  %idefine __EBX bp-local_off - 16
  9708                              <1> 
  9709                              <1> 
  9710                              <1>  %idefine __ESI bp-local_off - 18
  9711                              <1>  %idefine __EDI bp-local_off - 32
  9712                              <1>  %endif
  9713                              <1> 
  9714                              <1>  %else
  9715                              <1>  %assign __save_args__ %0
  9716                              <1>  %assign __save_all__ 0
  9717                              <1>  %assign i %0
  9718                              <1>  %rep %0
  9719                              <1>  push %1
  9720                              <1>  cat_define %$save_argv ,i,%1
  9721                              <1>  %rotate 1
  9722                              <1>  %assign i i - 1
  9723                              <1>  %endrep
  9724 00000961 50                  <2>  push %1
  9725                              <2>  cat_define %$save_argv ,i,%1
  9726                              <3> %define %1%2 %3
  9727                              <2>  %rotate 1
  9728                              <2>  %assign i i - 1
  9729 00000962 53                  <2>  push %1
  9730                              <2>  cat_define %$save_argv ,i,%1
  9731                              <3> %define %1%2 %3
  9732                              <2>  %rotate 1
  9733                              <2>  %assign i i - 1
  9734 00000963 56                  <2>  push %1
  9735                              <2>  cat_define %$save_argv ,i,%1
  9736                              <3> %define %1%2 %3
  9737                              <2>  %rotate 1
  9738                              <2>  %assign i i - 1
  9739 00000964 57                  <2>  push %1
  9740                              <2>  cat_define %$save_argv ,i,%1
  9741                              <3> %define %1%2 %3
  9742                              <2>  %rotate 1
  9743                              <2>  %assign i i - 1
  9744                              <1>  %endif
  9745                              <1> %else
  9746                              <1>  %error "`save' must after `proc'"
  9747                              <1> %endif
  9748 00000965 FC                      	cld
  9749 00000966 C706[0700]0000          	mov word [atapi_dev_count], 0
  9750 0000096C BB[0400]                	mov bx,reg_base_addr
  9751 0000096F BF[0900]                	mov di,atapi_dev_base
  9752                                  	while {cmp word [bx], byte 0},nz
  9753                              <1> con_push while
  9754                              <2>  %assign __lastlevel__ __level__
  9755                              <2>  %assign __level__ __level__ + 1
  9756                              <2>  %if __return__ > 0
  9757                              <2>  %assign con_return 1
  9758                              <2>  %else
  9759                              <2>  %assign con_return 0
  9760                              <2>  %endif
  9761                              <2> 
  9762                              <2>  %if __cont__ > 0
  9763                              <2>  %assign con_cont 1
  9764                              <2>  %else
  9765                              <2>  %assign con_cont 0
  9766                              <2>  %endif
  9767                              <2>  %if __break__ > 0
  9768                              <2>  %assign con_break 1
  9769                              <2>  %else
  9770                              <2>  %assign con_break 0
  9771                              <2>  %endif
  9772                              <2> 
  9773                              <2>  %ifidn %1,proc
  9774                              <2>  %assign con_return 0
  9775                              <2>  %elifidn %1,forcx
  9776                              <2>  %assign con_break 0
  9777                              <2>  %elifidn %1,repeat
  9778                              <2>  %assign con_cont 0
  9779                              <2>  %assign con_break 0
  9780                              <2>  %elifidn %1,while
  9781                              <2>  %assign con_cont 0
  9782                              <2>  %assign con_break 0
  9783                              <2>  %endif
  9784                              <2> 
  9785                              <2>  %if __cndblock__ == 1
  9786                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  9787                              <2>  %endif
  9788                              <2> 
  9789                              <2>  %push %1
  9790                              <2>  %if con_return
  9791                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  9792                              <3> %define %1%2 %3%4
  9793                              <2>  %endif
  9794                              <2>  %if con_break
  9795                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  9796                              <2>  %endif
  9797                              <2>  %if con_cont
  9798                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  9799                              <2>  %endif
  9800                              <2> 
  9801                              <2>  %ifidn %1,andblock
  9802                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9803                              <2>  %elifidn %1,orblock
  9804                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9805                              <2>  %endif
  9806                              <1> %assign __break__ __break__ + 1
  9807                              <1> %assign __cont__ __cont__ + 1
  9808                              <1> %$begin:
  9809                              <1> cat_lable %$cont,__level__
  9810                              <2> %1%2:
  9811                              <1> %if %0 > 0
  9812                              <1>  %rep %0 -1
  9813                              <1>  %1
  9814                              <1>  %rotate 1
  9815                              <1>  %endrep
  9816 00000972 833F00              <2>  %1
  9817                              <2>  %rotate 1
  9818 00000975 7434                <1>  j%-1 %$end
  9819                              <1> %endif
  9820 00000977 E8E6FE                  		call reg_setup_base_addr
  9821 0000097A E835FF                  		call reg_probe_exist
  9822 0000097D E88DFF                  		call reg_reset
  9823 00000980 31F6                    		xor si,si
  9824                                  		while {cmp si, byte 2}, b
  9825                              <1> con_push while
  9826                              <2>  %assign __lastlevel__ __level__
  9827                              <2>  %assign __level__ __level__ + 1
  9828                              <2>  %if __return__ > 0
  9829                              <2>  %assign con_return 1
  9830                              <2>  %else
  9831                              <2>  %assign con_return 0
  9832                              <2>  %endif
  9833                              <2> 
  9834                              <2>  %if __cont__ > 0
  9835                              <2>  %assign con_cont 1
  9836                              <2>  %else
  9837                              <2>  %assign con_cont 0
  9838                              <2>  %endif
  9839                              <2>  %if __break__ > 0
  9840                              <2>  %assign con_break 1
  9841                              <2>  %else
  9842                              <2>  %assign con_break 0
  9843                              <2>  %endif
  9844                              <2> 
  9845                              <2>  %ifidn %1,proc
  9846                              <2>  %assign con_return 0
  9847                              <2>  %elifidn %1,forcx
  9848                              <2>  %assign con_break 0
  9849                              <2>  %elifidn %1,repeat
  9850                              <2>  %assign con_cont 0
  9851                              <2>  %assign con_break 0
  9852                              <2>  %elifidn %1,while
  9853                              <2>  %assign con_cont 0
  9854                              <2>  %assign con_break 0
  9855                              <2>  %endif
  9856                              <2> 
  9857                              <2>  %if __cndblock__ == 1
  9858                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  9859                              <2>  %endif
  9860                              <2> 
  9861                              <2>  %push %1
  9862                              <2>  %if con_return
  9863                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  9864                              <3> %define %1%2 %3%4
  9865                              <2>  %endif
  9866                              <2>  %if con_break
  9867                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  9868                              <2>  %endif
  9869                              <2>  %if con_cont
  9870                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  9871                              <2>  %endif
  9872                              <2> 
  9873                              <2>  %ifidn %1,andblock
  9874                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9875                              <2>  %elifidn %1,orblock
  9876                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9877                              <2>  %endif
  9878                              <1> %assign __break__ __break__ + 1
  9879                              <1> %assign __cont__ __cont__ + 1
  9880                              <1> %$begin:
  9881                              <1> cat_lable %$cont,__level__
  9882                              <2> %1%2:
  9883                              <1> %if %0 > 0
  9884                              <1>  %rep %0 -1
  9885                              <1>  %1
  9886                              <1>  %rotate 1
  9887                              <1>  %endrep
  9888 00000982 83FE02              <2>  %1
  9889                              <2>  %rotate 1
  9890 00000985 7320                <1>  j%-1 %$end
  9891                              <1> %endif
  9892                                  			if {cmp byte[reg_dev_info+si],0},ne
  9893                              <1>  %rep %0 -1
  9894                              <1>  %1
  9895                              <1>  %rotate 1
  9896                              <1>  %endrep
  9897 00000987 80BC[0500]00        <2>  %1
  9898                              <2>  %rotate 1
  9899                              <1> 
  9900                              <1>  con_push if
  9901                              <2>  %assign __lastlevel__ __level__
  9902                              <2>  %assign __level__ __level__ + 1
  9903                              <2>  %if __return__ > 0
  9904                              <2>  %assign con_return 1
  9905                              <2>  %else
  9906                              <2>  %assign con_return 0
  9907                              <2>  %endif
  9908                              <2> 
  9909                              <2>  %if __cont__ > 0
  9910                              <2>  %assign con_cont 1
  9911                              <2>  %else
  9912                              <2>  %assign con_cont 0
  9913                              <2>  %endif
  9914                              <2>  %if __break__ > 0
  9915                              <2>  %assign con_break 1
  9916                              <2>  %else
  9917                              <2>  %assign con_break 0
  9918                              <2>  %endif
  9919                              <2> 
  9920                              <2>  %ifidn %1,proc
  9921                              <2>  %assign con_return 0
  9922                              <2>  %elifidn %1,forcx
  9923                              <2>  %assign con_break 0
  9924                              <2>  %elifidn %1,repeat
  9925                              <2>  %assign con_cont 0
  9926                              <2>  %assign con_break 0
  9927                              <2>  %elifidn %1,while
  9928                              <2>  %assign con_cont 0
  9929                              <2>  %assign con_break 0
  9930                              <2>  %endif
  9931                              <2> 
  9932                              <2>  %if __cndblock__ == 1
  9933                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
  9934                              <2>  %endif
  9935                              <2> 
  9936                              <2>  %push %1
  9937                              <2>  %if con_return
  9938                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
  9939                              <3> %define %1%2 %3%4
  9940                              <2>  %endif
  9941                              <2>  %if con_break
  9942                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
  9943                              <3> %define %1%2 %3%4
  9944                              <2>  %endif
  9945                              <2>  %if con_cont
  9946                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
  9947                              <3> %define %1%2 %3%4
  9948                              <2>  %endif
  9949                              <2> 
  9950                              <2>  %ifidn %1,andblock
  9951                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9952                              <2>  %elifidn %1,orblock
  9953                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
  9954                              <2>  %endif
  9955                              <1> 
  9956                              <1>  %if %0 > 0
  9957 0000098C 7416                <1>  j%-1 %$ifnot
  9958                              <1>  %endif
  9959                              <1>  %assign %$elif_level 0
  9960 0000098E 89F0                    				mov ax,si
  9961 00000990 E838FF                  				call reg_check_dev_type
  9962 00000993 A2[0500]                				mov [reg_dev_info],al
  9963                                  				if {cmp al,REG_CONFIG_TYPE_ATAPI},e
  9964                              <1>  %rep %0 -1
  9965                              <1>  %1
  9966                              <1>  %rotate 1
  9967                              <1>  %endrep
  9968 00000996 3C03                <2>  %1
  9969                              <2>  %rotate 1
  9970                              <1> 
  9971                              <1>  con_push if
  9972                              <2>  %assign __lastlevel__ __level__
  9973                              <2>  %assign __level__ __level__ + 1
  9974                              <2>  %if __return__ > 0
  9975                              <2>  %assign con_return 1
  9976                              <2>  %else
  9977                              <2>  %assign con_return 0
  9978                              <2>  %endif
  9979                              <2> 
  9980                              <2>  %if __cont__ > 0
  9981                              <2>  %assign con_cont 1
  9982                              <2>  %else
  9983                              <2>  %assign con_cont 0
  9984                              <2>  %endif
  9985                              <2>  %if __break__ > 0
  9986                              <2>  %assign con_break 1
  9987                              <2>  %else
  9988                              <2>  %assign con_break 0
  9989                              <2>  %endif
  9990                              <2> 
  9991                              <2>  %ifidn %1,proc
  9992                              <2>  %assign con_return 0
  9993                              <2>  %elifidn %1,forcx
  9994                              <2>  %assign con_break 0
  9995                              <2>  %elifidn %1,repeat
  9996                              <2>  %assign con_cont 0
  9997                              <2>  %assign con_break 0
  9998                              <2>  %elifidn %1,while
  9999                              <2>  %assign con_cont 0
 10000                              <2>  %assign con_break 0
 10001                              <2>  %endif
 10002                              <2> 
 10003                              <2>  %if __cndblock__ == 1
 10004                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 10005                              <2>  %endif
 10006                              <2> 
 10007                              <2>  %push %1
 10008                              <2>  %if con_return
 10009                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 10010                              <3> %define %1%2 %3%4
 10011                              <2>  %endif
 10012                              <2>  %if con_break
 10013                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 10014                              <3> %define %1%2 %3%4
 10015                              <2>  %endif
 10016                              <2>  %if con_cont
 10017                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 10018                              <3> %define %1%2 %3%4
 10019                              <2>  %endif
 10020                              <2> 
 10021                              <2>  %ifidn %1,andblock
 10022                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 10023                              <2>  %elifidn %1,orblock
 10024                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 10025                              <2>  %endif
 10026                              <1> 
 10027                              <1>  %if %0 > 0
 10028 00000998 750A                <1>  j%-1 %$ifnot
 10029                              <1>  %endif
 10030                              <1>  %assign %$elif_level 0
 10031                                  					; Add it to the list
 10032 0000099A FF06[0700]              					inc word [atapi_dev_count]
 10033 0000099E 89D8                    					mov ax,bx
 10034 000009A0 AB                      					stosw
 10035 000009A1 89F0                    					mov ax,si
 10036 000009A3 AB                      					stosw
 10037                                  				endif
 10038                              <1>  %assign elselevel 0
 10039                              <1>  %ifctx if
 10040                              <1>  %$ifnot:
 10041                              <1>  con_pop
 10042                              <2>  %pop
 10043                              <2>  %assign __level__ __level__ - 1
 10044                              <1>  %elifctx else
 10045                              <1>  %assign elselevel %$elif_level
 10046                              <1>  %$ifend:
 10047                              <1>  con_pop
 10048                              <1>  %elifctx elif
 10049                              <1>  %assign elselevel %$elif_level
 10050                              <1>  %$ifnot:
 10051                              <1>  con_pop
 10052                              <1>  %else
 10053                              <1>  %error "expected `if' or `else' before `endif'"
 10054                              <1>  %endif
 10055                              <1>  %rep elselevel
 10056                              <1>  %$ifend:
 10057                              <1>  con_pop
 10058                              <1>  %endrep
 10059                                  			endif
 10060                              <1>  %assign elselevel 0
 10061                              <1>  %ifctx if
 10062                              <1>  %$ifnot:
 10063                              <1>  con_pop
 10064                              <2>  %pop
 10065                              <2>  %assign __level__ __level__ - 1
 10066                              <1>  %elifctx else
 10067                              <1>  %assign elselevel %$elif_level
 10068                              <1>  %$ifend:
 10069                              <1>  con_pop
 10070                              <1>  %elifctx elif
 10071                              <1>  %assign elselevel %$elif_level
 10072                              <1>  %$ifnot:
 10073                              <1>  con_pop
 10074                              <1>  %else
 10075                              <1>  %error "expected `if' or `else' before `endif'"
 10076                              <1>  %endif
 10077                              <1>  %rep elselevel
 10078                              <1>  %$ifend:
 10079                              <1>  con_pop
 10080                              <1>  %endrep
 10081 000009A4 46                      			inc si
 10082                                  		endwhile
 10083                              <1>  %ifctx while
 10084 000009A5 EBDB                <1>  jmp %$begin
 10085                              <1>  %$end:
 10086                              <1>  cat_lable %$break,__level__
 10087                              <2> %1%2:
 10088                              <1>  %else
 10089                              <1>  %error "expected `while' before `endwhile'"
 10090                              <1>  %endif
 10091                              <1> con_pop
 10092                              <2>  %pop
 10093                              <2>  %assign __level__ __level__ - 1
 10094                              <1> %assign __break__ __break__ + 1
 10095                              <1> %assign __cont__ __cont__ + 1
 10096 000009A7 43                      		inc bx
 10097 000009A8 43                      		inc bx
 10098                                  	endwhile
 10099                              <1>  %ifctx while
 10100 000009A9 EBC7                <1>  jmp %$begin
 10101                              <1>  %$end:
 10102                              <1>  cat_lable %$break,__level__
 10103                              <2> %1%2:
 10104                              <1>  %else
 10105                              <1>  %error "expected `while' before `endwhile'"
 10106                              <1>  %endif
 10107                              <1> con_pop
 10108                              <2>  %pop
 10109                              <2>  %assign __level__ __level__ - 1
 10110                              <1> %assign __break__ __break__ + 1
 10111                              <1> %assign __cont__ __cont__ + 1
 10112 000009AB 8B0E[0700]              	mov cx, [atapi_dev_count]
 10113                                  endp
 10114                              <1> %ifnctx proc
 10115                              <1>  %error "expected `proc' before `endp'"
 10116                              <1> %endif
 10117                              <1>  cat_lable %$return,__level__
 10118                              <2> %1%2:
 10119                              <1>  %if __save_all__ ==1
 10120                              <1>  popa
 10121                              <1>  %elif __save_all__ == 2
 10122                              <1>  popad
 10123                              <1>  %elif __save_args__ > 0
 10124                              <1>  %assign i 1
 10125                              <1>  %rep __save_args__
 10126                              <1>  linecat pop, %$save_argv,i
 10127                              <1>  %assign i i+1
 10128                              <1>  %endrep
 10129                              <2>  linecat pop, %$save_argv,i
 10130 000009AF 5F                  <3>  %1 %2%3
 10131                              <2>  %assign i i+1
 10132                              <2>  linecat pop, %$save_argv,i
 10133 000009B0 5E                  <3>  %1 %2%3
 10134                              <2>  %assign i i+1
 10135                              <2>  linecat pop, %$save_argv,i
 10136 000009B1 5B                  <3>  %1 %2%3
 10137                              <2>  %assign i i+1
 10138                              <2>  linecat pop, %$save_argv,i
 10139 000009B2 58                  <3>  %1 %2%3
 10140                              <2>  %assign i i+1
 10141                              <1>  %endif
 10142                              <1>  %if __have_frame__ > 0
 10143                              <1>  leave
 10144                              <1>  %endif
 10145                              <1> 
 10146                              <1>  %assign i 0
 10147                              <1>  %rep %$proc_args
 10148                              <1> 
 10149                              <1>  %assign i i+1
 10150                              <1>  %endrep
 10151                              <1> 
 10152                              <1>  %assign i 0
 10153                              <1>  %rep %$local_args
 10154                              <1> 
 10155                              <1>  %assign i i+1
 10156                              <1>  %endrep
 10157 000009B3 C3                  <1>  ret
 10158                              <1>  con_pop
 10159                              <2>  %pop
 10160                              <2>  %assign __level__ __level__ - 1
 10161                              <1>  %assign __return__ __return__ - 1
 10162                                  
 10163                                  
 10164                                  select_atapi:
 10165 000009B4 3B06[0000]              	cmp ax, [atapi_cur_dev]
 10166 000009B8 7502                    	jne select_atapi_force
 10167 000009BA F8                      	clc
 10168 000009BB C3                      	ret
 10169                                  
 10170                                  proc select_atapi_force
 10171                              <1> GLOBAL %1
 10172                              <1> %1:
 10173                              <1> con_push proc
 10174                              <2>  %assign __lastlevel__ __level__
 10175                              <2>  %assign __level__ __level__ + 1
 10176                              <2>  %if __return__ > 0
 10177                              <2>  %assign con_return 1
 10178                              <2>  %else
 10179                              <2>  %assign con_return 0
 10180                              <2>  %endif
 10181                              <2> 
 10182                              <2>  %if __cont__ > 0
 10183                              <2>  %assign con_cont 1
 10184                              <2>  %else
 10185                              <2>  %assign con_cont 0
 10186                              <2>  %endif
 10187                              <2>  %if __break__ > 0
 10188                              <2>  %assign con_break 1
 10189                              <2>  %else
 10190                              <2>  %assign con_break 0
 10191                              <2>  %endif
 10192                              <2> 
 10193                              <2>  %ifidn %1,proc
 10194                              <2>  %assign con_return 0
 10195                              <2>  %elifidn %1,forcx
 10196                              <2>  %assign con_break 0
 10197                              <2>  %elifidn %1,repeat
 10198                              <2>  %assign con_cont 0
 10199                              <2>  %assign con_break 0
 10200                              <2>  %elifidn %1,while
 10201                              <2>  %assign con_cont 0
 10202                              <2>  %assign con_break 0
 10203                              <2>  %endif
 10204                              <2> 
 10205                              <2>  %if __cndblock__ == 1
 10206                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 10207                              <2>  %endif
 10208                              <2> 
 10209                              <2>  %push %1
 10210                              <2>  %if con_return
 10211                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 10212                              <2>  %endif
 10213                              <2>  %if con_break
 10214                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 10215                              <3> %define %1%2 %3%4
 10216                              <2>  %endif
 10217                              <2>  %if con_cont
 10218                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 10219                              <3> %define %1%2 %3%4
 10220                              <2>  %endif
 10221                              <2> 
 10222                              <2>  %ifidn %1,andblock
 10223                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 10224                              <2>  %elifidn %1,orblock
 10225                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 10226                              <2>  %endif
 10227                              <1> %assign __return__ __return__ + 1
 10228                              <1> %assign __have_frame__ 0
 10229                              <1> %assign %$have_local 0
 10230                              <1> %assign %$have_save 0
 10231                              <1> %assign __save_all__ 0
 10232                              <1> %assign %$local_args 0
 10233                              <1> %assign %$proc_args 0
 10234                              <1> %assign __save_args__ 0
 10235                              <1> %if %0 > 1
 10236                              <1>  %assign args %0 - 1
 10237                              <1>  %assign %$bp_off 4
 10238                              <1>  %assign i 0
 10239                              <1>  %rotate 1
 10240                              <1>  %ifidn %1,withlocal
 10241                              <1>  %assign %$have_local 1
 10242                              <1>  %assign args args -1
 10243                              <1>  %rotate 1
 10244                              <1>  %endif
 10245                              <1>  %assign %$proc_args args
 10246                              <1>  %rep args
 10247                              <1> 
 10248                              <1>  %%inputarg__%1 EQU %$bp_off
 10249                              <1>  %undef .%1
 10250                              <1>  %define .%1 %%inputarg__%1+bp
 10251                              <1>  cat_define %$proc_argv ,i,%1
 10252                              <1>  %assign %$bp_off %$bp_off + 2
 10253                              <1>  %assign i i+1
 10254                              <1>  %rotate 1
 10255                              <1>  %endrep
 10256                              <1>  %if %$have_local==0
 10257                              <1>  enter 0,0
 10258                              <1>  %assign __have_frame__ 1
 10259                              <1>  %endif
 10260                              <1> %endif
 10261                                  ; input: ax = dev number
 10262                                  ; return: cf =0 success, cf =1 failed
 10263                                  	save all
 10264                              <1> %ifctx proc
 10265                              <1>  %if %$have_local == 1
 10266                              <1>  %error "`save' must after `local'"
 10267                              <1>  %endif
 10268                              <1> 
 10269                              <1>  %ifidn all,%1
 10270                              <1>  %assign __save_all__ 1
 10271                              <1>  %if %0 > 1
 10272                              <1>  %ifidn frame,%2
 10273                              <1>  %if __have_frame__ == 0
 10274                              <1>  enter 0,0
 10275                              <1>  %assign __have_frame__ 1
 10276                              <1>  %assign local_off 0
 10277                              <1>  %endif
 10278                              <1>  %endif
 10279                              <1>  %endif
 10280 000009BC 60                  <1>  pusha
 10281                              <1>  %if __have_frame__ == 1
 10282                              <1>  %undef __AX
 10283                              <1>  %undef __BX
 10284                              <1>  %undef __CX
 10285                              <1>  %undef __DX
 10286                              <1>  %undef __SI
 10287                              <1>  %undef __DI
 10288                              <1>  %idefine __AX bp-local_off - 2
 10289                              <1>  %idefine __CX bp-local_off - 4
 10290                              <1>  %idefine __DX bp-local_off - 6
 10291                              <1>  %idefine __BX bp-local_off - 8
 10292                              <1> 
 10293                              <1> 
 10294                              <1>  %idefine __SI bp-local_off - 14
 10295                              <1>  %idefine __DI bp-local_off - 16
 10296                              <1>  %endif
 10297                              <1>  %elifidn alld,%1
 10298                              <1>  %assign __save_all__ 2
 10299                              <1>  %if %0 > 1
 10300                              <1>  %ifidn frame,%2
 10301                              <1>  %if __have_frame__ == 0
 10302                              <1>  enter 0,0
 10303                              <1>  %assign __have_frame__ 1
 10304                              <1>  %assign local_off 0
 10305                              <1>  %endif
 10306                              <1>  %endif
 10307                              <1>  %endif
 10308                              <1>  pushad
 10309                              <1>  %if __have_frame__ == 1
 10310                              <1>  %undef __EAX
 10311                              <1>  %undef __EBX
 10312                              <1>  %undef __ECX
 10313                              <1>  %undef __EDX
 10314                              <1>  %undef __ESI
 10315                              <1>  %undef __EDI
 10316                              <1>  %idefine __EAX bp-local_off - 4
 10317                              <1>  %idefine __ECX bp-local_off - 8
 10318                              <1>  %idefine __EDX bp-local_off - 12
 10319                              <1>  %idefine __EBX bp-local_off - 16
 10320                              <1> 
 10321                              <1> 
 10322                              <1>  %idefine __ESI bp-local_off - 18
 10323                              <1>  %idefine __EDI bp-local_off - 32
 10324                              <1>  %endif
 10325                              <1> 
 10326                              <1>  %else
 10327                              <1>  %assign __save_args__ %0
 10328                              <1>  %assign __save_all__ 0
 10329                              <1>  %assign i %0
 10330                              <1>  %rep %0
 10331                              <1>  push %1
 10332                              <1>  cat_define %$save_argv ,i,%1
 10333                              <1>  %rotate 1
 10334                              <1>  %assign i i - 1
 10335                              <1>  %endrep
 10336                              <1>  %endif
 10337                              <1> %else
 10338                              <1>  %error "`save' must after `proc'"
 10339                              <1> %endif
 10340 000009BD 06                      	push es
 10341 000009BE 0E                      	push cs
 10342 000009BF 07                      	pop es
 10343                                  
 10344 000009C0 3B06[0700]              	cmp ax, [atapi_dev_count]
 10345 000009C4 7203                    	jb .continue
 10346 000009C6 F9                      	stc
 10347 000009C7 EB24                    	jmp short .end
 10348                                  
 10349                                  .continue:
 10350 000009C9 A3[0000]                	mov [atapi_cur_dev], ax
 10351                                  
 10352 000009CC BE[0900]                	mov si, atapi_dev_base
 10353 000009CF C1E002                  	shl ax, 2
 10354 000009D2 01C6                    	add si, ax
 10355 000009D4 8B1C                    	mov bx, [si]
 10356 000009D6 E887FE                  	call reg_setup_base_addr
 10357 000009D9 8B5C02                  	mov bx,[si+2]
 10358 000009DC 89D8                    	mov ax,bx
 10359 000009DE E81EFC                  	call set_timeout
 10360 000009E1 E85EFC                  	call reg_select_dev
 10361 000009E4 8AA7[0200]              	mov ah,byte [bx+cmd_select_dev]
 10362 000009E8 8826[0200]              	mov [reg_cur_dev],ah
 10363                                  .ok:
 10364 000009EC F8                      	clc
 10365                                  .end:
 10366 000009ED 07                      	pop es
 10367                                  endp
 10368                              <1> %ifnctx proc
 10369                              <1>  %error "expected `proc' before `endp'"
 10370                              <1> %endif
 10371                              <1>  cat_lable %$return,__level__
 10372                              <2> %1%2:
 10373                              <1>  %if __save_all__ ==1
 10374 000009EE 61                  <1>  popa
 10375                              <1>  %elif __save_all__ == 2
 10376                              <1>  popad
 10377                              <1>  %elif __save_args__ > 0
 10378                              <1>  %assign i 1
 10379                              <1>  %rep __save_args__
 10380                              <1>  linecat pop, %$save_argv,i
 10381                              <1>  %assign i i+1
 10382                              <1>  %endrep
 10383                              <1>  %endif
 10384                              <1>  %if __have_frame__ > 0
 10385                              <1>  leave
 10386                              <1>  %endif
 10387                              <1> 
 10388                              <1>  %assign i 0
 10389                              <1>  %rep %$proc_args
 10390                              <1> 
 10391                              <1>  %assign i i+1
 10392                              <1>  %endrep
 10393                              <1> 
 10394                              <1>  %assign i 0
 10395                              <1>  %rep %$local_args
 10396                              <1> 
 10397                              <1>  %assign i i+1
 10398                              <1>  %endrep
 10399 000009EF C3                  <1>  ret
 10400                              <1>  con_pop
 10401                              <2>  %pop
 10402                              <2>  %assign __level__ __level__ - 1
 10403                              <1>  %assign __return__ __return__ - 1
 10404                                  
 10405                                  proc clear_atapi_buffer
 10406                              <1> GLOBAL %1
 10407                              <1> %1:
 10408                              <1> con_push proc
 10409                              <2>  %assign __lastlevel__ __level__
 10410                              <2>  %assign __level__ __level__ + 1
 10411                              <2>  %if __return__ > 0
 10412                              <2>  %assign con_return 1
 10413                              <2>  %else
 10414                              <2>  %assign con_return 0
 10415                              <2>  %endif
 10416                              <2> 
 10417                              <2>  %if __cont__ > 0
 10418                              <2>  %assign con_cont 1
 10419                              <2>  %else
 10420                              <2>  %assign con_cont 0
 10421                              <2>  %endif
 10422                              <2>  %if __break__ > 0
 10423                              <2>  %assign con_break 1
 10424                              <2>  %else
 10425                              <2>  %assign con_break 0
 10426                              <2>  %endif
 10427                              <2> 
 10428                              <2>  %ifidn %1,proc
 10429                              <2>  %assign con_return 0
 10430                              <2>  %elifidn %1,forcx
 10431                              <2>  %assign con_break 0
 10432                              <2>  %elifidn %1,repeat
 10433                              <2>  %assign con_cont 0
 10434                              <2>  %assign con_break 0
 10435                              <2>  %elifidn %1,while
 10436                              <2>  %assign con_cont 0
 10437                              <2>  %assign con_break 0
 10438                              <2>  %endif
 10439                              <2> 
 10440                              <2>  %if __cndblock__ == 1
 10441                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 10442                              <2>  %endif
 10443                              <2> 
 10444                              <2>  %push %1
 10445                              <2>  %if con_return
 10446                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 10447                              <2>  %endif
 10448                              <2>  %if con_break
 10449                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 10450                              <3> %define %1%2 %3%4
 10451                              <2>  %endif
 10452                              <2>  %if con_cont
 10453                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 10454                              <3> %define %1%2 %3%4
 10455                              <2>  %endif
 10456                              <2> 
 10457                              <2>  %ifidn %1,andblock
 10458                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 10459                              <2>  %elifidn %1,orblock
 10460                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 10461                              <2>  %endif
 10462                              <1> %assign __return__ __return__ + 1
 10463                              <1> %assign __have_frame__ 0
 10464                              <1> %assign %$have_local 0
 10465                              <1> %assign %$have_save 0
 10466                              <1> %assign __save_all__ 0
 10467                              <1> %assign %$local_args 0
 10468                              <1> %assign %$proc_args 0
 10469                              <1> %assign __save_args__ 0
 10470                              <1> %if %0 > 1
 10471                              <1>  %assign args %0 - 1
 10472                              <1>  %assign %$bp_off 4
 10473                              <1>  %assign i 0
 10474                              <1>  %rotate 1
 10475                              <1>  %ifidn %1,withlocal
 10476                              <1>  %assign %$have_local 1
 10477                              <1>  %assign args args -1
 10478                              <1>  %rotate 1
 10479                              <1>  %endif
 10480                              <1>  %assign %$proc_args args
 10481                              <1>  %rep args
 10482                              <1> 
 10483                              <1>  %%inputarg__%1 EQU %$bp_off
 10484                              <1>  %undef .%1
 10485                              <1>  %define .%1 %%inputarg__%1+bp
 10486                              <1>  cat_define %$proc_argv ,i,%1
 10487                              <1>  %assign %$bp_off %$bp_off + 2
 10488                              <1>  %assign i i+1
 10489                              <1>  %rotate 1
 10490                              <1>  %endrep
 10491                              <1>  %if %$have_local==0
 10492                              <1>  enter 0,0
 10493                              <1>  %assign __have_frame__ 1
 10494                              <1>  %endif
 10495                              <1> %endif
 10496                                  	save all
 10497                              <1> %ifctx proc
 10498                              <1>  %if %$have_local == 1
 10499                              <1>  %error "`save' must after `local'"
 10500                              <1>  %endif
 10501                              <1> 
 10502                              <1>  %ifidn all,%1
 10503                              <1>  %assign __save_all__ 1
 10504                              <1>  %if %0 > 1
 10505                              <1>  %ifidn frame,%2
 10506                              <1>  %if __have_frame__ == 0
 10507                              <1>  enter 0,0
 10508                              <1>  %assign __have_frame__ 1
 10509                              <1>  %assign local_off 0
 10510                              <1>  %endif
 10511                              <1>  %endif
 10512                              <1>  %endif
 10513 000009F0 60                  <1>  pusha
 10514                              <1>  %if __have_frame__ == 1
 10515                              <1>  %undef __AX
 10516                              <1>  %undef __BX
 10517                              <1>  %undef __CX
 10518                              <1>  %undef __DX
 10519                              <1>  %undef __SI
 10520                              <1>  %undef __DI
 10521                              <1>  %idefine __AX bp-local_off - 2
 10522                              <1>  %idefine __CX bp-local_off - 4
 10523                              <1>  %idefine __DX bp-local_off - 6
 10524                              <1>  %idefine __BX bp-local_off - 8
 10525                              <1> 
 10526                              <1> 
 10527                              <1>  %idefine __SI bp-local_off - 14
 10528                              <1>  %idefine __DI bp-local_off - 16
 10529                              <1>  %endif
 10530                              <1>  %elifidn alld,%1
 10531                              <1>  %assign __save_all__ 2
 10532                              <1>  %if %0 > 1
 10533                              <1>  %ifidn frame,%2
 10534                              <1>  %if __have_frame__ == 0
 10535                              <1>  enter 0,0
 10536                              <1>  %assign __have_frame__ 1
 10537                              <1>  %assign local_off 0
 10538                              <1>  %endif
 10539                              <1>  %endif
 10540                              <1>  %endif
 10541                              <1>  pushad
 10542                              <1>  %if __have_frame__ == 1
 10543                              <1>  %undef __EAX
 10544                              <1>  %undef __EBX
 10545                              <1>  %undef __ECX
 10546                              <1>  %undef __EDX
 10547                              <1>  %undef __ESI
 10548                              <1>  %undef __EDI
 10549                              <1>  %idefine __EAX bp-local_off - 4
 10550                              <1>  %idefine __ECX bp-local_off - 8
 10551                              <1>  %idefine __EDX bp-local_off - 12
 10552                              <1>  %idefine __EBX bp-local_off - 16
 10553                              <1> 
 10554                              <1> 
 10555                              <1>  %idefine __ESI bp-local_off - 18
 10556                              <1>  %idefine __EDI bp-local_off - 32
 10557                              <1>  %endif
 10558                              <1> 
 10559                              <1>  %else
 10560                              <1>  %assign __save_args__ %0
 10561                              <1>  %assign __save_all__ 0
 10562                              <1>  %assign i %0
 10563                              <1>  %rep %0
 10564                              <1>  push %1
 10565                              <1>  cat_define %$save_argv ,i,%1
 10566                              <1>  %rotate 1
 10567                              <1>  %assign i i - 1
 10568                              <1>  %endrep
 10569                              <1>  %endif
 10570                              <1> %else
 10571                              <1>  %error "`save' must after `proc'"
 10572                              <1> %endif
 10573 000009F1 FC                      	cld
 10574 000009F2 06                      	push es
 10575 000009F3 0E                      	push cs
 10576 000009F4 07                      	pop es
 10577 000009F5 BF[AD00]                	mov di, atapi_tmp_buffer
 10578 000009F8 B98000                  	mov cx, 128
 10579 000009FB 30C0                    	xor al, al
 10580 000009FD AA                      	stosb
 10581 000009FE BF[9D00]                	mov di, atapi_cmd_buffer
 10582 00000A01 B91000                  	mov cx, 16
 10583 00000A04 AA                      	stosb
 10584 00000A05 07                      	pop es
 10585                                  endp
 10586                              <1> %ifnctx proc
 10587                              <1>  %error "expected `proc' before `endp'"
 10588                              <1> %endif
 10589                              <1>  cat_lable %$return,__level__
 10590                              <2> %1%2:
 10591                              <1>  %if __save_all__ ==1
 10592 00000A06 61                  <1>  popa
 10593                              <1>  %elif __save_all__ == 2
 10594                              <1>  popad
 10595                              <1>  %elif __save_args__ > 0
 10596                              <1>  %assign i 1
 10597                              <1>  %rep __save_args__
 10598                              <1>  linecat pop, %$save_argv,i
 10599                              <1>  %assign i i+1
 10600                              <1>  %endrep
 10601                              <1>  %endif
 10602                              <1>  %if __have_frame__ > 0
 10603                              <1>  leave
 10604                              <1>  %endif
 10605                              <1> 
 10606                              <1>  %assign i 0
 10607                              <1>  %rep %$proc_args
 10608                              <1> 
 10609                              <1>  %assign i i+1
 10610                              <1>  %endrep
 10611                              <1> 
 10612                              <1>  %assign i 0
 10613                              <1>  %rep %$local_args
 10614                              <1> 
 10615                              <1>  %assign i i+1
 10616                              <1>  %endrep
 10617 00000A07 C3                  <1>  ret
 10618                              <1>  con_pop
 10619                              <2>  %pop
 10620                              <2>  %assign __level__ __level__ - 1
 10621                              <1>  %assign __return__ __return__ - 1
 10622                                  
 10623                                  proc get_atapi_sense
 10624                              <1> GLOBAL %1
 10625                              <1> %1:
 10626                              <1> con_push proc
 10627                              <2>  %assign __lastlevel__ __level__
 10628                              <2>  %assign __level__ __level__ + 1
 10629                              <2>  %if __return__ > 0
 10630                              <2>  %assign con_return 1
 10631                              <2>  %else
 10632                              <2>  %assign con_return 0
 10633                              <2>  %endif
 10634                              <2> 
 10635                              <2>  %if __cont__ > 0
 10636                              <2>  %assign con_cont 1
 10637                              <2>  %else
 10638                              <2>  %assign con_cont 0
 10639                              <2>  %endif
 10640                              <2>  %if __break__ > 0
 10641                              <2>  %assign con_break 1
 10642                              <2>  %else
 10643                              <2>  %assign con_break 0
 10644                              <2>  %endif
 10645                              <2> 
 10646                              <2>  %ifidn %1,proc
 10647                              <2>  %assign con_return 0
 10648                              <2>  %elifidn %1,forcx
 10649                              <2>  %assign con_break 0
 10650                              <2>  %elifidn %1,repeat
 10651                              <2>  %assign con_cont 0
 10652                              <2>  %assign con_break 0
 10653                              <2>  %elifidn %1,while
 10654                              <2>  %assign con_cont 0
 10655                              <2>  %assign con_break 0
 10656                              <2>  %endif
 10657                              <2> 
 10658                              <2>  %if __cndblock__ == 1
 10659                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 10660                              <2>  %endif
 10661                              <2> 
 10662                              <2>  %push %1
 10663                              <2>  %if con_return
 10664                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 10665                              <2>  %endif
 10666                              <2>  %if con_break
 10667                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 10668                              <3> %define %1%2 %3%4
 10669                              <2>  %endif
 10670                              <2>  %if con_cont
 10671                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 10672                              <3> %define %1%2 %3%4
 10673                              <2>  %endif
 10674                              <2> 
 10675                              <2>  %ifidn %1,andblock
 10676                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 10677                              <2>  %elifidn %1,orblock
 10678                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 10679                              <2>  %endif
 10680                              <1> %assign __return__ __return__ + 1
 10681                              <1> %assign __have_frame__ 0
 10682                              <1> %assign %$have_local 0
 10683                              <1> %assign %$have_save 0
 10684                              <1> %assign __save_all__ 0
 10685                              <1> %assign %$local_args 0
 10686                              <1> %assign %$proc_args 0
 10687                              <1> %assign __save_args__ 0
 10688                              <1> %if %0 > 1
 10689                              <1>  %assign args %0 - 1
 10690                              <1>  %assign %$bp_off 4
 10691                              <1>  %assign i 0
 10692                              <1>  %rotate 1
 10693                              <1>  %ifidn %1,withlocal
 10694                              <1>  %assign %$have_local 1
 10695                              <1>  %assign args args -1
 10696                              <1>  %rotate 1
 10697                              <1>  %endif
 10698                              <1>  %assign %$proc_args args
 10699                              <1>  %rep args
 10700                              <1> 
 10701                              <1>  %%inputarg__%1 EQU %$bp_off
 10702                              <1>  %undef .%1
 10703                              <1>  %define .%1 %%inputarg__%1+bp
 10704                              <1>  cat_define %$proc_argv ,i,%1
 10705                              <1>  %assign %$bp_off %$bp_off + 2
 10706                              <1>  %assign i i+1
 10707                              <1>  %rotate 1
 10708                              <1>  %endrep
 10709                              <1>  %if %$have_local==0
 10710                              <1>  enter 0,0
 10711                              <1>  %assign __have_frame__ 1
 10712                              <1>  %endif
 10713                              <1> %endif
 10714                                  ; return: cf =0 success, al = sense key, bl = asc, bh = ascq
 10715                                  ;	  cf =1 failed 
 10716 00000A08 E8E5FF                  	call clear_atapi_buffer
 10717 00000A0B C606[9D00]03            	mov byte [atapi_cmd_buffer], 0x03
 10718 00000A10 C606[A100]20            	mov byte [atapi_cmd_buffer+4], 32
 10719                                  	invoke reg_packet,byte,0,cs, atapi_tmp_buffer, 128
 10720                              <1>  %if %0 == 2
 10721                              <1>  push word %1
 10722                              <1>  %assign rargc 1
 10723                              <1>  %else
 10724                              <1>  %rotate -2
 10725                              <1>  %assign argc %0-1
 10726                              <1>  %assign rargc 0
 10727                              <1>  %rep argc
 10728                              <1>  %ifidn %1,byte
 10729                              <1>  push byte %2
 10730                              <1>  %rotate -1
 10731                              <1>  %assign argc argc -1
 10732                              <1>  %assign rargc rargc +1
 10733                              <1>  %elifidn %1,word
 10734                              <1>  push word %2
 10735                              <1>  %rotate -1
 10736                              <1>  %assign argc argc -1
 10737                              <1>  %assign rargc rargc +1
 10738                              <1>  %elifidn %1,dword
 10739                              <1>  push dword %2
 10740                              <1>  %rotate -1
 10741                              <1>  %assign argc argc -1
 10742                              <1>  %assign rargc rargc +2
 10743                              <1>  %else
 10744                              <1>  push word %2
 10745                              <1>  %assign rargc rargc +1
 10746                              <1>  %endif
 10747                              <1>  %rotate -1
 10748                              <1>  %assign argc argc -1
 10749                              <1>  %if argc <=0
 10750                              <1>  %exitrep
 10751                              <1>  %endif
 10752                              <1>  %endrep
 10753                              <2>  %ifidn %1,byte
 10754                              <2>  push byte %2
 10755                              <2>  %rotate -1
 10756                              <2>  %assign argc argc -1
 10757                              <2>  %assign rargc rargc +1
 10758                              <2>  %elifidn %1,word
 10759                              <2>  push word %2
 10760                              <2>  %rotate -1
 10761                              <2>  %assign argc argc -1
 10762                              <2>  %assign rargc rargc +1
 10763                              <2>  %elifidn %1,dword
 10764                              <2>  push dword %2
 10765                              <2>  %rotate -1
 10766                              <2>  %assign argc argc -1
 10767                              <2>  %assign rargc rargc +2
 10768                              <2>  %else
 10769 00000A15 688000              <2>  push word %2
 10770                              <2>  %assign rargc rargc +1
 10771                              <2>  %endif
 10772                              <2>  %rotate -1
 10773                              <2>  %assign argc argc -1
 10774                              <2>  %if argc <=0
 10775                              <2>  %exitrep
 10776                              <2>  %endif
 10777                              <2>  %ifidn %1,byte
 10778                              <2>  push byte %2
 10779                              <2>  %rotate -1
 10780                              <2>  %assign argc argc -1
 10781                              <2>  %assign rargc rargc +1
 10782                              <2>  %elifidn %1,word
 10783                              <2>  push word %2
 10784                              <2>  %rotate -1
 10785                              <2>  %assign argc argc -1
 10786                              <2>  %assign rargc rargc +1
 10787                              <2>  %elifidn %1,dword
 10788                              <2>  push dword %2
 10789                              <2>  %rotate -1
 10790                              <2>  %assign argc argc -1
 10791                              <2>  %assign rargc rargc +2
 10792                              <2>  %else
 10793 00000A18 68[AD00]            <2>  push word %2
 10794                              <2>  %assign rargc rargc +1
 10795                              <2>  %endif
 10796                              <2>  %rotate -1
 10797                              <2>  %assign argc argc -1
 10798                              <2>  %if argc <=0
 10799                              <2>  %exitrep
 10800                              <2>  %endif
 10801                              <2>  %ifidn %1,byte
 10802                              <2>  push byte %2
 10803                              <2>  %rotate -1
 10804                              <2>  %assign argc argc -1
 10805                              <2>  %assign rargc rargc +1
 10806                              <2>  %elifidn %1,word
 10807                              <2>  push word %2
 10808                              <2>  %rotate -1
 10809                              <2>  %assign argc argc -1
 10810                              <2>  %assign rargc rargc +1
 10811                              <2>  %elifidn %1,dword
 10812                              <2>  push dword %2
 10813                              <2>  %rotate -1
 10814                              <2>  %assign argc argc -1
 10815                              <2>  %assign rargc rargc +2
 10816                              <2>  %else
 10817 00000A1B 0E                  <2>  push word %2
 10818                              <2>  %assign rargc rargc +1
 10819                              <2>  %endif
 10820                              <2>  %rotate -1
 10821                              <2>  %assign argc argc -1
 10822                              <2>  %if argc <=0
 10823                              <2>  %exitrep
 10824                              <2>  %endif
 10825                              <2>  %ifidn %1,byte
 10826 00000A1C 6A00                <2>  push byte %2
 10827                              <2>  %rotate -1
 10828                              <2>  %assign argc argc -1
 10829                              <2>  %assign rargc rargc +1
 10830                              <2>  %elifidn %1,word
 10831                              <2>  push word %2
 10832                              <2>  %rotate -1
 10833                              <2>  %assign argc argc -1
 10834                              <2>  %assign rargc rargc +1
 10835                              <2>  %elifidn %1,dword
 10836                              <2>  push dword %2
 10837                              <2>  %rotate -1
 10838                              <2>  %assign argc argc -1
 10839                              <2>  %assign rargc rargc +2
 10840                              <2>  %else
 10841                              <2>  push word %2
 10842                              <2>  %assign rargc rargc +1
 10843                              <2>  %endif
 10844                              <2>  %rotate -1
 10845                              <2>  %assign argc argc -1
 10846                              <2>  %if argc <=0
 10847                              <2>  %exitrep
 10848                              <2>  %endif
 10849                              <1>  %rotate 1
 10850                              <1>  %endif
 10851 00000A1E E841FC              <1>  call %1
 10852 00000A21 83C408              <1>  add sp,(rargc)*2
 10853                                  
 10854 00000A24 09C0                    	or ax, ax
 10855 00000A26 7521                    	jnz .fail
 10856                                  
 10857 00000A28 A0[AD00]                	mov al, [atapi_tmp_buffer]
 10858 00000A2B 247F                    	and al, 0x7f
 10859                                  	if
 10860                              <1>  %rep %0 -1
 10861                              <1>  %1
 10862                              <1>  %rotate 1
 10863                              <1>  %endrep
 10864                              <1> 
 10865                              <1>  con_push if
 10866                              <2>  %assign __lastlevel__ __level__
 10867                              <2>  %assign __level__ __level__ + 1
 10868                              <2>  %if __return__ > 0
 10869                              <2>  %assign con_return 1
 10870                              <2>  %else
 10871                              <2>  %assign con_return 0
 10872                              <2>  %endif
 10873                              <2> 
 10874                              <2>  %if __cont__ > 0
 10875                              <2>  %assign con_cont 1
 10876                              <2>  %else
 10877                              <2>  %assign con_cont 0
 10878                              <2>  %endif
 10879                              <2>  %if __break__ > 0
 10880                              <2>  %assign con_break 1
 10881                              <2>  %else
 10882                              <2>  %assign con_break 0
 10883                              <2>  %endif
 10884                              <2> 
 10885                              <2>  %ifidn %1,proc
 10886                              <2>  %assign con_return 0
 10887                              <2>  %elifidn %1,forcx
 10888                              <2>  %assign con_break 0
 10889                              <2>  %elifidn %1,repeat
 10890                              <2>  %assign con_cont 0
 10891                              <2>  %assign con_break 0
 10892                              <2>  %elifidn %1,while
 10893                              <2>  %assign con_cont 0
 10894                              <2>  %assign con_break 0
 10895                              <2>  %endif
 10896                              <2> 
 10897                              <2>  %if __cndblock__ == 1
 10898                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 10899                              <2>  %endif
 10900                              <2> 
 10901                              <2>  %push %1
 10902                              <2>  %if con_return
 10903                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 10904                              <3> %define %1%2 %3%4
 10905                              <2>  %endif
 10906                              <2>  %if con_break
 10907                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 10908                              <3> %define %1%2 %3%4
 10909                              <2>  %endif
 10910                              <2>  %if con_cont
 10911                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 10912                              <3> %define %1%2 %3%4
 10913                              <2>  %endif
 10914                              <2> 
 10915                              <2>  %ifidn %1,andblock
 10916                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 10917                              <2>  %elifidn %1,orblock
 10918                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 10919                              <2>  %endif
 10920                              <1> 
 10921                              <1>  %if %0 > 0
 10922                              <1>  j%-1 %$ifnot
 10923                              <1>  %endif
 10924                              <1>  %assign %$elif_level 0
 10925                                  	orblock
 10926                              <1>  %assign __cndblock__ __cndblock__ + 1
 10927                              <1>  con_push orblock
 10928                              <2>  %assign __lastlevel__ __level__
 10929                              <2>  %assign __level__ __level__ + 1
 10930                              <2>  %if __return__ > 0
 10931                              <2>  %assign con_return 1
 10932                              <2>  %else
 10933                              <2>  %assign con_return 0
 10934                              <2>  %endif
 10935                              <2> 
 10936                              <2>  %if __cont__ > 0
 10937                              <2>  %assign con_cont 1
 10938                              <2>  %else
 10939                              <2>  %assign con_cont 0
 10940                              <2>  %endif
 10941                              <2>  %if __break__ > 0
 10942                              <2>  %assign con_break 1
 10943                              <2>  %else
 10944                              <2>  %assign con_break 0
 10945                              <2>  %endif
 10946                              <2> 
 10947                              <2>  %ifidn %1,proc
 10948                              <2>  %assign con_return 0
 10949                              <2>  %elifidn %1,forcx
 10950                              <2>  %assign con_break 0
 10951                              <2>  %elifidn %1,repeat
 10952                              <2>  %assign con_cont 0
 10953                              <2>  %assign con_break 0
 10954                              <2>  %elifidn %1,while
 10955                              <2>  %assign con_cont 0
 10956                              <2>  %assign con_break 0
 10957                              <2>  %endif
 10958                              <2> 
 10959                              <2>  %if __cndblock__ == 1
 10960                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 10961                              <3> %define %1%2 %3%4
 10962                              <2>  %endif
 10963                              <2> 
 10964                              <2>  %push %1
 10965                              <2>  %if con_return
 10966                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 10967                              <3> %define %1%2 %3%4
 10968                              <2>  %endif
 10969                              <2>  %if con_break
 10970                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 10971                              <3> %define %1%2 %3%4
 10972                              <2>  %endif
 10973                              <2>  %if con_cont
 10974                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 10975                              <3> %define %1%2 %3%4
 10976                              <2>  %endif
 10977                              <2> 
 10978                              <2>  %ifidn %1,andblock
 10979                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 10980                              <2>  %elifidn %1,orblock
 10981                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 10982                              <3> %define %1%2 %3%4
 10983                              <2>  %endif
 10984                                  		condiction {cmp al, 0x70}, e
 10985                              <1>  %rep %0 -1
 10986                              <1>  %1
 10987                              <1>  %rotate 1
 10988                              <1>  %endrep
 10989 00000A2D 3C70                <2>  %1
 10990                              <2>  %rotate 1
 10991                              <1>  %ifctx andblock
 10992                              <1>  cat_jnc %1,%$ifnot,__level__
 10993                              <1>  %elifctx orblock
 10994 00000A2F 7404                <1>  j%+1 %$iftrue
 10995                              <1>  %else
 10996                              <1>  %error "not in the andblock or orblock"
 10997                              <1>  %endif
 10998                                  		condiction {cmp al, 0x71}, e
 10999                              <1>  %rep %0 -1
 11000                              <1>  %1
 11001                              <1>  %rotate 1
 11002                              <1>  %endrep
 11003 00000A31 3C71                <2>  %1
 11004                              <2>  %rotate 1
 11005                              <1>  %ifctx andblock
 11006                              <1>  cat_jnc %1,%$ifnot,__level__
 11007                              <1>  %elifctx orblock
 11008 00000A33 7400                <1>  j%+1 %$iftrue
 11009                              <1>  %else
 11010                              <1>  %error "not in the andblock or orblock"
 11011                              <1>  %endif
 11012                                  	endblock then
 11013                              <1>  %ifctx orblock
 11014                              <1> 
 11015                              <1>  %$iftrue:
 11016                              <1>  %elifctx andblock
 11017                              <1>  %else
 11018                              <1>  %error "not in andblock or orblock"
 11019                              <1>  %endif
 11020                              <1>  con_pop
 11021                              <2>  %pop
 11022                              <2>  %assign __level__ __level__ - 1
 11023                              <1>  %assign __cndblock__ __cndblock__ - 1
 11024 00000A35 A0[AF00]                		mov al, [atapi_tmp_buffer+2]            ; get sense key
 11025 00000A38 240F                    		and al, 0x0f
 11026 00000A3A 31DB                    		xor bx, bx
 11027                                  		if {cmp byte [atapi_tmp_buffer+7], 0x06}, ae
 11028                              <1>  %rep %0 -1
 11029                              <1>  %1
 11030                              <1>  %rotate 1
 11031                              <1>  %endrep
 11032 00000A3C 803E[B400]06        <2>  %1
 11033                              <2>  %rotate 1
 11034                              <1> 
 11035                              <1>  con_push if
 11036                              <2>  %assign __lastlevel__ __level__
 11037                              <2>  %assign __level__ __level__ + 1
 11038                              <2>  %if __return__ > 0
 11039                              <2>  %assign con_return 1
 11040                              <2>  %else
 11041                              <2>  %assign con_return 0
 11042                              <2>  %endif
 11043                              <2> 
 11044                              <2>  %if __cont__ > 0
 11045                              <2>  %assign con_cont 1
 11046                              <2>  %else
 11047                              <2>  %assign con_cont 0
 11048                              <2>  %endif
 11049                              <2>  %if __break__ > 0
 11050                              <2>  %assign con_break 1
 11051                              <2>  %else
 11052                              <2>  %assign con_break 0
 11053                              <2>  %endif
 11054                              <2> 
 11055                              <2>  %ifidn %1,proc
 11056                              <2>  %assign con_return 0
 11057                              <2>  %elifidn %1,forcx
 11058                              <2>  %assign con_break 0
 11059                              <2>  %elifidn %1,repeat
 11060                              <2>  %assign con_cont 0
 11061                              <2>  %assign con_break 0
 11062                              <2>  %elifidn %1,while
 11063                              <2>  %assign con_cont 0
 11064                              <2>  %assign con_break 0
 11065                              <2>  %endif
 11066                              <2> 
 11067                              <2>  %if __cndblock__ == 1
 11068                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 11069                              <2>  %endif
 11070                              <2> 
 11071                              <2>  %push %1
 11072                              <2>  %if con_return
 11073                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 11074                              <3> %define %1%2 %3%4
 11075                              <2>  %endif
 11076                              <2>  %if con_break
 11077                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 11078                              <3> %define %1%2 %3%4
 11079                              <2>  %endif
 11080                              <2>  %if con_cont
 11081                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 11082                              <3> %define %1%2 %3%4
 11083                              <2>  %endif
 11084                              <2> 
 11085                              <2>  %ifidn %1,andblock
 11086                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 11087                              <2>  %elifidn %1,orblock
 11088                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 11089                              <2>  %endif
 11090                              <1> 
 11091                              <1>  %if %0 > 0
 11092 00000A41 7204                <1>  j%-1 %$ifnot
 11093                              <1>  %endif
 11094                              <1>  %assign %$elif_level 0
 11095 00000A43 8B1E[B900]              			mov bx, [atapi_tmp_buffer+12]
 11096                                  		endif
 11097                              <1>  %assign elselevel 0
 11098                              <1>  %ifctx if
 11099                              <1>  %$ifnot:
 11100                              <1>  con_pop
 11101                              <2>  %pop
 11102                              <2>  %assign __level__ __level__ - 1
 11103                              <1>  %elifctx else
 11104                              <1>  %assign elselevel %$elif_level
 11105                              <1>  %$ifend:
 11106                              <1>  con_pop
 11107                              <1>  %elifctx elif
 11108                              <1>  %assign elselevel %$elif_level
 11109                              <1>  %$ifnot:
 11110                              <1>  con_pop
 11111                              <1>  %else
 11112                              <1>  %error "expected `if' or `else' before `endif'"
 11113                              <1>  %endif
 11114                              <1>  %rep elselevel
 11115                              <1>  %$ifend:
 11116                              <1>  con_pop
 11117                              <1>  %endrep
 11118 00000A47 F8                      		clc
 11119                                  		return
 11120                              <1>  %if %0 > 0
 11121                              <1>  %assign __near__ 0
 11122                              <1>  %assign argc %0
 11123                              <1>  %ifidn %1,near
 11124                              <1>  %assign __near__ 1
 11125                              <1>  %assign argc argc-1
 11126                              <1>  %rotate 1
 11127                              <1>  %endif
 11128                              <1>  %if argc > 0
 11129                              <1>  %ifidn %1,if
 11130                              <1> 
 11131                              <1>  %rotate 1
 11132                              <1>  %rep argc-2
 11133                              <1>  %1
 11134                              <1>  %rotate 1
 11135                              <1>  %endrep
 11136                              <1>  %if __near__ == 0
 11137                              <1>  cat_jc %1,%$return,__level__
 11138                              <1>  %else
 11139                              <1>  cat_jc_near %1,%$return,__level__
 11140                              <1>  %endif
 11141                              <1>  %else
 11142                              <1>  %error "expect `if' after `return'"
 11143                              <1>  %endif
 11144                              <1>  %else
 11145                              <1>  %if __near__ == 0
 11146                              <1>  cat_jmp %$return,__level__
 11147                              <1>  %else
 11148                              <1>  cat_jmp_near %$return,__level__
 11149                              <1>  %endif
 11150                              <1>  %endif
 11151                              <1>  %else
 11152                              <1>  %if __have_frame__ == 0 && __save_all__ == 0 && __save_args__ == 0
 11153 00000A48 C3                  <1>  ret
 11154                              <1>  %else
 11155                              <1>  cat_jmp %$return,__level__
 11156                              <1>  %endif
 11157                              <1>  %endif
 11158                                  	endif
 11159                              <1>  %assign elselevel 0
 11160                              <1>  %ifctx if
 11161                              <1>  %$ifnot:
 11162                              <1>  con_pop
 11163                              <2>  %pop
 11164                              <2>  %assign __level__ __level__ - 1
 11165                              <1>  %elifctx else
 11166                              <1>  %assign elselevel %$elif_level
 11167                              <1>  %$ifend:
 11168                              <1>  con_pop
 11169                              <1>  %elifctx elif
 11170                              <1>  %assign elselevel %$elif_level
 11171                              <1>  %$ifnot:
 11172                              <1>  con_pop
 11173                              <1>  %else
 11174                              <1>  %error "expected `if' or `else' before `endif'"
 11175                              <1>  %endif
 11176                              <1>  %rep elselevel
 11177                              <1>  %$ifend:
 11178                              <1>  con_pop
 11179                              <1>  %endrep
 11180                                  .fail:
 11181 00000A49 F9                      	stc
 11182                                  endp
 11183                              <1> %ifnctx proc
 11184                              <1>  %error "expected `proc' before `endp'"
 11185                              <1> %endif
 11186                              <1>  cat_lable %$return,__level__
 11187                              <2> %1%2:
 11188                              <1>  %if __save_all__ ==1
 11189                              <1>  popa
 11190                              <1>  %elif __save_all__ == 2
 11191                              <1>  popad
 11192                              <1>  %elif __save_args__ > 0
 11193                              <1>  %assign i 1
 11194                              <1>  %rep __save_args__
 11195                              <1>  linecat pop, %$save_argv,i
 11196                              <1>  %assign i i+1
 11197                              <1>  %endrep
 11198                              <1>  %endif
 11199                              <1>  %if __have_frame__ > 0
 11200                              <1>  leave
 11201                              <1>  %endif
 11202                              <1> 
 11203                              <1>  %assign i 0
 11204                              <1>  %rep %$proc_args
 11205                              <1> 
 11206                              <1>  %assign i i+1
 11207                              <1>  %endrep
 11208                              <1> 
 11209                              <1>  %assign i 0
 11210                              <1>  %rep %$local_args
 11211                              <1> 
 11212                              <1>  %assign i i+1
 11213                              <1>  %endrep
 11214 00000A4A C3                  <1>  ret
 11215                              <1>  con_pop
 11216                              <2>  %pop
 11217                              <2>  %assign __level__ __level__ - 1
 11218                              <1>  %assign __return__ __return__ - 1
 11219                                  
 11220                                  proc test_atapi_ready
 11221                              <1> GLOBAL %1
 11222                              <1> %1:
 11223                              <1> con_push proc
 11224                              <2>  %assign __lastlevel__ __level__
 11225                              <2>  %assign __level__ __level__ + 1
 11226                              <2>  %if __return__ > 0
 11227                              <2>  %assign con_return 1
 11228                              <2>  %else
 11229                              <2>  %assign con_return 0
 11230                              <2>  %endif
 11231                              <2> 
 11232                              <2>  %if __cont__ > 0
 11233                              <2>  %assign con_cont 1
 11234                              <2>  %else
 11235                              <2>  %assign con_cont 0
 11236                              <2>  %endif
 11237                              <2>  %if __break__ > 0
 11238                              <2>  %assign con_break 1
 11239                              <2>  %else
 11240                              <2>  %assign con_break 0
 11241                              <2>  %endif
 11242                              <2> 
 11243                              <2>  %ifidn %1,proc
 11244                              <2>  %assign con_return 0
 11245                              <2>  %elifidn %1,forcx
 11246                              <2>  %assign con_break 0
 11247                              <2>  %elifidn %1,repeat
 11248                              <2>  %assign con_cont 0
 11249                              <2>  %assign con_break 0
 11250                              <2>  %elifidn %1,while
 11251                              <2>  %assign con_cont 0
 11252                              <2>  %assign con_break 0
 11253                              <2>  %endif
 11254                              <2> 
 11255                              <2>  %if __cndblock__ == 1
 11256                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 11257                              <2>  %endif
 11258                              <2> 
 11259                              <2>  %push %1
 11260                              <2>  %if con_return
 11261                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 11262                              <2>  %endif
 11263                              <2>  %if con_break
 11264                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 11265                              <3> %define %1%2 %3%4
 11266                              <2>  %endif
 11267                              <2>  %if con_cont
 11268                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 11269                              <3> %define %1%2 %3%4
 11270                              <2>  %endif
 11271                              <2> 
 11272                              <2>  %ifidn %1,andblock
 11273                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 11274                              <2>  %elifidn %1,orblock
 11275                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 11276                              <2>  %endif
 11277                              <1> %assign __return__ __return__ + 1
 11278                              <1> %assign __have_frame__ 0
 11279                              <1> %assign %$have_local 0
 11280                              <1> %assign %$have_save 0
 11281                              <1> %assign __save_all__ 0
 11282                              <1> %assign %$local_args 0
 11283                              <1> %assign %$proc_args 0
 11284                              <1> %assign __save_args__ 0
 11285                              <1> %if %0 > 1
 11286                              <1>  %assign args %0 - 1
 11287                              <1>  %assign %$bp_off 4
 11288                              <1>  %assign i 0
 11289                              <1>  %rotate 1
 11290                              <1>  %ifidn %1,withlocal
 11291                              <1>  %assign %$have_local 1
 11292                              <1>  %assign args args -1
 11293                              <1>  %rotate 1
 11294                              <1>  %endif
 11295                              <1>  %assign %$proc_args args
 11296                              <1>  %rep args
 11297                              <1> 
 11298                              <1>  %%inputarg__%1 EQU %$bp_off
 11299                              <1>  %undef .%1
 11300                              <1>  %define .%1 %%inputarg__%1+bp
 11301                              <1>  cat_define %$proc_argv ,i,%1
 11302                              <1>  %assign %$bp_off %$bp_off + 2
 11303                              <1>  %assign i i+1
 11304                              <1>  %rotate 1
 11305                              <1>  %endrep
 11306                              <1>  %if %$have_local==0
 11307                              <1>  enter 0,0
 11308                              <1>  %assign __have_frame__ 1
 11309                              <1>  %endif
 11310                              <1> %endif
 11311                                  ; return: cf =0 ready, cf =1 not ready
 11312                                  	save all
 11313                              <1> %ifctx proc
 11314                              <1>  %if %$have_local == 1
 11315                              <1>  %error "`save' must after `local'"
 11316                              <1>  %endif
 11317                              <1> 
 11318                              <1>  %ifidn all,%1
 11319                              <1>  %assign __save_all__ 1
 11320                              <1>  %if %0 > 1
 11321                              <1>  %ifidn frame,%2
 11322                              <1>  %if __have_frame__ == 0
 11323                              <1>  enter 0,0
 11324                              <1>  %assign __have_frame__ 1
 11325                              <1>  %assign local_off 0
 11326                              <1>  %endif
 11327                              <1>  %endif
 11328                              <1>  %endif
 11329 00000A4B 60                  <1>  pusha
 11330                              <1>  %if __have_frame__ == 1
 11331                              <1>  %undef __AX
 11332                              <1>  %undef __BX
 11333                              <1>  %undef __CX
 11334                              <1>  %undef __DX
 11335                              <1>  %undef __SI
 11336                              <1>  %undef __DI
 11337                              <1>  %idefine __AX bp-local_off - 2
 11338                              <1>  %idefine __CX bp-local_off - 4
 11339                              <1>  %idefine __DX bp-local_off - 6
 11340                              <1>  %idefine __BX bp-local_off - 8
 11341                              <1> 
 11342                              <1> 
 11343                              <1>  %idefine __SI bp-local_off - 14
 11344                              <1>  %idefine __DI bp-local_off - 16
 11345                              <1>  %endif
 11346                              <1>  %elifidn alld,%1
 11347                              <1>  %assign __save_all__ 2
 11348                              <1>  %if %0 > 1
 11349                              <1>  %ifidn frame,%2
 11350                              <1>  %if __have_frame__ == 0
 11351                              <1>  enter 0,0
 11352                              <1>  %assign __have_frame__ 1
 11353                              <1>  %assign local_off 0
 11354                              <1>  %endif
 11355                              <1>  %endif
 11356                              <1>  %endif
 11357                              <1>  pushad
 11358                              <1>  %if __have_frame__ == 1
 11359                              <1>  %undef __EAX
 11360                              <1>  %undef __EBX
 11361                              <1>  %undef __ECX
 11362                              <1>  %undef __EDX
 11363                              <1>  %undef __ESI
 11364                              <1>  %undef __EDI
 11365                              <1>  %idefine __EAX bp-local_off - 4
 11366                              <1>  %idefine __ECX bp-local_off - 8
 11367                              <1>  %idefine __EDX bp-local_off - 12
 11368                              <1>  %idefine __EBX bp-local_off - 16
 11369                              <1> 
 11370                              <1> 
 11371                              <1>  %idefine __ESI bp-local_off - 18
 11372                              <1>  %idefine __EDI bp-local_off - 32
 11373                              <1>  %endif
 11374                              <1> 
 11375                              <1>  %else
 11376                              <1>  %assign __save_args__ %0
 11377                              <1>  %assign __save_all__ 0
 11378                              <1>  %assign i %0
 11379                              <1>  %rep %0
 11380                              <1>  push %1
 11381                              <1>  cat_define %$save_argv ,i,%1
 11382                              <1>  %rotate 1
 11383                              <1>  %assign i i - 1
 11384                              <1>  %endrep
 11385                              <1>  %endif
 11386                              <1> %else
 11387                              <1>  %error "`save' must after `proc'"
 11388                              <1> %endif
 11389 00000A4C B90200                  	mov cx, 2
 11390                                  
 11391                                  .loop_try:
 11392 00000A4F 51                      	push cx
 11393 00000A50 E89DFF                  	call clear_atapi_buffer
 11394                                  	invoke reg_packet,byte,0,cs, atapi_tmp_buffer, 128
 11395                              <1>  %if %0 == 2
 11396                              <1>  push word %1
 11397                              <1>  %assign rargc 1
 11398                              <1>  %else
 11399                              <1>  %rotate -2
 11400                              <1>  %assign argc %0-1
 11401                              <1>  %assign rargc 0
 11402                              <1>  %rep argc
 11403                              <1>  %ifidn %1,byte
 11404                              <1>  push byte %2
 11405                              <1>  %rotate -1
 11406                              <1>  %assign argc argc -1
 11407                              <1>  %assign rargc rargc +1
 11408                              <1>  %elifidn %1,word
 11409                              <1>  push word %2
 11410                              <1>  %rotate -1
 11411                              <1>  %assign argc argc -1
 11412                              <1>  %assign rargc rargc +1
 11413                              <1>  %elifidn %1,dword
 11414                              <1>  push dword %2
 11415                              <1>  %rotate -1
 11416                              <1>  %assign argc argc -1
 11417                              <1>  %assign rargc rargc +2
 11418                              <1>  %else
 11419                              <1>  push word %2
 11420                              <1>  %assign rargc rargc +1
 11421                              <1>  %endif
 11422                              <1>  %rotate -1
 11423                              <1>  %assign argc argc -1
 11424                              <1>  %if argc <=0
 11425                              <1>  %exitrep
 11426                              <1>  %endif
 11427                              <1>  %endrep
 11428                              <2>  %ifidn %1,byte
 11429                              <2>  push byte %2
 11430                              <2>  %rotate -1
 11431                              <2>  %assign argc argc -1
 11432                              <2>  %assign rargc rargc +1
 11433                              <2>  %elifidn %1,word
 11434                              <2>  push word %2
 11435                              <2>  %rotate -1
 11436                              <2>  %assign argc argc -1
 11437                              <2>  %assign rargc rargc +1
 11438                              <2>  %elifidn %1,dword
 11439                              <2>  push dword %2
 11440                              <2>  %rotate -1
 11441                              <2>  %assign argc argc -1
 11442                              <2>  %assign rargc rargc +2
 11443                              <2>  %else
 11444 00000A53 688000              <2>  push word %2
 11445                              <2>  %assign rargc rargc +1
 11446                              <2>  %endif
 11447                              <2>  %rotate -1
 11448                              <2>  %assign argc argc -1
 11449                              <2>  %if argc <=0
 11450                              <2>  %exitrep
 11451                              <2>  %endif
 11452                              <2>  %ifidn %1,byte
 11453                              <2>  push byte %2
 11454                              <2>  %rotate -1
 11455                              <2>  %assign argc argc -1
 11456                              <2>  %assign rargc rargc +1
 11457                              <2>  %elifidn %1,word
 11458                              <2>  push word %2
 11459                              <2>  %rotate -1
 11460                              <2>  %assign argc argc -1
 11461                              <2>  %assign rargc rargc +1
 11462                              <2>  %elifidn %1,dword
 11463                              <2>  push dword %2
 11464                              <2>  %rotate -1
 11465                              <2>  %assign argc argc -1
 11466                              <2>  %assign rargc rargc +2
 11467                              <2>  %else
 11468 00000A56 68[AD00]            <2>  push word %2
 11469                              <2>  %assign rargc rargc +1
 11470                              <2>  %endif
 11471                              <2>  %rotate -1
 11472                              <2>  %assign argc argc -1
 11473                              <2>  %if argc <=0
 11474                              <2>  %exitrep
 11475                              <2>  %endif
 11476                              <2>  %ifidn %1,byte
 11477                              <2>  push byte %2
 11478                              <2>  %rotate -1
 11479                              <2>  %assign argc argc -1
 11480                              <2>  %assign rargc rargc +1
 11481                              <2>  %elifidn %1,word
 11482                              <2>  push word %2
 11483                              <2>  %rotate -1
 11484                              <2>  %assign argc argc -1
 11485                              <2>  %assign rargc rargc +1
 11486                              <2>  %elifidn %1,dword
 11487                              <2>  push dword %2
 11488                              <2>  %rotate -1
 11489                              <2>  %assign argc argc -1
 11490                              <2>  %assign rargc rargc +2
 11491                              <2>  %else
 11492 00000A59 0E                  <2>  push word %2
 11493                              <2>  %assign rargc rargc +1
 11494                              <2>  %endif
 11495                              <2>  %rotate -1
 11496                              <2>  %assign argc argc -1
 11497                              <2>  %if argc <=0
 11498                              <2>  %exitrep
 11499                              <2>  %endif
 11500                              <2>  %ifidn %1,byte
 11501 00000A5A 6A00                <2>  push byte %2
 11502                              <2>  %rotate -1
 11503                              <2>  %assign argc argc -1
 11504                              <2>  %assign rargc rargc +1
 11505                              <2>  %elifidn %1,word
 11506                              <2>  push word %2
 11507                              <2>  %rotate -1
 11508                              <2>  %assign argc argc -1
 11509                              <2>  %assign rargc rargc +1
 11510                              <2>  %elifidn %1,dword
 11511                              <2>  push dword %2
 11512                              <2>  %rotate -1
 11513                              <2>  %assign argc argc -1
 11514                              <2>  %assign rargc rargc +2
 11515                              <2>  %else
 11516                              <2>  push word %2
 11517                              <2>  %assign rargc rargc +1
 11518                              <2>  %endif
 11519                              <2>  %rotate -1
 11520                              <2>  %assign argc argc -1
 11521                              <2>  %if argc <=0
 11522                              <2>  %exitrep
 11523                              <2>  %endif
 11524                              <1>  %rotate 1
 11525                              <1>  %endif
 11526 00000A5C E803FC              <1>  call %1
 11527 00000A5F 83C408              <1>  add sp,(rargc)*2
 11528 00000A62 09C0                    	or ax, ax
 11529 00000A64 750D                    	jnz .try_again
 11530 00000A66 E89FFF                  	call get_atapi_sense
 11531 00000A69 7208                    	jc .try_again
 11532 00000A6B 08C0                    	or al, al
 11533 00000A6D 7504                    	jnz .try_again
 11534 00000A6F 59                      	pop cx
 11535 00000A70 F8                      	clc
 11536 00000A71 EB04                    	jmp short .end
 11537                                  .try_again:
 11538 00000A73 59                      	pop cx
 11539 00000A74 E2D9                    	loop .loop_try
 11540 00000A76 F9                      	stc
 11541                                  .end:
 11542                                  endp
 11543                              <1> %ifnctx proc
 11544                              <1>  %error "expected `proc' before `endp'"
 11545                              <1> %endif
 11546                              <1>  cat_lable %$return,__level__
 11547                              <2> %1%2:
 11548                              <1>  %if __save_all__ ==1
 11549 00000A77 61                  <1>  popa
 11550                              <1>  %elif __save_all__ == 2
 11551                              <1>  popad
 11552                              <1>  %elif __save_args__ > 0
 11553                              <1>  %assign i 1
 11554                              <1>  %rep __save_args__
 11555                              <1>  linecat pop, %$save_argv,i
 11556                              <1>  %assign i i+1
 11557                              <1>  %endrep
 11558                              <1>  %endif
 11559                              <1>  %if __have_frame__ > 0
 11560                              <1>  leave
 11561                              <1>  %endif
 11562                              <1> 
 11563                              <1>  %assign i 0
 11564                              <1>  %rep %$proc_args
 11565                              <1> 
 11566                              <1>  %assign i i+1
 11567                              <1>  %endrep
 11568                              <1> 
 11569                              <1>  %assign i 0
 11570                              <1>  %rep %$local_args
 11571                              <1> 
 11572                              <1>  %assign i i+1
 11573                              <1>  %endrep
 11574 00000A78 C3                  <1>  ret
 11575                              <1>  con_pop
 11576                              <2>  %pop
 11577                              <2>  %assign __level__ __level__ - 1
 11578                              <1>  %assign __return__ __return__ - 1
 11579                                  
 11580                                  %if 1
 11581                                  proc inquiry_atapi
 11582                              <1> GLOBAL %1
 11583                              <1> %1:
 11584                              <1> con_push proc
 11585                              <2>  %assign __lastlevel__ __level__
 11586                              <2>  %assign __level__ __level__ + 1
 11587                              <2>  %if __return__ > 0
 11588                              <2>  %assign con_return 1
 11589                              <2>  %else
 11590                              <2>  %assign con_return 0
 11591                              <2>  %endif
 11592                              <2> 
 11593                              <2>  %if __cont__ > 0
 11594                              <2>  %assign con_cont 1
 11595                              <2>  %else
 11596                              <2>  %assign con_cont 0
 11597                              <2>  %endif
 11598                              <2>  %if __break__ > 0
 11599                              <2>  %assign con_break 1
 11600                              <2>  %else
 11601                              <2>  %assign con_break 0
 11602                              <2>  %endif
 11603                              <2> 
 11604                              <2>  %ifidn %1,proc
 11605                              <2>  %assign con_return 0
 11606                              <2>  %elifidn %1,forcx
 11607                              <2>  %assign con_break 0
 11608                              <2>  %elifidn %1,repeat
 11609                              <2>  %assign con_cont 0
 11610                              <2>  %assign con_break 0
 11611                              <2>  %elifidn %1,while
 11612                              <2>  %assign con_cont 0
 11613                              <2>  %assign con_break 0
 11614                              <2>  %endif
 11615                              <2> 
 11616                              <2>  %if __cndblock__ == 1
 11617                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 11618                              <2>  %endif
 11619                              <2> 
 11620                              <2>  %push %1
 11621                              <2>  %if con_return
 11622                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 11623                              <2>  %endif
 11624                              <2>  %if con_break
 11625                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 11626                              <3> %define %1%2 %3%4
 11627                              <2>  %endif
 11628                              <2>  %if con_cont
 11629                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 11630                              <3> %define %1%2 %3%4
 11631                              <2>  %endif
 11632                              <2> 
 11633                              <2>  %ifidn %1,andblock
 11634                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 11635                              <2>  %elifidn %1,orblock
 11636                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 11637                              <2>  %endif
 11638                              <1> %assign __return__ __return__ + 1
 11639                              <1> %assign __have_frame__ 0
 11640                              <1> %assign %$have_local 0
 11641                              <1> %assign %$have_save 0
 11642                              <1> %assign __save_all__ 0
 11643                              <1> %assign %$local_args 0
 11644                              <1> %assign %$proc_args 0
 11645                              <1> %assign __save_args__ 0
 11646                              <1> %if %0 > 1
 11647                              <1>  %assign args %0 - 1
 11648                              <1>  %assign %$bp_off 4
 11649                              <1>  %assign i 0
 11650                              <1>  %rotate 1
 11651                              <1>  %ifidn %1,withlocal
 11652                              <1>  %assign %$have_local 1
 11653                              <1>  %assign args args -1
 11654                              <1>  %rotate 1
 11655                              <1>  %endif
 11656                              <1>  %assign %$proc_args args
 11657                              <1>  %rep args
 11658                              <1> 
 11659                              <1>  %%inputarg__%1 EQU %$bp_off
 11660                              <1>  %undef .%1
 11661                              <1>  %define .%1 %%inputarg__%1+bp
 11662                              <1>  cat_define %$proc_argv ,i,%1
 11663                              <1>  %assign %$bp_off %$bp_off + 2
 11664                              <1>  %assign i i+1
 11665                              <1>  %rotate 1
 11666                              <1>  %endrep
 11667                              <1>  %if %$have_local==0
 11668                              <1>  enter 0,0
 11669                              <1>  %assign __have_frame__ 1
 11670                              <1>  %endif
 11671                              <1> %endif
 11672                                  ;input: es:di -> atapi_devinfo
 11673                                  ;return: cf =0 success, al = device type, 
 11674                                  ;        cf =1 fail
 11675                                  ;	save si, di, cx
 11676 00000A79 E874FF                  	call clear_atapi_buffer
 11677 00000A7C C606[9D00]12            	mov byte [atapi_cmd_buffer], 0x12
 11678 00000A81 C606[A100]80            	mov byte [atapi_cmd_buffer+4], 128
 11679                                  	invoke reg_packet,byte,0,cs, atapi_tmp_buffer, 128
 11680                              <1>  %if %0 == 2
 11681                              <1>  push word %1
 11682                              <1>  %assign rargc 1
 11683                              <1>  %else
 11684                              <1>  %rotate -2
 11685                              <1>  %assign argc %0-1
 11686                              <1>  %assign rargc 0
 11687                              <1>  %rep argc
 11688                              <1>  %ifidn %1,byte
 11689                              <1>  push byte %2
 11690                              <1>  %rotate -1
 11691                              <1>  %assign argc argc -1
 11692                              <1>  %assign rargc rargc +1
 11693                              <1>  %elifidn %1,word
 11694                              <1>  push word %2
 11695                              <1>  %rotate -1
 11696                              <1>  %assign argc argc -1
 11697                              <1>  %assign rargc rargc +1
 11698                              <1>  %elifidn %1,dword
 11699                              <1>  push dword %2
 11700                              <1>  %rotate -1
 11701                              <1>  %assign argc argc -1
 11702                              <1>  %assign rargc rargc +2
 11703                              <1>  %else
 11704                              <1>  push word %2
 11705                              <1>  %assign rargc rargc +1
 11706                              <1>  %endif
 11707                              <1>  %rotate -1
 11708                              <1>  %assign argc argc -1
 11709                              <1>  %if argc <=0
 11710                              <1>  %exitrep
 11711                              <1>  %endif
 11712                              <1>  %endrep
 11713                              <2>  %ifidn %1,byte
 11714                              <2>  push byte %2
 11715                              <2>  %rotate -1
 11716                              <2>  %assign argc argc -1
 11717                              <2>  %assign rargc rargc +1
 11718                              <2>  %elifidn %1,word
 11719                              <2>  push word %2
 11720                              <2>  %rotate -1
 11721                              <2>  %assign argc argc -1
 11722                              <2>  %assign rargc rargc +1
 11723                              <2>  %elifidn %1,dword
 11724                              <2>  push dword %2
 11725                              <2>  %rotate -1
 11726                              <2>  %assign argc argc -1
 11727                              <2>  %assign rargc rargc +2
 11728                              <2>  %else
 11729 00000A86 688000              <2>  push word %2
 11730                              <2>  %assign rargc rargc +1
 11731                              <2>  %endif
 11732                              <2>  %rotate -1
 11733                              <2>  %assign argc argc -1
 11734                              <2>  %if argc <=0
 11735                              <2>  %exitrep
 11736                              <2>  %endif
 11737                              <2>  %ifidn %1,byte
 11738                              <2>  push byte %2
 11739                              <2>  %rotate -1
 11740                              <2>  %assign argc argc -1
 11741                              <2>  %assign rargc rargc +1
 11742                              <2>  %elifidn %1,word
 11743                              <2>  push word %2
 11744                              <2>  %rotate -1
 11745                              <2>  %assign argc argc -1
 11746                              <2>  %assign rargc rargc +1
 11747                              <2>  %elifidn %1,dword
 11748                              <2>  push dword %2
 11749                              <2>  %rotate -1
 11750                              <2>  %assign argc argc -1
 11751                              <2>  %assign rargc rargc +2
 11752                              <2>  %else
 11753 00000A89 68[AD00]            <2>  push word %2
 11754                              <2>  %assign rargc rargc +1
 11755                              <2>  %endif
 11756                              <2>  %rotate -1
 11757                              <2>  %assign argc argc -1
 11758                              <2>  %if argc <=0
 11759                              <2>  %exitrep
 11760                              <2>  %endif
 11761                              <2>  %ifidn %1,byte
 11762                              <2>  push byte %2
 11763                              <2>  %rotate -1
 11764                              <2>  %assign argc argc -1
 11765                              <2>  %assign rargc rargc +1
 11766                              <2>  %elifidn %1,word
 11767                              <2>  push word %2
 11768                              <2>  %rotate -1
 11769                              <2>  %assign argc argc -1
 11770                              <2>  %assign rargc rargc +1
 11771                              <2>  %elifidn %1,dword
 11772                              <2>  push dword %2
 11773                              <2>  %rotate -1
 11774                              <2>  %assign argc argc -1
 11775                              <2>  %assign rargc rargc +2
 11776                              <2>  %else
 11777 00000A8C 0E                  <2>  push word %2
 11778                              <2>  %assign rargc rargc +1
 11779                              <2>  %endif
 11780                              <2>  %rotate -1
 11781                              <2>  %assign argc argc -1
 11782                              <2>  %if argc <=0
 11783                              <2>  %exitrep
 11784                              <2>  %endif
 11785                              <2>  %ifidn %1,byte
 11786 00000A8D 6A00                <2>  push byte %2
 11787                              <2>  %rotate -1
 11788                              <2>  %assign argc argc -1
 11789                              <2>  %assign rargc rargc +1
 11790                              <2>  %elifidn %1,word
 11791                              <2>  push word %2
 11792                              <2>  %rotate -1
 11793                              <2>  %assign argc argc -1
 11794                              <2>  %assign rargc rargc +1
 11795                              <2>  %elifidn %1,dword
 11796                              <2>  push dword %2
 11797                              <2>  %rotate -1
 11798                              <2>  %assign argc argc -1
 11799                              <2>  %assign rargc rargc +2
 11800                              <2>  %else
 11801                              <2>  push word %2
 11802                              <2>  %assign rargc rargc +1
 11803                              <2>  %endif
 11804                              <2>  %rotate -1
 11805                              <2>  %assign argc argc -1
 11806                              <2>  %if argc <=0
 11807                              <2>  %exitrep
 11808                              <2>  %endif
 11809                              <1>  %rotate 1
 11810                              <1>  %endif
 11811 00000A8F E8D0FB              <1>  call %1
 11812 00000A92 83C408              <1>  add sp,(rargc)*2
 11813 00000A95 09C0                    	or ax, ax
 11814 00000A97 750B                    	jnz .fail
 11815                                  
 11816 00000A99 A0[AD00]                	mov al, [atapi_tmp_buffer]
 11817 00000A9C A8E0                    	test al, 0xe0
 11818 00000A9E 7504                    	jnz .fail
 11819                                  
 11820 00000AA0 241F                    	and al, 0x1f
 11821                                  
 11822                                  %if 0
 11823                                  	mov [es:di + struc_atapi_devinfo.dev_type], al
 11824                                  
 11825                                  	mov ah, [atapi_tmp_buffer+7]
 11826                                  	mov [es:di + struc_atapi_devinfo.dev_flags], ah
 11827                                  
 11828                                  	add di, struc_atapi_devinfo.vender_id
 11829                                  	mov si, atapi_tmp_buffer + 8
 11830                                  	mov cx, 24
 11831                                  	cld
 11832                                  	rep movsb
 11833                                  %endif
 11834 00000AA2 F8                      	clc
 11835                                  ;	jmp short .end
 11836                                  	return
 11837                              <1>  %if %0 > 0
 11838                              <1>  %assign __near__ 0
 11839                              <1>  %assign argc %0
 11840                              <1>  %ifidn %1,near
 11841                              <1>  %assign __near__ 1
 11842                              <1>  %assign argc argc-1
 11843                              <1>  %rotate 1
 11844                              <1>  %endif
 11845                              <1>  %if argc > 0
 11846                              <1>  %ifidn %1,if
 11847                              <1> 
 11848                              <1>  %rotate 1
 11849                              <1>  %rep argc-2
 11850                              <1>  %1
 11851                              <1>  %rotate 1
 11852                              <1>  %endrep
 11853                              <1>  %if __near__ == 0
 11854                              <1>  cat_jc %1,%$return,__level__
 11855                              <1>  %else
 11856                              <1>  cat_jc_near %1,%$return,__level__
 11857                              <1>  %endif
 11858                              <1>  %else
 11859                              <1>  %error "expect `if' after `return'"
 11860                              <1>  %endif
 11861                              <1>  %else
 11862                              <1>  %if __near__ == 0
 11863                              <1>  cat_jmp %$return,__level__
 11864                              <1>  %else
 11865                              <1>  cat_jmp_near %$return,__level__
 11866                              <1>  %endif
 11867                              <1>  %endif
 11868                              <1>  %else
 11869                              <1>  %if __have_frame__ == 0 && __save_all__ == 0 && __save_args__ == 0
 11870 00000AA3 C3                  <1>  ret
 11871                              <1>  %else
 11872                              <1>  cat_jmp %$return,__level__
 11873                              <1>  %endif
 11874                              <1>  %endif
 11875                                  .fail:
 11876 00000AA4 F9                      	stc
 11877                                  .end:
 11878                                  endp
 11879                              <1> %ifnctx proc
 11880                              <1>  %error "expected `proc' before `endp'"
 11881                              <1> %endif
 11882                              <1>  cat_lable %$return,__level__
 11883                              <2> %1%2:
 11884                              <1>  %if __save_all__ ==1
 11885                              <1>  popa
 11886                              <1>  %elif __save_all__ == 2
 11887                              <1>  popad
 11888                              <1>  %elif __save_args__ > 0
 11889                              <1>  %assign i 1
 11890                              <1>  %rep __save_args__
 11891                              <1>  linecat pop, %$save_argv,i
 11892                              <1>  %assign i i+1
 11893                              <1>  %endrep
 11894                              <1>  %endif
 11895                              <1>  %if __have_frame__ > 0
 11896                              <1>  leave
 11897                              <1>  %endif
 11898                              <1> 
 11899                              <1>  %assign i 0
 11900                              <1>  %rep %$proc_args
 11901                              <1> 
 11902                              <1>  %assign i i+1
 11903                              <1>  %endrep
 11904                              <1> 
 11905                              <1>  %assign i 0
 11906                              <1>  %rep %$local_args
 11907                              <1> 
 11908                              <1>  %assign i i+1
 11909                              <1>  %endrep
 11910 00000AA5 C3                  <1>  ret
 11911                              <1>  con_pop
 11912                              <2>  %pop
 11913                              <2>  %assign __level__ __level__ - 1
 11914                              <1>  %assign __return__ __return__ - 1
 11915                                  
 11916                                  proc check_atapi_cdrom
 11917                              <1> GLOBAL %1
 11918                              <1> %1:
 11919                              <1> con_push proc
 11920                              <2>  %assign __lastlevel__ __level__
 11921                              <2>  %assign __level__ __level__ + 1
 11922                              <2>  %if __return__ > 0
 11923                              <2>  %assign con_return 1
 11924                              <2>  %else
 11925                              <2>  %assign con_return 0
 11926                              <2>  %endif
 11927                              <2> 
 11928                              <2>  %if __cont__ > 0
 11929                              <2>  %assign con_cont 1
 11930                              <2>  %else
 11931                              <2>  %assign con_cont 0
 11932                              <2>  %endif
 11933                              <2>  %if __break__ > 0
 11934                              <2>  %assign con_break 1
 11935                              <2>  %else
 11936                              <2>  %assign con_break 0
 11937                              <2>  %endif
 11938                              <2> 
 11939                              <2>  %ifidn %1,proc
 11940                              <2>  %assign con_return 0
 11941                              <2>  %elifidn %1,forcx
 11942                              <2>  %assign con_break 0
 11943                              <2>  %elifidn %1,repeat
 11944                              <2>  %assign con_cont 0
 11945                              <2>  %assign con_break 0
 11946                              <2>  %elifidn %1,while
 11947                              <2>  %assign con_cont 0
 11948                              <2>  %assign con_break 0
 11949                              <2>  %endif
 11950                              <2> 
 11951                              <2>  %if __cndblock__ == 1
 11952                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 11953                              <2>  %endif
 11954                              <2> 
 11955                              <2>  %push %1
 11956                              <2>  %if con_return
 11957                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 11958                              <2>  %endif
 11959                              <2>  %if con_break
 11960                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 11961                              <3> %define %1%2 %3%4
 11962                              <2>  %endif
 11963                              <2>  %if con_cont
 11964                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 11965                              <3> %define %1%2 %3%4
 11966                              <2>  %endif
 11967                              <2> 
 11968                              <2>  %ifidn %1,andblock
 11969                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 11970                              <2>  %elifidn %1,orblock
 11971                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 11972                              <2>  %endif
 11973                              <1> %assign __return__ __return__ + 1
 11974                              <1> %assign __have_frame__ 0
 11975                              <1> %assign %$have_local 0
 11976                              <1> %assign %$have_save 0
 11977                              <1> %assign __save_all__ 0
 11978                              <1> %assign %$local_args 0
 11979                              <1> %assign %$proc_args 0
 11980                              <1> %assign __save_args__ 0
 11981                              <1> %if %0 > 1
 11982                              <1>  %assign args %0 - 1
 11983                              <1>  %assign %$bp_off 4
 11984                              <1>  %assign i 0
 11985                              <1>  %rotate 1
 11986                              <1>  %ifidn %1,withlocal
 11987                              <1>  %assign %$have_local 1
 11988                              <1>  %assign args args -1
 11989                              <1>  %rotate 1
 11990                              <1>  %endif
 11991                              <1>  %assign %$proc_args args
 11992                              <1>  %rep args
 11993                              <1> 
 11994                              <1>  %%inputarg__%1 EQU %$bp_off
 11995                              <1>  %undef .%1
 11996                              <1>  %define .%1 %%inputarg__%1+bp
 11997                              <1>  cat_define %$proc_argv ,i,%1
 11998                              <1>  %assign %$bp_off %$bp_off + 2
 11999                              <1>  %assign i i+1
 12000                              <1>  %rotate 1
 12001                              <1>  %endrep
 12002                              <1>  %if %$have_local==0
 12003                              <1>  enter 0,0
 12004                              <1>  %assign __have_frame__ 1
 12005                              <1>  %endif
 12006                              <1> %endif
 12007                                  ;return: cf =0 is cdrom, cf =1 not cdrom
 12008                                  	save all
 12009                              <1> %ifctx proc
 12010                              <1>  %if %$have_local == 1
 12011                              <1>  %error "`save' must after `local'"
 12012                              <1>  %endif
 12013                              <1> 
 12014                              <1>  %ifidn all,%1
 12015                              <1>  %assign __save_all__ 1
 12016                              <1>  %if %0 > 1
 12017                              <1>  %ifidn frame,%2
 12018                              <1>  %if __have_frame__ == 0
 12019                              <1>  enter 0,0
 12020                              <1>  %assign __have_frame__ 1
 12021                              <1>  %assign local_off 0
 12022                              <1>  %endif
 12023                              <1>  %endif
 12024                              <1>  %endif
 12025 00000AA6 60                  <1>  pusha
 12026                              <1>  %if __have_frame__ == 1
 12027                              <1>  %undef __AX
 12028                              <1>  %undef __BX
 12029                              <1>  %undef __CX
 12030                              <1>  %undef __DX
 12031                              <1>  %undef __SI
 12032                              <1>  %undef __DI
 12033                              <1>  %idefine __AX bp-local_off - 2
 12034                              <1>  %idefine __CX bp-local_off - 4
 12035                              <1>  %idefine __DX bp-local_off - 6
 12036                              <1>  %idefine __BX bp-local_off - 8
 12037                              <1> 
 12038                              <1> 
 12039                              <1>  %idefine __SI bp-local_off - 14
 12040                              <1>  %idefine __DI bp-local_off - 16
 12041                              <1>  %endif
 12042                              <1>  %elifidn alld,%1
 12043                              <1>  %assign __save_all__ 2
 12044                              <1>  %if %0 > 1
 12045                              <1>  %ifidn frame,%2
 12046                              <1>  %if __have_frame__ == 0
 12047                              <1>  enter 0,0
 12048                              <1>  %assign __have_frame__ 1
 12049                              <1>  %assign local_off 0
 12050                              <1>  %endif
 12051                              <1>  %endif
 12052                              <1>  %endif
 12053                              <1>  pushad
 12054                              <1>  %if __have_frame__ == 1
 12055                              <1>  %undef __EAX
 12056                              <1>  %undef __EBX
 12057                              <1>  %undef __ECX
 12058                              <1>  %undef __EDX
 12059                              <1>  %undef __ESI
 12060                              <1>  %undef __EDI
 12061                              <1>  %idefine __EAX bp-local_off - 4
 12062                              <1>  %idefine __ECX bp-local_off - 8
 12063                              <1>  %idefine __EDX bp-local_off - 12
 12064                              <1>  %idefine __EBX bp-local_off - 16
 12065                              <1> 
 12066                              <1> 
 12067                              <1>  %idefine __ESI bp-local_off - 18
 12068                              <1>  %idefine __EDI bp-local_off - 32
 12069                              <1>  %endif
 12070                              <1> 
 12071                              <1>  %else
 12072                              <1>  %assign __save_args__ %0
 12073                              <1>  %assign __save_all__ 0
 12074                              <1>  %assign i %0
 12075                              <1>  %rep %0
 12076                              <1>  push %1
 12077                              <1>  cat_define %$save_argv ,i,%1
 12078                              <1>  %rotate 1
 12079                              <1>  %assign i i - 1
 12080                              <1>  %endrep
 12081                              <1>  %endif
 12082                              <1> %else
 12083                              <1>  %error "`save' must after `proc'"
 12084                              <1> %endif
 12085                                  ;	push es
 12086                                  ;	push cs
 12087                                  ;	pop es
 12088                                  ;	mov di, atapi_devinfo
 12089 00000AA7 E8CFFF                  	call inquiry_atapi
 12090 00000AAA 720A                    	jc .end
 12091 00000AAC F8                      	clc
 12092 00000AAD 3C05                    	cmp al, ATATYPE_CD
 12093 00000AAF 7405                    	je .end
 12094 00000AB1 3C04                    	cmp al, ATATYPE_CDR
 12095 00000AB3 7401                    	je .end
 12096 00000AB5 F9                      	stc
 12097                                  .end:
 12098                                  ;	pop es
 12099                                  endp
 12100                              <1> %ifnctx proc
 12101                              <1>  %error "expected `proc' before `endp'"
 12102                              <1> %endif
 12103                              <1>  cat_lable %$return,__level__
 12104                              <2> %1%2:
 12105                              <1>  %if __save_all__ ==1
 12106 00000AB6 61                  <1>  popa
 12107                              <1>  %elif __save_all__ == 2
 12108                              <1>  popad
 12109                              <1>  %elif __save_args__ > 0
 12110                              <1>  %assign i 1
 12111                              <1>  %rep __save_args__
 12112                              <1>  linecat pop, %$save_argv,i
 12113                              <1>  %assign i i+1
 12114                              <1>  %endrep
 12115                              <1>  %endif
 12116                              <1>  %if __have_frame__ > 0
 12117                              <1>  leave
 12118                              <1>  %endif
 12119                              <1> 
 12120                              <1>  %assign i 0
 12121                              <1>  %rep %$proc_args
 12122                              <1> 
 12123                              <1>  %assign i i+1
 12124                              <1>  %endrep
 12125                              <1> 
 12126                              <1>  %assign i 0
 12127                              <1>  %rep %$local_args
 12128                              <1> 
 12129                              <1>  %assign i i+1
 12130                              <1>  %endrep
 12131 00000AB7 C3                  <1>  ret
 12132                              <1>  con_pop
 12133                              <2>  %pop
 12134                              <2>  %assign __level__ __level__ - 1
 12135                              <1>  %assign __return__ __return__ - 1
 12136                                  %endif
 12137                                  
 12138                                  
 12139                                  proc get_atapi_base_io
 12140                              <1> GLOBAL %1
 12141                              <1> %1:
 12142                              <1> con_push proc
 12143                              <2>  %assign __lastlevel__ __level__
 12144                              <2>  %assign __level__ __level__ + 1
 12145                              <2>  %if __return__ > 0
 12146                              <2>  %assign con_return 1
 12147                              <2>  %else
 12148                              <2>  %assign con_return 0
 12149                              <2>  %endif
 12150                              <2> 
 12151                              <2>  %if __cont__ > 0
 12152                              <2>  %assign con_cont 1
 12153                              <2>  %else
 12154                              <2>  %assign con_cont 0
 12155                              <2>  %endif
 12156                              <2>  %if __break__ > 0
 12157                              <2>  %assign con_break 1
 12158                              <2>  %else
 12159                              <2>  %assign con_break 0
 12160                              <2>  %endif
 12161                              <2> 
 12162                              <2>  %ifidn %1,proc
 12163                              <2>  %assign con_return 0
 12164                              <2>  %elifidn %1,forcx
 12165                              <2>  %assign con_break 0
 12166                              <2>  %elifidn %1,repeat
 12167                              <2>  %assign con_cont 0
 12168                              <2>  %assign con_break 0
 12169                              <2>  %elifidn %1,while
 12170                              <2>  %assign con_cont 0
 12171                              <2>  %assign con_break 0
 12172                              <2>  %endif
 12173                              <2> 
 12174                              <2>  %if __cndblock__ == 1
 12175                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 12176                              <2>  %endif
 12177                              <2> 
 12178                              <2>  %push %1
 12179                              <2>  %if con_return
 12180                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 12181                              <2>  %endif
 12182                              <2>  %if con_break
 12183                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 12184                              <3> %define %1%2 %3%4
 12185                              <2>  %endif
 12186                              <2>  %if con_cont
 12187                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 12188                              <3> %define %1%2 %3%4
 12189                              <2>  %endif
 12190                              <2> 
 12191                              <2>  %ifidn %1,andblock
 12192                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 12193                              <2>  %elifidn %1,orblock
 12194                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 12195                              <2>  %endif
 12196                              <1> %assign __return__ __return__ + 1
 12197                              <1> %assign __have_frame__ 0
 12198                              <1> %assign %$have_local 0
 12199                              <1> %assign %$have_save 0
 12200                              <1> %assign __save_all__ 0
 12201                              <1> %assign %$local_args 0
 12202                              <1> %assign %$proc_args 0
 12203                              <1> %assign __save_args__ 0
 12204                              <1> %if %0 > 1
 12205                              <1>  %assign args %0 - 1
 12206                              <1>  %assign %$bp_off 4
 12207                              <1>  %assign i 0
 12208                              <1>  %rotate 1
 12209                              <1>  %ifidn %1,withlocal
 12210                              <1>  %assign %$have_local 1
 12211                              <1>  %assign args args -1
 12212                              <1>  %rotate 1
 12213                              <1>  %endif
 12214                              <1>  %assign %$proc_args args
 12215                              <1>  %rep args
 12216                              <1> 
 12217                              <1>  %%inputarg__%1 EQU %$bp_off
 12218                              <1>  %undef .%1
 12219                              <1>  %define .%1 %%inputarg__%1+bp
 12220                              <1>  cat_define %$proc_argv ,i,%1
 12221                              <1>  %assign %$bp_off %$bp_off + 2
 12222                              <1>  %assign i i+1
 12223                              <1>  %rotate 1
 12224                              <1>  %endrep
 12225                              <1>  %if %$have_local==0
 12226                              <1>  enter 0,0
 12227                              <1>  %assign __have_frame__ 1
 12228                              <1>  %endif
 12229                              <1> %endif
 12230                                  ;input: ax = dev 
 12231                                  ;return: bx = base io 1, dx = base io 2, cx = device number
 12232                                  	save si, ax
 12233                              <1> %ifctx proc
 12234                              <1>  %if %$have_local == 1
 12235                              <1>  %error "`save' must after `local'"
 12236                              <1>  %endif
 12237                              <1> 
 12238                              <1>  %ifidn all,%1
 12239                              <1>  %assign __save_all__ 1
 12240                              <1>  %if %0 > 1
 12241                              <1>  %ifidn frame,%2
 12242                              <1>  %if __have_frame__ == 0
 12243                              <1>  enter 0,0
 12244                              <1>  %assign __have_frame__ 1
 12245                              <1>  %assign local_off 0
 12246                              <1>  %endif
 12247                              <1>  %endif
 12248                              <1>  %endif
 12249                              <1>  pusha
 12250                              <1>  %if __have_frame__ == 1
 12251                              <1>  %undef __AX
 12252                              <1>  %undef __BX
 12253                              <1>  %undef __CX
 12254                              <1>  %undef __DX
 12255                              <1>  %undef __SI
 12256                              <1>  %undef __DI
 12257                              <1>  %idefine __AX bp-local_off - 2
 12258                              <1>  %idefine __CX bp-local_off - 4
 12259                              <1>  %idefine __DX bp-local_off - 6
 12260                              <1>  %idefine __BX bp-local_off - 8
 12261                              <1> 
 12262                              <1> 
 12263                              <1>  %idefine __SI bp-local_off - 14
 12264                              <1>  %idefine __DI bp-local_off - 16
 12265                              <1>  %endif
 12266                              <1>  %elifidn alld,%1
 12267                              <1>  %assign __save_all__ 2
 12268                              <1>  %if %0 > 1
 12269                              <1>  %ifidn frame,%2
 12270                              <1>  %if __have_frame__ == 0
 12271                              <1>  enter 0,0
 12272                              <1>  %assign __have_frame__ 1
 12273                              <1>  %assign local_off 0
 12274                              <1>  %endif
 12275                              <1>  %endif
 12276                              <1>  %endif
 12277                              <1>  pushad
 12278                              <1>  %if __have_frame__ == 1
 12279                              <1>  %undef __EAX
 12280                              <1>  %undef __EBX
 12281                              <1>  %undef __ECX
 12282                              <1>  %undef __EDX
 12283                              <1>  %undef __ESI
 12284                              <1>  %undef __EDI
 12285                              <1>  %idefine __EAX bp-local_off - 4
 12286                              <1>  %idefine __ECX bp-local_off - 8
 12287                              <1>  %idefine __EDX bp-local_off - 12
 12288                              <1>  %idefine __EBX bp-local_off - 16
 12289                              <1> 
 12290                              <1> 
 12291                              <1>  %idefine __ESI bp-local_off - 18
 12292                              <1>  %idefine __EDI bp-local_off - 32
 12293                              <1>  %endif
 12294                              <1> 
 12295                              <1>  %else
 12296                              <1>  %assign __save_args__ %0
 12297                              <1>  %assign __save_all__ 0
 12298                              <1>  %assign i %0
 12299                              <1>  %rep %0
 12300                              <1>  push %1
 12301                              <1>  cat_define %$save_argv ,i,%1
 12302                              <1>  %rotate 1
 12303                              <1>  %assign i i - 1
 12304                              <1>  %endrep
 12305 00000AB8 56                  <2>  push %1
 12306                              <2>  cat_define %$save_argv ,i,%1
 12307                              <3> %define %1%2 %3
 12308                              <2>  %rotate 1
 12309                              <2>  %assign i i - 1
 12310 00000AB9 50                  <2>  push %1
 12311                              <2>  cat_define %$save_argv ,i,%1
 12312                              <3> %define %1%2 %3
 12313                              <2>  %rotate 1
 12314                              <2>  %assign i i - 1
 12315                              <1>  %endif
 12316                              <1> %else
 12317                              <1>  %error "`save' must after `proc'"
 12318                              <1> %endif
 12319 00000ABA C1E002                  	shl ax, byte 2
 12320 00000ABD BE[0900]                	mov si, atapi_dev_base
 12321 00000AC0 01C6                    	add si, ax
 12322 00000AC2 2E8B1C                  	mov bx, [cs:si]
 12323 00000AC5 2E8B4C02                	mov cx, [cs:si+2]
 12324 00000AC9 2E8B5702                	mov dx, [cs:bx+2]
 12325 00000ACD 2E8B1F                  	mov bx, [cs:bx]
 12326                                  endp
 12327                              <1> %ifnctx proc
 12328                              <1>  %error "expected `proc' before `endp'"
 12329                              <1> %endif
 12330                              <1>  cat_lable %$return,__level__
 12331                              <2> %1%2:
 12332                              <1>  %if __save_all__ ==1
 12333                              <1>  popa
 12334                              <1>  %elif __save_all__ == 2
 12335                              <1>  popad
 12336                              <1>  %elif __save_args__ > 0
 12337                              <1>  %assign i 1
 12338                              <1>  %rep __save_args__
 12339                              <1>  linecat pop, %$save_argv,i
 12340                              <1>  %assign i i+1
 12341                              <1>  %endrep
 12342                              <2>  linecat pop, %$save_argv,i
 12343 00000AD0 58                  <3>  %1 %2%3
 12344                              <2>  %assign i i+1
 12345                              <2>  linecat pop, %$save_argv,i
 12346 00000AD1 5E                  <3>  %1 %2%3
 12347                              <2>  %assign i i+1
 12348                              <1>  %endif
 12349                              <1>  %if __have_frame__ > 0
 12350                              <1>  leave
 12351                              <1>  %endif
 12352                              <1> 
 12353                              <1>  %assign i 0
 12354                              <1>  %rep %$proc_args
 12355                              <1> 
 12356                              <1>  %assign i i+1
 12357                              <1>  %endrep
 12358                              <1> 
 12359                              <1>  %assign i 0
 12360                              <1>  %rep %$local_args
 12361                              <1> 
 12362                              <1>  %assign i i+1
 12363                              <1>  %endrep
 12364 00000AD2 C3                  <1>  ret
 12365                              <1>  con_pop
 12366                              <2>  %pop
 12367                              <2>  %assign __level__ __level__ - 1
 12368                              <1>  %assign __return__ __return__ - 1
 12369                                  
 12370                                  proc read_atapi
 12371                              <1> GLOBAL %1
 12372                              <1> %1:
 12373                              <1> con_push proc
 12374                              <2>  %assign __lastlevel__ __level__
 12375                              <2>  %assign __level__ __level__ + 1
 12376                              <2>  %if __return__ > 0
 12377                              <2>  %assign con_return 1
 12378                              <2>  %else
 12379                              <2>  %assign con_return 0
 12380                              <2>  %endif
 12381                              <2> 
 12382                              <2>  %if __cont__ > 0
 12383                              <2>  %assign con_cont 1
 12384                              <2>  %else
 12385                              <2>  %assign con_cont 0
 12386                              <2>  %endif
 12387                              <2>  %if __break__ > 0
 12388                              <2>  %assign con_break 1
 12389                              <2>  %else
 12390                              <2>  %assign con_break 0
 12391                              <2>  %endif
 12392                              <2> 
 12393                              <2>  %ifidn %1,proc
 12394                              <2>  %assign con_return 0
 12395                              <2>  %elifidn %1,forcx
 12396                              <2>  %assign con_break 0
 12397                              <2>  %elifidn %1,repeat
 12398                              <2>  %assign con_cont 0
 12399                              <2>  %assign con_break 0
 12400                              <2>  %elifidn %1,while
 12401                              <2>  %assign con_cont 0
 12402                              <2>  %assign con_break 0
 12403                              <2>  %endif
 12404                              <2> 
 12405                              <2>  %if __cndblock__ == 1
 12406                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 12407                              <2>  %endif
 12408                              <2> 
 12409                              <2>  %push %1
 12410                              <2>  %if con_return
 12411                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 12412                              <2>  %endif
 12413                              <2>  %if con_break
 12414                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 12415                              <3> %define %1%2 %3%4
 12416                              <2>  %endif
 12417                              <2>  %if con_cont
 12418                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 12419                              <3> %define %1%2 %3%4
 12420                              <2>  %endif
 12421                              <2> 
 12422                              <2>  %ifidn %1,andblock
 12423                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 12424                              <2>  %elifidn %1,orblock
 12425                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 12426                              <2>  %endif
 12427                              <1> %assign __return__ __return__ + 1
 12428                              <1> %assign __have_frame__ 0
 12429                              <1> %assign %$have_local 0
 12430                              <1> %assign %$have_save 0
 12431                              <1> %assign __save_all__ 0
 12432                              <1> %assign %$local_args 0
 12433                              <1> %assign %$proc_args 0
 12434                              <1> %assign __save_args__ 0
 12435                              <1> %if %0 > 1
 12436                              <1>  %assign args %0 - 1
 12437                              <1>  %assign %$bp_off 4
 12438                              <1>  %assign i 0
 12439                              <1>  %rotate 1
 12440                              <1>  %ifidn %1,withlocal
 12441                              <1>  %assign %$have_local 1
 12442                              <1>  %assign args args -1
 12443                              <1>  %rotate 1
 12444                              <1>  %endif
 12445                              <1>  %assign %$proc_args args
 12446                              <1>  %rep args
 12447                              <1> 
 12448                              <1>  %%inputarg__%1 EQU %$bp_off
 12449                              <1>  %undef .%1
 12450                              <1>  %define .%1 %%inputarg__%1+bp
 12451                              <1>  cat_define %$proc_argv ,i,%1
 12452                              <1>  %assign %$bp_off %$bp_off + 2
 12453                              <1>  %assign i i+1
 12454                              <1>  %rotate 1
 12455                              <1>  %endrep
 12456                              <1>  %if %$have_local==0
 12457                              <1>  enter 0,0
 12458                              <1>  %assign __have_frame__ 1
 12459                              <1>  %endif
 12460                              <1> %endif
 12461                                  ;input: es:di -> buffer, cx = sector count, edx = lba address
 12462                                  ;return: cf =0 success, cx = number of bytes actually read
 12463                                  	save all
 12464                              <1> %ifctx proc
 12465                              <1>  %if %$have_local == 1
 12466                              <1>  %error "`save' must after `local'"
 12467                              <1>  %endif
 12468                              <1> 
 12469                              <1>  %ifidn all,%1
 12470                              <1>  %assign __save_all__ 1
 12471                              <1>  %if %0 > 1
 12472                              <1>  %ifidn frame,%2
 12473                              <1>  %if __have_frame__ == 0
 12474                              <1>  enter 0,0
 12475                              <1>  %assign __have_frame__ 1
 12476                              <1>  %assign local_off 0
 12477                              <1>  %endif
 12478                              <1>  %endif
 12479                              <1>  %endif
 12480 00000AD3 60                  <1>  pusha
 12481                              <1>  %if __have_frame__ == 1
 12482                              <1>  %undef __AX
 12483                              <1>  %undef __BX
 12484                              <1>  %undef __CX
 12485                              <1>  %undef __DX
 12486                              <1>  %undef __SI
 12487                              <1>  %undef __DI
 12488                              <1>  %idefine __AX bp-local_off - 2
 12489                              <1>  %idefine __CX bp-local_off - 4
 12490                              <1>  %idefine __DX bp-local_off - 6
 12491                              <1>  %idefine __BX bp-local_off - 8
 12492                              <1> 
 12493                              <1> 
 12494                              <1>  %idefine __SI bp-local_off - 14
 12495                              <1>  %idefine __DI bp-local_off - 16
 12496                              <1>  %endif
 12497                              <1>  %elifidn alld,%1
 12498                              <1>  %assign __save_all__ 2
 12499                              <1>  %if %0 > 1
 12500                              <1>  %ifidn frame,%2
 12501                              <1>  %if __have_frame__ == 0
 12502                              <1>  enter 0,0
 12503                              <1>  %assign __have_frame__ 1
 12504                              <1>  %assign local_off 0
 12505                              <1>  %endif
 12506                              <1>  %endif
 12507                              <1>  %endif
 12508                              <1>  pushad
 12509                              <1>  %if __have_frame__ == 1
 12510                              <1>  %undef __EAX
 12511                              <1>  %undef __EBX
 12512                              <1>  %undef __ECX
 12513                              <1>  %undef __EDX
 12514                              <1>  %undef __ESI
 12515                              <1>  %undef __EDI
 12516                              <1>  %idefine __EAX bp-local_off - 4
 12517                              <1>  %idefine __ECX bp-local_off - 8
 12518                              <1>  %idefine __EDX bp-local_off - 12
 12519                              <1>  %idefine __EBX bp-local_off - 16
 12520                              <1> 
 12521                              <1> 
 12522                              <1>  %idefine __ESI bp-local_off - 18
 12523                              <1>  %idefine __EDI bp-local_off - 32
 12524                              <1>  %endif
 12525                              <1> 
 12526                              <1>  %else
 12527                              <1>  %assign __save_args__ %0
 12528                              <1>  %assign __save_all__ 0
 12529                              <1>  %assign i %0
 12530                              <1>  %rep %0
 12531                              <1>  push %1
 12532                              <1>  cat_define %$save_argv ,i,%1
 12533                              <1>  %rotate 1
 12534                              <1>  %assign i i - 1
 12535                              <1>  %endrep
 12536                              <1>  %endif
 12537                              <1> %else
 12538                              <1>  %error "`save' must after `proc'"
 12539                              <1> %endif
 12540 00000AD4 09C9                    	or cx, cx
 12541 00000AD6 743E                    	jz .no_data
 12542                                  
 12543                                  .loop_read:
 12544 00000AD8 51                      	push cx
 12545 00000AD9 6652                    	push edx
 12546                                  
 12547 00000ADB E812FF                  	call clear_atapi_buffer
 12548 00000ADE C606[9D00]28            	mov byte [atapi_cmd_buffer], 0x28
 12549                                  
 12550 00000AE3 660FCA                  	bswap edx
 12551 00000AE6 668916[9F00]            	mov [atapi_cmd_buffer+2], edx
 12552 00000AEB C606[A500]01            	mov byte [atapi_cmd_buffer+8], 1
 12553                                  	invoke reg_packet,byte, 0, es, di, REG_ATAPI_MAX_BYTES
 12554                              <1>  %if %0 == 2
 12555                              <1>  push word %1
 12556                              <1>  %assign rargc 1
 12557                              <1>  %else
 12558                              <1>  %rotate -2
 12559                              <1>  %assign argc %0-1
 12560                              <1>  %assign rargc 0
 12561                              <1>  %rep argc
 12562                              <1>  %ifidn %1,byte
 12563                              <1>  push byte %2
 12564                              <1>  %rotate -1
 12565                              <1>  %assign argc argc -1
 12566                              <1>  %assign rargc rargc +1
 12567                              <1>  %elifidn %1,word
 12568                              <1>  push word %2
 12569                              <1>  %rotate -1
 12570                              <1>  %assign argc argc -1
 12571                              <1>  %assign rargc rargc +1
 12572                              <1>  %elifidn %1,dword
 12573                              <1>  push dword %2
 12574                              <1>  %rotate -1
 12575                              <1>  %assign argc argc -1
 12576                              <1>  %assign rargc rargc +2
 12577                              <1>  %else
 12578                              <1>  push word %2
 12579                              <1>  %assign rargc rargc +1
 12580                              <1>  %endif
 12581                              <1>  %rotate -1
 12582                              <1>  %assign argc argc -1
 12583                              <1>  %if argc <=0
 12584                              <1>  %exitrep
 12585                              <1>  %endif
 12586                              <1>  %endrep
 12587                              <2>  %ifidn %1,byte
 12588                              <2>  push byte %2
 12589                              <2>  %rotate -1
 12590                              <2>  %assign argc argc -1
 12591                              <2>  %assign rargc rargc +1
 12592                              <2>  %elifidn %1,word
 12593                              <2>  push word %2
 12594                              <2>  %rotate -1
 12595                              <2>  %assign argc argc -1
 12596                              <2>  %assign rargc rargc +1
 12597                              <2>  %elifidn %1,dword
 12598                              <2>  push dword %2
 12599                              <2>  %rotate -1
 12600                              <2>  %assign argc argc -1
 12601                              <2>  %assign rargc rargc +2
 12602                              <2>  %else
 12603 00000AF0 680080              <2>  push word %2
 12604                              <2>  %assign rargc rargc +1
 12605                              <2>  %endif
 12606                              <2>  %rotate -1
 12607                              <2>  %assign argc argc -1
 12608                              <2>  %if argc <=0
 12609                              <2>  %exitrep
 12610                              <2>  %endif
 12611                              <2>  %ifidn %1,byte
 12612                              <2>  push byte %2
 12613                              <2>  %rotate -1
 12614                              <2>  %assign argc argc -1
 12615                              <2>  %assign rargc rargc +1
 12616                              <2>  %elifidn %1,word
 12617                              <2>  push word %2
 12618                              <2>  %rotate -1
 12619                              <2>  %assign argc argc -1
 12620                              <2>  %assign rargc rargc +1
 12621                              <2>  %elifidn %1,dword
 12622                              <2>  push dword %2
 12623                              <2>  %rotate -1
 12624                              <2>  %assign argc argc -1
 12625                              <2>  %assign rargc rargc +2
 12626                              <2>  %else
 12627 00000AF3 57                  <2>  push word %2
 12628                              <2>  %assign rargc rargc +1
 12629                              <2>  %endif
 12630                              <2>  %rotate -1
 12631                              <2>  %assign argc argc -1
 12632                              <2>  %if argc <=0
 12633                              <2>  %exitrep
 12634                              <2>  %endif
 12635                              <2>  %ifidn %1,byte
 12636                              <2>  push byte %2
 12637                              <2>  %rotate -1
 12638                              <2>  %assign argc argc -1
 12639                              <2>  %assign rargc rargc +1
 12640                              <2>  %elifidn %1,word
 12641                              <2>  push word %2
 12642                              <2>  %rotate -1
 12643                              <2>  %assign argc argc -1
 12644                              <2>  %assign rargc rargc +1
 12645                              <2>  %elifidn %1,dword
 12646                              <2>  push dword %2
 12647                              <2>  %rotate -1
 12648                              <2>  %assign argc argc -1
 12649                              <2>  %assign rargc rargc +2
 12650                              <2>  %else
 12651 00000AF4 06                  <2>  push word %2
 12652                              <2>  %assign rargc rargc +1
 12653                              <2>  %endif
 12654                              <2>  %rotate -1
 12655                              <2>  %assign argc argc -1
 12656                              <2>  %if argc <=0
 12657                              <2>  %exitrep
 12658                              <2>  %endif
 12659                              <2>  %ifidn %1,byte
 12660 00000AF5 6A00                <2>  push byte %2
 12661                              <2>  %rotate -1
 12662                              <2>  %assign argc argc -1
 12663                              <2>  %assign rargc rargc +1
 12664                              <2>  %elifidn %1,word
 12665                              <2>  push word %2
 12666                              <2>  %rotate -1
 12667                              <2>  %assign argc argc -1
 12668                              <2>  %assign rargc rargc +1
 12669                              <2>  %elifidn %1,dword
 12670                              <2>  push dword %2
 12671                              <2>  %rotate -1
 12672                              <2>  %assign argc argc -1
 12673                              <2>  %assign rargc rargc +2
 12674                              <2>  %else
 12675                              <2>  push word %2
 12676                              <2>  %assign rargc rargc +1
 12677                              <2>  %endif
 12678                              <2>  %rotate -1
 12679                              <2>  %assign argc argc -1
 12680                              <2>  %if argc <=0
 12681                              <2>  %exitrep
 12682                              <2>  %endif
 12683                              <1>  %rotate 1
 12684                              <1>  %endif
 12685 00000AF7 E868FB              <1>  call %1
 12686 00000AFA 83C408              <1>  add sp,(rargc)*2
 12687 00000AFD 09C0                    	or ax, ax
 12688 00000AFF 7512                    	jnz .fail
 12689 00000B01 81F90008                	cmp cx, CDSECTOR_SIZE
 12690 00000B05 750C                    	jne .fail
 12691 00000B07 665A                    	pop edx
 12692 00000B09 6642                    	inc edx
 12693 00000B0B 01CF                    	add di, cx
 12694 00000B0D 59                      	pop cx
 12695 00000B0E E2C8                    	loop .loop_read
 12696                                  
 12697 00000B10 F8                      	clc
 12698 00000B11 EB04                    	jmp short .end
 12699                                  
 12700                                  .fail:
 12701 00000B13 665A                    	pop edx
 12702 00000B15 59                      	pop cx
 12703                                  
 12704                                  .no_data:
 12705 00000B16 F9                      	stc
 12706                                  .end:
 12707                                  endp
 12708                              <1> %ifnctx proc
 12709                              <1>  %error "expected `proc' before `endp'"
 12710                              <1> %endif
 12711                              <1>  cat_lable %$return,__level__
 12712                              <2> %1%2:
 12713                              <1>  %if __save_all__ ==1
 12714 00000B17 61                  <1>  popa
 12715                              <1>  %elif __save_all__ == 2
 12716                              <1>  popad
 12717                              <1>  %elif __save_args__ > 0
 12718                              <1>  %assign i 1
 12719                              <1>  %rep __save_args__
 12720                              <1>  linecat pop, %$save_argv,i
 12721                              <1>  %assign i i+1
 12722                              <1>  %endrep
 12723                              <1>  %endif
 12724                              <1>  %if __have_frame__ > 0
 12725                              <1>  leave
 12726                              <1>  %endif
 12727                              <1> 
 12728                              <1>  %assign i 0
 12729                              <1>  %rep %$proc_args
 12730                              <1> 
 12731                              <1>  %assign i i+1
 12732                              <1>  %endrep
 12733                              <1> 
 12734                              <1>  %assign i 0
 12735                              <1>  %rep %$local_args
 12736                              <1> 
 12737                              <1>  %assign i i+1
 12738                              <1>  %endrep
 12739 00000B18 C3                  <1>  ret
 12740                              <1>  con_pop
 12741                              <2>  %pop
 12742                              <2>  %assign __level__ __level__ - 1
 12743                              <1>  %assign __return__ __return__ - 1
 12744                                  
 12745                                  proc init_atapi_cdroms
 12746                              <1> GLOBAL %1
 12747                              <1> %1:
 12748                              <1> con_push proc
 12749                              <2>  %assign __lastlevel__ __level__
 12750                              <2>  %assign __level__ __level__ + 1
 12751                              <2>  %if __return__ > 0
 12752                              <2>  %assign con_return 1
 12753                              <2>  %else
 12754                              <2>  %assign con_return 0
 12755                              <2>  %endif
 12756                              <2> 
 12757                              <2>  %if __cont__ > 0
 12758                              <2>  %assign con_cont 1
 12759                              <2>  %else
 12760                              <2>  %assign con_cont 0
 12761                              <2>  %endif
 12762                              <2>  %if __break__ > 0
 12763                              <2>  %assign con_break 1
 12764                              <2>  %else
 12765                              <2>  %assign con_break 0
 12766                              <2>  %endif
 12767                              <2> 
 12768                              <2>  %ifidn %1,proc
 12769                              <2>  %assign con_return 0
 12770                              <2>  %elifidn %1,forcx
 12771                              <2>  %assign con_break 0
 12772                              <2>  %elifidn %1,repeat
 12773                              <2>  %assign con_cont 0
 12774                              <2>  %assign con_break 0
 12775                              <2>  %elifidn %1,while
 12776                              <2>  %assign con_cont 0
 12777                              <2>  %assign con_break 0
 12778                              <2>  %endif
 12779                              <2> 
 12780                              <2>  %if __cndblock__ == 1
 12781                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 12782                              <2>  %endif
 12783                              <2> 
 12784                              <2>  %push %1
 12785                              <2>  %if con_return
 12786                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 12787                              <2>  %endif
 12788                              <2>  %if con_break
 12789                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 12790                              <3> %define %1%2 %3%4
 12791                              <2>  %endif
 12792                              <2>  %if con_cont
 12793                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 12794                              <3> %define %1%2 %3%4
 12795                              <2>  %endif
 12796                              <2> 
 12797                              <2>  %ifidn %1,andblock
 12798                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 12799                              <2>  %elifidn %1,orblock
 12800                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 12801                              <2>  %endif
 12802                              <1> %assign __return__ __return__ + 1
 12803                              <1> %assign __have_frame__ 0
 12804                              <1> %assign %$have_local 0
 12805                              <1> %assign %$have_save 0
 12806                              <1> %assign __save_all__ 0
 12807                              <1> %assign %$local_args 0
 12808                              <1> %assign %$proc_args 0
 12809                              <1> %assign __save_args__ 0
 12810                              <1> %if %0 > 1
 12811                              <1>  %assign args %0 - 1
 12812                              <1>  %assign %$bp_off 4
 12813                              <1>  %assign i 0
 12814                              <1>  %rotate 1
 12815                              <1>  %ifidn %1,withlocal
 12816                              <1>  %assign %$have_local 1
 12817                              <1>  %assign args args -1
 12818                              <1>  %rotate 1
 12819                              <1>  %endif
 12820                              <1>  %assign %$proc_args args
 12821                              <1>  %rep args
 12822                              <1> 
 12823                              <1>  %%inputarg__%1 EQU %$bp_off
 12824                              <1>  %undef .%1
 12825                              <1>  %define .%1 %%inputarg__%1+bp
 12826                              <1>  cat_define %$proc_argv ,i,%1
 12827                              <1>  %assign %$bp_off %$bp_off + 2
 12828                              <1>  %assign i i+1
 12829                              <1>  %rotate 1
 12830                              <1>  %endrep
 12831                              <1>  %if %$have_local==0
 12832                              <1>  enter 0,0
 12833                              <1>  %assign __have_frame__ 1
 12834                              <1>  %endif
 12835                              <1> %endif
 12836                                  ; return: cf =0 success, cx =number of cdroms
 12837                                  ;         cf =1 failed, no cdrom found
 12838                                  ;	push cs
 12839                                  ;	pop es
 12840                                  
 12841 00000B19 E845FE                  	call reg_probe
 12842 00000B1C 09C9                    	or cx, cx
 12843 00000B1E 7507                    	jnz .find_cdrom
 12844                                  
 12845 00000B20 E83EFE                  	call reg_probe
 12846 00000B23 09C9                    	or cx, cx
 12847 00000B25 7431                    	jz .nocdrom
 12848                                  
 12849                                  .find_cdrom:
 12850                                  %if 1
 12851 00000B27 BE[0900]                	mov si, atapi_dev_base
 12852 00000B2A BF[4900]                	mov di, atapi_dev_base_bak
 12853 00000B2D FC                      	cld
 12854 00000B2E 56                      	push si
 12855 00000B2F 57                      	push di
 12856 00000B30 31C0                    	xor ax, ax
 12857 00000B32 31DB                    	xor bx, bx
 12858                                  	forcx 
 12859                              <1> con_push forcx
 12860                              <2>  %assign __lastlevel__ __level__
 12861                              <2>  %assign __level__ __level__ + 1
 12862                              <2>  %if __return__ > 0
 12863                              <2>  %assign con_return 1
 12864                              <2>  %else
 12865                              <2>  %assign con_return 0
 12866                              <2>  %endif
 12867                              <2> 
 12868                              <2>  %if __cont__ > 0
 12869                              <2>  %assign con_cont 1
 12870                              <2>  %else
 12871                              <2>  %assign con_cont 0
 12872                              <2>  %endif
 12873                              <2>  %if __break__ > 0
 12874                              <2>  %assign con_break 1
 12875                              <2>  %else
 12876                              <2>  %assign con_break 0
 12877                              <2>  %endif
 12878                              <2> 
 12879                              <2>  %ifidn %1,proc
 12880                              <2>  %assign con_return 0
 12881                              <2>  %elifidn %1,forcx
 12882                              <2>  %assign con_break 0
 12883                              <2>  %elifidn %1,repeat
 12884                              <2>  %assign con_cont 0
 12885                              <2>  %assign con_break 0
 12886                              <2>  %elifidn %1,while
 12887                              <2>  %assign con_cont 0
 12888                              <2>  %assign con_break 0
 12889                              <2>  %endif
 12890                              <2> 
 12891                              <2>  %if __cndblock__ == 1
 12892                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 12893                              <2>  %endif
 12894                              <2> 
 12895                              <2>  %push %1
 12896                              <2>  %if con_return
 12897                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 12898                              <3> %define %1%2 %3%4
 12899                              <2>  %endif
 12900                              <2>  %if con_break
 12901                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 12902                              <2>  %endif
 12903                              <2>  %if con_cont
 12904                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 12905                              <3> %define %1%2 %3%4
 12906                              <2>  %endif
 12907                              <2> 
 12908                              <2>  %ifidn %1,andblock
 12909                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 12910                              <2>  %elifidn %1,orblock
 12911                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 12912                              <2>  %endif
 12913                              <1> %assign __break__ __break__ + 1
 12914                              <1> %if %0 > 0
 12915                              <1>  mov cx, %1
 12916                              <1> %endif
 12917                              <1> %$begin:
 12918 00000B34 E885FE                  		call select_atapi_force
 12919 00000B37 720A                    		jc .chk_next
 12920 00000B39 E86AFF                  		call check_atapi_cdrom
 12921 00000B3C 7205                    		jc .chk_next
 12922 00000B3E 43                      		inc bx
 12923 00000B3F A5                      		movsw
 12924 00000B40 A5                      		movsw
 12925 00000B41 EB03                    		jmp short .loop_next
 12926                                  		.chk_next:
 12927 00000B43 83C604                  		add si, 4
 12928                                  		.loop_next:
 12929 00000B46 40                      		inc ax
 12930                                  	endforcx
 12931                              <1>  %ifnctx forcx
 12932                              <1>  %error "expected `forcx' before `endfor'"
 12933                              <1>  %endif
 12934                              <1>  %if %0 > 0
 12935                              <1>  %ifidn %1,while
 12936                              <1>  %rotate 1
 12937                              <1>  cat_lable %$cont,__level__
 12938                              <1>  %rep %0 - 2
 12939                              <1>  %1
 12940                              <1>  %rotate 1
 12941                              <1>  %endrep
 12942                              <1>  %else
 12943                              <1>  %error "expected `while' after `endfor'"
 12944                              <1>  %endif
 12945                              <1>  loop%+1 %$begin
 12946                              <1>  %else
 12947 00000B47 E2EB                <1>  loop %$begin
 12948                              <1>  %endif
 12949                              <1>  %$end:
 12950                              <1>  cat_lable %$break,__level__
 12951                              <2> %1%2:
 12952                              <1> 
 12953                              <1>  con_pop
 12954                              <2>  %pop
 12955                              <2>  %assign __level__ __level__ - 1
 12956                              <1>  %assign __break__ __break__ - 1
 12957                                  
 12958 00000B49 5E                      	pop si
 12959 00000B4A 5F                      	pop di
 12960                                  
 12961 00000B4B B94000                  	mov cx, 64
 12962 00000B4E F3A4                    	rep movsb
 12963                                  
 12964 00000B50 891E[0700]              	mov [atapi_dev_count], bx
 12965 00000B54 89D9                    	mov cx, bx
 12966                                  %endif
 12967                                  
 12968 00000B56 F8                      	clc
 12969                                  	return
 12970                              <1>  %if %0 > 0
 12971                              <1>  %assign __near__ 0
 12972                              <1>  %assign argc %0
 12973                              <1>  %ifidn %1,near
 12974                              <1>  %assign __near__ 1
 12975                              <1>  %assign argc argc-1
 12976                              <1>  %rotate 1
 12977                              <1>  %endif
 12978                              <1>  %if argc > 0
 12979                              <1>  %ifidn %1,if
 12980                              <1> 
 12981                              <1>  %rotate 1
 12982                              <1>  %rep argc-2
 12983                              <1>  %1
 12984                              <1>  %rotate 1
 12985                              <1>  %endrep
 12986                              <1>  %if __near__ == 0
 12987                              <1>  cat_jc %1,%$return,__level__
 12988                              <1>  %else
 12989                              <1>  cat_jc_near %1,%$return,__level__
 12990                              <1>  %endif
 12991                              <1>  %else
 12992                              <1>  %error "expect `if' after `return'"
 12993                              <1>  %endif
 12994                              <1>  %else
 12995                              <1>  %if __near__ == 0
 12996                              <1>  cat_jmp %$return,__level__
 12997                              <1>  %else
 12998                              <1>  cat_jmp_near %$return,__level__
 12999                              <1>  %endif
 13000                              <1>  %endif
 13001                              <1>  %else
 13002                              <1>  %if __have_frame__ == 0 && __save_all__ == 0 && __save_args__ == 0
 13003 00000B57 C3                  <1>  ret
 13004                              <1>  %else
 13005                              <1>  cat_jmp %$return,__level__
 13006                              <1>  %endif
 13007                              <1>  %endif
 13008                                  
 13009                                  .nocdrom:
 13010 00000B58 F9                      	stc
 13011                                  endp
 13012                              <1> %ifnctx proc
 13013                              <1>  %error "expected `proc' before `endp'"
 13014                              <1> %endif
 13015                              <1>  cat_lable %$return,__level__
 13016                              <2> %1%2:
 13017                              <1>  %if __save_all__ ==1
 13018                              <1>  popa
 13019                              <1>  %elif __save_all__ == 2
 13020                              <1>  popad
 13021                              <1>  %elif __save_args__ > 0
 13022                              <1>  %assign i 1
 13023                              <1>  %rep __save_args__
 13024                              <1>  linecat pop, %$save_argv,i
 13025                              <1>  %assign i i+1
 13026                              <1>  %endrep
 13027                              <1>  %endif
 13028                              <1>  %if __have_frame__ > 0
 13029                              <1>  leave
 13030                              <1>  %endif
 13031                              <1> 
 13032                              <1>  %assign i 0
 13033                              <1>  %rep %$proc_args
 13034                              <1> 
 13035                              <1>  %assign i i+1
 13036                              <1>  %endrep
 13037                              <1> 
 13038                              <1>  %assign i 0
 13039                              <1>  %rep %$local_args
 13040                              <1> 
 13041                              <1>  %assign i i+1
 13042                              <1>  %endrep
 13043 00000B59 C3                  <1>  ret
 13044                              <1>  con_pop
 13045                              <2>  %pop
 13046                              <2>  %assign __level__ __level__ - 1
 13047                              <1>  %assign __return__ __return__ - 1
 13048                                  
 13049                                  proc reset_atapi_cdroms
 13050                              <1> GLOBAL %1
 13051                              <1> %1:
 13052                              <1> con_push proc
 13053                              <2>  %assign __lastlevel__ __level__
 13054                              <2>  %assign __level__ __level__ + 1
 13055                              <2>  %if __return__ > 0
 13056                              <2>  %assign con_return 1
 13057                              <2>  %else
 13058                              <2>  %assign con_return 0
 13059                              <2>  %endif
 13060                              <2> 
 13061                              <2>  %if __cont__ > 0
 13062                              <2>  %assign con_cont 1
 13063                              <2>  %else
 13064                              <2>  %assign con_cont 0
 13065                              <2>  %endif
 13066                              <2>  %if __break__ > 0
 13067                              <2>  %assign con_break 1
 13068                              <2>  %else
 13069                              <2>  %assign con_break 0
 13070                              <2>  %endif
 13071                              <2> 
 13072                              <2>  %ifidn %1,proc
 13073                              <2>  %assign con_return 0
 13074                              <2>  %elifidn %1,forcx
 13075                              <2>  %assign con_break 0
 13076                              <2>  %elifidn %1,repeat
 13077                              <2>  %assign con_cont 0
 13078                              <2>  %assign con_break 0
 13079                              <2>  %elifidn %1,while
 13080                              <2>  %assign con_cont 0
 13081                              <2>  %assign con_break 0
 13082                              <2>  %endif
 13083                              <2> 
 13084                              <2>  %if __cndblock__ == 1
 13085                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 13086                              <2>  %endif
 13087                              <2> 
 13088                              <2>  %push %1
 13089                              <2>  %if con_return
 13090                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 13091                              <2>  %endif
 13092                              <2>  %if con_break
 13093                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 13094                              <3> %define %1%2 %3%4
 13095                              <2>  %endif
 13096                              <2>  %if con_cont
 13097                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 13098                              <3> %define %1%2 %3%4
 13099                              <2>  %endif
 13100                              <2> 
 13101                              <2>  %ifidn %1,andblock
 13102                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 13103                              <2>  %elifidn %1,orblock
 13104                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 13105                              <2>  %endif
 13106                              <1> %assign __return__ __return__ + 1
 13107                              <1> %assign __have_frame__ 0
 13108                              <1> %assign %$have_local 0
 13109                              <1> %assign %$have_save 0
 13110                              <1> %assign __save_all__ 0
 13111                              <1> %assign %$local_args 0
 13112                              <1> %assign %$proc_args 0
 13113                              <1> %assign __save_args__ 0
 13114                              <1> %if %0 > 1
 13115                              <1>  %assign args %0 - 1
 13116                              <1>  %assign %$bp_off 4
 13117                              <1>  %assign i 0
 13118                              <1>  %rotate 1
 13119                              <1>  %ifidn %1,withlocal
 13120                              <1>  %assign %$have_local 1
 13121                              <1>  %assign args args -1
 13122                              <1>  %rotate 1
 13123                              <1>  %endif
 13124                              <1>  %assign %$proc_args args
 13125                              <1>  %rep args
 13126                              <1> 
 13127                              <1>  %%inputarg__%1 EQU %$bp_off
 13128                              <1>  %undef .%1
 13129                              <1>  %define .%1 %%inputarg__%1+bp
 13130                              <1>  cat_define %$proc_argv ,i,%1
 13131                              <1>  %assign %$bp_off %$bp_off + 2
 13132                              <1>  %assign i i+1
 13133                              <1>  %rotate 1
 13134                              <1>  %endrep
 13135                              <1>  %if %$have_local==0
 13136                              <1>  enter 0,0
 13137                              <1>  %assign __have_frame__ 1
 13138                              <1>  %endif
 13139                              <1> %endif
 13140 00000B5A 8B0E[0700]              	mov cx, [atapi_dev_count]
 13141 00000B5E 31C0                    	xor ax, ax
 13142                                  
 13143                                  	if {or cx, cx}, z
 13144                              <1>  %rep %0 -1
 13145                              <1>  %1
 13146                              <1>  %rotate 1
 13147                              <1>  %endrep
 13148 00000B60 09C9                <2>  %1
 13149                              <2>  %rotate 1
 13150                              <1> 
 13151                              <1>  con_push if
 13152                              <2>  %assign __lastlevel__ __level__
 13153                              <2>  %assign __level__ __level__ + 1
 13154                              <2>  %if __return__ > 0
 13155                              <2>  %assign con_return 1
 13156                              <2>  %else
 13157                              <2>  %assign con_return 0
 13158                              <2>  %endif
 13159                              <2> 
 13160                              <2>  %if __cont__ > 0
 13161                              <2>  %assign con_cont 1
 13162                              <2>  %else
 13163                              <2>  %assign con_cont 0
 13164                              <2>  %endif
 13165                              <2>  %if __break__ > 0
 13166                              <2>  %assign con_break 1
 13167                              <2>  %else
 13168                              <2>  %assign con_break 0
 13169                              <2>  %endif
 13170                              <2> 
 13171                              <2>  %ifidn %1,proc
 13172                              <2>  %assign con_return 0
 13173                              <2>  %elifidn %1,forcx
 13174                              <2>  %assign con_break 0
 13175                              <2>  %elifidn %1,repeat
 13176                              <2>  %assign con_cont 0
 13177                              <2>  %assign con_break 0
 13178                              <2>  %elifidn %1,while
 13179                              <2>  %assign con_cont 0
 13180                              <2>  %assign con_break 0
 13181                              <2>  %endif
 13182                              <2> 
 13183                              <2>  %if __cndblock__ == 1
 13184                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 13185                              <2>  %endif
 13186                              <2> 
 13187                              <2>  %push %1
 13188                              <2>  %if con_return
 13189                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 13190                              <3> %define %1%2 %3%4
 13191                              <2>  %endif
 13192                              <2>  %if con_break
 13193                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 13194                              <3> %define %1%2 %3%4
 13195                              <2>  %endif
 13196                              <2>  %if con_cont
 13197                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 13198                              <3> %define %1%2 %3%4
 13199                              <2>  %endif
 13200                              <2> 
 13201                              <2>  %ifidn %1,andblock
 13202                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 13203                              <2>  %elifidn %1,orblock
 13204                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 13205                              <2>  %endif
 13206                              <1> 
 13207                              <1>  %if %0 > 0
 13208 00000B62 7501                <1>  j%-1 %$ifnot
 13209                              <1>  %endif
 13210                              <1>  %assign %$elif_level 0
 13211                                  		return
 13212                              <1>  %if %0 > 0
 13213                              <1>  %assign __near__ 0
 13214                              <1>  %assign argc %0
 13215                              <1>  %ifidn %1,near
 13216                              <1>  %assign __near__ 1
 13217                              <1>  %assign argc argc-1
 13218                              <1>  %rotate 1
 13219                              <1>  %endif
 13220                              <1>  %if argc > 0
 13221                              <1>  %ifidn %1,if
 13222                              <1> 
 13223                              <1>  %rotate 1
 13224                              <1>  %rep argc-2
 13225                              <1>  %1
 13226                              <1>  %rotate 1
 13227                              <1>  %endrep
 13228                              <1>  %if __near__ == 0
 13229                              <1>  cat_jc %1,%$return,__level__
 13230                              <1>  %else
 13231                              <1>  cat_jc_near %1,%$return,__level__
 13232                              <1>  %endif
 13233                              <1>  %else
 13234                              <1>  %error "expect `if' after `return'"
 13235                              <1>  %endif
 13236                              <1>  %else
 13237                              <1>  %if __near__ == 0
 13238                              <1>  cat_jmp %$return,__level__
 13239                              <1>  %else
 13240                              <1>  cat_jmp_near %$return,__level__
 13241                              <1>  %endif
 13242                              <1>  %endif
 13243                              <1>  %else
 13244                              <1>  %if __have_frame__ == 0 && __save_all__ == 0 && __save_args__ == 0
 13245 00000B64 C3                  <1>  ret
 13246                              <1>  %else
 13247                              <1>  cat_jmp %$return,__level__
 13248                              <1>  %endif
 13249                              <1>  %endif
 13250                                  	endif
 13251                              <1>  %assign elselevel 0
 13252                              <1>  %ifctx if
 13253                              <1>  %$ifnot:
 13254                              <1>  con_pop
 13255                              <2>  %pop
 13256                              <2>  %assign __level__ __level__ - 1
 13257                              <1>  %elifctx else
 13258                              <1>  %assign elselevel %$elif_level
 13259                              <1>  %$ifend:
 13260                              <1>  con_pop
 13261                              <1>  %elifctx elif
 13262                              <1>  %assign elselevel %$elif_level
 13263                              <1>  %$ifnot:
 13264                              <1>  con_pop
 13265                              <1>  %else
 13266                              <1>  %error "expected `if' or `else' before `endif'"
 13267                              <1>  %endif
 13268                              <1>  %rep elselevel
 13269                              <1>  %$ifend:
 13270                              <1>  con_pop
 13271                              <1>  %endrep
 13272                                  
 13273                                  	forcx
 13274                              <1> con_push forcx
 13275                              <2>  %assign __lastlevel__ __level__
 13276                              <2>  %assign __level__ __level__ + 1
 13277                              <2>  %if __return__ > 0
 13278                              <2>  %assign con_return 1
 13279                              <2>  %else
 13280                              <2>  %assign con_return 0
 13281                              <2>  %endif
 13282                              <2> 
 13283                              <2>  %if __cont__ > 0
 13284                              <2>  %assign con_cont 1
 13285                              <2>  %else
 13286                              <2>  %assign con_cont 0
 13287                              <2>  %endif
 13288                              <2>  %if __break__ > 0
 13289                              <2>  %assign con_break 1
 13290                              <2>  %else
 13291                              <2>  %assign con_break 0
 13292                              <2>  %endif
 13293                              <2> 
 13294                              <2>  %ifidn %1,proc
 13295                              <2>  %assign con_return 0
 13296                              <2>  %elifidn %1,forcx
 13297                              <2>  %assign con_break 0
 13298                              <2>  %elifidn %1,repeat
 13299                              <2>  %assign con_cont 0
 13300                              <2>  %assign con_break 0
 13301                              <2>  %elifidn %1,while
 13302                              <2>  %assign con_cont 0
 13303                              <2>  %assign con_break 0
 13304                              <2>  %endif
 13305                              <2> 
 13306                              <2>  %if __cndblock__ == 1
 13307                              <2>  l_define %$ifnot,__lastlevel__,%$ifnot,{}
 13308                              <2>  %endif
 13309                              <2> 
 13310                              <2>  %push %1
 13311                              <2>  %if con_return
 13312                              <2>  l_define %$return,__level__,%$$return,__lastlevel__
 13313                              <3> %define %1%2 %3%4
 13314                              <2>  %endif
 13315                              <2>  %if con_break
 13316                              <2>  l_define %$break,__level__,%$$break,__lastlevel__
 13317                              <2>  %endif
 13318                              <2>  %if con_cont
 13319                              <2>  l_define %$cont,__level__,%$$cont,__lastlevel__
 13320                              <3> %define %1%2 %3%4
 13321                              <2>  %endif
 13322                              <2> 
 13323                              <2>  %ifidn %1,andblock
 13324                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 13325                              <2>  %elifidn %1,orblock
 13326                              <2>  l_define %$ifnot,__level__,%$$ifnot,__lastlevel__
 13327                              <2>  %endif
 13328                              <1> %assign __break__ __break__ + 1
 13329                              <1> %if %0 > 0
 13330                              <1>  mov cx, %1
 13331                              <1> %endif
 13332                              <1> %$begin:
 13333 00000B65 E84CFE                  		call select_atapi
 13334 00000B68 E8A2FD                  		call reg_reset
 13335 00000B6B 40                      		inc ax
 13336                                  	endforcx
 13337                              <1>  %ifnctx forcx
 13338                              <1>  %error "expected `forcx' before `endfor'"
 13339                              <1>  %endif
 13340                              <1>  %if %0 > 0
 13341                              <1>  %ifidn %1,while
 13342                              <1>  %rotate 1
 13343                              <1>  cat_lable %$cont,__level__
 13344                              <1>  %rep %0 - 2
 13345                              <1>  %1
 13346                              <1>  %rotate 1
 13347                              <1>  %endrep
 13348                              <1>  %else
 13349                              <1>  %error "expected `while' after `endfor'"
 13350                              <1>  %endif
 13351                              <1>  loop%+1 %$begin
 13352                              <1>  %else
 13353 00000B6C E2F7                <1>  loop %$begin
 13354                              <1>  %endif
 13355                              <1>  %$end:
 13356                              <1>  cat_lable %$break,__level__
 13357                              <2> %1%2:
 13358                              <1> 
 13359                              <1>  con_pop
 13360                              <2>  %pop
 13361                              <2>  %assign __level__ __level__ - 1
 13362                              <1>  %assign __break__ __break__ - 1
 13363                                  endp
 13364                              <1> %ifnctx proc
 13365                              <1>  %error "expected `proc' before `endp'"
 13366                              <1> %endif
 13367                              <1>  cat_lable %$return,__level__
 13368                              <2> %1%2:
 13369                              <1>  %if __save_all__ ==1
 13370                              <1>  popa
 13371                              <1>  %elif __save_all__ == 2
 13372                              <1>  popad
 13373                              <1>  %elif __save_args__ > 0
 13374                              <1>  %assign i 1
 13375                              <1>  %rep __save_args__
 13376                              <1>  linecat pop, %$save_argv,i
 13377                              <1>  %assign i i+1
 13378                              <1>  %endrep
 13379                              <1>  %endif
 13380                              <1>  %if __have_frame__ > 0
 13381                              <1>  leave
 13382                              <1>  %endif
 13383                              <1> 
 13384                              <1>  %assign i 0
 13385                              <1>  %rep %$proc_args
 13386                              <1> 
 13387                              <1>  %assign i i+1
 13388                              <1>  %endrep
 13389                              <1> 
 13390                              <1>  %assign i 0
 13391                              <1>  %rep %$local_args
 13392                              <1> 
 13393                              <1>  %assign i i+1
 13394                              <1>  %endrep
 13395 00000B6E C3                  <1>  ret
 13396                              <1>  con_pop
 13397                              <2>  %pop
 13398                              <2>  %assign __level__ __level__ - 1
 13399                              <1>  %assign __return__ __return__ - 1
 13400                                  
 13401                                  	section .data
 13402                                  
 13403                                  %ifdef SLOW_ATAPI_DEVICE
 13404                                  atapi_delay_flag	db 1
 13405                                  reg_slow_xfer_flag	db 1
 13406                                  %else
 13407 00000000 00                      atapi_delay_flag	db 0
 13408 00000001 00                      reg_slow_xfer_flag	db 0
 13409                                  %endif
 13410                                  
 13411 00000002 A0B0                    cmd_select_dev		db CB_DH_DEV0,CB_DH_DEV1
 13412 00000004 F001F60370017603        reg_base_addr		dw 0x1f0,0x3f6, 0x170,0x376
 13413 0000000C 80018603006B006F        			dw 0x180,0x386, 0x6b00,0x6f00
 13414 00000014 00730077                			dw 0x7300,0x7700
 13415                                  
 13416 00000018 0000000000000000        reg_base_addr_append	dw 0,0,0,0
 13417                                  
 13418                                  %endif			; DISABLE_CDBOOT
 13419                                  
 13420                                  	section .bss
 13421                                  
 13422                                  %ifndef DISABLE_CDBOOT
 13423                                  start_of_atapi_data:
 13424                                  
 13425 00000000 <res 00000002>          atapi_cur_dev		resw 1
 13426 00000002 <res 00000001>          reg_cur_dev		resb 1
 13427 00000003 <res 00000002>          time_out		resw 1
 13428 00000005 <res 00000002>          reg_dev_info		resb 2
 13429                                  
 13430 00000007 <res 00000002>          atapi_dev_count		resw 1 
 13431 00000009 <res 00000040>          atapi_dev_base		resw 2*16	; first word is the base pointer,
 13432                                  					; second word is the device
 13433 00000049 <res 00000040>          atapi_dev_base_bak	resw 2*16	; first word is the base pointer,
 13434                                  					; second word is the device
 13435 00000089 <res 00000014>          reg_addr		resw 10
 13436 0000009D <res 00000010>          atapi_cmd_buffer	resb 16
 13437 000000AD <res 00000100>          atapi_tmp_buffer	resb 256
 13438 000001AD <res 00000020>          atapi_devinfo		resb SIZE_OF_ATAPI_DEVINFO
 13439 000001CD <res 00000004>          delay_repeat_num	resd 1
 13440                                  
 13441                                  end_of_atapi_data:
 13442                                  %endif
 13443                                  
 13444                                  start_of_emu_data:
 13445                                  
 13446 000001D1 <res 00000006>          drive_map 	resw 3
 13447                                  
 13448                                  %ifndef DISABLE_CDBOOT
 13449 000001D7 <res 00000002>          emu_buf_off	resw 1
 13450 000001D9 <res 00000002>          emu_buf_seg	resw 1
 13451 000001DB <res 00000001>          emu_cdrom_id	resb 1
 13452 000001DC <res 00000001>          emu_disk_type	resb 1	;1=360 2=1.2 3=720 4=1.44 6=2.88 10h=atapi
 13453 000001DD <res 00000002>          emu_cyl		resw 1
 13454 000001DF <res 00000002>          emu_sec		resw 1
 13455 000001E1 <res 00000002>          emu_head	resw 1
 13456 000001E3 <res 00000004>          emu_last_read	resd 1
 13457                                  
 13458 000001E7 <res 00000001>          int13_last_stat resb 1
 13459                                  
 13460 000001E8 <res 00000013>          edd30_cdemu_spec resb SIZE_OF_CDEMU_SPEC
 13461 000001FB <res 00000010>          atapi_dpte_buffer resb SIZE_OF_DPTE
 13462 0000020B <res 00000800>          edd30_disk_buffer resb 0x800
 13463                                  %endif
 13464                                  
 13465                                  end_of_emu_data:
 13466                                  
